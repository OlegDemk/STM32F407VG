
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b24  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f3c  08008f3c  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08008f3c  08008f3c  00018f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f44  08008f44  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f44  08008f44  00018f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f48  08008f48  00018f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b4  20000098  08008fe4  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  08008fe4  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000225e0  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000459b  00000000  00000000  000426a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  00046c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c8  00000000  00000000  000483b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a03  00000000  00000000  00049978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020a4d  00000000  00000000  0006f37b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3d34  00000000  00000000  0008fdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00163afc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064e0  00000000  00000000  00163b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c94 	.word	0x08008c94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08008c94 	.word	0x08008c94

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b089      	sub	sp, #36	; 0x24
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4604      	mov	r4, r0
 80004c8:	4608      	mov	r0, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	461a      	mov	r2, r3
 80004ce:	4623      	mov	r3, r4
 80004d0:	71fb      	strb	r3, [r7, #7]
 80004d2:	4603      	mov	r3, r0
 80004d4:	71bb      	strb	r3, [r7, #6]
 80004d6:	460b      	mov	r3, r1
 80004d8:	717b      	strb	r3, [r7, #5]
 80004da:	4613      	mov	r3, r2
 80004dc:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80004e2:	7dfb      	ldrb	r3, [r7, #23]
 80004e4:	2b1f      	cmp	r3, #31
 80004e6:	d802      	bhi.n	80004ee <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	e002      	b.n	80004f4 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80004ee:	7dfb      	ldrb	r3, [r7, #23]
 80004f0:	3b20      	subs	r3, #32
 80004f2:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80004f4:	2300      	movs	r3, #0
 80004f6:	753b      	strb	r3, [r7, #20]
 80004f8:	e012      	b.n	8000520 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80004fa:	7dfa      	ldrb	r2, [r7, #23]
 80004fc:	7d38      	ldrb	r0, [r7, #20]
 80004fe:	7d39      	ldrb	r1, [r7, #20]
 8000500:	4c3c      	ldr	r4, [pc, #240]	; (80005f4 <ILI9341_Draw_Char+0x134>)
 8000502:	4613      	mov	r3, r2
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	4413      	add	r3, r2
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	4423      	add	r3, r4
 800050c:	4403      	add	r3, r0
 800050e:	781a      	ldrb	r2, [r3, #0]
 8000510:	f107 0318 	add.w	r3, r7, #24
 8000514:	440b      	add	r3, r1
 8000516:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800051a:	7d3b      	ldrb	r3, [r7, #20]
 800051c:	3301      	adds	r3, #1
 800051e:	753b      	strb	r3, [r7, #20]
 8000520:	7d3b      	ldrb	r3, [r7, #20]
 8000522:	2b05      	cmp	r3, #5
 8000524:	d9e9      	bls.n	80004fa <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000526:	79bb      	ldrb	r3, [r7, #6]
 8000528:	b298      	uxth	r0, r3
 800052a:	797b      	ldrb	r3, [r7, #5]
 800052c:	b299      	uxth	r1, r3
 800052e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000530:	461a      	mov	r2, r3
 8000532:	0052      	lsls	r2, r2, #1
 8000534:	4413      	add	r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	b29a      	uxth	r2, r3
 800053a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800053c:	00db      	lsls	r3, r3, #3
 800053e:	b29c      	uxth	r4, r3
 8000540:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	4623      	mov	r3, r4
 8000546:	f000 fc39 	bl	8000dbc <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800054a:	2300      	movs	r3, #0
 800054c:	757b      	strb	r3, [r7, #21]
 800054e:	e048      	b.n	80005e2 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000550:	2300      	movs	r3, #0
 8000552:	75bb      	strb	r3, [r7, #22]
 8000554:	e03f      	b.n	80005d6 <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8000556:	7d7b      	ldrb	r3, [r7, #21]
 8000558:	f107 0218 	add.w	r2, r7, #24
 800055c:	4413      	add	r3, r2
 800055e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000562:	461a      	mov	r2, r3
 8000564:	7dbb      	ldrb	r3, [r7, #22]
 8000566:	fa42 f303 	asr.w	r3, r2, r3
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	2b00      	cmp	r3, #0
 8000570:	d02e      	beq.n	80005d0 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 8000572:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000574:	2b01      	cmp	r3, #1
 8000576:	d110      	bne.n	800059a <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	b29a      	uxth	r2, r3
 800057c:	7d7b      	ldrb	r3, [r7, #21]
 800057e:	b29b      	uxth	r3, r3
 8000580:	4413      	add	r3, r2
 8000582:	b298      	uxth	r0, r3
 8000584:	797b      	ldrb	r3, [r7, #5]
 8000586:	b29a      	uxth	r2, r3
 8000588:	7dbb      	ldrb	r3, [r7, #22]
 800058a:	b29b      	uxth	r3, r3
 800058c:	4413      	add	r3, r2
 800058e:	b29b      	uxth	r3, r3
 8000590:	887a      	ldrh	r2, [r7, #2]
 8000592:	4619      	mov	r1, r3
 8000594:	f000 fb4a 	bl	8000c2c <ILI9341_Draw_Pixel>
 8000598:	e01a      	b.n	80005d0 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 800059a:	79bb      	ldrb	r3, [r7, #6]
 800059c:	b29a      	uxth	r2, r3
 800059e:	7d7b      	ldrb	r3, [r7, #21]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80005a4:	fb11 f303 	smulbb	r3, r1, r3
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4413      	add	r3, r2
 80005ac:	b298      	uxth	r0, r3
 80005ae:	797b      	ldrb	r3, [r7, #5]
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	7dbb      	ldrb	r3, [r7, #22]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80005b8:	fb11 f303 	smulbb	r3, r1, r3
 80005bc:	b29b      	uxth	r3, r3
 80005be:	4413      	add	r3, r2
 80005c0:	b299      	uxth	r1, r3
 80005c2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80005c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80005c6:	887b      	ldrh	r3, [r7, #2]
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	4623      	mov	r3, r4
 80005cc:	f000 fbf6 	bl	8000dbc <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80005d0:	7dbb      	ldrb	r3, [r7, #22]
 80005d2:	3301      	adds	r3, #1
 80005d4:	75bb      	strb	r3, [r7, #22]
 80005d6:	7dbb      	ldrb	r3, [r7, #22]
 80005d8:	2b07      	cmp	r3, #7
 80005da:	d9bc      	bls.n	8000556 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80005dc:	7d7b      	ldrb	r3, [r7, #21]
 80005de:	3301      	adds	r3, #1
 80005e0:	757b      	strb	r3, [r7, #21]
 80005e2:	7d7b      	ldrb	r3, [r7, #21]
 80005e4:	2b05      	cmp	r3, #5
 80005e6:	d9b3      	bls.n	8000550 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	371c      	adds	r7, #28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd90      	pop	{r4, r7, pc}
 80005f2:	bf00      	nop
 80005f4:	08008ce4 	.word	0x08008ce4

080005f8 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	4608      	mov	r0, r1
 8000602:	4611      	mov	r1, r2
 8000604:	461a      	mov	r2, r3
 8000606:	4603      	mov	r3, r0
 8000608:	70fb      	strb	r3, [r7, #3]
 800060a:	460b      	mov	r3, r1
 800060c:	70bb      	strb	r3, [r7, #2]
 800060e:	4613      	mov	r3, r2
 8000610:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8000612:	e017      	b.n	8000644 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	607a      	str	r2, [r7, #4]
 800061a:	7818      	ldrb	r0, [r3, #0]
 800061c:	883c      	ldrh	r4, [r7, #0]
 800061e:	78ba      	ldrb	r2, [r7, #2]
 8000620:	78f9      	ldrb	r1, [r7, #3]
 8000622:	8bbb      	ldrh	r3, [r7, #28]
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	8b3b      	ldrh	r3, [r7, #24]
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	4623      	mov	r3, r4
 800062c:	f7ff ff48 	bl	80004c0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000630:	8b3b      	ldrh	r3, [r7, #24]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	461a      	mov	r2, r3
 8000636:	0052      	lsls	r2, r2, #1
 8000638:	4413      	add	r3, r2
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	b2da      	uxtb	r2, r3
 800063e:	78fb      	ldrb	r3, [r7, #3]
 8000640:	4413      	add	r3, r2
 8000642:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d1e3      	bne.n	8000614 <ILI9341_Draw_Text+0x1c>
    }
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bd90      	pop	{r4, r7, pc}
	...

08000658 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800065c:	2200      	movs	r2, #0
 800065e:	2110      	movs	r1, #16
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <ILI9341_SPI_Init+0x14>)
 8000662:	f001 fd4f 	bl	8002104 <HAL_GPIO_WritePin>
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40021000 	.word	0x40021000

08000670 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800067a:	1df9      	adds	r1, r7, #7
 800067c:	2301      	movs	r3, #1
 800067e:	2201      	movs	r2, #1
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <ILI9341_SPI_Send+0x20>)
 8000682:	f004 fec8 	bl	8005416 <HAL_SPI_Transmit>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200000c8 	.word	0x200000c8

08000694 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2110      	movs	r1, #16
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <ILI9341_Write_Command+0x38>)
 80006a4:	f001 fd2e 	bl	8002104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80006a8:	2200      	movs	r2, #0
 80006aa:	2140      	movs	r1, #64	; 0x40
 80006ac:	4807      	ldr	r0, [pc, #28]	; (80006cc <ILI9341_Write_Command+0x38>)
 80006ae:	f001 fd29 	bl	8002104 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ffdb 	bl	8000670 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80006ba:	2201      	movs	r2, #1
 80006bc:	2110      	movs	r1, #16
 80006be:	4803      	ldr	r0, [pc, #12]	; (80006cc <ILI9341_Write_Command+0x38>)
 80006c0:	f001 fd20 	bl	8002104 <HAL_GPIO_WritePin>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000

080006d0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80006da:	2201      	movs	r2, #1
 80006dc:	2140      	movs	r1, #64	; 0x40
 80006de:	480a      	ldr	r0, [pc, #40]	; (8000708 <ILI9341_Write_Data+0x38>)
 80006e0:	f001 fd10 	bl	8002104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2110      	movs	r1, #16
 80006e8:	4807      	ldr	r0, [pc, #28]	; (8000708 <ILI9341_Write_Data+0x38>)
 80006ea:	f001 fd0b 	bl	8002104 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ffbd 	bl	8000670 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2110      	movs	r1, #16
 80006fa:	4803      	ldr	r0, [pc, #12]	; (8000708 <ILI9341_Write_Data+0x38>)
 80006fc:	f001 fd02 	bl	8002104 <HAL_GPIO_WritePin>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40021000 	.word	0x40021000

0800070c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4604      	mov	r4, r0
 8000714:	4608      	mov	r0, r1
 8000716:	4611      	mov	r1, r2
 8000718:	461a      	mov	r2, r3
 800071a:	4623      	mov	r3, r4
 800071c:	80fb      	strh	r3, [r7, #6]
 800071e:	4603      	mov	r3, r0
 8000720:	80bb      	strh	r3, [r7, #4]
 8000722:	460b      	mov	r3, r1
 8000724:	807b      	strh	r3, [r7, #2]
 8000726:	4613      	mov	r3, r2
 8000728:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800072a:	202a      	movs	r0, #42	; 0x2a
 800072c:	f7ff ffb2 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000730:	88fb      	ldrh	r3, [r7, #6]
 8000732:	0a1b      	lsrs	r3, r3, #8
 8000734:	b29b      	uxth	r3, r3
 8000736:	b2db      	uxtb	r3, r3
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ffc9 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800073e:	88fb      	ldrh	r3, [r7, #6]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ffc4 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000748:	887b      	ldrh	r3, [r7, #2]
 800074a:	0a1b      	lsrs	r3, r3, #8
 800074c:	b29b      	uxth	r3, r3
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ffbd 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000756:	887b      	ldrh	r3, [r7, #2]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffb8 	bl	80006d0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000760:	202b      	movs	r0, #43	; 0x2b
 8000762:	f7ff ff97 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000766:	88bb      	ldrh	r3, [r7, #4]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	b29b      	uxth	r3, r3
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ffae 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000774:	88bb      	ldrh	r3, [r7, #4]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ffa9 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800077e:	883b      	ldrh	r3, [r7, #0]
 8000780:	0a1b      	lsrs	r3, r3, #8
 8000782:	b29b      	uxth	r3, r3
 8000784:	b2db      	uxtb	r3, r3
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ffa2 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800078c:	883b      	ldrh	r3, [r7, #0]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff9d 	bl	80006d0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000796:	202c      	movs	r0, #44	; 0x2c
 8000798:	f7ff ff7c 	bl	8000694 <ILI9341_Write_Command>
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd90      	pop	{r4, r7, pc}

080007a4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2120      	movs	r1, #32
 80007ac:	480a      	ldr	r0, [pc, #40]	; (80007d8 <ILI9341_Reset+0x34>)
 80007ae:	f001 fca9 	bl	8002104 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80007b2:	20c8      	movs	r0, #200	; 0xc8
 80007b4:	f001 f9d4 	bl	8001b60 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2110      	movs	r1, #16
 80007bc:	4806      	ldr	r0, [pc, #24]	; (80007d8 <ILI9341_Reset+0x34>)
 80007be:	f001 fca1 	bl	8002104 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80007c2:	20c8      	movs	r0, #200	; 0xc8
 80007c4:	f001 f9cc 	bl	8001b60 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80007c8:	2201      	movs	r2, #1
 80007ca:	2120      	movs	r1, #32
 80007cc:	4802      	ldr	r0, [pc, #8]	; (80007d8 <ILI9341_Reset+0x34>)
 80007ce:	f001 fc99 	bl	8002104 <HAL_GPIO_WritePin>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80007ea:	2036      	movs	r0, #54	; 0x36
 80007ec:	f7ff ff52 	bl	8000694 <ILI9341_Write_Command>
HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f001 f9b5 	bl	8001b60 <HAL_Delay>
	
switch(screen_rotation) 
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	d837      	bhi.n	800086c <ILI9341_Set_Rotation+0x90>
 80007fc:	a201      	add	r2, pc, #4	; (adr r2, 8000804 <ILI9341_Set_Rotation+0x28>)
 80007fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000802:	bf00      	nop
 8000804:	08000815 	.word	0x08000815
 8000808:	0800082b 	.word	0x0800082b
 800080c:	08000841 	.word	0x08000841
 8000810:	08000857 	.word	0x08000857
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000814:	2048      	movs	r0, #72	; 0x48
 8000816:	f7ff ff5b 	bl	80006d0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <ILI9341_Set_Rotation+0x9c>)
 800081c:	22f0      	movs	r2, #240	; 0xf0
 800081e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <ILI9341_Set_Rotation+0xa0>)
 8000822:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000826:	801a      	strh	r2, [r3, #0]
			break;
 8000828:	e021      	b.n	800086e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800082a:	2028      	movs	r0, #40	; 0x28
 800082c:	f7ff ff50 	bl	80006d0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <ILI9341_Set_Rotation+0x9c>)
 8000832:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000836:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000838:	4b10      	ldr	r3, [pc, #64]	; (800087c <ILI9341_Set_Rotation+0xa0>)
 800083a:	22f0      	movs	r2, #240	; 0xf0
 800083c:	801a      	strh	r2, [r3, #0]
			break;
 800083e:	e016      	b.n	800086e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000840:	2088      	movs	r0, #136	; 0x88
 8000842:	f7ff ff45 	bl	80006d0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <ILI9341_Set_Rotation+0x9c>)
 8000848:	22f0      	movs	r2, #240	; 0xf0
 800084a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <ILI9341_Set_Rotation+0xa0>)
 800084e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000852:	801a      	strh	r2, [r3, #0]
			break;
 8000854:	e00b      	b.n	800086e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000856:	20e8      	movs	r0, #232	; 0xe8
 8000858:	f7ff ff3a 	bl	80006d0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <ILI9341_Set_Rotation+0x9c>)
 800085e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000862:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <ILI9341_Set_Rotation+0xa0>)
 8000866:	22f0      	movs	r2, #240	; 0xf0
 8000868:	801a      	strh	r2, [r3, #0]
			break;
 800086a:	e000      	b.n	800086e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800086c:	bf00      	nop
	}
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000002 	.word	0x20000002
 800087c:	20000000 	.word	0x20000000

08000880 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2120      	movs	r1, #32
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <ILI9341_Enable+0x14>)
 800088a:	f001 fc3b 	bl	8002104 <HAL_GPIO_WritePin>
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800089c:	f7ff fff0 	bl	8000880 <ILI9341_Enable>
ILI9341_SPI_Init();
 80008a0:	f7ff feda 	bl	8000658 <ILI9341_SPI_Init>
ILI9341_Reset();
 80008a4:	f7ff ff7e 	bl	80007a4 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80008a8:	2001      	movs	r0, #1
 80008aa:	f7ff fef3 	bl	8000694 <ILI9341_Write_Command>
HAL_Delay(1000);
 80008ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b2:	f001 f955 	bl	8001b60 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80008b6:	20cb      	movs	r0, #203	; 0xcb
 80008b8:	f7ff feec 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80008bc:	2039      	movs	r0, #57	; 0x39
 80008be:	f7ff ff07 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80008c2:	202c      	movs	r0, #44	; 0x2c
 80008c4:	f7ff ff04 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff ff01 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80008ce:	2034      	movs	r0, #52	; 0x34
 80008d0:	f7ff fefe 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80008d4:	2002      	movs	r0, #2
 80008d6:	f7ff fefb 	bl	80006d0 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80008da:	20cf      	movs	r0, #207	; 0xcf
 80008dc:	f7ff feda 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff fef5 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80008e6:	20c1      	movs	r0, #193	; 0xc1
 80008e8:	f7ff fef2 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80008ec:	2030      	movs	r0, #48	; 0x30
 80008ee:	f7ff feef 	bl	80006d0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80008f2:	20e8      	movs	r0, #232	; 0xe8
 80008f4:	f7ff fece 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80008f8:	2085      	movs	r0, #133	; 0x85
 80008fa:	f7ff fee9 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80008fe:	2000      	movs	r0, #0
 8000900:	f7ff fee6 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000904:	2078      	movs	r0, #120	; 0x78
 8000906:	f7ff fee3 	bl	80006d0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800090a:	20ea      	movs	r0, #234	; 0xea
 800090c:	f7ff fec2 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fedd 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000916:	2000      	movs	r0, #0
 8000918:	f7ff feda 	bl	80006d0 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800091c:	20ed      	movs	r0, #237	; 0xed
 800091e:	f7ff feb9 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000922:	2064      	movs	r0, #100	; 0x64
 8000924:	f7ff fed4 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000928:	2003      	movs	r0, #3
 800092a:	f7ff fed1 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800092e:	2012      	movs	r0, #18
 8000930:	f7ff fece 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000934:	2081      	movs	r0, #129	; 0x81
 8000936:	f7ff fecb 	bl	80006d0 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800093a:	20f7      	movs	r0, #247	; 0xf7
 800093c:	f7ff feaa 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000940:	2020      	movs	r0, #32
 8000942:	f7ff fec5 	bl	80006d0 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000946:	20c0      	movs	r0, #192	; 0xc0
 8000948:	f7ff fea4 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800094c:	2023      	movs	r0, #35	; 0x23
 800094e:	f7ff febf 	bl	80006d0 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000952:	20c1      	movs	r0, #193	; 0xc1
 8000954:	f7ff fe9e 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000958:	2010      	movs	r0, #16
 800095a:	f7ff feb9 	bl	80006d0 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800095e:	20c5      	movs	r0, #197	; 0xc5
 8000960:	f7ff fe98 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000964:	203e      	movs	r0, #62	; 0x3e
 8000966:	f7ff feb3 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800096a:	2028      	movs	r0, #40	; 0x28
 800096c:	f7ff feb0 	bl	80006d0 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000970:	20c7      	movs	r0, #199	; 0xc7
 8000972:	f7ff fe8f 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000976:	2086      	movs	r0, #134	; 0x86
 8000978:	f7ff feaa 	bl	80006d0 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 800097c:	2036      	movs	r0, #54	; 0x36
 800097e:	f7ff fe89 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000982:	2048      	movs	r0, #72	; 0x48
 8000984:	f7ff fea4 	bl	80006d0 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000988:	203a      	movs	r0, #58	; 0x3a
 800098a:	f7ff fe83 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800098e:	2055      	movs	r0, #85	; 0x55
 8000990:	f7ff fe9e 	bl	80006d0 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000994:	20b1      	movs	r0, #177	; 0xb1
 8000996:	f7ff fe7d 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff fe98 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80009a0:	2018      	movs	r0, #24
 80009a2:	f7ff fe95 	bl	80006d0 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80009a6:	20b6      	movs	r0, #182	; 0xb6
 80009a8:	f7ff fe74 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80009ac:	2008      	movs	r0, #8
 80009ae:	f7ff fe8f 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80009b2:	2082      	movs	r0, #130	; 0x82
 80009b4:	f7ff fe8c 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80009b8:	2027      	movs	r0, #39	; 0x27
 80009ba:	f7ff fe89 	bl	80006d0 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80009be:	20f2      	movs	r0, #242	; 0xf2
 80009c0:	f7ff fe68 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff fe83 	bl	80006d0 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80009ca:	2026      	movs	r0, #38	; 0x26
 80009cc:	f7ff fe62 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80009d0:	2001      	movs	r0, #1
 80009d2:	f7ff fe7d 	bl	80006d0 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80009d6:	20e0      	movs	r0, #224	; 0xe0
 80009d8:	f7ff fe5c 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80009dc:	200f      	movs	r0, #15
 80009de:	f7ff fe77 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80009e2:	2031      	movs	r0, #49	; 0x31
 80009e4:	f7ff fe74 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80009e8:	202b      	movs	r0, #43	; 0x2b
 80009ea:	f7ff fe71 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80009ee:	200c      	movs	r0, #12
 80009f0:	f7ff fe6e 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80009f4:	200e      	movs	r0, #14
 80009f6:	f7ff fe6b 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80009fa:	2008      	movs	r0, #8
 80009fc:	f7ff fe68 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000a00:	204e      	movs	r0, #78	; 0x4e
 8000a02:	f7ff fe65 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000a06:	20f1      	movs	r0, #241	; 0xf1
 8000a08:	f7ff fe62 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000a0c:	2037      	movs	r0, #55	; 0x37
 8000a0e:	f7ff fe5f 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000a12:	2007      	movs	r0, #7
 8000a14:	f7ff fe5c 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000a18:	2010      	movs	r0, #16
 8000a1a:	f7ff fe59 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000a1e:	2003      	movs	r0, #3
 8000a20:	f7ff fe56 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000a24:	200e      	movs	r0, #14
 8000a26:	f7ff fe53 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000a2a:	2009      	movs	r0, #9
 8000a2c:	f7ff fe50 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f7ff fe4d 	bl	80006d0 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000a36:	20e1      	movs	r0, #225	; 0xe1
 8000a38:	f7ff fe2c 	bl	8000694 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff fe47 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000a42:	200e      	movs	r0, #14
 8000a44:	f7ff fe44 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000a48:	2014      	movs	r0, #20
 8000a4a:	f7ff fe41 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000a4e:	2003      	movs	r0, #3
 8000a50:	f7ff fe3e 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000a54:	2011      	movs	r0, #17
 8000a56:	f7ff fe3b 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000a5a:	2007      	movs	r0, #7
 8000a5c:	f7ff fe38 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000a60:	2031      	movs	r0, #49	; 0x31
 8000a62:	f7ff fe35 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000a66:	20c1      	movs	r0, #193	; 0xc1
 8000a68:	f7ff fe32 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000a6c:	2048      	movs	r0, #72	; 0x48
 8000a6e:	f7ff fe2f 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000a72:	2008      	movs	r0, #8
 8000a74:	f7ff fe2c 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000a78:	200f      	movs	r0, #15
 8000a7a:	f7ff fe29 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000a7e:	200c      	movs	r0, #12
 8000a80:	f7ff fe26 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000a84:	2031      	movs	r0, #49	; 0x31
 8000a86:	f7ff fe23 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000a8a:	2036      	movs	r0, #54	; 0x36
 8000a8c:	f7ff fe20 	bl	80006d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000a90:	200f      	movs	r0, #15
 8000a92:	f7ff fe1d 	bl	80006d0 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000a96:	2011      	movs	r0, #17
 8000a98:	f7ff fdfc 	bl	8000694 <ILI9341_Write_Command>
HAL_Delay(120);
 8000a9c:	2078      	movs	r0, #120	; 0x78
 8000a9e:	f001 f85f 	bl	8001b60 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000aa2:	2029      	movs	r0, #41	; 0x29
 8000aa4:	f7ff fdf6 	bl	8000694 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f7ff fe97 	bl	80007dc <ILI9341_Set_Rotation>
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000ab4:	b5b0      	push	{r4, r5, r7, lr}
 8000ab6:	b08c      	sub	sp, #48	; 0x30
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	80fb      	strh	r3, [r7, #6]
 8000ac0:	466b      	mov	r3, sp
 8000ac2:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ad0:	d202      	bcs.n	8000ad8 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad6:	e002      	b.n	8000ade <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000ad8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2140      	movs	r1, #64	; 0x40
 8000ae2:	483d      	ldr	r0, [pc, #244]	; (8000bd8 <ILI9341_Draw_Colour_Burst+0x124>)
 8000ae4:	f001 fb0e 	bl	8002104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2110      	movs	r1, #16
 8000aec:	483a      	ldr	r0, [pc, #232]	; (8000bd8 <ILI9341_Draw_Colour_Burst+0x124>)
 8000aee:	f001 fb09 	bl	8002104 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000afc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000afe:	4623      	mov	r3, r4
 8000b00:	3b01      	subs	r3, #1
 8000b02:	61fb      	str	r3, [r7, #28]
 8000b04:	4620      	mov	r0, r4
 8000b06:	f04f 0100 	mov.w	r1, #0
 8000b0a:	f04f 0200 	mov.w	r2, #0
 8000b0e:	f04f 0300 	mov.w	r3, #0
 8000b12:	00cb      	lsls	r3, r1, #3
 8000b14:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b18:	00c2      	lsls	r2, r0, #3
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	f04f 0100 	mov.w	r1, #0
 8000b20:	f04f 0200 	mov.w	r2, #0
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	00cb      	lsls	r3, r1, #3
 8000b2a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b2e:	00c2      	lsls	r2, r0, #3
 8000b30:	1de3      	adds	r3, r4, #7
 8000b32:	08db      	lsrs	r3, r3, #3
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	ebad 0d03 	sub.w	sp, sp, r3
 8000b3a:	466b      	mov	r3, sp
 8000b3c:	3300      	adds	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b44:	e00e      	b.n	8000b64 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4a:	4413      	add	r3, r2
 8000b4c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000b50:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b54:	3301      	adds	r3, #1
 8000b56:	88fa      	ldrh	r2, [r7, #6]
 8000b58:	b2d1      	uxtb	r1, r2
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b60:	3302      	adds	r3, #2
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d3ec      	bcc.n	8000b46 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7a:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b80:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b86:	fb01 f202 	mul.w	r2, r1, r2
 8000b8a:	1a9b      	subs	r3, r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d010      	beq.n	8000bb6 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b98:	e009      	b.n	8000bae <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000b9a:	69b9      	ldr	r1, [r7, #24]
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	230a      	movs	r3, #10
 8000ba2:	480e      	ldr	r0, [pc, #56]	; (8000bdc <ILI9341_Draw_Colour_Burst+0x128>)
 8000ba4:	f004 fc37 	bl	8005416 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000baa:	3301      	adds	r3, #1
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d3f1      	bcc.n	8000b9a <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000bb6:	69b9      	ldr	r1, [r7, #24]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	230a      	movs	r3, #10
 8000bbe:	4807      	ldr	r0, [pc, #28]	; (8000bdc <ILI9341_Draw_Colour_Burst+0x128>)
 8000bc0:	f004 fc29 	bl	8005416 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2110      	movs	r1, #16
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <ILI9341_Draw_Colour_Burst+0x124>)
 8000bca:	f001 fa9b 	bl	8002104 <HAL_GPIO_WritePin>
 8000bce:	46ad      	mov	sp, r5
}
 8000bd0:	bf00      	nop
 8000bd2:	3730      	adds	r7, #48	; 0x30
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	200000c8 	.word	0x200000c8

08000be0 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <ILI9341_Fill_Screen+0x44>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <ILI9341_Fill_Screen+0x48>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff fd87 	bl	800070c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <ILI9341_Fill_Screen+0x44>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <ILI9341_Fill_Screen+0x48>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	fb03 f302 	mul.w	r3, r3, r2
 8000c10:	461a      	mov	r2, r3
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff4c 	bl	8000ab4 <ILI9341_Draw_Colour_Burst>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000002 	.word	0x20000002
 8000c28:	20000000 	.word	0x20000000

08000c2c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	80fb      	strh	r3, [r7, #6]
 8000c36:	460b      	mov	r3, r1
 8000c38:	80bb      	strh	r3, [r7, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000c3e:	4b5b      	ldr	r3, [pc, #364]	; (8000dac <ILI9341_Draw_Pixel+0x180>)
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	88fa      	ldrh	r2, [r7, #6]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	f080 80ac 	bcs.w	8000da4 <ILI9341_Draw_Pixel+0x178>
 8000c4c:	4b58      	ldr	r3, [pc, #352]	; (8000db0 <ILI9341_Draw_Pixel+0x184>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	88ba      	ldrh	r2, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	f080 80a5 	bcs.w	8000da4 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2140      	movs	r1, #64	; 0x40
 8000c5e:	4855      	ldr	r0, [pc, #340]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000c60:	f001 fa50 	bl	8002104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2110      	movs	r1, #16
 8000c68:	4852      	ldr	r0, [pc, #328]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000c6a:	f001 fa4b 	bl	8002104 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000c6e:	202a      	movs	r0, #42	; 0x2a
 8000c70:	f7ff fcfe 	bl	8000670 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000c74:	2201      	movs	r2, #1
 8000c76:	2140      	movs	r1, #64	; 0x40
 8000c78:	484e      	ldr	r0, [pc, #312]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000c7a:	f001 fa43 	bl	8002104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2110      	movs	r1, #16
 8000c82:	484c      	ldr	r0, [pc, #304]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000c84:	f001 fa3e 	bl	8002104 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2110      	movs	r1, #16
 8000c8c:	4849      	ldr	r0, [pc, #292]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000c8e:	f001 fa39 	bl	8002104 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	753b      	strb	r3, [r7, #20]
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	757b      	strb	r3, [r7, #21]
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	121b      	asrs	r3, r3, #8
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	75bb      	strb	r3, [r7, #22]
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000cb6:	f107 0114 	add.w	r1, r7, #20
 8000cba:	2301      	movs	r3, #1
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	483e      	ldr	r0, [pc, #248]	; (8000db8 <ILI9341_Draw_Pixel+0x18c>)
 8000cc0:	f004 fba9 	bl	8005416 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2110      	movs	r1, #16
 8000cc8:	483a      	ldr	r0, [pc, #232]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000cca:	f001 fa1b 	bl	8002104 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2140      	movs	r1, #64	; 0x40
 8000cd2:	4838      	ldr	r0, [pc, #224]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000cd4:	f001 fa16 	bl	8002104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2110      	movs	r1, #16
 8000cdc:	4835      	ldr	r0, [pc, #212]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000cde:	f001 fa11 	bl	8002104 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000ce2:	202b      	movs	r0, #43	; 0x2b
 8000ce4:	f7ff fcc4 	bl	8000670 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2140      	movs	r1, #64	; 0x40
 8000cec:	4831      	ldr	r0, [pc, #196]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000cee:	f001 fa09 	bl	8002104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	482f      	ldr	r0, [pc, #188]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000cf8:	f001 fa04 	bl	8002104 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2110      	movs	r1, #16
 8000d00:	482c      	ldr	r0, [pc, #176]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000d02:	f001 f9ff 	bl	8002104 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000d06:	88bb      	ldrh	r3, [r7, #4]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	743b      	strb	r3, [r7, #16]
 8000d10:	88bb      	ldrh	r3, [r7, #4]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	747b      	strb	r3, [r7, #17]
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	121b      	asrs	r3, r3, #8
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	74bb      	strb	r3, [r7, #18]
 8000d20:	88bb      	ldrh	r3, [r7, #4]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	3301      	adds	r3, #1
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000d2a:	f107 0110 	add.w	r1, r7, #16
 8000d2e:	2301      	movs	r3, #1
 8000d30:	2204      	movs	r2, #4
 8000d32:	4821      	ldr	r0, [pc, #132]	; (8000db8 <ILI9341_Draw_Pixel+0x18c>)
 8000d34:	f004 fb6f 	bl	8005416 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2110      	movs	r1, #16
 8000d3c:	481d      	ldr	r0, [pc, #116]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000d3e:	f001 f9e1 	bl	8002104 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000d42:	2200      	movs	r2, #0
 8000d44:	2140      	movs	r1, #64	; 0x40
 8000d46:	481b      	ldr	r0, [pc, #108]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000d48:	f001 f9dc 	bl	8002104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2110      	movs	r1, #16
 8000d50:	4818      	ldr	r0, [pc, #96]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000d52:	f001 f9d7 	bl	8002104 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000d56:	202c      	movs	r0, #44	; 0x2c
 8000d58:	f7ff fc8a 	bl	8000670 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2140      	movs	r1, #64	; 0x40
 8000d60:	4814      	ldr	r0, [pc, #80]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000d62:	f001 f9cf 	bl	8002104 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000d66:	2201      	movs	r2, #1
 8000d68:	2110      	movs	r1, #16
 8000d6a:	4812      	ldr	r0, [pc, #72]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000d6c:	f001 f9ca 	bl	8002104 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2110      	movs	r1, #16
 8000d74:	480f      	ldr	r0, [pc, #60]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000d76:	f001 f9c5 	bl	8002104 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	733b      	strb	r3, [r7, #12]
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000d8a:	f107 010c 	add.w	r1, r7, #12
 8000d8e:	2301      	movs	r3, #1
 8000d90:	2202      	movs	r2, #2
 8000d92:	4809      	ldr	r0, [pc, #36]	; (8000db8 <ILI9341_Draw_Pixel+0x18c>)
 8000d94:	f004 fb3f 	bl	8005416 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2110      	movs	r1, #16
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <ILI9341_Draw_Pixel+0x188>)
 8000d9e:	f001 f9b1 	bl	8002104 <HAL_GPIO_WritePin>
 8000da2:	e000      	b.n	8000da6 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000da4:	bf00      	nop
	
}
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000002 	.word	0x20000002
 8000db0:	20000000 	.word	0x20000000
 8000db4:	40021000 	.word	0x40021000
 8000db8:	200000c8 	.word	0x200000c8

08000dbc <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4623      	mov	r3, r4
 8000dcc:	80fb      	strh	r3, [r7, #6]
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80bb      	strh	r3, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	807b      	strh	r3, [r7, #2]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000dda:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <ILI9341_Draw_Rectangle+0xb0>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	88fa      	ldrh	r2, [r7, #6]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d23d      	bcs.n	8000e62 <ILI9341_Draw_Rectangle+0xa6>
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <ILI9341_Draw_Rectangle+0xb4>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	88ba      	ldrh	r2, [r7, #4]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d237      	bcs.n	8000e62 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8000df2:	88fa      	ldrh	r2, [r7, #6]
 8000df4:	887b      	ldrh	r3, [r7, #2]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <ILI9341_Draw_Rectangle+0xb0>)
 8000dfa:	8812      	ldrh	r2, [r2, #0]
 8000dfc:	b292      	uxth	r2, r2
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	dd05      	ble.n	8000e0e <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <ILI9341_Draw_Rectangle+0xb0>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8000e0e:	88ba      	ldrh	r2, [r7, #4]
 8000e10:	883b      	ldrh	r3, [r7, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a16      	ldr	r2, [pc, #88]	; (8000e70 <ILI9341_Draw_Rectangle+0xb4>)
 8000e16:	8812      	ldrh	r2, [r2, #0]
 8000e18:	b292      	uxth	r2, r2
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	dd05      	ble.n	8000e2a <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <ILI9341_Draw_Rectangle+0xb4>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	88bb      	ldrh	r3, [r7, #4]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8000e2a:	88fa      	ldrh	r2, [r7, #6]
 8000e2c:	887b      	ldrh	r3, [r7, #2]
 8000e2e:	4413      	add	r3, r2
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	3b01      	subs	r3, #1
 8000e34:	b29c      	uxth	r4, r3
 8000e36:	88ba      	ldrh	r2, [r7, #4]
 8000e38:	883b      	ldrh	r3, [r7, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	88b9      	ldrh	r1, [r7, #4]
 8000e44:	88f8      	ldrh	r0, [r7, #6]
 8000e46:	4622      	mov	r2, r4
 8000e48:	f7ff fc60 	bl	800070c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8000e4c:	883b      	ldrh	r3, [r7, #0]
 8000e4e:	887a      	ldrh	r2, [r7, #2]
 8000e50:	fb02 f303 	mul.w	r3, r2, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	8b3b      	ldrh	r3, [r7, #24]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fe2a 	bl	8000ab4 <ILI9341_Draw_Colour_Burst>
 8000e60:	e000      	b.n	8000e64 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000e62:	bf00      	nop
}
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd90      	pop	{r4, r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000002 	.word	0x20000002
 8000e70:	20000000 	.word	0x20000000

08000e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7a:	f000 fdff 	bl	8001a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7e:	f000 f855 	bl	8000f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e82:	f000 fa21 	bl	80012c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e86:	f000 f8df 	bl	8001048 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000e8a:	f000 f90b 	bl	80010a4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000e8e:	f000 f939 	bl	8001104 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000e92:	f007 fb45 	bl	8008520 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000e96:	f000 f9a1 	bl	80011dc <MX_TIM2_Init>
  MX_SPI2_Init();
 8000e9a:	f000 f969 	bl	8001170 <MX_SPI2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000e9e:	f000 f8c7 	bl	8001030 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 8000ea2:	f7ff fcf9 	bl	8000898 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff fe9a 	bl	8000be0 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 8000eac:	2003      	movs	r0, #3
 8000eae:	f7ff fc95 	bl	80007dc <ILI9341_Set_Rotation>
  ILI9341_Draw_Text("FIRST TEST 12345678912", 0, 0, WHITE, 2, BLACK);
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4817      	ldr	r0, [pc, #92]	; (8000f20 <main+0xac>)
 8000ec4:	f7ff fb98 	bl	80005f8 <ILI9341_Draw_Text>
  ILI9341_Draw_Text("12345678912345", 0, 30, WHITE, 3, BLACK);
 8000ec8:	2300      	movs	r3, #0
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	2303      	movs	r3, #3
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ed4:	221e      	movs	r2, #30
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4812      	ldr	r0, [pc, #72]	; (8000f24 <main+0xb0>)
 8000eda:	f7ff fb8d 	bl	80005f8 <ILI9341_Draw_Text>
  ILI9341_Draw_Text("12345678", 0, 100, WHITE, 5, BLACK);
 8000ede:	2300      	movs	r3, #0
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eea:	2264      	movs	r2, #100	; 0x64
 8000eec:	2100      	movs	r1, #0
 8000eee:	480e      	ldr	r0, [pc, #56]	; (8000f28 <main+0xb4>)
 8000ef0:	f7ff fb82 	bl	80005f8 <ILI9341_Draw_Text>

  ILI9341_Draw_Text("12345678912345", 0, 220, WHITE, 3, BLACK);
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	2303      	movs	r3, #3
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f00:	22dc      	movs	r2, #220	; 0xdc
 8000f02:	2100      	movs	r1, #0
 8000f04:	4807      	ldr	r0, [pc, #28]	; (8000f24 <main+0xb0>)
 8000f06:	f7ff fb77 	bl	80005f8 <ILI9341_Draw_Text>


  ILI9341_Draw_Rectangle(280, 100, 20, 20, RED);
 8000f0a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2314      	movs	r3, #20
 8000f12:	2214      	movs	r2, #20
 8000f14:	2164      	movs	r1, #100	; 0x64
 8000f16:	f44f 708c 	mov.w	r0, #280	; 0x118
 8000f1a:	f7ff ff4f 	bl	8000dbc <ILI9341_Draw_Rectangle>


  //ILI9341_Fill_Screen(WHITE);

  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <main+0xaa>
 8000f20:	08008cac 	.word	0x08008cac
 8000f24:	08008cc4 	.word	0x08008cc4
 8000f28:	08008cd4 	.word	0x08008cd4

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b098      	sub	sp, #96	; 0x60
 8000f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f36:	2230      	movs	r2, #48	; 0x30
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f007 fdda 	bl	8008af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	4b31      	ldr	r3, [pc, #196]	; (8001028 <SystemClock_Config+0xfc>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	4a30      	ldr	r2, [pc, #192]	; (8001028 <SystemClock_Config+0xfc>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6e:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <SystemClock_Config+0xfc>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <SystemClock_Config+0x100>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a2a      	ldr	r2, [pc, #168]	; (800102c <SystemClock_Config+0x100>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	4b28      	ldr	r3, [pc, #160]	; (800102c <SystemClock_Config+0x100>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f96:	2301      	movs	r3, #1
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000faa:	2308      	movs	r3, #8
 8000fac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fae:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fb2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f003 fbff 	bl	80047c4 <HAL_RCC_OscConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000fcc:	f000 fa88 	bl	80014e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fdc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	2105      	movs	r1, #5
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 fe60 	bl	8004cb4 <HAL_RCC_ClockConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ffa:	f000 fa71 	bl	80014e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ffe:	2301      	movs	r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001002:	23c0      	movs	r3, #192	; 0xc0
 8001004:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001006:	2302      	movs	r3, #2
 8001008:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	4618      	mov	r0, r3
 8001010:	f004 f838 	bl	8005084 <HAL_RCCEx_PeriphCLKConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800101a:	f000 fa61 	bl	80014e0 <Error_Handler>
  }
}
 800101e:	bf00      	nop
 8001020:	3760      	adds	r7, #96	; 0x60
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40007000 	.word	0x40007000

08001030 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	201c      	movs	r0, #28
 800103a:	f000 fe90 	bl	8001d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800103e:	201c      	movs	r0, #28
 8001040:	f000 fea9 	bl	8001d96 <HAL_NVIC_EnableIRQ>
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <MX_I2C1_Init+0x50>)
 800104e:	4a13      	ldr	r2, [pc, #76]	; (800109c <MX_I2C1_Init+0x54>)
 8001050:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_I2C1_Init+0x50>)
 8001054:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <MX_I2C1_Init+0x58>)
 8001056:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_I2C1_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_I2C1_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_I2C1_Init+0x50>)
 8001066:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800106a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <MX_I2C1_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_I2C1_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <MX_I2C1_Init+0x50>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_I2C1_Init+0x50>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001084:	4804      	ldr	r0, [pc, #16]	; (8001098 <MX_I2C1_Init+0x50>)
 8001086:	f002 fdb9 	bl	8003bfc <HAL_I2C_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001090:	f000 fa26 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000120 	.word	0x20000120
 800109c:	40005400 	.word	0x40005400
 80010a0:	000186a0 	.word	0x000186a0

080010a4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <MX_I2S3_Init+0x54>)
 80010aa:	4a14      	ldr	r2, [pc, #80]	; (80010fc <MX_I2S3_Init+0x58>)
 80010ac:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_I2S3_Init+0x54>)
 80010b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <MX_I2S3_Init+0x54>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_I2S3_Init+0x54>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <MX_I2S3_Init+0x54>)
 80010c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_I2S3_Init+0x54>)
 80010cc:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <MX_I2S3_Init+0x5c>)
 80010ce:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_I2S3_Init+0x54>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_I2S3_Init+0x54>)
 80010d8:	2200      	movs	r2, #0
 80010da:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_I2S3_Init+0x54>)
 80010de:	2200      	movs	r2, #0
 80010e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_I2S3_Init+0x54>)
 80010e4:	f002 fece 	bl	8003e84 <HAL_I2S_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80010ee:	f000 f9f7 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000214 	.word	0x20000214
 80010fc:	40003c00 	.word	0x40003c00
 8001100:	00017700 	.word	0x00017700

08001104 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_SPI1_Init+0x64>)
 800110a:	4a18      	ldr	r2, [pc, #96]	; (800116c <MX_SPI1_Init+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_SPI1_Init+0x64>)
 8001110:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001114:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_SPI1_Init+0x64>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_SPI1_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_SPI1_Init+0x64>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_SPI1_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_SPI1_Init+0x64>)
 8001130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001134:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_SPI1_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <MX_SPI1_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_SPI1_Init+0x64>)
 8001144:	2200      	movs	r2, #0
 8001146:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <MX_SPI1_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_SPI1_Init+0x64>)
 8001150:	220a      	movs	r2, #10
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_SPI1_Init+0x64>)
 8001156:	f004 f8d5 	bl	8005304 <HAL_SPI_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001160:	f000 f9be 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000174 	.word	0x20000174
 800116c:	40013000 	.word	0x40013000

08001170 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_SPI2_Init+0x64>)
 8001176:	4a18      	ldr	r2, [pc, #96]	; (80011d8 <MX_SPI2_Init+0x68>)
 8001178:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <MX_SPI2_Init+0x64>)
 800117c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001180:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <MX_SPI2_Init+0x64>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <MX_SPI2_Init+0x64>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_SPI2_Init+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_SPI2_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_SPI2_Init+0x64>)
 800119c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_SPI2_Init+0x64>)
 80011a4:	2210      	movs	r2, #16
 80011a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <MX_SPI2_Init+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_SPI2_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <MX_SPI2_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_SPI2_Init+0x64>)
 80011bc:	220a      	movs	r2, #10
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <MX_SPI2_Init+0x64>)
 80011c2:	f004 f89f 	bl	8005304 <HAL_SPI_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80011cc:	f000 f988 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200000c8 	.word	0x200000c8
 80011d8:	40003800 	.word	0x40003800

080011dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08e      	sub	sp, #56	; 0x38
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	f107 0320 	add.w	r3, r7, #32
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
 8001208:	615a      	str	r2, [r3, #20]
 800120a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <MX_TIM2_Init+0xe8>)
 800120e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001212:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001214:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <MX_TIM2_Init+0xe8>)
 8001216:	f240 3247 	movw	r2, #839	; 0x347
 800121a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <MX_TIM2_Init+0xe8>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <MX_TIM2_Init+0xe8>)
 8001224:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001228:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <MX_TIM2_Init+0xe8>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <MX_TIM2_Init+0xe8>)
 8001232:	2280      	movs	r2, #128	; 0x80
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001236:	4823      	ldr	r0, [pc, #140]	; (80012c4 <MX_TIM2_Init+0xe8>)
 8001238:	f004 faf4 	bl	8005824 <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001242:	f000 f94d 	bl	80014e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800124c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001250:	4619      	mov	r1, r3
 8001252:	481c      	ldr	r0, [pc, #112]	; (80012c4 <MX_TIM2_Init+0xe8>)
 8001254:	f004 fd54 	bl	8005d00 <HAL_TIM_ConfigClockSource>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800125e:	f000 f93f 	bl	80014e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001262:	4818      	ldr	r0, [pc, #96]	; (80012c4 <MX_TIM2_Init+0xe8>)
 8001264:	f004 fb2d 	bl	80058c2 <HAL_TIM_PWM_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800126e:	f000 f937 	bl	80014e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001272:	2310      	movs	r3, #16
 8001274:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	4619      	mov	r1, r3
 8001280:	4810      	ldr	r0, [pc, #64]	; (80012c4 <MX_TIM2_Init+0xe8>)
 8001282:	f005 f91d 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800128c:	f000 f928 	bl	80014e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001290:	2360      	movs	r3, #96	; 0x60
 8001292:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001294:	2364      	movs	r3, #100	; 0x64
 8001296:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	4619      	mov	r1, r3
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <MX_TIM2_Init+0xe8>)
 80012a8:	f004 fc6c 	bl	8005b84 <HAL_TIM_PWM_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80012b2:	f000 f915 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012b6:	4803      	ldr	r0, [pc, #12]	; (80012c4 <MX_TIM2_Init+0xe8>)
 80012b8:	f000 fab6 	bl	8001828 <HAL_TIM_MspPostInit>

}
 80012bc:	bf00      	nop
 80012be:	3738      	adds	r7, #56	; 0x38
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200001cc 	.word	0x200001cc

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08c      	sub	sp, #48	; 0x30
 80012cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	4b78      	ldr	r3, [pc, #480]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a77      	ldr	r2, [pc, #476]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 80012e8:	f043 0310 	orr.w	r3, r3, #16
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b75      	ldr	r3, [pc, #468]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	4b71      	ldr	r3, [pc, #452]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a70      	ldr	r2, [pc, #448]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b6e      	ldr	r3, [pc, #440]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b6a      	ldr	r3, [pc, #424]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a69      	ldr	r2, [pc, #420]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 8001320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b67      	ldr	r3, [pc, #412]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b63      	ldr	r3, [pc, #396]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a62      	ldr	r2, [pc, #392]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b60      	ldr	r3, [pc, #384]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	4b5c      	ldr	r3, [pc, #368]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a5b      	ldr	r2, [pc, #364]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b59      	ldr	r3, [pc, #356]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b55      	ldr	r3, [pc, #340]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a54      	ldr	r2, [pc, #336]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b52      	ldr	r3, [pc, #328]	; (80014c4 <MX_GPIO_Init+0x1fc>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2178      	movs	r1, #120	; 0x78
 800138a:	484f      	ldr	r0, [pc, #316]	; (80014c8 <MX_GPIO_Init+0x200>)
 800138c:	f000 feba 	bl	8002104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	2101      	movs	r1, #1
 8001394:	484d      	ldr	r0, [pc, #308]	; (80014cc <MX_GPIO_Init+0x204>)
 8001396:	f000 feb5 	bl	8002104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800139a:	2200      	movs	r2, #0
 800139c:	f24f 0110 	movw	r1, #61456	; 0xf010
 80013a0:	484b      	ldr	r0, [pc, #300]	; (80014d0 <MX_GPIO_Init+0x208>)
 80013a2:	f000 feaf 	bl	8002104 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80013a6:	2308      	movs	r3, #8
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	4842      	ldr	r0, [pc, #264]	; (80014c8 <MX_GPIO_Init+0x200>)
 80013be:	f000 fd05 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 80013c2:	2370      	movs	r3, #112	; 0x70
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	483b      	ldr	r0, [pc, #236]	; (80014c8 <MX_GPIO_Init+0x200>)
 80013da:	f000 fcf7 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80013de:	2301      	movs	r3, #1
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	4835      	ldr	r0, [pc, #212]	; (80014cc <MX_GPIO_Init+0x204>)
 80013f6:	f000 fce9 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80013fa:	2308      	movs	r3, #8
 80013fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800140a:	2305      	movs	r3, #5
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	482d      	ldr	r0, [pc, #180]	; (80014cc <MX_GPIO_Init+0x204>)
 8001416:	f000 fcd9 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800141a:	2301      	movs	r3, #1
 800141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800141e:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <MX_GPIO_Init+0x20c>)
 8001420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4619      	mov	r1, r3
 800142c:	482a      	ldr	r0, [pc, #168]	; (80014d8 <MX_GPIO_Init+0x210>)
 800142e:	f000 fccd 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001432:	2304      	movs	r3, #4
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4619      	mov	r1, r3
 8001444:	4825      	ldr	r0, [pc, #148]	; (80014dc <MX_GPIO_Init+0x214>)
 8001446:	f000 fcc1 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800144a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800144e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800145c:	2305      	movs	r3, #5
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	481d      	ldr	r0, [pc, #116]	; (80014dc <MX_GPIO_Init+0x214>)
 8001468:	f000 fcb0 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800146c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001470:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	4812      	ldr	r0, [pc, #72]	; (80014d0 <MX_GPIO_Init+0x208>)
 8001486:	f000 fca1 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800148a:	2320      	movs	r3, #32
 800148c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	4619      	mov	r1, r3
 800149c:	480c      	ldr	r0, [pc, #48]	; (80014d0 <MX_GPIO_Init+0x208>)
 800149e:	f000 fc95 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_GPIO_Init+0x20c>)
 80014a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <MX_GPIO_Init+0x200>)
 80014b6:	f000 fc89 	bl	8001dcc <HAL_GPIO_Init>

}
 80014ba:	bf00      	nop
 80014bc:	3730      	adds	r7, #48	; 0x30
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40020800 	.word	0x40020800
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	10120000 	.word	0x10120000
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40020400 	.word	0x40020400

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <Error_Handler+0x8>
	...

080014ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_MspInit+0x5c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a13      	ldr	r2, [pc, #76]	; (8001548 <HAL_MspInit+0x5c>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_MspInit+0x5c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <HAL_MspInit+0x5c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a0c      	ldr	r2, [pc, #48]	; (8001548 <HAL_MspInit+0x5c>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_MspInit+0x5c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800152a:	2007      	movs	r0, #7
 800152c:	f000 fc0c 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2100      	movs	r1, #0
 8001534:	2005      	movs	r0, #5
 8001536:	f000 fc12 	bl	8001d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800153a:	2005      	movs	r0, #5
 800153c:	f000 fc2b 	bl	8001d96 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40023800 	.word	0x40023800

0800154c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_I2C_MspInit+0x84>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d12c      	bne.n	80015c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_I2C_MspInit+0x88>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <HAL_I2C_MspInit+0x88>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_I2C_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800158a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001590:	2312      	movs	r3, #18
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001594:	2301      	movs	r3, #1
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800159c:	2304      	movs	r3, #4
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	480c      	ldr	r0, [pc, #48]	; (80015d8 <HAL_I2C_MspInit+0x8c>)
 80015a8:	f000 fc10 	bl	8001dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_I2C_MspInit+0x88>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <HAL_I2C_MspInit+0x88>)
 80015b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ba:	6413      	str	r3, [r2, #64]	; 0x40
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_I2C_MspInit+0x88>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015c8:	bf00      	nop
 80015ca:	3728      	adds	r7, #40	; 0x28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40005400 	.word	0x40005400
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020400 	.word	0x40020400

080015dc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a28      	ldr	r2, [pc, #160]	; (800169c <HAL_I2S_MspInit+0xc0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d14a      	bne.n	8001694 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_I2S_MspInit+0xc4>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a26      	ldr	r2, [pc, #152]	; (80016a0 <HAL_I2S_MspInit+0xc4>)
 8001608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <HAL_I2S_MspInit+0xc4>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_I2S_MspInit+0xc4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a1f      	ldr	r2, [pc, #124]	; (80016a0 <HAL_I2S_MspInit+0xc4>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_I2S_MspInit+0xc4>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_I2S_MspInit+0xc4>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <HAL_I2S_MspInit+0xc4>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_I2S_MspInit+0xc4>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001652:	2310      	movs	r3, #16
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001662:	2306      	movs	r3, #6
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	480d      	ldr	r0, [pc, #52]	; (80016a4 <HAL_I2S_MspInit+0xc8>)
 800166e:	f000 fbad 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001672:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001684:	2306      	movs	r3, #6
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <HAL_I2S_MspInit+0xcc>)
 8001690:	f000 fb9c 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40003c00 	.word	0x40003c00
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000
 80016a8:	40020800 	.word	0x40020800

080016ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a41      	ldr	r2, [pc, #260]	; (80017d0 <HAL_SPI_MspInit+0x124>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12c      	bne.n	8001728 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	4b40      	ldr	r3, [pc, #256]	; (80017d4 <HAL_SPI_MspInit+0x128>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a3f      	ldr	r2, [pc, #252]	; (80017d4 <HAL_SPI_MspInit+0x128>)
 80016d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <HAL_SPI_MspInit+0x128>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <HAL_SPI_MspInit+0x128>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a38      	ldr	r2, [pc, #224]	; (80017d4 <HAL_SPI_MspInit+0x128>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b36      	ldr	r3, [pc, #216]	; (80017d4 <HAL_SPI_MspInit+0x128>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001706:	23e0      	movs	r3, #224	; 0xe0
 8001708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001716:	2305      	movs	r3, #5
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	4619      	mov	r1, r3
 8001720:	482d      	ldr	r0, [pc, #180]	; (80017d8 <HAL_SPI_MspInit+0x12c>)
 8001722:	f000 fb53 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001726:	e04f      	b.n	80017c8 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a2b      	ldr	r2, [pc, #172]	; (80017dc <HAL_SPI_MspInit+0x130>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d14a      	bne.n	80017c8 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HAL_SPI_MspInit+0x128>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a26      	ldr	r2, [pc, #152]	; (80017d4 <HAL_SPI_MspInit+0x128>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <HAL_SPI_MspInit+0x128>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_SPI_MspInit+0x128>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a1f      	ldr	r2, [pc, #124]	; (80017d4 <HAL_SPI_MspInit+0x128>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_SPI_MspInit+0x128>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <HAL_SPI_MspInit+0x128>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <HAL_SPI_MspInit+0x128>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <HAL_SPI_MspInit+0x128>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001786:	2304      	movs	r3, #4
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001796:	2305      	movs	r3, #5
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179a:	f107 031c 	add.w	r3, r7, #28
 800179e:	4619      	mov	r1, r3
 80017a0:	480f      	ldr	r0, [pc, #60]	; (80017e0 <HAL_SPI_MspInit+0x134>)
 80017a2:	f000 fb13 	bl	8001dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80017a6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80017aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017b8:	2305      	movs	r3, #5
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	4619      	mov	r1, r3
 80017c2:	4808      	ldr	r0, [pc, #32]	; (80017e4 <HAL_SPI_MspInit+0x138>)
 80017c4:	f000 fb02 	bl	8001dcc <HAL_GPIO_Init>
}
 80017c8:	bf00      	nop
 80017ca:	3730      	adds	r7, #48	; 0x30
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40013000 	.word	0x40013000
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020000 	.word	0x40020000
 80017dc:	40003800 	.word	0x40003800
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020400 	.word	0x40020400

080017e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f8:	d10d      	bne.n	8001816 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_TIM_Base_MspInit+0x3c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a08      	ldr	r2, [pc, #32]	; (8001824 <HAL_TIM_Base_MspInit+0x3c>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_TIM_Base_MspInit+0x3c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001848:	d11e      	bne.n	8001888 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_TIM_MspPostInit+0x68>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <HAL_TIM_MspPostInit+0x68>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <HAL_TIM_MspPostInit+0x68>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800186a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001878:	2301      	movs	r3, #1
 800187a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	4619      	mov	r1, r3
 8001882:	4804      	ldr	r0, [pc, #16]	; (8001894 <HAL_TIM_MspPostInit+0x6c>)
 8001884:	f000 faa2 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3720      	adds	r7, #32
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800
 8001894:	40020000 	.word	0x40020000

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800189c:	e7fe      	b.n	800189c <NMI_Handler+0x4>

0800189e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <HardFault_Handler+0x4>

080018a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <MemManage_Handler+0x4>

080018aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <BusFault_Handler+0x4>

080018b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <UsageFault_Handler+0x4>

080018b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e4:	f000 f91c 	bl	8001b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 8001900:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001904:	481b      	ldr	r0, [pc, #108]	; (8001974 <TIM2_IRQHandler+0x78>)
 8001906:	f000 fc16 	bl	8002136 <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <TIM2_IRQHandler+0x7c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d111      	bne.n	8001936 <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <TIM2_IRQHandler+0x80>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2bc8      	cmp	r3, #200	; 0xc8
 8001918:	dc0a      	bgt.n	8001930 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <TIM2_IRQHandler+0x80>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <TIM2_IRQHandler+0x84>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <TIM2_IRQHandler+0x80>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	3301      	adds	r3, #1
 800192a:	4a14      	ldr	r2, [pc, #80]	; (800197c <TIM2_IRQHandler+0x80>)
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e002      	b.n	8001936 <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <TIM2_IRQHandler+0x7c>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <TIM2_IRQHandler+0x7c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d114      	bne.n	8001968 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <TIM2_IRQHandler+0x80>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b63      	cmp	r3, #99	; 0x63
 8001944:	dd0a      	ble.n	800195c <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8001946:	4b0d      	ldr	r3, [pc, #52]	; (800197c <TIM2_IRQHandler+0x80>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <TIM2_IRQHandler+0x84>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <TIM2_IRQHandler+0x80>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	3b01      	subs	r3, #1
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <TIM2_IRQHandler+0x80>)
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e005      	b.n	8001968 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <TIM2_IRQHandler+0x7c>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
		  i = 100;
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <TIM2_IRQHandler+0x80>)
 8001964:	2264      	movs	r2, #100	; 0x64
 8001966:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <TIM2_IRQHandler+0x84>)
 800196a:	f004 f803 	bl	8005974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40020c00 	.word	0x40020c00
 8001978:	200000b4 	.word	0x200000b4
 800197c:	20000004 	.word	0x20000004
 8001980:	200001cc 	.word	0x200001cc

08001984 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <OTG_FS_IRQHandler+0x10>)
 800198a:	f000 fe59 	bl	8002640 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000638 	.word	0x20000638

08001998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a0:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <_sbrk+0x5c>)
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <_sbrk+0x60>)
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <_sbrk+0x64>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <_sbrk+0x68>)
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d207      	bcs.n	80019d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c8:	f007 f85a 	bl	8008a80 <__errno>
 80019cc:	4603      	mov	r3, r0
 80019ce:	220c      	movs	r2, #12
 80019d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d6:	e009      	b.n	80019ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <_sbrk+0x64>)
 80019e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20020000 	.word	0x20020000
 80019f8:	00000400 	.word	0x00000400
 80019fc:	200000b8 	.word	0x200000b8
 8001a00:	20000950 	.word	0x20000950

08001a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <SystemInit+0x20>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <SystemInit+0x20>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a2c:	480d      	ldr	r0, [pc, #52]	; (8001a64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a2e:	490e      	ldr	r1, [pc, #56]	; (8001a68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a30:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a34:	e002      	b.n	8001a3c <LoopCopyDataInit>

08001a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3a:	3304      	adds	r3, #4

08001a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a40:	d3f9      	bcc.n	8001a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a44:	4c0b      	ldr	r4, [pc, #44]	; (8001a74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a48:	e001      	b.n	8001a4e <LoopFillZerobss>

08001a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a4c:	3204      	adds	r2, #4

08001a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a50:	d3fb      	bcc.n	8001a4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a52:	f7ff ffd7 	bl	8001a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a56:	f007 f819 	bl	8008a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a5a:	f7ff fa0b 	bl	8000e74 <main>
  bx  lr    
 8001a5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a68:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001a6c:	08008f4c 	.word	0x08008f4c
  ldr r2, =_sbss
 8001a70:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001a74:	2000094c 	.word	0x2000094c

08001a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC_IRQHandler>
	...

08001a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <HAL_Init+0x40>)
 8001a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_Init+0x40>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <HAL_Init+0x40>)
 8001a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_Init+0x40>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a07      	ldr	r2, [pc, #28]	; (8001abc <HAL_Init+0x40>)
 8001a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f000 f94f 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f000 f808 	bl	8001ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab0:	f7ff fd1c 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023c00 	.word	0x40023c00

08001ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_InitTick+0x54>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_InitTick+0x58>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f967 	bl	8001db2 <HAL_SYSTICK_Config>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00e      	b.n	8001b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b0f      	cmp	r3, #15
 8001af2:	d80a      	bhi.n	8001b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af4:	2200      	movs	r2, #0
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001afc:	f000 f92f 	bl	8001d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b00:	4a06      	ldr	r2, [pc, #24]	; (8001b1c <HAL_InitTick+0x5c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e000      	b.n	8001b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000008 	.word	0x20000008
 8001b18:	20000010 	.word	0x20000010
 8001b1c:	2000000c 	.word	0x2000000c

08001b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_IncTick+0x20>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_IncTick+0x24>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_IncTick+0x24>)
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000010 	.word	0x20000010
 8001b44:	2000025c 	.word	0x2000025c

08001b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <HAL_GetTick+0x14>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	2000025c 	.word	0x2000025c

08001b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b68:	f7ff ffee 	bl	8001b48 <HAL_GetTick>
 8001b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b78:	d005      	beq.n	8001b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_Delay+0x44>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b86:	bf00      	nop
 8001b88:	f7ff ffde 	bl	8001b48 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d8f7      	bhi.n	8001b88 <HAL_Delay+0x28>
  {
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000010 	.word	0x20000010

08001ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bda:	4a04      	ldr	r2, [pc, #16]	; (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	60d3      	str	r3, [r2, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	f003 0307 	and.w	r3, r3, #7
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	db0b      	blt.n	8001c36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	f003 021f 	and.w	r2, r3, #31
 8001c24:	4907      	ldr	r1, [pc, #28]	; (8001c44 <__NVIC_EnableIRQ+0x38>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	; (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d14:	d301      	bcc.n	8001d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00f      	b.n	8001d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <SysTick_Config+0x40>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d22:	210f      	movs	r1, #15
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d28:	f7ff ff8e 	bl	8001c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <SysTick_Config+0x40>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <SysTick_Config+0x40>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	e000e010 	.word	0xe000e010

08001d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff29 	bl	8001ba8 <__NVIC_SetPriorityGrouping>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d70:	f7ff ff3e 	bl	8001bf0 <__NVIC_GetPriorityGrouping>
 8001d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	6978      	ldr	r0, [r7, #20]
 8001d7c:	f7ff ff8e 	bl	8001c9c <NVIC_EncodePriority>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff5d 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff31 	bl	8001c0c <__NVIC_EnableIRQ>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ffa2 	bl	8001d04 <SysTick_Config>
 8001dc0:	4603      	mov	r3, r0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	e16b      	b.n	80020c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001de8:	2201      	movs	r2, #1
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f040 815a 	bne.w	80020ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d005      	beq.n	8001e1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d130      	bne.n	8001e80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	2203      	movs	r2, #3
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 0201 	and.w	r2, r3, #1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d017      	beq.n	8001ebc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d123      	bne.n	8001f10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	08da      	lsrs	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3208      	adds	r2, #8
 8001ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	220f      	movs	r2, #15
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	08da      	lsrs	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3208      	adds	r2, #8
 8001f0a:	69b9      	ldr	r1, [r7, #24]
 8001f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0203 	and.w	r2, r3, #3
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80b4 	beq.w	80020ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b60      	ldr	r3, [pc, #384]	; (80020d8 <HAL_GPIO_Init+0x30c>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	4a5f      	ldr	r2, [pc, #380]	; (80020d8 <HAL_GPIO_Init+0x30c>)
 8001f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f60:	6453      	str	r3, [r2, #68]	; 0x44
 8001f62:	4b5d      	ldr	r3, [pc, #372]	; (80020d8 <HAL_GPIO_Init+0x30c>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f6e:	4a5b      	ldr	r2, [pc, #364]	; (80020dc <HAL_GPIO_Init+0x310>)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	089b      	lsrs	r3, r3, #2
 8001f74:	3302      	adds	r3, #2
 8001f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	220f      	movs	r2, #15
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a52      	ldr	r2, [pc, #328]	; (80020e0 <HAL_GPIO_Init+0x314>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d02b      	beq.n	8001ff2 <HAL_GPIO_Init+0x226>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a51      	ldr	r2, [pc, #324]	; (80020e4 <HAL_GPIO_Init+0x318>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d025      	beq.n	8001fee <HAL_GPIO_Init+0x222>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a50      	ldr	r2, [pc, #320]	; (80020e8 <HAL_GPIO_Init+0x31c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01f      	beq.n	8001fea <HAL_GPIO_Init+0x21e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4f      	ldr	r2, [pc, #316]	; (80020ec <HAL_GPIO_Init+0x320>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d019      	beq.n	8001fe6 <HAL_GPIO_Init+0x21a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4e      	ldr	r2, [pc, #312]	; (80020f0 <HAL_GPIO_Init+0x324>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d013      	beq.n	8001fe2 <HAL_GPIO_Init+0x216>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4d      	ldr	r2, [pc, #308]	; (80020f4 <HAL_GPIO_Init+0x328>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00d      	beq.n	8001fde <HAL_GPIO_Init+0x212>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4c      	ldr	r2, [pc, #304]	; (80020f8 <HAL_GPIO_Init+0x32c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d007      	beq.n	8001fda <HAL_GPIO_Init+0x20e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4b      	ldr	r2, [pc, #300]	; (80020fc <HAL_GPIO_Init+0x330>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_GPIO_Init+0x20a>
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	e00e      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fd6:	2308      	movs	r3, #8
 8001fd8:	e00c      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fda:	2306      	movs	r3, #6
 8001fdc:	e00a      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fde:	2305      	movs	r3, #5
 8001fe0:	e008      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e004      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	f002 0203 	and.w	r2, r2, #3
 8001ffa:	0092      	lsls	r2, r2, #2
 8001ffc:	4093      	lsls	r3, r2
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002004:	4935      	ldr	r1, [pc, #212]	; (80020dc <HAL_GPIO_Init+0x310>)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002012:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_GPIO_Init+0x334>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002036:	4a32      	ldr	r2, [pc, #200]	; (8002100 <HAL_GPIO_Init+0x334>)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800203c:	4b30      	ldr	r3, [pc, #192]	; (8002100 <HAL_GPIO_Init+0x334>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002060:	4a27      	ldr	r2, [pc, #156]	; (8002100 <HAL_GPIO_Init+0x334>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <HAL_GPIO_Init+0x334>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800208a:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <HAL_GPIO_Init+0x334>)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002090:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_GPIO_Init+0x334>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020b4:	4a12      	ldr	r2, [pc, #72]	; (8002100 <HAL_GPIO_Init+0x334>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3301      	adds	r3, #1
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	2b0f      	cmp	r3, #15
 80020c4:	f67f ae90 	bls.w	8001de8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40013800 	.word	0x40013800
 80020e0:	40020000 	.word	0x40020000
 80020e4:	40020400 	.word	0x40020400
 80020e8:	40020800 	.word	0x40020800
 80020ec:	40020c00 	.word	0x40020c00
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40021400 	.word	0x40021400
 80020f8:	40021800 	.word	0x40021800
 80020fc:	40021c00 	.word	0x40021c00
 8002100:	40013c00 	.word	0x40013c00

08002104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
 8002110:	4613      	mov	r3, r2
 8002112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002114:	787b      	ldrb	r3, [r7, #1]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002120:	e003      	b.n	800212a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002122:	887b      	ldrh	r3, [r7, #2]
 8002124:	041a      	lsls	r2, r3, #16
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	619a      	str	r2, [r3, #24]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002136:	b480      	push	{r7}
 8002138:	b085      	sub	sp, #20
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002148:	887a      	ldrh	r2, [r7, #2]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4013      	ands	r3, r2
 800214e:	041a      	lsls	r2, r3, #16
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	43d9      	mvns	r1, r3
 8002154:	887b      	ldrh	r3, [r7, #2]
 8002156:	400b      	ands	r3, r1
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	619a      	str	r2, [r3, #24]
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800216a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216c:	b08f      	sub	sp, #60	; 0x3c
 800216e:	af0a      	add	r7, sp, #40	; 0x28
 8002170:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e054      	b.n	8002226 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d106      	bne.n	800219c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f006 fa16 	bl	80085c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2203      	movs	r2, #3
 80021a0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d102      	bne.n	80021b6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f004 fa82 	bl	80066c4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	687e      	ldr	r6, [r7, #4]
 80021c8:	466d      	mov	r5, sp
 80021ca:	f106 0410 	add.w	r4, r6, #16
 80021ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021da:	e885 0003 	stmia.w	r5, {r0, r1}
 80021de:	1d33      	adds	r3, r6, #4
 80021e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021e2:	6838      	ldr	r0, [r7, #0]
 80021e4:	f004 f9fc 	bl	80065e0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2101      	movs	r1, #1
 80021ee:	4618      	mov	r0, r3
 80021f0:	f004 fa79 	bl	80066e6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	687e      	ldr	r6, [r7, #4]
 80021fc:	466d      	mov	r5, sp
 80021fe:	f106 0410 	add.w	r4, r6, #16
 8002202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800220a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800220e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002212:	1d33      	adds	r3, r6, #4
 8002214:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002216:	6838      	ldr	r0, [r7, #0]
 8002218:	f004 fb8c 	bl	8006934 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800222e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800222e:	b590      	push	{r4, r7, lr}
 8002230:	b089      	sub	sp, #36	; 0x24
 8002232:	af04      	add	r7, sp, #16
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	4608      	mov	r0, r1
 8002238:	4611      	mov	r1, r2
 800223a:	461a      	mov	r2, r3
 800223c:	4603      	mov	r3, r0
 800223e:	70fb      	strb	r3, [r7, #3]
 8002240:	460b      	mov	r3, r1
 8002242:	70bb      	strb	r3, [r7, #2]
 8002244:	4613      	mov	r3, r2
 8002246:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_HCD_HC_Init+0x28>
 8002252:	2302      	movs	r3, #2
 8002254:	e076      	b.n	8002344 <HAL_HCD_HC_Init+0x116>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	333d      	adds	r3, #61	; 0x3d
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	212c      	movs	r1, #44	; 0x2c
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	4413      	add	r3, r2
 800227c:	3338      	adds	r3, #56	; 0x38
 800227e:	787a      	ldrb	r2, [r7, #1]
 8002280:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	212c      	movs	r1, #44	; 0x2c
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	4413      	add	r3, r2
 800228e:	3340      	adds	r3, #64	; 0x40
 8002290:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002292:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	212c      	movs	r1, #44	; 0x2c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	3339      	adds	r3, #57	; 0x39
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	333f      	adds	r3, #63	; 0x3f
 80022b4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80022b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	78ba      	ldrb	r2, [r7, #2]
 80022be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022c2:	b2d0      	uxtb	r0, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	333a      	adds	r3, #58	; 0x3a
 80022d0:	4602      	mov	r2, r0
 80022d2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80022d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	da09      	bge.n	80022f0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	212c      	movs	r1, #44	; 0x2c
 80022e2:	fb01 f303 	mul.w	r3, r1, r3
 80022e6:	4413      	add	r3, r2
 80022e8:	333b      	adds	r3, #59	; 0x3b
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
 80022ee:	e008      	b.n	8002302 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	212c      	movs	r1, #44	; 0x2c
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	333b      	adds	r3, #59	; 0x3b
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	212c      	movs	r1, #44	; 0x2c
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	333c      	adds	r3, #60	; 0x3c
 8002310:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002314:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	787c      	ldrb	r4, [r7, #1]
 800231c:	78ba      	ldrb	r2, [r7, #2]
 800231e:	78f9      	ldrb	r1, [r7, #3]
 8002320:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002322:	9302      	str	r3, [sp, #8]
 8002324:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	4623      	mov	r3, r4
 8002332:	f004 fc57 	bl	8006be4 <USB_HC_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	bd90      	pop	{r4, r7, pc}

0800234c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_HCD_HC_Halt+0x1e>
 8002366:	2302      	movs	r3, #2
 8002368:	e00f      	b.n	800238a <HAL_HCD_HC_Halt+0x3e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f004 fe93 	bl	80070a6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	4608      	mov	r0, r1
 800239e:	4611      	mov	r1, r2
 80023a0:	461a      	mov	r2, r3
 80023a2:	4603      	mov	r3, r0
 80023a4:	70fb      	strb	r3, [r7, #3]
 80023a6:	460b      	mov	r3, r1
 80023a8:	70bb      	strb	r3, [r7, #2]
 80023aa:	4613      	mov	r3, r2
 80023ac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	212c      	movs	r1, #44	; 0x2c
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	4413      	add	r3, r2
 80023ba:	333b      	adds	r3, #59	; 0x3b
 80023bc:	78ba      	ldrb	r2, [r7, #2]
 80023be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	212c      	movs	r1, #44	; 0x2c
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	333f      	adds	r3, #63	; 0x3f
 80023ce:	787a      	ldrb	r2, [r7, #1]
 80023d0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80023d2:	7c3b      	ldrb	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d112      	bne.n	80023fe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	3342      	adds	r3, #66	; 0x42
 80023e6:	2203      	movs	r2, #3
 80023e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	212c      	movs	r1, #44	; 0x2c
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	333d      	adds	r3, #61	; 0x3d
 80023f8:	7f3a      	ldrb	r2, [r7, #28]
 80023fa:	701a      	strb	r2, [r3, #0]
 80023fc:	e008      	b.n	8002410 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	212c      	movs	r1, #44	; 0x2c
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	3342      	adds	r3, #66	; 0x42
 800240c:	2202      	movs	r2, #2
 800240e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002410:	787b      	ldrb	r3, [r7, #1]
 8002412:	2b03      	cmp	r3, #3
 8002414:	f200 80c6 	bhi.w	80025a4 <HAL_HCD_HC_SubmitRequest+0x210>
 8002418:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800241a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241e:	bf00      	nop
 8002420:	08002431 	.word	0x08002431
 8002424:	08002591 	.word	0x08002591
 8002428:	08002495 	.word	0x08002495
 800242c:	08002513 	.word	0x08002513
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002430:	7c3b      	ldrb	r3, [r7, #16]
 8002432:	2b01      	cmp	r3, #1
 8002434:	f040 80b8 	bne.w	80025a8 <HAL_HCD_HC_SubmitRequest+0x214>
 8002438:	78bb      	ldrb	r3, [r7, #2]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f040 80b4 	bne.w	80025a8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002440:	8b3b      	ldrh	r3, [r7, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d108      	bne.n	8002458 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	3355      	adds	r3, #85	; 0x55
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	212c      	movs	r1, #44	; 0x2c
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	4413      	add	r3, r2
 8002464:	3355      	adds	r3, #85	; 0x55
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d109      	bne.n	8002480 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	212c      	movs	r1, #44	; 0x2c
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	3342      	adds	r3, #66	; 0x42
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800247e:	e093      	b.n	80025a8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	3342      	adds	r3, #66	; 0x42
 800248e:	2202      	movs	r2, #2
 8002490:	701a      	strb	r2, [r3, #0]
      break;
 8002492:	e089      	b.n	80025a8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002494:	78bb      	ldrb	r3, [r7, #2]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d11d      	bne.n	80024d6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	3355      	adds	r3, #85	; 0x55
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	3342      	adds	r3, #66	; 0x42
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80024c0:	e073      	b.n	80025aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	212c      	movs	r1, #44	; 0x2c
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	3342      	adds	r3, #66	; 0x42
 80024d0:	2202      	movs	r2, #2
 80024d2:	701a      	strb	r2, [r3, #0]
      break;
 80024d4:	e069      	b.n	80025aa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	3354      	adds	r3, #84	; 0x54
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	3342      	adds	r3, #66	; 0x42
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
      break;
 80024fc:	e055      	b.n	80025aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	212c      	movs	r1, #44	; 0x2c
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	4413      	add	r3, r2
 800250a:	3342      	adds	r3, #66	; 0x42
 800250c:	2202      	movs	r2, #2
 800250e:	701a      	strb	r2, [r3, #0]
      break;
 8002510:	e04b      	b.n	80025aa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002512:	78bb      	ldrb	r3, [r7, #2]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d11d      	bne.n	8002554 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	212c      	movs	r1, #44	; 0x2c
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	3355      	adds	r3, #85	; 0x55
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3342      	adds	r3, #66	; 0x42
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800253e:	e034      	b.n	80025aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	3342      	adds	r3, #66	; 0x42
 800254e:	2202      	movs	r2, #2
 8002550:	701a      	strb	r2, [r3, #0]
      break;
 8002552:	e02a      	b.n	80025aa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	3354      	adds	r3, #84	; 0x54
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	212c      	movs	r1, #44	; 0x2c
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	3342      	adds	r3, #66	; 0x42
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
      break;
 800257a:	e016      	b.n	80025aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	212c      	movs	r1, #44	; 0x2c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	3342      	adds	r3, #66	; 0x42
 800258a:	2202      	movs	r2, #2
 800258c:	701a      	strb	r2, [r3, #0]
      break;
 800258e:	e00c      	b.n	80025aa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	3342      	adds	r3, #66	; 0x42
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
      break;
 80025a2:	e002      	b.n	80025aa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80025a4:	bf00      	nop
 80025a6:	e000      	b.n	80025aa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80025a8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80025aa:	78fb      	ldrb	r3, [r7, #3]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	212c      	movs	r1, #44	; 0x2c
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	3344      	adds	r3, #68	; 0x44
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	8b3a      	ldrh	r2, [r7, #24]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	202c      	movs	r0, #44	; 0x2c
 80025c4:	fb00 f303 	mul.w	r3, r0, r3
 80025c8:	440b      	add	r3, r1
 80025ca:	334c      	adds	r3, #76	; 0x4c
 80025cc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3360      	adds	r3, #96	; 0x60
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	3350      	adds	r3, #80	; 0x50
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025f2:	78fb      	ldrb	r3, [r7, #3]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	212c      	movs	r1, #44	; 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	3339      	adds	r3, #57	; 0x39
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3361      	adds	r3, #97	; 0x61
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	222c      	movs	r2, #44	; 0x2c
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	3338      	adds	r3, #56	; 0x38
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	18d1      	adds	r1, r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	f004 fbe6 	bl	8006e00 <USB_HC_StartXfer>
 8002634:	4603      	mov	r3, r0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop

08002640 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f004 f929 	bl	80068ae <USB_GetMode>
 800265c:	4603      	mov	r3, r0
 800265e:	2b01      	cmp	r3, #1
 8002660:	f040 80ef 	bne.w	8002842 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f004 f90d 	bl	8006888 <USB_ReadInterrupts>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80e5 	beq.w	8002840 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f004 f904 	bl	8006888 <USB_ReadInterrupts>
 8002680:	4603      	mov	r3, r0
 8002682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002686:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800268a:	d104      	bne.n	8002696 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002694:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f004 f8f4 	bl	8006888 <USB_ReadInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026aa:	d104      	bne.n	80026b6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f004 f8e4 	bl	8006888 <USB_ReadInterrupts>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026ca:	d104      	bne.n	80026d6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f004 f8d4 	bl	8006888 <USB_ReadInterrupts>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d103      	bne.n	80026f2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2202      	movs	r2, #2
 80026f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f004 f8c6 	bl	8006888 <USB_ReadInterrupts>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002706:	d115      	bne.n	8002734 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002710:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d108      	bne.n	8002734 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f005 ffce 	bl	80086c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2101      	movs	r1, #1
 800272e:	4618      	mov	r0, r3
 8002730:	f004 f9bc 	bl	8006aac <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f004 f8a5 	bl	8006888 <USB_ReadInterrupts>
 800273e:	4603      	mov	r3, r0
 8002740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002748:	d102      	bne.n	8002750 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f001 f9e3 	bl	8003b16 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f004 f897 	bl	8006888 <USB_ReadInterrupts>
 800275a:	4603      	mov	r3, r0
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b08      	cmp	r3, #8
 8002762:	d106      	bne.n	8002772 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f005 ff91 	bl	800868c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2208      	movs	r2, #8
 8002770:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f004 f886 	bl	8006888 <USB_ReadInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b10      	cmp	r3, #16
 8002784:	d101      	bne.n	800278a <HAL_HCD_IRQHandler+0x14a>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_HCD_IRQHandler+0x14c>
 800278a:	2300      	movs	r3, #0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d012      	beq.n	80027b6 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0210 	bic.w	r2, r2, #16
 800279e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f001 f8e6 	bl	8003972 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0210 	orr.w	r2, r2, #16
 80027b4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f004 f864 	bl	8006888 <USB_ReadInterrupts>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027ca:	d13a      	bne.n	8002842 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f004 fc57 	bl	8007084 <USB_HC_ReadInterrupt>
 80027d6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	e025      	b.n	800282a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d018      	beq.n	8002824 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002808:	d106      	bne.n	8002818 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	4619      	mov	r1, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f88f 	bl	8002934 <HCD_HC_IN_IRQHandler>
 8002816:	e005      	b.n	8002824 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	4619      	mov	r1, r3
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fcaa 	bl	8003178 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	429a      	cmp	r2, r3
 8002832:	d3d4      	bcc.n	80027de <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800283c:	615a      	str	r2, [r3, #20]
 800283e:	e000      	b.n	8002842 <HAL_HCD_IRQHandler+0x202>
      return;
 8002840:	bf00      	nop
    }
  }
}
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_HCD_Start+0x16>
 800285a:	2302      	movs	r3, #2
 800285c:	e013      	b.n	8002886 <HAL_HCD_Start+0x3e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f003 ff19 	bl	80066a2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2101      	movs	r1, #1
 8002876:	4618      	mov	r0, r3
 8002878:	f004 f952 	bl	8006b20 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_HCD_Stop+0x16>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e00d      	b.n	80028c0 <HAL_HCD_Stop+0x32>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f004 fd51 	bl	8007358 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	212c      	movs	r1, #44	; 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3360      	adds	r3, #96	; 0x60
 80028e2:	781b      	ldrb	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3350      	adds	r3, #80	; 0x50
 800290a:	681b      	ldr	r3, [r3, #0]
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f004 f94b 	bl	8006bc0 <USB_GetCurrentFrame>
 800292a:	4603      	mov	r3, r0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4413      	add	r3, r2
 8002956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b04      	cmp	r3, #4
 8002962:	d119      	bne.n	8002998 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4413      	add	r3, r2
 800296c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002970:	461a      	mov	r2, r3
 8002972:	2304      	movs	r3, #4
 8002974:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	0151      	lsls	r1, r2, #5
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	440a      	add	r2, r1
 800298c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	60d3      	str	r3, [r2, #12]
 8002996:	e101      	b.n	8002b9c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ae:	d12b      	bne.n	8002a08 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029bc:	461a      	mov	r2, r3
 80029be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3361      	adds	r3, #97	; 0x61
 80029d2:	2207      	movs	r2, #7
 80029d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	0151      	lsls	r1, r2, #5
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	440a      	add	r2, r1
 80029ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f004 fb50 	bl	80070a6 <USB_HC_Halt>
 8002a06:	e0c9      	b.n	8002b9c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	d109      	bne.n	8002a32 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	6093      	str	r3, [r2, #8]
 8002a30:	e0b4      	b.n	8002b9c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d133      	bne.n	8002ab0 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	0151      	lsls	r1, r2, #5
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	440a      	add	r2, r1
 8002a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a62:	f043 0302 	orr.w	r3, r3, #2
 8002a66:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	3361      	adds	r3, #97	; 0x61
 8002a76:	2205      	movs	r2, #5
 8002a78:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a86:	461a      	mov	r2, r3
 8002a88:	2310      	movs	r3, #16
 8002a8a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	461a      	mov	r2, r3
 8002a9a:	2308      	movs	r3, #8
 8002a9c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f004 fafc 	bl	80070a6 <USB_HC_Halt>
 8002aae:	e075      	b.n	8002b9c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac6:	d134      	bne.n	8002b32 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	0151      	lsls	r1, r2, #5
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	440a      	add	r2, r1
 8002ade:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ae2:	f043 0302 	orr.w	r3, r3, #2
 8002ae6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	3361      	adds	r3, #97	; 0x61
 8002af6:	2208      	movs	r2, #8
 8002af8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b06:	461a      	mov	r2, r3
 8002b08:	2310      	movs	r3, #16
 8002b0a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b1e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f004 fabb 	bl	80070a6 <USB_HC_Halt>
 8002b30:	e034      	b.n	8002b9c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b44:	2b80      	cmp	r3, #128	; 0x80
 8002b46:	d129      	bne.n	8002b9c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	0151      	lsls	r1, r2, #5
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	440a      	add	r2, r1
 8002b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b62:	f043 0302 	orr.w	r3, r3, #2
 8002b66:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3361      	adds	r3, #97	; 0x61
 8002b76:	2206      	movs	r2, #6
 8002b78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f004 fa8e 	bl	80070a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b96:	461a      	mov	r2, r3
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb2:	d122      	bne.n	8002bfa <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	0151      	lsls	r1, r2, #5
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	440a      	add	r2, r1
 8002bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bce:	f043 0302 	orr.w	r3, r3, #2
 8002bd2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f004 fa61 	bl	80070a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bf6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002bf8:	e2ba      	b.n	8003170 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	f040 811b 	bne.w	8002e48 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d019      	beq.n	8002c4e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3348      	adds	r3, #72	; 0x48
 8002c28:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	0159      	lsls	r1, r3, #5
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	440b      	add	r3, r1
 8002c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c3c:	1ad2      	subs	r2, r2, r3
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	202c      	movs	r0, #44	; 0x2c
 8002c44:	fb00 f303 	mul.w	r3, r0, r3
 8002c48:	440b      	add	r3, r1
 8002c4a:	3350      	adds	r3, #80	; 0x50
 8002c4c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	3361      	adds	r3, #97	; 0x61
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	212c      	movs	r1, #44	; 0x2c
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	335c      	adds	r3, #92	; 0x5c
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7e:	461a      	mov	r2, r3
 8002c80:	2301      	movs	r3, #1
 8002c82:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	333f      	adds	r3, #63	; 0x3f
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d009      	beq.n	8002cac <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	333f      	adds	r3, #63	; 0x3f
 8002ca6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d121      	bne.n	8002cf0 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	0151      	lsls	r1, r2, #5
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	440a      	add	r2, r1
 8002cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cc6:	f043 0302 	orr.w	r3, r3, #2
 8002cca:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f004 f9e5 	bl	80070a6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2310      	movs	r3, #16
 8002cec:	6093      	str	r3, [r2, #8]
 8002cee:	e066      	b.n	8002dbe <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	333f      	adds	r3, #63	; 0x3f
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d127      	bne.n	8002d54 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	0151      	lsls	r1, r2, #5
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	440a      	add	r2, r1
 8002d1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d22:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3360      	adds	r3, #96	; 0x60
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	b2d9      	uxtb	r1, r3
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	202c      	movs	r0, #44	; 0x2c
 8002d40:	fb00 f303 	mul.w	r3, r0, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3360      	adds	r3, #96	; 0x60
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f005 fcc7 	bl	80086e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d52:	e034      	b.n	8002dbe <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	333f      	adds	r3, #63	; 0x3f
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d12a      	bne.n	8002dbe <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	3360      	adds	r3, #96	; 0x60
 8002d76:	2201      	movs	r2, #1
 8002d78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	212c      	movs	r1, #44	; 0x2c
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	3354      	adds	r3, #84	; 0x54
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	f083 0301 	eor.w	r3, r3, #1
 8002d8e:	b2d8      	uxtb	r0, r3
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3354      	adds	r3, #84	; 0x54
 8002d9e:	4602      	mov	r2, r0
 8002da0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	b2d9      	uxtb	r1, r3
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	202c      	movs	r0, #44	; 0x2c
 8002dac:	fb00 f303 	mul.w	r3, r0, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	3360      	adds	r3, #96	; 0x60
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f005 fc91 	bl	80086e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d12b      	bne.n	8002e1e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3348      	adds	r3, #72	; 0x48
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	202c      	movs	r0, #44	; 0x2c
 8002ddc:	fb00 f202 	mul.w	r2, r0, r2
 8002de0:	440a      	add	r2, r1
 8002de2:	3240      	adds	r2, #64	; 0x40
 8002de4:	8812      	ldrh	r2, [r2, #0]
 8002de6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 81be 	beq.w	8003170 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3354      	adds	r3, #84	; 0x54
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	f083 0301 	eor.w	r3, r3, #1
 8002e08:	b2d8      	uxtb	r0, r3
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	212c      	movs	r1, #44	; 0x2c
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	3354      	adds	r3, #84	; 0x54
 8002e18:	4602      	mov	r2, r0
 8002e1a:	701a      	strb	r2, [r3, #0]
}
 8002e1c:	e1a8      	b.n	8003170 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3354      	adds	r3, #84	; 0x54
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	f083 0301 	eor.w	r3, r3, #1
 8002e32:	b2d8      	uxtb	r0, r3
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3354      	adds	r3, #84	; 0x54
 8002e42:	4602      	mov	r2, r0
 8002e44:	701a      	strb	r2, [r3, #0]
}
 8002e46:	e193      	b.n	8003170 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	f040 8106 	bne.w	800306c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	0151      	lsls	r1, r2, #5
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	440a      	add	r2, r1
 8002e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e7a:	f023 0302 	bic.w	r3, r3, #2
 8002e7e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3361      	adds	r3, #97	; 0x61
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d109      	bne.n	8002ea8 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	212c      	movs	r1, #44	; 0x2c
 8002e9a:	fb01 f303 	mul.w	r3, r1, r3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3360      	adds	r3, #96	; 0x60
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e0c9      	b.n	800303c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3361      	adds	r3, #97	; 0x61
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b05      	cmp	r3, #5
 8002eba:	d109      	bne.n	8002ed0 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	212c      	movs	r1, #44	; 0x2c
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3360      	adds	r3, #96	; 0x60
 8002eca:	2205      	movs	r2, #5
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	e0b5      	b.n	800303c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3361      	adds	r3, #97	; 0x61
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b06      	cmp	r3, #6
 8002ee2:	d009      	beq.n	8002ef8 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	212c      	movs	r1, #44	; 0x2c
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	3361      	adds	r3, #97	; 0x61
 8002ef2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d150      	bne.n	8002f9a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	335c      	adds	r3, #92	; 0x5c
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	202c      	movs	r0, #44	; 0x2c
 8002f10:	fb00 f303 	mul.w	r3, r0, r3
 8002f14:	440b      	add	r3, r1
 8002f16:	335c      	adds	r3, #92	; 0x5c
 8002f18:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	335c      	adds	r3, #92	; 0x5c
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d912      	bls.n	8002f54 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	335c      	adds	r3, #92	; 0x5c
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	212c      	movs	r1, #44	; 0x2c
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3360      	adds	r3, #96	; 0x60
 8002f4e:	2204      	movs	r2, #4
 8002f50:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f52:	e073      	b.n	800303c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	212c      	movs	r1, #44	; 0x2c
 8002f5a:	fb01 f303 	mul.w	r3, r1, r3
 8002f5e:	4413      	add	r3, r2
 8002f60:	3360      	adds	r3, #96	; 0x60
 8002f62:	2202      	movs	r2, #2
 8002f64:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f7c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f84:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f92:	461a      	mov	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f98:	e050      	b.n	800303c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3361      	adds	r3, #97	; 0x61
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d122      	bne.n	8002ff4 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	212c      	movs	r1, #44	; 0x2c
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	4413      	add	r3, r2
 8002fba:	3360      	adds	r3, #96	; 0x60
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fd6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fde:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fec:	461a      	mov	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e023      	b.n	800303c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	212c      	movs	r1, #44	; 0x2c
 8002ffa:	fb01 f303 	mul.w	r3, r1, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	3361      	adds	r3, #97	; 0x61
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b07      	cmp	r3, #7
 8003006:	d119      	bne.n	800303c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	212c      	movs	r1, #44	; 0x2c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	335c      	adds	r3, #92	; 0x5c
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	202c      	movs	r0, #44	; 0x2c
 8003020:	fb00 f303 	mul.w	r3, r0, r3
 8003024:	440b      	add	r3, r1
 8003026:	335c      	adds	r3, #92	; 0x5c
 8003028:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	3360      	adds	r3, #96	; 0x60
 8003038:	2204      	movs	r2, #4
 800303a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4413      	add	r3, r2
 8003044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003048:	461a      	mov	r2, r3
 800304a:	2302      	movs	r3, #2
 800304c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	b2d9      	uxtb	r1, r3
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	202c      	movs	r0, #44	; 0x2c
 8003058:	fb00 f303 	mul.w	r3, r0, r3
 800305c:	4413      	add	r3, r2
 800305e:	3360      	adds	r3, #96	; 0x60
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f005 fb3b 	bl	80086e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800306a:	e081      	b.n	8003170 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4413      	add	r3, r2
 8003074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b10      	cmp	r3, #16
 8003080:	d176      	bne.n	8003170 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	333f      	adds	r3, #63	; 0x3f
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d121      	bne.n	80030da <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	212c      	movs	r1, #44	; 0x2c
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	335c      	adds	r3, #92	; 0x5c
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	0151      	lsls	r1, r2, #5
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	440a      	add	r2, r1
 80030be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030c2:	f043 0302 	orr.w	r3, r3, #2
 80030c6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 ffe7 	bl	80070a6 <USB_HC_Halt>
 80030d8:	e041      	b.n	800315e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	212c      	movs	r1, #44	; 0x2c
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	4413      	add	r3, r2
 80030e6:	333f      	adds	r3, #63	; 0x3f
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	333f      	adds	r3, #63	; 0x3f
 80030fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d12d      	bne.n	800315e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	335c      	adds	r3, #92	; 0x5c
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d120      	bne.n	800315e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	3361      	adds	r3, #97	; 0x61
 800312a:	2203      	movs	r2, #3
 800312c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4413      	add	r3, r2
 8003136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	0151      	lsls	r1, r2, #5
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	440a      	add	r2, r1
 8003144:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003148:	f043 0302 	orr.w	r3, r3, #2
 800314c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f003 ffa4 	bl	80070a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316a:	461a      	mov	r2, r3
 800316c:	2310      	movs	r3, #16
 800316e:	6093      	str	r3, [r2, #8]
}
 8003170:	bf00      	nop
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	4413      	add	r3, r2
 800319a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d119      	bne.n	80031dc <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b4:	461a      	mov	r2, r3
 80031b6:	2304      	movs	r3, #4
 80031b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	0151      	lsls	r1, r2, #5
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	440a      	add	r2, r1
 80031d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031d4:	f043 0302 	orr.w	r3, r3, #2
 80031d8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80031da:	e3c6      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d13e      	bne.n	8003270 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fe:	461a      	mov	r2, r3
 8003200:	2320      	movs	r3, #32
 8003202:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	333d      	adds	r3, #61	; 0x3d
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	f040 83a8 	bne.w	800396a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	212c      	movs	r1, #44	; 0x2c
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	333d      	adds	r3, #61	; 0x3d
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	3360      	adds	r3, #96	; 0x60
 800323a:	2202      	movs	r2, #2
 800323c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	4413      	add	r3, r2
 8003246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	0151      	lsls	r1, r2, #5
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	440a      	add	r2, r1
 8003254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003258:	f043 0302 	orr.w	r3, r3, #2
 800325c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f003 ff1c 	bl	80070a6 <USB_HC_Halt>
}
 800326e:	e37c      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003286:	d122      	bne.n	80032ce <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	0151      	lsls	r1, r2, #5
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	440a      	add	r2, r1
 800329e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032a2:	f043 0302 	orr.w	r3, r3, #2
 80032a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f003 fef7 	bl	80070a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c4:	461a      	mov	r2, r3
 80032c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ca:	6093      	str	r3, [r2, #8]
}
 80032cc:	e34d      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d150      	bne.n	8003386 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	212c      	movs	r1, #44	; 0x2c
 80032ea:	fb01 f303 	mul.w	r3, r1, r3
 80032ee:	4413      	add	r3, r2
 80032f0:	335c      	adds	r3, #92	; 0x5c
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d111      	bne.n	8003330 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	212c      	movs	r1, #44	; 0x2c
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	333d      	adds	r3, #61	; 0x3d
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	461a      	mov	r2, r3
 800332c:	2340      	movs	r3, #64	; 0x40
 800332e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	0151      	lsls	r1, r2, #5
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	440a      	add	r2, r1
 8003346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800334a:	f043 0302 	orr.w	r3, r3, #2
 800334e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	4611      	mov	r1, r2
 800335a:	4618      	mov	r0, r3
 800335c:	f003 fea3 	bl	80070a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336c:	461a      	mov	r2, r3
 800336e:	2301      	movs	r3, #1
 8003370:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	212c      	movs	r1, #44	; 0x2c
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	4413      	add	r3, r2
 800337e:	3361      	adds	r3, #97	; 0x61
 8003380:	2201      	movs	r2, #1
 8003382:	701a      	strb	r2, [r3, #0]
}
 8003384:	e2f1      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	4413      	add	r3, r2
 800338e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003398:	2b40      	cmp	r3, #64	; 0x40
 800339a:	d13c      	bne.n	8003416 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	3361      	adds	r3, #97	; 0x61
 80033aa:	2204      	movs	r2, #4
 80033ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	212c      	movs	r1, #44	; 0x2c
 80033b4:	fb01 f303 	mul.w	r3, r1, r3
 80033b8:	4413      	add	r3, r2
 80033ba:	333d      	adds	r3, #61	; 0x3d
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	212c      	movs	r1, #44	; 0x2c
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	4413      	add	r3, r2
 80033cc:	335c      	adds	r3, #92	; 0x5c
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	0151      	lsls	r1, r2, #5
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	440a      	add	r2, r1
 80033e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ec:	f043 0302 	orr.w	r3, r3, #2
 80033f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	4611      	mov	r1, r2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f003 fe52 	bl	80070a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	4413      	add	r3, r2
 800340a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340e:	461a      	mov	r2, r3
 8003410:	2340      	movs	r3, #64	; 0x40
 8003412:	6093      	str	r3, [r2, #8]
}
 8003414:	e2a9      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	4413      	add	r3, r2
 800341e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b08      	cmp	r3, #8
 800342a:	d12a      	bne.n	8003482 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	4413      	add	r3, r2
 8003434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003438:	461a      	mov	r2, r3
 800343a:	2308      	movs	r3, #8
 800343c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	4413      	add	r3, r2
 8003446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	0151      	lsls	r1, r2, #5
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	440a      	add	r2, r1
 8003454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003458:	f043 0302 	orr.w	r3, r3, #2
 800345c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	4611      	mov	r1, r2
 8003468:	4618      	mov	r0, r3
 800346a:	f003 fe1c 	bl	80070a6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	3361      	adds	r3, #97	; 0x61
 800347c:	2205      	movs	r2, #5
 800347e:	701a      	strb	r2, [r3, #0]
}
 8003480:	e273      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	4413      	add	r3, r2
 800348a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b10      	cmp	r3, #16
 8003496:	d150      	bne.n	800353a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	212c      	movs	r1, #44	; 0x2c
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	335c      	adds	r3, #92	; 0x5c
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	212c      	movs	r1, #44	; 0x2c
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	3361      	adds	r3, #97	; 0x61
 80034b8:	2203      	movs	r2, #3
 80034ba:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	333d      	adds	r3, #61	; 0x3d
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d112      	bne.n	80034f6 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	212c      	movs	r1, #44	; 0x2c
 80034d6:	fb01 f303 	mul.w	r3, r1, r3
 80034da:	4413      	add	r3, r2
 80034dc:	333c      	adds	r3, #60	; 0x3c
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d108      	bne.n	80034f6 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	212c      	movs	r1, #44	; 0x2c
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	333d      	adds	r3, #61	; 0x3d
 80034f2:	2201      	movs	r2, #1
 80034f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	0151      	lsls	r1, r2, #5
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	440a      	add	r2, r1
 800350c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003510:	f043 0302 	orr.w	r3, r3, #2
 8003514:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f003 fdc0 	bl	80070a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	4413      	add	r3, r2
 800352e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003532:	461a      	mov	r2, r3
 8003534:	2310      	movs	r3, #16
 8003536:	6093      	str	r3, [r2, #8]
}
 8003538:	e217      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	4413      	add	r3, r2
 8003542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354c:	2b80      	cmp	r3, #128	; 0x80
 800354e:	d174      	bne.n	800363a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d121      	bne.n	800359c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3361      	adds	r3, #97	; 0x61
 8003566:	2206      	movs	r2, #6
 8003568:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	4413      	add	r3, r2
 8003572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	0151      	lsls	r1, r2, #5
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	440a      	add	r2, r1
 8003580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003584:	f043 0302 	orr.w	r3, r3, #2
 8003588:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f003 fd86 	bl	80070a6 <USB_HC_Halt>
 800359a:	e044      	b.n	8003626 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	212c      	movs	r1, #44	; 0x2c
 80035a2:	fb01 f303 	mul.w	r3, r1, r3
 80035a6:	4413      	add	r3, r2
 80035a8:	335c      	adds	r3, #92	; 0x5c
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	202c      	movs	r0, #44	; 0x2c
 80035b4:	fb00 f303 	mul.w	r3, r0, r3
 80035b8:	440b      	add	r3, r1
 80035ba:	335c      	adds	r3, #92	; 0x5c
 80035bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	212c      	movs	r1, #44	; 0x2c
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	4413      	add	r3, r2
 80035ca:	335c      	adds	r3, #92	; 0x5c
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d920      	bls.n	8003614 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	212c      	movs	r1, #44	; 0x2c
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	4413      	add	r3, r2
 80035de:	335c      	adds	r3, #92	; 0x5c
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	212c      	movs	r1, #44	; 0x2c
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	4413      	add	r3, r2
 80035f0:	3360      	adds	r3, #96	; 0x60
 80035f2:	2204      	movs	r2, #4
 80035f4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	b2d9      	uxtb	r1, r3
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	202c      	movs	r0, #44	; 0x2c
 8003600:	fb00 f303 	mul.w	r3, r0, r3
 8003604:	4413      	add	r3, r2
 8003606:	3360      	adds	r3, #96	; 0x60
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f005 f867 	bl	80086e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003612:	e008      	b.n	8003626 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	212c      	movs	r1, #44	; 0x2c
 800361a:	fb01 f303 	mul.w	r3, r1, r3
 800361e:	4413      	add	r3, r2
 8003620:	3360      	adds	r3, #96	; 0x60
 8003622:	2202      	movs	r2, #2
 8003624:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	4413      	add	r3, r2
 800362e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003632:	461a      	mov	r2, r3
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	6093      	str	r3, [r2, #8]
}
 8003638:	e197      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003650:	d134      	bne.n	80036bc <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	4413      	add	r3, r2
 800365a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	0151      	lsls	r1, r2, #5
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	440a      	add	r2, r1
 8003668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800366c:	f043 0302 	orr.w	r3, r3, #2
 8003670:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	4611      	mov	r1, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f003 fd12 	bl	80070a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	4413      	add	r3, r2
 800368a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368e:	461a      	mov	r2, r3
 8003690:	2310      	movs	r3, #16
 8003692:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	4413      	add	r3, r2
 800369c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a0:	461a      	mov	r2, r3
 80036a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	212c      	movs	r1, #44	; 0x2c
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	3361      	adds	r3, #97	; 0x61
 80036b6:	2208      	movs	r2, #8
 80036b8:	701a      	strb	r2, [r3, #0]
}
 80036ba:	e156      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	f040 814b 	bne.w	800396a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	0151      	lsls	r1, r2, #5
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	440a      	add	r2, r1
 80036ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036ee:	f023 0302 	bic.w	r3, r3, #2
 80036f2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	212c      	movs	r1, #44	; 0x2c
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	4413      	add	r3, r2
 8003700:	3361      	adds	r3, #97	; 0x61
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d179      	bne.n	80037fc <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	212c      	movs	r1, #44	; 0x2c
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	3360      	adds	r3, #96	; 0x60
 8003716:	2201      	movs	r2, #1
 8003718:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	212c      	movs	r1, #44	; 0x2c
 8003720:	fb01 f303 	mul.w	r3, r1, r3
 8003724:	4413      	add	r3, r2
 8003726:	333f      	adds	r3, #63	; 0x3f
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d00a      	beq.n	8003744 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	212c      	movs	r1, #44	; 0x2c
 8003734:	fb01 f303 	mul.w	r3, r1, r3
 8003738:	4413      	add	r3, r2
 800373a:	333f      	adds	r3, #63	; 0x3f
 800373c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800373e:	2b03      	cmp	r3, #3
 8003740:	f040 80fc 	bne.w	800393c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d142      	bne.n	80037d2 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	212c      	movs	r1, #44	; 0x2c
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	4413      	add	r3, r2
 8003758:	334c      	adds	r3, #76	; 0x4c
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 80ed 	beq.w	800393c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	212c      	movs	r1, #44	; 0x2c
 8003768:	fb01 f303 	mul.w	r3, r1, r3
 800376c:	4413      	add	r3, r2
 800376e:	334c      	adds	r3, #76	; 0x4c
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	202c      	movs	r0, #44	; 0x2c
 8003778:	fb00 f202 	mul.w	r2, r0, r2
 800377c:	440a      	add	r2, r1
 800377e:	3240      	adds	r2, #64	; 0x40
 8003780:	8812      	ldrh	r2, [r2, #0]
 8003782:	4413      	add	r3, r2
 8003784:	3b01      	subs	r3, #1
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	202c      	movs	r0, #44	; 0x2c
 800378c:	fb00 f202 	mul.w	r2, r0, r2
 8003790:	440a      	add	r2, r1
 8003792:	3240      	adds	r2, #64	; 0x40
 8003794:	8812      	ldrh	r2, [r2, #0]
 8003796:	fbb3 f3f2 	udiv	r3, r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 80ca 	beq.w	800393c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	212c      	movs	r1, #44	; 0x2c
 80037ae:	fb01 f303 	mul.w	r3, r1, r3
 80037b2:	4413      	add	r3, r2
 80037b4:	3355      	adds	r3, #85	; 0x55
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	f083 0301 	eor.w	r3, r3, #1
 80037bc:	b2d8      	uxtb	r0, r3
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	212c      	movs	r1, #44	; 0x2c
 80037c4:	fb01 f303 	mul.w	r3, r1, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	3355      	adds	r3, #85	; 0x55
 80037cc:	4602      	mov	r2, r0
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e0b4      	b.n	800393c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	212c      	movs	r1, #44	; 0x2c
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	4413      	add	r3, r2
 80037de:	3355      	adds	r3, #85	; 0x55
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	f083 0301 	eor.w	r3, r3, #1
 80037e6:	b2d8      	uxtb	r0, r3
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	212c      	movs	r1, #44	; 0x2c
 80037ee:	fb01 f303 	mul.w	r3, r1, r3
 80037f2:	4413      	add	r3, r2
 80037f4:	3355      	adds	r3, #85	; 0x55
 80037f6:	4602      	mov	r2, r0
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	e09f      	b.n	800393c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	212c      	movs	r1, #44	; 0x2c
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	4413      	add	r3, r2
 8003808:	3361      	adds	r3, #97	; 0x61
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d109      	bne.n	8003824 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	212c      	movs	r1, #44	; 0x2c
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	4413      	add	r3, r2
 800381c:	3360      	adds	r3, #96	; 0x60
 800381e:	2202      	movs	r2, #2
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	e08b      	b.n	800393c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	212c      	movs	r1, #44	; 0x2c
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	4413      	add	r3, r2
 8003830:	3361      	adds	r3, #97	; 0x61
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b04      	cmp	r3, #4
 8003836:	d109      	bne.n	800384c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	212c      	movs	r1, #44	; 0x2c
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	4413      	add	r3, r2
 8003844:	3360      	adds	r3, #96	; 0x60
 8003846:	2202      	movs	r2, #2
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	e077      	b.n	800393c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	212c      	movs	r1, #44	; 0x2c
 8003852:	fb01 f303 	mul.w	r3, r1, r3
 8003856:	4413      	add	r3, r2
 8003858:	3361      	adds	r3, #97	; 0x61
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b05      	cmp	r3, #5
 800385e:	d109      	bne.n	8003874 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	212c      	movs	r1, #44	; 0x2c
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4413      	add	r3, r2
 800386c:	3360      	adds	r3, #96	; 0x60
 800386e:	2205      	movs	r2, #5
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	e063      	b.n	800393c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	212c      	movs	r1, #44	; 0x2c
 800387a:	fb01 f303 	mul.w	r3, r1, r3
 800387e:	4413      	add	r3, r2
 8003880:	3361      	adds	r3, #97	; 0x61
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b06      	cmp	r3, #6
 8003886:	d009      	beq.n	800389c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	212c      	movs	r1, #44	; 0x2c
 800388e:	fb01 f303 	mul.w	r3, r1, r3
 8003892:	4413      	add	r3, r2
 8003894:	3361      	adds	r3, #97	; 0x61
 8003896:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003898:	2b08      	cmp	r3, #8
 800389a:	d14f      	bne.n	800393c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	212c      	movs	r1, #44	; 0x2c
 80038a2:	fb01 f303 	mul.w	r3, r1, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	335c      	adds	r3, #92	; 0x5c
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	202c      	movs	r0, #44	; 0x2c
 80038b4:	fb00 f303 	mul.w	r3, r0, r3
 80038b8:	440b      	add	r3, r1
 80038ba:	335c      	adds	r3, #92	; 0x5c
 80038bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	212c      	movs	r1, #44	; 0x2c
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	335c      	adds	r3, #92	; 0x5c
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d912      	bls.n	80038f8 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	212c      	movs	r1, #44	; 0x2c
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	4413      	add	r3, r2
 80038de:	335c      	adds	r3, #92	; 0x5c
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	212c      	movs	r1, #44	; 0x2c
 80038ea:	fb01 f303 	mul.w	r3, r1, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	3360      	adds	r3, #96	; 0x60
 80038f2:	2204      	movs	r2, #4
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	e021      	b.n	800393c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	212c      	movs	r1, #44	; 0x2c
 80038fe:	fb01 f303 	mul.w	r3, r1, r3
 8003902:	4413      	add	r3, r2
 8003904:	3360      	adds	r3, #96	; 0x60
 8003906:	2202      	movs	r2, #2
 8003908:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	4413      	add	r3, r2
 8003912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003920:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003928:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	4413      	add	r3, r2
 8003932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003936:	461a      	mov	r2, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	4413      	add	r3, r2
 8003944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003948:	461a      	mov	r2, r3
 800394a:	2302      	movs	r3, #2
 800394c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	b2d9      	uxtb	r1, r3
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	202c      	movs	r0, #44	; 0x2c
 8003958:	fb00 f303 	mul.w	r3, r0, r3
 800395c:	4413      	add	r3, r2
 800395e:	3360      	adds	r3, #96	; 0x60
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f004 febb 	bl	80086e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800396a:	bf00      	nop
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b08a      	sub	sp, #40	; 0x28
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	0c5b      	lsrs	r3, r3, #17
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039a6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d004      	beq.n	80039b8 <HCD_RXQLVL_IRQHandler+0x46>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b05      	cmp	r3, #5
 80039b2:	f000 80a9 	beq.w	8003b08 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80039b6:	e0aa      	b.n	8003b0e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80a6 	beq.w	8003b0c <HCD_RXQLVL_IRQHandler+0x19a>
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	212c      	movs	r1, #44	; 0x2c
 80039c6:	fb01 f303 	mul.w	r3, r1, r3
 80039ca:	4413      	add	r3, r2
 80039cc:	3344      	adds	r3, #68	; 0x44
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 809b 	beq.w	8003b0c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	212c      	movs	r1, #44	; 0x2c
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	3350      	adds	r3, #80	; 0x50
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	441a      	add	r2, r3
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	202c      	movs	r0, #44	; 0x2c
 80039f0:	fb00 f303 	mul.w	r3, r0, r3
 80039f4:	440b      	add	r3, r1
 80039f6:	334c      	adds	r3, #76	; 0x4c
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d87a      	bhi.n	8003af4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	212c      	movs	r1, #44	; 0x2c
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3344      	adds	r3, #68	; 0x44
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	b292      	uxth	r2, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	f002 ff0d 	bl	8006836 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	212c      	movs	r1, #44	; 0x2c
 8003a22:	fb01 f303 	mul.w	r3, r1, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	3344      	adds	r3, #68	; 0x44
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	441a      	add	r2, r3
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	202c      	movs	r0, #44	; 0x2c
 8003a36:	fb00 f303 	mul.w	r3, r0, r3
 8003a3a:	440b      	add	r3, r1
 8003a3c:	3344      	adds	r3, #68	; 0x44
 8003a3e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	212c      	movs	r1, #44	; 0x2c
 8003a46:	fb01 f303 	mul.w	r3, r1, r3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3350      	adds	r3, #80	; 0x50
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	441a      	add	r2, r3
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	202c      	movs	r0, #44	; 0x2c
 8003a5a:	fb00 f303 	mul.w	r3, r0, r3
 8003a5e:	440b      	add	r3, r1
 8003a60:	3350      	adds	r3, #80	; 0x50
 8003a62:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	0cdb      	lsrs	r3, r3, #19
 8003a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a78:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	212c      	movs	r1, #44	; 0x2c
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	4413      	add	r3, r2
 8003a86:	3340      	adds	r3, #64	; 0x40
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d13c      	bne.n	8003b0c <HCD_RXQLVL_IRQHandler+0x19a>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d039      	beq.n	8003b0c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003aae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ab6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	212c      	movs	r1, #44	; 0x2c
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3354      	adds	r3, #84	; 0x54
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	f083 0301 	eor.w	r3, r3, #1
 8003ade:	b2d8      	uxtb	r0, r3
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	212c      	movs	r1, #44	; 0x2c
 8003ae6:	fb01 f303 	mul.w	r3, r1, r3
 8003aea:	4413      	add	r3, r2
 8003aec:	3354      	adds	r3, #84	; 0x54
 8003aee:	4602      	mov	r2, r0
 8003af0:	701a      	strb	r2, [r3, #0]
      break;
 8003af2:	e00b      	b.n	8003b0c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	212c      	movs	r1, #44	; 0x2c
 8003afa:	fb01 f303 	mul.w	r3, r1, r3
 8003afe:	4413      	add	r3, r2
 8003b00:	3360      	adds	r3, #96	; 0x60
 8003b02:	2204      	movs	r2, #4
 8003b04:	701a      	strb	r2, [r3, #0]
      break;
 8003b06:	e001      	b.n	8003b0c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003b08:	bf00      	nop
 8003b0a:	e000      	b.n	8003b0e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003b0c:	bf00      	nop
  }
}
 8003b0e:	bf00      	nop
 8003b10:	3728      	adds	r7, #40	; 0x28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b086      	sub	sp, #24
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b42:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d10b      	bne.n	8003b66 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d102      	bne.n	8003b5e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f004 fda5 	bl	80086a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f043 0302 	orr.w	r3, r3, #2
 8003b64:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d132      	bne.n	8003bd6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f043 0308 	orr.w	r3, r3, #8
 8003b76:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d126      	bne.n	8003bd0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d113      	bne.n	8003bb2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003b90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b94:	d106      	bne.n	8003ba4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f002 ff85 	bl	8006aac <USB_InitFSLSPClkSel>
 8003ba2:	e011      	b.n	8003bc8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2101      	movs	r1, #1
 8003baa:	4618      	mov	r0, r3
 8003bac:	f002 ff7e 	bl	8006aac <USB_InitFSLSPClkSel>
 8003bb0:	e00a      	b.n	8003bc8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d106      	bne.n	8003bc8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003bc6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f004 fd97 	bl	80086fc <HAL_HCD_PortEnabled_Callback>
 8003bce:	e002      	b.n	8003bd6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f004 fda1 	bl	8008718 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d103      	bne.n	8003be8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f043 0320 	orr.w	r3, r3, #32
 8003be6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	6013      	str	r3, [r2, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e12b      	b.n	8003e66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fd fc92 	bl	800154c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2224      	movs	r2, #36	; 0x24
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c60:	f001 f9fc 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 8003c64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4a81      	ldr	r2, [pc, #516]	; (8003e70 <HAL_I2C_Init+0x274>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d807      	bhi.n	8003c80 <HAL_I2C_Init+0x84>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a80      	ldr	r2, [pc, #512]	; (8003e74 <HAL_I2C_Init+0x278>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	bf94      	ite	ls
 8003c78:	2301      	movls	r3, #1
 8003c7a:	2300      	movhi	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	e006      	b.n	8003c8e <HAL_I2C_Init+0x92>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4a7d      	ldr	r2, [pc, #500]	; (8003e78 <HAL_I2C_Init+0x27c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	bf94      	ite	ls
 8003c88:	2301      	movls	r3, #1
 8003c8a:	2300      	movhi	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e0e7      	b.n	8003e66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4a78      	ldr	r2, [pc, #480]	; (8003e7c <HAL_I2C_Init+0x280>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	0c9b      	lsrs	r3, r3, #18
 8003ca0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4a6a      	ldr	r2, [pc, #424]	; (8003e70 <HAL_I2C_Init+0x274>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d802      	bhi.n	8003cd0 <HAL_I2C_Init+0xd4>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	e009      	b.n	8003ce4 <HAL_I2C_Init+0xe8>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	4a69      	ldr	r2, [pc, #420]	; (8003e80 <HAL_I2C_Init+0x284>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	099b      	lsrs	r3, r3, #6
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	495c      	ldr	r1, [pc, #368]	; (8003e70 <HAL_I2C_Init+0x274>)
 8003d00:	428b      	cmp	r3, r1
 8003d02:	d819      	bhi.n	8003d38 <HAL_I2C_Init+0x13c>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1e59      	subs	r1, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d12:	1c59      	adds	r1, r3, #1
 8003d14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d18:	400b      	ands	r3, r1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_I2C_Init+0x138>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1e59      	subs	r1, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d32:	e051      	b.n	8003dd8 <HAL_I2C_Init+0x1dc>
 8003d34:	2304      	movs	r3, #4
 8003d36:	e04f      	b.n	8003dd8 <HAL_I2C_Init+0x1dc>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d111      	bne.n	8003d64 <HAL_I2C_Init+0x168>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1e58      	subs	r0, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6859      	ldr	r1, [r3, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	440b      	add	r3, r1
 8003d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d52:	3301      	adds	r3, #1
 8003d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	e012      	b.n	8003d8a <HAL_I2C_Init+0x18e>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1e58      	subs	r0, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	0099      	lsls	r1, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bf0c      	ite	eq
 8003d84:	2301      	moveq	r3, #1
 8003d86:	2300      	movne	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_I2C_Init+0x196>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e022      	b.n	8003dd8 <HAL_I2C_Init+0x1dc>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10e      	bne.n	8003db8 <HAL_I2C_Init+0x1bc>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1e58      	subs	r0, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6859      	ldr	r1, [r3, #4]
 8003da2:	460b      	mov	r3, r1
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	440b      	add	r3, r1
 8003da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dac:	3301      	adds	r3, #1
 8003dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db6:	e00f      	b.n	8003dd8 <HAL_I2C_Init+0x1dc>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1e58      	subs	r0, r3, #1
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6859      	ldr	r1, [r3, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	0099      	lsls	r1, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dce:	3301      	adds	r3, #1
 8003dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	6809      	ldr	r1, [r1, #0]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69da      	ldr	r2, [r3, #28]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6911      	ldr	r1, [r2, #16]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68d2      	ldr	r2, [r2, #12]
 8003e12:	4311      	orrs	r1, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	000186a0 	.word	0x000186a0
 8003e74:	001e847f 	.word	0x001e847f
 8003e78:	003d08ff 	.word	0x003d08ff
 8003e7c:	431bde83 	.word	0x431bde83
 8003e80:	10624dd3 	.word	0x10624dd3

08003e84 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e128      	b.n	80040e8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a90      	ldr	r2, [pc, #576]	; (80040f0 <HAL_I2S_Init+0x26c>)
 8003eae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7fd fb93 	bl	80015dc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ecc:	f023 030f 	bic.w	r3, r3, #15
 8003ed0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d060      	beq.n	8003fa4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d102      	bne.n	8003ef0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003eea:	2310      	movs	r3, #16
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	e001      	b.n	8003ef4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003ef0:	2320      	movs	r3, #32
 8003ef2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d802      	bhi.n	8003f02 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003f02:	2001      	movs	r0, #1
 8003f04:	f001 f9a0 	bl	8005248 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f08:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f12:	d125      	bne.n	8003f60 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d010      	beq.n	8003f3e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	461a      	mov	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f38:	3305      	adds	r3, #5
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	e01f      	b.n	8003f7e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	461a      	mov	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5a:	3305      	adds	r3, #5
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	e00e      	b.n	8003f7e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	461a      	mov	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7a:	3305      	adds	r3, #5
 8003f7c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4a5c      	ldr	r2, [pc, #368]	; (80040f4 <HAL_I2S_Init+0x270>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	08db      	lsrs	r3, r3, #3
 8003f88:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	e003      	b.n	8003fac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d902      	bls.n	8003fb8 <HAL_I2S_Init+0x134>
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	2bff      	cmp	r3, #255	; 0xff
 8003fb6:	d907      	bls.n	8003fc8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbc:	f043 0210 	orr.w	r2, r3, #16
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e08f      	b.n	80040e8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	ea42 0103 	orr.w	r1, r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003fe6:	f023 030f 	bic.w	r3, r3, #15
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6851      	ldr	r1, [r2, #4]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6892      	ldr	r2, [r2, #8]
 8003ff2:	4311      	orrs	r1, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	68d2      	ldr	r2, [r2, #12]
 8003ff8:	4311      	orrs	r1, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6992      	ldr	r2, [r2, #24]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800400a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d161      	bne.n	80040d8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a38      	ldr	r2, [pc, #224]	; (80040f8 <HAL_I2S_Init+0x274>)
 8004018:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a37      	ldr	r2, [pc, #220]	; (80040fc <HAL_I2S_Init+0x278>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <HAL_I2S_Init+0x1a4>
 8004024:	4b36      	ldr	r3, [pc, #216]	; (8004100 <HAL_I2S_Init+0x27c>)
 8004026:	e001      	b.n	800402c <HAL_I2S_Init+0x1a8>
 8004028:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	4932      	ldr	r1, [pc, #200]	; (80040fc <HAL_I2S_Init+0x278>)
 8004034:	428a      	cmp	r2, r1
 8004036:	d101      	bne.n	800403c <HAL_I2S_Init+0x1b8>
 8004038:	4a31      	ldr	r2, [pc, #196]	; (8004100 <HAL_I2S_Init+0x27c>)
 800403a:	e001      	b.n	8004040 <HAL_I2S_Init+0x1bc>
 800403c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004040:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004044:	f023 030f 	bic.w	r3, r3, #15
 8004048:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a2b      	ldr	r2, [pc, #172]	; (80040fc <HAL_I2S_Init+0x278>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d101      	bne.n	8004058 <HAL_I2S_Init+0x1d4>
 8004054:	4b2a      	ldr	r3, [pc, #168]	; (8004100 <HAL_I2S_Init+0x27c>)
 8004056:	e001      	b.n	800405c <HAL_I2S_Init+0x1d8>
 8004058:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800405c:	2202      	movs	r2, #2
 800405e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a25      	ldr	r2, [pc, #148]	; (80040fc <HAL_I2S_Init+0x278>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d101      	bne.n	800406e <HAL_I2S_Init+0x1ea>
 800406a:	4b25      	ldr	r3, [pc, #148]	; (8004100 <HAL_I2S_Init+0x27c>)
 800406c:	e001      	b.n	8004072 <HAL_I2S_Init+0x1ee>
 800406e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800407e:	d003      	beq.n	8004088 <HAL_I2S_Init+0x204>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d103      	bne.n	8004090 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	e001      	b.n	8004094 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004090:	2300      	movs	r3, #0
 8004092:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800409e:	4313      	orrs	r3, r2
 80040a0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80040a8:	4313      	orrs	r3, r2
 80040aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80040b2:	4313      	orrs	r3, r2
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	897b      	ldrh	r3, [r7, #10]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040c0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a0d      	ldr	r2, [pc, #52]	; (80040fc <HAL_I2S_Init+0x278>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d101      	bne.n	80040d0 <HAL_I2S_Init+0x24c>
 80040cc:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <HAL_I2S_Init+0x27c>)
 80040ce:	e001      	b.n	80040d4 <HAL_I2S_Init+0x250>
 80040d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040d4:	897a      	ldrh	r2, [r7, #10]
 80040d6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3720      	adds	r7, #32
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	080041fb 	.word	0x080041fb
 80040f4:	cccccccd 	.word	0xcccccccd
 80040f8:	08004311 	.word	0x08004311
 80040fc:	40003800 	.word	0x40003800
 8004100:	40003400 	.word	0x40003400

08004104 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	881a      	ldrh	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	1c9a      	adds	r2, r3, #2
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10e      	bne.n	8004194 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004184:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff ffb8 	bl	8004104 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	b292      	uxth	r2, r2
 80041b0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	1c9a      	adds	r2, r3, #2
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10e      	bne.n	80041f2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ff93 	bl	8004118 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b086      	sub	sp, #24
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b04      	cmp	r3, #4
 8004214:	d13a      	bne.n	800428c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d109      	bne.n	8004234 <I2S_IRQHandler+0x3a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b40      	cmp	r3, #64	; 0x40
 800422c:	d102      	bne.n	8004234 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff ffb4 	bl	800419c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d126      	bne.n	800428c <I2S_IRQHandler+0x92>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b20      	cmp	r3, #32
 800424a:	d11f      	bne.n	800428c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800425a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800425c:	2300      	movs	r3, #0
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	613b      	str	r3, [r7, #16]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	f043 0202 	orr.w	r2, r3, #2
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff ff50 	bl	800412c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b03      	cmp	r3, #3
 8004296:	d136      	bne.n	8004306 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d109      	bne.n	80042b6 <I2S_IRQHandler+0xbc>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ac:	2b80      	cmp	r3, #128	; 0x80
 80042ae:	d102      	bne.n	80042b6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff ff45 	bl	8004140 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d122      	bne.n	8004306 <I2S_IRQHandler+0x10c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	d11b      	bne.n	8004306 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042dc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f8:	f043 0204 	orr.w	r2, r3, #4
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff ff13 	bl	800412c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004306:	bf00      	nop
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4aa2      	ldr	r2, [pc, #648]	; (80045b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d101      	bne.n	800432e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800432a:	4ba2      	ldr	r3, [pc, #648]	; (80045b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800432c:	e001      	b.n	8004332 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800432e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a9b      	ldr	r2, [pc, #620]	; (80045b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d101      	bne.n	800434c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004348:	4b9a      	ldr	r3, [pc, #616]	; (80045b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800434a:	e001      	b.n	8004350 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800434c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800435c:	d004      	beq.n	8004368 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f040 8099 	bne.w	800449a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b02      	cmp	r3, #2
 8004370:	d107      	bne.n	8004382 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f925 	bl	80045cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d107      	bne.n	800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f9c8 	bl	800472c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a2:	2b40      	cmp	r3, #64	; 0x40
 80043a4:	d13a      	bne.n	800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d035      	beq.n	800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a7e      	ldr	r2, [pc, #504]	; (80045b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d101      	bne.n	80043be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80043ba:	4b7e      	ldr	r3, [pc, #504]	; (80045b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043bc:	e001      	b.n	80043c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80043be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4979      	ldr	r1, [pc, #484]	; (80045b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043ca:	428b      	cmp	r3, r1
 80043cc:	d101      	bne.n	80043d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80043ce:	4b79      	ldr	r3, [pc, #484]	; (80045b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043d0:	e001      	b.n	80043d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80043d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	f043 0202 	orr.w	r2, r3, #2
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff fe88 	bl	800412c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b08      	cmp	r3, #8
 8004424:	f040 80be 	bne.w	80045a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 80b8 	beq.w	80045a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004442:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a59      	ldr	r2, [pc, #356]	; (80045b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d101      	bne.n	8004452 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800444e:	4b59      	ldr	r3, [pc, #356]	; (80045b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004450:	e001      	b.n	8004456 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004452:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4954      	ldr	r1, [pc, #336]	; (80045b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800445e:	428b      	cmp	r3, r1
 8004460:	d101      	bne.n	8004466 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004462:	4b54      	ldr	r3, [pc, #336]	; (80045b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004464:	e001      	b.n	800446a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004466:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800446a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800446e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004470:	2300      	movs	r3, #0
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448a:	f043 0204 	orr.w	r2, r3, #4
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff fe4a 	bl	800412c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004498:	e084      	b.n	80045a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d107      	bne.n	80044b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f8be 	bl	8004630 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d107      	bne.n	80044ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f8fd 	bl	80046c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d4:	2b40      	cmp	r3, #64	; 0x40
 80044d6:	d12f      	bne.n	8004538 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d02a      	beq.n	8004538 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044f0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a2e      	ldr	r2, [pc, #184]	; (80045b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d101      	bne.n	8004500 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80044fc:	4b2d      	ldr	r3, [pc, #180]	; (80045b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044fe:	e001      	b.n	8004504 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004500:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4929      	ldr	r1, [pc, #164]	; (80045b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800450c:	428b      	cmp	r3, r1
 800450e:	d101      	bne.n	8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004510:	4b28      	ldr	r3, [pc, #160]	; (80045b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004512:	e001      	b.n	8004518 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004514:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004518:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800451c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	f043 0202 	orr.w	r2, r3, #2
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff fdfa 	bl	800412c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b08      	cmp	r3, #8
 8004540:	d131      	bne.n	80045a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d02c      	beq.n	80045a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d101      	bne.n	800455a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004556:	4b17      	ldr	r3, [pc, #92]	; (80045b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004558:	e001      	b.n	800455e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800455a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4912      	ldr	r1, [pc, #72]	; (80045b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004566:	428b      	cmp	r3, r1
 8004568:	d101      	bne.n	800456e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800456a:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800456c:	e001      	b.n	8004572 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800456e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004572:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004576:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004586:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	f043 0204 	orr.w	r2, r3, #4
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff fdc5 	bl	800412c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045a2:	e000      	b.n	80045a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045a4:	bf00      	nop
}
 80045a6:	bf00      	nop
 80045a8:	3720      	adds	r7, #32
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40003800 	.word	0x40003800
 80045b4:	40003400 	.word	0x40003400

080045b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	1c99      	adds	r1, r3, #2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6251      	str	r1, [r2, #36]	; 0x24
 80045de:	881a      	ldrh	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d113      	bne.n	8004626 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800460c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d106      	bne.n	8004626 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7ff ffc9 	bl	80045b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	1c99      	adds	r1, r3, #2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6251      	str	r1, [r2, #36]	; 0x24
 8004642:	8819      	ldrh	r1, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1d      	ldr	r2, [pc, #116]	; (80046c0 <I2SEx_TxISR_I2SExt+0x90>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d101      	bne.n	8004652 <I2SEx_TxISR_I2SExt+0x22>
 800464e:	4b1d      	ldr	r3, [pc, #116]	; (80046c4 <I2SEx_TxISR_I2SExt+0x94>)
 8004650:	e001      	b.n	8004656 <I2SEx_TxISR_I2SExt+0x26>
 8004652:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004656:	460a      	mov	r2, r1
 8004658:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d121      	bne.n	80046b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a12      	ldr	r2, [pc, #72]	; (80046c0 <I2SEx_TxISR_I2SExt+0x90>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d101      	bne.n	8004680 <I2SEx_TxISR_I2SExt+0x50>
 800467c:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <I2SEx_TxISR_I2SExt+0x94>)
 800467e:	e001      	b.n	8004684 <I2SEx_TxISR_I2SExt+0x54>
 8004680:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	490d      	ldr	r1, [pc, #52]	; (80046c0 <I2SEx_TxISR_I2SExt+0x90>)
 800468c:	428b      	cmp	r3, r1
 800468e:	d101      	bne.n	8004694 <I2SEx_TxISR_I2SExt+0x64>
 8004690:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <I2SEx_TxISR_I2SExt+0x94>)
 8004692:	e001      	b.n	8004698 <I2SEx_TxISR_I2SExt+0x68>
 8004694:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004698:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800469c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff ff81 	bl	80045b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40003800 	.word	0x40003800
 80046c4:	40003400 	.word	0x40003400

080046c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68d8      	ldr	r0, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	1c99      	adds	r1, r3, #2
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80046e0:	b282      	uxth	r2, r0
 80046e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d113      	bne.n	8004724 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800470a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff ff4a 	bl	80045b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a20      	ldr	r2, [pc, #128]	; (80047bc <I2SEx_RxISR_I2SExt+0x90>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d101      	bne.n	8004742 <I2SEx_RxISR_I2SExt+0x16>
 800473e:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <I2SEx_RxISR_I2SExt+0x94>)
 8004740:	e001      	b.n	8004746 <I2SEx_RxISR_I2SExt+0x1a>
 8004742:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004746:	68d8      	ldr	r0, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	1c99      	adds	r1, r3, #2
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004752:	b282      	uxth	r2, r0
 8004754:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d121      	bne.n	80047b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a12      	ldr	r2, [pc, #72]	; (80047bc <I2SEx_RxISR_I2SExt+0x90>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d101      	bne.n	800477c <I2SEx_RxISR_I2SExt+0x50>
 8004778:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <I2SEx_RxISR_I2SExt+0x94>)
 800477a:	e001      	b.n	8004780 <I2SEx_RxISR_I2SExt+0x54>
 800477c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	490d      	ldr	r1, [pc, #52]	; (80047bc <I2SEx_RxISR_I2SExt+0x90>)
 8004788:	428b      	cmp	r3, r1
 800478a:	d101      	bne.n	8004790 <I2SEx_RxISR_I2SExt+0x64>
 800478c:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <I2SEx_RxISR_I2SExt+0x94>)
 800478e:	e001      	b.n	8004794 <I2SEx_RxISR_I2SExt+0x68>
 8004790:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004794:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004798:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d106      	bne.n	80047b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff ff03 	bl	80045b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047b2:	bf00      	nop
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40003800 	.word	0x40003800
 80047c0:	40003400 	.word	0x40003400

080047c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e264      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d075      	beq.n	80048ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047e2:	4ba3      	ldr	r3, [pc, #652]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 030c 	and.w	r3, r3, #12
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d00c      	beq.n	8004808 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ee:	4ba0      	ldr	r3, [pc, #640]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d112      	bne.n	8004820 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047fa:	4b9d      	ldr	r3, [pc, #628]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004806:	d10b      	bne.n	8004820 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004808:	4b99      	ldr	r3, [pc, #612]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d05b      	beq.n	80048cc <HAL_RCC_OscConfig+0x108>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d157      	bne.n	80048cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e23f      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004828:	d106      	bne.n	8004838 <HAL_RCC_OscConfig+0x74>
 800482a:	4b91      	ldr	r3, [pc, #580]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a90      	ldr	r2, [pc, #576]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	e01d      	b.n	8004874 <HAL_RCC_OscConfig+0xb0>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004840:	d10c      	bne.n	800485c <HAL_RCC_OscConfig+0x98>
 8004842:	4b8b      	ldr	r3, [pc, #556]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a8a      	ldr	r2, [pc, #552]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	4b88      	ldr	r3, [pc, #544]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a87      	ldr	r2, [pc, #540]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	e00b      	b.n	8004874 <HAL_RCC_OscConfig+0xb0>
 800485c:	4b84      	ldr	r3, [pc, #528]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a83      	ldr	r2, [pc, #524]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004866:	6013      	str	r3, [r2, #0]
 8004868:	4b81      	ldr	r3, [pc, #516]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a80      	ldr	r2, [pc, #512]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 800486e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d013      	beq.n	80048a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487c:	f7fd f964 	bl	8001b48 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004884:	f7fd f960 	bl	8001b48 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b64      	cmp	r3, #100	; 0x64
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e204      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004896:	4b76      	ldr	r3, [pc, #472]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f0      	beq.n	8004884 <HAL_RCC_OscConfig+0xc0>
 80048a2:	e014      	b.n	80048ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a4:	f7fd f950 	bl	8001b48 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048ac:	f7fd f94c 	bl	8001b48 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b64      	cmp	r3, #100	; 0x64
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e1f0      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048be:	4b6c      	ldr	r3, [pc, #432]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0xe8>
 80048ca:	e000      	b.n	80048ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d063      	beq.n	80049a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048da:	4b65      	ldr	r3, [pc, #404]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 030c 	and.w	r3, r3, #12
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00b      	beq.n	80048fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048e6:	4b62      	ldr	r3, [pc, #392]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d11c      	bne.n	800492c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048f2:	4b5f      	ldr	r3, [pc, #380]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d116      	bne.n	800492c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048fe:	4b5c      	ldr	r3, [pc, #368]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <HAL_RCC_OscConfig+0x152>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d001      	beq.n	8004916 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e1c4      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004916:	4b56      	ldr	r3, [pc, #344]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	4952      	ldr	r1, [pc, #328]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004926:	4313      	orrs	r3, r2
 8004928:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492a:	e03a      	b.n	80049a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d020      	beq.n	8004976 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004934:	4b4f      	ldr	r3, [pc, #316]	; (8004a74 <HAL_RCC_OscConfig+0x2b0>)
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493a:	f7fd f905 	bl	8001b48 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004942:	f7fd f901 	bl	8001b48 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e1a5      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004954:	4b46      	ldr	r3, [pc, #280]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0f0      	beq.n	8004942 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004960:	4b43      	ldr	r3, [pc, #268]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	4940      	ldr	r1, [pc, #256]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004970:	4313      	orrs	r3, r2
 8004972:	600b      	str	r3, [r1, #0]
 8004974:	e015      	b.n	80049a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004976:	4b3f      	ldr	r3, [pc, #252]	; (8004a74 <HAL_RCC_OscConfig+0x2b0>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fd f8e4 	bl	8001b48 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004984:	f7fd f8e0 	bl	8001b48 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e184      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004996:	4b36      	ldr	r3, [pc, #216]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d030      	beq.n	8004a10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d016      	beq.n	80049e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b6:	4b30      	ldr	r3, [pc, #192]	; (8004a78 <HAL_RCC_OscConfig+0x2b4>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049bc:	f7fd f8c4 	bl	8001b48 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c4:	f7fd f8c0 	bl	8001b48 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e164      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d6:	4b26      	ldr	r3, [pc, #152]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0f0      	beq.n	80049c4 <HAL_RCC_OscConfig+0x200>
 80049e2:	e015      	b.n	8004a10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049e4:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <HAL_RCC_OscConfig+0x2b4>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ea:	f7fd f8ad 	bl	8001b48 <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049f2:	f7fd f8a9 	bl	8001b48 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e14d      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a04:	4b1a      	ldr	r3, [pc, #104]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f0      	bne.n	80049f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80a0 	beq.w	8004b5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a22:	4b13      	ldr	r3, [pc, #76]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10f      	bne.n	8004a4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60bb      	str	r3, [r7, #8]
 8004a32:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	4a0e      	ldr	r2, [pc, #56]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <HAL_RCC_OscConfig+0x2ac>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a46:	60bb      	str	r3, [r7, #8]
 8004a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_RCC_OscConfig+0x2b8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d121      	bne.n	8004a9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a5a:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <HAL_RCC_OscConfig+0x2b8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a07      	ldr	r2, [pc, #28]	; (8004a7c <HAL_RCC_OscConfig+0x2b8>)
 8004a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a66:	f7fd f86f 	bl	8001b48 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a6c:	e011      	b.n	8004a92 <HAL_RCC_OscConfig+0x2ce>
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800
 8004a74:	42470000 	.word	0x42470000
 8004a78:	42470e80 	.word	0x42470e80
 8004a7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a80:	f7fd f862 	bl	8001b48 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e106      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a92:	4b85      	ldr	r3, [pc, #532]	; (8004ca8 <HAL_RCC_OscConfig+0x4e4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d106      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x2f0>
 8004aa6:	4b81      	ldr	r3, [pc, #516]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aaa:	4a80      	ldr	r2, [pc, #512]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab2:	e01c      	b.n	8004aee <HAL_RCC_OscConfig+0x32a>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b05      	cmp	r3, #5
 8004aba:	d10c      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x312>
 8004abc:	4b7b      	ldr	r3, [pc, #492]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac0:	4a7a      	ldr	r2, [pc, #488]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004ac2:	f043 0304 	orr.w	r3, r3, #4
 8004ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac8:	4b78      	ldr	r3, [pc, #480]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004acc:	4a77      	ldr	r2, [pc, #476]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004ace:	f043 0301 	orr.w	r3, r3, #1
 8004ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad4:	e00b      	b.n	8004aee <HAL_RCC_OscConfig+0x32a>
 8004ad6:	4b75      	ldr	r3, [pc, #468]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	4a74      	ldr	r2, [pc, #464]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004adc:	f023 0301 	bic.w	r3, r3, #1
 8004ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae2:	4b72      	ldr	r3, [pc, #456]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	4a71      	ldr	r2, [pc, #452]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004ae8:	f023 0304 	bic.w	r3, r3, #4
 8004aec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d015      	beq.n	8004b22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af6:	f7fd f827 	bl	8001b48 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afc:	e00a      	b.n	8004b14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004afe:	f7fd f823 	bl	8001b48 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e0c5      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b14:	4b65      	ldr	r3, [pc, #404]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0ee      	beq.n	8004afe <HAL_RCC_OscConfig+0x33a>
 8004b20:	e014      	b.n	8004b4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b22:	f7fd f811 	bl	8001b48 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b28:	e00a      	b.n	8004b40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b2a:	f7fd f80d 	bl	8001b48 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e0af      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b40:	4b5a      	ldr	r3, [pc, #360]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1ee      	bne.n	8004b2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d105      	bne.n	8004b5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b52:	4b56      	ldr	r3, [pc, #344]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	4a55      	ldr	r2, [pc, #340]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 809b 	beq.w	8004c9e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b68:	4b50      	ldr	r3, [pc, #320]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 030c 	and.w	r3, r3, #12
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d05c      	beq.n	8004c2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d141      	bne.n	8004c00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b7c:	4b4c      	ldr	r3, [pc, #304]	; (8004cb0 <HAL_RCC_OscConfig+0x4ec>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b82:	f7fc ffe1 	bl	8001b48 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b8a:	f7fc ffdd 	bl	8001b48 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e081      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b9c:	4b43      	ldr	r3, [pc, #268]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1f0      	bne.n	8004b8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	019b      	lsls	r3, r3, #6
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbe:	085b      	lsrs	r3, r3, #1
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	041b      	lsls	r3, r3, #16
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	061b      	lsls	r3, r3, #24
 8004bcc:	4937      	ldr	r1, [pc, #220]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bd2:	4b37      	ldr	r3, [pc, #220]	; (8004cb0 <HAL_RCC_OscConfig+0x4ec>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd8:	f7fc ffb6 	bl	8001b48 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004be0:	f7fc ffb2 	bl	8001b48 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e056      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf2:	4b2e      	ldr	r3, [pc, #184]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCC_OscConfig+0x41c>
 8004bfe:	e04e      	b.n	8004c9e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c00:	4b2b      	ldr	r3, [pc, #172]	; (8004cb0 <HAL_RCC_OscConfig+0x4ec>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c06:	f7fc ff9f 	bl	8001b48 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c0e:	f7fc ff9b 	bl	8001b48 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e03f      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c20:	4b22      	ldr	r3, [pc, #136]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1f0      	bne.n	8004c0e <HAL_RCC_OscConfig+0x44a>
 8004c2c:	e037      	b.n	8004c9e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e032      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c3a:	4b1c      	ldr	r3, [pc, #112]	; (8004cac <HAL_RCC_OscConfig+0x4e8>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d028      	beq.n	8004c9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d121      	bne.n	8004c9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d11a      	bne.n	8004c9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d111      	bne.n	8004c9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c80:	085b      	lsrs	r3, r3, #1
 8004c82:	3b01      	subs	r3, #1
 8004c84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d107      	bne.n	8004c9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d001      	beq.n	8004c9e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40007000 	.word	0x40007000
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	42470060 	.word	0x42470060

08004cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0cc      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b68      	ldr	r3, [pc, #416]	; (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d90c      	bls.n	8004cf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b65      	ldr	r3, [pc, #404]	; (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b63      	ldr	r3, [pc, #396]	; (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0b8      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d020      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d005      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d08:	4b59      	ldr	r3, [pc, #356]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	4a58      	ldr	r2, [pc, #352]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d20:	4b53      	ldr	r3, [pc, #332]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	4a52      	ldr	r2, [pc, #328]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d2c:	4b50      	ldr	r3, [pc, #320]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	494d      	ldr	r1, [pc, #308]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d044      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d107      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d52:	4b47      	ldr	r3, [pc, #284]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d119      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e07f      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d003      	beq.n	8004d72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d107      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d72:	4b3f      	ldr	r3, [pc, #252]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e06f      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d82:	4b3b      	ldr	r3, [pc, #236]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e067      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d92:	4b37      	ldr	r3, [pc, #220]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f023 0203 	bic.w	r2, r3, #3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4934      	ldr	r1, [pc, #208]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004da4:	f7fc fed0 	bl	8001b48 <HAL_GetTick>
 8004da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dac:	f7fc fecc 	bl	8001b48 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e04f      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc2:	4b2b      	ldr	r3, [pc, #172]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 020c 	and.w	r2, r3, #12
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d1eb      	bne.n	8004dac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd4:	4b25      	ldr	r3, [pc, #148]	; (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d20c      	bcs.n	8004dfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de2:	4b22      	ldr	r3, [pc, #136]	; (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dea:	4b20      	ldr	r3, [pc, #128]	; (8004e6c <HAL_RCC_ClockConfig+0x1b8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d001      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e032      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e08:	4b19      	ldr	r3, [pc, #100]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	4916      	ldr	r1, [pc, #88]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e26:	4b12      	ldr	r3, [pc, #72]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	490e      	ldr	r1, [pc, #56]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e3a:	f000 f821 	bl	8004e80 <HAL_RCC_GetSysClockFreq>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	091b      	lsrs	r3, r3, #4
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	490a      	ldr	r1, [pc, #40]	; (8004e74 <HAL_RCC_ClockConfig+0x1c0>)
 8004e4c:	5ccb      	ldrb	r3, [r1, r3]
 8004e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e52:	4a09      	ldr	r2, [pc, #36]	; (8004e78 <HAL_RCC_ClockConfig+0x1c4>)
 8004e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e56:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <HAL_RCC_ClockConfig+0x1c8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fc fe30 	bl	8001ac0 <HAL_InitTick>

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40023c00 	.word	0x40023c00
 8004e70:	40023800 	.word	0x40023800
 8004e74:	08008f24 	.word	0x08008f24
 8004e78:	20000008 	.word	0x20000008
 8004e7c:	2000000c 	.word	0x2000000c

08004e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	607b      	str	r3, [r7, #4]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	2300      	movs	r3, #0
 8004e92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e98:	4b67      	ldr	r3, [pc, #412]	; (8005038 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 030c 	and.w	r3, r3, #12
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d00d      	beq.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	f200 80bd 	bhi.w	8005024 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d003      	beq.n	8004eba <HAL_RCC_GetSysClockFreq+0x3a>
 8004eb2:	e0b7      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004eb4:	4b61      	ldr	r3, [pc, #388]	; (800503c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004eb6:	60bb      	str	r3, [r7, #8]
       break;
 8004eb8:	e0b7      	b.n	800502a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eba:	4b61      	ldr	r3, [pc, #388]	; (8005040 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004ebc:	60bb      	str	r3, [r7, #8]
      break;
 8004ebe:	e0b4      	b.n	800502a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ec0:	4b5d      	ldr	r3, [pc, #372]	; (8005038 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ec8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eca:	4b5b      	ldr	r3, [pc, #364]	; (8005038 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d04d      	beq.n	8004f72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ed6:	4b58      	ldr	r3, [pc, #352]	; (8005038 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	099b      	lsrs	r3, r3, #6
 8004edc:	461a      	mov	r2, r3
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ee6:	f04f 0100 	mov.w	r1, #0
 8004eea:	ea02 0800 	and.w	r8, r2, r0
 8004eee:	ea03 0901 	and.w	r9, r3, r1
 8004ef2:	4640      	mov	r0, r8
 8004ef4:	4649      	mov	r1, r9
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	014b      	lsls	r3, r1, #5
 8004f00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f04:	0142      	lsls	r2, r0, #5
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	ebb0 0008 	subs.w	r0, r0, r8
 8004f0e:	eb61 0109 	sbc.w	r1, r1, r9
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	018b      	lsls	r3, r1, #6
 8004f1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f20:	0182      	lsls	r2, r0, #6
 8004f22:	1a12      	subs	r2, r2, r0
 8004f24:	eb63 0301 	sbc.w	r3, r3, r1
 8004f28:	f04f 0000 	mov.w	r0, #0
 8004f2c:	f04f 0100 	mov.w	r1, #0
 8004f30:	00d9      	lsls	r1, r3, #3
 8004f32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f36:	00d0      	lsls	r0, r2, #3
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	eb12 0208 	adds.w	r2, r2, r8
 8004f40:	eb43 0309 	adc.w	r3, r3, r9
 8004f44:	f04f 0000 	mov.w	r0, #0
 8004f48:	f04f 0100 	mov.w	r1, #0
 8004f4c:	0259      	lsls	r1, r3, #9
 8004f4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f52:	0250      	lsls	r0, r2, #9
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	f7fb f930 	bl	80001c8 <__aeabi_uldivmod>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	e04a      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f72:	4b31      	ldr	r3, [pc, #196]	; (8005038 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	099b      	lsrs	r3, r3, #6
 8004f78:	461a      	mov	r2, r3
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f82:	f04f 0100 	mov.w	r1, #0
 8004f86:	ea02 0400 	and.w	r4, r2, r0
 8004f8a:	ea03 0501 	and.w	r5, r3, r1
 8004f8e:	4620      	mov	r0, r4
 8004f90:	4629      	mov	r1, r5
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	014b      	lsls	r3, r1, #5
 8004f9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fa0:	0142      	lsls	r2, r0, #5
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	1b00      	subs	r0, r0, r4
 8004fa8:	eb61 0105 	sbc.w	r1, r1, r5
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	018b      	lsls	r3, r1, #6
 8004fb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004fba:	0182      	lsls	r2, r0, #6
 8004fbc:	1a12      	subs	r2, r2, r0
 8004fbe:	eb63 0301 	sbc.w	r3, r3, r1
 8004fc2:	f04f 0000 	mov.w	r0, #0
 8004fc6:	f04f 0100 	mov.w	r1, #0
 8004fca:	00d9      	lsls	r1, r3, #3
 8004fcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fd0:	00d0      	lsls	r0, r2, #3
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	1912      	adds	r2, r2, r4
 8004fd8:	eb45 0303 	adc.w	r3, r5, r3
 8004fdc:	f04f 0000 	mov.w	r0, #0
 8004fe0:	f04f 0100 	mov.w	r1, #0
 8004fe4:	0299      	lsls	r1, r3, #10
 8004fe6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004fea:	0290      	lsls	r0, r2, #10
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	f7fb f8e4 	bl	80001c8 <__aeabi_uldivmod>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4613      	mov	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005008:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	3301      	adds	r3, #1
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005020:	60bb      	str	r3, [r7, #8]
      break;
 8005022:	e002      	b.n	800502a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005024:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005026:	60bb      	str	r3, [r7, #8]
      break;
 8005028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800502a:	68bb      	ldr	r3, [r7, #8]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005036:	bf00      	nop
 8005038:	40023800 	.word	0x40023800
 800503c:	00f42400 	.word	0x00f42400
 8005040:	007a1200 	.word	0x007a1200

08005044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005048:	4b03      	ldr	r3, [pc, #12]	; (8005058 <HAL_RCC_GetHCLKFreq+0x14>)
 800504a:	681b      	ldr	r3, [r3, #0]
}
 800504c:	4618      	mov	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	20000008 	.word	0x20000008

0800505c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005060:	f7ff fff0 	bl	8005044 <HAL_RCC_GetHCLKFreq>
 8005064:	4602      	mov	r2, r0
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	0a9b      	lsrs	r3, r3, #10
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	4903      	ldr	r1, [pc, #12]	; (8005080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005072:	5ccb      	ldrb	r3, [r1, r3]
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40023800 	.word	0x40023800
 8005080:	08008f34 	.word	0x08008f34

08005084 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d105      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d035      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050ac:	4b62      	ldr	r3, [pc, #392]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050b2:	f7fc fd49 	bl	8001b48 <HAL_GetTick>
 80050b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050b8:	e008      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050ba:	f7fc fd45 	bl	8001b48 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e0b0      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050cc:	4b5b      	ldr	r3, [pc, #364]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1f0      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	019a      	lsls	r2, r3, #6
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	071b      	lsls	r3, r3, #28
 80050e4:	4955      	ldr	r1, [pc, #340]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050ec:	4b52      	ldr	r3, [pc, #328]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80050ee:	2201      	movs	r2, #1
 80050f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050f2:	f7fc fd29 	bl	8001b48 <HAL_GetTick>
 80050f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050f8:	e008      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050fa:	f7fc fd25 	bl	8001b48 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e090      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800510c:	4b4b      	ldr	r3, [pc, #300]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0f0      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 8083 	beq.w	800522c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	4b44      	ldr	r3, [pc, #272]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	4a43      	ldr	r2, [pc, #268]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005134:	6413      	str	r3, [r2, #64]	; 0x40
 8005136:	4b41      	ldr	r3, [pc, #260]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005142:	4b3f      	ldr	r3, [pc, #252]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a3e      	ldr	r2, [pc, #248]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800514c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800514e:	f7fc fcfb 	bl	8001b48 <HAL_GetTick>
 8005152:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005156:	f7fc fcf7 	bl	8001b48 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e062      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005168:	4b35      	ldr	r3, [pc, #212]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005174:	4b31      	ldr	r3, [pc, #196]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800517c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d02f      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	429a      	cmp	r2, r3
 8005190:	d028      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005192:	4b2a      	ldr	r3, [pc, #168]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800519c:	4b29      	ldr	r3, [pc, #164]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800519e:	2201      	movs	r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051a2:	4b28      	ldr	r3, [pc, #160]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80051a8:	4a24      	ldr	r2, [pc, #144]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051ae:	4b23      	ldr	r3, [pc, #140]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d114      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80051ba:	f7fc fcc5 	bl	8001b48 <HAL_GetTick>
 80051be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c0:	e00a      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c2:	f7fc fcc1 	bl	8001b48 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e02a      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d8:	4b18      	ldr	r3, [pc, #96]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0ee      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051f0:	d10d      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80051f2:	4b12      	ldr	r3, [pc, #72]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005206:	490d      	ldr	r1, [pc, #52]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005208:	4313      	orrs	r3, r2
 800520a:	608b      	str	r3, [r1, #8]
 800520c:	e005      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	4a0a      	ldr	r2, [pc, #40]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005214:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005218:	6093      	str	r3, [r2, #8]
 800521a:	4b08      	ldr	r3, [pc, #32]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800521c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005226:	4905      	ldr	r1, [pc, #20]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005228:	4313      	orrs	r3, r2
 800522a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	42470068 	.word	0x42470068
 800523c:	40023800 	.word	0x40023800
 8005240:	40007000 	.word	0x40007000
 8005244:	42470e40 	.word	0x42470e40

08005248 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d13e      	bne.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005266:	4b23      	ldr	r3, [pc, #140]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d12f      	bne.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800527c:	4b1e      	ldr	r3, [pc, #120]	; (80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800527e:	617b      	str	r3, [r7, #20]
          break;
 8005280:	e02f      	b.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005282:	4b1c      	ldr	r3, [pc, #112]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800528a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800528e:	d108      	bne.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005290:	4b18      	ldr	r3, [pc, #96]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005298:	4a18      	ldr	r2, [pc, #96]	; (80052fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800529a:	fbb2 f3f3 	udiv	r3, r2, r3
 800529e:	613b      	str	r3, [r7, #16]
 80052a0:	e007      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80052a2:	4b14      	ldr	r3, [pc, #80]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052aa:	4a15      	ldr	r2, [pc, #84]	; (8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80052ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80052b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b8:	099b      	lsrs	r3, r3, #6
 80052ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	fb02 f303 	mul.w	r3, r2, r3
 80052c4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80052c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052cc:	0f1b      	lsrs	r3, r3, #28
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d8:	617b      	str	r3, [r7, #20]
          break;
 80052da:	e002      	b.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	617b      	str	r3, [r7, #20]
          break;
 80052e0:	bf00      	nop
        }
      }
      break;
 80052e2:	bf00      	nop
    }
  }
  return frequency;
 80052e4:	697b      	ldr	r3, [r7, #20]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40023800 	.word	0x40023800
 80052f8:	00bb8000 	.word	0x00bb8000
 80052fc:	007a1200 	.word	0x007a1200
 8005300:	00f42400 	.word	0x00f42400

08005304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e07b      	b.n	800540e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	2b00      	cmp	r3, #0
 800531c:	d108      	bne.n	8005330 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005326:	d009      	beq.n	800533c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	61da      	str	r2, [r3, #28]
 800532e:	e005      	b.n	800533c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d106      	bne.n	800535c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fc f9a8 	bl	80016ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005372:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c0:	ea42 0103 	orr.w	r1, r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	0c1b      	lsrs	r3, r3, #16
 80053da:	f003 0104 	and.w	r1, r3, #4
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	f003 0210 	and.w	r2, r3, #16
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b088      	sub	sp, #32
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	603b      	str	r3, [r7, #0]
 8005422:	4613      	mov	r3, r2
 8005424:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_SPI_Transmit+0x22>
 8005434:	2302      	movs	r3, #2
 8005436:	e126      	b.n	8005686 <HAL_SPI_Transmit+0x270>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005440:	f7fc fb82 	bl	8001b48 <HAL_GetTick>
 8005444:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005446:	88fb      	ldrh	r3, [r7, #6]
 8005448:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b01      	cmp	r3, #1
 8005454:	d002      	beq.n	800545c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005456:	2302      	movs	r3, #2
 8005458:	77fb      	strb	r3, [r7, #31]
    goto error;
 800545a:	e10b      	b.n	8005674 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <HAL_SPI_Transmit+0x52>
 8005462:	88fb      	ldrh	r3, [r7, #6]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800546c:	e102      	b.n	8005674 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2203      	movs	r2, #3
 8005472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	88fa      	ldrh	r2, [r7, #6]
 8005486:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	88fa      	ldrh	r2, [r7, #6]
 800548c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b4:	d10f      	bne.n	80054d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	2b40      	cmp	r3, #64	; 0x40
 80054e2:	d007      	beq.n	80054f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054fc:	d14b      	bne.n	8005596 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_SPI_Transmit+0xf6>
 8005506:	8afb      	ldrh	r3, [r7, #22]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d13e      	bne.n	800558a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	881a      	ldrh	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	1c9a      	adds	r2, r3, #2
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005530:	e02b      	b.n	800558a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b02      	cmp	r3, #2
 800553e:	d112      	bne.n	8005566 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	881a      	ldrh	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005550:	1c9a      	adds	r2, r3, #2
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	86da      	strh	r2, [r3, #54]	; 0x36
 8005564:	e011      	b.n	800558a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005566:	f7fc faef 	bl	8001b48 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d803      	bhi.n	800557e <HAL_SPI_Transmit+0x168>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800557c:	d102      	bne.n	8005584 <HAL_SPI_Transmit+0x16e>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d102      	bne.n	800558a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005588:	e074      	b.n	8005674 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1ce      	bne.n	8005532 <HAL_SPI_Transmit+0x11c>
 8005594:	e04c      	b.n	8005630 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <HAL_SPI_Transmit+0x18e>
 800559e:	8afb      	ldrh	r3, [r7, #22]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d140      	bne.n	8005626 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	330c      	adds	r3, #12
 80055ae:	7812      	ldrb	r2, [r2, #0]
 80055b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055ca:	e02c      	b.n	8005626 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d113      	bne.n	8005602 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	330c      	adds	r3, #12
 80055e4:	7812      	ldrb	r2, [r2, #0]
 80055e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8005600:	e011      	b.n	8005626 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005602:	f7fc faa1 	bl	8001b48 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	429a      	cmp	r2, r3
 8005610:	d803      	bhi.n	800561a <HAL_SPI_Transmit+0x204>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005618:	d102      	bne.n	8005620 <HAL_SPI_Transmit+0x20a>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d102      	bne.n	8005626 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005624:	e026      	b.n	8005674 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1cd      	bne.n	80055cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 f8b3 	bl	80057a0 <SPI_EndRxTxTransaction>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	77fb      	strb	r3, [r7, #31]
 8005670:	e000      	b.n	8005674 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005672:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005684:	7ffb      	ldrb	r3, [r7, #31]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3720      	adds	r7, #32
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	4613      	mov	r3, r2
 800569e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056a0:	f7fc fa52 	bl	8001b48 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	1a9b      	subs	r3, r3, r2
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	4413      	add	r3, r2
 80056ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056b0:	f7fc fa4a 	bl	8001b48 <HAL_GetTick>
 80056b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056b6:	4b39      	ldr	r3, [pc, #228]	; (800579c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	015b      	lsls	r3, r3, #5
 80056bc:	0d1b      	lsrs	r3, r3, #20
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	fb02 f303 	mul.w	r3, r2, r3
 80056c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056c6:	e054      	b.n	8005772 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ce:	d050      	beq.n	8005772 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056d0:	f7fc fa3a 	bl	8001b48 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d902      	bls.n	80056e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d13d      	bne.n	8005762 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056fe:	d111      	bne.n	8005724 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005708:	d004      	beq.n	8005714 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005712:	d107      	bne.n	8005724 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005722:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572c:	d10f      	bne.n	800574e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800574c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e017      	b.n	8005792 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	3b01      	subs	r3, #1
 8005770:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	4013      	ands	r3, r2
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	429a      	cmp	r2, r3
 8005780:	bf0c      	ite	eq
 8005782:	2301      	moveq	r3, #1
 8005784:	2300      	movne	r3, #0
 8005786:	b2db      	uxtb	r3, r3
 8005788:	461a      	mov	r2, r3
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	429a      	cmp	r2, r3
 800578e:	d19b      	bne.n	80056c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3720      	adds	r7, #32
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000008 	.word	0x20000008

080057a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057ac:	4b1b      	ldr	r3, [pc, #108]	; (800581c <SPI_EndRxTxTransaction+0x7c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1b      	ldr	r2, [pc, #108]	; (8005820 <SPI_EndRxTxTransaction+0x80>)
 80057b2:	fba2 2303 	umull	r2, r3, r2, r3
 80057b6:	0d5b      	lsrs	r3, r3, #21
 80057b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057bc:	fb02 f303 	mul.w	r3, r2, r3
 80057c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ca:	d112      	bne.n	80057f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2200      	movs	r2, #0
 80057d4:	2180      	movs	r1, #128	; 0x80
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f7ff ff5a 	bl	8005690 <SPI_WaitFlagStateUntilTimeout>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d016      	beq.n	8005810 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e6:	f043 0220 	orr.w	r2, r3, #32
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e00f      	b.n	8005812 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005808:	2b80      	cmp	r3, #128	; 0x80
 800580a:	d0f2      	beq.n	80057f2 <SPI_EndRxTxTransaction+0x52>
 800580c:	e000      	b.n	8005810 <SPI_EndRxTxTransaction+0x70>
        break;
 800580e:	bf00      	nop
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000008 	.word	0x20000008
 8005820:	165e9f81 	.word	0x165e9f81

08005824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e041      	b.n	80058ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7fb ffcc 	bl	80017e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3304      	adds	r3, #4
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f000 fb42 	bl	8005eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b082      	sub	sp, #8
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e041      	b.n	8005958 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d106      	bne.n	80058ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f839 	bl	8005960 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2202      	movs	r2, #2
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3304      	adds	r3, #4
 80058fe:	4619      	mov	r1, r3
 8005900:	4610      	mov	r0, r2
 8005902:	f000 faf3 	bl	8005eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b02      	cmp	r3, #2
 8005988:	d122      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b02      	cmp	r3, #2
 8005996:	d11b      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0202 	mvn.w	r2, #2
 80059a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fa7a 	bl	8005eb0 <HAL_TIM_IC_CaptureCallback>
 80059bc:	e005      	b.n	80059ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fa6c 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fa7d 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d122      	bne.n	8005a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d11b      	bne.n	8005a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0204 	mvn.w	r2, #4
 80059f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2202      	movs	r2, #2
 80059fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fa50 	bl	8005eb0 <HAL_TIM_IC_CaptureCallback>
 8005a10:	e005      	b.n	8005a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fa42 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fa53 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d122      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d11b      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0208 	mvn.w	r2, #8
 8005a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2204      	movs	r2, #4
 8005a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fa26 	bl	8005eb0 <HAL_TIM_IC_CaptureCallback>
 8005a64:	e005      	b.n	8005a72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fa18 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fa29 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0310 	and.w	r3, r3, #16
 8005a82:	2b10      	cmp	r3, #16
 8005a84:	d122      	bne.n	8005acc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b10      	cmp	r3, #16
 8005a92:	d11b      	bne.n	8005acc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0210 	mvn.w	r2, #16
 8005a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2208      	movs	r2, #8
 8005aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f9fc 	bl	8005eb0 <HAL_TIM_IC_CaptureCallback>
 8005ab8:	e005      	b.n	8005ac6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f9ee 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f9ff 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d10e      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d107      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0201 	mvn.w	r2, #1
 8005af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f9c8 	bl	8005e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b02:	2b80      	cmp	r3, #128	; 0x80
 8005b04:	d10e      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b10:	2b80      	cmp	r3, #128	; 0x80
 8005b12:	d107      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fd54 	bl	80065cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b40      	cmp	r3, #64	; 0x40
 8005b30:	d10e      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	d107      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f9c4 	bl	8005ed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d10e      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f003 0320 	and.w	r3, r3, #32
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	d107      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0220 	mvn.w	r2, #32
 8005b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fd1e 	bl	80065b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b7c:	bf00      	nop
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e0ac      	b.n	8005cf8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b0c      	cmp	r3, #12
 8005baa:	f200 809f 	bhi.w	8005cec <HAL_TIM_PWM_ConfigChannel+0x168>
 8005bae:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb4:	08005be9 	.word	0x08005be9
 8005bb8:	08005ced 	.word	0x08005ced
 8005bbc:	08005ced 	.word	0x08005ced
 8005bc0:	08005ced 	.word	0x08005ced
 8005bc4:	08005c29 	.word	0x08005c29
 8005bc8:	08005ced 	.word	0x08005ced
 8005bcc:	08005ced 	.word	0x08005ced
 8005bd0:	08005ced 	.word	0x08005ced
 8005bd4:	08005c6b 	.word	0x08005c6b
 8005bd8:	08005ced 	.word	0x08005ced
 8005bdc:	08005ced 	.word	0x08005ced
 8005be0:	08005ced 	.word	0x08005ced
 8005be4:	08005cab 	.word	0x08005cab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68b9      	ldr	r1, [r7, #8]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fa1c 	bl	800602c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699a      	ldr	r2, [r3, #24]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0208 	orr.w	r2, r2, #8
 8005c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0204 	bic.w	r2, r2, #4
 8005c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6999      	ldr	r1, [r3, #24]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	691a      	ldr	r2, [r3, #16]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	619a      	str	r2, [r3, #24]
      break;
 8005c26:	e062      	b.n	8005cee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 fa6c 	bl	800610c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699a      	ldr	r2, [r3, #24]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6999      	ldr	r1, [r3, #24]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	021a      	lsls	r2, r3, #8
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	619a      	str	r2, [r3, #24]
      break;
 8005c68:	e041      	b.n	8005cee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68b9      	ldr	r1, [r7, #8]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fac1 	bl	80061f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69da      	ldr	r2, [r3, #28]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0208 	orr.w	r2, r2, #8
 8005c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0204 	bic.w	r2, r2, #4
 8005c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69d9      	ldr	r1, [r3, #28]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	691a      	ldr	r2, [r3, #16]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	61da      	str	r2, [r3, #28]
      break;
 8005ca8:	e021      	b.n	8005cee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fb15 	bl	80062e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69da      	ldr	r2, [r3, #28]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69da      	ldr	r2, [r3, #28]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69d9      	ldr	r1, [r3, #28]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	021a      	lsls	r2, r3, #8
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	61da      	str	r2, [r3, #28]
      break;
 8005cea:	e000      	b.n	8005cee <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005cec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_TIM_ConfigClockSource+0x18>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e0b3      	b.n	8005e80 <HAL_TIM_ConfigClockSource+0x180>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d50:	d03e      	beq.n	8005dd0 <HAL_TIM_ConfigClockSource+0xd0>
 8005d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d56:	f200 8087 	bhi.w	8005e68 <HAL_TIM_ConfigClockSource+0x168>
 8005d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5e:	f000 8085 	beq.w	8005e6c <HAL_TIM_ConfigClockSource+0x16c>
 8005d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d66:	d87f      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x168>
 8005d68:	2b70      	cmp	r3, #112	; 0x70
 8005d6a:	d01a      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0xa2>
 8005d6c:	2b70      	cmp	r3, #112	; 0x70
 8005d6e:	d87b      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x168>
 8005d70:	2b60      	cmp	r3, #96	; 0x60
 8005d72:	d050      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0x116>
 8005d74:	2b60      	cmp	r3, #96	; 0x60
 8005d76:	d877      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x168>
 8005d78:	2b50      	cmp	r3, #80	; 0x50
 8005d7a:	d03c      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0xf6>
 8005d7c:	2b50      	cmp	r3, #80	; 0x50
 8005d7e:	d873      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x168>
 8005d80:	2b40      	cmp	r3, #64	; 0x40
 8005d82:	d058      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x136>
 8005d84:	2b40      	cmp	r3, #64	; 0x40
 8005d86:	d86f      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x168>
 8005d88:	2b30      	cmp	r3, #48	; 0x30
 8005d8a:	d064      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x156>
 8005d8c:	2b30      	cmp	r3, #48	; 0x30
 8005d8e:	d86b      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x168>
 8005d90:	2b20      	cmp	r3, #32
 8005d92:	d060      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x156>
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	d867      	bhi.n	8005e68 <HAL_TIM_ConfigClockSource+0x168>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d05c      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x156>
 8005d9c:	2b10      	cmp	r3, #16
 8005d9e:	d05a      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005da0:	e062      	b.n	8005e68 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6899      	ldr	r1, [r3, #8]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f000 fb65 	bl	8006480 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005dc4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	609a      	str	r2, [r3, #8]
      break;
 8005dce:	e04e      	b.n	8005e6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	6899      	ldr	r1, [r3, #8]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f000 fb4e 	bl	8006480 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005df2:	609a      	str	r2, [r3, #8]
      break;
 8005df4:	e03b      	b.n	8005e6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6859      	ldr	r1, [r3, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	461a      	mov	r2, r3
 8005e04:	f000 fac2 	bl	800638c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2150      	movs	r1, #80	; 0x50
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fb1b 	bl	800644a <TIM_ITRx_SetConfig>
      break;
 8005e14:	e02b      	b.n	8005e6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	6859      	ldr	r1, [r3, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f000 fae1 	bl	80063ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2160      	movs	r1, #96	; 0x60
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fb0b 	bl	800644a <TIM_ITRx_SetConfig>
      break;
 8005e34:	e01b      	b.n	8005e6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	6859      	ldr	r1, [r3, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	461a      	mov	r2, r3
 8005e44:	f000 faa2 	bl	800638c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2140      	movs	r1, #64	; 0x40
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fafb 	bl	800644a <TIM_ITRx_SetConfig>
      break;
 8005e54:	e00b      	b.n	8005e6e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4610      	mov	r0, r2
 8005e62:	f000 faf2 	bl	800644a <TIM_ITRx_SetConfig>
        break;
 8005e66:	e002      	b.n	8005e6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005e68:	bf00      	nop
 8005e6a:	e000      	b.n	8005e6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005e6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a40      	ldr	r2, [pc, #256]	; (8006000 <TIM_Base_SetConfig+0x114>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d013      	beq.n	8005f2c <TIM_Base_SetConfig+0x40>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0a:	d00f      	beq.n	8005f2c <TIM_Base_SetConfig+0x40>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a3d      	ldr	r2, [pc, #244]	; (8006004 <TIM_Base_SetConfig+0x118>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00b      	beq.n	8005f2c <TIM_Base_SetConfig+0x40>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a3c      	ldr	r2, [pc, #240]	; (8006008 <TIM_Base_SetConfig+0x11c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d007      	beq.n	8005f2c <TIM_Base_SetConfig+0x40>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a3b      	ldr	r2, [pc, #236]	; (800600c <TIM_Base_SetConfig+0x120>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_Base_SetConfig+0x40>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a3a      	ldr	r2, [pc, #232]	; (8006010 <TIM_Base_SetConfig+0x124>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d108      	bne.n	8005f3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a2f      	ldr	r2, [pc, #188]	; (8006000 <TIM_Base_SetConfig+0x114>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d02b      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4c:	d027      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a2c      	ldr	r2, [pc, #176]	; (8006004 <TIM_Base_SetConfig+0x118>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d023      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a2b      	ldr	r2, [pc, #172]	; (8006008 <TIM_Base_SetConfig+0x11c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d01f      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a2a      	ldr	r2, [pc, #168]	; (800600c <TIM_Base_SetConfig+0x120>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01b      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a29      	ldr	r2, [pc, #164]	; (8006010 <TIM_Base_SetConfig+0x124>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d017      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a28      	ldr	r2, [pc, #160]	; (8006014 <TIM_Base_SetConfig+0x128>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d013      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a27      	ldr	r2, [pc, #156]	; (8006018 <TIM_Base_SetConfig+0x12c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00f      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a26      	ldr	r2, [pc, #152]	; (800601c <TIM_Base_SetConfig+0x130>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00b      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a25      	ldr	r2, [pc, #148]	; (8006020 <TIM_Base_SetConfig+0x134>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d007      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a24      	ldr	r2, [pc, #144]	; (8006024 <TIM_Base_SetConfig+0x138>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d003      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a23      	ldr	r2, [pc, #140]	; (8006028 <TIM_Base_SetConfig+0x13c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d108      	bne.n	8005fb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a0a      	ldr	r2, [pc, #40]	; (8006000 <TIM_Base_SetConfig+0x114>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_Base_SetConfig+0xf8>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a0c      	ldr	r2, [pc, #48]	; (8006010 <TIM_Base_SetConfig+0x124>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d103      	bne.n	8005fec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	691a      	ldr	r2, [r3, #16]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	615a      	str	r2, [r3, #20]
}
 8005ff2:	bf00      	nop
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40010000 	.word	0x40010000
 8006004:	40000400 	.word	0x40000400
 8006008:	40000800 	.word	0x40000800
 800600c:	40000c00 	.word	0x40000c00
 8006010:	40010400 	.word	0x40010400
 8006014:	40014000 	.word	0x40014000
 8006018:	40014400 	.word	0x40014400
 800601c:	40014800 	.word	0x40014800
 8006020:	40001800 	.word	0x40001800
 8006024:	40001c00 	.word	0x40001c00
 8006028:	40002000 	.word	0x40002000

0800602c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f023 0201 	bic.w	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0303 	bic.w	r3, r3, #3
 8006062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f023 0302 	bic.w	r3, r3, #2
 8006074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a20      	ldr	r2, [pc, #128]	; (8006104 <TIM_OC1_SetConfig+0xd8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_OC1_SetConfig+0x64>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a1f      	ldr	r2, [pc, #124]	; (8006108 <TIM_OC1_SetConfig+0xdc>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10c      	bne.n	80060aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f023 0308 	bic.w	r3, r3, #8
 8006096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f023 0304 	bic.w	r3, r3, #4
 80060a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a15      	ldr	r2, [pc, #84]	; (8006104 <TIM_OC1_SetConfig+0xd8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d003      	beq.n	80060ba <TIM_OC1_SetConfig+0x8e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a14      	ldr	r2, [pc, #80]	; (8006108 <TIM_OC1_SetConfig+0xdc>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d111      	bne.n	80060de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	621a      	str	r2, [r3, #32]
}
 80060f8:	bf00      	nop
 80060fa:	371c      	adds	r7, #28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	40010000 	.word	0x40010000
 8006108:	40010400 	.word	0x40010400

0800610c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	f023 0210 	bic.w	r2, r3, #16
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800613a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f023 0320 	bic.w	r3, r3, #32
 8006156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a22      	ldr	r2, [pc, #136]	; (80061f0 <TIM_OC2_SetConfig+0xe4>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d003      	beq.n	8006174 <TIM_OC2_SetConfig+0x68>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a21      	ldr	r2, [pc, #132]	; (80061f4 <TIM_OC2_SetConfig+0xe8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d10d      	bne.n	8006190 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800617a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	011b      	lsls	r3, r3, #4
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800618e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a17      	ldr	r2, [pc, #92]	; (80061f0 <TIM_OC2_SetConfig+0xe4>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d003      	beq.n	80061a0 <TIM_OC2_SetConfig+0x94>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a16      	ldr	r2, [pc, #88]	; (80061f4 <TIM_OC2_SetConfig+0xe8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d113      	bne.n	80061c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	621a      	str	r2, [r3, #32]
}
 80061e2:	bf00      	nop
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	40010000 	.word	0x40010000
 80061f4:	40010400 	.word	0x40010400

080061f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0303 	bic.w	r3, r3, #3
 800622e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	021b      	lsls	r3, r3, #8
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a21      	ldr	r2, [pc, #132]	; (80062d8 <TIM_OC3_SetConfig+0xe0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d003      	beq.n	800625e <TIM_OC3_SetConfig+0x66>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a20      	ldr	r2, [pc, #128]	; (80062dc <TIM_OC3_SetConfig+0xe4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d10d      	bne.n	800627a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	021b      	lsls	r3, r3, #8
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a16      	ldr	r2, [pc, #88]	; (80062d8 <TIM_OC3_SetConfig+0xe0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d003      	beq.n	800628a <TIM_OC3_SetConfig+0x92>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a15      	ldr	r2, [pc, #84]	; (80062dc <TIM_OC3_SetConfig+0xe4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d113      	bne.n	80062b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	011b      	lsls	r3, r3, #4
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	621a      	str	r2, [r3, #32]
}
 80062cc:	bf00      	nop
 80062ce:	371c      	adds	r7, #28
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	40010000 	.word	0x40010000
 80062dc:	40010400 	.word	0x40010400

080062e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	021b      	lsls	r3, r3, #8
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4313      	orrs	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800632a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	031b      	lsls	r3, r3, #12
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a12      	ldr	r2, [pc, #72]	; (8006384 <TIM_OC4_SetConfig+0xa4>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d003      	beq.n	8006348 <TIM_OC4_SetConfig+0x68>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a11      	ldr	r2, [pc, #68]	; (8006388 <TIM_OC4_SetConfig+0xa8>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d109      	bne.n	800635c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800634e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	019b      	lsls	r3, r3, #6
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	621a      	str	r2, [r3, #32]
}
 8006376:	bf00      	nop
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	40010000 	.word	0x40010000
 8006388:	40010400 	.word	0x40010400

0800638c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	f023 0201 	bic.w	r2, r3, #1
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f023 030a 	bic.w	r3, r3, #10
 80063c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b087      	sub	sp, #28
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	f023 0210 	bic.w	r2, r3, #16
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	031b      	lsls	r3, r3, #12
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	4313      	orrs	r3, r2
 800641e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006426:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	011b      	lsls	r3, r3, #4
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	4313      	orrs	r3, r2
 8006430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	621a      	str	r2, [r3, #32]
}
 800643e:	bf00      	nop
 8006440:	371c      	adds	r7, #28
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800644a:	b480      	push	{r7}
 800644c:	b085      	sub	sp, #20
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	f043 0307 	orr.w	r3, r3, #7
 800646c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	609a      	str	r2, [r3, #8]
}
 8006474:	bf00      	nop
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800649a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	021a      	lsls	r2, r3, #8
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	609a      	str	r2, [r3, #8]
}
 80064b4:	bf00      	nop
 80064b6:	371c      	adds	r7, #28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d101      	bne.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064d4:	2302      	movs	r3, #2
 80064d6:	e05a      	b.n	800658e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a21      	ldr	r2, [pc, #132]	; (800659c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d022      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006524:	d01d      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1d      	ldr	r2, [pc, #116]	; (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d018      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1b      	ldr	r2, [pc, #108]	; (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d013      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1a      	ldr	r2, [pc, #104]	; (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00e      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a18      	ldr	r2, [pc, #96]	; (80065ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d009      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a17      	ldr	r2, [pc, #92]	; (80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d004      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a15      	ldr	r2, [pc, #84]	; (80065b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d10c      	bne.n	800657c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006568:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	4313      	orrs	r3, r2
 8006572:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40010000 	.word	0x40010000
 80065a0:	40000400 	.word	0x40000400
 80065a4:	40000800 	.word	0x40000800
 80065a8:	40000c00 	.word	0x40000c00
 80065ac:	40010400 	.word	0x40010400
 80065b0:	40014000 	.word	0x40014000
 80065b4:	40001800 	.word	0x40001800

080065b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065e0:	b084      	sub	sp, #16
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b084      	sub	sp, #16
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	f107 001c 	add.w	r0, r7, #28
 80065ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d122      	bne.n	800663e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800660c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006622:	2b01      	cmp	r3, #1
 8006624:	d105      	bne.n	8006632 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f94a 	bl	80068cc <USB_CoreReset>
 8006638:	4603      	mov	r3, r0
 800663a:	73fb      	strb	r3, [r7, #15]
 800663c:	e01a      	b.n	8006674 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f93e 	bl	80068cc <USB_CoreReset>
 8006650:	4603      	mov	r3, r0
 8006652:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	639a      	str	r2, [r3, #56]	; 0x38
 8006666:	e005      	b.n	8006674 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	2b01      	cmp	r3, #1
 8006678:	d10b      	bne.n	8006692 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f043 0206 	orr.w	r2, r3, #6
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f043 0220 	orr.w	r2, r3, #32
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006692:	7bfb      	ldrb	r3, [r7, #15]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800669e:	b004      	add	sp, #16
 80066a0:	4770      	bx	lr

080066a2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f043 0201 	orr.w	r2, r3, #1
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f023 0201 	bic.w	r2, r3, #1
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b082      	sub	sp, #8
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	460b      	mov	r3, r1
 80066f0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066fe:	78fb      	ldrb	r3, [r7, #3]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d106      	bne.n	8006712 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	60da      	str	r2, [r3, #12]
 8006710:	e00b      	b.n	800672a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006712:	78fb      	ldrb	r3, [r7, #3]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d106      	bne.n	8006726 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	60da      	str	r2, [r3, #12]
 8006724:	e001      	b.n	800672a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e003      	b.n	8006732 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800672a:	2032      	movs	r0, #50	; 0x32
 800672c:	f7fb fa18 	bl	8001b60 <HAL_Delay>

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	019b      	lsls	r3, r3, #6
 800674e:	f043 0220 	orr.w	r2, r3, #32
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3301      	adds	r3, #1
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4a09      	ldr	r2, [pc, #36]	; (8006784 <USB_FlushTxFifo+0x48>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d901      	bls.n	8006768 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e006      	b.n	8006776 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f003 0320 	and.w	r3, r3, #32
 8006770:	2b20      	cmp	r3, #32
 8006772:	d0f0      	beq.n	8006756 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	00030d40 	.word	0x00030d40

08006788 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006790:	2300      	movs	r3, #0
 8006792:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2210      	movs	r2, #16
 8006798:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3301      	adds	r3, #1
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4a09      	ldr	r2, [pc, #36]	; (80067c8 <USB_FlushRxFifo+0x40>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d901      	bls.n	80067ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e006      	b.n	80067ba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f003 0310 	and.w	r3, r3, #16
 80067b4:	2b10      	cmp	r3, #16
 80067b6:	d0f0      	beq.n	800679a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	00030d40 	.word	0x00030d40

080067cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b089      	sub	sp, #36	; 0x24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	4611      	mov	r1, r2
 80067d8:	461a      	mov	r2, r3
 80067da:	460b      	mov	r3, r1
 80067dc:	71fb      	strb	r3, [r7, #7]
 80067de:	4613      	mov	r3, r2
 80067e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80067ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d11a      	bne.n	8006828 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80067f2:	88bb      	ldrh	r3, [r7, #4]
 80067f4:	3303      	adds	r3, #3
 80067f6:	089b      	lsrs	r3, r3, #2
 80067f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067fa:	2300      	movs	r3, #0
 80067fc:	61bb      	str	r3, [r7, #24]
 80067fe:	e00f      	b.n	8006820 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	031a      	lsls	r2, r3, #12
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	4413      	add	r3, r2
 8006808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800680c:	461a      	mov	r2, r3
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	3304      	adds	r3, #4
 8006818:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	3301      	adds	r3, #1
 800681e:	61bb      	str	r3, [r7, #24]
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	429a      	cmp	r2, r3
 8006826:	d3eb      	bcc.n	8006800 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3724      	adds	r7, #36	; 0x24
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006836:	b480      	push	{r7}
 8006838:	b089      	sub	sp, #36	; 0x24
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	4613      	mov	r3, r2
 8006842:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800684c:	88fb      	ldrh	r3, [r7, #6]
 800684e:	3303      	adds	r3, #3
 8006850:	089b      	lsrs	r3, r3, #2
 8006852:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006854:	2300      	movs	r3, #0
 8006856:	61bb      	str	r3, [r7, #24]
 8006858:	e00b      	b.n	8006872 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	601a      	str	r2, [r3, #0]
    pDest++;
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	3304      	adds	r3, #4
 800686a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	3301      	adds	r3, #1
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	429a      	cmp	r2, r3
 8006878:	d3ef      	bcc.n	800685a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800687a:	69fb      	ldr	r3, [r7, #28]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3724      	adds	r7, #36	; 0x24
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4013      	ands	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068a0:	68fb      	ldr	r3, [r7, #12]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	f003 0301 	and.w	r3, r3, #1
}
 80068be:	4618      	mov	r0, r3
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
	...

080068cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	3301      	adds	r3, #1
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4a13      	ldr	r2, [pc, #76]	; (8006930 <USB_CoreReset+0x64>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d901      	bls.n	80068ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e01b      	b.n	8006922 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	daf2      	bge.n	80068d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f043 0201 	orr.w	r2, r3, #1
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3301      	adds	r3, #1
 8006906:	60fb      	str	r3, [r7, #12]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4a09      	ldr	r2, [pc, #36]	; (8006930 <USB_CoreReset+0x64>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d901      	bls.n	8006914 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e006      	b.n	8006922 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b01      	cmp	r3, #1
 800691e:	d0f0      	beq.n	8006902 <USB_CoreReset+0x36>

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	00030d40 	.word	0x00030d40

08006934 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006934:	b084      	sub	sp, #16
 8006936:	b580      	push	{r7, lr}
 8006938:	b084      	sub	sp, #16
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	f107 001c 	add.w	r0, r7, #28
 8006942:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006950:	461a      	mov	r2, r3
 8006952:	2300      	movs	r3, #0
 8006954:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006966:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006972:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800697e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006982:	2b00      	cmp	r3, #0
 8006984:	d018      	beq.n	80069b8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	2b01      	cmp	r3, #1
 800698a:	d10a      	bne.n	80069a2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800699a:	f043 0304 	orr.w	r3, r3, #4
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	e014      	b.n	80069cc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069b0:	f023 0304 	bic.w	r3, r3, #4
 80069b4:	6013      	str	r3, [r2, #0]
 80069b6:	e009      	b.n	80069cc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069c6:	f023 0304 	bic.w	r3, r3, #4
 80069ca:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80069cc:	2110      	movs	r1, #16
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff feb4 	bl	800673c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7ff fed7 	bl	8006788 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80069da:	2300      	movs	r3, #0
 80069dc:	60fb      	str	r3, [r7, #12]
 80069de:	e015      	b.n	8006a0c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ec:	461a      	mov	r2, r3
 80069ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069f2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a00:	461a      	mov	r2, r3
 8006a02:	2300      	movs	r3, #0
 8006a04:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d3e5      	bcc.n	80069e0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006a14:	2101      	movs	r1, #1
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f882 	bl	8006b20 <USB_DriveVbus>

  HAL_Delay(200U);
 8006a1c:	20c8      	movs	r0, #200	; 0xc8
 8006a1e:	f7fb f89f 	bl	8001b60 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a2e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00b      	beq.n	8006a54 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a42:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a14      	ldr	r2, [pc, #80]	; (8006a98 <USB_HostInit+0x164>)
 8006a48:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a13      	ldr	r2, [pc, #76]	; (8006a9c <USB_HostInit+0x168>)
 8006a4e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006a52:	e009      	b.n	8006a68 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2280      	movs	r2, #128	; 0x80
 8006a58:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a10      	ldr	r2, [pc, #64]	; (8006aa0 <USB_HostInit+0x16c>)
 8006a5e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a10      	ldr	r2, [pc, #64]	; (8006aa4 <USB_HostInit+0x170>)
 8006a64:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d105      	bne.n	8006a7a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f043 0210 	orr.w	r2, r3, #16
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699a      	ldr	r2, [r3, #24]
 8006a7e:	4b0a      	ldr	r3, [pc, #40]	; (8006aa8 <USB_HostInit+0x174>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a92:	b004      	add	sp, #16
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	01000200 	.word	0x01000200
 8006a9c:	00e00300 	.word	0x00e00300
 8006aa0:	00600080 	.word	0x00600080
 8006aa4:	004000e0 	.word	0x004000e0
 8006aa8:	a3200008 	.word	0xa3200008

08006aac <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aca:	f023 0303 	bic.w	r3, r3, #3
 8006ace:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	f003 0303 	and.w	r3, r3, #3
 8006ade:	68f9      	ldr	r1, [r7, #12]
 8006ae0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d107      	bne.n	8006afe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006af4:	461a      	mov	r2, r3
 8006af6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006afa:	6053      	str	r3, [r2, #4]
 8006afc:	e009      	b.n	8006b12 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006afe:	78fb      	ldrb	r3, [r7, #3]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d106      	bne.n	8006b12 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006b10:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b44:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <USB_DriveVbus+0x44>
 8006b50:	78fb      	ldrb	r3, [r7, #3]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d106      	bne.n	8006b64 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b62:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6e:	d109      	bne.n	8006b84 <USB_DriveVbus+0x64>
 8006b70:	78fb      	ldrb	r3, [r7, #3]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b82:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b085      	sub	sp, #20
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	0c5b      	lsrs	r3, r3, #17
 8006bb0:	f003 0303 	and.w	r3, r3, #3
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	b29b      	uxth	r3, r3
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	4608      	mov	r0, r1
 8006bee:	4611      	mov	r1, r2
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	70fb      	strb	r3, [r7, #3]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	70bb      	strb	r3, [r7, #2]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c12:	461a      	mov	r2, r3
 8006c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c18:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006c1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d87e      	bhi.n	8006d20 <USB_HC_Init+0x13c>
 8006c22:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <USB_HC_Init+0x44>)
 8006c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c28:	08006c39 	.word	0x08006c39
 8006c2c:	08006ce3 	.word	0x08006ce3
 8006c30:	08006c39 	.word	0x08006c39
 8006c34:	08006ca5 	.word	0x08006ca5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c44:	461a      	mov	r2, r3
 8006c46:	f240 439d 	movw	r3, #1181	; 0x49d
 8006c4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006c4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	da10      	bge.n	8006c76 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c54:	78fb      	ldrb	r3, [r7, #3]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	78fa      	ldrb	r2, [r7, #3]
 8006c64:	0151      	lsls	r1, r2, #5
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	440a      	add	r2, r1
 8006c6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c72:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006c74:	e057      	b.n	8006d26 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d051      	beq.n	8006d26 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006c82:	78fb      	ldrb	r3, [r7, #3]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	78fa      	ldrb	r2, [r7, #3]
 8006c92:	0151      	lsls	r1, r2, #5
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	440a      	add	r2, r1
 8006c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006ca0:	60d3      	str	r3, [r2, #12]
      break;
 8006ca2:	e040      	b.n	8006d26 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ca4:	78fb      	ldrb	r3, [r7, #3]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	f240 639d 	movw	r3, #1693	; 0x69d
 8006cb6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006cb8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	da34      	bge.n	8006d2a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006cc0:	78fb      	ldrb	r3, [r7, #3]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	78fa      	ldrb	r2, [r7, #3]
 8006cd0:	0151      	lsls	r1, r2, #5
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	440a      	add	r2, r1
 8006cd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cde:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006ce0:	e023      	b.n	8006d2a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ce2:	78fb      	ldrb	r3, [r7, #3]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cee:	461a      	mov	r2, r3
 8006cf0:	f240 2325 	movw	r3, #549	; 0x225
 8006cf4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006cf6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	da17      	bge.n	8006d2e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	78fa      	ldrb	r2, [r7, #3]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d18:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006d1c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006d1e:	e006      	b.n	8006d2e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	77fb      	strb	r3, [r7, #31]
      break;
 8006d24:	e004      	b.n	8006d30 <USB_HC_Init+0x14c>
      break;
 8006d26:	bf00      	nop
 8006d28:	e002      	b.n	8006d30 <USB_HC_Init+0x14c>
      break;
 8006d2a:	bf00      	nop
 8006d2c:	e000      	b.n	8006d30 <USB_HC_Init+0x14c>
      break;
 8006d2e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d36:	699a      	ldr	r2, [r3, #24]
 8006d38:	78fb      	ldrb	r3, [r7, #3]
 8006d3a:	f003 030f 	and.w	r3, r3, #15
 8006d3e:	2101      	movs	r1, #1
 8006d40:	fa01 f303 	lsl.w	r3, r1, r3
 8006d44:	6939      	ldr	r1, [r7, #16]
 8006d46:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006d5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	da03      	bge.n	8006d6a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d66:	61bb      	str	r3, [r7, #24]
 8006d68:	e001      	b.n	8006d6e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7ff ff0f 	bl	8006b92 <USB_GetHostSpeed>
 8006d74:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006d76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d106      	bne.n	8006d8c <USB_HC_Init+0x1a8>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d003      	beq.n	8006d8c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	e001      	b.n	8006d90 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d90:	787b      	ldrb	r3, [r7, #1]
 8006d92:	059b      	lsls	r3, r3, #22
 8006d94:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d98:	78bb      	ldrb	r3, [r7, #2]
 8006d9a:	02db      	lsls	r3, r3, #11
 8006d9c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006da0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006da2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006da6:	049b      	lsls	r3, r3, #18
 8006da8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006dac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006dae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006db0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006db4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006dba:	78fb      	ldrb	r3, [r7, #3]
 8006dbc:	0159      	lsls	r1, r3, #5
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	440b      	add	r3, r1
 8006dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006dcc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006dce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d10f      	bne.n	8006df6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006dd6:	78fb      	ldrb	r3, [r7, #3]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	78fa      	ldrb	r2, [r7, #3]
 8006de6:	0151      	lsls	r1, r2, #5
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	440a      	add	r2, r1
 8006dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006df0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006df4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006df6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3720      	adds	r7, #32
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08c      	sub	sp, #48	; 0x30
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	785b      	ldrb	r3, [r3, #1]
 8006e16:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e1c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d02d      	beq.n	8006e86 <USB_HC_StartXfer+0x86>
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	791b      	ldrb	r3, [r3, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d129      	bne.n	8006e86 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006e32:	79fb      	ldrb	r3, [r7, #7]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d117      	bne.n	8006e68 <USB_HC_StartXfer+0x68>
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	79db      	ldrb	r3, [r3, #7]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <USB_HC_StartXfer+0x48>
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	79db      	ldrb	r3, [r3, #7]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d10f      	bne.n	8006e68 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	69fa      	ldr	r2, [r7, #28]
 8006e58:	0151      	lsls	r1, r2, #5
 8006e5a:	6a3a      	ldr	r2, [r7, #32]
 8006e5c:	440a      	add	r2, r1
 8006e5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e66:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006e68:	79fb      	ldrb	r3, [r7, #7]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10b      	bne.n	8006e86 <USB_HC_StartXfer+0x86>
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	795b      	ldrb	r3, [r3, #5]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d107      	bne.n	8006e86 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	785b      	ldrb	r3, [r3, #1]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 fa2f 	bl	80072e0 <USB_DoPing>
      return HAL_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	e0f8      	b.n	8007078 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d018      	beq.n	8006ec0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	8912      	ldrh	r2, [r2, #8]
 8006e96:	4413      	add	r3, r2
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	8912      	ldrh	r2, [r2, #8]
 8006e9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ea2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006ea4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006ea6:	8b7b      	ldrh	r3, [r7, #26]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d90b      	bls.n	8006ec4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006eac:	8b7b      	ldrh	r3, [r7, #26]
 8006eae:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006eb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	8912      	ldrh	r2, [r2, #8]
 8006eb6:	fb02 f203 	mul.w	r2, r2, r3
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	611a      	str	r2, [r3, #16]
 8006ebe:	e001      	b.n	8006ec4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	78db      	ldrb	r3, [r3, #3]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d007      	beq.n	8006edc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ecc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	8912      	ldrh	r2, [r2, #8]
 8006ed2:	fb02 f203 	mul.w	r2, r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	611a      	str	r2, [r3, #16]
 8006eda:	e003      	b.n	8006ee4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	695a      	ldr	r2, [r3, #20]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006eec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006eee:	04d9      	lsls	r1, r3, #19
 8006ef0:	4b63      	ldr	r3, [pc, #396]	; (8007080 <USB_HC_StartXfer+0x280>)
 8006ef2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ef4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	7a9b      	ldrb	r3, [r3, #10]
 8006efa:	075b      	lsls	r3, r3, #29
 8006efc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f00:	69f9      	ldr	r1, [r7, #28]
 8006f02:	0148      	lsls	r0, r1, #5
 8006f04:	6a39      	ldr	r1, [r7, #32]
 8006f06:	4401      	add	r1, r0
 8006f08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f0c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f0e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006f10:	79fb      	ldrb	r3, [r7, #7]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d009      	beq.n	8006f2a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	68d9      	ldr	r1, [r3, #12]
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f26:	460a      	mov	r2, r1
 8006f28:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	bf0c      	ite	eq
 8006f3a:	2301      	moveq	r3, #1
 8006f3c:	2300      	movne	r3, #0
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	69fa      	ldr	r2, [r7, #28]
 8006f52:	0151      	lsls	r1, r2, #5
 8006f54:	6a3a      	ldr	r2, [r7, #32]
 8006f56:	440a      	add	r2, r1
 8006f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f60:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	7e7b      	ldrb	r3, [r7, #25]
 8006f72:	075b      	lsls	r3, r3, #29
 8006f74:	69f9      	ldr	r1, [r7, #28]
 8006f76:	0148      	lsls	r0, r1, #5
 8006f78:	6a39      	ldr	r1, [r7, #32]
 8006f7a:	4401      	add	r1, r0
 8006f7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006f80:	4313      	orrs	r3, r2
 8006f82:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f9a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	78db      	ldrb	r3, [r3, #3]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d004      	beq.n	8006fae <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006faa:	613b      	str	r3, [r7, #16]
 8006fac:	e003      	b.n	8006fb6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fb4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fbc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fca:	461a      	mov	r2, r3
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	e04e      	b.n	8007078 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	78db      	ldrb	r3, [r3, #3]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d149      	bne.n	8007076 <USB_HC_StartXfer+0x276>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d045      	beq.n	8007076 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	79db      	ldrb	r3, [r3, #7]
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d830      	bhi.n	8007054 <USB_HC_StartXfer+0x254>
 8006ff2:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <USB_HC_StartXfer+0x1f8>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	08007009 	.word	0x08007009
 8006ffc:	0800702d 	.word	0x0800702d
 8007000:	08007009 	.word	0x08007009
 8007004:	0800702d 	.word	0x0800702d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	3303      	adds	r3, #3
 800700e:	089b      	lsrs	r3, r3, #2
 8007010:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007012:	8afa      	ldrh	r2, [r7, #22]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	b29b      	uxth	r3, r3
 800701a:	429a      	cmp	r2, r3
 800701c:	d91c      	bls.n	8007058 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	f043 0220 	orr.w	r2, r3, #32
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	619a      	str	r2, [r3, #24]
        }
        break;
 800702a:	e015      	b.n	8007058 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	3303      	adds	r3, #3
 8007032:	089b      	lsrs	r3, r3, #2
 8007034:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007036:	8afa      	ldrh	r2, [r7, #22]
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	b29b      	uxth	r3, r3
 8007042:	429a      	cmp	r2, r3
 8007044:	d90a      	bls.n	800705c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	619a      	str	r2, [r3, #24]
        }
        break;
 8007052:	e003      	b.n	800705c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007054:	bf00      	nop
 8007056:	e002      	b.n	800705e <USB_HC_StartXfer+0x25e>
        break;
 8007058:	bf00      	nop
 800705a:	e000      	b.n	800705e <USB_HC_StartXfer+0x25e>
        break;
 800705c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	68d9      	ldr	r1, [r3, #12]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	785a      	ldrb	r2, [r3, #1]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	b29b      	uxth	r3, r3
 800706c:	2000      	movs	r0, #0
 800706e:	9000      	str	r0, [sp, #0]
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7ff fbab 	bl	80067cc <USB_WritePacket>
  }

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3728      	adds	r7, #40	; 0x28
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	1ff80000 	.word	0x1ff80000

08007084 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	b29b      	uxth	r3, r3
}
 800709a:	4618      	mov	r0, r3
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b089      	sub	sp, #36	; 0x24
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	460b      	mov	r3, r1
 80070b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80070b6:	78fb      	ldrb	r3, [r7, #3]
 80070b8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	0c9b      	lsrs	r3, r3, #18
 80070ce:	f003 0303 	and.w	r3, r3, #3
 80070d2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	0fdb      	lsrs	r3, r3, #31
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b20      	cmp	r3, #32
 80070f4:	d104      	bne.n	8007100 <USB_HC_Halt+0x5a>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	e0e8      	b.n	80072d2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <USB_HC_Halt+0x66>
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	2b02      	cmp	r3, #2
 800710a:	d173      	bne.n	80071f4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	4413      	add	r3, r2
 8007114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	0151      	lsls	r1, r2, #5
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	440a      	add	r2, r1
 8007122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007126:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800712a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 0320 	and.w	r3, r3, #32
 8007134:	2b00      	cmp	r3, #0
 8007136:	f040 80cb 	bne.w	80072d0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d143      	bne.n	80071ce <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	4413      	add	r3, r2
 800714e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	0151      	lsls	r1, r2, #5
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	440a      	add	r2, r1
 800715c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007160:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007164:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	015a      	lsls	r2, r3, #5
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	4413      	add	r3, r2
 800716e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	0151      	lsls	r1, r2, #5
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	440a      	add	r2, r1
 800717c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007180:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007184:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	4413      	add	r3, r2
 800718e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	0151      	lsls	r1, r2, #5
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	440a      	add	r2, r1
 800719c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071a4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	3301      	adds	r3, #1
 80071aa:	61fb      	str	r3, [r7, #28]
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071b2:	d81d      	bhi.n	80071f0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071ca:	d0ec      	beq.n	80071a6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071cc:	e080      	b.n	80072d0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	0151      	lsls	r1, r2, #5
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	440a      	add	r2, r1
 80071e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071ec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071ee:	e06f      	b.n	80072d0 <USB_HC_Halt+0x22a>
            break;
 80071f0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071f2:	e06d      	b.n	80072d0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	0151      	lsls	r1, r2, #5
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	440a      	add	r2, r1
 800720a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800720e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007212:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d143      	bne.n	80072ac <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	4413      	add	r3, r2
 800722c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	0151      	lsls	r1, r2, #5
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	440a      	add	r2, r1
 800723a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800723e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007242:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	4413      	add	r3, r2
 800724c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	0151      	lsls	r1, r2, #5
 8007256:	69ba      	ldr	r2, [r7, #24]
 8007258:	440a      	add	r2, r1
 800725a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800725e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007262:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	4413      	add	r3, r2
 800726c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	0151      	lsls	r1, r2, #5
 8007276:	69ba      	ldr	r2, [r7, #24]
 8007278:	440a      	add	r2, r1
 800727a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800727e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007282:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	3301      	adds	r3, #1
 8007288:	61fb      	str	r3, [r7, #28]
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007290:	d81d      	bhi.n	80072ce <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	4413      	add	r3, r2
 800729a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072a8:	d0ec      	beq.n	8007284 <USB_HC_Halt+0x1de>
 80072aa:	e011      	b.n	80072d0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	0151      	lsls	r1, r2, #5
 80072be:	69ba      	ldr	r2, [r7, #24]
 80072c0:	440a      	add	r2, r1
 80072c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072ca:	6013      	str	r3, [r2, #0]
 80072cc:	e000      	b.n	80072d0 <USB_HC_Halt+0x22a>
          break;
 80072ce:	bf00      	nop
    }
  }

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3724      	adds	r7, #36	; 0x24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
	...

080072e0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80072f4:	2301      	movs	r3, #1
 80072f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	04da      	lsls	r2, r3, #19
 80072fc:	4b15      	ldr	r3, [pc, #84]	; (8007354 <USB_DoPing+0x74>)
 80072fe:	4013      	ands	r3, r2
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	0151      	lsls	r1, r2, #5
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	440a      	add	r2, r1
 8007308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800730c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007310:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	4413      	add	r3, r2
 800731a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007328:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007330:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	4413      	add	r3, r2
 800733a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733e:	461a      	mov	r2, r3
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	371c      	adds	r7, #28
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	1ff80000 	.word	0x1ff80000

08007358 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff f9ab 	bl	80066c4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800736e:	2110      	movs	r1, #16
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7ff f9e3 	bl	800673c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7ff fa06 	bl	8006788 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800737c:	2300      	movs	r3, #0
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	e01f      	b.n	80073c2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4413      	add	r3, r2
 800738a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007398:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073a8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073b6:	461a      	mov	r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	3301      	adds	r3, #1
 80073c0:	613b      	str	r3, [r7, #16]
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b0f      	cmp	r3, #15
 80073c6:	d9dc      	bls.n	8007382 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80073c8:	2300      	movs	r3, #0
 80073ca:	613b      	str	r3, [r7, #16]
 80073cc:	e034      	b.n	8007438 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073e4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073f4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007402:	461a      	mov	r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	3301      	adds	r3, #1
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007414:	d80c      	bhi.n	8007430 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4413      	add	r3, r2
 800741e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800742c:	d0ec      	beq.n	8007408 <USB_StopHost+0xb0>
 800742e:	e000      	b.n	8007432 <USB_StopHost+0xda>
        break;
 8007430:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	3301      	adds	r3, #1
 8007436:	613b      	str	r3, [r7, #16]
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	2b0f      	cmp	r3, #15
 800743c:	d9c7      	bls.n	80073ce <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007444:	461a      	mov	r2, r3
 8007446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800744a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007452:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff f924 	bl	80066a2 <USB_EnableGlobalInt>

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007464:	b590      	push	{r4, r7, lr}
 8007466:	b089      	sub	sp, #36	; 0x24
 8007468:	af04      	add	r7, sp, #16
 800746a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800746c:	2301      	movs	r3, #1
 800746e:	2202      	movs	r2, #2
 8007470:	2102      	movs	r1, #2
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fc66 	bl	8007d44 <USBH_FindInterface>
 8007478:	4603      	mov	r3, r0
 800747a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	2bff      	cmp	r3, #255	; 0xff
 8007480:	d002      	beq.n	8007488 <USBH_CDC_InterfaceInit+0x24>
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d901      	bls.n	800748c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007488:	2302      	movs	r3, #2
 800748a:	e13d      	b.n	8007708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fc3b 	bl	8007d0c <USBH_SelectInterface>
 8007496:	4603      	mov	r3, r0
 8007498:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80074a0:	2302      	movs	r3, #2
 80074a2:	e131      	b.n	8007708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80074aa:	2050      	movs	r0, #80	; 0x50
 80074ac:	f001 fb12 	bl	8008ad4 <malloc>
 80074b0:	4603      	mov	r3, r0
 80074b2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80074c4:	2302      	movs	r3, #2
 80074c6:	e11f      	b.n	8007708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80074c8:	2250      	movs	r2, #80	; 0x50
 80074ca:	2100      	movs	r1, #0
 80074cc:	68b8      	ldr	r0, [r7, #8]
 80074ce:	f001 fb11 	bl	8008af4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	211a      	movs	r1, #26
 80074d8:	fb01 f303 	mul.w	r3, r1, r3
 80074dc:	4413      	add	r3, r2
 80074de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	b25b      	sxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	da15      	bge.n	8007516 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	211a      	movs	r1, #26
 80074f0:	fb01 f303 	mul.w	r3, r1, r3
 80074f4:	4413      	add	r3, r2
 80074f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074fa:	781a      	ldrb	r2, [r3, #0]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	211a      	movs	r1, #26
 8007506:	fb01 f303 	mul.w	r3, r1, r3
 800750a:	4413      	add	r3, r2
 800750c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007510:	881a      	ldrh	r2, [r3, #0]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	785b      	ldrb	r3, [r3, #1]
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 ff9c 	bl	800845a <USBH_AllocPipe>
 8007522:	4603      	mov	r3, r0
 8007524:	461a      	mov	r2, r3
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	7819      	ldrb	r1, [r3, #0]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	7858      	ldrb	r0, [r3, #1]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	8952      	ldrh	r2, [r2, #10]
 8007542:	9202      	str	r2, [sp, #8]
 8007544:	2203      	movs	r2, #3
 8007546:	9201      	str	r2, [sp, #4]
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	4623      	mov	r3, r4
 800754c:	4602      	mov	r2, r0
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 ff54 	bl	80083fc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	2200      	movs	r2, #0
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f001 fa17 	bl	8008990 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007562:	2300      	movs	r3, #0
 8007564:	2200      	movs	r2, #0
 8007566:	210a      	movs	r1, #10
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fbeb 	bl	8007d44 <USBH_FindInterface>
 800756e:	4603      	mov	r3, r0
 8007570:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	2bff      	cmp	r3, #255	; 0xff
 8007576:	d002      	beq.n	800757e <USBH_CDC_InterfaceInit+0x11a>
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d901      	bls.n	8007582 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800757e:	2302      	movs	r3, #2
 8007580:	e0c2      	b.n	8007708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007582:	7bfb      	ldrb	r3, [r7, #15]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	211a      	movs	r1, #26
 8007588:	fb01 f303 	mul.w	r3, r1, r3
 800758c:	4413      	add	r3, r2
 800758e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	b25b      	sxtb	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	da16      	bge.n	80075c8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	211a      	movs	r1, #26
 80075a0:	fb01 f303 	mul.w	r3, r1, r3
 80075a4:	4413      	add	r3, r2
 80075a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80075aa:	781a      	ldrb	r2, [r3, #0]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	211a      	movs	r1, #26
 80075b6:	fb01 f303 	mul.w	r3, r1, r3
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80075c0:	881a      	ldrh	r2, [r3, #0]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	835a      	strh	r2, [r3, #26]
 80075c6:	e015      	b.n	80075f4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	211a      	movs	r1, #26
 80075ce:	fb01 f303 	mul.w	r3, r1, r3
 80075d2:	4413      	add	r3, r2
 80075d4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80075d8:	781a      	ldrb	r2, [r3, #0]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	211a      	movs	r1, #26
 80075e4:	fb01 f303 	mul.w	r3, r1, r3
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80075ee:	881a      	ldrh	r2, [r3, #0]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	211a      	movs	r1, #26
 80075fa:	fb01 f303 	mul.w	r3, r1, r3
 80075fe:	4413      	add	r3, r2
 8007600:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	b25b      	sxtb	r3, r3
 8007608:	2b00      	cmp	r3, #0
 800760a:	da16      	bge.n	800763a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	211a      	movs	r1, #26
 8007612:	fb01 f303 	mul.w	r3, r1, r3
 8007616:	4413      	add	r3, r2
 8007618:	f203 3356 	addw	r3, r3, #854	; 0x356
 800761c:	781a      	ldrb	r2, [r3, #0]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	211a      	movs	r1, #26
 8007628:	fb01 f303 	mul.w	r3, r1, r3
 800762c:	4413      	add	r3, r2
 800762e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007632:	881a      	ldrh	r2, [r3, #0]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	835a      	strh	r2, [r3, #26]
 8007638:	e015      	b.n	8007666 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	211a      	movs	r1, #26
 8007640:	fb01 f303 	mul.w	r3, r1, r3
 8007644:	4413      	add	r3, r2
 8007646:	f203 3356 	addw	r3, r3, #854	; 0x356
 800764a:	781a      	ldrb	r2, [r3, #0]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	211a      	movs	r1, #26
 8007656:	fb01 f303 	mul.w	r3, r1, r3
 800765a:	4413      	add	r3, r2
 800765c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007660:	881a      	ldrh	r2, [r3, #0]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	7b9b      	ldrb	r3, [r3, #14]
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fef4 	bl	800845a <USBH_AllocPipe>
 8007672:	4603      	mov	r3, r0
 8007674:	461a      	mov	r2, r3
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	7bdb      	ldrb	r3, [r3, #15]
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 feea 	bl	800845a <USBH_AllocPipe>
 8007686:	4603      	mov	r3, r0
 8007688:	461a      	mov	r2, r3
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	7b59      	ldrb	r1, [r3, #13]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	7b98      	ldrb	r0, [r3, #14]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	8b12      	ldrh	r2, [r2, #24]
 80076a6:	9202      	str	r2, [sp, #8]
 80076a8:	2202      	movs	r2, #2
 80076aa:	9201      	str	r2, [sp, #4]
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	4623      	mov	r3, r4
 80076b0:	4602      	mov	r2, r0
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fea2 	bl	80083fc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	7b19      	ldrb	r1, [r3, #12]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	7bd8      	ldrb	r0, [r3, #15]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	8b52      	ldrh	r2, [r2, #26]
 80076d0:	9202      	str	r2, [sp, #8]
 80076d2:	2202      	movs	r2, #2
 80076d4:	9201      	str	r2, [sp, #4]
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	4623      	mov	r3, r4
 80076da:	4602      	mov	r2, r0
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fe8d 	bl	80083fc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	7b5b      	ldrb	r3, [r3, #13]
 80076ee:	2200      	movs	r2, #0
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 f94c 	bl	8008990 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	7b1b      	ldrb	r3, [r3, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 f945 	bl	8008990 <USBH_LL_SetToggle>

  return USBH_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	bd90      	pop	{r4, r7, pc}

08007710 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00e      	beq.n	8007748 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fe82 	bl	800843a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fead 	bl	800849c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	7b1b      	ldrb	r3, [r3, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00e      	beq.n	800776e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	7b1b      	ldrb	r3, [r3, #12]
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fe6f 	bl	800843a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	7b1b      	ldrb	r3, [r3, #12]
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fe9a 	bl	800849c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	7b5b      	ldrb	r3, [r3, #13]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00e      	beq.n	8007794 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	7b5b      	ldrb	r3, [r3, #13]
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fe5c 	bl	800843a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	7b5b      	ldrb	r3, [r3, #13]
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fe87 	bl	800849c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00b      	beq.n	80077b8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 f99b 	bl	8008ae4 <free>
    phost->pActiveClass->pData = 0U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077b4:	2200      	movs	r2, #0
 80077b6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3340      	adds	r3, #64	; 0x40
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f8b1 	bl	8007942 <GetLineCoding>
 80077e0:	4603      	mov	r3, r0
 80077e2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80077e4:	7afb      	ldrb	r3, [r7, #11]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d105      	bne.n	80077f6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077f0:	2102      	movs	r1, #2
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80077f6:	7afb      	ldrb	r3, [r7, #11]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007820:	2b04      	cmp	r3, #4
 8007822:	d877      	bhi.n	8007914 <USBH_CDC_Process+0x114>
 8007824:	a201      	add	r2, pc, #4	; (adr r2, 800782c <USBH_CDC_Process+0x2c>)
 8007826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782a:	bf00      	nop
 800782c:	08007841 	.word	0x08007841
 8007830:	08007847 	.word	0x08007847
 8007834:	08007877 	.word	0x08007877
 8007838:	080078eb 	.word	0x080078eb
 800783c:	080078f9 	.word	0x080078f9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	73fb      	strb	r3, [r7, #15]
      break;
 8007844:	e06d      	b.n	8007922 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f897 	bl	8007980 <SetLineCoding>
 8007852:	4603      	mov	r3, r0
 8007854:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d104      	bne.n	8007866 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007864:	e058      	b.n	8007918 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d055      	beq.n	8007918 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2204      	movs	r2, #4
 8007870:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007874:	e050      	b.n	8007918 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	3340      	adds	r3, #64	; 0x40
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f860 	bl	8007942 <GetLineCoding>
 8007882:	4603      	mov	r3, r0
 8007884:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007886:	7bbb      	ldrb	r3, [r7, #14]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d126      	bne.n	80078da <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800789e:	791b      	ldrb	r3, [r3, #4]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d13b      	bne.n	800791c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d133      	bne.n	800791c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078be:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d12b      	bne.n	800791c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078cc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d124      	bne.n	800791c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f958 	bl	8007b88 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80078d8:	e020      	b.n	800791c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d01d      	beq.n	800791c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2204      	movs	r2, #4
 80078e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80078e8:	e018      	b.n	800791c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f867 	bl	80079be <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f8da 	bl	8007aaa <CDC_ProcessReception>
      break;
 80078f6:	e014      	b.n	8007922 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80078f8:	2100      	movs	r1, #0
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fb08 	bl	8007f10 <USBH_ClrFeature>
 8007900:	4603      	mov	r3, r0
 8007902:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10a      	bne.n	8007920 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007912:	e005      	b.n	8007920 <USBH_CDC_Process+0x120>

    default:
      break;
 8007914:	bf00      	nop
 8007916:	e004      	b.n	8007922 <USBH_CDC_Process+0x122>
      break;
 8007918:	bf00      	nop
 800791a:	e002      	b.n	8007922 <USBH_CDC_Process+0x122>
      break;
 800791c:	bf00      	nop
 800791e:	e000      	b.n	8007922 <USBH_CDC_Process+0x122>
      break;
 8007920:	bf00      	nop

  }

  return status;
 8007922:	7bfb      	ldrb	r3, [r7, #15]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	22a1      	movs	r2, #161	; 0xa1
 8007950:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2221      	movs	r2, #33	; 0x21
 8007956:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2207      	movs	r2, #7
 8007968:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2207      	movs	r2, #7
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 faf1 	bl	8007f58 <USBH_CtlReq>
 8007976:	4603      	mov	r3, r0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2221      	movs	r2, #33	; 0x21
 800798e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2207      	movs	r2, #7
 80079a6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2207      	movs	r2, #7
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fad2 	bl	8007f58 <USBH_CtlReq>
 80079b4:	4603      	mov	r3, r0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b086      	sub	sp, #24
 80079c2:	af02      	add	r7, sp, #8
 80079c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079d0:	2300      	movs	r3, #0
 80079d2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d002      	beq.n	80079e4 <CDC_ProcessTransmission+0x26>
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d023      	beq.n	8007a2a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80079e2:	e05e      	b.n	8007aa2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	8b12      	ldrh	r2, [r2, #24]
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d90b      	bls.n	8007a08 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	69d9      	ldr	r1, [r3, #28]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8b1a      	ldrh	r2, [r3, #24]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	7b5b      	ldrb	r3, [r3, #13]
 80079fc:	2001      	movs	r0, #1
 80079fe:	9000      	str	r0, [sp, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fcb8 	bl	8008376 <USBH_BulkSendData>
 8007a06:	e00b      	b.n	8007a20 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	7b5b      	ldrb	r3, [r3, #13]
 8007a16:	2001      	movs	r0, #1
 8007a18:	9000      	str	r0, [sp, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fcab 	bl	8008376 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2202      	movs	r2, #2
 8007a24:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a28:	e03b      	b.n	8007aa2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	7b5b      	ldrb	r3, [r3, #13]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 ff83 	bl	800893c <USBH_LL_GetURBState>
 8007a36:	4603      	mov	r3, r0
 8007a38:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007a3a:	7afb      	ldrb	r3, [r7, #11]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d128      	bne.n	8007a92 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	8b12      	ldrh	r2, [r2, #24]
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d90e      	bls.n	8007a6a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	8b12      	ldrh	r2, [r2, #24]
 8007a54:	1a9a      	subs	r2, r3, r2
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	8b12      	ldrh	r2, [r2, #24]
 8007a62:	441a      	add	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	61da      	str	r2, [r3, #28]
 8007a68:	e002      	b.n	8007a70 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d004      	beq.n	8007a82 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a80:	e00e      	b.n	8007aa0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f868 	bl	8007b60 <USBH_CDC_TransmitCallback>
      break;
 8007a90:	e006      	b.n	8007aa0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007a92:	7afb      	ldrb	r3, [r7, #11]
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d103      	bne.n	8007aa0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007aa0:	bf00      	nop
  }
}
 8007aa2:	bf00      	nop
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b086      	sub	sp, #24
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007abc:	2300      	movs	r3, #0
 8007abe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d002      	beq.n	8007ad0 <CDC_ProcessReception+0x26>
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d00e      	beq.n	8007aec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007ace:	e043      	b.n	8007b58 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	6a19      	ldr	r1, [r3, #32]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	8b5a      	ldrh	r2, [r3, #26]
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	7b1b      	ldrb	r3, [r3, #12]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fc6f 	bl	80083c0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2204      	movs	r2, #4
 8007ae6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007aea:	e035      	b.n	8007b58 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	7b1b      	ldrb	r3, [r3, #12]
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 ff22 	bl	800893c <USBH_LL_GetURBState>
 8007af8:	4603      	mov	r3, r0
 8007afa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007afc:	7cfb      	ldrb	r3, [r7, #19]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d129      	bne.n	8007b56 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	7b1b      	ldrb	r3, [r3, #12]
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fe85 	bl	8008818 <USBH_LL_GetLastXferSize>
 8007b0e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d016      	beq.n	8007b48 <CDC_ProcessReception+0x9e>
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	8b5b      	ldrh	r3, [r3, #26]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d910      	bls.n	8007b48 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	1ad2      	subs	r2, r2, r3
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	6a1a      	ldr	r2, [r3, #32]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	441a      	add	r2, r3
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	2203      	movs	r2, #3
 8007b42:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007b46:	e006      	b.n	8007b56 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f80f 	bl	8007b74 <USBH_CDC_ReceiveCallback>
      break;
 8007b56:	bf00      	nop
  }
}
 8007b58:	bf00      	nop
 8007b5a:	3718      	adds	r7, #24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	e029      	b.n	8007c08 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	79fa      	ldrb	r2, [r7, #7]
 8007bb8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 f81f 	bl	8007c10 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d003      	beq.n	8007c00 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 fd97 	bl	8008734 <USBH_LL_Init>

  return USBH_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	60fb      	str	r3, [r7, #12]
 8007c20:	e009      	b.n	8007c36 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	33e0      	adds	r3, #224	; 0xe0
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2b0e      	cmp	r3, #14
 8007c3a:	d9f2      	bls.n	8007c22 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	e009      	b.n	8007c56 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	3301      	adds	r3, #1
 8007c54:	60fb      	str	r3, [r7, #12]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c5c:	d3f1      	bcc.n	8007c42 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2240      	movs	r2, #64	; 0x40
 8007c82:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d016      	beq.n	8007cfa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10e      	bne.n	8007cf4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007cdc:	1c59      	adds	r1, r3, #1
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	33de      	adds	r3, #222	; 0xde
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	73fb      	strb	r3, [r7, #15]
 8007cf2:	e004      	b.n	8007cfe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	73fb      	strb	r3, [r7, #15]
 8007cf8:	e001      	b.n	8007cfe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3714      	adds	r7, #20
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	460b      	mov	r3, r1
 8007d16:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007d22:	78fa      	ldrb	r2, [r7, #3]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d204      	bcs.n	8007d32 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	78fa      	ldrb	r2, [r7, #3]
 8007d2c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007d30:	e001      	b.n	8007d36 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007d32:	2302      	movs	r3, #2
 8007d34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	4608      	mov	r0, r1
 8007d4e:	4611      	mov	r1, r2
 8007d50:	461a      	mov	r2, r3
 8007d52:	4603      	mov	r3, r0
 8007d54:	70fb      	strb	r3, [r7, #3]
 8007d56:	460b      	mov	r3, r1
 8007d58:	70bb      	strb	r3, [r7, #2]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d6c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d6e:	e025      	b.n	8007dbc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007d70:	7dfb      	ldrb	r3, [r7, #23]
 8007d72:	221a      	movs	r2, #26
 8007d74:	fb02 f303 	mul.w	r3, r2, r3
 8007d78:	3308      	adds	r3, #8
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	3302      	adds	r3, #2
 8007d80:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	795b      	ldrb	r3, [r3, #5]
 8007d86:	78fa      	ldrb	r2, [r7, #3]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d002      	beq.n	8007d92 <USBH_FindInterface+0x4e>
 8007d8c:	78fb      	ldrb	r3, [r7, #3]
 8007d8e:	2bff      	cmp	r3, #255	; 0xff
 8007d90:	d111      	bne.n	8007db6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d96:	78ba      	ldrb	r2, [r7, #2]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d002      	beq.n	8007da2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d9c:	78bb      	ldrb	r3, [r7, #2]
 8007d9e:	2bff      	cmp	r3, #255	; 0xff
 8007da0:	d109      	bne.n	8007db6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007da6:	787a      	ldrb	r2, [r7, #1]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d002      	beq.n	8007db2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007dac:	787b      	ldrb	r3, [r7, #1]
 8007dae:	2bff      	cmp	r3, #255	; 0xff
 8007db0:	d101      	bne.n	8007db6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	e006      	b.n	8007dc4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007db6:	7dfb      	ldrb	r3, [r7, #23]
 8007db8:	3301      	adds	r3, #1
 8007dba:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d9d6      	bls.n	8007d70 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007dc2:	23ff      	movs	r3, #255	; 0xff
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	371c      	adds	r7, #28
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fce7 	bl	80087ac <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007dde:	2101      	movs	r1, #1
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fdbe 	bl	8008962 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f804 	bl	8007e32 <USBH_HandleSof>
}
 8007e2a:	bf00      	nop
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b082      	sub	sp, #8
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b0b      	cmp	r3, #11
 8007e42:	d10a      	bne.n	8007e5a <USBH_HandleSof+0x28>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d005      	beq.n	8007e5a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	4798      	blx	r3
  }
}
 8007e5a:	bf00      	nop
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b083      	sub	sp, #12
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007e72:	bf00      	nop
}
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007e8e:	bf00      	nop
}
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fc7a 	bl	80087e2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	791b      	ldrb	r3, [r3, #4]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fad1 	bl	800849c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	795b      	ldrb	r3, [r3, #5]
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 facb 	bl	800849c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	789b      	ldrb	r3, [r3, #2]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d10f      	bne.n	8007f44 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2202      	movs	r2, #2
 8007f28:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007f36:	78fb      	ldrb	r3, [r7, #3]
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007f44:	2200      	movs	r2, #0
 8007f46:	2100      	movs	r1, #0
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f805 	bl	8007f58 <USBH_CtlReq>
 8007f4e:	4603      	mov	r3, r0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	4613      	mov	r3, r2
 8007f64:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007f66:	2301      	movs	r3, #1
 8007f68:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	789b      	ldrb	r3, [r3, #2]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d002      	beq.n	8007f78 <USBH_CtlReq+0x20>
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d00f      	beq.n	8007f96 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007f76:	e027      	b.n	8007fc8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	88fa      	ldrh	r2, [r7, #6]
 8007f82:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2201      	movs	r2, #1
 8007f88:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007f90:	2301      	movs	r3, #1
 8007f92:	75fb      	strb	r3, [r7, #23]
      break;
 8007f94:	e018      	b.n	8007fc8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f000 f81c 	bl	8007fd4 <USBH_HandleControl>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d002      	beq.n	8007fac <USBH_CtlReq+0x54>
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d106      	bne.n	8007fba <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	761a      	strb	r2, [r3, #24]
      break;
 8007fb8:	e005      	b.n	8007fc6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007fba:	7dfb      	ldrb	r3, [r7, #23]
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d102      	bne.n	8007fc6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	709a      	strb	r2, [r3, #2]
      break;
 8007fc6:	bf00      	nop
  }
  return status;
 8007fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3718      	adds	r7, #24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
	...

08007fd4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af02      	add	r7, sp, #8
 8007fda:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	7e1b      	ldrb	r3, [r3, #24]
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	2b0a      	cmp	r3, #10
 8007fec:	f200 8156 	bhi.w	800829c <USBH_HandleControl+0x2c8>
 8007ff0:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <USBH_HandleControl+0x24>)
 8007ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff6:	bf00      	nop
 8007ff8:	08008025 	.word	0x08008025
 8007ffc:	0800803f 	.word	0x0800803f
 8008000:	080080a9 	.word	0x080080a9
 8008004:	080080cf 	.word	0x080080cf
 8008008:	08008107 	.word	0x08008107
 800800c:	08008131 	.word	0x08008131
 8008010:	08008183 	.word	0x08008183
 8008014:	080081a5 	.word	0x080081a5
 8008018:	080081e1 	.word	0x080081e1
 800801c:	08008207 	.word	0x08008207
 8008020:	08008245 	.word	0x08008245
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f103 0110 	add.w	r1, r3, #16
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	795b      	ldrb	r3, [r3, #5]
 800802e:	461a      	mov	r2, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f943 	bl	80082bc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2202      	movs	r2, #2
 800803a:	761a      	strb	r2, [r3, #24]
      break;
 800803c:	e139      	b.n	80082b2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	795b      	ldrb	r3, [r3, #5]
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fc79 	bl	800893c <USBH_LL_GetURBState>
 800804a:	4603      	mov	r3, r0
 800804c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d11e      	bne.n	8008092 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	7c1b      	ldrb	r3, [r3, #16]
 8008058:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800805c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	8adb      	ldrh	r3, [r3, #22]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008066:	7b7b      	ldrb	r3, [r7, #13]
 8008068:	2b80      	cmp	r3, #128	; 0x80
 800806a:	d103      	bne.n	8008074 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2203      	movs	r2, #3
 8008070:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008072:	e115      	b.n	80082a0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2205      	movs	r2, #5
 8008078:	761a      	strb	r2, [r3, #24]
      break;
 800807a:	e111      	b.n	80082a0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800807c:	7b7b      	ldrb	r3, [r7, #13]
 800807e:	2b80      	cmp	r3, #128	; 0x80
 8008080:	d103      	bne.n	800808a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2209      	movs	r2, #9
 8008086:	761a      	strb	r2, [r3, #24]
      break;
 8008088:	e10a      	b.n	80082a0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2207      	movs	r2, #7
 800808e:	761a      	strb	r2, [r3, #24]
      break;
 8008090:	e106      	b.n	80082a0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	2b04      	cmp	r3, #4
 8008096:	d003      	beq.n	80080a0 <USBH_HandleControl+0xcc>
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	2b02      	cmp	r3, #2
 800809c:	f040 8100 	bne.w	80082a0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	220b      	movs	r2, #11
 80080a4:	761a      	strb	r2, [r3, #24]
      break;
 80080a6:	e0fb      	b.n	80082a0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6899      	ldr	r1, [r3, #8]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	899a      	ldrh	r2, [r3, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	791b      	ldrb	r3, [r3, #4]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f93a 	bl	800833a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2204      	movs	r2, #4
 80080ca:	761a      	strb	r2, [r3, #24]
      break;
 80080cc:	e0f1      	b.n	80082b2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	791b      	ldrb	r3, [r3, #4]
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fc31 	bl	800893c <USBH_LL_GetURBState>
 80080da:	4603      	mov	r3, r0
 80080dc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80080de:	7bbb      	ldrb	r3, [r7, #14]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d102      	bne.n	80080ea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2209      	movs	r2, #9
 80080e8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	2b05      	cmp	r3, #5
 80080ee:	d102      	bne.n	80080f6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80080f0:	2303      	movs	r3, #3
 80080f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80080f4:	e0d6      	b.n	80082a4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	2b04      	cmp	r3, #4
 80080fa:	f040 80d3 	bne.w	80082a4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	220b      	movs	r2, #11
 8008102:	761a      	strb	r2, [r3, #24]
      break;
 8008104:	e0ce      	b.n	80082a4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6899      	ldr	r1, [r3, #8]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	899a      	ldrh	r2, [r3, #12]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	795b      	ldrb	r3, [r3, #5]
 8008112:	2001      	movs	r0, #1
 8008114:	9000      	str	r0, [sp, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f8ea 	bl	80082f0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008122:	b29a      	uxth	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2206      	movs	r2, #6
 800812c:	761a      	strb	r2, [r3, #24]
      break;
 800812e:	e0c0      	b.n	80082b2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	795b      	ldrb	r3, [r3, #5]
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fc00 	bl	800893c <USBH_LL_GetURBState>
 800813c:	4603      	mov	r3, r0
 800813e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008140:	7bbb      	ldrb	r3, [r7, #14]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d103      	bne.n	800814e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2207      	movs	r2, #7
 800814a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800814c:	e0ac      	b.n	80082a8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	2b05      	cmp	r3, #5
 8008152:	d105      	bne.n	8008160 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	220c      	movs	r2, #12
 8008158:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800815a:	2303      	movs	r3, #3
 800815c:	73fb      	strb	r3, [r7, #15]
      break;
 800815e:	e0a3      	b.n	80082a8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	2b02      	cmp	r3, #2
 8008164:	d103      	bne.n	800816e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2205      	movs	r2, #5
 800816a:	761a      	strb	r2, [r3, #24]
      break;
 800816c:	e09c      	b.n	80082a8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800816e:	7bbb      	ldrb	r3, [r7, #14]
 8008170:	2b04      	cmp	r3, #4
 8008172:	f040 8099 	bne.w	80082a8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	220b      	movs	r2, #11
 800817a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800817c:	2302      	movs	r3, #2
 800817e:	73fb      	strb	r3, [r7, #15]
      break;
 8008180:	e092      	b.n	80082a8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	791b      	ldrb	r3, [r3, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	2100      	movs	r1, #0
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f8d5 	bl	800833a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008196:	b29a      	uxth	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2208      	movs	r2, #8
 80081a0:	761a      	strb	r2, [r3, #24]

      break;
 80081a2:	e086      	b.n	80082b2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	791b      	ldrb	r3, [r3, #4]
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fbc6 	bl	800893c <USBH_LL_GetURBState>
 80081b0:	4603      	mov	r3, r0
 80081b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80081b4:	7bbb      	ldrb	r3, [r7, #14]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d105      	bne.n	80081c6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	220d      	movs	r2, #13
 80081be:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80081c4:	e072      	b.n	80082ac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d103      	bne.n	80081d4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	220b      	movs	r2, #11
 80081d0:	761a      	strb	r2, [r3, #24]
      break;
 80081d2:	e06b      	b.n	80082ac <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80081d4:	7bbb      	ldrb	r3, [r7, #14]
 80081d6:	2b05      	cmp	r3, #5
 80081d8:	d168      	bne.n	80082ac <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80081da:	2303      	movs	r3, #3
 80081dc:	73fb      	strb	r3, [r7, #15]
      break;
 80081de:	e065      	b.n	80082ac <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	795b      	ldrb	r3, [r3, #5]
 80081e4:	2201      	movs	r2, #1
 80081e6:	9200      	str	r2, [sp, #0]
 80081e8:	2200      	movs	r2, #0
 80081ea:	2100      	movs	r1, #0
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f87f 	bl	80082f0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	220a      	movs	r2, #10
 8008202:	761a      	strb	r2, [r3, #24]
      break;
 8008204:	e055      	b.n	80082b2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	795b      	ldrb	r3, [r3, #5]
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fb95 	bl	800893c <USBH_LL_GetURBState>
 8008212:	4603      	mov	r3, r0
 8008214:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008216:	7bbb      	ldrb	r3, [r7, #14]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d105      	bne.n	8008228 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	220d      	movs	r2, #13
 8008224:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008226:	e043      	b.n	80082b0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	2b02      	cmp	r3, #2
 800822c:	d103      	bne.n	8008236 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2209      	movs	r2, #9
 8008232:	761a      	strb	r2, [r3, #24]
      break;
 8008234:	e03c      	b.n	80082b0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	2b04      	cmp	r3, #4
 800823a:	d139      	bne.n	80082b0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	220b      	movs	r2, #11
 8008240:	761a      	strb	r2, [r3, #24]
      break;
 8008242:	e035      	b.n	80082b0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	7e5b      	ldrb	r3, [r3, #25]
 8008248:	3301      	adds	r3, #1
 800824a:	b2da      	uxtb	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	765a      	strb	r2, [r3, #25]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	7e5b      	ldrb	r3, [r3, #25]
 8008254:	2b02      	cmp	r3, #2
 8008256:	d806      	bhi.n	8008266 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008264:	e025      	b.n	80082b2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800826c:	2106      	movs	r1, #6
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	795b      	ldrb	r3, [r3, #5]
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f90c 	bl	800849c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	791b      	ldrb	r3, [r3, #4]
 8008288:	4619      	mov	r1, r3
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f906 	bl	800849c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008296:	2302      	movs	r3, #2
 8008298:	73fb      	strb	r3, [r7, #15]
      break;
 800829a:	e00a      	b.n	80082b2 <USBH_HandleControl+0x2de>

    default:
      break;
 800829c:	bf00      	nop
 800829e:	e008      	b.n	80082b2 <USBH_HandleControl+0x2de>
      break;
 80082a0:	bf00      	nop
 80082a2:	e006      	b.n	80082b2 <USBH_HandleControl+0x2de>
      break;
 80082a4:	bf00      	nop
 80082a6:	e004      	b.n	80082b2 <USBH_HandleControl+0x2de>
      break;
 80082a8:	bf00      	nop
 80082aa:	e002      	b.n	80082b2 <USBH_HandleControl+0x2de>
      break;
 80082ac:	bf00      	nop
 80082ae:	e000      	b.n	80082b2 <USBH_HandleControl+0x2de>
      break;
 80082b0:	bf00      	nop
  }

  return status;
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b088      	sub	sp, #32
 80082c0:	af04      	add	r7, sp, #16
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	4613      	mov	r3, r2
 80082c8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80082ca:	79f9      	ldrb	r1, [r7, #7]
 80082cc:	2300      	movs	r3, #0
 80082ce:	9303      	str	r3, [sp, #12]
 80082d0:	2308      	movs	r3, #8
 80082d2:	9302      	str	r3, [sp, #8]
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	9301      	str	r3, [sp, #4]
 80082d8:	2300      	movs	r3, #0
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	2300      	movs	r3, #0
 80082de:	2200      	movs	r2, #0
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 fafa 	bl	80088da <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b088      	sub	sp, #32
 80082f4:	af04      	add	r7, sp, #16
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	4611      	mov	r1, r2
 80082fc:	461a      	mov	r2, r3
 80082fe:	460b      	mov	r3, r1
 8008300:	80fb      	strh	r3, [r7, #6]
 8008302:	4613      	mov	r3, r2
 8008304:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008310:	2300      	movs	r3, #0
 8008312:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008314:	7979      	ldrb	r1, [r7, #5]
 8008316:	7e3b      	ldrb	r3, [r7, #24]
 8008318:	9303      	str	r3, [sp, #12]
 800831a:	88fb      	ldrh	r3, [r7, #6]
 800831c:	9302      	str	r3, [sp, #8]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	9301      	str	r3, [sp, #4]
 8008322:	2301      	movs	r3, #1
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	2300      	movs	r3, #0
 8008328:	2200      	movs	r2, #0
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 fad5 	bl	80088da <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b088      	sub	sp, #32
 800833e:	af04      	add	r7, sp, #16
 8008340:	60f8      	str	r0, [r7, #12]
 8008342:	60b9      	str	r1, [r7, #8]
 8008344:	4611      	mov	r1, r2
 8008346:	461a      	mov	r2, r3
 8008348:	460b      	mov	r3, r1
 800834a:	80fb      	strh	r3, [r7, #6]
 800834c:	4613      	mov	r3, r2
 800834e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008350:	7979      	ldrb	r1, [r7, #5]
 8008352:	2300      	movs	r3, #0
 8008354:	9303      	str	r3, [sp, #12]
 8008356:	88fb      	ldrh	r3, [r7, #6]
 8008358:	9302      	str	r3, [sp, #8]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	9301      	str	r3, [sp, #4]
 800835e:	2301      	movs	r3, #1
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	2300      	movs	r3, #0
 8008364:	2201      	movs	r2, #1
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 fab7 	bl	80088da <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800836c:	2300      	movs	r3, #0

}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b088      	sub	sp, #32
 800837a:	af04      	add	r7, sp, #16
 800837c:	60f8      	str	r0, [r7, #12]
 800837e:	60b9      	str	r1, [r7, #8]
 8008380:	4611      	mov	r1, r2
 8008382:	461a      	mov	r2, r3
 8008384:	460b      	mov	r3, r1
 8008386:	80fb      	strh	r3, [r7, #6]
 8008388:	4613      	mov	r3, r2
 800838a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800839a:	7979      	ldrb	r1, [r7, #5]
 800839c:	7e3b      	ldrb	r3, [r7, #24]
 800839e:	9303      	str	r3, [sp, #12]
 80083a0:	88fb      	ldrh	r3, [r7, #6]
 80083a2:	9302      	str	r3, [sp, #8]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	2301      	movs	r3, #1
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	2302      	movs	r3, #2
 80083ae:	2200      	movs	r2, #0
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f000 fa92 	bl	80088da <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af04      	add	r7, sp, #16
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	4611      	mov	r1, r2
 80083cc:	461a      	mov	r2, r3
 80083ce:	460b      	mov	r3, r1
 80083d0:	80fb      	strh	r3, [r7, #6]
 80083d2:	4613      	mov	r3, r2
 80083d4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80083d6:	7979      	ldrb	r1, [r7, #5]
 80083d8:	2300      	movs	r3, #0
 80083da:	9303      	str	r3, [sp, #12]
 80083dc:	88fb      	ldrh	r3, [r7, #6]
 80083de:	9302      	str	r3, [sp, #8]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	9301      	str	r3, [sp, #4]
 80083e4:	2301      	movs	r3, #1
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	2302      	movs	r3, #2
 80083ea:	2201      	movs	r2, #1
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 fa74 	bl	80088da <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af04      	add	r7, sp, #16
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	4608      	mov	r0, r1
 8008406:	4611      	mov	r1, r2
 8008408:	461a      	mov	r2, r3
 800840a:	4603      	mov	r3, r0
 800840c:	70fb      	strb	r3, [r7, #3]
 800840e:	460b      	mov	r3, r1
 8008410:	70bb      	strb	r3, [r7, #2]
 8008412:	4613      	mov	r3, r2
 8008414:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008416:	7878      	ldrb	r0, [r7, #1]
 8008418:	78ba      	ldrb	r2, [r7, #2]
 800841a:	78f9      	ldrb	r1, [r7, #3]
 800841c:	8b3b      	ldrh	r3, [r7, #24]
 800841e:	9302      	str	r3, [sp, #8]
 8008420:	7d3b      	ldrb	r3, [r7, #20]
 8008422:	9301      	str	r3, [sp, #4]
 8008424:	7c3b      	ldrb	r3, [r7, #16]
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	4603      	mov	r3, r0
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fa07 	bl	800883e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	460b      	mov	r3, r1
 8008444:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008446:	78fb      	ldrb	r3, [r7, #3]
 8008448:	4619      	mov	r1, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fa26 	bl	800889c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	460b      	mov	r3, r1
 8008464:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f836 	bl	80084d8 <USBH_GetFreePipe>
 800846c:	4603      	mov	r3, r0
 800846e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008470:	89fb      	ldrh	r3, [r7, #14]
 8008472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008476:	4293      	cmp	r3, r2
 8008478:	d00a      	beq.n	8008490 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800847a:	78fa      	ldrb	r2, [r7, #3]
 800847c:	89fb      	ldrh	r3, [r7, #14]
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008486:	6879      	ldr	r1, [r7, #4]
 8008488:	33e0      	adds	r3, #224	; 0xe0
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	440b      	add	r3, r1
 800848e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008490:	89fb      	ldrh	r3, [r7, #14]
 8008492:	b2db      	uxtb	r3, r3
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80084a8:	78fb      	ldrb	r3, [r7, #3]
 80084aa:	2b0a      	cmp	r3, #10
 80084ac:	d80d      	bhi.n	80084ca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80084ae:	78fb      	ldrb	r3, [r7, #3]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	33e0      	adds	r3, #224	; 0xe0
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	685a      	ldr	r2, [r3, #4]
 80084ba:	78fb      	ldrb	r3, [r7, #3]
 80084bc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80084c0:	6879      	ldr	r1, [r7, #4]
 80084c2:	33e0      	adds	r3, #224	; 0xe0
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	440b      	add	r3, r1
 80084c8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80084e4:	2300      	movs	r3, #0
 80084e6:	73fb      	strb	r3, [r7, #15]
 80084e8:	e00f      	b.n	800850a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80084ea:	7bfb      	ldrb	r3, [r7, #15]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	33e0      	adds	r3, #224	; 0xe0
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d102      	bne.n	8008504 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
 8008500:	b29b      	uxth	r3, r3
 8008502:	e007      	b.n	8008514 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008504:	7bfb      	ldrb	r3, [r7, #15]
 8008506:	3301      	adds	r3, #1
 8008508:	73fb      	strb	r3, [r7, #15]
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	2b0a      	cmp	r3, #10
 800850e:	d9ec      	bls.n	80084ea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008510:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008514:	4618      	mov	r0, r3
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008524:	2201      	movs	r2, #1
 8008526:	490e      	ldr	r1, [pc, #56]	; (8008560 <MX_USB_HOST_Init+0x40>)
 8008528:	480e      	ldr	r0, [pc, #56]	; (8008564 <MX_USB_HOST_Init+0x44>)
 800852a:	f7ff fb37 	bl	8007b9c <USBH_Init>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008534:	f7f8 ffd4 	bl	80014e0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008538:	490b      	ldr	r1, [pc, #44]	; (8008568 <MX_USB_HOST_Init+0x48>)
 800853a:	480a      	ldr	r0, [pc, #40]	; (8008564 <MX_USB_HOST_Init+0x44>)
 800853c:	f7ff fbbc 	bl	8007cb8 <USBH_RegisterClass>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008546:	f7f8 ffcb 	bl	80014e0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800854a:	4806      	ldr	r0, [pc, #24]	; (8008564 <MX_USB_HOST_Init+0x44>)
 800854c:	f7ff fc40 	bl	8007dd0 <USBH_Start>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008556:	f7f8 ffc3 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800855a:	bf00      	nop
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	0800856d 	.word	0x0800856d
 8008564:	20000260 	.word	0x20000260
 8008568:	20000014 	.word	0x20000014

0800856c <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008578:	78fb      	ldrb	r3, [r7, #3]
 800857a:	3b01      	subs	r3, #1
 800857c:	2b04      	cmp	r3, #4
 800857e:	d819      	bhi.n	80085b4 <USBH_UserProcess+0x48>
 8008580:	a201      	add	r2, pc, #4	; (adr r2, 8008588 <USBH_UserProcess+0x1c>)
 8008582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008586:	bf00      	nop
 8008588:	080085b5 	.word	0x080085b5
 800858c:	080085a5 	.word	0x080085a5
 8008590:	080085b5 	.word	0x080085b5
 8008594:	080085ad 	.word	0x080085ad
 8008598:	0800859d 	.word	0x0800859d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800859c:	4b09      	ldr	r3, [pc, #36]	; (80085c4 <USBH_UserProcess+0x58>)
 800859e:	2203      	movs	r2, #3
 80085a0:	701a      	strb	r2, [r3, #0]
  break;
 80085a2:	e008      	b.n	80085b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80085a4:	4b07      	ldr	r3, [pc, #28]	; (80085c4 <USBH_UserProcess+0x58>)
 80085a6:	2202      	movs	r2, #2
 80085a8:	701a      	strb	r2, [r3, #0]
  break;
 80085aa:	e004      	b.n	80085b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80085ac:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <USBH_UserProcess+0x58>)
 80085ae:	2201      	movs	r2, #1
 80085b0:	701a      	strb	r2, [r3, #0]
  break;
 80085b2:	e000      	b.n	80085b6 <USBH_UserProcess+0x4a>

  default:
  break;
 80085b4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80085b6:	bf00      	nop
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	200000bc 	.word	0x200000bc

080085c8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b08a      	sub	sp, #40	; 0x28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085d0:	f107 0314 	add.w	r3, r7, #20
 80085d4:	2200      	movs	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]
 80085d8:	605a      	str	r2, [r3, #4]
 80085da:	609a      	str	r2, [r3, #8]
 80085dc:	60da      	str	r2, [r3, #12]
 80085de:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085e8:	d147      	bne.n	800867a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085ea:	2300      	movs	r3, #0
 80085ec:	613b      	str	r3, [r7, #16]
 80085ee:	4b25      	ldr	r3, [pc, #148]	; (8008684 <HAL_HCD_MspInit+0xbc>)
 80085f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f2:	4a24      	ldr	r2, [pc, #144]	; (8008684 <HAL_HCD_MspInit+0xbc>)
 80085f4:	f043 0301 	orr.w	r3, r3, #1
 80085f8:	6313      	str	r3, [r2, #48]	; 0x30
 80085fa:	4b22      	ldr	r3, [pc, #136]	; (8008684 <HAL_HCD_MspInit+0xbc>)
 80085fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fe:	f003 0301 	and.w	r3, r3, #1
 8008602:	613b      	str	r3, [r7, #16]
 8008604:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800860a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800860c:	2300      	movs	r3, #0
 800860e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008610:	2300      	movs	r3, #0
 8008612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008614:	f107 0314 	add.w	r3, r7, #20
 8008618:	4619      	mov	r1, r3
 800861a:	481b      	ldr	r0, [pc, #108]	; (8008688 <HAL_HCD_MspInit+0xc0>)
 800861c:	f7f9 fbd6 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008620:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008626:	2302      	movs	r3, #2
 8008628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800862a:	2300      	movs	r3, #0
 800862c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800862e:	2300      	movs	r3, #0
 8008630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008632:	230a      	movs	r3, #10
 8008634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008636:	f107 0314 	add.w	r3, r7, #20
 800863a:	4619      	mov	r1, r3
 800863c:	4812      	ldr	r0, [pc, #72]	; (8008688 <HAL_HCD_MspInit+0xc0>)
 800863e:	f7f9 fbc5 	bl	8001dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008642:	4b10      	ldr	r3, [pc, #64]	; (8008684 <HAL_HCD_MspInit+0xbc>)
 8008644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008646:	4a0f      	ldr	r2, [pc, #60]	; (8008684 <HAL_HCD_MspInit+0xbc>)
 8008648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800864c:	6353      	str	r3, [r2, #52]	; 0x34
 800864e:	2300      	movs	r3, #0
 8008650:	60fb      	str	r3, [r7, #12]
 8008652:	4b0c      	ldr	r3, [pc, #48]	; (8008684 <HAL_HCD_MspInit+0xbc>)
 8008654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008656:	4a0b      	ldr	r2, [pc, #44]	; (8008684 <HAL_HCD_MspInit+0xbc>)
 8008658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800865c:	6453      	str	r3, [r2, #68]	; 0x44
 800865e:	4b09      	ldr	r3, [pc, #36]	; (8008684 <HAL_HCD_MspInit+0xbc>)
 8008660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008666:	60fb      	str	r3, [r7, #12]
 8008668:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800866a:	2200      	movs	r2, #0
 800866c:	2100      	movs	r1, #0
 800866e:	2043      	movs	r0, #67	; 0x43
 8008670:	f7f9 fb75 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008674:	2043      	movs	r0, #67	; 0x43
 8008676:	f7f9 fb8e 	bl	8001d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800867a:	bf00      	nop
 800867c:	3728      	adds	r7, #40	; 0x28
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	40023800 	.word	0x40023800
 8008688:	40020000 	.word	0x40020000

0800868c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800869a:	4618      	mov	r0, r3
 800869c:	f7ff fbb7 	bl	8007e0e <USBH_LL_IncTimer>
}
 80086a0:	bf00      	nop
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff fbef 	bl	8007e9a <USBH_LL_Connect>
}
 80086bc:	bf00      	nop
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff fbf8 	bl	8007ec8 <USBH_LL_Disconnect>
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
 80086ec:	4613      	mov	r3, r2
 80086ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800870a:	4618      	mov	r0, r3
 800870c:	f7ff fba9 	bl	8007e62 <USBH_LL_PortEnabled>
}
 8008710:	bf00      	nop
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008726:	4618      	mov	r0, r3
 8008728:	f7ff fba9 	bl	8007e7e <USBH_LL_PortDisabled>
}
 800872c:	bf00      	nop
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008742:	2b01      	cmp	r3, #1
 8008744:	d12a      	bne.n	800879c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008746:	4a18      	ldr	r2, [pc, #96]	; (80087a8 <USBH_LL_Init+0x74>)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a15      	ldr	r2, [pc, #84]	; (80087a8 <USBH_LL_Init+0x74>)
 8008752:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008756:	4b14      	ldr	r3, [pc, #80]	; (80087a8 <USBH_LL_Init+0x74>)
 8008758:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800875c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800875e:	4b12      	ldr	r3, [pc, #72]	; (80087a8 <USBH_LL_Init+0x74>)
 8008760:	2208      	movs	r2, #8
 8008762:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008764:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <USBH_LL_Init+0x74>)
 8008766:	2201      	movs	r2, #1
 8008768:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800876a:	4b0f      	ldr	r3, [pc, #60]	; (80087a8 <USBH_LL_Init+0x74>)
 800876c:	2200      	movs	r2, #0
 800876e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008770:	4b0d      	ldr	r3, [pc, #52]	; (80087a8 <USBH_LL_Init+0x74>)
 8008772:	2202      	movs	r2, #2
 8008774:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008776:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <USBH_LL_Init+0x74>)
 8008778:	2200      	movs	r2, #0
 800877a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800877c:	480a      	ldr	r0, [pc, #40]	; (80087a8 <USBH_LL_Init+0x74>)
 800877e:	f7f9 fcf4 	bl	800216a <HAL_HCD_Init>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008788:	f7f8 feaa 	bl	80014e0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800878c:	4806      	ldr	r0, [pc, #24]	; (80087a8 <USBH_LL_Init+0x74>)
 800878e:	f7fa f8c3 	bl	8002918 <HAL_HCD_GetCurrentFrame>
 8008792:	4603      	mov	r3, r0
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7ff fb2a 	bl	8007df0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20000638 	.word	0x20000638

080087ac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fa f840 	bl	8002848 <HAL_HCD_Start>
 80087c8:	4603      	mov	r3, r0
 80087ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 f90e 	bl	80089f0 <USBH_Get_USB_Status>
 80087d4:	4603      	mov	r3, r0
 80087d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b084      	sub	sp, #16
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fa f848 	bl	800288e <HAL_HCD_Stop>
 80087fe:	4603      	mov	r3, r0
 8008800:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	4618      	mov	r0, r3
 8008806:	f000 f8f3 	bl	80089f0 <USBH_Get_USB_Status>
 800880a:	4603      	mov	r3, r0
 800880c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800880e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	460b      	mov	r3, r1
 8008822:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800882a:	78fa      	ldrb	r2, [r7, #3]
 800882c:	4611      	mov	r1, r2
 800882e:	4618      	mov	r0, r3
 8008830:	f7fa f85e 	bl	80028f0 <HAL_HCD_HC_GetXferCount>
 8008834:	4603      	mov	r3, r0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800883e:	b590      	push	{r4, r7, lr}
 8008840:	b089      	sub	sp, #36	; 0x24
 8008842:	af04      	add	r7, sp, #16
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	4608      	mov	r0, r1
 8008848:	4611      	mov	r1, r2
 800884a:	461a      	mov	r2, r3
 800884c:	4603      	mov	r3, r0
 800884e:	70fb      	strb	r3, [r7, #3]
 8008850:	460b      	mov	r3, r1
 8008852:	70bb      	strb	r3, [r7, #2]
 8008854:	4613      	mov	r3, r2
 8008856:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008866:	787c      	ldrb	r4, [r7, #1]
 8008868:	78ba      	ldrb	r2, [r7, #2]
 800886a:	78f9      	ldrb	r1, [r7, #3]
 800886c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800886e:	9302      	str	r3, [sp, #8]
 8008870:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008874:	9301      	str	r3, [sp, #4]
 8008876:	f897 3020 	ldrb.w	r3, [r7, #32]
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	4623      	mov	r3, r4
 800887e:	f7f9 fcd6 	bl	800222e <HAL_HCD_HC_Init>
 8008882:	4603      	mov	r3, r0
 8008884:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008886:	7bfb      	ldrb	r3, [r7, #15]
 8008888:	4618      	mov	r0, r3
 800888a:	f000 f8b1 	bl	80089f0 <USBH_Get_USB_Status>
 800888e:	4603      	mov	r3, r0
 8008890:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008892:	7bbb      	ldrb	r3, [r7, #14]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	bd90      	pop	{r4, r7, pc}

0800889c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088b6:	78fa      	ldrb	r2, [r7, #3]
 80088b8:	4611      	mov	r1, r2
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7f9 fd46 	bl	800234c <HAL_HCD_HC_Halt>
 80088c0:	4603      	mov	r3, r0
 80088c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 f892 	bl	80089f0 <USBH_Get_USB_Status>
 80088cc:	4603      	mov	r3, r0
 80088ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80088da:	b590      	push	{r4, r7, lr}
 80088dc:	b089      	sub	sp, #36	; 0x24
 80088de:	af04      	add	r7, sp, #16
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	4608      	mov	r0, r1
 80088e4:	4611      	mov	r1, r2
 80088e6:	461a      	mov	r2, r3
 80088e8:	4603      	mov	r3, r0
 80088ea:	70fb      	strb	r3, [r7, #3]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70bb      	strb	r3, [r7, #2]
 80088f0:	4613      	mov	r3, r2
 80088f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008902:	787c      	ldrb	r4, [r7, #1]
 8008904:	78ba      	ldrb	r2, [r7, #2]
 8008906:	78f9      	ldrb	r1, [r7, #3]
 8008908:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800890c:	9303      	str	r3, [sp, #12]
 800890e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008910:	9302      	str	r3, [sp, #8]
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	9301      	str	r3, [sp, #4]
 8008916:	f897 3020 	ldrb.w	r3, [r7, #32]
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	4623      	mov	r3, r4
 800891e:	f7f9 fd39 	bl	8002394 <HAL_HCD_HC_SubmitRequest>
 8008922:	4603      	mov	r3, r0
 8008924:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	4618      	mov	r0, r3
 800892a:	f000 f861 	bl	80089f0 <USBH_Get_USB_Status>
 800892e:	4603      	mov	r3, r0
 8008930:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008932:	7bbb      	ldrb	r3, [r7, #14]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	bd90      	pop	{r4, r7, pc}

0800893c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	460b      	mov	r3, r1
 8008946:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800894e:	78fa      	ldrb	r2, [r7, #3]
 8008950:	4611      	mov	r1, r2
 8008952:	4618      	mov	r0, r3
 8008954:	f7f9 ffb8 	bl	80028c8 <HAL_HCD_HC_GetURBState>
 8008958:	4603      	mov	r3, r0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b082      	sub	sp, #8
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008974:	2b01      	cmp	r3, #1
 8008976:	d103      	bne.n	8008980 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008978:	78fb      	ldrb	r3, [r7, #3]
 800897a:	4618      	mov	r0, r3
 800897c:	f000 f864 	bl	8008a48 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008980:	20c8      	movs	r0, #200	; 0xc8
 8008982:	f7f9 f8ed 	bl	8001b60 <HAL_Delay>
  return USBH_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	70fb      	strb	r3, [r7, #3]
 800899c:	4613      	mov	r3, r2
 800899e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089a6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80089a8:	78fb      	ldrb	r3, [r7, #3]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	212c      	movs	r1, #44	; 0x2c
 80089ae:	fb01 f303 	mul.w	r3, r1, r3
 80089b2:	4413      	add	r3, r2
 80089b4:	333b      	adds	r3, #59	; 0x3b
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d009      	beq.n	80089d0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80089bc:	78fb      	ldrb	r3, [r7, #3]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	212c      	movs	r1, #44	; 0x2c
 80089c2:	fb01 f303 	mul.w	r3, r1, r3
 80089c6:	4413      	add	r3, r2
 80089c8:	3354      	adds	r3, #84	; 0x54
 80089ca:	78ba      	ldrb	r2, [r7, #2]
 80089cc:	701a      	strb	r2, [r3, #0]
 80089ce:	e008      	b.n	80089e2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80089d0:	78fb      	ldrb	r3, [r7, #3]
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	212c      	movs	r1, #44	; 0x2c
 80089d6:	fb01 f303 	mul.w	r3, r1, r3
 80089da:	4413      	add	r3, r2
 80089dc:	3355      	adds	r3, #85	; 0x55
 80089de:	78ba      	ldrb	r2, [r7, #2]
 80089e0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	4603      	mov	r3, r0
 80089f8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089fe:	79fb      	ldrb	r3, [r7, #7]
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d817      	bhi.n	8008a34 <USBH_Get_USB_Status+0x44>
 8008a04:	a201      	add	r2, pc, #4	; (adr r2, 8008a0c <USBH_Get_USB_Status+0x1c>)
 8008a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0a:	bf00      	nop
 8008a0c:	08008a1d 	.word	0x08008a1d
 8008a10:	08008a23 	.word	0x08008a23
 8008a14:	08008a29 	.word	0x08008a29
 8008a18:	08008a2f 	.word	0x08008a2f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a20:	e00b      	b.n	8008a3a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008a22:	2302      	movs	r3, #2
 8008a24:	73fb      	strb	r3, [r7, #15]
    break;
 8008a26:	e008      	b.n	8008a3a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a2c:	e005      	b.n	8008a3a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008a2e:	2302      	movs	r3, #2
 8008a30:	73fb      	strb	r3, [r7, #15]
    break;
 8008a32:	e002      	b.n	8008a3a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008a34:	2302      	movs	r3, #2
 8008a36:	73fb      	strb	r3, [r7, #15]
    break;
 8008a38:	bf00      	nop
  }
  return usb_status;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008a52:	79fb      	ldrb	r3, [r7, #7]
 8008a54:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008a56:	79fb      	ldrb	r3, [r7, #7]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d102      	bne.n	8008a62 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	73fb      	strb	r3, [r7, #15]
 8008a60:	e001      	b.n	8008a66 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008a62:	2300      	movs	r3, #0
 8008a64:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	2101      	movs	r1, #1
 8008a6c:	4803      	ldr	r0, [pc, #12]	; (8008a7c <MX_DriverVbusFS+0x34>)
 8008a6e:	f7f9 fb49 	bl	8002104 <HAL_GPIO_WritePin>
}
 8008a72:	bf00      	nop
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	40020800 	.word	0x40020800

08008a80 <__errno>:
 8008a80:	4b01      	ldr	r3, [pc, #4]	; (8008a88 <__errno+0x8>)
 8008a82:	6818      	ldr	r0, [r3, #0]
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	20000034 	.word	0x20000034

08008a8c <__libc_init_array>:
 8008a8c:	b570      	push	{r4, r5, r6, lr}
 8008a8e:	4d0d      	ldr	r5, [pc, #52]	; (8008ac4 <__libc_init_array+0x38>)
 8008a90:	4c0d      	ldr	r4, [pc, #52]	; (8008ac8 <__libc_init_array+0x3c>)
 8008a92:	1b64      	subs	r4, r4, r5
 8008a94:	10a4      	asrs	r4, r4, #2
 8008a96:	2600      	movs	r6, #0
 8008a98:	42a6      	cmp	r6, r4
 8008a9a:	d109      	bne.n	8008ab0 <__libc_init_array+0x24>
 8008a9c:	4d0b      	ldr	r5, [pc, #44]	; (8008acc <__libc_init_array+0x40>)
 8008a9e:	4c0c      	ldr	r4, [pc, #48]	; (8008ad0 <__libc_init_array+0x44>)
 8008aa0:	f000 f8f8 	bl	8008c94 <_init>
 8008aa4:	1b64      	subs	r4, r4, r5
 8008aa6:	10a4      	asrs	r4, r4, #2
 8008aa8:	2600      	movs	r6, #0
 8008aaa:	42a6      	cmp	r6, r4
 8008aac:	d105      	bne.n	8008aba <__libc_init_array+0x2e>
 8008aae:	bd70      	pop	{r4, r5, r6, pc}
 8008ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ab4:	4798      	blx	r3
 8008ab6:	3601      	adds	r6, #1
 8008ab8:	e7ee      	b.n	8008a98 <__libc_init_array+0xc>
 8008aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8008abe:	4798      	blx	r3
 8008ac0:	3601      	adds	r6, #1
 8008ac2:	e7f2      	b.n	8008aaa <__libc_init_array+0x1e>
 8008ac4:	08008f44 	.word	0x08008f44
 8008ac8:	08008f44 	.word	0x08008f44
 8008acc:	08008f44 	.word	0x08008f44
 8008ad0:	08008f48 	.word	0x08008f48

08008ad4 <malloc>:
 8008ad4:	4b02      	ldr	r3, [pc, #8]	; (8008ae0 <malloc+0xc>)
 8008ad6:	4601      	mov	r1, r0
 8008ad8:	6818      	ldr	r0, [r3, #0]
 8008ada:	f000 b863 	b.w	8008ba4 <_malloc_r>
 8008ade:	bf00      	nop
 8008ae0:	20000034 	.word	0x20000034

08008ae4 <free>:
 8008ae4:	4b02      	ldr	r3, [pc, #8]	; (8008af0 <free+0xc>)
 8008ae6:	4601      	mov	r1, r0
 8008ae8:	6818      	ldr	r0, [r3, #0]
 8008aea:	f000 b80b 	b.w	8008b04 <_free_r>
 8008aee:	bf00      	nop
 8008af0:	20000034 	.word	0x20000034

08008af4 <memset>:
 8008af4:	4402      	add	r2, r0
 8008af6:	4603      	mov	r3, r0
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d100      	bne.n	8008afe <memset+0xa>
 8008afc:	4770      	bx	lr
 8008afe:	f803 1b01 	strb.w	r1, [r3], #1
 8008b02:	e7f9      	b.n	8008af8 <memset+0x4>

08008b04 <_free_r>:
 8008b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b06:	2900      	cmp	r1, #0
 8008b08:	d048      	beq.n	8008b9c <_free_r+0x98>
 8008b0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b0e:	9001      	str	r0, [sp, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f1a1 0404 	sub.w	r4, r1, #4
 8008b16:	bfb8      	it	lt
 8008b18:	18e4      	addlt	r4, r4, r3
 8008b1a:	f000 f8ad 	bl	8008c78 <__malloc_lock>
 8008b1e:	4a20      	ldr	r2, [pc, #128]	; (8008ba0 <_free_r+0x9c>)
 8008b20:	9801      	ldr	r0, [sp, #4]
 8008b22:	6813      	ldr	r3, [r2, #0]
 8008b24:	4615      	mov	r5, r2
 8008b26:	b933      	cbnz	r3, 8008b36 <_free_r+0x32>
 8008b28:	6063      	str	r3, [r4, #4]
 8008b2a:	6014      	str	r4, [r2, #0]
 8008b2c:	b003      	add	sp, #12
 8008b2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b32:	f000 b8a7 	b.w	8008c84 <__malloc_unlock>
 8008b36:	42a3      	cmp	r3, r4
 8008b38:	d90b      	bls.n	8008b52 <_free_r+0x4e>
 8008b3a:	6821      	ldr	r1, [r4, #0]
 8008b3c:	1862      	adds	r2, r4, r1
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	bf04      	itt	eq
 8008b42:	681a      	ldreq	r2, [r3, #0]
 8008b44:	685b      	ldreq	r3, [r3, #4]
 8008b46:	6063      	str	r3, [r4, #4]
 8008b48:	bf04      	itt	eq
 8008b4a:	1852      	addeq	r2, r2, r1
 8008b4c:	6022      	streq	r2, [r4, #0]
 8008b4e:	602c      	str	r4, [r5, #0]
 8008b50:	e7ec      	b.n	8008b2c <_free_r+0x28>
 8008b52:	461a      	mov	r2, r3
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	b10b      	cbz	r3, 8008b5c <_free_r+0x58>
 8008b58:	42a3      	cmp	r3, r4
 8008b5a:	d9fa      	bls.n	8008b52 <_free_r+0x4e>
 8008b5c:	6811      	ldr	r1, [r2, #0]
 8008b5e:	1855      	adds	r5, r2, r1
 8008b60:	42a5      	cmp	r5, r4
 8008b62:	d10b      	bne.n	8008b7c <_free_r+0x78>
 8008b64:	6824      	ldr	r4, [r4, #0]
 8008b66:	4421      	add	r1, r4
 8008b68:	1854      	adds	r4, r2, r1
 8008b6a:	42a3      	cmp	r3, r4
 8008b6c:	6011      	str	r1, [r2, #0]
 8008b6e:	d1dd      	bne.n	8008b2c <_free_r+0x28>
 8008b70:	681c      	ldr	r4, [r3, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	6053      	str	r3, [r2, #4]
 8008b76:	4421      	add	r1, r4
 8008b78:	6011      	str	r1, [r2, #0]
 8008b7a:	e7d7      	b.n	8008b2c <_free_r+0x28>
 8008b7c:	d902      	bls.n	8008b84 <_free_r+0x80>
 8008b7e:	230c      	movs	r3, #12
 8008b80:	6003      	str	r3, [r0, #0]
 8008b82:	e7d3      	b.n	8008b2c <_free_r+0x28>
 8008b84:	6825      	ldr	r5, [r4, #0]
 8008b86:	1961      	adds	r1, r4, r5
 8008b88:	428b      	cmp	r3, r1
 8008b8a:	bf04      	itt	eq
 8008b8c:	6819      	ldreq	r1, [r3, #0]
 8008b8e:	685b      	ldreq	r3, [r3, #4]
 8008b90:	6063      	str	r3, [r4, #4]
 8008b92:	bf04      	itt	eq
 8008b94:	1949      	addeq	r1, r1, r5
 8008b96:	6021      	streq	r1, [r4, #0]
 8008b98:	6054      	str	r4, [r2, #4]
 8008b9a:	e7c7      	b.n	8008b2c <_free_r+0x28>
 8008b9c:	b003      	add	sp, #12
 8008b9e:	bd30      	pop	{r4, r5, pc}
 8008ba0:	200000c0 	.word	0x200000c0

08008ba4 <_malloc_r>:
 8008ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba6:	1ccd      	adds	r5, r1, #3
 8008ba8:	f025 0503 	bic.w	r5, r5, #3
 8008bac:	3508      	adds	r5, #8
 8008bae:	2d0c      	cmp	r5, #12
 8008bb0:	bf38      	it	cc
 8008bb2:	250c      	movcc	r5, #12
 8008bb4:	2d00      	cmp	r5, #0
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	db01      	blt.n	8008bbe <_malloc_r+0x1a>
 8008bba:	42a9      	cmp	r1, r5
 8008bbc:	d903      	bls.n	8008bc6 <_malloc_r+0x22>
 8008bbe:	230c      	movs	r3, #12
 8008bc0:	6033      	str	r3, [r6, #0]
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bc6:	f000 f857 	bl	8008c78 <__malloc_lock>
 8008bca:	4921      	ldr	r1, [pc, #132]	; (8008c50 <_malloc_r+0xac>)
 8008bcc:	680a      	ldr	r2, [r1, #0]
 8008bce:	4614      	mov	r4, r2
 8008bd0:	b99c      	cbnz	r4, 8008bfa <_malloc_r+0x56>
 8008bd2:	4f20      	ldr	r7, [pc, #128]	; (8008c54 <_malloc_r+0xb0>)
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	b923      	cbnz	r3, 8008be2 <_malloc_r+0x3e>
 8008bd8:	4621      	mov	r1, r4
 8008bda:	4630      	mov	r0, r6
 8008bdc:	f000 f83c 	bl	8008c58 <_sbrk_r>
 8008be0:	6038      	str	r0, [r7, #0]
 8008be2:	4629      	mov	r1, r5
 8008be4:	4630      	mov	r0, r6
 8008be6:	f000 f837 	bl	8008c58 <_sbrk_r>
 8008bea:	1c43      	adds	r3, r0, #1
 8008bec:	d123      	bne.n	8008c36 <_malloc_r+0x92>
 8008bee:	230c      	movs	r3, #12
 8008bf0:	6033      	str	r3, [r6, #0]
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f000 f846 	bl	8008c84 <__malloc_unlock>
 8008bf8:	e7e3      	b.n	8008bc2 <_malloc_r+0x1e>
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	1b5b      	subs	r3, r3, r5
 8008bfe:	d417      	bmi.n	8008c30 <_malloc_r+0x8c>
 8008c00:	2b0b      	cmp	r3, #11
 8008c02:	d903      	bls.n	8008c0c <_malloc_r+0x68>
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	441c      	add	r4, r3
 8008c08:	6025      	str	r5, [r4, #0]
 8008c0a:	e004      	b.n	8008c16 <_malloc_r+0x72>
 8008c0c:	6863      	ldr	r3, [r4, #4]
 8008c0e:	42a2      	cmp	r2, r4
 8008c10:	bf0c      	ite	eq
 8008c12:	600b      	streq	r3, [r1, #0]
 8008c14:	6053      	strne	r3, [r2, #4]
 8008c16:	4630      	mov	r0, r6
 8008c18:	f000 f834 	bl	8008c84 <__malloc_unlock>
 8008c1c:	f104 000b 	add.w	r0, r4, #11
 8008c20:	1d23      	adds	r3, r4, #4
 8008c22:	f020 0007 	bic.w	r0, r0, #7
 8008c26:	1ac2      	subs	r2, r0, r3
 8008c28:	d0cc      	beq.n	8008bc4 <_malloc_r+0x20>
 8008c2a:	1a1b      	subs	r3, r3, r0
 8008c2c:	50a3      	str	r3, [r4, r2]
 8008c2e:	e7c9      	b.n	8008bc4 <_malloc_r+0x20>
 8008c30:	4622      	mov	r2, r4
 8008c32:	6864      	ldr	r4, [r4, #4]
 8008c34:	e7cc      	b.n	8008bd0 <_malloc_r+0x2c>
 8008c36:	1cc4      	adds	r4, r0, #3
 8008c38:	f024 0403 	bic.w	r4, r4, #3
 8008c3c:	42a0      	cmp	r0, r4
 8008c3e:	d0e3      	beq.n	8008c08 <_malloc_r+0x64>
 8008c40:	1a21      	subs	r1, r4, r0
 8008c42:	4630      	mov	r0, r6
 8008c44:	f000 f808 	bl	8008c58 <_sbrk_r>
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d1dd      	bne.n	8008c08 <_malloc_r+0x64>
 8008c4c:	e7cf      	b.n	8008bee <_malloc_r+0x4a>
 8008c4e:	bf00      	nop
 8008c50:	200000c0 	.word	0x200000c0
 8008c54:	200000c4 	.word	0x200000c4

08008c58 <_sbrk_r>:
 8008c58:	b538      	push	{r3, r4, r5, lr}
 8008c5a:	4d06      	ldr	r5, [pc, #24]	; (8008c74 <_sbrk_r+0x1c>)
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	4604      	mov	r4, r0
 8008c60:	4608      	mov	r0, r1
 8008c62:	602b      	str	r3, [r5, #0]
 8008c64:	f7f8 fe98 	bl	8001998 <_sbrk>
 8008c68:	1c43      	adds	r3, r0, #1
 8008c6a:	d102      	bne.n	8008c72 <_sbrk_r+0x1a>
 8008c6c:	682b      	ldr	r3, [r5, #0]
 8008c6e:	b103      	cbz	r3, 8008c72 <_sbrk_r+0x1a>
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	bd38      	pop	{r3, r4, r5, pc}
 8008c74:	2000093c 	.word	0x2000093c

08008c78 <__malloc_lock>:
 8008c78:	4801      	ldr	r0, [pc, #4]	; (8008c80 <__malloc_lock+0x8>)
 8008c7a:	f000 b809 	b.w	8008c90 <__retarget_lock_acquire_recursive>
 8008c7e:	bf00      	nop
 8008c80:	20000944 	.word	0x20000944

08008c84 <__malloc_unlock>:
 8008c84:	4801      	ldr	r0, [pc, #4]	; (8008c8c <__malloc_unlock+0x8>)
 8008c86:	f000 b804 	b.w	8008c92 <__retarget_lock_release_recursive>
 8008c8a:	bf00      	nop
 8008c8c:	20000944 	.word	0x20000944

08008c90 <__retarget_lock_acquire_recursive>:
 8008c90:	4770      	bx	lr

08008c92 <__retarget_lock_release_recursive>:
 8008c92:	4770      	bx	lr

08008c94 <_init>:
 8008c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c96:	bf00      	nop
 8008c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9a:	bc08      	pop	{r3}
 8008c9c:	469e      	mov	lr, r3
 8008c9e:	4770      	bx	lr

08008ca0 <_fini>:
 8008ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca2:	bf00      	nop
 8008ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca6:	bc08      	pop	{r3}
 8008ca8:	469e      	mov	lr, r3
 8008caa:	4770      	bx	lr
