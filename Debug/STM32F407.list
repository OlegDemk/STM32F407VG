
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b128  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800b2b0  0800b2b0  0001b2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2cc  0800b2cc  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2cc  0800b2cc  0001b2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2d4  0800b2d4  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2d4  0800b2d4  0001b2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2d8  0800b2d8  0001b2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800b2dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d4  200000a0  0800b37c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a74  0800b37c  00020a74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024d18  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dcb  00000000  00000000  00044de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  00049bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001718  00000000  00000000  0004b4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d97  00000000  00000000  0004cbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002385f  00000000  00000000  0007295f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4fea  00000000  00000000  000961be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016b1a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a88  00000000  00000000  0016b1fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b298 	.word	0x0800b298

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	0800b298 	.word	0x0800b298

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	char digith = 0;;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 80004ca:	f000 f853 	bl	8000574 <read_one_digit_from_keyboard>
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b23      	cmp	r3, #35	; 0x23
 80004d6:	d10a      	bne.n	80004ee <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 80004d8:	221e      	movs	r2, #30
 80004da:	2100      	movs	r1, #0
 80004dc:	4824      	ldr	r0, [pc, #144]	; (8000570 <read_digits+0xb0>)
 80004de:	f00a fe0b 	bl	800b0f8 <memset>
		keyboard.read_digits_position = 0;
 80004e2:	4b23      	ldr	r3, [pc, #140]	; (8000570 <read_digits+0xb0>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 80004e8:	4b21      	ldr	r3, [pc, #132]	; (8000570 <read_digits+0xb0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	2b2a      	cmp	r3, #42	; 0x2a
 80004f2:	d109      	bne.n	8000508 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 80004f4:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <read_digits+0xb0>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 80004fc:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <read_digits+0xb0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <read_digits+0xb0>)
 8000504:	2200      	movs	r2, #0
 8000506:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d028      	beq.n	8000560 <read_digits+0xa0>
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2b23      	cmp	r3, #35	; 0x23
 8000512:	d025      	beq.n	8000560 <read_digits+0xa0>
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	2b2a      	cmp	r3, #42	; 0x2a
 8000518:	d022      	beq.n	8000560 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <read_digits+0xb0>)
 800051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051e:	4a14      	ldr	r2, [pc, #80]	; (8000570 <read_digits+0xb0>)
 8000520:	7f92      	ldrb	r2, [r2, #30]
 8000522:	4293      	cmp	r3, r2
 8000524:	dc11      	bgt.n	800054a <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <read_digits+0xb0>)
 8000528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800052a:	4911      	ldr	r1, [pc, #68]	; (8000570 <read_digits+0xb0>)
 800052c:	79fa      	ldrb	r2, [r7, #7]
 800052e:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <read_digits+0xb0>)
 8000532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000534:	3301      	adds	r3, #1
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <read_digits+0xb0>)
 8000538:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <read_digits+0xb0>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <read_digits+0xb0>)
 8000544:	2201      	movs	r2, #1
 8000546:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000548:	e00e      	b.n	8000568 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <read_digits+0xb0>)
 800054c:	2201      	movs	r2, #1
 800054e:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <read_digits+0xb0>)
 8000554:	2200      	movs	r2, #0
 8000556:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <read_digits+0xb0>)
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800055e:	e003      	b.n	8000568 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <read_digits+0xb0>)
 8000562:	2200      	movs	r2, #0
 8000564:	77da      	strb	r2, [r3, #31]
	}
}
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200000d4 	.word	0x200000d4

08000574 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
	char digit = '\0';
 800057a:	2300      	movs	r3, #0
 800057c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000584:	48cf      	ldr	r0, [pc, #828]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000586:	f002 fa07 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000590:	48cc      	ldr	r0, [pc, #816]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000592:	f002 fa01 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059c:	48c9      	ldr	r0, [pc, #804]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800059e:	f002 f9fb 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	48c6      	ldr	r0, [pc, #792]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005aa:	f002 f9f5 	bl	8002998 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80005ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b2:	48c5      	ldr	r0, [pc, #788]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80005b4:	f002 f9d8 	bl	8002968 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d169      	bne.n	8000692 <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c4:	48bf      	ldr	r0, [pc, #764]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005c6:	f002 f9e7 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	48bc      	ldr	r0, [pc, #752]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005d2:	f002 f9e1 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005dc:	48b9      	ldr	r0, [pc, #740]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005de:	f002 f9db 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	48b6      	ldr	r0, [pc, #728]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005ea:	f002 f9d5 	bl	8002998 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80005ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f2:	48b5      	ldr	r0, [pc, #724]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80005f4:	f002 f9b8 	bl	8002968 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d101      	bne.n	8000602 <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 80005fe:	2331      	movs	r3, #49	; 0x31
 8000600:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000608:	48ae      	ldr	r0, [pc, #696]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800060a:	f002 f9c5 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000614:	48ab      	ldr	r0, [pc, #684]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000616:	f002 f9bf 	bl	8002998 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800061a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061e:	48aa      	ldr	r0, [pc, #680]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000620:	f002 f9a2 	bl	8002968 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d101      	bne.n	800062e <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 800062a:	2334      	movs	r3, #52	; 0x34
 800062c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000634:	48a3      	ldr	r0, [pc, #652]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000636:	f002 f9af 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000640:	48a0      	ldr	r0, [pc, #640]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000642:	f002 f9a9 	bl	8002998 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000646:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800064a:	489f      	ldr	r0, [pc, #636]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 800064c:	f002 f98c 	bl	8002968 <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d101      	bne.n	800065a <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 8000656:	2337      	movs	r3, #55	; 0x37
 8000658:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000660:	4898      	ldr	r0, [pc, #608]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000662:	f002 f999 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	4895      	ldr	r0, [pc, #596]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800066e:	f002 f993 	bl	8002998 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000676:	4894      	ldr	r0, [pc, #592]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000678:	f002 f976 	bl	8002968 <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d101      	bne.n	8000686 <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 8000682:	232a      	movs	r3, #42	; 0x2a
 8000684:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	488d      	ldr	r0, [pc, #564]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800068e:	f002 f983 	bl	8002998 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000698:	488a      	ldr	r0, [pc, #552]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800069a:	f002 f97d 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a4:	4887      	ldr	r0, [pc, #540]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006a6:	f002 f977 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b0:	4884      	ldr	r0, [pc, #528]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006b2:	f002 f971 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4881      	ldr	r0, [pc, #516]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006be:	f002 f96b 	bl	8002998 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 80006c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c6:	4880      	ldr	r0, [pc, #512]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80006c8:	f002 f94e 	bl	8002968 <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d169      	bne.n	80007a6 <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d8:	487a      	ldr	r0, [pc, #488]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006da:	f002 f95d 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e4:	4877      	ldr	r0, [pc, #476]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006e6:	f002 f957 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f0:	4874      	ldr	r0, [pc, #464]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006f2:	f002 f951 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fc:	4871      	ldr	r0, [pc, #452]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006fe:	f002 f94b 	bl	8002998 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000702:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000706:	4870      	ldr	r0, [pc, #448]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000708:	f002 f92e 	bl	8002968 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 8000712:	2332      	movs	r3, #50	; 0x32
 8000714:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071c:	4869      	ldr	r0, [pc, #420]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800071e:	f002 f93b 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000728:	4866      	ldr	r0, [pc, #408]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800072a:	f002 f935 	bl	8002998 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800072e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000732:	4865      	ldr	r0, [pc, #404]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000734:	f002 f918 	bl	8002968 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 800073e:	2335      	movs	r3, #53	; 0x35
 8000740:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000748:	485e      	ldr	r0, [pc, #376]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800074a:	f002 f925 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000754:	485b      	ldr	r0, [pc, #364]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000756:	f002 f91f 	bl	8002998 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800075a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075e:	485a      	ldr	r0, [pc, #360]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000760:	f002 f902 	bl	8002968 <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 800076a:	2338      	movs	r3, #56	; 0x38
 800076c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000774:	4853      	ldr	r0, [pc, #332]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000776:	f002 f90f 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000780:	4850      	ldr	r0, [pc, #320]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000782:	f002 f909 	bl	8002998 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078a:	484f      	ldr	r0, [pc, #316]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 800078c:	f002 f8ec 	bl	8002968 <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 8000796:	2330      	movs	r3, #48	; 0x30
 8000798:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	4848      	ldr	r0, [pc, #288]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007a2:	f002 f8f9 	bl	8002998 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	4845      	ldr	r0, [pc, #276]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ae:	f002 f8f3 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b8:	4842      	ldr	r0, [pc, #264]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ba:	f002 f8ed 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c4:	483f      	ldr	r0, [pc, #252]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007c6:	f002 f8e7 	bl	8002998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d0:	483c      	ldr	r0, [pc, #240]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007d2:	f002 f8e1 	bl	8002998 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 80007d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007da:	483c      	ldr	r0, [pc, #240]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 80007dc:	f002 f8c4 	bl	8002968 <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d169      	bne.n	80008ba <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ec:	4835      	ldr	r0, [pc, #212]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ee:	f002 f8d3 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f8:	4832      	ldr	r0, [pc, #200]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007fa:	f002 f8cd 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000804:	482f      	ldr	r0, [pc, #188]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000806:	f002 f8c7 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000810:	482c      	ldr	r0, [pc, #176]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000812:	f002 f8c1 	bl	8002998 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8000816:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800081a:	482c      	ldr	r0, [pc, #176]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 800081c:	f002 f8a4 	bl	8002968 <HAL_GPIO_ReadPin>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 8000826:	2333      	movs	r3, #51	; 0x33
 8000828:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000830:	4824      	ldr	r0, [pc, #144]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000832:	f002 f8b1 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083c:	4821      	ldr	r0, [pc, #132]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800083e:	f002 f8ab 	bl	8002998 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8000842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000846:	4821      	ldr	r0, [pc, #132]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 8000848:	f002 f88e 	bl	8002968 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d101      	bne.n	8000856 <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 8000852:	2336      	movs	r3, #54	; 0x36
 8000854:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085c:	4819      	ldr	r0, [pc, #100]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800085e:	f002 f89b 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000868:	4816      	ldr	r0, [pc, #88]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800086a:	f002 f895 	bl	8002998 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800086e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000872:	4816      	ldr	r0, [pc, #88]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 8000874:	f002 f878 	bl	8002968 <HAL_GPIO_ReadPin>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d101      	bne.n	8000882 <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 800087e:	2339      	movs	r3, #57	; 0x39
 8000880:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000888:	480e      	ldr	r0, [pc, #56]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800088a:	f002 f885 	bl	8002998 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000894:	480b      	ldr	r0, [pc, #44]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000896:	f002 f87f 	bl	8002998 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800089a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 80008a0:	f002 f862 	bl	8002968 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d101      	bne.n	80008ae <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 80008aa:	2323      	movs	r3, #35	; 0x23
 80008ac:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80008b6:	f002 f86f 	bl	8002998 <HAL_GPIO_WritePin>
	}
	return digit;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40020c00 	.word	0x40020c00
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40021000 	.word	0x40021000

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d6:	f001 fd03 	bl	80022e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008da:	f000 f871 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008de:	f000 fb23 	bl	8000f28 <MX_GPIO_Init>
  MX_I2S3_Init();
 80008e2:	f000 f957 	bl	8000b94 <MX_I2S3_Init>
  MX_SPI1_Init();
 80008e6:	f000 f999 	bl	8000c1c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80008ea:	f00a f8c3 	bl	800aa74 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80008ee:	f000 fa59 	bl	8000da4 <MX_TIM2_Init>
  MX_SPI2_Init();
 80008f2:	f000 f9c9 	bl	8000c88 <MX_SPI2_Init>
  MX_RNG_Init();
 80008f6:	f000 f97d 	bl	8000bf4 <MX_RNG_Init>
  MX_TIM3_Init();
 80008fa:	f000 faa1 	bl	8000e40 <MX_TIM3_Init>
  MX_TIM1_Init();
 80008fe:	f000 f9f9 	bl	8000cf4 <MX_TIM1_Init>
  MX_I2C3_Init();
 8000902:	f000 f919 	bl	8000b38 <MX_I2C3_Init>
  MX_I2C2_Init();
 8000906:	f000 f8e9 	bl	8000adc <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800090a:	f000 f8db 	bl	8000ac4 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 800090e:	f001 f977 	bl	8001c00 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 8000912:	2000      	movs	r0, #0
 8000914:	f001 fb1a 	bl	8001f4c <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 8000918:	2003      	movs	r0, #3
 800091a:	f001 f913 	bl	8001b44 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 800091e:	2000      	movs	r0, #0
 8000920:	f001 fb14 	bl	8001f4c <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 8000924:	2364      	movs	r3, #100	; 0x64
 8000926:	60fb      	str	r3, [r7, #12]
  speed_test_LCD(number_of_tests);
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	f001 fbfd 	bl	8002128 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 800092e:	2000      	movs	r0, #0
 8000930:	f001 fb0c 	bl	8001f4c <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 8000934:	481f      	ldr	r0, [pc, #124]	; (80009b4 <main+0xe4>)
 8000936:	f006 f963 	bl	8006c00 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800093a:	2100      	movs	r1, #0
 800093c:	481d      	ldr	r0, [pc, #116]	; (80009b4 <main+0xe4>)
 800093e:	f006 f9cf 	bl	8006ce0 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 8000942:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <main+0xe8>)
 8000944:	220a      	movs	r2, #10
 8000946:	779a      	strb	r2, [r3, #30]
    // 0x246				//  ????
    // 0x247				// MEMS
    // 0x255              //  ????

    // Read ID from BME280 ////////////////////////////////////////////////////////////////
    uint16_t STATUS=0;
 8000948:	2300      	movs	r3, #0
 800094a:	817b      	strh	r3, [r7, #10]
    uint16_t addres_devise = 0x76;   // BME280
 800094c:	2376      	movs	r3, #118	; 0x76
 800094e:	813b      	strh	r3, [r7, #8]
    uint16_t addr = 0xD0;
 8000950:	23d0      	movs	r3, #208	; 0xd0
 8000952:	80fb      	strh	r3, [r7, #6]
    uint8_t buff=0;         // Return 0x96 -> Dec 60
 8000954:	2300      	movs	r3, #0
 8000956:	717b      	strb	r3, [r7, #5]
    STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, 1, &buff, 1, 1000);
 8000958:	893b      	ldrh	r3, [r7, #8]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	b299      	uxth	r1, r3
 800095e:	88fa      	ldrh	r2, [r7, #6]
 8000960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000964:	9302      	str	r3, [sp, #8]
 8000966:	2301      	movs	r3, #1
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	1d7b      	adds	r3, r7, #5
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	2301      	movs	r3, #1
 8000970:	4812      	ldr	r0, [pc, #72]	; (80009bc <main+0xec>)
 8000972:	f003 feed 	bl	8004750 <HAL_I2C_Mem_Read>
 8000976:	4603      	mov	r3, r0
 8000978:	817b      	strh	r3, [r7, #10]
    /////////////////////////////////////////////////////////////////////////////////////////

    // Read ID from DS3231 ////////////////////////////////////////////////////////////////
    addres_devise = 0x68;            // DS3231
 800097a:	2368      	movs	r3, #104	; 0x68
 800097c:	813b      	strh	r3, [r7, #8]
    addr = 0x00;						// Read seconds register
 800097e:	2300      	movs	r3, #0
 8000980:	80fb      	strh	r3, [r7, #6]
    buff=0;
 8000982:	2300      	movs	r3, #0
 8000984:	717b      	strb	r3, [r7, #5]
    STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, 1, &buff, 1, 1000);
 8000986:	893b      	ldrh	r3, [r7, #8]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	b299      	uxth	r1, r3
 800098c:	88fa      	ldrh	r2, [r7, #6]
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	9302      	str	r3, [sp, #8]
 8000994:	2301      	movs	r3, #1
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	1d7b      	adds	r3, r7, #5
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2301      	movs	r3, #1
 800099e:	4807      	ldr	r0, [pc, #28]	; (80009bc <main+0xec>)
 80009a0:	f003 fed6 	bl	8004750 <HAL_I2C_Mem_Read>
 80009a4:	4603      	mov	r3, r0
 80009a6:	817b      	strh	r3, [r7, #10]
  while (1)
  {
	  /////////////////////////////////////////////////////////////////


	  I2C_3_scaner();
 80009a8:	f001 fc08 	bl	80021bc <I2C_3_scaner>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009ac:	f00a f888 	bl	800aac0 <MX_USB_HOST_Process>
  {
 80009b0:	e7fa      	b.n	80009a8 <main+0xd8>
 80009b2:	bf00      	nop
 80009b4:	200001fc 	.word	0x200001fc
 80009b8:	200000d4 	.word	0x200000d4
 80009bc:	200000fc 	.word	0x200000fc

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b098      	sub	sp, #96	; 0x60
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ca:	2230      	movs	r2, #48	; 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f00a fb92 	bl	800b0f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	4b31      	ldr	r3, [pc, #196]	; (8000abc <SystemClock_Config+0xfc>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a30      	ldr	r2, [pc, #192]	; (8000abc <SystemClock_Config+0xfc>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <SystemClock_Config+0xfc>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <SystemClock_Config+0x100>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a2a      	ldr	r2, [pc, #168]	; (8000ac0 <SystemClock_Config+0x100>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	4b28      	ldr	r3, [pc, #160]	; (8000ac0 <SystemClock_Config+0x100>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a34:	2302      	movs	r3, #2
 8000a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a3e:	2308      	movs	r3, #8
 8000a40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a42:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a46:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a4c:	2307      	movs	r3, #7
 8000a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a54:	4618      	mov	r0, r3
 8000a56:	f004 ffc5 	bl	80059e4 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a60:	f000 fbca 	bl	80011f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	230f      	movs	r3, #15
 8000a66:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	2105      	movs	r1, #5
 8000a82:	4618      	mov	r0, r3
 8000a84:	f005 fa26 	bl	8005ed4 <HAL_RCC_ClockConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a8e:	f000 fbb3 	bl	80011f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a92:	2301      	movs	r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a96:	23c0      	movs	r3, #192	; 0xc0
 8000a98:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f005 fbfe 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000aae:	f000 fba3 	bl	80011f8 <Error_Handler>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3760      	adds	r7, #96	; 0x60
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000

08000ac4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2100      	movs	r1, #0
 8000acc:	201c      	movs	r0, #28
 8000ace:	f001 fd78 	bl	80025c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ad2:	201c      	movs	r0, #28
 8000ad4:	f001 fd91 	bl	80025fa <HAL_NVIC_EnableIRQ>
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000ae2:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <MX_I2C2_Init+0x54>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000ae8:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <MX_I2C2_Init+0x58>)
 8000aea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000afa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000afe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000b1a:	f003 fcd5 	bl	80044c8 <HAL_I2C_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b24:	f000 fb68 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200001a8 	.word	0x200001a8
 8000b30:	40005800 	.word	0x40005800
 8000b34:	000186a0 	.word	0x000186a0

08000b38 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_I2C3_Init+0x50>)
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <MX_I2C3_Init+0x54>)
 8000b40:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_I2C3_Init+0x50>)
 8000b44:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <MX_I2C3_Init+0x58>)
 8000b46:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_I2C3_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_I2C3_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_I2C3_Init+0x50>)
 8000b56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_I2C3_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_I2C3_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MX_I2C3_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_I2C3_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_I2C3_Init+0x50>)
 8000b76:	f003 fca7 	bl	80044c8 <HAL_I2C_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b80:	f000 fb3a 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200000fc 	.word	0x200000fc
 8000b8c:	40005c00 	.word	0x40005c00
 8000b90:	000186a0 	.word	0x000186a0

08000b94 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_I2S3_Init+0x54>)
 8000b9a:	4a14      	ldr	r2, [pc, #80]	; (8000bec <MX_I2S3_Init+0x58>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_I2S3_Init+0x54>)
 8000ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_I2S3_Init+0x54>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_I2S3_Init+0x54>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_I2S3_Init+0x54>)
 8000bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_I2S3_Init+0x54>)
 8000bbc:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <MX_I2S3_Init+0x5c>)
 8000bbe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_I2S3_Init+0x54>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_I2S3_Init+0x54>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_I2S3_Init+0x54>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_I2S3_Init+0x54>)
 8000bd4:	f004 fa66 	bl	80050a4 <HAL_I2S_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000bde:	f000 fb0b 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000033c 	.word	0x2000033c
 8000bec:	40003c00 	.word	0x40003c00
 8000bf0:	00017700 	.word	0x00017700

08000bf4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_RNG_Init+0x20>)
 8000bfa:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <MX_RNG_Init+0x24>)
 8000bfc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_RNG_Init+0x20>)
 8000c00:	f005 fc90 	bl	8006524 <HAL_RNG_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000c0a:	f000 faf5 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000028c 	.word	0x2000028c
 8000c18:	50060800 	.word	0x50060800

08000c1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <MX_SPI1_Init+0x64>)
 8000c22:	4a18      	ldr	r2, [pc, #96]	; (8000c84 <MX_SPI1_Init+0x68>)
 8000c24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <MX_SPI1_Init+0x64>)
 8000c28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_SPI1_Init+0x64>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <MX_SPI1_Init+0x64>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_SPI1_Init+0x64>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_SPI1_Init+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_SPI1_Init+0x64>)
 8000c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_SPI1_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <MX_SPI1_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_SPI1_Init+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <MX_SPI1_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_SPI1_Init+0x64>)
 8000c68:	220a      	movs	r2, #10
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <MX_SPI1_Init+0x64>)
 8000c6e:	f005 fce7 	bl	8006640 <HAL_SPI_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c78:	f000 fabe 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2000029c 	.word	0x2000029c
 8000c84:	40013000 	.word	0x40013000

08000c88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_SPI2_Init+0x64>)
 8000c8e:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <MX_SPI2_Init+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_SPI2_Init+0x64>)
 8000c94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_SPI2_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_SPI2_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_SPI2_Init+0x64>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_SPI2_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_SPI2_Init+0x64>)
 8000cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_SPI2_Init+0x64>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <MX_SPI2_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_SPI2_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <MX_SPI2_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_SPI2_Init+0x64>)
 8000cd4:	220a      	movs	r2, #10
 8000cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <MX_SPI2_Init+0x64>)
 8000cda:	f005 fcb1 	bl	8006640 <HAL_SPI_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ce4:	f000 fa88 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000150 	.word	0x20000150
 8000cf0:	40003800 	.word	0x40003800

08000cf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2224      	movs	r2, #36	; 0x24
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f00a f9f8 	bl	800b0f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <MX_TIM1_Init+0xa8>)
 8000d12:	4a23      	ldr	r2, [pc, #140]	; (8000da0 <MX_TIM1_Init+0xac>)
 8000d14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <MX_TIM1_Init+0xa8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <MX_TIM1_Init+0xa8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <MX_TIM1_Init+0xa8>)
 8000d24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <MX_TIM1_Init+0xa8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_TIM1_Init+0xa8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d36:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <MX_TIM1_Init+0xa8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d44:	2301      	movs	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d54:	2301      	movs	r3, #1
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	480d      	ldr	r0, [pc, #52]	; (8000d9c <MX_TIM1_Init+0xa8>)
 8000d68:	f006 f921 	bl	8006fae <HAL_TIM_Encoder_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000d72:	f000 fa41 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	4619      	mov	r1, r3
 8000d82:	4806      	ldr	r0, [pc, #24]	; (8000d9c <MX_TIM1_Init+0xa8>)
 8000d84:	f006 ff86 	bl	8007c94 <HAL_TIMEx_MasterConfigSynchronization>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000d8e:	f000 fa33 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	3730      	adds	r7, #48	; 0x30
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000244 	.word	0x20000244
 8000da0:	40010000 	.word	0x40010000

08000da4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db8:	463b      	mov	r3, r7
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <MX_TIM2_Init+0x98>)
 8000dc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <MX_TIM2_Init+0x98>)
 8000dca:	f240 3247 	movw	r2, #839	; 0x347
 8000dce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_TIM2_Init+0x98>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <MX_TIM2_Init+0x98>)
 8000dd8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ddc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <MX_TIM2_Init+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_TIM2_Init+0x98>)
 8000de6:	2280      	movs	r2, #128	; 0x80
 8000de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dea:	4814      	ldr	r0, [pc, #80]	; (8000e3c <MX_TIM2_Init+0x98>)
 8000dec:	f005 feb8 	bl	8006b60 <HAL_TIM_Base_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000df6:	f000 f9ff 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	4619      	mov	r1, r3
 8000e06:	480d      	ldr	r0, [pc, #52]	; (8000e3c <MX_TIM2_Init+0x98>)
 8000e08:	f006 fb3e 	bl	8007488 <HAL_TIM_ConfigClockSource>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e12:	f000 f9f1 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000e16:	2310      	movs	r3, #16
 8000e18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_TIM2_Init+0x98>)
 8000e24:	f006 ff36 	bl	8007c94 <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e2e:	f000 f9e3 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200002f4 	.word	0x200002f4

08000e40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	; 0x38
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	f107 0320 	add.w	r3, r7, #32
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
 8000e6c:	615a      	str	r2, [r3, #20]
 8000e6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e70:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <MX_TIM3_Init+0xe0>)
 8000e72:	4a2c      	ldr	r2, [pc, #176]	; (8000f24 <MX_TIM3_Init+0xe4>)
 8000e74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 8000e76:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <MX_TIM3_Init+0xe0>)
 8000e78:	f640 0233 	movw	r2, #2099	; 0x833
 8000e7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7e:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <MX_TIM3_Init+0xe0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <MX_TIM3_Init+0xe0>)
 8000e86:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8c:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <MX_TIM3_Init+0xe0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e92:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <MX_TIM3_Init+0xe0>)
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e98:	4821      	ldr	r0, [pc, #132]	; (8000f20 <MX_TIM3_Init+0xe0>)
 8000e9a:	f005 fe61 	bl	8006b60 <HAL_TIM_Base_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ea4:	f000 f9a8 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	481a      	ldr	r0, [pc, #104]	; (8000f20 <MX_TIM3_Init+0xe0>)
 8000eb6:	f006 fae7 	bl	8007488 <HAL_TIM_ConfigClockSource>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ec0:	f000 f99a 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ec4:	4816      	ldr	r0, [pc, #88]	; (8000f20 <MX_TIM3_Init+0xe0>)
 8000ec6:	f006 f819 	bl	8006efc <HAL_TIM_PWM_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000ed0:	f000 f992 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000edc:	f107 0320 	add.w	r3, r7, #32
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480f      	ldr	r0, [pc, #60]	; (8000f20 <MX_TIM3_Init+0xe0>)
 8000ee4:	f006 fed6 	bl	8007c94 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000eee:	f000 f983 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef2:	2360      	movs	r3, #96	; 0x60
 8000ef4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_TIM3_Init+0xe0>)
 8000f0a:	f006 f9ff 	bl	800730c <HAL_TIM_PWM_ConfigChannel>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f14:	f000 f970 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	3738      	adds	r7, #56	; 0x38
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200001fc 	.word	0x200001fc
 8000f24:	40000400 	.word	0x40000400

08000f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	; 0x30
 8000f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	4ba6      	ldr	r3, [pc, #664]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4aa5      	ldr	r2, [pc, #660]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000f48:	f043 0310 	orr.w	r3, r3, #16
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4ba3      	ldr	r3, [pc, #652]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	61bb      	str	r3, [r7, #24]
 8000f58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	4b9f      	ldr	r3, [pc, #636]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a9e      	ldr	r2, [pc, #632]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b9c      	ldr	r3, [pc, #624]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	4b98      	ldr	r3, [pc, #608]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a97      	ldr	r2, [pc, #604]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b95      	ldr	r3, [pc, #596]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b91      	ldr	r3, [pc, #580]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a90      	ldr	r2, [pc, #576]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b8e      	ldr	r3, [pc, #568]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	4b8a      	ldr	r3, [pc, #552]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a89      	ldr	r2, [pc, #548]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b87      	ldr	r3, [pc, #540]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	4b83      	ldr	r3, [pc, #524]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a82      	ldr	r2, [pc, #520]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b80      	ldr	r3, [pc, #512]	; (80011dc <MX_GPIO_Init+0x2b4>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	217c      	movs	r1, #124	; 0x7c
 8000fea:	487d      	ldr	r0, [pc, #500]	; (80011e0 <MX_GPIO_Init+0x2b8>)
 8000fec:	f001 fcd4 	bl	8002998 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	487b      	ldr	r0, [pc, #492]	; (80011e4 <MX_GPIO_Init+0x2bc>)
 8000ff6:	f001 fccf 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f64f 7110 	movw	r1, #65296	; 0xff10
 8001000:	4879      	ldr	r0, [pc, #484]	; (80011e8 <MX_GPIO_Init+0x2c0>)
 8001002:	f001 fcc9 	bl	8002998 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 6104 	mov.w	r1, #2112	; 0x840
 800100c:	4875      	ldr	r0, [pc, #468]	; (80011e4 <MX_GPIO_Init+0x2bc>)
 800100e:	f001 fcc3 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001018:	4874      	ldr	r0, [pc, #464]	; (80011ec <MX_GPIO_Init+0x2c4>)
 800101a:	f001 fcbd 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 800101e:	2374      	movs	r3, #116	; 0x74
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	486a      	ldr	r0, [pc, #424]	; (80011e0 <MX_GPIO_Init+0x2b8>)
 8001036:	f001 fafb 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800103a:	2308      	movs	r3, #8
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4863      	ldr	r0, [pc, #396]	; (80011e0 <MX_GPIO_Init+0x2b8>)
 8001052:	f001 faed 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	485e      	ldr	r0, [pc, #376]	; (80011e4 <MX_GPIO_Init+0x2bc>)
 800106c:	f001 fae0 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 8001070:	f640 0341 	movw	r3, #2113	; 0x841
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4856      	ldr	r0, [pc, #344]	; (80011e4 <MX_GPIO_Init+0x2bc>)
 800108a:	f001 fad1 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800108e:	2308      	movs	r3, #8
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800109e:	2305      	movs	r3, #5
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4619      	mov	r1, r3
 80010a8:	484e      	ldr	r0, [pc, #312]	; (80011e4 <MX_GPIO_Init+0x2bc>)
 80010aa:	f001 fac1 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ae:	2301      	movs	r3, #1
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010b2:	4b4f      	ldr	r3, [pc, #316]	; (80011f0 <MX_GPIO_Init+0x2c8>)
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	484c      	ldr	r0, [pc, #304]	; (80011f4 <MX_GPIO_Init+0x2cc>)
 80010c2:	f001 fab5 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010c6:	2304      	movs	r3, #4
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	4844      	ldr	r0, [pc, #272]	; (80011ec <MX_GPIO_Init+0x2c4>)
 80010da:	f001 faa9 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTION_SENSOR_9960_Pin KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = MOTION_SENSOR_9960_Pin|KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 80010de:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	483b      	ldr	r0, [pc, #236]	; (80011e0 <MX_GPIO_Init+0x2b8>)
 80010f4:	f001 fa9c 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 80010f8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001102:	2301      	movs	r3, #1
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	4837      	ldr	r0, [pc, #220]	; (80011ec <MX_GPIO_Init+0x2c4>)
 800110e:	f001 fa8f 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001112:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001116:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	482f      	ldr	r0, [pc, #188]	; (80011e8 <MX_GPIO_Init+0x2c0>)
 800112c:	f001 fa80 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001130:	2320      	movs	r3, #32
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4829      	ldr	r0, [pc, #164]	; (80011e8 <MX_GPIO_Init+0x2c0>)
 8001144:	f001 fa74 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001148:	2340      	movs	r3, #64	; 0x40
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	4823      	ldr	r0, [pc, #140]	; (80011ec <MX_GPIO_Init+0x2c4>)
 8001160:	f001 fa66 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001164:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	481b      	ldr	r0, [pc, #108]	; (80011ec <MX_GPIO_Init+0x2c4>)
 800117e:	f001 fa57 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001188:	2312      	movs	r3, #18
 800118a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118c:	2301      	movs	r3, #1
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001194:	2304      	movs	r3, #4
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4619      	mov	r1, r3
 800119e:	4813      	ldr	r0, [pc, #76]	; (80011ec <MX_GPIO_Init+0x2c4>)
 80011a0:	f001 fa46 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 80011a4:	2301      	movs	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	480a      	ldr	r0, [pc, #40]	; (80011e0 <MX_GPIO_Init+0x2b8>)
 80011b8:	f001 fa3a 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80011bc:	2302      	movs	r3, #2
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MX_GPIO_Init+0x2c8>)
 80011c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	4804      	ldr	r0, [pc, #16]	; (80011e0 <MX_GPIO_Init+0x2b8>)
 80011d0:	f001 fa2e 	bl	8002630 <HAL_GPIO_Init>

}
 80011d4:	bf00      	nop
 80011d6:	3730      	adds	r7, #48	; 0x30
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	40020400 	.word	0x40020400
 80011f0:	10120000 	.word	0x10120000
 80011f4:	40020000 	.word	0x40020000

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	e7fe      	b.n	8001200 <Error_Handler+0x8>
	...

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_MspInit+0x5c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a13      	ldr	r2, [pc, #76]	; (8001260 <HAL_MspInit+0x5c>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_MspInit+0x5c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <HAL_MspInit+0x5c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a0c      	ldr	r2, [pc, #48]	; (8001260 <HAL_MspInit+0x5c>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_MspInit+0x5c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001242:	2007      	movs	r0, #7
 8001244:	f001 f9b2 	bl	80025ac <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	2005      	movs	r0, #5
 800124e:	f001 f9b8 	bl	80025c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001252:	2005      	movs	r0, #5
 8001254:	f001 f9d1 	bl	80025fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800

08001264 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a42      	ldr	r2, [pc, #264]	; (800138c <HAL_I2C_MspInit+0x128>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d12d      	bne.n	80012e2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	4b41      	ldr	r3, [pc, #260]	; (8001390 <HAL_I2C_MspInit+0x12c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a40      	ldr	r2, [pc, #256]	; (8001390 <HAL_I2C_MspInit+0x12c>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b3e      	ldr	r3, [pc, #248]	; (8001390 <HAL_I2C_MspInit+0x12c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a8:	2312      	movs	r3, #18
 80012aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012b4:	2304      	movs	r3, #4
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	4835      	ldr	r0, [pc, #212]	; (8001394 <HAL_I2C_MspInit+0x130>)
 80012c0:	f001 f9b6 	bl	8002630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	4b31      	ldr	r3, [pc, #196]	; (8001390 <HAL_I2C_MspInit+0x12c>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	4a30      	ldr	r2, [pc, #192]	; (8001390 <HAL_I2C_MspInit+0x12c>)
 80012ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d2:	6413      	str	r3, [r2, #64]	; 0x40
 80012d4:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <HAL_I2C_MspInit+0x12c>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80012e0:	e050      	b.n	8001384 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a2c      	ldr	r2, [pc, #176]	; (8001398 <HAL_I2C_MspInit+0x134>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d14b      	bne.n	8001384 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	4b27      	ldr	r3, [pc, #156]	; (8001390 <HAL_I2C_MspInit+0x12c>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4a26      	ldr	r2, [pc, #152]	; (8001390 <HAL_I2C_MspInit+0x12c>)
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	6313      	str	r3, [r2, #48]	; 0x30
 80012fc:	4b24      	ldr	r3, [pc, #144]	; (8001390 <HAL_I2C_MspInit+0x12c>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	4b20      	ldr	r3, [pc, #128]	; (8001390 <HAL_I2C_MspInit+0x12c>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a1f      	ldr	r2, [pc, #124]	; (8001390 <HAL_I2C_MspInit+0x12c>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <HAL_I2C_MspInit+0x12c>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800132a:	2312      	movs	r3, #18
 800132c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132e:	2301      	movs	r3, #1
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001336:	2304      	movs	r3, #4
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	4816      	ldr	r0, [pc, #88]	; (800139c <HAL_I2C_MspInit+0x138>)
 8001342:	f001 f975 	bl	8002630 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800134c:	2312      	movs	r3, #18
 800134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001350:	2301      	movs	r3, #1
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001358:	2304      	movs	r3, #4
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	480f      	ldr	r0, [pc, #60]	; (80013a0 <HAL_I2C_MspInit+0x13c>)
 8001364:	f001 f964 	bl	8002630 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_I2C_MspInit+0x12c>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_I2C_MspInit+0x12c>)
 8001372:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_I2C_MspInit+0x12c>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
}
 8001384:	bf00      	nop
 8001386:	3730      	adds	r7, #48	; 0x30
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40005800 	.word	0x40005800
 8001390:	40023800 	.word	0x40023800
 8001394:	40020400 	.word	0x40020400
 8001398:	40005c00 	.word	0x40005c00
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020000 	.word	0x40020000

080013a4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a28      	ldr	r2, [pc, #160]	; (8001464 <HAL_I2S_MspInit+0xc0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d14a      	bne.n	800145c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b27      	ldr	r3, [pc, #156]	; (8001468 <HAL_I2S_MspInit+0xc4>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a26      	ldr	r2, [pc, #152]	; (8001468 <HAL_I2S_MspInit+0xc4>)
 80013d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <HAL_I2S_MspInit+0xc4>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_I2S_MspInit+0xc4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a1f      	ldr	r2, [pc, #124]	; (8001468 <HAL_I2S_MspInit+0xc4>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_I2S_MspInit+0xc4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_I2S_MspInit+0xc4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a18      	ldr	r2, [pc, #96]	; (8001468 <HAL_I2S_MspInit+0xc4>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_I2S_MspInit+0xc4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800141a:	2310      	movs	r3, #16
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800142a:	2306      	movs	r3, #6
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <HAL_I2S_MspInit+0xc8>)
 8001436:	f001 f8fb 	bl	8002630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800143a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800143e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800144c:	2306      	movs	r3, #6
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <HAL_I2S_MspInit+0xcc>)
 8001458:	f001 f8ea 	bl	8002630 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40003c00 	.word	0x40003c00
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020800 	.word	0x40020800

08001474 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <HAL_RNG_MspInit+0x3c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d10d      	bne.n	80014a2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_RNG_MspInit+0x40>)
 800148c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <HAL_RNG_MspInit+0x40>)
 8001490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001494:	6353      	str	r3, [r2, #52]	; 0x34
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <HAL_RNG_MspInit+0x40>)
 8001498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	50060800 	.word	0x50060800
 80014b4:	40023800 	.word	0x40023800

080014b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a41      	ldr	r2, [pc, #260]	; (80015dc <HAL_SPI_MspInit+0x124>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d12c      	bne.n	8001534 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	4b40      	ldr	r3, [pc, #256]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	4a3f      	ldr	r2, [pc, #252]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 80014e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ea:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a38      	ldr	r2, [pc, #224]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001512:	23e0      	movs	r3, #224	; 0xe0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001522:	2305      	movs	r3, #5
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	482d      	ldr	r0, [pc, #180]	; (80015e4 <HAL_SPI_MspInit+0x12c>)
 800152e:	f001 f87f 	bl	8002630 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001532:	e04f      	b.n	80015d4 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a2b      	ldr	r2, [pc, #172]	; (80015e8 <HAL_SPI_MspInit+0x130>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d14a      	bne.n	80015d4 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a26      	ldr	r2, [pc, #152]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <HAL_SPI_MspInit+0x128>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001592:	2304      	movs	r3, #4
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015a2:	2305      	movs	r3, #5
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	480f      	ldr	r0, [pc, #60]	; (80015ec <HAL_SPI_MspInit+0x134>)
 80015ae:	f001 f83f 	bl	8002630 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80015b2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015c4:	2305      	movs	r3, #5
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4619      	mov	r1, r3
 80015ce:	4808      	ldr	r0, [pc, #32]	; (80015f0 <HAL_SPI_MspInit+0x138>)
 80015d0:	f001 f82e 	bl	8002630 <HAL_GPIO_Init>
}
 80015d4:	bf00      	nop
 80015d6:	3730      	adds	r7, #48	; 0x30
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40013000 	.word	0x40013000
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40003800 	.word	0x40003800
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40020400 	.word	0x40020400

080015f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a19      	ldr	r2, [pc, #100]	; (8001678 <HAL_TIM_Encoder_MspInit+0x84>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d12c      	bne.n	8001670 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_TIM_Encoder_MspInit+0x88>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	4a17      	ldr	r2, [pc, #92]	; (800167c <HAL_TIM_Encoder_MspInit+0x88>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6453      	str	r3, [r2, #68]	; 0x44
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_TIM_Encoder_MspInit+0x88>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_TIM_Encoder_MspInit+0x88>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a10      	ldr	r2, [pc, #64]	; (800167c <HAL_TIM_Encoder_MspInit+0x88>)
 800163c:	f043 0310 	orr.w	r3, r3, #16
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_TIM_Encoder_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0310 	and.w	r3, r3, #16
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800164e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001658:	2301      	movs	r3, #1
 800165a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001660:	2301      	movs	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <HAL_TIM_Encoder_MspInit+0x8c>)
 800166c:	f000 ffe0 	bl	8002630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001670:	bf00      	nop
 8001672:	3728      	adds	r7, #40	; 0x28
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40010000 	.word	0x40010000
 800167c:	40023800 	.word	0x40023800
 8001680:	40021000 	.word	0x40021000

08001684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001694:	d10e      	bne.n	80016b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <HAL_TIM_Base_MspInit+0x70>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <HAL_TIM_Base_MspInit+0x70>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_TIM_Base_MspInit+0x70>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016b2:	e01a      	b.n	80016ea <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <HAL_TIM_Base_MspInit+0x74>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d115      	bne.n	80016ea <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_TIM_Base_MspInit+0x70>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <HAL_TIM_Base_MspInit+0x70>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_TIM_Base_MspInit+0x70>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	201d      	movs	r0, #29
 80016e0:	f000 ff6f 	bl	80025c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016e4:	201d      	movs	r0, #29
 80016e6:	f000 ff88 	bl	80025fa <HAL_NVIC_EnableIRQ>
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40000400 	.word	0x40000400

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <NMI_Handler+0x4>

08001702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <MemManage_Handler+0x4>

0800170e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <UsageFault_Handler+0x4>

0800171a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001748:	f000 fe1c 	bl	8002384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 8001764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001768:	481b      	ldr	r0, [pc, #108]	; (80017d8 <TIM2_IRQHandler+0x78>)
 800176a:	f001 f92e 	bl	80029ca <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 800176e:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <TIM2_IRQHandler+0x7c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d111      	bne.n	800179a <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <TIM2_IRQHandler+0x80>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2bc8      	cmp	r3, #200	; 0xc8
 800177c:	dc0a      	bgt.n	8001794 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 800177e:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <TIM2_IRQHandler+0x80>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <TIM2_IRQHandler+0x84>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <TIM2_IRQHandler+0x80>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <TIM2_IRQHandler+0x80>)
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e002      	b.n	800179a <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <TIM2_IRQHandler+0x7c>)
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <TIM2_IRQHandler+0x7c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d114      	bne.n	80017cc <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <TIM2_IRQHandler+0x80>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b63      	cmp	r3, #99	; 0x63
 80017a8:	dd0a      	ble.n	80017c0 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <TIM2_IRQHandler+0x80>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <TIM2_IRQHandler+0x84>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <TIM2_IRQHandler+0x80>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <TIM2_IRQHandler+0x80>)
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e005      	b.n	80017cc <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <TIM2_IRQHandler+0x7c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
		  i = 100;
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <TIM2_IRQHandler+0x80>)
 80017c8:	2264      	movs	r2, #100	; 0x64
 80017ca:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <TIM2_IRQHandler+0x84>)
 80017ce:	f005 fc94 	bl	80070fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40020c00 	.word	0x40020c00
 80017dc:	200000bc 	.word	0x200000bc
 80017e0:	20000000 	.word	0x20000000
 80017e4:	200002f4 	.word	0x200002f4

080017e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80017ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f0:	4804      	ldr	r0, [pc, #16]	; (8001804 <TIM3_IRQHandler+0x1c>)
 80017f2:	f001 f8ea 	bl	80029ca <HAL_GPIO_TogglePin>
  read_digits();
 80017f6:	f7fe fe63 	bl	80004c0 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017fa:	4803      	ldr	r0, [pc, #12]	; (8001808 <TIM3_IRQHandler+0x20>)
 80017fc:	f005 fc7d 	bl	80070fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40020c00 	.word	0x40020c00
 8001808:	200001fc 	.word	0x200001fc

0800180c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <OTG_FS_IRQHandler+0x10>)
 8001812:	f001 fb5f 	bl	8002ed4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000760 	.word	0x20000760

08001820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001828:	4a14      	ldr	r2, [pc, #80]	; (800187c <_sbrk+0x5c>)
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <_sbrk+0x60>)
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <_sbrk+0x64>)
 800183e:	4a12      	ldr	r2, [pc, #72]	; (8001888 <_sbrk+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001850:	f009 fc18 	bl	800b084 <__errno>
 8001854:	4603      	mov	r3, r0
 8001856:	220c      	movs	r2, #12
 8001858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800185e:	e009      	b.n	8001874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <_sbrk+0x64>)
 8001870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20020000 	.word	0x20020000
 8001880:	00000400 	.word	0x00000400
 8001884:	200000c0 	.word	0x200000c0
 8001888:	20000a78 	.word	0x20000a78

0800188c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <SystemInit+0x20>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <SystemInit+0x20>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b08b      	sub	sp, #44	; 0x2c
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4604      	mov	r4, r0
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	80fb      	strh	r3, [r7, #6]
 80018c2:	4603      	mov	r3, r0
 80018c4:	80bb      	strh	r3, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	807b      	strh	r3, [r7, #2]
 80018ca:	4613      	mov	r3, r2
 80018cc:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80018ce:	887b      	ldrh	r3, [r7, #2]
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	f1c3 0301 	rsb	r3, r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80018e8:	e061      	b.n	80019ae <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80018ea:	88fa      	ldrh	r2, [r7, #6]
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	e018      	b.n	8001926 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	b298      	uxth	r0, r3
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	88bb      	ldrh	r3, [r7, #4]
 80018fe:	4413      	add	r3, r2
 8001900:	b29b      	uxth	r3, r3
 8001902:	883a      	ldrh	r2, [r7, #0]
 8001904:	4619      	mov	r1, r3
 8001906:	f000 fb47 	bl	8001f98 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	b298      	uxth	r0, r3
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	b29b      	uxth	r3, r3
 8001912:	88ba      	ldrh	r2, [r7, #4]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	b29b      	uxth	r3, r3
 8001918:	883a      	ldrh	r2, [r7, #0]
 800191a:	4619      	mov	r1, r3
 800191c:	f000 fb3c 	bl	8001f98 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	3301      	adds	r3, #1
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	88fa      	ldrh	r2, [r7, #6]
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	4413      	add	r3, r2
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	429a      	cmp	r2, r3
 8001930:	dde0      	ble.n	80018f4 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8001932:	88fa      	ldrh	r2, [r7, #6]
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e018      	b.n	800196e <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	b298      	uxth	r0, r3
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	b29a      	uxth	r2, r3
 8001944:	88bb      	ldrh	r3, [r7, #4]
 8001946:	4413      	add	r3, r2
 8001948:	b29b      	uxth	r3, r3
 800194a:	883a      	ldrh	r2, [r7, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	f000 fb23 	bl	8001f98 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	b298      	uxth	r0, r3
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	b29b      	uxth	r3, r3
 800195a:	88ba      	ldrh	r2, [r7, #4]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	b29b      	uxth	r3, r3
 8001960:	883a      	ldrh	r2, [r7, #0]
 8001962:	4619      	mov	r1, r3
 8001964:	f000 fb18 	bl	8001f98 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3301      	adds	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	88fa      	ldrh	r2, [r7, #6]
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	4413      	add	r3, r2
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	429a      	cmp	r2, r3
 8001978:	dde0      	ble.n	800193c <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	3301      	adds	r3, #1
 800197e:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4413      	add	r3, r2
 8001986:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	3302      	adds	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005a      	lsls	r2, r3, #1
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	4413      	add	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	dd09      	ble.n	80019ae <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	3b01      	subs	r3, #1
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	4413      	add	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	3302      	adds	r3, #2
 80019ac:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80019ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	da99      	bge.n	80018ea <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80019b6:	bf00      	nop
 80019b8:	bf00      	nop
 80019ba:	372c      	adds	r7, #44	; 0x2c
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd90      	pop	{r4, r7, pc}

080019c0 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80019c4:	2200      	movs	r2, #0
 80019c6:	2110      	movs	r1, #16
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <ILI9341_SPI_Init+0x14>)
 80019ca:	f000 ffe5 	bl	8002998 <HAL_GPIO_WritePin>
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000

080019d8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80019e2:	1df9      	adds	r1, r7, #7
 80019e4:	2301      	movs	r3, #1
 80019e6:	2201      	movs	r2, #1
 80019e8:	4803      	ldr	r0, [pc, #12]	; (80019f8 <ILI9341_SPI_Send+0x20>)
 80019ea:	f004 feb2 	bl	8006752 <HAL_SPI_Transmit>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000150 	.word	0x20000150

080019fc <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2110      	movs	r1, #16
 8001a0a:	480a      	ldr	r0, [pc, #40]	; (8001a34 <ILI9341_Write_Command+0x38>)
 8001a0c:	f000 ffc4 	bl	8002998 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001a10:	2200      	movs	r2, #0
 8001a12:	2140      	movs	r1, #64	; 0x40
 8001a14:	4807      	ldr	r0, [pc, #28]	; (8001a34 <ILI9341_Write_Command+0x38>)
 8001a16:	f000 ffbf 	bl	8002998 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ffdb 	bl	80019d8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001a22:	2201      	movs	r2, #1
 8001a24:	2110      	movs	r1, #16
 8001a26:	4803      	ldr	r0, [pc, #12]	; (8001a34 <ILI9341_Write_Command+0x38>)
 8001a28:	f000 ffb6 	bl	8002998 <HAL_GPIO_WritePin>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000

08001a38 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001a42:	2201      	movs	r2, #1
 8001a44:	2140      	movs	r1, #64	; 0x40
 8001a46:	480a      	ldr	r0, [pc, #40]	; (8001a70 <ILI9341_Write_Data+0x38>)
 8001a48:	f000 ffa6 	bl	8002998 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2110      	movs	r1, #16
 8001a50:	4807      	ldr	r0, [pc, #28]	; (8001a70 <ILI9341_Write_Data+0x38>)
 8001a52:	f000 ffa1 	bl	8002998 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ffbd 	bl	80019d8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2110      	movs	r1, #16
 8001a62:	4803      	ldr	r0, [pc, #12]	; (8001a70 <ILI9341_Write_Data+0x38>)
 8001a64:	f000 ff98 	bl	8002998 <HAL_GPIO_WritePin>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000

08001a74 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	4611      	mov	r1, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	4623      	mov	r3, r4
 8001a84:	80fb      	strh	r3, [r7, #6]
 8001a86:	4603      	mov	r3, r0
 8001a88:	80bb      	strh	r3, [r7, #4]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	807b      	strh	r3, [r7, #2]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001a92:	202a      	movs	r0, #42	; 0x2a
 8001a94:	f7ff ffb2 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	0a1b      	lsrs	r3, r3, #8
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ffc9 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ffc4 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ffbd 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001abe:	887b      	ldrh	r3, [r7, #2]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff ffb8 	bl	8001a38 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001ac8:	202b      	movs	r0, #43	; 0x2b
 8001aca:	f7ff ff97 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001ace:	88bb      	ldrh	r3, [r7, #4]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ffae 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001adc:	88bb      	ldrh	r3, [r7, #4]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ffa9 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001ae6:	883b      	ldrh	r3, [r7, #0]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ffa2 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001af4:	883b      	ldrh	r3, [r7, #0]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff9d 	bl	8001a38 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001afe:	202c      	movs	r0, #44	; 0x2c
 8001b00:	f7ff ff7c 	bl	80019fc <ILI9341_Write_Command>
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd90      	pop	{r4, r7, pc}

08001b0c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2120      	movs	r1, #32
 8001b14:	480a      	ldr	r0, [pc, #40]	; (8001b40 <ILI9341_Reset+0x34>)
 8001b16:	f000 ff3f 	bl	8002998 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001b1a:	20c8      	movs	r0, #200	; 0xc8
 8001b1c:	f000 fc52 	bl	80023c4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2110      	movs	r1, #16
 8001b24:	4806      	ldr	r0, [pc, #24]	; (8001b40 <ILI9341_Reset+0x34>)
 8001b26:	f000 ff37 	bl	8002998 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001b2a:	20c8      	movs	r0, #200	; 0xc8
 8001b2c:	f000 fc4a 	bl	80023c4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001b30:	2201      	movs	r2, #1
 8001b32:	2120      	movs	r1, #32
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <ILI9341_Reset+0x34>)
 8001b36:	f000 ff2f 	bl	8002998 <HAL_GPIO_WritePin>
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000

08001b44 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8001b52:	2036      	movs	r0, #54	; 0x36
 8001b54:	f7ff ff52 	bl	80019fc <ILI9341_Write_Command>
HAL_Delay(1);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f000 fc33 	bl	80023c4 <HAL_Delay>
	
switch(screen_rotation) 
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d837      	bhi.n	8001bd4 <ILI9341_Set_Rotation+0x90>
 8001b64:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <ILI9341_Set_Rotation+0x28>)
 8001b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6a:	bf00      	nop
 8001b6c:	08001b7d 	.word	0x08001b7d
 8001b70:	08001b93 	.word	0x08001b93
 8001b74:	08001ba9 	.word	0x08001ba9
 8001b78:	08001bbf 	.word	0x08001bbf
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001b7c:	2048      	movs	r0, #72	; 0x48
 8001b7e:	f7ff ff5b 	bl	8001a38 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <ILI9341_Set_Rotation+0x9c>)
 8001b84:	22f0      	movs	r2, #240	; 0xf0
 8001b86:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001b88:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <ILI9341_Set_Rotation+0xa0>)
 8001b8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b8e:	801a      	strh	r2, [r3, #0]
			break;
 8001b90:	e021      	b.n	8001bd6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001b92:	2028      	movs	r0, #40	; 0x28
 8001b94:	f7ff ff50 	bl	8001a38 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <ILI9341_Set_Rotation+0x9c>)
 8001b9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b9e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <ILI9341_Set_Rotation+0xa0>)
 8001ba2:	22f0      	movs	r2, #240	; 0xf0
 8001ba4:	801a      	strh	r2, [r3, #0]
			break;
 8001ba6:	e016      	b.n	8001bd6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001ba8:	2088      	movs	r0, #136	; 0x88
 8001baa:	f7ff ff45 	bl	8001a38 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <ILI9341_Set_Rotation+0x9c>)
 8001bb0:	22f0      	movs	r2, #240	; 0xf0
 8001bb2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <ILI9341_Set_Rotation+0xa0>)
 8001bb6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bba:	801a      	strh	r2, [r3, #0]
			break;
 8001bbc:	e00b      	b.n	8001bd6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001bbe:	20e8      	movs	r0, #232	; 0xe8
 8001bc0:	f7ff ff3a 	bl	8001a38 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <ILI9341_Set_Rotation+0x9c>)
 8001bc6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bca:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <ILI9341_Set_Rotation+0xa0>)
 8001bce:	22f0      	movs	r2, #240	; 0xf0
 8001bd0:	801a      	strh	r2, [r3, #0]
			break;
 8001bd2:	e000      	b.n	8001bd6 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001bd4:	bf00      	nop
	}
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	2000000a 	.word	0x2000000a
 8001be4:	20000008 	.word	0x20000008

08001be8 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001bec:	2201      	movs	r2, #1
 8001bee:	2120      	movs	r1, #32
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <ILI9341_Enable+0x14>)
 8001bf2:	f000 fed1 	bl	8002998 <HAL_GPIO_WritePin>
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000

08001c00 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001c04:	f7ff fff0 	bl	8001be8 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001c08:	f7ff feda 	bl	80019c0 <ILI9341_SPI_Init>
ILI9341_Reset();
 8001c0c:	f7ff ff7e 	bl	8001b0c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001c10:	2001      	movs	r0, #1
 8001c12:	f7ff fef3 	bl	80019fc <ILI9341_Write_Command>
HAL_Delay(1000);
 8001c16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1a:	f000 fbd3 	bl	80023c4 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001c1e:	20cb      	movs	r0, #203	; 0xcb
 8001c20:	f7ff feec 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001c24:	2039      	movs	r0, #57	; 0x39
 8001c26:	f7ff ff07 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001c2a:	202c      	movs	r0, #44	; 0x2c
 8001c2c:	f7ff ff04 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff ff01 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001c36:	2034      	movs	r0, #52	; 0x34
 8001c38:	f7ff fefe 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	f7ff fefb 	bl	8001a38 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001c42:	20cf      	movs	r0, #207	; 0xcf
 8001c44:	f7ff feda 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff fef5 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001c4e:	20c1      	movs	r0, #193	; 0xc1
 8001c50:	f7ff fef2 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001c54:	2030      	movs	r0, #48	; 0x30
 8001c56:	f7ff feef 	bl	8001a38 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8001c5a:	20e8      	movs	r0, #232	; 0xe8
 8001c5c:	f7ff fece 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001c60:	2085      	movs	r0, #133	; 0x85
 8001c62:	f7ff fee9 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001c66:	2000      	movs	r0, #0
 8001c68:	f7ff fee6 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001c6c:	2078      	movs	r0, #120	; 0x78
 8001c6e:	f7ff fee3 	bl	8001a38 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001c72:	20ea      	movs	r0, #234	; 0xea
 8001c74:	f7ff fec2 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f7ff fedd 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f7ff feda 	bl	8001a38 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001c84:	20ed      	movs	r0, #237	; 0xed
 8001c86:	f7ff feb9 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001c8a:	2064      	movs	r0, #100	; 0x64
 8001c8c:	f7ff fed4 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f7ff fed1 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001c96:	2012      	movs	r0, #18
 8001c98:	f7ff fece 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001c9c:	2081      	movs	r0, #129	; 0x81
 8001c9e:	f7ff fecb 	bl	8001a38 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001ca2:	20f7      	movs	r0, #247	; 0xf7
 8001ca4:	f7ff feaa 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001ca8:	2020      	movs	r0, #32
 8001caa:	f7ff fec5 	bl	8001a38 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001cae:	20c0      	movs	r0, #192	; 0xc0
 8001cb0:	f7ff fea4 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001cb4:	2023      	movs	r0, #35	; 0x23
 8001cb6:	f7ff febf 	bl	8001a38 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001cba:	20c1      	movs	r0, #193	; 0xc1
 8001cbc:	f7ff fe9e 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001cc0:	2010      	movs	r0, #16
 8001cc2:	f7ff feb9 	bl	8001a38 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001cc6:	20c5      	movs	r0, #197	; 0xc5
 8001cc8:	f7ff fe98 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001ccc:	203e      	movs	r0, #62	; 0x3e
 8001cce:	f7ff feb3 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001cd2:	2028      	movs	r0, #40	; 0x28
 8001cd4:	f7ff feb0 	bl	8001a38 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001cd8:	20c7      	movs	r0, #199	; 0xc7
 8001cda:	f7ff fe8f 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001cde:	2086      	movs	r0, #134	; 0x86
 8001ce0:	f7ff feaa 	bl	8001a38 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001ce4:	2036      	movs	r0, #54	; 0x36
 8001ce6:	f7ff fe89 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001cea:	2048      	movs	r0, #72	; 0x48
 8001cec:	f7ff fea4 	bl	8001a38 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001cf0:	203a      	movs	r0, #58	; 0x3a
 8001cf2:	f7ff fe83 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001cf6:	2055      	movs	r0, #85	; 0x55
 8001cf8:	f7ff fe9e 	bl	8001a38 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001cfc:	20b1      	movs	r0, #177	; 0xb1
 8001cfe:	f7ff fe7d 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f7ff fe98 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001d08:	2018      	movs	r0, #24
 8001d0a:	f7ff fe95 	bl	8001a38 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001d0e:	20b6      	movs	r0, #182	; 0xb6
 8001d10:	f7ff fe74 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001d14:	2008      	movs	r0, #8
 8001d16:	f7ff fe8f 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001d1a:	2082      	movs	r0, #130	; 0x82
 8001d1c:	f7ff fe8c 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001d20:	2027      	movs	r0, #39	; 0x27
 8001d22:	f7ff fe89 	bl	8001a38 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001d26:	20f2      	movs	r0, #242	; 0xf2
 8001d28:	f7ff fe68 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff fe83 	bl	8001a38 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001d32:	2026      	movs	r0, #38	; 0x26
 8001d34:	f7ff fe62 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f7ff fe7d 	bl	8001a38 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001d3e:	20e0      	movs	r0, #224	; 0xe0
 8001d40:	f7ff fe5c 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001d44:	200f      	movs	r0, #15
 8001d46:	f7ff fe77 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001d4a:	2031      	movs	r0, #49	; 0x31
 8001d4c:	f7ff fe74 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001d50:	202b      	movs	r0, #43	; 0x2b
 8001d52:	f7ff fe71 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001d56:	200c      	movs	r0, #12
 8001d58:	f7ff fe6e 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001d5c:	200e      	movs	r0, #14
 8001d5e:	f7ff fe6b 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001d62:	2008      	movs	r0, #8
 8001d64:	f7ff fe68 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001d68:	204e      	movs	r0, #78	; 0x4e
 8001d6a:	f7ff fe65 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001d6e:	20f1      	movs	r0, #241	; 0xf1
 8001d70:	f7ff fe62 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001d74:	2037      	movs	r0, #55	; 0x37
 8001d76:	f7ff fe5f 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001d7a:	2007      	movs	r0, #7
 8001d7c:	f7ff fe5c 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001d80:	2010      	movs	r0, #16
 8001d82:	f7ff fe59 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001d86:	2003      	movs	r0, #3
 8001d88:	f7ff fe56 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001d8c:	200e      	movs	r0, #14
 8001d8e:	f7ff fe53 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001d92:	2009      	movs	r0, #9
 8001d94:	f7ff fe50 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff fe4d 	bl	8001a38 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001d9e:	20e1      	movs	r0, #225	; 0xe1
 8001da0:	f7ff fe2c 	bl	80019fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001da4:	2000      	movs	r0, #0
 8001da6:	f7ff fe47 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001daa:	200e      	movs	r0, #14
 8001dac:	f7ff fe44 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001db0:	2014      	movs	r0, #20
 8001db2:	f7ff fe41 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001db6:	2003      	movs	r0, #3
 8001db8:	f7ff fe3e 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001dbc:	2011      	movs	r0, #17
 8001dbe:	f7ff fe3b 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001dc2:	2007      	movs	r0, #7
 8001dc4:	f7ff fe38 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001dc8:	2031      	movs	r0, #49	; 0x31
 8001dca:	f7ff fe35 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001dce:	20c1      	movs	r0, #193	; 0xc1
 8001dd0:	f7ff fe32 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001dd4:	2048      	movs	r0, #72	; 0x48
 8001dd6:	f7ff fe2f 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001dda:	2008      	movs	r0, #8
 8001ddc:	f7ff fe2c 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001de0:	200f      	movs	r0, #15
 8001de2:	f7ff fe29 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001de6:	200c      	movs	r0, #12
 8001de8:	f7ff fe26 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001dec:	2031      	movs	r0, #49	; 0x31
 8001dee:	f7ff fe23 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001df2:	2036      	movs	r0, #54	; 0x36
 8001df4:	f7ff fe20 	bl	8001a38 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001df8:	200f      	movs	r0, #15
 8001dfa:	f7ff fe1d 	bl	8001a38 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001dfe:	2011      	movs	r0, #17
 8001e00:	f7ff fdfc 	bl	80019fc <ILI9341_Write_Command>
HAL_Delay(120);
 8001e04:	2078      	movs	r0, #120	; 0x78
 8001e06:	f000 fadd 	bl	80023c4 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001e0a:	2029      	movs	r0, #41	; 0x29
 8001e0c:	f7ff fdf6 	bl	80019fc <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f7ff fe97 	bl	8001b44 <ILI9341_Set_Rotation>

HAL_Delay(10);
 8001e16:	200a      	movs	r0, #10
 8001e18:	f000 fad4 	bl	80023c4 <HAL_Delay>
//
}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b08c      	sub	sp, #48	; 0x30
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	80fb      	strh	r3, [r7, #6]
 8001e2c:	466b      	mov	r3, sp
 8001e2e:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e3c:	d202      	bcs.n	8001e44 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
 8001e42:	e002      	b.n	8001e4a <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001e44:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	2140      	movs	r1, #64	; 0x40
 8001e4e:	483d      	ldr	r0, [pc, #244]	; (8001f44 <ILI9341_Draw_Colour_Burst+0x124>)
 8001e50:	f000 fda2 	bl	8002998 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2110      	movs	r1, #16
 8001e58:	483a      	ldr	r0, [pc, #232]	; (8001f44 <ILI9341_Draw_Colour_Burst+0x124>)
 8001e5a:	f000 fd9d 	bl	8002998 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8001e68:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001e6a:	4623      	mov	r3, r4
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	4620      	mov	r0, r4
 8001e72:	f04f 0100 	mov.w	r1, #0
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	00cb      	lsls	r3, r1, #3
 8001e80:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e84:	00c2      	lsls	r2, r0, #3
 8001e86:	4620      	mov	r0, r4
 8001e88:	f04f 0100 	mov.w	r1, #0
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	00cb      	lsls	r3, r1, #3
 8001e96:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e9a:	00c2      	lsls	r2, r0, #3
 8001e9c:	1de3      	adds	r3, r4, #7
 8001e9e:	08db      	lsrs	r3, r3, #3
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	ebad 0d03 	sub.w	sp, sp, r3
 8001ea6:	466b      	mov	r3, sp
 8001ea8:	3300      	adds	r3, #0
 8001eaa:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001eac:	2300      	movs	r3, #0
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eb0:	e00e      	b.n	8001ed0 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ebc:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	88fa      	ldrh	r2, [r7, #6]
 8001ec4:	b2d1      	uxtb	r1, r2
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ecc:	3302      	adds	r3, #2
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d3ec      	bcc.n	8001eb2 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eec:	fbb3 f2f2 	udiv	r2, r3, r2
 8001ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ef2:	fb01 f202 	mul.w	r2, r1, r2
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d010      	beq.n	8001f22 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f04:	e009      	b.n	8001f1a <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001f06:	69b9      	ldr	r1, [r7, #24]
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	230a      	movs	r3, #10
 8001f0e:	480e      	ldr	r0, [pc, #56]	; (8001f48 <ILI9341_Draw_Colour_Burst+0x128>)
 8001f10:	f004 fc1f 	bl	8006752 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f16:	3301      	adds	r3, #1
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d3f1      	bcc.n	8001f06 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001f22:	69b9      	ldr	r1, [r7, #24]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	230a      	movs	r3, #10
 8001f2a:	4807      	ldr	r0, [pc, #28]	; (8001f48 <ILI9341_Draw_Colour_Burst+0x128>)
 8001f2c:	f004 fc11 	bl	8006752 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001f30:	2201      	movs	r2, #1
 8001f32:	2110      	movs	r1, #16
 8001f34:	4803      	ldr	r0, [pc, #12]	; (8001f44 <ILI9341_Draw_Colour_Burst+0x124>)
 8001f36:	f000 fd2f 	bl	8002998 <HAL_GPIO_WritePin>
 8001f3a:	46ad      	mov	sp, r5
}
 8001f3c:	bf00      	nop
 8001f3e:	3730      	adds	r7, #48	; 0x30
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bdb0      	pop	{r4, r5, r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	20000150 	.word	0x20000150

08001f4c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <ILI9341_Fill_Screen+0x44>)
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <ILI9341_Fill_Screen+0x48>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	2100      	movs	r1, #0
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7ff fd85 	bl	8001a74 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <ILI9341_Fill_Screen+0x44>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <ILI9341_Fill_Screen+0x48>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	fb03 f302 	mul.w	r3, r3, r2
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff4c 	bl	8001e20 <ILI9341_Draw_Colour_Burst>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	2000000a 	.word	0x2000000a
 8001f94:	20000008 	.word	0x20000008

08001f98 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	80fb      	strh	r3, [r7, #6]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	80bb      	strh	r3, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001faa:	4b5b      	ldr	r3, [pc, #364]	; (8002118 <ILI9341_Draw_Pixel+0x180>)
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	88fa      	ldrh	r2, [r7, #6]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	f080 80ac 	bcs.w	8002110 <ILI9341_Draw_Pixel+0x178>
 8001fb8:	4b58      	ldr	r3, [pc, #352]	; (800211c <ILI9341_Draw_Pixel+0x184>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	88ba      	ldrh	r2, [r7, #4]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	f080 80a5 	bcs.w	8002110 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2140      	movs	r1, #64	; 0x40
 8001fca:	4855      	ldr	r0, [pc, #340]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 8001fcc:	f000 fce4 	bl	8002998 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2110      	movs	r1, #16
 8001fd4:	4852      	ldr	r0, [pc, #328]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 8001fd6:	f000 fcdf 	bl	8002998 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8001fda:	202a      	movs	r0, #42	; 0x2a
 8001fdc:	f7ff fcfc 	bl	80019d8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	2140      	movs	r1, #64	; 0x40
 8001fe4:	484e      	ldr	r0, [pc, #312]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 8001fe6:	f000 fcd7 	bl	8002998 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001fea:	2201      	movs	r2, #1
 8001fec:	2110      	movs	r1, #16
 8001fee:	484c      	ldr	r0, [pc, #304]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 8001ff0:	f000 fcd2 	bl	8002998 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2110      	movs	r1, #16
 8001ff8:	4849      	ldr	r0, [pc, #292]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 8001ffa:	f000 fccd 	bl	8002998 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	b29b      	uxth	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	753b      	strb	r3, [r7, #20]
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	757b      	strb	r3, [r7, #21]
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	3301      	adds	r3, #1
 8002012:	121b      	asrs	r3, r3, #8
 8002014:	b2db      	uxtb	r3, r3
 8002016:	75bb      	strb	r3, [r7, #22]
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	3301      	adds	r3, #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002022:	f107 0114 	add.w	r1, r7, #20
 8002026:	2301      	movs	r3, #1
 8002028:	2204      	movs	r2, #4
 800202a:	483e      	ldr	r0, [pc, #248]	; (8002124 <ILI9341_Draw_Pixel+0x18c>)
 800202c:	f004 fb91 	bl	8006752 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002030:	2201      	movs	r2, #1
 8002032:	2110      	movs	r1, #16
 8002034:	483a      	ldr	r0, [pc, #232]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 8002036:	f000 fcaf 	bl	8002998 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800203a:	2200      	movs	r2, #0
 800203c:	2140      	movs	r1, #64	; 0x40
 800203e:	4838      	ldr	r0, [pc, #224]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 8002040:	f000 fcaa 	bl	8002998 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002044:	2200      	movs	r2, #0
 8002046:	2110      	movs	r1, #16
 8002048:	4835      	ldr	r0, [pc, #212]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 800204a:	f000 fca5 	bl	8002998 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800204e:	202b      	movs	r0, #43	; 0x2b
 8002050:	f7ff fcc2 	bl	80019d8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002054:	2201      	movs	r2, #1
 8002056:	2140      	movs	r1, #64	; 0x40
 8002058:	4831      	ldr	r0, [pc, #196]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 800205a:	f000 fc9d 	bl	8002998 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800205e:	2201      	movs	r2, #1
 8002060:	2110      	movs	r1, #16
 8002062:	482f      	ldr	r0, [pc, #188]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 8002064:	f000 fc98 	bl	8002998 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002068:	2200      	movs	r2, #0
 800206a:	2110      	movs	r1, #16
 800206c:	482c      	ldr	r0, [pc, #176]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 800206e:	f000 fc93 	bl	8002998 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002072:	88bb      	ldrh	r3, [r7, #4]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	b29b      	uxth	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	743b      	strb	r3, [r7, #16]
 800207c:	88bb      	ldrh	r3, [r7, #4]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	747b      	strb	r3, [r7, #17]
 8002082:	88bb      	ldrh	r3, [r7, #4]
 8002084:	3301      	adds	r3, #1
 8002086:	121b      	asrs	r3, r3, #8
 8002088:	b2db      	uxtb	r3, r3
 800208a:	74bb      	strb	r3, [r7, #18]
 800208c:	88bb      	ldrh	r3, [r7, #4]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	3301      	adds	r3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002096:	f107 0110 	add.w	r1, r7, #16
 800209a:	2301      	movs	r3, #1
 800209c:	2204      	movs	r2, #4
 800209e:	4821      	ldr	r0, [pc, #132]	; (8002124 <ILI9341_Draw_Pixel+0x18c>)
 80020a0:	f004 fb57 	bl	8006752 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80020a4:	2201      	movs	r2, #1
 80020a6:	2110      	movs	r1, #16
 80020a8:	481d      	ldr	r0, [pc, #116]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 80020aa:	f000 fc75 	bl	8002998 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80020ae:	2200      	movs	r2, #0
 80020b0:	2140      	movs	r1, #64	; 0x40
 80020b2:	481b      	ldr	r0, [pc, #108]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 80020b4:	f000 fc70 	bl	8002998 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80020b8:	2200      	movs	r2, #0
 80020ba:	2110      	movs	r1, #16
 80020bc:	4818      	ldr	r0, [pc, #96]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 80020be:	f000 fc6b 	bl	8002998 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80020c2:	202c      	movs	r0, #44	; 0x2c
 80020c4:	f7ff fc88 	bl	80019d8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80020c8:	2201      	movs	r2, #1
 80020ca:	2140      	movs	r1, #64	; 0x40
 80020cc:	4814      	ldr	r0, [pc, #80]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 80020ce:	f000 fc63 	bl	8002998 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80020d2:	2201      	movs	r2, #1
 80020d4:	2110      	movs	r1, #16
 80020d6:	4812      	ldr	r0, [pc, #72]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 80020d8:	f000 fc5e 	bl	8002998 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80020dc:	2200      	movs	r2, #0
 80020de:	2110      	movs	r1, #16
 80020e0:	480f      	ldr	r0, [pc, #60]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 80020e2:	f000 fc59 	bl	8002998 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80020e6:	887b      	ldrh	r3, [r7, #2]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	733b      	strb	r3, [r7, #12]
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80020f6:	f107 010c 	add.w	r1, r7, #12
 80020fa:	2301      	movs	r3, #1
 80020fc:	2202      	movs	r2, #2
 80020fe:	4809      	ldr	r0, [pc, #36]	; (8002124 <ILI9341_Draw_Pixel+0x18c>)
 8002100:	f004 fb27 	bl	8006752 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002104:	2201      	movs	r2, #1
 8002106:	2110      	movs	r1, #16
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <ILI9341_Draw_Pixel+0x188>)
 800210a:	f000 fc45 	bl	8002998 <HAL_GPIO_WritePin>
 800210e:	e000      	b.n	8002112 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002110:	bf00      	nop
	
}
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	2000000a 	.word	0x2000000a
 800211c:	20000008 	.word	0x20000008
 8002120:	40021000 	.word	0x40021000
 8002124:	20000150 	.word	0x20000150

08002128 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	int i =0;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 8002134:	e036      	b.n	80021a4 <speed_test_LCD+0x7c>
	{
		i ++;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002150:	4819      	ldr	r0, [pc, #100]	; (80021b8 <speed_test_LCD+0x90>)
 8002152:	f004 fa60 	bl	8006616 <HAL_RNG_GetRandomNumber>
 8002156:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 800215c:	4816      	ldr	r0, [pc, #88]	; (80021b8 <speed_test_LCD+0x90>)
 800215e:	f004 fa5a 	bl	8006616 <HAL_RNG_GetRandomNumber>
 8002162:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002168:	4813      	ldr	r0, [pc, #76]	; (80021b8 <speed_test_LCD+0x90>)
 800216a:	f004 fa54 	bl	8006616 <HAL_RNG_GetRandomNumber>
 800216e:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002174:	4810      	ldr	r0, [pc, #64]	; (80021b8 <speed_test_LCD+0x90>)
 8002176:	f004 fa4e 	bl	8006616 <HAL_RNG_GetRandomNumber>
 800217a:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8002180:	89fb      	ldrh	r3, [r7, #14]
 8002182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002186:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8002188:	89bb      	ldrh	r3, [r7, #12]
 800218a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800218e:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8002190:	897b      	ldrh	r3, [r7, #10]
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8002198:	893b      	ldrh	r3, [r7, #8]
 800219a:	897a      	ldrh	r2, [r7, #10]
 800219c:	89b9      	ldrh	r1, [r7, #12]
 800219e:	89f8      	ldrh	r0, [r7, #14]
 80021a0:	f7ff fb86 	bl	80018b0 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	ddc4      	ble.n	8002136 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2000028c 	.word	0x2000028c

080021bc <I2C_3_scaner>:

};

//----------------------------------------------------------------------------------------------------
void I2C_3_scaner(void)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b087      	sub	sp, #28
 80021c0:	af04      	add	r7, sp, #16
	/*Description function
	This function search devise connected to I2C in this case -hi2c1.
	After thet function print in console information about what to connect to I2C.
	*/
	uint8_t number_of_device=0;				// How many device controller is found
 80021c2:	2300      	movs	r3, #0
 80021c4:	71fb      	strb	r3, [r7, #7]
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	//HAL_Delay(500);

	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 80021c6:	4b2a      	ldr	r3, [pc, #168]	; (8002270 <I2C_3_scaner+0xb4>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
 80021cc:	e043      	b.n	8002256 <I2C_3_scaner+0x9a>
	{
		HAL_Delay(1);
 80021ce:	2001      	movs	r0, #1
 80021d0:	f000 f8f8 	bl	80023c4 <HAL_Delay>
		STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, (uint16_t) sizebuf_I2C, &buff, (uint16_t) sizebuf_I2C,(uint32_t) timeout);
 80021d4:	4b26      	ldr	r3, [pc, #152]	; (8002270 <I2C_3_scaner+0xb4>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	b299      	uxth	r1, r3
 80021de:	4b25      	ldr	r3, [pc, #148]	; (8002274 <I2C_3_scaner+0xb8>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	b298      	uxth	r0, r3
 80021e4:	4b24      	ldr	r3, [pc, #144]	; (8002278 <I2C_3_scaner+0xbc>)
 80021e6:	881c      	ldrh	r4, [r3, #0]
 80021e8:	4b23      	ldr	r3, [pc, #140]	; (8002278 <I2C_3_scaner+0xbc>)
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	4a23      	ldr	r2, [pc, #140]	; (800227c <I2C_3_scaner+0xc0>)
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	9202      	str	r2, [sp, #8]
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	4b22      	ldr	r3, [pc, #136]	; (8002280 <I2C_3_scaner+0xc4>)
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	4623      	mov	r3, r4
 80021fa:	4602      	mov	r2, r0
 80021fc:	4821      	ldr	r0, [pc, #132]	; (8002284 <I2C_3_scaner+0xc8>)
 80021fe:	f002 faa7 	bl	8004750 <HAL_I2C_Mem_Read>
 8002202:	4603      	mov	r3, r0
 8002204:	b29a      	uxth	r2, r3
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <I2C_3_scaner+0xcc>)
 8002208:	801a      	strh	r2, [r3, #0]

		if(STATUS==DEVICE_FOUND)																		// if devsice is found
 800220a:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <I2C_3_scaner+0xcc>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d11b      	bne.n	800224a <I2C_3_scaner+0x8e>
		{
			number_of_device++;
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	3301      	adds	r3, #1
 8002216:	71fb      	strb	r3, [r7, #7]

			if( (addres_devise == H_and_T_sensor_SI7021_I2C_ADDR) | (addres_devise == OLED_SSD136_I2C_ADDR))
 8002218:	4b15      	ldr	r3, [pc, #84]	; (8002270 <I2C_3_scaner+0xb4>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b40      	cmp	r3, #64	; 0x40
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <I2C_3_scaner+0xb4>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b3c      	cmp	r3, #60	; 0x3c
 800222c:	bf0c      	ite	eq
 800222e:	2301      	moveq	r3, #1
 8002230:	2300      	movne	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	4313      	orrs	r3, r2
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d006      	beq.n	800224a <I2C_3_scaner+0x8e>
			{
				switch (addres_devise)
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <I2C_3_scaner+0xb4>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b3c      	cmp	r3, #60	; 0x3c
 8002242:	d001      	beq.n	8002248 <I2C_3_scaner+0x8c>
 8002244:	2b40      	cmp	r3, #64	; 0x40
 8002246:	e000      	b.n	800224a <I2C_3_scaner+0x8e>
							sprintf(str3,"Device address-0x%x - found. It is OLED \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
						#endif
				    break;
 8002248:	bf00      	nop
	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <I2C_3_scaner+0xb4>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	3301      	adds	r3, #1
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <I2C_3_scaner+0xb4>)
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <I2C_3_scaner+0xb4>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2bff      	cmp	r3, #255	; 0xff
 800225c:	d1b7      	bne.n	80021ce <I2C_3_scaner+0x12>
		memset(str3, 0 , sizeof(str3));
		sprintf(str3,"DONE\r\n");      																	// convert   in  str
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	HAL_Delay(500);
 800225e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002262:	f000 f8af 	bl	80023c4 <HAL_Delay>
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bd90      	pop	{r4, r7, pc}
 800226e:	bf00      	nop
 8002270:	200000c4 	.word	0x200000c4
 8002274:	200000c5 	.word	0x200000c5
 8002278:	2000000c 	.word	0x2000000c
 800227c:	20000010 	.word	0x20000010
 8002280:	200000c6 	.word	0x200000c6
 8002284:	200000fc 	.word	0x200000fc
 8002288:	200000c8 	.word	0x200000c8

0800228c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800228c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002290:	480d      	ldr	r0, [pc, #52]	; (80022c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002292:	490e      	ldr	r1, [pc, #56]	; (80022cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002294:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002298:	e002      	b.n	80022a0 <LoopCopyDataInit>

0800229a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800229c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229e:	3304      	adds	r3, #4

080022a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a4:	d3f9      	bcc.n	800229a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a6:	4a0b      	ldr	r2, [pc, #44]	; (80022d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022a8:	4c0b      	ldr	r4, [pc, #44]	; (80022d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ac:	e001      	b.n	80022b2 <LoopFillZerobss>

080022ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b0:	3204      	adds	r2, #4

080022b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b4:	d3fb      	bcc.n	80022ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022b6:	f7ff fae9 	bl	800188c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ba:	f008 fee9 	bl	800b090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022be:	f7fe fb07 	bl	80008d0 <main>
  bx  lr    
 80022c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022cc:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80022d0:	0800b2dc 	.word	0x0800b2dc
  ldr r2, =_sbss
 80022d4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80022d8:	20000a74 	.word	0x20000a74

080022dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022dc:	e7fe      	b.n	80022dc <ADC_IRQHandler>
	...

080022e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022e4:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <HAL_Init+0x40>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <HAL_Init+0x40>)
 80022ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_Init+0x40>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <HAL_Init+0x40>)
 80022f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <HAL_Init+0x40>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a07      	ldr	r2, [pc, #28]	; (8002320 <HAL_Init+0x40>)
 8002302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002308:	2003      	movs	r0, #3
 800230a:	f000 f94f 	bl	80025ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800230e:	2000      	movs	r0, #0
 8002310:	f000 f808 	bl	8002324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002314:	f7fe ff76 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40023c00 	.word	0x40023c00

08002324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_InitTick+0x54>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_InitTick+0x58>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	4619      	mov	r1, r3
 8002336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233a:	fbb3 f3f1 	udiv	r3, r3, r1
 800233e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f967 	bl	8002616 <HAL_SYSTICK_Config>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e00e      	b.n	8002370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b0f      	cmp	r3, #15
 8002356:	d80a      	bhi.n	800236e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002358:	2200      	movs	r2, #0
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002360:	f000 f92f 	bl	80025c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002364:	4a06      	ldr	r2, [pc, #24]	; (8002380 <HAL_InitTick+0x5c>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000004 	.word	0x20000004
 800237c:	20000018 	.word	0x20000018
 8002380:	20000014 	.word	0x20000014

08002384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_IncTick+0x20>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_IncTick+0x24>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4413      	add	r3, r2
 8002394:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <HAL_IncTick+0x24>)
 8002396:	6013      	str	r3, [r2, #0]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000018 	.word	0x20000018
 80023a8:	20000384 	.word	0x20000384

080023ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return uwTick;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_GetTick+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000384 	.word	0x20000384

080023c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff ffee 	bl	80023ac <HAL_GetTick>
 80023d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023dc:	d005      	beq.n	80023ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <HAL_Delay+0x44>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ea:	bf00      	nop
 80023ec:	f7ff ffde 	bl	80023ac <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d8f7      	bhi.n	80023ec <HAL_Delay+0x28>
  {
  }
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000018 	.word	0x20000018

0800240c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002428:	4013      	ands	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243e:	4a04      	ldr	r2, [pc, #16]	; (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	60d3      	str	r3, [r2, #12]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <__NVIC_GetPriorityGrouping+0x18>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	f003 0307 	and.w	r3, r3, #7
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	2b00      	cmp	r3, #0
 8002480:	db0b      	blt.n	800249a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	4907      	ldr	r1, [pc, #28]	; (80024a8 <__NVIC_EnableIRQ+0x38>)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	2001      	movs	r0, #1
 8002492:	fa00 f202 	lsl.w	r2, r0, r2
 8002496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000e100 	.word	0xe000e100

080024ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	db0a      	blt.n	80024d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	490c      	ldr	r1, [pc, #48]	; (80024f8 <__NVIC_SetPriority+0x4c>)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	440b      	add	r3, r1
 80024d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d4:	e00a      	b.n	80024ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4908      	ldr	r1, [pc, #32]	; (80024fc <__NVIC_SetPriority+0x50>)
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	3b04      	subs	r3, #4
 80024e4:	0112      	lsls	r2, r2, #4
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	440b      	add	r3, r1
 80024ea:	761a      	strb	r2, [r3, #24]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000e100 	.word	0xe000e100
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f1c3 0307 	rsb	r3, r3, #7
 800251a:	2b04      	cmp	r3, #4
 800251c:	bf28      	it	cs
 800251e:	2304      	movcs	r3, #4
 8002520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3304      	adds	r3, #4
 8002526:	2b06      	cmp	r3, #6
 8002528:	d902      	bls.n	8002530 <NVIC_EncodePriority+0x30>
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3b03      	subs	r3, #3
 800252e:	e000      	b.n	8002532 <NVIC_EncodePriority+0x32>
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43da      	mvns	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	401a      	ands	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002548:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	43d9      	mvns	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	4313      	orrs	r3, r2
         );
}
 800255a:	4618      	mov	r0, r3
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002578:	d301      	bcc.n	800257e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257a:	2301      	movs	r3, #1
 800257c:	e00f      	b.n	800259e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800257e:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <SysTick_Config+0x40>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002586:	210f      	movs	r1, #15
 8002588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800258c:	f7ff ff8e 	bl	80024ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <SysTick_Config+0x40>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002596:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <SysTick_Config+0x40>)
 8002598:	2207      	movs	r2, #7
 800259a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	e000e010 	.word	0xe000e010

080025ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ff29 	bl	800240c <__NVIC_SetPriorityGrouping>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b086      	sub	sp, #24
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d4:	f7ff ff3e 	bl	8002454 <__NVIC_GetPriorityGrouping>
 80025d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	6978      	ldr	r0, [r7, #20]
 80025e0:	f7ff ff8e 	bl	8002500 <NVIC_EncodePriority>
 80025e4:	4602      	mov	r2, r0
 80025e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff5d 	bl	80024ac <__NVIC_SetPriority>
}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff31 	bl	8002470 <__NVIC_EnableIRQ>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ffa2 	bl	8002568 <SysTick_Config>
 8002624:	4603      	mov	r3, r0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002630:	b480      	push	{r7}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002642:	2300      	movs	r3, #0
 8002644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	e16b      	b.n	8002924 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800264c:	2201      	movs	r2, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	429a      	cmp	r2, r3
 8002666:	f040 815a 	bne.w	800291e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d005      	beq.n	8002682 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267e:	2b02      	cmp	r3, #2
 8002680:	d130      	bne.n	80026e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	2203      	movs	r2, #3
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b8:	2201      	movs	r2, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	f003 0201 	and.w	r2, r3, #1
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d017      	beq.n	8002720 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	2203      	movs	r2, #3
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d123      	bne.n	8002774 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	08da      	lsrs	r2, r3, #3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3208      	adds	r2, #8
 8002734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	220f      	movs	r2, #15
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	08da      	lsrs	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3208      	adds	r2, #8
 800276e:	69b9      	ldr	r1, [r7, #24]
 8002770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0203 	and.w	r2, r3, #3
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80b4 	beq.w	800291e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b60      	ldr	r3, [pc, #384]	; (800293c <HAL_GPIO_Init+0x30c>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	4a5f      	ldr	r2, [pc, #380]	; (800293c <HAL_GPIO_Init+0x30c>)
 80027c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c4:	6453      	str	r3, [r2, #68]	; 0x44
 80027c6:	4b5d      	ldr	r3, [pc, #372]	; (800293c <HAL_GPIO_Init+0x30c>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027d2:	4a5b      	ldr	r2, [pc, #364]	; (8002940 <HAL_GPIO_Init+0x310>)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	3302      	adds	r3, #2
 80027da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	220f      	movs	r2, #15
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a52      	ldr	r2, [pc, #328]	; (8002944 <HAL_GPIO_Init+0x314>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d02b      	beq.n	8002856 <HAL_GPIO_Init+0x226>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a51      	ldr	r2, [pc, #324]	; (8002948 <HAL_GPIO_Init+0x318>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d025      	beq.n	8002852 <HAL_GPIO_Init+0x222>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a50      	ldr	r2, [pc, #320]	; (800294c <HAL_GPIO_Init+0x31c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d01f      	beq.n	800284e <HAL_GPIO_Init+0x21e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4f      	ldr	r2, [pc, #316]	; (8002950 <HAL_GPIO_Init+0x320>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d019      	beq.n	800284a <HAL_GPIO_Init+0x21a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a4e      	ldr	r2, [pc, #312]	; (8002954 <HAL_GPIO_Init+0x324>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d013      	beq.n	8002846 <HAL_GPIO_Init+0x216>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a4d      	ldr	r2, [pc, #308]	; (8002958 <HAL_GPIO_Init+0x328>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00d      	beq.n	8002842 <HAL_GPIO_Init+0x212>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a4c      	ldr	r2, [pc, #304]	; (800295c <HAL_GPIO_Init+0x32c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d007      	beq.n	800283e <HAL_GPIO_Init+0x20e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a4b      	ldr	r2, [pc, #300]	; (8002960 <HAL_GPIO_Init+0x330>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d101      	bne.n	800283a <HAL_GPIO_Init+0x20a>
 8002836:	2307      	movs	r3, #7
 8002838:	e00e      	b.n	8002858 <HAL_GPIO_Init+0x228>
 800283a:	2308      	movs	r3, #8
 800283c:	e00c      	b.n	8002858 <HAL_GPIO_Init+0x228>
 800283e:	2306      	movs	r3, #6
 8002840:	e00a      	b.n	8002858 <HAL_GPIO_Init+0x228>
 8002842:	2305      	movs	r3, #5
 8002844:	e008      	b.n	8002858 <HAL_GPIO_Init+0x228>
 8002846:	2304      	movs	r3, #4
 8002848:	e006      	b.n	8002858 <HAL_GPIO_Init+0x228>
 800284a:	2303      	movs	r3, #3
 800284c:	e004      	b.n	8002858 <HAL_GPIO_Init+0x228>
 800284e:	2302      	movs	r3, #2
 8002850:	e002      	b.n	8002858 <HAL_GPIO_Init+0x228>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_GPIO_Init+0x228>
 8002856:	2300      	movs	r3, #0
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	f002 0203 	and.w	r2, r2, #3
 800285e:	0092      	lsls	r2, r2, #2
 8002860:	4093      	lsls	r3, r2
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002868:	4935      	ldr	r1, [pc, #212]	; (8002940 <HAL_GPIO_Init+0x310>)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	3302      	adds	r3, #2
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002876:	4b3b      	ldr	r3, [pc, #236]	; (8002964 <HAL_GPIO_Init+0x334>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800289a:	4a32      	ldr	r2, [pc, #200]	; (8002964 <HAL_GPIO_Init+0x334>)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028a0:	4b30      	ldr	r3, [pc, #192]	; (8002964 <HAL_GPIO_Init+0x334>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028c4:	4a27      	ldr	r2, [pc, #156]	; (8002964 <HAL_GPIO_Init+0x334>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ca:	4b26      	ldr	r3, [pc, #152]	; (8002964 <HAL_GPIO_Init+0x334>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ee:	4a1d      	ldr	r2, [pc, #116]	; (8002964 <HAL_GPIO_Init+0x334>)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028f4:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <HAL_GPIO_Init+0x334>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002918:	4a12      	ldr	r2, [pc, #72]	; (8002964 <HAL_GPIO_Init+0x334>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3301      	adds	r3, #1
 8002922:	61fb      	str	r3, [r7, #28]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	2b0f      	cmp	r3, #15
 8002928:	f67f ae90 	bls.w	800264c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	3724      	adds	r7, #36	; 0x24
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	40013800 	.word	0x40013800
 8002944:	40020000 	.word	0x40020000
 8002948:	40020400 	.word	0x40020400
 800294c:	40020800 	.word	0x40020800
 8002950:	40020c00 	.word	0x40020c00
 8002954:	40021000 	.word	0x40021000
 8002958:	40021400 	.word	0x40021400
 800295c:	40021800 	.word	0x40021800
 8002960:	40021c00 	.word	0x40021c00
 8002964:	40013c00 	.word	0x40013c00

08002968 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	887b      	ldrh	r3, [r7, #2]
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
 8002984:	e001      	b.n	800298a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800298a:	7bfb      	ldrb	r3, [r7, #15]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
 80029a4:	4613      	mov	r3, r2
 80029a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a8:	787b      	ldrb	r3, [r7, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ae:	887a      	ldrh	r2, [r7, #2]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029b4:	e003      	b.n	80029be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	041a      	lsls	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	619a      	str	r2, [r3, #24]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029dc:	887a      	ldrh	r2, [r7, #2]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4013      	ands	r3, r2
 80029e2:	041a      	lsls	r2, r3, #16
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	43d9      	mvns	r1, r3
 80029e8:	887b      	ldrh	r3, [r7, #2]
 80029ea:	400b      	ands	r3, r1
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	619a      	str	r2, [r3, #24]
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80029fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a00:	b08f      	sub	sp, #60	; 0x3c
 8002a02:	af0a      	add	r7, sp, #40	; 0x28
 8002a04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e054      	b.n	8002aba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f008 f880 	bl	800ab30 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2203      	movs	r2, #3
 8002a34:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d102      	bne.n	8002a4a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f005 fa22 	bl	8007e98 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	687e      	ldr	r6, [r7, #4]
 8002a5c:	466d      	mov	r5, sp
 8002a5e:	f106 0410 	add.w	r4, r6, #16
 8002a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a72:	1d33      	adds	r3, r6, #4
 8002a74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a76:	6838      	ldr	r0, [r7, #0]
 8002a78:	f005 f99c 	bl	8007db4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2101      	movs	r1, #1
 8002a82:	4618      	mov	r0, r3
 8002a84:	f005 fa19 	bl	8007eba <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	603b      	str	r3, [r7, #0]
 8002a8e:	687e      	ldr	r6, [r7, #4]
 8002a90:	466d      	mov	r5, sp
 8002a92:	f106 0410 	add.w	r4, r6, #16
 8002a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aa2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aa6:	1d33      	adds	r3, r6, #4
 8002aa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aaa:	6838      	ldr	r0, [r7, #0]
 8002aac:	f005 fb2c 	bl	8008108 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ac2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002ac2:	b590      	push	{r4, r7, lr}
 8002ac4:	b089      	sub	sp, #36	; 0x24
 8002ac6:	af04      	add	r7, sp, #16
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	4608      	mov	r0, r1
 8002acc:	4611      	mov	r1, r2
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	70fb      	strb	r3, [r7, #3]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	70bb      	strb	r3, [r7, #2]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_HCD_HC_Init+0x28>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e076      	b.n	8002bd8 <HAL_HCD_HC_Init+0x116>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	333d      	adds	r3, #61	; 0x3d
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3338      	adds	r3, #56	; 0x38
 8002b12:	787a      	ldrb	r2, [r7, #1]
 8002b14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002b16:	78fb      	ldrb	r3, [r7, #3]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	3340      	adds	r3, #64	; 0x40
 8002b24:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b26:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	3339      	adds	r3, #57	; 0x39
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	333f      	adds	r3, #63	; 0x3f
 8002b48:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002b4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	78ba      	ldrb	r2, [r7, #2]
 8002b52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b56:	b2d0      	uxtb	r0, r2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	333a      	adds	r3, #58	; 0x3a
 8002b64:	4602      	mov	r2, r0
 8002b66:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002b68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	da09      	bge.n	8002b84 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	333b      	adds	r3, #59	; 0x3b
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	e008      	b.n	8002b96 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	333b      	adds	r3, #59	; 0x3b
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	333c      	adds	r3, #60	; 0x3c
 8002ba4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ba8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	787c      	ldrb	r4, [r7, #1]
 8002bb0:	78ba      	ldrb	r2, [r7, #2]
 8002bb2:	78f9      	ldrb	r1, [r7, #3]
 8002bb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002bb6:	9302      	str	r3, [sp, #8]
 8002bb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	4623      	mov	r3, r4
 8002bc6:	f005 fc21 	bl	800840c <USB_HC_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd90      	pop	{r4, r7, pc}

08002be0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_HCD_HC_Halt+0x1e>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e00f      	b.n	8002c1e <HAL_HCD_HC_Halt+0x3e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f005 fe5d 	bl	80088ce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	4608      	mov	r0, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	70fb      	strb	r3, [r7, #3]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70bb      	strb	r3, [r7, #2]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	212c      	movs	r1, #44	; 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	333b      	adds	r3, #59	; 0x3b
 8002c50:	78ba      	ldrb	r2, [r7, #2]
 8002c52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	333f      	adds	r3, #63	; 0x3f
 8002c62:	787a      	ldrb	r2, [r7, #1]
 8002c64:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002c66:	7c3b      	ldrb	r3, [r7, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d112      	bne.n	8002c92 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3342      	adds	r3, #66	; 0x42
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	212c      	movs	r1, #44	; 0x2c
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	333d      	adds	r3, #61	; 0x3d
 8002c8c:	7f3a      	ldrb	r2, [r7, #28]
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	e008      	b.n	8002ca4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3342      	adds	r3, #66	; 0x42
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002ca4:	787b      	ldrb	r3, [r7, #1]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	f200 80c6 	bhi.w	8002e38 <HAL_HCD_HC_SubmitRequest+0x210>
 8002cac:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb2:	bf00      	nop
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002e25 	.word	0x08002e25
 8002cbc:	08002d29 	.word	0x08002d29
 8002cc0:	08002da7 	.word	0x08002da7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002cc4:	7c3b      	ldrb	r3, [r7, #16]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	f040 80b8 	bne.w	8002e3c <HAL_HCD_HC_SubmitRequest+0x214>
 8002ccc:	78bb      	ldrb	r3, [r7, #2]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 80b4 	bne.w	8002e3c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002cd4:	8b3b      	ldrh	r3, [r7, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d108      	bne.n	8002cec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3355      	adds	r3, #85	; 0x55
 8002ce8:	2201      	movs	r2, #1
 8002cea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002cec:	78fb      	ldrb	r3, [r7, #3]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	212c      	movs	r1, #44	; 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3355      	adds	r3, #85	; 0x55
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3342      	adds	r3, #66	; 0x42
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d12:	e093      	b.n	8002e3c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	212c      	movs	r1, #44	; 0x2c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	3342      	adds	r3, #66	; 0x42
 8002d22:	2202      	movs	r2, #2
 8002d24:	701a      	strb	r2, [r3, #0]
      break;
 8002d26:	e089      	b.n	8002e3c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002d28:	78bb      	ldrb	r3, [r7, #2]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d11d      	bne.n	8002d6a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3355      	adds	r3, #85	; 0x55
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d109      	bne.n	8002d56 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3342      	adds	r3, #66	; 0x42
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002d54:	e073      	b.n	8002e3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	3342      	adds	r3, #66	; 0x42
 8002d64:	2202      	movs	r2, #2
 8002d66:	701a      	strb	r2, [r3, #0]
      break;
 8002d68:	e069      	b.n	8002e3e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	3354      	adds	r3, #84	; 0x54
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	212c      	movs	r1, #44	; 0x2c
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	3342      	adds	r3, #66	; 0x42
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
      break;
 8002d90:	e055      	b.n	8002e3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	212c      	movs	r1, #44	; 0x2c
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3342      	adds	r3, #66	; 0x42
 8002da0:	2202      	movs	r2, #2
 8002da2:	701a      	strb	r2, [r3, #0]
      break;
 8002da4:	e04b      	b.n	8002e3e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002da6:	78bb      	ldrb	r3, [r7, #2]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d11d      	bne.n	8002de8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	212c      	movs	r1, #44	; 0x2c
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	3355      	adds	r3, #85	; 0x55
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d109      	bne.n	8002dd4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	212c      	movs	r1, #44	; 0x2c
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	4413      	add	r3, r2
 8002dcc:	3342      	adds	r3, #66	; 0x42
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002dd2:	e034      	b.n	8002e3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	212c      	movs	r1, #44	; 0x2c
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	3342      	adds	r3, #66	; 0x42
 8002de2:	2202      	movs	r2, #2
 8002de4:	701a      	strb	r2, [r3, #0]
      break;
 8002de6:	e02a      	b.n	8002e3e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	3354      	adds	r3, #84	; 0x54
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	3342      	adds	r3, #66	; 0x42
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
      break;
 8002e0e:	e016      	b.n	8002e3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3342      	adds	r3, #66	; 0x42
 8002e1e:	2202      	movs	r2, #2
 8002e20:	701a      	strb	r2, [r3, #0]
      break;
 8002e22:	e00c      	b.n	8002e3e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3342      	adds	r3, #66	; 0x42
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
      break;
 8002e36:	e002      	b.n	8002e3e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002e38:	bf00      	nop
 8002e3a:	e000      	b.n	8002e3e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002e3c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	3344      	adds	r3, #68	; 0x44
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	8b3a      	ldrh	r2, [r7, #24]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	202c      	movs	r0, #44	; 0x2c
 8002e58:	fb00 f303 	mul.w	r3, r0, r3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	334c      	adds	r3, #76	; 0x4c
 8002e60:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002e62:	78fb      	ldrb	r3, [r7, #3]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3360      	adds	r3, #96	; 0x60
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	212c      	movs	r1, #44	; 0x2c
 8002e7a:	fb01 f303 	mul.w	r3, r1, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	3350      	adds	r3, #80	; 0x50
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	3339      	adds	r3, #57	; 0x39
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	212c      	movs	r1, #44	; 0x2c
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3361      	adds	r3, #97	; 0x61
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	222c      	movs	r2, #44	; 0x2c
 8002eb2:	fb02 f303 	mul.w	r3, r2, r3
 8002eb6:	3338      	adds	r3, #56	; 0x38
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	18d1      	adds	r1, r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f005 fbb0 	bl	8008628 <USB_HC_StartXfer>
 8002ec8:	4603      	mov	r3, r0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop

08002ed4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f005 f8c9 	bl	8008082 <USB_GetMode>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	f040 80ef 	bne.w	80030d6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f005 f8ad 	bl	800805c <USB_ReadInterrupts>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80e5 	beq.w	80030d4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f005 f8a4 	bl	800805c <USB_ReadInterrupts>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f1e:	d104      	bne.n	8002f2a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f005 f894 	bl	800805c <USB_ReadInterrupts>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f3e:	d104      	bne.n	8002f4a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f005 f884 	bl	800805c <USB_ReadInterrupts>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f5e:	d104      	bne.n	8002f6a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f005 f874 	bl	800805c <USB_ReadInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d103      	bne.n	8002f86 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2202      	movs	r2, #2
 8002f84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f005 f866 	bl	800805c <USB_ReadInterrupts>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f9a:	d115      	bne.n	8002fc8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002fa4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d108      	bne.n	8002fc8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f007 fe38 	bl	800ac2c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f005 f95c 	bl	8008280 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f005 f845 	bl	800805c <USB_ReadInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fdc:	d102      	bne.n	8002fe4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f001 f9ff 	bl	80043e2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f005 f837 	bl	800805c <USB_ReadInterrupts>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d106      	bne.n	8003006 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f007 fdfb 	bl	800abf4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2208      	movs	r2, #8
 8003004:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f005 f826 	bl	800805c <USB_ReadInterrupts>
 8003010:	4603      	mov	r3, r0
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b10      	cmp	r3, #16
 8003018:	d101      	bne.n	800301e <HAL_HCD_IRQHandler+0x14a>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_HCD_IRQHandler+0x14c>
 800301e:	2300      	movs	r3, #0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d012      	beq.n	800304a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0210 	bic.w	r2, r2, #16
 8003032:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f001 f902 	bl	800423e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0210 	orr.w	r2, r2, #16
 8003048:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f005 f804 	bl	800805c <USB_ReadInterrupts>
 8003054:	4603      	mov	r3, r0
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800305e:	d13a      	bne.n	80030d6 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f005 fc21 	bl	80088ac <USB_HC_ReadInterrupt>
 800306a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	e025      	b.n	80030be <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	fa22 f303 	lsr.w	r3, r2, r3
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d018      	beq.n	80030b8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4413      	add	r3, r2
 800308e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309c:	d106      	bne.n	80030ac <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	4619      	mov	r1, r3
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f8ab 	bl	8003200 <HCD_HC_IN_IRQHandler>
 80030aa:	e005      	b.n	80030b8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	4619      	mov	r1, r3
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fcc6 	bl	8003a44 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	3301      	adds	r3, #1
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d3d4      	bcc.n	8003072 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030d0:	615a      	str	r2, [r3, #20]
 80030d2:	e000      	b.n	80030d6 <HAL_HCD_IRQHandler+0x202>
      return;
 80030d4:	bf00      	nop
    }
  }
}
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_HCD_Start+0x16>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e013      	b.n	800311a <HAL_HCD_Start+0x3e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f004 feb9 	bl	8007e76 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2101      	movs	r1, #1
 800310a:	4618      	mov	r0, r3
 800310c:	f005 f91c 	bl	8008348 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_HCD_Stop+0x16>
 8003134:	2302      	movs	r3, #2
 8003136:	e00d      	b.n	8003154 <HAL_HCD_Stop+0x32>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f005 fd1b 	bl	8008b80 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f005 f8c3 	bl	80082f4 <USB_ResetPort>
 800316e:	4603      	mov	r3, r0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	212c      	movs	r1, #44	; 0x2c
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	3360      	adds	r3, #96	; 0x60
 8003192:	781b      	ldrb	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	212c      	movs	r1, #44	; 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	3350      	adds	r3, #80	; 0x50
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f005 f907 	bl	80083e8 <USB_GetCurrentFrame>
 80031da:	4603      	mov	r3, r0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f005 f8e2 	bl	80083ba <USB_GetHostSpeed>
 80031f6:	4603      	mov	r3, r0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4413      	add	r3, r2
 8003222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b04      	cmp	r3, #4
 800322e:	d119      	bne.n	8003264 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323c:	461a      	mov	r2, r3
 800323e:	2304      	movs	r3, #4
 8003240:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4413      	add	r3, r2
 800324a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	0151      	lsls	r1, r2, #5
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	440a      	add	r2, r1
 8003258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800325c:	f043 0302 	orr.w	r3, r3, #2
 8003260:	60d3      	str	r3, [r2, #12]
 8003262:	e101      	b.n	8003468 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	4413      	add	r3, r2
 800326c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800327a:	d12b      	bne.n	80032d4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	461a      	mov	r2, r3
 800328a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800328e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	3361      	adds	r3, #97	; 0x61
 800329e:	2207      	movs	r2, #7
 80032a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	0151      	lsls	r1, r2, #5
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	440a      	add	r2, r1
 80032b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f005 fafe 	bl	80088ce <USB_HC_Halt>
 80032d2:	e0c9      	b.n	8003468 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d109      	bne.n	80032fe <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f6:	461a      	mov	r2, r3
 80032f8:	2320      	movs	r3, #32
 80032fa:	6093      	str	r3, [r2, #8]
 80032fc:	e0b4      	b.n	8003468 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b08      	cmp	r3, #8
 8003312:	d133      	bne.n	800337c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4413      	add	r3, r2
 800331c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	0151      	lsls	r1, r2, #5
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	440a      	add	r2, r1
 800332a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800332e:	f043 0302 	orr.w	r3, r3, #2
 8003332:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	212c      	movs	r1, #44	; 0x2c
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	3361      	adds	r3, #97	; 0x61
 8003342:	2205      	movs	r2, #5
 8003344:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	461a      	mov	r2, r3
 8003354:	2310      	movs	r3, #16
 8003356:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4413      	add	r3, r2
 8003360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003364:	461a      	mov	r2, r3
 8003366:	2308      	movs	r3, #8
 8003368:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f005 faaa 	bl	80088ce <USB_HC_Halt>
 800337a:	e075      	b.n	8003468 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4413      	add	r3, r2
 8003384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003392:	d134      	bne.n	80033fe <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	0151      	lsls	r1, r2, #5
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	440a      	add	r2, r1
 80033aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ae:	f043 0302 	orr.w	r3, r3, #2
 80033b2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	212c      	movs	r1, #44	; 0x2c
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	4413      	add	r3, r2
 80033c0:	3361      	adds	r3, #97	; 0x61
 80033c2:	2208      	movs	r2, #8
 80033c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d2:	461a      	mov	r2, r3
 80033d4:	2310      	movs	r3, #16
 80033d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e4:	461a      	mov	r2, r3
 80033e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ea:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	4611      	mov	r1, r2
 80033f6:	4618      	mov	r0, r3
 80033f8:	f005 fa69 	bl	80088ce <USB_HC_Halt>
 80033fc:	e034      	b.n	8003468 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4413      	add	r3, r2
 8003406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003410:	2b80      	cmp	r3, #128	; 0x80
 8003412:	d129      	bne.n	8003468 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	0151      	lsls	r1, r2, #5
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	440a      	add	r2, r1
 800342a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800342e:	f043 0302 	orr.w	r3, r3, #2
 8003432:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	212c      	movs	r1, #44	; 0x2c
 800343a:	fb01 f303 	mul.w	r3, r1, r3
 800343e:	4413      	add	r3, r2
 8003440:	3361      	adds	r3, #97	; 0x61
 8003442:	2206      	movs	r2, #6
 8003444:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	4611      	mov	r1, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f005 fa3c 	bl	80088ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4413      	add	r3, r2
 800345e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003462:	461a      	mov	r2, r3
 8003464:	2380      	movs	r3, #128	; 0x80
 8003466:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4413      	add	r3, r2
 8003470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800347a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800347e:	d122      	bne.n	80034c6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4413      	add	r3, r2
 8003488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	0151      	lsls	r1, r2, #5
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	440a      	add	r2, r1
 8003496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800349a:	f043 0302 	orr.w	r3, r3, #2
 800349e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	4611      	mov	r1, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f005 fa0f 	bl	80088ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034bc:	461a      	mov	r2, r3
 80034be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034c2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80034c4:	e2ba      	b.n	8003a3c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b01      	cmp	r3, #1
 80034da:	f040 811b 	bne.w	8003714 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d019      	beq.n	800351a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	212c      	movs	r1, #44	; 0x2c
 80034ec:	fb01 f303 	mul.w	r3, r1, r3
 80034f0:	4413      	add	r3, r2
 80034f2:	3348      	adds	r3, #72	; 0x48
 80034f4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	0159      	lsls	r1, r3, #5
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	440b      	add	r3, r1
 80034fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003508:	1ad2      	subs	r2, r2, r3
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	202c      	movs	r0, #44	; 0x2c
 8003510:	fb00 f303 	mul.w	r3, r0, r3
 8003514:	440b      	add	r3, r1
 8003516:	3350      	adds	r3, #80	; 0x50
 8003518:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	212c      	movs	r1, #44	; 0x2c
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	4413      	add	r3, r2
 8003526:	3361      	adds	r3, #97	; 0x61
 8003528:	2201      	movs	r2, #1
 800352a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	212c      	movs	r1, #44	; 0x2c
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	4413      	add	r3, r2
 8003538:	335c      	adds	r3, #92	; 0x5c
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4413      	add	r3, r2
 8003546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354a:	461a      	mov	r2, r3
 800354c:	2301      	movs	r3, #1
 800354e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	212c      	movs	r1, #44	; 0x2c
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	4413      	add	r3, r2
 800355c:	333f      	adds	r3, #63	; 0x3f
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d009      	beq.n	8003578 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	212c      	movs	r1, #44	; 0x2c
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	4413      	add	r3, r2
 8003570:	333f      	adds	r3, #63	; 0x3f
 8003572:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003574:	2b02      	cmp	r3, #2
 8003576:	d121      	bne.n	80035bc <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	0151      	lsls	r1, r2, #5
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	440a      	add	r2, r1
 800358e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003592:	f043 0302 	orr.w	r3, r3, #2
 8003596:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	4611      	mov	r1, r2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f005 f993 	bl	80088ce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b4:	461a      	mov	r2, r3
 80035b6:	2310      	movs	r3, #16
 80035b8:	6093      	str	r3, [r2, #8]
 80035ba:	e066      	b.n	800368a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	212c      	movs	r1, #44	; 0x2c
 80035c2:	fb01 f303 	mul.w	r3, r1, r3
 80035c6:	4413      	add	r3, r2
 80035c8:	333f      	adds	r3, #63	; 0x3f
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d127      	bne.n	8003620 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	0151      	lsls	r1, r2, #5
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	440a      	add	r2, r1
 80035e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035ee:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	212c      	movs	r1, #44	; 0x2c
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	3360      	adds	r3, #96	; 0x60
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	b2d9      	uxtb	r1, r3
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	202c      	movs	r0, #44	; 0x2c
 800360c:	fb00 f303 	mul.w	r3, r0, r3
 8003610:	4413      	add	r3, r2
 8003612:	3360      	adds	r3, #96	; 0x60
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f007 fb15 	bl	800ac48 <HAL_HCD_HC_NotifyURBChange_Callback>
 800361e:	e034      	b.n	800368a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	212c      	movs	r1, #44	; 0x2c
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	4413      	add	r3, r2
 800362c:	333f      	adds	r3, #63	; 0x3f
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d12a      	bne.n	800368a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	3360      	adds	r3, #96	; 0x60
 8003642:	2201      	movs	r2, #1
 8003644:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	212c      	movs	r1, #44	; 0x2c
 800364c:	fb01 f303 	mul.w	r3, r1, r3
 8003650:	4413      	add	r3, r2
 8003652:	3354      	adds	r3, #84	; 0x54
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	f083 0301 	eor.w	r3, r3, #1
 800365a:	b2d8      	uxtb	r0, r3
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	212c      	movs	r1, #44	; 0x2c
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	4413      	add	r3, r2
 8003668:	3354      	adds	r3, #84	; 0x54
 800366a:	4602      	mov	r2, r0
 800366c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	b2d9      	uxtb	r1, r3
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	202c      	movs	r0, #44	; 0x2c
 8003678:	fb00 f303 	mul.w	r3, r0, r3
 800367c:	4413      	add	r3, r2
 800367e:	3360      	adds	r3, #96	; 0x60
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f007 fadf 	bl	800ac48 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d12b      	bne.n	80036ea <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	212c      	movs	r1, #44	; 0x2c
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	3348      	adds	r3, #72	; 0x48
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	202c      	movs	r0, #44	; 0x2c
 80036a8:	fb00 f202 	mul.w	r2, r0, r2
 80036ac:	440a      	add	r2, r1
 80036ae:	3240      	adds	r2, #64	; 0x40
 80036b0:	8812      	ldrh	r2, [r2, #0]
 80036b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 81be 	beq.w	8003a3c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	212c      	movs	r1, #44	; 0x2c
 80036c6:	fb01 f303 	mul.w	r3, r1, r3
 80036ca:	4413      	add	r3, r2
 80036cc:	3354      	adds	r3, #84	; 0x54
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	f083 0301 	eor.w	r3, r3, #1
 80036d4:	b2d8      	uxtb	r0, r3
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	212c      	movs	r1, #44	; 0x2c
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	4413      	add	r3, r2
 80036e2:	3354      	adds	r3, #84	; 0x54
 80036e4:	4602      	mov	r2, r0
 80036e6:	701a      	strb	r2, [r3, #0]
}
 80036e8:	e1a8      	b.n	8003a3c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	212c      	movs	r1, #44	; 0x2c
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	4413      	add	r3, r2
 80036f6:	3354      	adds	r3, #84	; 0x54
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	f083 0301 	eor.w	r3, r3, #1
 80036fe:	b2d8      	uxtb	r0, r3
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	212c      	movs	r1, #44	; 0x2c
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	4413      	add	r3, r2
 800370c:	3354      	adds	r3, #84	; 0x54
 800370e:	4602      	mov	r2, r0
 8003710:	701a      	strb	r2, [r3, #0]
}
 8003712:	e193      	b.n	8003a3c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4413      	add	r3, r2
 800371c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b02      	cmp	r3, #2
 8003728:	f040 8106 	bne.w	8003938 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4413      	add	r3, r2
 8003734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	0151      	lsls	r1, r2, #5
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	440a      	add	r2, r1
 8003742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003746:	f023 0302 	bic.w	r3, r3, #2
 800374a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	212c      	movs	r1, #44	; 0x2c
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	4413      	add	r3, r2
 8003758:	3361      	adds	r3, #97	; 0x61
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d109      	bne.n	8003774 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	212c      	movs	r1, #44	; 0x2c
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	4413      	add	r3, r2
 800376c:	3360      	adds	r3, #96	; 0x60
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
 8003772:	e0c9      	b.n	8003908 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	212c      	movs	r1, #44	; 0x2c
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	3361      	adds	r3, #97	; 0x61
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b05      	cmp	r3, #5
 8003786:	d109      	bne.n	800379c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	212c      	movs	r1, #44	; 0x2c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	3360      	adds	r3, #96	; 0x60
 8003796:	2205      	movs	r2, #5
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	e0b5      	b.n	8003908 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	212c      	movs	r1, #44	; 0x2c
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	4413      	add	r3, r2
 80037a8:	3361      	adds	r3, #97	; 0x61
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b06      	cmp	r3, #6
 80037ae:	d009      	beq.n	80037c4 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	212c      	movs	r1, #44	; 0x2c
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	3361      	adds	r3, #97	; 0x61
 80037be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d150      	bne.n	8003866 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	212c      	movs	r1, #44	; 0x2c
 80037ca:	fb01 f303 	mul.w	r3, r1, r3
 80037ce:	4413      	add	r3, r2
 80037d0:	335c      	adds	r3, #92	; 0x5c
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	202c      	movs	r0, #44	; 0x2c
 80037dc:	fb00 f303 	mul.w	r3, r0, r3
 80037e0:	440b      	add	r3, r1
 80037e2:	335c      	adds	r3, #92	; 0x5c
 80037e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	212c      	movs	r1, #44	; 0x2c
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	335c      	adds	r3, #92	; 0x5c
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d912      	bls.n	8003820 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	212c      	movs	r1, #44	; 0x2c
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	4413      	add	r3, r2
 8003806:	335c      	adds	r3, #92	; 0x5c
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	212c      	movs	r1, #44	; 0x2c
 8003812:	fb01 f303 	mul.w	r3, r1, r3
 8003816:	4413      	add	r3, r2
 8003818:	3360      	adds	r3, #96	; 0x60
 800381a:	2204      	movs	r2, #4
 800381c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800381e:	e073      	b.n	8003908 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	212c      	movs	r1, #44	; 0x2c
 8003826:	fb01 f303 	mul.w	r3, r1, r3
 800382a:	4413      	add	r3, r2
 800382c:	3360      	adds	r3, #96	; 0x60
 800382e:	2202      	movs	r2, #2
 8003830:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4413      	add	r3, r2
 800383a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003848:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003850:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4413      	add	r3, r2
 800385a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385e:	461a      	mov	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003864:	e050      	b.n	8003908 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	212c      	movs	r1, #44	; 0x2c
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	4413      	add	r3, r2
 8003872:	3361      	adds	r3, #97	; 0x61
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b03      	cmp	r3, #3
 8003878:	d122      	bne.n	80038c0 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	212c      	movs	r1, #44	; 0x2c
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	4413      	add	r3, r2
 8003886:	3360      	adds	r3, #96	; 0x60
 8003888:	2202      	movs	r2, #2
 800388a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b8:	461a      	mov	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e023      	b.n	8003908 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	212c      	movs	r1, #44	; 0x2c
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	3361      	adds	r3, #97	; 0x61
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b07      	cmp	r3, #7
 80038d2:	d119      	bne.n	8003908 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	335c      	adds	r3, #92	; 0x5c
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	202c      	movs	r0, #44	; 0x2c
 80038ec:	fb00 f303 	mul.w	r3, r0, r3
 80038f0:	440b      	add	r3, r1
 80038f2:	335c      	adds	r3, #92	; 0x5c
 80038f4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	212c      	movs	r1, #44	; 0x2c
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	3360      	adds	r3, #96	; 0x60
 8003904:	2204      	movs	r2, #4
 8003906:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4413      	add	r3, r2
 8003910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003914:	461a      	mov	r2, r3
 8003916:	2302      	movs	r3, #2
 8003918:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	b2d9      	uxtb	r1, r3
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	202c      	movs	r0, #44	; 0x2c
 8003924:	fb00 f303 	mul.w	r3, r0, r3
 8003928:	4413      	add	r3, r2
 800392a:	3360      	adds	r3, #96	; 0x60
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f007 f989 	bl	800ac48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003936:	e081      	b.n	8003a3c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0310 	and.w	r3, r3, #16
 800394a:	2b10      	cmp	r3, #16
 800394c:	d176      	bne.n	8003a3c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	212c      	movs	r1, #44	; 0x2c
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	4413      	add	r3, r2
 800395a:	333f      	adds	r3, #63	; 0x3f
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d121      	bne.n	80039a6 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	212c      	movs	r1, #44	; 0x2c
 8003968:	fb01 f303 	mul.w	r3, r1, r3
 800396c:	4413      	add	r3, r2
 800396e:	335c      	adds	r3, #92	; 0x5c
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4413      	add	r3, r2
 800397c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	0151      	lsls	r1, r2, #5
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	440a      	add	r2, r1
 800398a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800398e:	f043 0302 	orr.w	r3, r3, #2
 8003992:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f004 ff95 	bl	80088ce <USB_HC_Halt>
 80039a4:	e041      	b.n	8003a2a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	212c      	movs	r1, #44	; 0x2c
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	333f      	adds	r3, #63	; 0x3f
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	212c      	movs	r1, #44	; 0x2c
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	4413      	add	r3, r2
 80039c6:	333f      	adds	r3, #63	; 0x3f
 80039c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d12d      	bne.n	8003a2a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	212c      	movs	r1, #44	; 0x2c
 80039d4:	fb01 f303 	mul.w	r3, r1, r3
 80039d8:	4413      	add	r3, r2
 80039da:	335c      	adds	r3, #92	; 0x5c
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d120      	bne.n	8003a2a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	212c      	movs	r1, #44	; 0x2c
 80039ee:	fb01 f303 	mul.w	r3, r1, r3
 80039f2:	4413      	add	r3, r2
 80039f4:	3361      	adds	r3, #97	; 0x61
 80039f6:	2203      	movs	r2, #3
 80039f8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	0151      	lsls	r1, r2, #5
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	440a      	add	r2, r1
 8003a10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a14:	f043 0302 	orr.w	r3, r3, #2
 8003a18:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f004 ff52 	bl	80088ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a36:	461a      	mov	r2, r3
 8003a38:	2310      	movs	r3, #16
 8003a3a:	6093      	str	r3, [r2, #8]
}
 8003a3c:	bf00      	nop
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d119      	bne.n	8003aa8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a80:	461a      	mov	r2, r3
 8003a82:	2304      	movs	r3, #4
 8003a84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	0151      	lsls	r1, r2, #5
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	440a      	add	r2, r1
 8003a9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aa0:	f043 0302 	orr.w	r3, r3, #2
 8003aa4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003aa6:	e3c6      	b.n	8004236 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d13e      	bne.n	8003b3c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aca:	461a      	mov	r2, r3
 8003acc:	2320      	movs	r3, #32
 8003ace:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	212c      	movs	r1, #44	; 0x2c
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	333d      	adds	r3, #61	; 0x3d
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	f040 83a8 	bne.w	8004236 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	212c      	movs	r1, #44	; 0x2c
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	333d      	adds	r3, #61	; 0x3d
 8003af4:	2200      	movs	r2, #0
 8003af6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	212c      	movs	r1, #44	; 0x2c
 8003afe:	fb01 f303 	mul.w	r3, r1, r3
 8003b02:	4413      	add	r3, r2
 8003b04:	3360      	adds	r3, #96	; 0x60
 8003b06:	2202      	movs	r2, #2
 8003b08:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	0151      	lsls	r1, r2, #5
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	440a      	add	r2, r1
 8003b20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b24:	f043 0302 	orr.w	r3, r3, #2
 8003b28:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f004 feca 	bl	80088ce <USB_HC_Halt>
}
 8003b3a:	e37c      	b.n	8004236 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b52:	d122      	bne.n	8003b9a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	0151      	lsls	r1, r2, #5
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	440a      	add	r2, r1
 8003b6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b6e:	f043 0302 	orr.w	r3, r3, #2
 8003b72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f004 fea5 	bl	80088ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b90:	461a      	mov	r2, r3
 8003b92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b96:	6093      	str	r3, [r2, #8]
}
 8003b98:	e34d      	b.n	8004236 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d150      	bne.n	8003c52 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	212c      	movs	r1, #44	; 0x2c
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	335c      	adds	r3, #92	; 0x5c
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b40      	cmp	r3, #64	; 0x40
 8003bd6:	d111      	bne.n	8003bfc <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	212c      	movs	r1, #44	; 0x2c
 8003bde:	fb01 f303 	mul.w	r3, r1, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	333d      	adds	r3, #61	; 0x3d
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2340      	movs	r3, #64	; 0x40
 8003bfa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	0151      	lsls	r1, r2, #5
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	440a      	add	r2, r1
 8003c12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c16:	f043 0302 	orr.w	r3, r3, #2
 8003c1a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	4611      	mov	r1, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f004 fe51 	bl	80088ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	212c      	movs	r1, #44	; 0x2c
 8003c44:	fb01 f303 	mul.w	r3, r1, r3
 8003c48:	4413      	add	r3, r2
 8003c4a:	3361      	adds	r3, #97	; 0x61
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	701a      	strb	r2, [r3, #0]
}
 8003c50:	e2f1      	b.n	8004236 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c64:	2b40      	cmp	r3, #64	; 0x40
 8003c66:	d13c      	bne.n	8003ce2 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	212c      	movs	r1, #44	; 0x2c
 8003c6e:	fb01 f303 	mul.w	r3, r1, r3
 8003c72:	4413      	add	r3, r2
 8003c74:	3361      	adds	r3, #97	; 0x61
 8003c76:	2204      	movs	r2, #4
 8003c78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	212c      	movs	r1, #44	; 0x2c
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	4413      	add	r3, r2
 8003c86:	333d      	adds	r3, #61	; 0x3d
 8003c88:	2201      	movs	r2, #1
 8003c8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	212c      	movs	r1, #44	; 0x2c
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	4413      	add	r3, r2
 8003c98:	335c      	adds	r3, #92	; 0x5c
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	0151      	lsls	r1, r2, #5
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	440a      	add	r2, r1
 8003cb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cb8:	f043 0302 	orr.w	r3, r3, #2
 8003cbc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f004 fe00 	bl	80088ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cda:	461a      	mov	r2, r3
 8003cdc:	2340      	movs	r3, #64	; 0x40
 8003cde:	6093      	str	r3, [r2, #8]
}
 8003ce0:	e2a9      	b.n	8004236 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d12a      	bne.n	8003d4e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d04:	461a      	mov	r2, r3
 8003d06:	2308      	movs	r3, #8
 8003d08:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	0151      	lsls	r1, r2, #5
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	440a      	add	r2, r1
 8003d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d24:	f043 0302 	orr.w	r3, r3, #2
 8003d28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	4611      	mov	r1, r2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f004 fdca 	bl	80088ce <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	212c      	movs	r1, #44	; 0x2c
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	4413      	add	r3, r2
 8003d46:	3361      	adds	r3, #97	; 0x61
 8003d48:	2205      	movs	r2, #5
 8003d4a:	701a      	strb	r2, [r3, #0]
}
 8003d4c:	e273      	b.n	8004236 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d150      	bne.n	8003e06 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	212c      	movs	r1, #44	; 0x2c
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	335c      	adds	r3, #92	; 0x5c
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	212c      	movs	r1, #44	; 0x2c
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	3361      	adds	r3, #97	; 0x61
 8003d84:	2203      	movs	r2, #3
 8003d86:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	212c      	movs	r1, #44	; 0x2c
 8003d8e:	fb01 f303 	mul.w	r3, r1, r3
 8003d92:	4413      	add	r3, r2
 8003d94:	333d      	adds	r3, #61	; 0x3d
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d112      	bne.n	8003dc2 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	212c      	movs	r1, #44	; 0x2c
 8003da2:	fb01 f303 	mul.w	r3, r1, r3
 8003da6:	4413      	add	r3, r2
 8003da8:	333c      	adds	r3, #60	; 0x3c
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d108      	bne.n	8003dc2 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	212c      	movs	r1, #44	; 0x2c
 8003db6:	fb01 f303 	mul.w	r3, r1, r3
 8003dba:	4413      	add	r3, r2
 8003dbc:	333d      	adds	r3, #61	; 0x3d
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	0151      	lsls	r1, r2, #5
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	440a      	add	r2, r1
 8003dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ddc:	f043 0302 	orr.w	r3, r3, #2
 8003de0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f004 fd6e 	bl	80088ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2310      	movs	r3, #16
 8003e02:	6093      	str	r3, [r2, #8]
}
 8003e04:	e217      	b.n	8004236 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e18:	2b80      	cmp	r3, #128	; 0x80
 8003e1a:	d174      	bne.n	8003f06 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d121      	bne.n	8003e68 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	212c      	movs	r1, #44	; 0x2c
 8003e2a:	fb01 f303 	mul.w	r3, r1, r3
 8003e2e:	4413      	add	r3, r2
 8003e30:	3361      	adds	r3, #97	; 0x61
 8003e32:	2206      	movs	r2, #6
 8003e34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	0151      	lsls	r1, r2, #5
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	440a      	add	r2, r1
 8003e4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e50:	f043 0302 	orr.w	r3, r3, #2
 8003e54:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	4611      	mov	r1, r2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f004 fd34 	bl	80088ce <USB_HC_Halt>
 8003e66:	e044      	b.n	8003ef2 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	212c      	movs	r1, #44	; 0x2c
 8003e6e:	fb01 f303 	mul.w	r3, r1, r3
 8003e72:	4413      	add	r3, r2
 8003e74:	335c      	adds	r3, #92	; 0x5c
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	202c      	movs	r0, #44	; 0x2c
 8003e80:	fb00 f303 	mul.w	r3, r0, r3
 8003e84:	440b      	add	r3, r1
 8003e86:	335c      	adds	r3, #92	; 0x5c
 8003e88:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	212c      	movs	r1, #44	; 0x2c
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	335c      	adds	r3, #92	; 0x5c
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d920      	bls.n	8003ee0 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	212c      	movs	r1, #44	; 0x2c
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	335c      	adds	r3, #92	; 0x5c
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	212c      	movs	r1, #44	; 0x2c
 8003eb6:	fb01 f303 	mul.w	r3, r1, r3
 8003eba:	4413      	add	r3, r2
 8003ebc:	3360      	adds	r3, #96	; 0x60
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	b2d9      	uxtb	r1, r3
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	202c      	movs	r0, #44	; 0x2c
 8003ecc:	fb00 f303 	mul.w	r3, r0, r3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3360      	adds	r3, #96	; 0x60
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f006 feb5 	bl	800ac48 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ede:	e008      	b.n	8003ef2 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	212c      	movs	r1, #44	; 0x2c
 8003ee6:	fb01 f303 	mul.w	r3, r1, r3
 8003eea:	4413      	add	r3, r2
 8003eec:	3360      	adds	r3, #96	; 0x60
 8003eee:	2202      	movs	r2, #2
 8003ef0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003efe:	461a      	mov	r2, r3
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	6093      	str	r3, [r2, #8]
}
 8003f04:	e197      	b.n	8004236 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1c:	d134      	bne.n	8003f88 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	0151      	lsls	r1, r2, #5
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	440a      	add	r2, r1
 8003f34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f38:	f043 0302 	orr.w	r3, r3, #2
 8003f3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f004 fcc0 	bl	80088ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2310      	movs	r3, #16
 8003f5e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	212c      	movs	r1, #44	; 0x2c
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	4413      	add	r3, r2
 8003f80:	3361      	adds	r3, #97	; 0x61
 8003f82:	2208      	movs	r2, #8
 8003f84:	701a      	strb	r2, [r3, #0]
}
 8003f86:	e156      	b.n	8004236 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	f040 814b 	bne.w	8004236 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	0151      	lsls	r1, r2, #5
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	440a      	add	r2, r1
 8003fb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fba:	f023 0302 	bic.w	r3, r3, #2
 8003fbe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	212c      	movs	r1, #44	; 0x2c
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	3361      	adds	r3, #97	; 0x61
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d179      	bne.n	80040c8 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	212c      	movs	r1, #44	; 0x2c
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	3360      	adds	r3, #96	; 0x60
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	212c      	movs	r1, #44	; 0x2c
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	333f      	adds	r3, #63	; 0x3f
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d00a      	beq.n	8004010 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	212c      	movs	r1, #44	; 0x2c
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	4413      	add	r3, r2
 8004006:	333f      	adds	r3, #63	; 0x3f
 8004008:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800400a:	2b03      	cmp	r3, #3
 800400c:	f040 80fc 	bne.w	8004208 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d142      	bne.n	800409e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	212c      	movs	r1, #44	; 0x2c
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	4413      	add	r3, r2
 8004024:	334c      	adds	r3, #76	; 0x4c
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80ed 	beq.w	8004208 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	212c      	movs	r1, #44	; 0x2c
 8004034:	fb01 f303 	mul.w	r3, r1, r3
 8004038:	4413      	add	r3, r2
 800403a:	334c      	adds	r3, #76	; 0x4c
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	202c      	movs	r0, #44	; 0x2c
 8004044:	fb00 f202 	mul.w	r2, r0, r2
 8004048:	440a      	add	r2, r1
 800404a:	3240      	adds	r2, #64	; 0x40
 800404c:	8812      	ldrh	r2, [r2, #0]
 800404e:	4413      	add	r3, r2
 8004050:	3b01      	subs	r3, #1
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	202c      	movs	r0, #44	; 0x2c
 8004058:	fb00 f202 	mul.w	r2, r0, r2
 800405c:	440a      	add	r2, r1
 800405e:	3240      	adds	r2, #64	; 0x40
 8004060:	8812      	ldrh	r2, [r2, #0]
 8004062:	fbb3 f3f2 	udiv	r3, r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80ca 	beq.w	8004208 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	212c      	movs	r1, #44	; 0x2c
 800407a:	fb01 f303 	mul.w	r3, r1, r3
 800407e:	4413      	add	r3, r2
 8004080:	3355      	adds	r3, #85	; 0x55
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	f083 0301 	eor.w	r3, r3, #1
 8004088:	b2d8      	uxtb	r0, r3
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	212c      	movs	r1, #44	; 0x2c
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	4413      	add	r3, r2
 8004096:	3355      	adds	r3, #85	; 0x55
 8004098:	4602      	mov	r2, r0
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	e0b4      	b.n	8004208 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	212c      	movs	r1, #44	; 0x2c
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	3355      	adds	r3, #85	; 0x55
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	f083 0301 	eor.w	r3, r3, #1
 80040b2:	b2d8      	uxtb	r0, r3
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	212c      	movs	r1, #44	; 0x2c
 80040ba:	fb01 f303 	mul.w	r3, r1, r3
 80040be:	4413      	add	r3, r2
 80040c0:	3355      	adds	r3, #85	; 0x55
 80040c2:	4602      	mov	r2, r0
 80040c4:	701a      	strb	r2, [r3, #0]
 80040c6:	e09f      	b.n	8004208 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	212c      	movs	r1, #44	; 0x2c
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	3361      	adds	r3, #97	; 0x61
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d109      	bne.n	80040f0 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	212c      	movs	r1, #44	; 0x2c
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	4413      	add	r3, r2
 80040e8:	3360      	adds	r3, #96	; 0x60
 80040ea:	2202      	movs	r2, #2
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e08b      	b.n	8004208 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	212c      	movs	r1, #44	; 0x2c
 80040f6:	fb01 f303 	mul.w	r3, r1, r3
 80040fa:	4413      	add	r3, r2
 80040fc:	3361      	adds	r3, #97	; 0x61
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b04      	cmp	r3, #4
 8004102:	d109      	bne.n	8004118 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	212c      	movs	r1, #44	; 0x2c
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	4413      	add	r3, r2
 8004110:	3360      	adds	r3, #96	; 0x60
 8004112:	2202      	movs	r2, #2
 8004114:	701a      	strb	r2, [r3, #0]
 8004116:	e077      	b.n	8004208 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	212c      	movs	r1, #44	; 0x2c
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	4413      	add	r3, r2
 8004124:	3361      	adds	r3, #97	; 0x61
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b05      	cmp	r3, #5
 800412a:	d109      	bne.n	8004140 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	212c      	movs	r1, #44	; 0x2c
 8004132:	fb01 f303 	mul.w	r3, r1, r3
 8004136:	4413      	add	r3, r2
 8004138:	3360      	adds	r3, #96	; 0x60
 800413a:	2205      	movs	r2, #5
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	e063      	b.n	8004208 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	212c      	movs	r1, #44	; 0x2c
 8004146:	fb01 f303 	mul.w	r3, r1, r3
 800414a:	4413      	add	r3, r2
 800414c:	3361      	adds	r3, #97	; 0x61
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b06      	cmp	r3, #6
 8004152:	d009      	beq.n	8004168 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	212c      	movs	r1, #44	; 0x2c
 800415a:	fb01 f303 	mul.w	r3, r1, r3
 800415e:	4413      	add	r3, r2
 8004160:	3361      	adds	r3, #97	; 0x61
 8004162:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004164:	2b08      	cmp	r3, #8
 8004166:	d14f      	bne.n	8004208 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	212c      	movs	r1, #44	; 0x2c
 800416e:	fb01 f303 	mul.w	r3, r1, r3
 8004172:	4413      	add	r3, r2
 8004174:	335c      	adds	r3, #92	; 0x5c
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	202c      	movs	r0, #44	; 0x2c
 8004180:	fb00 f303 	mul.w	r3, r0, r3
 8004184:	440b      	add	r3, r1
 8004186:	335c      	adds	r3, #92	; 0x5c
 8004188:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	212c      	movs	r1, #44	; 0x2c
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	4413      	add	r3, r2
 8004196:	335c      	adds	r3, #92	; 0x5c
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d912      	bls.n	80041c4 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	212c      	movs	r1, #44	; 0x2c
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	335c      	adds	r3, #92	; 0x5c
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	212c      	movs	r1, #44	; 0x2c
 80041b6:	fb01 f303 	mul.w	r3, r1, r3
 80041ba:	4413      	add	r3, r2
 80041bc:	3360      	adds	r3, #96	; 0x60
 80041be:	2204      	movs	r2, #4
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	e021      	b.n	8004208 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	212c      	movs	r1, #44	; 0x2c
 80041ca:	fb01 f303 	mul.w	r3, r1, r3
 80041ce:	4413      	add	r3, r2
 80041d0:	3360      	adds	r3, #96	; 0x60
 80041d2:	2202      	movs	r2, #2
 80041d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041ec:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041f4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004202:	461a      	mov	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	4413      	add	r3, r2
 8004210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004214:	461a      	mov	r2, r3
 8004216:	2302      	movs	r3, #2
 8004218:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	b2d9      	uxtb	r1, r3
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	202c      	movs	r0, #44	; 0x2c
 8004224:	fb00 f303 	mul.w	r3, r0, r3
 8004228:	4413      	add	r3, r2
 800422a:	3360      	adds	r3, #96	; 0x60
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f006 fd09 	bl	800ac48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004236:	bf00      	nop
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b08a      	sub	sp, #40	; 0x28
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	0c5b      	lsrs	r3, r3, #17
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004272:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d004      	beq.n	8004284 <HCD_RXQLVL_IRQHandler+0x46>
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b05      	cmp	r3, #5
 800427e:	f000 80a9 	beq.w	80043d4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004282:	e0aa      	b.n	80043da <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80a6 	beq.w	80043d8 <HCD_RXQLVL_IRQHandler+0x19a>
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	212c      	movs	r1, #44	; 0x2c
 8004292:	fb01 f303 	mul.w	r3, r1, r3
 8004296:	4413      	add	r3, r2
 8004298:	3344      	adds	r3, #68	; 0x44
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 809b 	beq.w	80043d8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	212c      	movs	r1, #44	; 0x2c
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	4413      	add	r3, r2
 80042ae:	3350      	adds	r3, #80	; 0x50
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	441a      	add	r2, r3
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	202c      	movs	r0, #44	; 0x2c
 80042bc:	fb00 f303 	mul.w	r3, r0, r3
 80042c0:	440b      	add	r3, r1
 80042c2:	334c      	adds	r3, #76	; 0x4c
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d87a      	bhi.n	80043c0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	212c      	movs	r1, #44	; 0x2c
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	4413      	add	r3, r2
 80042da:	3344      	adds	r3, #68	; 0x44
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	b292      	uxth	r2, r2
 80042e2:	4619      	mov	r1, r3
 80042e4:	f003 fe91 	bl	800800a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	212c      	movs	r1, #44	; 0x2c
 80042ee:	fb01 f303 	mul.w	r3, r1, r3
 80042f2:	4413      	add	r3, r2
 80042f4:	3344      	adds	r3, #68	; 0x44
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	441a      	add	r2, r3
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	202c      	movs	r0, #44	; 0x2c
 8004302:	fb00 f303 	mul.w	r3, r0, r3
 8004306:	440b      	add	r3, r1
 8004308:	3344      	adds	r3, #68	; 0x44
 800430a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	212c      	movs	r1, #44	; 0x2c
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4413      	add	r3, r2
 8004318:	3350      	adds	r3, #80	; 0x50
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	441a      	add	r2, r3
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	202c      	movs	r0, #44	; 0x2c
 8004326:	fb00 f303 	mul.w	r3, r0, r3
 800432a:	440b      	add	r3, r1
 800432c:	3350      	adds	r3, #80	; 0x50
 800432e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	4413      	add	r3, r2
 8004338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	0cdb      	lsrs	r3, r3, #19
 8004340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004344:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	212c      	movs	r1, #44	; 0x2c
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	4413      	add	r3, r2
 8004352:	3340      	adds	r3, #64	; 0x40
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4293      	cmp	r3, r2
 800435c:	d13c      	bne.n	80043d8 <HCD_RXQLVL_IRQHandler+0x19a>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d039      	beq.n	80043d8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	4413      	add	r3, r2
 800436c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800437a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004382:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	4413      	add	r3, r2
 800438c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004390:	461a      	mov	r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	212c      	movs	r1, #44	; 0x2c
 800439c:	fb01 f303 	mul.w	r3, r1, r3
 80043a0:	4413      	add	r3, r2
 80043a2:	3354      	adds	r3, #84	; 0x54
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	f083 0301 	eor.w	r3, r3, #1
 80043aa:	b2d8      	uxtb	r0, r3
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	212c      	movs	r1, #44	; 0x2c
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	4413      	add	r3, r2
 80043b8:	3354      	adds	r3, #84	; 0x54
 80043ba:	4602      	mov	r2, r0
 80043bc:	701a      	strb	r2, [r3, #0]
      break;
 80043be:	e00b      	b.n	80043d8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	212c      	movs	r1, #44	; 0x2c
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	4413      	add	r3, r2
 80043cc:	3360      	adds	r3, #96	; 0x60
 80043ce:	2204      	movs	r2, #4
 80043d0:	701a      	strb	r2, [r3, #0]
      break;
 80043d2:	e001      	b.n	80043d8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80043d4:	bf00      	nop
 80043d6:	e000      	b.n	80043da <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80043d8:	bf00      	nop
  }
}
 80043da:	bf00      	nop
 80043dc:	3728      	adds	r7, #40	; 0x28
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b086      	sub	sp, #24
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800440e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b02      	cmp	r3, #2
 8004418:	d10b      	bne.n	8004432 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b01      	cmp	r3, #1
 8004422:	d102      	bne.n	800442a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f006 fbf3 	bl	800ac10 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f043 0302 	orr.w	r3, r3, #2
 8004430:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b08      	cmp	r3, #8
 800443a:	d132      	bne.n	80044a2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f043 0308 	orr.w	r3, r3, #8
 8004442:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b04      	cmp	r3, #4
 800444c:	d126      	bne.n	800449c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d113      	bne.n	800447e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800445c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004460:	d106      	bne.n	8004470 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2102      	movs	r1, #2
 8004468:	4618      	mov	r0, r3
 800446a:	f003 ff09 	bl	8008280 <USB_InitFSLSPClkSel>
 800446e:	e011      	b.n	8004494 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2101      	movs	r1, #1
 8004476:	4618      	mov	r0, r3
 8004478:	f003 ff02 	bl	8008280 <USB_InitFSLSPClkSel>
 800447c:	e00a      	b.n	8004494 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d106      	bne.n	8004494 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800448c:	461a      	mov	r2, r3
 800448e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004492:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f006 fbe5 	bl	800ac64 <HAL_HCD_PortEnabled_Callback>
 800449a:	e002      	b.n	80044a2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f006 fbef 	bl	800ac80 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d103      	bne.n	80044b4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f043 0320 	orr.w	r3, r3, #32
 80044b2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044ba:	461a      	mov	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	6013      	str	r3, [r2, #0]
}
 80044c0:	bf00      	nop
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e12b      	b.n	8004732 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fc feb8 	bl	8001264 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2224      	movs	r2, #36	; 0x24
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0201 	bic.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800451a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800452a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800452c:	f001 fea6 	bl	800627c <HAL_RCC_GetPCLK1Freq>
 8004530:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4a81      	ldr	r2, [pc, #516]	; (800473c <HAL_I2C_Init+0x274>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d807      	bhi.n	800454c <HAL_I2C_Init+0x84>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4a80      	ldr	r2, [pc, #512]	; (8004740 <HAL_I2C_Init+0x278>)
 8004540:	4293      	cmp	r3, r2
 8004542:	bf94      	ite	ls
 8004544:	2301      	movls	r3, #1
 8004546:	2300      	movhi	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	e006      	b.n	800455a <HAL_I2C_Init+0x92>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4a7d      	ldr	r2, [pc, #500]	; (8004744 <HAL_I2C_Init+0x27c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	bf94      	ite	ls
 8004554:	2301      	movls	r3, #1
 8004556:	2300      	movhi	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e0e7      	b.n	8004732 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4a78      	ldr	r2, [pc, #480]	; (8004748 <HAL_I2C_Init+0x280>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	0c9b      	lsrs	r3, r3, #18
 800456c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	4a6a      	ldr	r2, [pc, #424]	; (800473c <HAL_I2C_Init+0x274>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d802      	bhi.n	800459c <HAL_I2C_Init+0xd4>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	3301      	adds	r3, #1
 800459a:	e009      	b.n	80045b0 <HAL_I2C_Init+0xe8>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045a2:	fb02 f303 	mul.w	r3, r2, r3
 80045a6:	4a69      	ldr	r2, [pc, #420]	; (800474c <HAL_I2C_Init+0x284>)
 80045a8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ac:	099b      	lsrs	r3, r3, #6
 80045ae:	3301      	adds	r3, #1
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6812      	ldr	r2, [r2, #0]
 80045b4:	430b      	orrs	r3, r1
 80045b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	495c      	ldr	r1, [pc, #368]	; (800473c <HAL_I2C_Init+0x274>)
 80045cc:	428b      	cmp	r3, r1
 80045ce:	d819      	bhi.n	8004604 <HAL_I2C_Init+0x13c>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	1e59      	subs	r1, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	fbb1 f3f3 	udiv	r3, r1, r3
 80045de:	1c59      	adds	r1, r3, #1
 80045e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045e4:	400b      	ands	r3, r1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_I2C_Init+0x138>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	1e59      	subs	r1, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80045f8:	3301      	adds	r3, #1
 80045fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045fe:	e051      	b.n	80046a4 <HAL_I2C_Init+0x1dc>
 8004600:	2304      	movs	r3, #4
 8004602:	e04f      	b.n	80046a4 <HAL_I2C_Init+0x1dc>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d111      	bne.n	8004630 <HAL_I2C_Init+0x168>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	1e58      	subs	r0, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6859      	ldr	r1, [r3, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	440b      	add	r3, r1
 800461a:	fbb0 f3f3 	udiv	r3, r0, r3
 800461e:	3301      	adds	r3, #1
 8004620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004624:	2b00      	cmp	r3, #0
 8004626:	bf0c      	ite	eq
 8004628:	2301      	moveq	r3, #1
 800462a:	2300      	movne	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	e012      	b.n	8004656 <HAL_I2C_Init+0x18e>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	1e58      	subs	r0, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6859      	ldr	r1, [r3, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	0099      	lsls	r1, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	fbb0 f3f3 	udiv	r3, r0, r3
 8004646:	3301      	adds	r3, #1
 8004648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf0c      	ite	eq
 8004650:	2301      	moveq	r3, #1
 8004652:	2300      	movne	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_I2C_Init+0x196>
 800465a:	2301      	movs	r3, #1
 800465c:	e022      	b.n	80046a4 <HAL_I2C_Init+0x1dc>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10e      	bne.n	8004684 <HAL_I2C_Init+0x1bc>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1e58      	subs	r0, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6859      	ldr	r1, [r3, #4]
 800466e:	460b      	mov	r3, r1
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	440b      	add	r3, r1
 8004674:	fbb0 f3f3 	udiv	r3, r0, r3
 8004678:	3301      	adds	r3, #1
 800467a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004682:	e00f      	b.n	80046a4 <HAL_I2C_Init+0x1dc>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	1e58      	subs	r0, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6859      	ldr	r1, [r3, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	0099      	lsls	r1, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	fbb0 f3f3 	udiv	r3, r0, r3
 800469a:	3301      	adds	r3, #1
 800469c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	6809      	ldr	r1, [r1, #0]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69da      	ldr	r2, [r3, #28]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6911      	ldr	r1, [r2, #16]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68d2      	ldr	r2, [r2, #12]
 80046de:	4311      	orrs	r1, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	430b      	orrs	r3, r1
 80046e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	000186a0 	.word	0x000186a0
 8004740:	001e847f 	.word	0x001e847f
 8004744:	003d08ff 	.word	0x003d08ff
 8004748:	431bde83 	.word	0x431bde83
 800474c:	10624dd3 	.word	0x10624dd3

08004750 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08c      	sub	sp, #48	; 0x30
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	4608      	mov	r0, r1
 800475a:	4611      	mov	r1, r2
 800475c:	461a      	mov	r2, r3
 800475e:	4603      	mov	r3, r0
 8004760:	817b      	strh	r3, [r7, #10]
 8004762:	460b      	mov	r3, r1
 8004764:	813b      	strh	r3, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800476a:	f7fd fe1f 	bl	80023ac <HAL_GetTick>
 800476e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b20      	cmp	r3, #32
 800477a:	f040 8208 	bne.w	8004b8e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	2319      	movs	r3, #25
 8004784:	2201      	movs	r2, #1
 8004786:	497b      	ldr	r1, [pc, #492]	; (8004974 <HAL_I2C_Mem_Read+0x224>)
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 faef 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004794:	2302      	movs	r3, #2
 8004796:	e1fb      	b.n	8004b90 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_I2C_Mem_Read+0x56>
 80047a2:	2302      	movs	r3, #2
 80047a4:	e1f4      	b.n	8004b90 <HAL_I2C_Mem_Read+0x440>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d007      	beq.n	80047cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2222      	movs	r2, #34	; 0x22
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2240      	movs	r2, #64	; 0x40
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80047fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4a5b      	ldr	r2, [pc, #364]	; (8004978 <HAL_I2C_Mem_Read+0x228>)
 800480c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800480e:	88f8      	ldrh	r0, [r7, #6]
 8004810:	893a      	ldrh	r2, [r7, #8]
 8004812:	8979      	ldrh	r1, [r7, #10]
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	9301      	str	r3, [sp, #4]
 8004818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	4603      	mov	r3, r0
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f9bc 	bl	8004b9c <I2C_RequestMemoryRead>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e1b0      	b.n	8004b90 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	d113      	bne.n	800485e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004836:	2300      	movs	r3, #0
 8004838:	623b      	str	r3, [r7, #32]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	623b      	str	r3, [r7, #32]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	623b      	str	r3, [r7, #32]
 800484a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e184      	b.n	8004b68 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004862:	2b01      	cmp	r3, #1
 8004864:	d11b      	bne.n	800489e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004874:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004876:	2300      	movs	r3, #0
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	61fb      	str	r3, [r7, #28]
 800488a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	e164      	b.n	8004b68 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d11b      	bne.n	80048de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c6:	2300      	movs	r3, #0
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	61bb      	str	r3, [r7, #24]
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	e144      	b.n	8004b68 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048f4:	e138      	b.n	8004b68 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	f200 80f1 	bhi.w	8004ae2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004904:	2b01      	cmp	r3, #1
 8004906:	d123      	bne.n	8004950 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800490a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 fb44 	bl	8004f9a <I2C_WaitOnRXNEFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e139      	b.n	8004b90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800494e:	e10b      	b.n	8004b68 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004954:	2b02      	cmp	r3, #2
 8004956:	d14e      	bne.n	80049f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495e:	2200      	movs	r2, #0
 8004960:	4906      	ldr	r1, [pc, #24]	; (800497c <HAL_I2C_Mem_Read+0x22c>)
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fa02 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e10e      	b.n	8004b90 <HAL_I2C_Mem_Read+0x440>
 8004972:	bf00      	nop
 8004974:	00100002 	.word	0x00100002
 8004978:	ffff0000 	.word	0xffff0000
 800497c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800498e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049f4:	e0b8      	b.n	8004b68 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	2200      	movs	r2, #0
 80049fe:	4966      	ldr	r1, [pc, #408]	; (8004b98 <HAL_I2C_Mem_Read+0x448>)
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 f9b3 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0bf      	b.n	8004b90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	2200      	movs	r2, #0
 8004a5a:	494f      	ldr	r1, [pc, #316]	; (8004b98 <HAL_I2C_Mem_Read+0x448>)
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f985 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e091      	b.n	8004b90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ae0:	e042      	b.n	8004b68 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 fa57 	bl	8004f9a <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e04c      	b.n	8004b90 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d118      	bne.n	8004b68 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f47f aec2 	bne.w	80048f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e000      	b.n	8004b90 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b8e:	2302      	movs	r3, #2
  }
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3728      	adds	r7, #40	; 0x28
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	00010004 	.word	0x00010004

08004b9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af02      	add	r7, sp, #8
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	4608      	mov	r0, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4603      	mov	r3, r0
 8004bac:	817b      	strh	r3, [r7, #10]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	813b      	strh	r3, [r7, #8]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bc4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f8c2 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00d      	beq.n	8004c0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfc:	d103      	bne.n	8004c06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e0aa      	b.n	8004d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c0a:	897b      	ldrh	r3, [r7, #10]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	6a3a      	ldr	r2, [r7, #32]
 8004c1e:	4952      	ldr	r1, [pc, #328]	; (8004d68 <I2C_RequestMemoryRead+0x1cc>)
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f8fa 	bl	8004e1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e097      	b.n	8004d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c48:	6a39      	ldr	r1, [r7, #32]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 f964 	bl	8004f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00d      	beq.n	8004c72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d107      	bne.n	8004c6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e076      	b.n	8004d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d105      	bne.n	8004c84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c78:	893b      	ldrh	r3, [r7, #8]
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	611a      	str	r2, [r3, #16]
 8004c82:	e021      	b.n	8004cc8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c84:	893b      	ldrh	r3, [r7, #8]
 8004c86:	0a1b      	lsrs	r3, r3, #8
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c94:	6a39      	ldr	r1, [r7, #32]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f93e 	bl	8004f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00d      	beq.n	8004cbe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d107      	bne.n	8004cba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e050      	b.n	8004d60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cbe:	893b      	ldrh	r3, [r7, #8]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cca:	6a39      	ldr	r1, [r7, #32]
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 f923 	bl	8004f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00d      	beq.n	8004cf4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d107      	bne.n	8004cf0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e035      	b.n	8004d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f82b 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00d      	beq.n	8004d38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d2a:	d103      	bne.n	8004d34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e013      	b.n	8004d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d38:	897b      	ldrh	r3, [r7, #10]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	6a3a      	ldr	r2, [r7, #32]
 8004d4c:	4906      	ldr	r1, [pc, #24]	; (8004d68 <I2C_RequestMemoryRead+0x1cc>)
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f863 	bl	8004e1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	00010002 	.word	0x00010002

08004d6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	603b      	str	r3, [r7, #0]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d7c:	e025      	b.n	8004dca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d84:	d021      	beq.n	8004dca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d86:	f7fd fb11 	bl	80023ac <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d302      	bcc.n	8004d9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d116      	bne.n	8004dca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f043 0220 	orr.w	r2, r3, #32
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e023      	b.n	8004e12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	0c1b      	lsrs	r3, r3, #16
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d10d      	bne.n	8004df0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	43da      	mvns	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4013      	ands	r3, r2
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bf0c      	ite	eq
 8004de6:	2301      	moveq	r3, #1
 8004de8:	2300      	movne	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	e00c      	b.n	8004e0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	43da      	mvns	r2, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bf0c      	ite	eq
 8004e02:	2301      	moveq	r3, #1
 8004e04:	2300      	movne	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d0b6      	beq.n	8004d7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	607a      	str	r2, [r7, #4]
 8004e26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e28:	e051      	b.n	8004ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e38:	d123      	bne.n	8004e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f043 0204 	orr.w	r2, r3, #4
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e046      	b.n	8004f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e88:	d021      	beq.n	8004ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e8a:	f7fd fa8f 	bl	80023ac <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d302      	bcc.n	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d116      	bne.n	8004ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f043 0220 	orr.w	r2, r3, #32
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e020      	b.n	8004f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	0c1b      	lsrs	r3, r3, #16
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d10c      	bne.n	8004ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	43da      	mvns	r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	bf14      	ite	ne
 8004eea:	2301      	movne	r3, #1
 8004eec:	2300      	moveq	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	e00b      	b.n	8004f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	43da      	mvns	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4013      	ands	r3, r2
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	bf14      	ite	ne
 8004f04:	2301      	movne	r3, #1
 8004f06:	2300      	moveq	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d18d      	bne.n	8004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f24:	e02d      	b.n	8004f82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 f88d 	bl	8005046 <I2C_IsAcknowledgeFailed>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e02d      	b.n	8004f92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f3c:	d021      	beq.n	8004f82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3e:	f7fd fa35 	bl	80023ac <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d302      	bcc.n	8004f54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d116      	bne.n	8004f82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f043 0220 	orr.w	r2, r3, #32
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e007      	b.n	8004f92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8c:	2b80      	cmp	r3, #128	; 0x80
 8004f8e:	d1ca      	bne.n	8004f26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fa6:	e042      	b.n	800502e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2b10      	cmp	r3, #16
 8004fb4:	d119      	bne.n	8004fea <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f06f 0210 	mvn.w	r2, #16
 8004fbe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e029      	b.n	800503e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fea:	f7fd f9df 	bl	80023ac <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d302      	bcc.n	8005000 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d116      	bne.n	800502e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2220      	movs	r2, #32
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f043 0220 	orr.w	r2, r3, #32
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e007      	b.n	800503e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005038:	2b40      	cmp	r3, #64	; 0x40
 800503a:	d1b5      	bne.n	8004fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800505c:	d11b      	bne.n	8005096 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005066:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f043 0204 	orr.w	r2, r3, #4
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e128      	b.n	8005308 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d109      	bne.n	80050d6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a90      	ldr	r2, [pc, #576]	; (8005310 <HAL_I2S_Init+0x26c>)
 80050ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7fc f967 	bl	80013a4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2202      	movs	r2, #2
 80050da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6812      	ldr	r2, [r2, #0]
 80050e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80050ec:	f023 030f 	bic.w	r3, r3, #15
 80050f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2202      	movs	r2, #2
 80050f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d060      	beq.n	80051c4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d102      	bne.n	8005110 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800510a:	2310      	movs	r3, #16
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	e001      	b.n	8005114 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005110:	2320      	movs	r3, #32
 8005112:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b20      	cmp	r3, #32
 800511a:	d802      	bhi.n	8005122 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005122:	2001      	movs	r0, #1
 8005124:	f001 f9a0 	bl	8006468 <HAL_RCCEx_GetPeriphCLKFreq>
 8005128:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005132:	d125      	bne.n	8005180 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d010      	beq.n	800515e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	fbb2 f2f3 	udiv	r2, r2, r3
 8005146:	4613      	mov	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	461a      	mov	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	fbb2 f3f3 	udiv	r3, r2, r3
 8005158:	3305      	adds	r3, #5
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	e01f      	b.n	800519e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	fbb2 f2f3 	udiv	r2, r2, r3
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	461a      	mov	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	fbb2 f3f3 	udiv	r3, r2, r3
 800517a:	3305      	adds	r3, #5
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	e00e      	b.n	800519e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	fbb2 f2f3 	udiv	r2, r2, r3
 8005188:	4613      	mov	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	461a      	mov	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	fbb2 f3f3 	udiv	r3, r2, r3
 800519a:	3305      	adds	r3, #5
 800519c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4a5c      	ldr	r2, [pc, #368]	; (8005314 <HAL_I2S_Init+0x270>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	08db      	lsrs	r3, r3, #3
 80051a8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	085b      	lsrs	r3, r3, #1
 80051ba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	e003      	b.n	80051cc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80051c4:	2302      	movs	r3, #2
 80051c6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d902      	bls.n	80051d8 <HAL_I2S_Init+0x134>
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	2bff      	cmp	r3, #255	; 0xff
 80051d6:	d907      	bls.n	80051e8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051dc:	f043 0210 	orr.w	r2, r3, #16
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e08f      	b.n	8005308 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691a      	ldr	r2, [r3, #16]
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	ea42 0103 	orr.w	r1, r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005206:	f023 030f 	bic.w	r3, r3, #15
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6851      	ldr	r1, [r2, #4]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6892      	ldr	r2, [r2, #8]
 8005212:	4311      	orrs	r1, r2
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	68d2      	ldr	r2, [r2, #12]
 8005218:	4311      	orrs	r1, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6992      	ldr	r2, [r2, #24]
 800521e:	430a      	orrs	r2, r1
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800522a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d161      	bne.n	80052f8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a38      	ldr	r2, [pc, #224]	; (8005318 <HAL_I2S_Init+0x274>)
 8005238:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a37      	ldr	r2, [pc, #220]	; (800531c <HAL_I2S_Init+0x278>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d101      	bne.n	8005248 <HAL_I2S_Init+0x1a4>
 8005244:	4b36      	ldr	r3, [pc, #216]	; (8005320 <HAL_I2S_Init+0x27c>)
 8005246:	e001      	b.n	800524c <HAL_I2S_Init+0x1a8>
 8005248:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6812      	ldr	r2, [r2, #0]
 8005252:	4932      	ldr	r1, [pc, #200]	; (800531c <HAL_I2S_Init+0x278>)
 8005254:	428a      	cmp	r2, r1
 8005256:	d101      	bne.n	800525c <HAL_I2S_Init+0x1b8>
 8005258:	4a31      	ldr	r2, [pc, #196]	; (8005320 <HAL_I2S_Init+0x27c>)
 800525a:	e001      	b.n	8005260 <HAL_I2S_Init+0x1bc>
 800525c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005260:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005264:	f023 030f 	bic.w	r3, r3, #15
 8005268:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a2b      	ldr	r2, [pc, #172]	; (800531c <HAL_I2S_Init+0x278>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d101      	bne.n	8005278 <HAL_I2S_Init+0x1d4>
 8005274:	4b2a      	ldr	r3, [pc, #168]	; (8005320 <HAL_I2S_Init+0x27c>)
 8005276:	e001      	b.n	800527c <HAL_I2S_Init+0x1d8>
 8005278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800527c:	2202      	movs	r2, #2
 800527e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a25      	ldr	r2, [pc, #148]	; (800531c <HAL_I2S_Init+0x278>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d101      	bne.n	800528e <HAL_I2S_Init+0x1ea>
 800528a:	4b25      	ldr	r3, [pc, #148]	; (8005320 <HAL_I2S_Init+0x27c>)
 800528c:	e001      	b.n	8005292 <HAL_I2S_Init+0x1ee>
 800528e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800529e:	d003      	beq.n	80052a8 <HAL_I2S_Init+0x204>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d103      	bne.n	80052b0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80052a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	e001      	b.n	80052b4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80052b0:	2300      	movs	r3, #0
 80052b2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80052be:	4313      	orrs	r3, r2
 80052c0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80052c8:	4313      	orrs	r3, r2
 80052ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80052d2:	4313      	orrs	r3, r2
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	897b      	ldrh	r3, [r7, #10]
 80052d8:	4313      	orrs	r3, r2
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052e0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a0d      	ldr	r2, [pc, #52]	; (800531c <HAL_I2S_Init+0x278>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d101      	bne.n	80052f0 <HAL_I2S_Init+0x24c>
 80052ec:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <HAL_I2S_Init+0x27c>)
 80052ee:	e001      	b.n	80052f4 <HAL_I2S_Init+0x250>
 80052f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052f4:	897a      	ldrh	r2, [r7, #10]
 80052f6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3720      	adds	r7, #32
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	0800541b 	.word	0x0800541b
 8005314:	cccccccd 	.word	0xcccccccd
 8005318:	08005531 	.word	0x08005531
 800531c:	40003800 	.word	0x40003800
 8005320:	40003400 	.word	0x40003400

08005324 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	881a      	ldrh	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	1c9a      	adds	r2, r3, #2
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10e      	bne.n	80053b4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053a4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff ffb8 	bl	8005324 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ce:	b292      	uxth	r2, r2
 80053d0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d6:	1c9a      	adds	r2, r3, #2
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10e      	bne.n	8005412 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005402:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff ff93 	bl	8005338 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005412:	bf00      	nop
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b086      	sub	sp, #24
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b04      	cmp	r3, #4
 8005434:	d13a      	bne.n	80054ac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b01      	cmp	r3, #1
 800543e:	d109      	bne.n	8005454 <I2S_IRQHandler+0x3a>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544a:	2b40      	cmp	r3, #64	; 0x40
 800544c:	d102      	bne.n	8005454 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff ffb4 	bl	80053bc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d126      	bne.n	80054ac <I2S_IRQHandler+0x92>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f003 0320 	and.w	r3, r3, #32
 8005468:	2b20      	cmp	r3, #32
 800546a:	d11f      	bne.n	80054ac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800547a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800547c:	2300      	movs	r3, #0
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	613b      	str	r3, [r7, #16]
 8005490:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549e:	f043 0202 	orr.w	r2, r3, #2
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff ff50 	bl	800534c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d136      	bne.n	8005526 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d109      	bne.n	80054d6 <I2S_IRQHandler+0xbc>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054cc:	2b80      	cmp	r3, #128	; 0x80
 80054ce:	d102      	bne.n	80054d6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7ff ff45 	bl	8005360 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d122      	bne.n	8005526 <I2S_IRQHandler+0x10c>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b20      	cmp	r3, #32
 80054ec:	d11b      	bne.n	8005526 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054fc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80054fe:	2300      	movs	r3, #0
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005518:	f043 0204 	orr.w	r2, r3, #4
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff ff13 	bl	800534c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005526:	bf00      	nop
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4aa2      	ldr	r2, [pc, #648]	; (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d101      	bne.n	800554e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800554a:	4ba2      	ldr	r3, [pc, #648]	; (80057d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800554c:	e001      	b.n	8005552 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800554e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a9b      	ldr	r2, [pc, #620]	; (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d101      	bne.n	800556c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005568:	4b9a      	ldr	r3, [pc, #616]	; (80057d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800556a:	e001      	b.n	8005570 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800556c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800557c:	d004      	beq.n	8005588 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	f040 8099 	bne.w	80056ba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b02      	cmp	r3, #2
 8005590:	d107      	bne.n	80055a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f925 	bl	80057ec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d107      	bne.n	80055bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f9c8 	bl	800594c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c2:	2b40      	cmp	r3, #64	; 0x40
 80055c4:	d13a      	bne.n	800563c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d035      	beq.n	800563c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a7e      	ldr	r2, [pc, #504]	; (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d101      	bne.n	80055de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80055da:	4b7e      	ldr	r3, [pc, #504]	; (80057d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055dc:	e001      	b.n	80055e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80055de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4979      	ldr	r1, [pc, #484]	; (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055ea:	428b      	cmp	r3, r1
 80055ec:	d101      	bne.n	80055f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80055ee:	4b79      	ldr	r3, [pc, #484]	; (80057d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055f0:	e001      	b.n	80055f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80055f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800560a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	f043 0202 	orr.w	r2, r3, #2
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff fe88 	bl	800534c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b08      	cmp	r3, #8
 8005644:	f040 80be 	bne.w	80057c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 80b8 	beq.w	80057c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005662:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a59      	ldr	r2, [pc, #356]	; (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d101      	bne.n	8005672 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800566e:	4b59      	ldr	r3, [pc, #356]	; (80057d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005670:	e001      	b.n	8005676 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4954      	ldr	r1, [pc, #336]	; (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800567e:	428b      	cmp	r3, r1
 8005680:	d101      	bne.n	8005686 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005682:	4b54      	ldr	r3, [pc, #336]	; (80057d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005684:	e001      	b.n	800568a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005686:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800568a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800568e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005690:	2300      	movs	r3, #0
 8005692:	60bb      	str	r3, [r7, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	60bb      	str	r3, [r7, #8]
 800569c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056aa:	f043 0204 	orr.w	r2, r3, #4
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff fe4a 	bl	800534c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80056b8:	e084      	b.n	80057c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d107      	bne.n	80056d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f8be 	bl	8005850 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d107      	bne.n	80056ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f8fd 	bl	80058e8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f4:	2b40      	cmp	r3, #64	; 0x40
 80056f6:	d12f      	bne.n	8005758 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d02a      	beq.n	8005758 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005710:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a2e      	ldr	r2, [pc, #184]	; (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d101      	bne.n	8005720 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800571c:	4b2d      	ldr	r3, [pc, #180]	; (80057d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800571e:	e001      	b.n	8005724 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005720:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4929      	ldr	r1, [pc, #164]	; (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800572c:	428b      	cmp	r3, r1
 800572e:	d101      	bne.n	8005734 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005730:	4b28      	ldr	r3, [pc, #160]	; (80057d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005732:	e001      	b.n	8005738 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005734:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005738:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800573c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574a:	f043 0202 	orr.w	r2, r3, #2
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff fdfa 	bl	800534c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b08      	cmp	r3, #8
 8005760:	d131      	bne.n	80057c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b00      	cmp	r3, #0
 800576a:	d02c      	beq.n	80057c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a17      	ldr	r2, [pc, #92]	; (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d101      	bne.n	800577a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005776:	4b17      	ldr	r3, [pc, #92]	; (80057d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005778:	e001      	b.n	800577e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800577a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4912      	ldr	r1, [pc, #72]	; (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005786:	428b      	cmp	r3, r1
 8005788:	d101      	bne.n	800578e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800578a:	4b12      	ldr	r3, [pc, #72]	; (80057d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800578c:	e001      	b.n	8005792 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800578e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005792:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005796:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80057a6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b4:	f043 0204 	orr.w	r2, r3, #4
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7ff fdc5 	bl	800534c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80057c2:	e000      	b.n	80057c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80057c4:	bf00      	nop
}
 80057c6:	bf00      	nop
 80057c8:	3720      	adds	r7, #32
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	40003800 	.word	0x40003800
 80057d4:	40003400 	.word	0x40003400

080057d8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	1c99      	adds	r1, r3, #2
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6251      	str	r1, [r2, #36]	; 0x24
 80057fe:	881a      	ldrh	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580a:	b29b      	uxth	r3, r3
 800580c:	3b01      	subs	r3, #1
 800580e:	b29a      	uxth	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d113      	bne.n	8005846 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800582c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d106      	bne.n	8005846 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff ffc9 	bl	80057d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005846:	bf00      	nop
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	1c99      	adds	r1, r3, #2
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6251      	str	r1, [r2, #36]	; 0x24
 8005862:	8819      	ldrh	r1, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a1d      	ldr	r2, [pc, #116]	; (80058e0 <I2SEx_TxISR_I2SExt+0x90>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d101      	bne.n	8005872 <I2SEx_TxISR_I2SExt+0x22>
 800586e:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <I2SEx_TxISR_I2SExt+0x94>)
 8005870:	e001      	b.n	8005876 <I2SEx_TxISR_I2SExt+0x26>
 8005872:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005876:	460a      	mov	r2, r1
 8005878:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d121      	bne.n	80058d6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a12      	ldr	r2, [pc, #72]	; (80058e0 <I2SEx_TxISR_I2SExt+0x90>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d101      	bne.n	80058a0 <I2SEx_TxISR_I2SExt+0x50>
 800589c:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <I2SEx_TxISR_I2SExt+0x94>)
 800589e:	e001      	b.n	80058a4 <I2SEx_TxISR_I2SExt+0x54>
 80058a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	490d      	ldr	r1, [pc, #52]	; (80058e0 <I2SEx_TxISR_I2SExt+0x90>)
 80058ac:	428b      	cmp	r3, r1
 80058ae:	d101      	bne.n	80058b4 <I2SEx_TxISR_I2SExt+0x64>
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <I2SEx_TxISR_I2SExt+0x94>)
 80058b2:	e001      	b.n	80058b8 <I2SEx_TxISR_I2SExt+0x68>
 80058b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d106      	bne.n	80058d6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff ff81 	bl	80057d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058d6:	bf00      	nop
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40003800 	.word	0x40003800
 80058e4:	40003400 	.word	0x40003400

080058e8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68d8      	ldr	r0, [r3, #12]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	1c99      	adds	r1, r3, #2
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005900:	b282      	uxth	r2, r0
 8005902:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d113      	bne.n	8005944 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800592a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005930:	b29b      	uxth	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff ff4a 	bl	80057d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005944:	bf00      	nop
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a20      	ldr	r2, [pc, #128]	; (80059dc <I2SEx_RxISR_I2SExt+0x90>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d101      	bne.n	8005962 <I2SEx_RxISR_I2SExt+0x16>
 800595e:	4b20      	ldr	r3, [pc, #128]	; (80059e0 <I2SEx_RxISR_I2SExt+0x94>)
 8005960:	e001      	b.n	8005966 <I2SEx_RxISR_I2SExt+0x1a>
 8005962:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005966:	68d8      	ldr	r0, [r3, #12]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	1c99      	adds	r1, r3, #2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005972:	b282      	uxth	r2, r0
 8005974:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d121      	bne.n	80059d2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a12      	ldr	r2, [pc, #72]	; (80059dc <I2SEx_RxISR_I2SExt+0x90>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d101      	bne.n	800599c <I2SEx_RxISR_I2SExt+0x50>
 8005998:	4b11      	ldr	r3, [pc, #68]	; (80059e0 <I2SEx_RxISR_I2SExt+0x94>)
 800599a:	e001      	b.n	80059a0 <I2SEx_RxISR_I2SExt+0x54>
 800599c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	490d      	ldr	r1, [pc, #52]	; (80059dc <I2SEx_RxISR_I2SExt+0x90>)
 80059a8:	428b      	cmp	r3, r1
 80059aa:	d101      	bne.n	80059b0 <I2SEx_RxISR_I2SExt+0x64>
 80059ac:	4b0c      	ldr	r3, [pc, #48]	; (80059e0 <I2SEx_RxISR_I2SExt+0x94>)
 80059ae:	e001      	b.n	80059b4 <I2SEx_RxISR_I2SExt+0x68>
 80059b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80059b8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d106      	bne.n	80059d2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff ff03 	bl	80057d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059d2:	bf00      	nop
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	40003800 	.word	0x40003800
 80059e0:	40003400 	.word	0x40003400

080059e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e264      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d075      	beq.n	8005aee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a02:	4ba3      	ldr	r3, [pc, #652]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d00c      	beq.n	8005a28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a0e:	4ba0      	ldr	r3, [pc, #640]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d112      	bne.n	8005a40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a1a:	4b9d      	ldr	r3, [pc, #628]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a26:	d10b      	bne.n	8005a40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a28:	4b99      	ldr	r3, [pc, #612]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d05b      	beq.n	8005aec <HAL_RCC_OscConfig+0x108>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d157      	bne.n	8005aec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e23f      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a48:	d106      	bne.n	8005a58 <HAL_RCC_OscConfig+0x74>
 8005a4a:	4b91      	ldr	r3, [pc, #580]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a90      	ldr	r2, [pc, #576]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	e01d      	b.n	8005a94 <HAL_RCC_OscConfig+0xb0>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a60:	d10c      	bne.n	8005a7c <HAL_RCC_OscConfig+0x98>
 8005a62:	4b8b      	ldr	r3, [pc, #556]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a8a      	ldr	r2, [pc, #552]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	4b88      	ldr	r3, [pc, #544]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a87      	ldr	r2, [pc, #540]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	e00b      	b.n	8005a94 <HAL_RCC_OscConfig+0xb0>
 8005a7c:	4b84      	ldr	r3, [pc, #528]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a83      	ldr	r2, [pc, #524]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	4b81      	ldr	r3, [pc, #516]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a80      	ldr	r2, [pc, #512]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d013      	beq.n	8005ac4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a9c:	f7fc fc86 	bl	80023ac <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aa4:	f7fc fc82 	bl	80023ac <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b64      	cmp	r3, #100	; 0x64
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e204      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ab6:	4b76      	ldr	r3, [pc, #472]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0f0      	beq.n	8005aa4 <HAL_RCC_OscConfig+0xc0>
 8005ac2:	e014      	b.n	8005aee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac4:	f7fc fc72 	bl	80023ac <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005acc:	f7fc fc6e 	bl	80023ac <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b64      	cmp	r3, #100	; 0x64
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e1f0      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ade:	4b6c      	ldr	r3, [pc, #432]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1f0      	bne.n	8005acc <HAL_RCC_OscConfig+0xe8>
 8005aea:	e000      	b.n	8005aee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d063      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005afa:	4b65      	ldr	r3, [pc, #404]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 030c 	and.w	r3, r3, #12
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b06:	4b62      	ldr	r3, [pc, #392]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d11c      	bne.n	8005b4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b12:	4b5f      	ldr	r3, [pc, #380]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d116      	bne.n	8005b4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b1e:	4b5c      	ldr	r3, [pc, #368]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <HAL_RCC_OscConfig+0x152>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d001      	beq.n	8005b36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e1c4      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b36:	4b56      	ldr	r3, [pc, #344]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	4952      	ldr	r1, [pc, #328]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b4a:	e03a      	b.n	8005bc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d020      	beq.n	8005b96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b54:	4b4f      	ldr	r3, [pc, #316]	; (8005c94 <HAL_RCC_OscConfig+0x2b0>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5a:	f7fc fc27 	bl	80023ac <HAL_GetTick>
 8005b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b60:	e008      	b.n	8005b74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b62:	f7fc fc23 	bl	80023ac <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e1a5      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b74:	4b46      	ldr	r3, [pc, #280]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0f0      	beq.n	8005b62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b80:	4b43      	ldr	r3, [pc, #268]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	4940      	ldr	r1, [pc, #256]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	600b      	str	r3, [r1, #0]
 8005b94:	e015      	b.n	8005bc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b96:	4b3f      	ldr	r3, [pc, #252]	; (8005c94 <HAL_RCC_OscConfig+0x2b0>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9c:	f7fc fc06 	bl	80023ac <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ba4:	f7fc fc02 	bl	80023ac <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e184      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bb6:	4b36      	ldr	r3, [pc, #216]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1f0      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d030      	beq.n	8005c30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d016      	beq.n	8005c04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bd6:	4b30      	ldr	r3, [pc, #192]	; (8005c98 <HAL_RCC_OscConfig+0x2b4>)
 8005bd8:	2201      	movs	r2, #1
 8005bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bdc:	f7fc fbe6 	bl	80023ac <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005be4:	f7fc fbe2 	bl	80023ac <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e164      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bf6:	4b26      	ldr	r3, [pc, #152]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0f0      	beq.n	8005be4 <HAL_RCC_OscConfig+0x200>
 8005c02:	e015      	b.n	8005c30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c04:	4b24      	ldr	r3, [pc, #144]	; (8005c98 <HAL_RCC_OscConfig+0x2b4>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c0a:	f7fc fbcf 	bl	80023ac <HAL_GetTick>
 8005c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c10:	e008      	b.n	8005c24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c12:	f7fc fbcb 	bl	80023ac <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e14d      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c24:	4b1a      	ldr	r3, [pc, #104]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1f0      	bne.n	8005c12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 80a0 	beq.w	8005d7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c42:	4b13      	ldr	r3, [pc, #76]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10f      	bne.n	8005c6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60bb      	str	r3, [r7, #8]
 8005c52:	4b0f      	ldr	r3, [pc, #60]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	4a0e      	ldr	r2, [pc, #56]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <HAL_RCC_OscConfig+0x2ac>)
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c66:	60bb      	str	r3, [r7, #8]
 8005c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6e:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <HAL_RCC_OscConfig+0x2b8>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d121      	bne.n	8005cbe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c7a:	4b08      	ldr	r3, [pc, #32]	; (8005c9c <HAL_RCC_OscConfig+0x2b8>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a07      	ldr	r2, [pc, #28]	; (8005c9c <HAL_RCC_OscConfig+0x2b8>)
 8005c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c86:	f7fc fb91 	bl	80023ac <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c8c:	e011      	b.n	8005cb2 <HAL_RCC_OscConfig+0x2ce>
 8005c8e:	bf00      	nop
 8005c90:	40023800 	.word	0x40023800
 8005c94:	42470000 	.word	0x42470000
 8005c98:	42470e80 	.word	0x42470e80
 8005c9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ca0:	f7fc fb84 	bl	80023ac <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e106      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb2:	4b85      	ldr	r3, [pc, #532]	; (8005ec8 <HAL_RCC_OscConfig+0x4e4>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d106      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x2f0>
 8005cc6:	4b81      	ldr	r3, [pc, #516]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cca:	4a80      	ldr	r2, [pc, #512]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005ccc:	f043 0301 	orr.w	r3, r3, #1
 8005cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8005cd2:	e01c      	b.n	8005d0e <HAL_RCC_OscConfig+0x32a>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	2b05      	cmp	r3, #5
 8005cda:	d10c      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x312>
 8005cdc:	4b7b      	ldr	r3, [pc, #492]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce0:	4a7a      	ldr	r2, [pc, #488]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005ce2:	f043 0304 	orr.w	r3, r3, #4
 8005ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce8:	4b78      	ldr	r3, [pc, #480]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cec:	4a77      	ldr	r2, [pc, #476]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005cee:	f043 0301 	orr.w	r3, r3, #1
 8005cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf4:	e00b      	b.n	8005d0e <HAL_RCC_OscConfig+0x32a>
 8005cf6:	4b75      	ldr	r3, [pc, #468]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfa:	4a74      	ldr	r2, [pc, #464]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005cfc:	f023 0301 	bic.w	r3, r3, #1
 8005d00:	6713      	str	r3, [r2, #112]	; 0x70
 8005d02:	4b72      	ldr	r3, [pc, #456]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d06:	4a71      	ldr	r2, [pc, #452]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005d08:	f023 0304 	bic.w	r3, r3, #4
 8005d0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d015      	beq.n	8005d42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d16:	f7fc fb49 	bl	80023ac <HAL_GetTick>
 8005d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d1c:	e00a      	b.n	8005d34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d1e:	f7fc fb45 	bl	80023ac <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e0c5      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d34:	4b65      	ldr	r3, [pc, #404]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0ee      	beq.n	8005d1e <HAL_RCC_OscConfig+0x33a>
 8005d40:	e014      	b.n	8005d6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d42:	f7fc fb33 	bl	80023ac <HAL_GetTick>
 8005d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d48:	e00a      	b.n	8005d60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d4a:	f7fc fb2f 	bl	80023ac <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e0af      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d60:	4b5a      	ldr	r3, [pc, #360]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1ee      	bne.n	8005d4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d105      	bne.n	8005d7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d72:	4b56      	ldr	r3, [pc, #344]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	4a55      	ldr	r2, [pc, #340]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 809b 	beq.w	8005ebe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d88:	4b50      	ldr	r3, [pc, #320]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f003 030c 	and.w	r3, r3, #12
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d05c      	beq.n	8005e4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d141      	bne.n	8005e20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d9c:	4b4c      	ldr	r3, [pc, #304]	; (8005ed0 <HAL_RCC_OscConfig+0x4ec>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da2:	f7fc fb03 	bl	80023ac <HAL_GetTick>
 8005da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da8:	e008      	b.n	8005dbc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005daa:	f7fc faff 	bl	80023ac <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d901      	bls.n	8005dbc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e081      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dbc:	4b43      	ldr	r3, [pc, #268]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1f0      	bne.n	8005daa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69da      	ldr	r2, [r3, #28]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	019b      	lsls	r3, r3, #6
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dde:	085b      	lsrs	r3, r3, #1
 8005de0:	3b01      	subs	r3, #1
 8005de2:	041b      	lsls	r3, r3, #16
 8005de4:	431a      	orrs	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	061b      	lsls	r3, r3, #24
 8005dec:	4937      	ldr	r1, [pc, #220]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005df2:	4b37      	ldr	r3, [pc, #220]	; (8005ed0 <HAL_RCC_OscConfig+0x4ec>)
 8005df4:	2201      	movs	r2, #1
 8005df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df8:	f7fc fad8 	bl	80023ac <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e00:	f7fc fad4 	bl	80023ac <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e056      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e12:	4b2e      	ldr	r3, [pc, #184]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0f0      	beq.n	8005e00 <HAL_RCC_OscConfig+0x41c>
 8005e1e:	e04e      	b.n	8005ebe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e20:	4b2b      	ldr	r3, [pc, #172]	; (8005ed0 <HAL_RCC_OscConfig+0x4ec>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e26:	f7fc fac1 	bl	80023ac <HAL_GetTick>
 8005e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e2c:	e008      	b.n	8005e40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e2e:	f7fc fabd 	bl	80023ac <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d901      	bls.n	8005e40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e03f      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e40:	4b22      	ldr	r3, [pc, #136]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f0      	bne.n	8005e2e <HAL_RCC_OscConfig+0x44a>
 8005e4c:	e037      	b.n	8005ebe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d101      	bne.n	8005e5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e032      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e5a:	4b1c      	ldr	r3, [pc, #112]	; (8005ecc <HAL_RCC_OscConfig+0x4e8>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d028      	beq.n	8005eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d121      	bne.n	8005eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d11a      	bne.n	8005eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e90:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d111      	bne.n	8005eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea0:	085b      	lsrs	r3, r3, #1
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d107      	bne.n	8005eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d001      	beq.n	8005ebe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	40007000 	.word	0x40007000
 8005ecc:	40023800 	.word	0x40023800
 8005ed0:	42470060 	.word	0x42470060

08005ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e0cc      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ee8:	4b68      	ldr	r3, [pc, #416]	; (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d90c      	bls.n	8005f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ef6:	4b65      	ldr	r3, [pc, #404]	; (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005efe:	4b63      	ldr	r3, [pc, #396]	; (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d001      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e0b8      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d020      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f28:	4b59      	ldr	r3, [pc, #356]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	4a58      	ldr	r2, [pc, #352]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f40:	4b53      	ldr	r3, [pc, #332]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	4a52      	ldr	r2, [pc, #328]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f4c:	4b50      	ldr	r3, [pc, #320]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	494d      	ldr	r1, [pc, #308]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d044      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d107      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f72:	4b47      	ldr	r3, [pc, #284]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d119      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e07f      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d003      	beq.n	8005f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d107      	bne.n	8005fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f92:	4b3f      	ldr	r3, [pc, #252]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d109      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e06f      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa2:	4b3b      	ldr	r3, [pc, #236]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e067      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fb2:	4b37      	ldr	r3, [pc, #220]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f023 0203 	bic.w	r2, r3, #3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	4934      	ldr	r1, [pc, #208]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fc4:	f7fc f9f2 	bl	80023ac <HAL_GetTick>
 8005fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fca:	e00a      	b.n	8005fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fcc:	f7fc f9ee 	bl	80023ac <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e04f      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe2:	4b2b      	ldr	r3, [pc, #172]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f003 020c 	and.w	r2, r3, #12
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d1eb      	bne.n	8005fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ff4:	4b25      	ldr	r3, [pc, #148]	; (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d20c      	bcs.n	800601c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006002:	4b22      	ldr	r3, [pc, #136]	; (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800600a:	4b20      	ldr	r3, [pc, #128]	; (800608c <HAL_RCC_ClockConfig+0x1b8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	429a      	cmp	r2, r3
 8006016:	d001      	beq.n	800601c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e032      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006028:	4b19      	ldr	r3, [pc, #100]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	4916      	ldr	r1, [pc, #88]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	4313      	orrs	r3, r2
 8006038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d009      	beq.n	800605a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006046:	4b12      	ldr	r3, [pc, #72]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	490e      	ldr	r1, [pc, #56]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	4313      	orrs	r3, r2
 8006058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800605a:	f000 f821 	bl	80060a0 <HAL_RCC_GetSysClockFreq>
 800605e:	4602      	mov	r2, r0
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	091b      	lsrs	r3, r3, #4
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	490a      	ldr	r1, [pc, #40]	; (8006094 <HAL_RCC_ClockConfig+0x1c0>)
 800606c:	5ccb      	ldrb	r3, [r1, r3]
 800606e:	fa22 f303 	lsr.w	r3, r2, r3
 8006072:	4a09      	ldr	r2, [pc, #36]	; (8006098 <HAL_RCC_ClockConfig+0x1c4>)
 8006074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006076:	4b09      	ldr	r3, [pc, #36]	; (800609c <HAL_RCC_ClockConfig+0x1c8>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f7fc f952 	bl	8002324 <HAL_InitTick>

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	40023c00 	.word	0x40023c00
 8006090:	40023800 	.word	0x40023800
 8006094:	0800b2b4 	.word	0x0800b2b4
 8006098:	20000004 	.word	0x20000004
 800609c:	20000014 	.word	0x20000014

080060a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80060a4:	b084      	sub	sp, #16
 80060a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	607b      	str	r3, [r7, #4]
 80060ac:	2300      	movs	r3, #0
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	2300      	movs	r3, #0
 80060b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060b8:	4b67      	ldr	r3, [pc, #412]	; (8006258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 030c 	and.w	r3, r3, #12
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d00d      	beq.n	80060e0 <HAL_RCC_GetSysClockFreq+0x40>
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	f200 80bd 	bhi.w	8006244 <HAL_RCC_GetSysClockFreq+0x1a4>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <HAL_RCC_GetSysClockFreq+0x34>
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d003      	beq.n	80060da <HAL_RCC_GetSysClockFreq+0x3a>
 80060d2:	e0b7      	b.n	8006244 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060d4:	4b61      	ldr	r3, [pc, #388]	; (800625c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80060d6:	60bb      	str	r3, [r7, #8]
       break;
 80060d8:	e0b7      	b.n	800624a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060da:	4b61      	ldr	r3, [pc, #388]	; (8006260 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80060dc:	60bb      	str	r3, [r7, #8]
      break;
 80060de:	e0b4      	b.n	800624a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060e0:	4b5d      	ldr	r3, [pc, #372]	; (8006258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060ea:	4b5b      	ldr	r3, [pc, #364]	; (8006258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d04d      	beq.n	8006192 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060f6:	4b58      	ldr	r3, [pc, #352]	; (8006258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	099b      	lsrs	r3, r3, #6
 80060fc:	461a      	mov	r2, r3
 80060fe:	f04f 0300 	mov.w	r3, #0
 8006102:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006106:	f04f 0100 	mov.w	r1, #0
 800610a:	ea02 0800 	and.w	r8, r2, r0
 800610e:	ea03 0901 	and.w	r9, r3, r1
 8006112:	4640      	mov	r0, r8
 8006114:	4649      	mov	r1, r9
 8006116:	f04f 0200 	mov.w	r2, #0
 800611a:	f04f 0300 	mov.w	r3, #0
 800611e:	014b      	lsls	r3, r1, #5
 8006120:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006124:	0142      	lsls	r2, r0, #5
 8006126:	4610      	mov	r0, r2
 8006128:	4619      	mov	r1, r3
 800612a:	ebb0 0008 	subs.w	r0, r0, r8
 800612e:	eb61 0109 	sbc.w	r1, r1, r9
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	018b      	lsls	r3, r1, #6
 800613c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006140:	0182      	lsls	r2, r0, #6
 8006142:	1a12      	subs	r2, r2, r0
 8006144:	eb63 0301 	sbc.w	r3, r3, r1
 8006148:	f04f 0000 	mov.w	r0, #0
 800614c:	f04f 0100 	mov.w	r1, #0
 8006150:	00d9      	lsls	r1, r3, #3
 8006152:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006156:	00d0      	lsls	r0, r2, #3
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	eb12 0208 	adds.w	r2, r2, r8
 8006160:	eb43 0309 	adc.w	r3, r3, r9
 8006164:	f04f 0000 	mov.w	r0, #0
 8006168:	f04f 0100 	mov.w	r1, #0
 800616c:	0259      	lsls	r1, r3, #9
 800616e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006172:	0250      	lsls	r0, r2, #9
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4610      	mov	r0, r2
 800617a:	4619      	mov	r1, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	461a      	mov	r2, r3
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	f7fa f820 	bl	80001c8 <__aeabi_uldivmod>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	4613      	mov	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	e04a      	b.n	8006228 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006192:	4b31      	ldr	r3, [pc, #196]	; (8006258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	099b      	lsrs	r3, r3, #6
 8006198:	461a      	mov	r2, r3
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80061a2:	f04f 0100 	mov.w	r1, #0
 80061a6:	ea02 0400 	and.w	r4, r2, r0
 80061aa:	ea03 0501 	and.w	r5, r3, r1
 80061ae:	4620      	mov	r0, r4
 80061b0:	4629      	mov	r1, r5
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	f04f 0300 	mov.w	r3, #0
 80061ba:	014b      	lsls	r3, r1, #5
 80061bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061c0:	0142      	lsls	r2, r0, #5
 80061c2:	4610      	mov	r0, r2
 80061c4:	4619      	mov	r1, r3
 80061c6:	1b00      	subs	r0, r0, r4
 80061c8:	eb61 0105 	sbc.w	r1, r1, r5
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	f04f 0300 	mov.w	r3, #0
 80061d4:	018b      	lsls	r3, r1, #6
 80061d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061da:	0182      	lsls	r2, r0, #6
 80061dc:	1a12      	subs	r2, r2, r0
 80061de:	eb63 0301 	sbc.w	r3, r3, r1
 80061e2:	f04f 0000 	mov.w	r0, #0
 80061e6:	f04f 0100 	mov.w	r1, #0
 80061ea:	00d9      	lsls	r1, r3, #3
 80061ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061f0:	00d0      	lsls	r0, r2, #3
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	1912      	adds	r2, r2, r4
 80061f8:	eb45 0303 	adc.w	r3, r5, r3
 80061fc:	f04f 0000 	mov.w	r0, #0
 8006200:	f04f 0100 	mov.w	r1, #0
 8006204:	0299      	lsls	r1, r3, #10
 8006206:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800620a:	0290      	lsls	r0, r2, #10
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4610      	mov	r0, r2
 8006212:	4619      	mov	r1, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	461a      	mov	r2, r3
 8006218:	f04f 0300 	mov.w	r3, #0
 800621c:	f7f9 ffd4 	bl	80001c8 <__aeabi_uldivmod>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4613      	mov	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006228:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	0c1b      	lsrs	r3, r3, #16
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	3301      	adds	r3, #1
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006240:	60bb      	str	r3, [r7, #8]
      break;
 8006242:	e002      	b.n	800624a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006244:	4b05      	ldr	r3, [pc, #20]	; (800625c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006246:	60bb      	str	r3, [r7, #8]
      break;
 8006248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800624a:	68bb      	ldr	r3, [r7, #8]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006256:	bf00      	nop
 8006258:	40023800 	.word	0x40023800
 800625c:	00f42400 	.word	0x00f42400
 8006260:	007a1200 	.word	0x007a1200

08006264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006264:	b480      	push	{r7}
 8006266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006268:	4b03      	ldr	r3, [pc, #12]	; (8006278 <HAL_RCC_GetHCLKFreq+0x14>)
 800626a:	681b      	ldr	r3, [r3, #0]
}
 800626c:	4618      	mov	r0, r3
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	20000004 	.word	0x20000004

0800627c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006280:	f7ff fff0 	bl	8006264 <HAL_RCC_GetHCLKFreq>
 8006284:	4602      	mov	r2, r0
 8006286:	4b05      	ldr	r3, [pc, #20]	; (800629c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	0a9b      	lsrs	r3, r3, #10
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	4903      	ldr	r1, [pc, #12]	; (80062a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006292:	5ccb      	ldrb	r3, [r1, r3]
 8006294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006298:	4618      	mov	r0, r3
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40023800 	.word	0x40023800
 80062a0:	0800b2c4 	.word	0x0800b2c4

080062a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d105      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d035      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80062cc:	4b62      	ldr	r3, [pc, #392]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062d2:	f7fc f86b 	bl	80023ac <HAL_GetTick>
 80062d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062d8:	e008      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062da:	f7fc f867 	bl	80023ac <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d901      	bls.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e0b0      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062ec:	4b5b      	ldr	r3, [pc, #364]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1f0      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	019a      	lsls	r2, r3, #6
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	071b      	lsls	r3, r3, #28
 8006304:	4955      	ldr	r1, [pc, #340]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006306:	4313      	orrs	r3, r2
 8006308:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800630c:	4b52      	ldr	r3, [pc, #328]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800630e:	2201      	movs	r2, #1
 8006310:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006312:	f7fc f84b 	bl	80023ac <HAL_GetTick>
 8006316:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006318:	e008      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800631a:	f7fc f847 	bl	80023ac <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d901      	bls.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e090      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800632c:	4b4b      	ldr	r3, [pc, #300]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0f0      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 8083 	beq.w	800644c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	4b44      	ldr	r3, [pc, #272]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	4a43      	ldr	r2, [pc, #268]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006354:	6413      	str	r3, [r2, #64]	; 0x40
 8006356:	4b41      	ldr	r3, [pc, #260]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006362:	4b3f      	ldr	r3, [pc, #252]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a3e      	ldr	r2, [pc, #248]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800636c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800636e:	f7fc f81d 	bl	80023ac <HAL_GetTick>
 8006372:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006374:	e008      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006376:	f7fc f819 	bl	80023ac <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d901      	bls.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e062      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006388:	4b35      	ldr	r3, [pc, #212]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0f0      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006394:	4b31      	ldr	r3, [pc, #196]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800639c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d02f      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d028      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063b2:	4b2a      	ldr	r3, [pc, #168]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063bc:	4b29      	ldr	r3, [pc, #164]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80063be:	2201      	movs	r2, #1
 80063c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063c2:	4b28      	ldr	r3, [pc, #160]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80063c8:	4a24      	ldr	r2, [pc, #144]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80063ce:	4b23      	ldr	r3, [pc, #140]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d114      	bne.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80063da:	f7fb ffe7 	bl	80023ac <HAL_GetTick>
 80063de:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063e0:	e00a      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063e2:	f7fb ffe3 	bl	80023ac <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e02a      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063f8:	4b18      	ldr	r3, [pc, #96]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0ee      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800640c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006410:	d10d      	bne.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006412:	4b12      	ldr	r3, [pc, #72]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006426:	490d      	ldr	r1, [pc, #52]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006428:	4313      	orrs	r3, r2
 800642a:	608b      	str	r3, [r1, #8]
 800642c:	e005      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800642e:	4b0b      	ldr	r3, [pc, #44]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	4a0a      	ldr	r2, [pc, #40]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006434:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006438:	6093      	str	r3, [r2, #8]
 800643a:	4b08      	ldr	r3, [pc, #32]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800643c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006446:	4905      	ldr	r1, [pc, #20]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006448:	4313      	orrs	r3, r2
 800644a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	42470068 	.word	0x42470068
 800645c:	40023800 	.word	0x40023800
 8006460:	40007000 	.word	0x40007000
 8006464:	42470e40 	.word	0x42470e40

08006468 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d13e      	bne.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006486:	4b23      	ldr	r3, [pc, #140]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d12f      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800649c:	4b1e      	ldr	r3, [pc, #120]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800649e:	617b      	str	r3, [r7, #20]
          break;
 80064a0:	e02f      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80064a2:	4b1c      	ldr	r3, [pc, #112]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064ae:	d108      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80064b0:	4b18      	ldr	r3, [pc, #96]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064b8:	4a18      	ldr	r2, [pc, #96]	; (800651c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80064ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80064be:	613b      	str	r3, [r7, #16]
 80064c0:	e007      	b.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80064c2:	4b14      	ldr	r3, [pc, #80]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064ca:	4a15      	ldr	r2, [pc, #84]	; (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80064cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80064d2:	4b10      	ldr	r3, [pc, #64]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064d8:	099b      	lsrs	r3, r3, #6
 80064da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	fb02 f303 	mul.w	r3, r2, r3
 80064e4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80064e6:	4b0b      	ldr	r3, [pc, #44]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ec:	0f1b      	lsrs	r3, r3, #28
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f8:	617b      	str	r3, [r7, #20]
          break;
 80064fa:	e002      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	617b      	str	r3, [r7, #20]
          break;
 8006500:	bf00      	nop
        }
      }
      break;
 8006502:	bf00      	nop
    }
  }
  return frequency;
 8006504:	697b      	ldr	r3, [r7, #20]
}
 8006506:	4618      	mov	r0, r3
 8006508:	371c      	adds	r7, #28
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	40023800 	.word	0x40023800
 8006518:	00bb8000 	.word	0x00bb8000
 800651c:	007a1200 	.word	0x007a1200
 8006520:	00f42400 	.word	0x00f42400

08006524 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e01c      	b.n	8006570 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	795b      	ldrb	r3, [r3, #5]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d105      	bne.n	800654c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fa ff94 	bl	8001474 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f042 0204 	orr.w	r2, r2, #4
 8006560:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	791b      	ldrb	r3, [r3, #4]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_RNG_GenerateRandomNumber+0x1a>
 800658e:	2302      	movs	r3, #2
 8006590:	e03d      	b.n	800660e <HAL_RNG_GenerateRandomNumber+0x96>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	795b      	ldrb	r3, [r3, #5]
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d12c      	bne.n	80065fc <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2202      	movs	r2, #2
 80065a6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065a8:	f7fb ff00 	bl	80023ac <HAL_GetTick>
 80065ac:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80065ae:	e011      	b.n	80065d4 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80065b0:	f7fb fefc 	bl	80023ac <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d90a      	bls.n	80065d4 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e01c      	b.n	800660e <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d1e6      	bne.n	80065b0 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	715a      	strb	r2, [r3, #5]
 80065fa:	e004      	b.n	8006606 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2204      	movs	r2, #4
 8006600:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	711a      	strb	r2, [r3, #4]

  return status;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	330c      	adds	r3, #12
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7ff ffa7 	bl	8006578 <HAL_RNG_GenerateRandomNumber>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d102      	bne.n	8006636 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	e000      	b.n	8006638 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8006636:	2300      	movs	r3, #0
  }
}
 8006638:	4618      	mov	r0, r3
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e07b      	b.n	800674a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	2b00      	cmp	r3, #0
 8006658:	d108      	bne.n	800666c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006662:	d009      	beq.n	8006678 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	61da      	str	r2, [r3, #28]
 800666a:	e005      	b.n	8006678 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fa ff10 	bl	80014b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	431a      	orrs	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	431a      	orrs	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fc:	ea42 0103 	orr.w	r1, r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006704:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	0c1b      	lsrs	r3, r3, #16
 8006716:	f003 0104 	and.w	r1, r3, #4
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	f003 0210 	and.w	r2, r3, #16
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	69da      	ldr	r2, [r3, #28]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006738:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b088      	sub	sp, #32
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	603b      	str	r3, [r7, #0]
 800675e:	4613      	mov	r3, r2
 8006760:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800676c:	2b01      	cmp	r3, #1
 800676e:	d101      	bne.n	8006774 <HAL_SPI_Transmit+0x22>
 8006770:	2302      	movs	r3, #2
 8006772:	e126      	b.n	80069c2 <HAL_SPI_Transmit+0x270>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800677c:	f7fb fe16 	bl	80023ac <HAL_GetTick>
 8006780:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006782:	88fb      	ldrh	r3, [r7, #6]
 8006784:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b01      	cmp	r3, #1
 8006790:	d002      	beq.n	8006798 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006792:	2302      	movs	r3, #2
 8006794:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006796:	e10b      	b.n	80069b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <HAL_SPI_Transmit+0x52>
 800679e:	88fb      	ldrh	r3, [r7, #6]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d102      	bne.n	80067aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067a8:	e102      	b.n	80069b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2203      	movs	r2, #3
 80067ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	88fa      	ldrh	r2, [r7, #6]
 80067c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	88fa      	ldrh	r2, [r7, #6]
 80067c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f0:	d10f      	bne.n	8006812 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006800:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006810:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681c:	2b40      	cmp	r3, #64	; 0x40
 800681e:	d007      	beq.n	8006830 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800682e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006838:	d14b      	bne.n	80068d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <HAL_SPI_Transmit+0xf6>
 8006842:	8afb      	ldrh	r3, [r7, #22]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d13e      	bne.n	80068c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684c:	881a      	ldrh	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006858:	1c9a      	adds	r2, r3, #2
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006862:	b29b      	uxth	r3, r3
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800686c:	e02b      	b.n	80068c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b02      	cmp	r3, #2
 800687a:	d112      	bne.n	80068a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006880:	881a      	ldrh	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688c:	1c9a      	adds	r2, r3, #2
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006896:	b29b      	uxth	r3, r3
 8006898:	3b01      	subs	r3, #1
 800689a:	b29a      	uxth	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	86da      	strh	r2, [r3, #54]	; 0x36
 80068a0:	e011      	b.n	80068c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068a2:	f7fb fd83 	bl	80023ac <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d803      	bhi.n	80068ba <HAL_SPI_Transmit+0x168>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068b8:	d102      	bne.n	80068c0 <HAL_SPI_Transmit+0x16e>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d102      	bne.n	80068c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068c4:	e074      	b.n	80069b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1ce      	bne.n	800686e <HAL_SPI_Transmit+0x11c>
 80068d0:	e04c      	b.n	800696c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <HAL_SPI_Transmit+0x18e>
 80068da:	8afb      	ldrh	r3, [r7, #22]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d140      	bne.n	8006962 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	330c      	adds	r3, #12
 80068ea:	7812      	ldrb	r2, [r2, #0]
 80068ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006906:	e02c      	b.n	8006962 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b02      	cmp	r3, #2
 8006914:	d113      	bne.n	800693e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	330c      	adds	r3, #12
 8006920:	7812      	ldrb	r2, [r2, #0]
 8006922:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006932:	b29b      	uxth	r3, r3
 8006934:	3b01      	subs	r3, #1
 8006936:	b29a      	uxth	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	86da      	strh	r2, [r3, #54]	; 0x36
 800693c:	e011      	b.n	8006962 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800693e:	f7fb fd35 	bl	80023ac <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d803      	bhi.n	8006956 <HAL_SPI_Transmit+0x204>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006954:	d102      	bne.n	800695c <HAL_SPI_Transmit+0x20a>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d102      	bne.n	8006962 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006960:	e026      	b.n	80069b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006966:	b29b      	uxth	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1cd      	bne.n	8006908 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 f8b3 	bl	8006adc <SPI_EndRxTxTransaction>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2220      	movs	r2, #32
 8006980:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800698a:	2300      	movs	r3, #0
 800698c:	613b      	str	r3, [r7, #16]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	77fb      	strb	r3, [r7, #31]
 80069ac:	e000      	b.n	80069b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80069ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80069c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3720      	adds	r7, #32
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	4613      	mov	r3, r2
 80069da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069dc:	f7fb fce6 	bl	80023ac <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	4413      	add	r3, r2
 80069ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069ec:	f7fb fcde 	bl	80023ac <HAL_GetTick>
 80069f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069f2:	4b39      	ldr	r3, [pc, #228]	; (8006ad8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	015b      	lsls	r3, r3, #5
 80069f8:	0d1b      	lsrs	r3, r3, #20
 80069fa:	69fa      	ldr	r2, [r7, #28]
 80069fc:	fb02 f303 	mul.w	r3, r2, r3
 8006a00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a02:	e054      	b.n	8006aae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a0a:	d050      	beq.n	8006aae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a0c:	f7fb fcce 	bl	80023ac <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d902      	bls.n	8006a22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d13d      	bne.n	8006a9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a3a:	d111      	bne.n	8006a60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a44:	d004      	beq.n	8006a50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a4e:	d107      	bne.n	8006a60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a68:	d10f      	bne.n	8006a8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e017      	b.n	8006ace <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	bf0c      	ite	eq
 8006abe:	2301      	moveq	r3, #1
 8006ac0:	2300      	movne	r3, #0
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d19b      	bne.n	8006a04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3720      	adds	r7, #32
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000004 	.word	0x20000004

08006adc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ae8:	4b1b      	ldr	r3, [pc, #108]	; (8006b58 <SPI_EndRxTxTransaction+0x7c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a1b      	ldr	r2, [pc, #108]	; (8006b5c <SPI_EndRxTxTransaction+0x80>)
 8006aee:	fba2 2303 	umull	r2, r3, r2, r3
 8006af2:	0d5b      	lsrs	r3, r3, #21
 8006af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006af8:	fb02 f303 	mul.w	r3, r2, r3
 8006afc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b06:	d112      	bne.n	8006b2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2180      	movs	r1, #128	; 0x80
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7ff ff5a 	bl	80069cc <SPI_WaitFlagStateUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d016      	beq.n	8006b4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	f043 0220 	orr.w	r2, r3, #32
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e00f      	b.n	8006b4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00a      	beq.n	8006b4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b44:	2b80      	cmp	r3, #128	; 0x80
 8006b46:	d0f2      	beq.n	8006b2e <SPI_EndRxTxTransaction+0x52>
 8006b48:	e000      	b.n	8006b4c <SPI_EndRxTxTransaction+0x70>
        break;
 8006b4a:	bf00      	nop
  }

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20000004 	.word	0x20000004
 8006b5c:	165e9f81 	.word	0x165e9f81

08006b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e041      	b.n	8006bf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7fa fd7c 	bl	8001684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	f000 fd68 	bl	8007674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d001      	beq.n	8006c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e04e      	b.n	8006cb6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0201 	orr.w	r2, r2, #1
 8006c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a23      	ldr	r2, [pc, #140]	; (8006cc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d022      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x80>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c42:	d01d      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x80>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1f      	ldr	r2, [pc, #124]	; (8006cc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d018      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x80>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a1e      	ldr	r2, [pc, #120]	; (8006ccc <HAL_TIM_Base_Start_IT+0xcc>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d013      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x80>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a1c      	ldr	r2, [pc, #112]	; (8006cd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00e      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x80>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a1b      	ldr	r2, [pc, #108]	; (8006cd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d009      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x80>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a19      	ldr	r2, [pc, #100]	; (8006cd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d004      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x80>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a18      	ldr	r2, [pc, #96]	; (8006cdc <HAL_TIM_Base_Start_IT+0xdc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d111      	bne.n	8006ca4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b06      	cmp	r3, #6
 8006c90:	d010      	beq.n	8006cb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f042 0201 	orr.w	r2, r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca2:	e007      	b.n	8006cb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0201 	orr.w	r2, r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	40010000 	.word	0x40010000
 8006cc8:	40000400 	.word	0x40000400
 8006ccc:	40000800 	.word	0x40000800
 8006cd0:	40000c00 	.word	0x40000c00
 8006cd4:	40010400 	.word	0x40010400
 8006cd8:	40014000 	.word	0x40014000
 8006cdc:	40001800 	.word	0x40001800

08006ce0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d109      	bne.n	8006d04 <HAL_TIM_OC_Start_IT+0x24>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	bf14      	ite	ne
 8006cfc:	2301      	movne	r3, #1
 8006cfe:	2300      	moveq	r3, #0
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	e022      	b.n	8006d4a <HAL_TIM_OC_Start_IT+0x6a>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d109      	bne.n	8006d1e <HAL_TIM_OC_Start_IT+0x3e>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	bf14      	ite	ne
 8006d16:	2301      	movne	r3, #1
 8006d18:	2300      	moveq	r3, #0
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	e015      	b.n	8006d4a <HAL_TIM_OC_Start_IT+0x6a>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d109      	bne.n	8006d38 <HAL_TIM_OC_Start_IT+0x58>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	bf14      	ite	ne
 8006d30:	2301      	movne	r3, #1
 8006d32:	2300      	moveq	r3, #0
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	e008      	b.n	8006d4a <HAL_TIM_OC_Start_IT+0x6a>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	bf14      	ite	ne
 8006d44:	2301      	movne	r3, #1
 8006d46:	2300      	moveq	r3, #0
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e0c2      	b.n	8006ed8 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d104      	bne.n	8006d62 <HAL_TIM_OC_Start_IT+0x82>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d60:	e013      	b.n	8006d8a <HAL_TIM_OC_Start_IT+0xaa>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b04      	cmp	r3, #4
 8006d66:	d104      	bne.n	8006d72 <HAL_TIM_OC_Start_IT+0x92>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d70:	e00b      	b.n	8006d8a <HAL_TIM_OC_Start_IT+0xaa>
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b08      	cmp	r3, #8
 8006d76:	d104      	bne.n	8006d82 <HAL_TIM_OC_Start_IT+0xa2>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d80:	e003      	b.n	8006d8a <HAL_TIM_OC_Start_IT+0xaa>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2202      	movs	r2, #2
 8006d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b0c      	cmp	r3, #12
 8006d8e:	d841      	bhi.n	8006e14 <HAL_TIM_OC_Start_IT+0x134>
 8006d90:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <HAL_TIM_OC_Start_IT+0xb8>)
 8006d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d96:	bf00      	nop
 8006d98:	08006dcd 	.word	0x08006dcd
 8006d9c:	08006e15 	.word	0x08006e15
 8006da0:	08006e15 	.word	0x08006e15
 8006da4:	08006e15 	.word	0x08006e15
 8006da8:	08006ddf 	.word	0x08006ddf
 8006dac:	08006e15 	.word	0x08006e15
 8006db0:	08006e15 	.word	0x08006e15
 8006db4:	08006e15 	.word	0x08006e15
 8006db8:	08006df1 	.word	0x08006df1
 8006dbc:	08006e15 	.word	0x08006e15
 8006dc0:	08006e15 	.word	0x08006e15
 8006dc4:	08006e15 	.word	0x08006e15
 8006dc8:	08006e03 	.word	0x08006e03
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68da      	ldr	r2, [r3, #12]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f042 0202 	orr.w	r2, r2, #2
 8006dda:	60da      	str	r2, [r3, #12]
      break;
 8006ddc:	e01b      	b.n	8006e16 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68da      	ldr	r2, [r3, #12]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f042 0204 	orr.w	r2, r2, #4
 8006dec:	60da      	str	r2, [r3, #12]
      break;
 8006dee:	e012      	b.n	8006e16 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0208 	orr.w	r2, r2, #8
 8006dfe:	60da      	str	r2, [r3, #12]
      break;
 8006e00:	e009      	b.n	8006e16 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68da      	ldr	r2, [r3, #12]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f042 0210 	orr.w	r2, r2, #16
 8006e10:	60da      	str	r2, [r3, #12]
      break;
 8006e12:	e000      	b.n	8006e16 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8006e14:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 ff12 	bl	8007c48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a2d      	ldr	r2, [pc, #180]	; (8006ee0 <HAL_TIM_OC_Start_IT+0x200>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d004      	beq.n	8006e38 <HAL_TIM_OC_Start_IT+0x158>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a2c      	ldr	r2, [pc, #176]	; (8006ee4 <HAL_TIM_OC_Start_IT+0x204>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d101      	bne.n	8006e3c <HAL_TIM_OC_Start_IT+0x15c>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e000      	b.n	8006e3e <HAL_TIM_OC_Start_IT+0x15e>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d007      	beq.n	8006e52 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a22      	ldr	r2, [pc, #136]	; (8006ee0 <HAL_TIM_OC_Start_IT+0x200>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d022      	beq.n	8006ea2 <HAL_TIM_OC_Start_IT+0x1c2>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e64:	d01d      	beq.n	8006ea2 <HAL_TIM_OC_Start_IT+0x1c2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a1f      	ldr	r2, [pc, #124]	; (8006ee8 <HAL_TIM_OC_Start_IT+0x208>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d018      	beq.n	8006ea2 <HAL_TIM_OC_Start_IT+0x1c2>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a1d      	ldr	r2, [pc, #116]	; (8006eec <HAL_TIM_OC_Start_IT+0x20c>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d013      	beq.n	8006ea2 <HAL_TIM_OC_Start_IT+0x1c2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a1c      	ldr	r2, [pc, #112]	; (8006ef0 <HAL_TIM_OC_Start_IT+0x210>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d00e      	beq.n	8006ea2 <HAL_TIM_OC_Start_IT+0x1c2>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a16      	ldr	r2, [pc, #88]	; (8006ee4 <HAL_TIM_OC_Start_IT+0x204>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d009      	beq.n	8006ea2 <HAL_TIM_OC_Start_IT+0x1c2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a18      	ldr	r2, [pc, #96]	; (8006ef4 <HAL_TIM_OC_Start_IT+0x214>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d004      	beq.n	8006ea2 <HAL_TIM_OC_Start_IT+0x1c2>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a16      	ldr	r2, [pc, #88]	; (8006ef8 <HAL_TIM_OC_Start_IT+0x218>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d111      	bne.n	8006ec6 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b06      	cmp	r3, #6
 8006eb2:	d010      	beq.n	8006ed6 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f042 0201 	orr.w	r2, r2, #1
 8006ec2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ec4:	e007      	b.n	8006ed6 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f042 0201 	orr.w	r2, r2, #1
 8006ed4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40010000 	.word	0x40010000
 8006ee4:	40010400 	.word	0x40010400
 8006ee8:	40000400 	.word	0x40000400
 8006eec:	40000800 	.word	0x40000800
 8006ef0:	40000c00 	.word	0x40000c00
 8006ef4:	40014000 	.word	0x40014000
 8006ef8:	40001800 	.word	0x40001800

08006efc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e041      	b.n	8006f92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d106      	bne.n	8006f28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f839 	bl	8006f9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3304      	adds	r3, #4
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	f000 fb9a 	bl	8007674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006fa2:	bf00      	nop
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b086      	sub	sp, #24
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e097      	b.n	80070f2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d106      	bne.n	8006fdc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7fa fb0c 	bl	80015f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6812      	ldr	r2, [r2, #0]
 8006fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ff2:	f023 0307 	bic.w	r3, r3, #7
 8006ff6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3304      	adds	r3, #4
 8007000:	4619      	mov	r1, r3
 8007002:	4610      	mov	r0, r2
 8007004:	f000 fb36 	bl	8007674 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	4313      	orrs	r3, r2
 8007028:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007030:	f023 0303 	bic.w	r3, r3, #3
 8007034:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	021b      	lsls	r3, r3, #8
 8007040:	4313      	orrs	r3, r2
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800704e:	f023 030c 	bic.w	r3, r3, #12
 8007052:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800705a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800705e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	021b      	lsls	r3, r3, #8
 800706a:	4313      	orrs	r3, r2
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4313      	orrs	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	011a      	lsls	r2, r3, #4
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	031b      	lsls	r3, r3, #12
 800707e:	4313      	orrs	r3, r2
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	4313      	orrs	r3, r2
 8007084:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800708c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007094:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	4313      	orrs	r3, r2
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b02      	cmp	r3, #2
 800710e:	d122      	bne.n	8007156 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b02      	cmp	r3, #2
 800711c:	d11b      	bne.n	8007156 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f06f 0202 	mvn.w	r2, #2
 8007126:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	f003 0303 	and.w	r3, r3, #3
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fa7b 	bl	8007638 <HAL_TIM_IC_CaptureCallback>
 8007142:	e005      	b.n	8007150 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fa6d 	bl	8007624 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fa7e 	bl	800764c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b04      	cmp	r3, #4
 8007162:	d122      	bne.n	80071aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	f003 0304 	and.w	r3, r3, #4
 800716e:	2b04      	cmp	r3, #4
 8007170:	d11b      	bne.n	80071aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f06f 0204 	mvn.w	r2, #4
 800717a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fa51 	bl	8007638 <HAL_TIM_IC_CaptureCallback>
 8007196:	e005      	b.n	80071a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fa43 	bl	8007624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fa54 	bl	800764c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	f003 0308 	and.w	r3, r3, #8
 80071b4:	2b08      	cmp	r3, #8
 80071b6:	d122      	bne.n	80071fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f003 0308 	and.w	r3, r3, #8
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	d11b      	bne.n	80071fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f06f 0208 	mvn.w	r2, #8
 80071ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2204      	movs	r2, #4
 80071d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	f003 0303 	and.w	r3, r3, #3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fa27 	bl	8007638 <HAL_TIM_IC_CaptureCallback>
 80071ea:	e005      	b.n	80071f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fa19 	bl	8007624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fa2a 	bl	800764c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	f003 0310 	and.w	r3, r3, #16
 8007208:	2b10      	cmp	r3, #16
 800720a:	d122      	bne.n	8007252 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f003 0310 	and.w	r3, r3, #16
 8007216:	2b10      	cmp	r3, #16
 8007218:	d11b      	bne.n	8007252 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f06f 0210 	mvn.w	r2, #16
 8007222:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2208      	movs	r2, #8
 8007228:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f9fd 	bl	8007638 <HAL_TIM_IC_CaptureCallback>
 800723e:	e005      	b.n	800724c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f9ef 	bl	8007624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fa00 	bl	800764c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	2b01      	cmp	r3, #1
 800725e:	d10e      	bne.n	800727e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b01      	cmp	r3, #1
 800726c:	d107      	bne.n	800727e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f06f 0201 	mvn.w	r2, #1
 8007276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f9c9 	bl	8007610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007288:	2b80      	cmp	r3, #128	; 0x80
 800728a:	d10e      	bne.n	80072aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007296:	2b80      	cmp	r3, #128	; 0x80
 8007298:	d107      	bne.n	80072aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fd7b 	bl	8007da0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b4:	2b40      	cmp	r3, #64	; 0x40
 80072b6:	d10e      	bne.n	80072d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c2:	2b40      	cmp	r3, #64	; 0x40
 80072c4:	d107      	bne.n	80072d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f9c5 	bl	8007660 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	f003 0320 	and.w	r3, r3, #32
 80072e0:	2b20      	cmp	r3, #32
 80072e2:	d10e      	bne.n	8007302 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	f003 0320 	and.w	r3, r3, #32
 80072ee:	2b20      	cmp	r3, #32
 80072f0:	d107      	bne.n	8007302 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f06f 0220 	mvn.w	r2, #32
 80072fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fd45 	bl	8007d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007302:	bf00      	nop
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007322:	2302      	movs	r3, #2
 8007324:	e0ac      	b.n	8007480 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b0c      	cmp	r3, #12
 8007332:	f200 809f 	bhi.w	8007474 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007336:	a201      	add	r2, pc, #4	; (adr r2, 800733c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733c:	08007371 	.word	0x08007371
 8007340:	08007475 	.word	0x08007475
 8007344:	08007475 	.word	0x08007475
 8007348:	08007475 	.word	0x08007475
 800734c:	080073b1 	.word	0x080073b1
 8007350:	08007475 	.word	0x08007475
 8007354:	08007475 	.word	0x08007475
 8007358:	08007475 	.word	0x08007475
 800735c:	080073f3 	.word	0x080073f3
 8007360:	08007475 	.word	0x08007475
 8007364:	08007475 	.word	0x08007475
 8007368:	08007475 	.word	0x08007475
 800736c:	08007433 	.word	0x08007433
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68b9      	ldr	r1, [r7, #8]
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fa1c 	bl	80077b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699a      	ldr	r2, [r3, #24]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0208 	orr.w	r2, r2, #8
 800738a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	699a      	ldr	r2, [r3, #24]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0204 	bic.w	r2, r2, #4
 800739a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6999      	ldr	r1, [r3, #24]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	691a      	ldr	r2, [r3, #16]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	619a      	str	r2, [r3, #24]
      break;
 80073ae:	e062      	b.n	8007476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fa6c 	bl	8007894 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699a      	ldr	r2, [r3, #24]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	699a      	ldr	r2, [r3, #24]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6999      	ldr	r1, [r3, #24]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	021a      	lsls	r2, r3, #8
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	619a      	str	r2, [r3, #24]
      break;
 80073f0:	e041      	b.n	8007476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68b9      	ldr	r1, [r7, #8]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 fac1 	bl	8007980 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69da      	ldr	r2, [r3, #28]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f042 0208 	orr.w	r2, r2, #8
 800740c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	69da      	ldr	r2, [r3, #28]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 0204 	bic.w	r2, r2, #4
 800741c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	69d9      	ldr	r1, [r3, #28]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	691a      	ldr	r2, [r3, #16]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	61da      	str	r2, [r3, #28]
      break;
 8007430:	e021      	b.n	8007476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68b9      	ldr	r1, [r7, #8]
 8007438:	4618      	mov	r0, r3
 800743a:	f000 fb15 	bl	8007a68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69da      	ldr	r2, [r3, #28]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800744c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	69da      	ldr	r2, [r3, #28]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800745c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	69d9      	ldr	r1, [r3, #28]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	021a      	lsls	r2, r3, #8
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	61da      	str	r2, [r3, #28]
      break;
 8007472:	e000      	b.n	8007476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007474:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007498:	2b01      	cmp	r3, #1
 800749a:	d101      	bne.n	80074a0 <HAL_TIM_ConfigClockSource+0x18>
 800749c:	2302      	movs	r3, #2
 800749e:	e0b3      	b.n	8007608 <HAL_TIM_ConfigClockSource+0x180>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80074be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074d8:	d03e      	beq.n	8007558 <HAL_TIM_ConfigClockSource+0xd0>
 80074da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074de:	f200 8087 	bhi.w	80075f0 <HAL_TIM_ConfigClockSource+0x168>
 80074e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074e6:	f000 8085 	beq.w	80075f4 <HAL_TIM_ConfigClockSource+0x16c>
 80074ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ee:	d87f      	bhi.n	80075f0 <HAL_TIM_ConfigClockSource+0x168>
 80074f0:	2b70      	cmp	r3, #112	; 0x70
 80074f2:	d01a      	beq.n	800752a <HAL_TIM_ConfigClockSource+0xa2>
 80074f4:	2b70      	cmp	r3, #112	; 0x70
 80074f6:	d87b      	bhi.n	80075f0 <HAL_TIM_ConfigClockSource+0x168>
 80074f8:	2b60      	cmp	r3, #96	; 0x60
 80074fa:	d050      	beq.n	800759e <HAL_TIM_ConfigClockSource+0x116>
 80074fc:	2b60      	cmp	r3, #96	; 0x60
 80074fe:	d877      	bhi.n	80075f0 <HAL_TIM_ConfigClockSource+0x168>
 8007500:	2b50      	cmp	r3, #80	; 0x50
 8007502:	d03c      	beq.n	800757e <HAL_TIM_ConfigClockSource+0xf6>
 8007504:	2b50      	cmp	r3, #80	; 0x50
 8007506:	d873      	bhi.n	80075f0 <HAL_TIM_ConfigClockSource+0x168>
 8007508:	2b40      	cmp	r3, #64	; 0x40
 800750a:	d058      	beq.n	80075be <HAL_TIM_ConfigClockSource+0x136>
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	d86f      	bhi.n	80075f0 <HAL_TIM_ConfigClockSource+0x168>
 8007510:	2b30      	cmp	r3, #48	; 0x30
 8007512:	d064      	beq.n	80075de <HAL_TIM_ConfigClockSource+0x156>
 8007514:	2b30      	cmp	r3, #48	; 0x30
 8007516:	d86b      	bhi.n	80075f0 <HAL_TIM_ConfigClockSource+0x168>
 8007518:	2b20      	cmp	r3, #32
 800751a:	d060      	beq.n	80075de <HAL_TIM_ConfigClockSource+0x156>
 800751c:	2b20      	cmp	r3, #32
 800751e:	d867      	bhi.n	80075f0 <HAL_TIM_ConfigClockSource+0x168>
 8007520:	2b00      	cmp	r3, #0
 8007522:	d05c      	beq.n	80075de <HAL_TIM_ConfigClockSource+0x156>
 8007524:	2b10      	cmp	r3, #16
 8007526:	d05a      	beq.n	80075de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007528:	e062      	b.n	80075f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6818      	ldr	r0, [r3, #0]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	6899      	ldr	r1, [r3, #8]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f000 fb65 	bl	8007c08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800754c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	609a      	str	r2, [r3, #8]
      break;
 8007556:	e04e      	b.n	80075f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6818      	ldr	r0, [r3, #0]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	6899      	ldr	r1, [r3, #8]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f000 fb4e 	bl	8007c08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689a      	ldr	r2, [r3, #8]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800757a:	609a      	str	r2, [r3, #8]
      break;
 800757c:	e03b      	b.n	80075f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	6859      	ldr	r1, [r3, #4]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	461a      	mov	r2, r3
 800758c:	f000 fac2 	bl	8007b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2150      	movs	r1, #80	; 0x50
 8007596:	4618      	mov	r0, r3
 8007598:	f000 fb1b 	bl	8007bd2 <TIM_ITRx_SetConfig>
      break;
 800759c:	e02b      	b.n	80075f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6818      	ldr	r0, [r3, #0]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	6859      	ldr	r1, [r3, #4]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f000 fae1 	bl	8007b72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2160      	movs	r1, #96	; 0x60
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fb0b 	bl	8007bd2 <TIM_ITRx_SetConfig>
      break;
 80075bc:	e01b      	b.n	80075f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	6859      	ldr	r1, [r3, #4]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	461a      	mov	r2, r3
 80075cc:	f000 faa2 	bl	8007b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2140      	movs	r1, #64	; 0x40
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 fafb 	bl	8007bd2 <TIM_ITRx_SetConfig>
      break;
 80075dc:	e00b      	b.n	80075f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4619      	mov	r1, r3
 80075e8:	4610      	mov	r0, r2
 80075ea:	f000 faf2 	bl	8007bd2 <TIM_ITRx_SetConfig>
        break;
 80075ee:	e002      	b.n	80075f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80075f0:	bf00      	nop
 80075f2:	e000      	b.n	80075f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80075f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a40      	ldr	r2, [pc, #256]	; (8007788 <TIM_Base_SetConfig+0x114>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d013      	beq.n	80076b4 <TIM_Base_SetConfig+0x40>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007692:	d00f      	beq.n	80076b4 <TIM_Base_SetConfig+0x40>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a3d      	ldr	r2, [pc, #244]	; (800778c <TIM_Base_SetConfig+0x118>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d00b      	beq.n	80076b4 <TIM_Base_SetConfig+0x40>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a3c      	ldr	r2, [pc, #240]	; (8007790 <TIM_Base_SetConfig+0x11c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d007      	beq.n	80076b4 <TIM_Base_SetConfig+0x40>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a3b      	ldr	r2, [pc, #236]	; (8007794 <TIM_Base_SetConfig+0x120>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d003      	beq.n	80076b4 <TIM_Base_SetConfig+0x40>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a3a      	ldr	r2, [pc, #232]	; (8007798 <TIM_Base_SetConfig+0x124>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d108      	bne.n	80076c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a2f      	ldr	r2, [pc, #188]	; (8007788 <TIM_Base_SetConfig+0x114>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d02b      	beq.n	8007726 <TIM_Base_SetConfig+0xb2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d4:	d027      	beq.n	8007726 <TIM_Base_SetConfig+0xb2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a2c      	ldr	r2, [pc, #176]	; (800778c <TIM_Base_SetConfig+0x118>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d023      	beq.n	8007726 <TIM_Base_SetConfig+0xb2>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a2b      	ldr	r2, [pc, #172]	; (8007790 <TIM_Base_SetConfig+0x11c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d01f      	beq.n	8007726 <TIM_Base_SetConfig+0xb2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a2a      	ldr	r2, [pc, #168]	; (8007794 <TIM_Base_SetConfig+0x120>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d01b      	beq.n	8007726 <TIM_Base_SetConfig+0xb2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a29      	ldr	r2, [pc, #164]	; (8007798 <TIM_Base_SetConfig+0x124>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d017      	beq.n	8007726 <TIM_Base_SetConfig+0xb2>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a28      	ldr	r2, [pc, #160]	; (800779c <TIM_Base_SetConfig+0x128>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d013      	beq.n	8007726 <TIM_Base_SetConfig+0xb2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a27      	ldr	r2, [pc, #156]	; (80077a0 <TIM_Base_SetConfig+0x12c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00f      	beq.n	8007726 <TIM_Base_SetConfig+0xb2>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a26      	ldr	r2, [pc, #152]	; (80077a4 <TIM_Base_SetConfig+0x130>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d00b      	beq.n	8007726 <TIM_Base_SetConfig+0xb2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a25      	ldr	r2, [pc, #148]	; (80077a8 <TIM_Base_SetConfig+0x134>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d007      	beq.n	8007726 <TIM_Base_SetConfig+0xb2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a24      	ldr	r2, [pc, #144]	; (80077ac <TIM_Base_SetConfig+0x138>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d003      	beq.n	8007726 <TIM_Base_SetConfig+0xb2>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a23      	ldr	r2, [pc, #140]	; (80077b0 <TIM_Base_SetConfig+0x13c>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d108      	bne.n	8007738 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800772c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	4313      	orrs	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	4313      	orrs	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a0a      	ldr	r2, [pc, #40]	; (8007788 <TIM_Base_SetConfig+0x114>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d003      	beq.n	800776c <TIM_Base_SetConfig+0xf8>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a0c      	ldr	r2, [pc, #48]	; (8007798 <TIM_Base_SetConfig+0x124>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d103      	bne.n	8007774 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	691a      	ldr	r2, [r3, #16]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	615a      	str	r2, [r3, #20]
}
 800777a:	bf00      	nop
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	40010000 	.word	0x40010000
 800778c:	40000400 	.word	0x40000400
 8007790:	40000800 	.word	0x40000800
 8007794:	40000c00 	.word	0x40000c00
 8007798:	40010400 	.word	0x40010400
 800779c:	40014000 	.word	0x40014000
 80077a0:	40014400 	.word	0x40014400
 80077a4:	40014800 	.word	0x40014800
 80077a8:	40001800 	.word	0x40001800
 80077ac:	40001c00 	.word	0x40001c00
 80077b0:	40002000 	.word	0x40002000

080077b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b087      	sub	sp, #28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	f023 0201 	bic.w	r2, r3, #1
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f023 0303 	bic.w	r3, r3, #3
 80077ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f023 0302 	bic.w	r3, r3, #2
 80077fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a20      	ldr	r2, [pc, #128]	; (800788c <TIM_OC1_SetConfig+0xd8>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d003      	beq.n	8007818 <TIM_OC1_SetConfig+0x64>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a1f      	ldr	r2, [pc, #124]	; (8007890 <TIM_OC1_SetConfig+0xdc>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d10c      	bne.n	8007832 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f023 0308 	bic.w	r3, r3, #8
 800781e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	4313      	orrs	r3, r2
 8007828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f023 0304 	bic.w	r3, r3, #4
 8007830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a15      	ldr	r2, [pc, #84]	; (800788c <TIM_OC1_SetConfig+0xd8>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d003      	beq.n	8007842 <TIM_OC1_SetConfig+0x8e>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a14      	ldr	r2, [pc, #80]	; (8007890 <TIM_OC1_SetConfig+0xdc>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d111      	bne.n	8007866 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	4313      	orrs	r3, r2
 800785a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	4313      	orrs	r3, r2
 8007864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	621a      	str	r2, [r3, #32]
}
 8007880:	bf00      	nop
 8007882:	371c      	adds	r7, #28
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	40010000 	.word	0x40010000
 8007890:	40010400 	.word	0x40010400

08007894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	f023 0210 	bic.w	r2, r3, #16
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	021b      	lsls	r3, r3, #8
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f023 0320 	bic.w	r3, r3, #32
 80078de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	011b      	lsls	r3, r3, #4
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a22      	ldr	r2, [pc, #136]	; (8007978 <TIM_OC2_SetConfig+0xe4>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d003      	beq.n	80078fc <TIM_OC2_SetConfig+0x68>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a21      	ldr	r2, [pc, #132]	; (800797c <TIM_OC2_SetConfig+0xe8>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d10d      	bne.n	8007918 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	011b      	lsls	r3, r3, #4
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	4313      	orrs	r3, r2
 800790e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007916:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a17      	ldr	r2, [pc, #92]	; (8007978 <TIM_OC2_SetConfig+0xe4>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d003      	beq.n	8007928 <TIM_OC2_SetConfig+0x94>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a16      	ldr	r2, [pc, #88]	; (800797c <TIM_OC2_SetConfig+0xe8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d113      	bne.n	8007950 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800792e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	4313      	orrs	r3, r2
 8007942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	4313      	orrs	r3, r2
 800794e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	621a      	str	r2, [r3, #32]
}
 800796a:	bf00      	nop
 800796c:	371c      	adds	r7, #28
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	40010000 	.word	0x40010000
 800797c:	40010400 	.word	0x40010400

08007980 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f023 0303 	bic.w	r3, r3, #3
 80079b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	4313      	orrs	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	021b      	lsls	r3, r3, #8
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a21      	ldr	r2, [pc, #132]	; (8007a60 <TIM_OC3_SetConfig+0xe0>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d003      	beq.n	80079e6 <TIM_OC3_SetConfig+0x66>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a20      	ldr	r2, [pc, #128]	; (8007a64 <TIM_OC3_SetConfig+0xe4>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d10d      	bne.n	8007a02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	021b      	lsls	r3, r3, #8
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a16      	ldr	r2, [pc, #88]	; (8007a60 <TIM_OC3_SetConfig+0xe0>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d003      	beq.n	8007a12 <TIM_OC3_SetConfig+0x92>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a15      	ldr	r2, [pc, #84]	; (8007a64 <TIM_OC3_SetConfig+0xe4>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d113      	bne.n	8007a3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	011b      	lsls	r3, r3, #4
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	011b      	lsls	r3, r3, #4
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	621a      	str	r2, [r3, #32]
}
 8007a54:	bf00      	nop
 8007a56:	371c      	adds	r7, #28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr
 8007a60:	40010000 	.word	0x40010000
 8007a64:	40010400 	.word	0x40010400

08007a68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b087      	sub	sp, #28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	021b      	lsls	r3, r3, #8
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	031b      	lsls	r3, r3, #12
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a12      	ldr	r2, [pc, #72]	; (8007b0c <TIM_OC4_SetConfig+0xa4>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d003      	beq.n	8007ad0 <TIM_OC4_SetConfig+0x68>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a11      	ldr	r2, [pc, #68]	; (8007b10 <TIM_OC4_SetConfig+0xa8>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d109      	bne.n	8007ae4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	019b      	lsls	r3, r3, #6
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	621a      	str	r2, [r3, #32]
}
 8007afe:	bf00      	nop
 8007b00:	371c      	adds	r7, #28
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	40010000 	.word	0x40010000
 8007b10:	40010400 	.word	0x40010400

08007b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6a1b      	ldr	r3, [r3, #32]
 8007b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	f023 0201 	bic.w	r2, r3, #1
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	011b      	lsls	r3, r3, #4
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f023 030a 	bic.w	r3, r3, #10
 8007b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	621a      	str	r2, [r3, #32]
}
 8007b66:	bf00      	nop
 8007b68:	371c      	adds	r7, #28
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b087      	sub	sp, #28
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	60f8      	str	r0, [r7, #12]
 8007b7a:	60b9      	str	r1, [r7, #8]
 8007b7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	f023 0210 	bic.w	r2, r3, #16
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	031b      	lsls	r3, r3, #12
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	011b      	lsls	r3, r3, #4
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	621a      	str	r2, [r3, #32]
}
 8007bc6:	bf00      	nop
 8007bc8:	371c      	adds	r7, #28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b085      	sub	sp, #20
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	f043 0307 	orr.w	r3, r3, #7
 8007bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	609a      	str	r2, [r3, #8]
}
 8007bfc:	bf00      	nop
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	021a      	lsls	r2, r3, #8
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	609a      	str	r2, [r3, #8]
}
 8007c3c:	bf00      	nop
 8007c3e:	371c      	adds	r7, #28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	f003 031f 	and.w	r3, r3, #31
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6a1a      	ldr	r2, [r3, #32]
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	43db      	mvns	r3, r3
 8007c6a:	401a      	ands	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6a1a      	ldr	r2, [r3, #32]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	f003 031f 	and.w	r3, r3, #31
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c80:	431a      	orrs	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	621a      	str	r2, [r3, #32]
}
 8007c86:	bf00      	nop
 8007c88:	371c      	adds	r7, #28
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
	...

08007c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d101      	bne.n	8007cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ca8:	2302      	movs	r3, #2
 8007caa:	e05a      	b.n	8007d62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a21      	ldr	r2, [pc, #132]	; (8007d70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d022      	beq.n	8007d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf8:	d01d      	beq.n	8007d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a1d      	ldr	r2, [pc, #116]	; (8007d74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d018      	beq.n	8007d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a1b      	ldr	r2, [pc, #108]	; (8007d78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d013      	beq.n	8007d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a1a      	ldr	r2, [pc, #104]	; (8007d7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d00e      	beq.n	8007d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a18      	ldr	r2, [pc, #96]	; (8007d80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d009      	beq.n	8007d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a17      	ldr	r2, [pc, #92]	; (8007d84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d004      	beq.n	8007d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a15      	ldr	r2, [pc, #84]	; (8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d10c      	bne.n	8007d50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	40010000 	.word	0x40010000
 8007d74:	40000400 	.word	0x40000400
 8007d78:	40000800 	.word	0x40000800
 8007d7c:	40000c00 	.word	0x40000c00
 8007d80:	40010400 	.word	0x40010400
 8007d84:	40014000 	.word	0x40014000
 8007d88:	40001800 	.word	0x40001800

08007d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007db4:	b084      	sub	sp, #16
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	f107 001c 	add.w	r0, r7, #28
 8007dc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d122      	bne.n	8007e12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d105      	bne.n	8007e06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f94a 	bl	80080a0 <USB_CoreReset>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]
 8007e10:	e01a      	b.n	8007e48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f93e 	bl	80080a0 <USB_CoreReset>
 8007e24:	4603      	mov	r3, r0
 8007e26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d106      	bne.n	8007e3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	639a      	str	r2, [r3, #56]	; 0x38
 8007e3a:	e005      	b.n	8007e48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d10b      	bne.n	8007e66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f043 0206 	orr.w	r2, r3, #6
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f043 0220 	orr.w	r2, r3, #32
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e72:	b004      	add	sp, #16
 8007e74:	4770      	bx	lr

08007e76 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f043 0201 	orr.w	r2, r3, #1
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f023 0201 	bic.w	r2, r3, #1
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ed2:	78fb      	ldrb	r3, [r7, #3]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d106      	bne.n	8007ee6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	60da      	str	r2, [r3, #12]
 8007ee4:	e00b      	b.n	8007efe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d106      	bne.n	8007efa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	60da      	str	r2, [r3, #12]
 8007ef8:	e001      	b.n	8007efe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e003      	b.n	8007f06 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007efe:	2032      	movs	r0, #50	; 0x32
 8007f00:	f7fa fa60 	bl	80023c4 <HAL_Delay>

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
	...

08007f10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	019b      	lsls	r3, r3, #6
 8007f22:	f043 0220 	orr.w	r2, r3, #32
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	60fb      	str	r3, [r7, #12]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4a09      	ldr	r2, [pc, #36]	; (8007f58 <USB_FlushTxFifo+0x48>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d901      	bls.n	8007f3c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e006      	b.n	8007f4a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	f003 0320 	and.w	r3, r3, #32
 8007f44:	2b20      	cmp	r3, #32
 8007f46:	d0f0      	beq.n	8007f2a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	00030d40 	.word	0x00030d40

08007f5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2210      	movs	r2, #16
 8007f6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	3301      	adds	r3, #1
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4a09      	ldr	r2, [pc, #36]	; (8007f9c <USB_FlushRxFifo+0x40>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d901      	bls.n	8007f80 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e006      	b.n	8007f8e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	f003 0310 	and.w	r3, r3, #16
 8007f88:	2b10      	cmp	r3, #16
 8007f8a:	d0f0      	beq.n	8007f6e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	00030d40 	.word	0x00030d40

08007fa0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b089      	sub	sp, #36	; 0x24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	4611      	mov	r1, r2
 8007fac:	461a      	mov	r2, r3
 8007fae:	460b      	mov	r3, r1
 8007fb0:	71fb      	strb	r3, [r7, #7]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007fbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d11a      	bne.n	8007ffc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007fc6:	88bb      	ldrh	r3, [r7, #4]
 8007fc8:	3303      	adds	r3, #3
 8007fca:	089b      	lsrs	r3, r3, #2
 8007fcc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007fce:	2300      	movs	r3, #0
 8007fd0:	61bb      	str	r3, [r7, #24]
 8007fd2:	e00f      	b.n	8007ff4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007fd4:	79fb      	ldrb	r3, [r7, #7]
 8007fd6:	031a      	lsls	r2, r3, #12
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	3304      	adds	r3, #4
 8007fec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	61bb      	str	r3, [r7, #24]
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d3eb      	bcc.n	8007fd4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3724      	adds	r7, #36	; 0x24
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800800a:	b480      	push	{r7}
 800800c:	b089      	sub	sp, #36	; 0x24
 800800e:	af00      	add	r7, sp, #0
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	60b9      	str	r1, [r7, #8]
 8008014:	4613      	mov	r3, r2
 8008016:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008020:	88fb      	ldrh	r3, [r7, #6]
 8008022:	3303      	adds	r3, #3
 8008024:	089b      	lsrs	r3, r3, #2
 8008026:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008028:	2300      	movs	r3, #0
 800802a:	61bb      	str	r3, [r7, #24]
 800802c:	e00b      	b.n	8008046 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	601a      	str	r2, [r3, #0]
    pDest++;
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	3304      	adds	r3, #4
 800803e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	3301      	adds	r3, #1
 8008044:	61bb      	str	r3, [r7, #24]
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	429a      	cmp	r2, r3
 800804c:	d3ef      	bcc.n	800802e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800804e:	69fb      	ldr	r3, [r7, #28]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3724      	adds	r7, #36	; 0x24
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	4013      	ands	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008074:	68fb      	ldr	r3, [r7, #12]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	f003 0301 	and.w	r3, r3, #1
}
 8008092:	4618      	mov	r0, r3
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
	...

080080a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80080a8:	2300      	movs	r3, #0
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3301      	adds	r3, #1
 80080b0:	60fb      	str	r3, [r7, #12]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4a13      	ldr	r2, [pc, #76]	; (8008104 <USB_CoreReset+0x64>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d901      	bls.n	80080be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e01b      	b.n	80080f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	daf2      	bge.n	80080ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	f043 0201 	orr.w	r2, r3, #1
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3301      	adds	r3, #1
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	4a09      	ldr	r2, [pc, #36]	; (8008104 <USB_CoreReset+0x64>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d901      	bls.n	80080e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e006      	b.n	80080f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d0f0      	beq.n	80080d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	00030d40 	.word	0x00030d40

08008108 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008108:	b084      	sub	sp, #16
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	f107 001c 	add.w	r0, r7, #28
 8008116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008124:	461a      	mov	r2, r3
 8008126:	2300      	movs	r3, #0
 8008128:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008146:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008156:	2b00      	cmp	r3, #0
 8008158:	d018      	beq.n	800818c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	2b01      	cmp	r3, #1
 800815e:	d10a      	bne.n	8008176 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800816e:	f043 0304 	orr.w	r3, r3, #4
 8008172:	6013      	str	r3, [r2, #0]
 8008174:	e014      	b.n	80081a0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008184:	f023 0304 	bic.w	r3, r3, #4
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	e009      	b.n	80081a0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800819a:	f023 0304 	bic.w	r3, r3, #4
 800819e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80081a0:	2110      	movs	r1, #16
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7ff feb4 	bl	8007f10 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7ff fed7 	bl	8007f5c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80081ae:	2300      	movs	r3, #0
 80081b0:	60fb      	str	r3, [r7, #12]
 80081b2:	e015      	b.n	80081e0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081c0:	461a      	mov	r2, r3
 80081c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081c6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d4:	461a      	mov	r2, r3
 80081d6:	2300      	movs	r3, #0
 80081d8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	3301      	adds	r3, #1
 80081de:	60fb      	str	r3, [r7, #12]
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d3e5      	bcc.n	80081b4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80081e8:	2101      	movs	r1, #1
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f8ac 	bl	8008348 <USB_DriveVbus>

  HAL_Delay(200U);
 80081f0:	20c8      	movs	r0, #200	; 0xc8
 80081f2:	f7fa f8e7 	bl	80023c4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008202:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00b      	beq.n	8008228 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008216:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a14      	ldr	r2, [pc, #80]	; (800826c <USB_HostInit+0x164>)
 800821c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a13      	ldr	r2, [pc, #76]	; (8008270 <USB_HostInit+0x168>)
 8008222:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008226:	e009      	b.n	800823c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2280      	movs	r2, #128	; 0x80
 800822c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a10      	ldr	r2, [pc, #64]	; (8008274 <USB_HostInit+0x16c>)
 8008232:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a10      	ldr	r2, [pc, #64]	; (8008278 <USB_HostInit+0x170>)
 8008238:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	2b00      	cmp	r3, #0
 8008240:	d105      	bne.n	800824e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	f043 0210 	orr.w	r2, r3, #16
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	699a      	ldr	r2, [r3, #24]
 8008252:	4b0a      	ldr	r3, [pc, #40]	; (800827c <USB_HostInit+0x174>)
 8008254:	4313      	orrs	r3, r2
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008266:	b004      	add	sp, #16
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	01000200 	.word	0x01000200
 8008270:	00e00300 	.word	0x00e00300
 8008274:	00600080 	.word	0x00600080
 8008278:	004000e0 	.word	0x004000e0
 800827c:	a3200008 	.word	0xa3200008

08008280 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800829e:	f023 0303 	bic.w	r3, r3, #3
 80082a2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	78fb      	ldrb	r3, [r7, #3]
 80082ae:	f003 0303 	and.w	r3, r3, #3
 80082b2:	68f9      	ldr	r1, [r7, #12]
 80082b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80082b8:	4313      	orrs	r3, r2
 80082ba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80082bc:	78fb      	ldrb	r3, [r7, #3]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d107      	bne.n	80082d2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082c8:	461a      	mov	r2, r3
 80082ca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80082ce:	6053      	str	r3, [r2, #4]
 80082d0:	e009      	b.n	80082e6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80082d2:	78fb      	ldrb	r3, [r7, #3]
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d106      	bne.n	80082e6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082de:	461a      	mov	r2, r3
 80082e0:	f241 7370 	movw	r3, #6000	; 0x1770
 80082e4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008300:	2300      	movs	r3, #0
 8008302:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008314:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800831e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008322:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008324:	2064      	movs	r0, #100	; 0x64
 8008326:	f7fa f84d 	bl	80023c4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008332:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008336:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008338:	200a      	movs	r0, #10
 800833a:	f7fa f843 	bl	80023c4 <HAL_Delay>

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800836c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d109      	bne.n	800838c <USB_DriveVbus+0x44>
 8008378:	78fb      	ldrb	r3, [r7, #3]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d106      	bne.n	800838c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008386:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800838a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008396:	d109      	bne.n	80083ac <USB_DriveVbus+0x64>
 8008398:	78fb      	ldrb	r3, [r7, #3]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d106      	bne.n	80083ac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083aa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b085      	sub	sp, #20
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	0c5b      	lsrs	r3, r3, #17
 80083d8:	f003 0303 	and.w	r3, r3, #3
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	b29b      	uxth	r3, r3
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
	...

0800840c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	4608      	mov	r0, r1
 8008416:	4611      	mov	r1, r2
 8008418:	461a      	mov	r2, r3
 800841a:	4603      	mov	r3, r0
 800841c:	70fb      	strb	r3, [r7, #3]
 800841e:	460b      	mov	r3, r1
 8008420:	70bb      	strb	r3, [r7, #2]
 8008422:	4613      	mov	r3, r2
 8008424:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800842e:	78fb      	ldrb	r3, [r7, #3]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	4413      	add	r3, r2
 8008436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800843a:	461a      	mov	r2, r3
 800843c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008440:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008442:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008446:	2b03      	cmp	r3, #3
 8008448:	d87e      	bhi.n	8008548 <USB_HC_Init+0x13c>
 800844a:	a201      	add	r2, pc, #4	; (adr r2, 8008450 <USB_HC_Init+0x44>)
 800844c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008450:	08008461 	.word	0x08008461
 8008454:	0800850b 	.word	0x0800850b
 8008458:	08008461 	.word	0x08008461
 800845c:	080084cd 	.word	0x080084cd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008460:	78fb      	ldrb	r3, [r7, #3]
 8008462:	015a      	lsls	r2, r3, #5
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	4413      	add	r3, r2
 8008468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800846c:	461a      	mov	r2, r3
 800846e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008472:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008474:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008478:	2b00      	cmp	r3, #0
 800847a:	da10      	bge.n	800849e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	4413      	add	r3, r2
 8008484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	78fa      	ldrb	r2, [r7, #3]
 800848c:	0151      	lsls	r1, r2, #5
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	440a      	add	r2, r1
 8008492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800849a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800849c:	e057      	b.n	800854e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d051      	beq.n	800854e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80084aa:	78fb      	ldrb	r3, [r7, #3]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	78fa      	ldrb	r2, [r7, #3]
 80084ba:	0151      	lsls	r1, r2, #5
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	440a      	add	r2, r1
 80084c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80084c8:	60d3      	str	r3, [r2, #12]
      break;
 80084ca:	e040      	b.n	800854e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80084cc:	78fb      	ldrb	r3, [r7, #3]
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d8:	461a      	mov	r2, r3
 80084da:	f240 639d 	movw	r3, #1693	; 0x69d
 80084de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80084e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	da34      	bge.n	8008552 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80084e8:	78fb      	ldrb	r3, [r7, #3]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	78fa      	ldrb	r2, [r7, #3]
 80084f8:	0151      	lsls	r1, r2, #5
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	440a      	add	r2, r1
 80084fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008506:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008508:	e023      	b.n	8008552 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800850a:	78fb      	ldrb	r3, [r7, #3]
 800850c:	015a      	lsls	r2, r3, #5
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	4413      	add	r3, r2
 8008512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008516:	461a      	mov	r2, r3
 8008518:	f240 2325 	movw	r3, #549	; 0x225
 800851c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800851e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008522:	2b00      	cmp	r3, #0
 8008524:	da17      	bge.n	8008556 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008526:	78fb      	ldrb	r3, [r7, #3]
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	4413      	add	r3, r2
 800852e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	78fa      	ldrb	r2, [r7, #3]
 8008536:	0151      	lsls	r1, r2, #5
 8008538:	693a      	ldr	r2, [r7, #16]
 800853a:	440a      	add	r2, r1
 800853c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008540:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008544:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008546:	e006      	b.n	8008556 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	77fb      	strb	r3, [r7, #31]
      break;
 800854c:	e004      	b.n	8008558 <USB_HC_Init+0x14c>
      break;
 800854e:	bf00      	nop
 8008550:	e002      	b.n	8008558 <USB_HC_Init+0x14c>
      break;
 8008552:	bf00      	nop
 8008554:	e000      	b.n	8008558 <USB_HC_Init+0x14c>
      break;
 8008556:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800855e:	699a      	ldr	r2, [r3, #24]
 8008560:	78fb      	ldrb	r3, [r7, #3]
 8008562:	f003 030f 	and.w	r3, r3, #15
 8008566:	2101      	movs	r1, #1
 8008568:	fa01 f303 	lsl.w	r3, r1, r3
 800856c:	6939      	ldr	r1, [r7, #16]
 800856e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008572:	4313      	orrs	r3, r2
 8008574:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008582:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008586:	2b00      	cmp	r3, #0
 8008588:	da03      	bge.n	8008592 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800858a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800858e:	61bb      	str	r3, [r7, #24]
 8008590:	e001      	b.n	8008596 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008592:	2300      	movs	r3, #0
 8008594:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7ff ff0f 	bl	80083ba <USB_GetHostSpeed>
 800859c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800859e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d106      	bne.n	80085b4 <USB_HC_Init+0x1a8>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d003      	beq.n	80085b4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80085ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085b0:	617b      	str	r3, [r7, #20]
 80085b2:	e001      	b.n	80085b8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085b8:	787b      	ldrb	r3, [r7, #1]
 80085ba:	059b      	lsls	r3, r3, #22
 80085bc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80085c0:	78bb      	ldrb	r3, [r7, #2]
 80085c2:	02db      	lsls	r3, r3, #11
 80085c4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085c8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80085ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80085ce:	049b      	lsls	r3, r3, #18
 80085d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80085d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80085d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80085d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80085dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085e2:	78fb      	ldrb	r3, [r7, #3]
 80085e4:	0159      	lsls	r1, r3, #5
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	440b      	add	r3, r1
 80085ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ee:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085f4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80085f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	d10f      	bne.n	800861e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80085fe:	78fb      	ldrb	r3, [r7, #3]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	4413      	add	r3, r2
 8008606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	78fa      	ldrb	r2, [r7, #3]
 800860e:	0151      	lsls	r1, r2, #5
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	440a      	add	r2, r1
 8008614:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008618:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800861c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800861e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3720      	adds	r7, #32
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08c      	sub	sp, #48	; 0x30
 800862c:	af02      	add	r7, sp, #8
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	4613      	mov	r3, r2
 8008634:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	785b      	ldrb	r3, [r3, #1]
 800863e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008644:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800864a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864e:	2b00      	cmp	r3, #0
 8008650:	d02d      	beq.n	80086ae <USB_HC_StartXfer+0x86>
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	791b      	ldrb	r3, [r3, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d129      	bne.n	80086ae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800865a:	79fb      	ldrb	r3, [r7, #7]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d117      	bne.n	8008690 <USB_HC_StartXfer+0x68>
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	79db      	ldrb	r3, [r3, #7]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <USB_HC_StartXfer+0x48>
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	79db      	ldrb	r3, [r3, #7]
 800866c:	2b02      	cmp	r3, #2
 800866e:	d10f      	bne.n	8008690 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	015a      	lsls	r2, r3, #5
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	4413      	add	r3, r2
 8008678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	69fa      	ldr	r2, [r7, #28]
 8008680:	0151      	lsls	r1, r2, #5
 8008682:	6a3a      	ldr	r2, [r7, #32]
 8008684:	440a      	add	r2, r1
 8008686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800868a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800868e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008690:	79fb      	ldrb	r3, [r7, #7]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10b      	bne.n	80086ae <USB_HC_StartXfer+0x86>
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	795b      	ldrb	r3, [r3, #5]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d107      	bne.n	80086ae <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	785b      	ldrb	r3, [r3, #1]
 80086a2:	4619      	mov	r1, r3
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 fa2f 	bl	8008b08 <USB_DoPing>
      return HAL_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	e0f8      	b.n	80088a0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d018      	beq.n	80086e8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	8912      	ldrh	r2, [r2, #8]
 80086be:	4413      	add	r3, r2
 80086c0:	3b01      	subs	r3, #1
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	8912      	ldrh	r2, [r2, #8]
 80086c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80086ca:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80086cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80086ce:	8b7b      	ldrh	r3, [r7, #26]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d90b      	bls.n	80086ec <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80086d4:	8b7b      	ldrh	r3, [r7, #26]
 80086d6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80086d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	8912      	ldrh	r2, [r2, #8]
 80086de:	fb02 f203 	mul.w	r2, r2, r3
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	611a      	str	r2, [r3, #16]
 80086e6:	e001      	b.n	80086ec <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80086e8:	2301      	movs	r3, #1
 80086ea:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	78db      	ldrb	r3, [r3, #3]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d007      	beq.n	8008704 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80086f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	8912      	ldrh	r2, [r2, #8]
 80086fa:	fb02 f203 	mul.w	r2, r2, r3
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	611a      	str	r2, [r3, #16]
 8008702:	e003      	b.n	800870c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	695a      	ldr	r2, [r3, #20]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008714:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008716:	04d9      	lsls	r1, r3, #19
 8008718:	4b63      	ldr	r3, [pc, #396]	; (80088a8 <USB_HC_StartXfer+0x280>)
 800871a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800871c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	7a9b      	ldrb	r3, [r3, #10]
 8008722:	075b      	lsls	r3, r3, #29
 8008724:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008728:	69f9      	ldr	r1, [r7, #28]
 800872a:	0148      	lsls	r0, r1, #5
 800872c:	6a39      	ldr	r1, [r7, #32]
 800872e:	4401      	add	r1, r0
 8008730:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008734:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008736:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d009      	beq.n	8008752 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	68d9      	ldr	r1, [r3, #12]
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	4413      	add	r3, r2
 800874a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800874e:	460a      	mov	r2, r1
 8008750:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	bf0c      	ite	eq
 8008762:	2301      	moveq	r3, #1
 8008764:	2300      	movne	r3, #0
 8008766:	b2db      	uxtb	r3, r3
 8008768:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	015a      	lsls	r2, r3, #5
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	4413      	add	r3, r2
 8008772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	69fa      	ldr	r2, [r7, #28]
 800877a:	0151      	lsls	r1, r2, #5
 800877c:	6a3a      	ldr	r2, [r7, #32]
 800877e:	440a      	add	r2, r1
 8008780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008784:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008788:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	4413      	add	r3, r2
 8008792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	7e7b      	ldrb	r3, [r7, #25]
 800879a:	075b      	lsls	r3, r3, #29
 800879c:	69f9      	ldr	r1, [r7, #28]
 800879e:	0148      	lsls	r0, r1, #5
 80087a0:	6a39      	ldr	r1, [r7, #32]
 80087a2:	4401      	add	r1, r0
 80087a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80087a8:	4313      	orrs	r3, r2
 80087aa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80087c2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	78db      	ldrb	r3, [r3, #3]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d004      	beq.n	80087d6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d2:	613b      	str	r3, [r7, #16]
 80087d4:	e003      	b.n	80087de <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087dc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087e4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	6a3b      	ldr	r3, [r7, #32]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f2:	461a      	mov	r2, r3
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	e04e      	b.n	80088a0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	78db      	ldrb	r3, [r3, #3]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d149      	bne.n	800889e <USB_HC_StartXfer+0x276>
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d045      	beq.n	800889e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	79db      	ldrb	r3, [r3, #7]
 8008816:	2b03      	cmp	r3, #3
 8008818:	d830      	bhi.n	800887c <USB_HC_StartXfer+0x254>
 800881a:	a201      	add	r2, pc, #4	; (adr r2, 8008820 <USB_HC_StartXfer+0x1f8>)
 800881c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008820:	08008831 	.word	0x08008831
 8008824:	08008855 	.word	0x08008855
 8008828:	08008831 	.word	0x08008831
 800882c:	08008855 	.word	0x08008855
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	3303      	adds	r3, #3
 8008836:	089b      	lsrs	r3, r3, #2
 8008838:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800883a:	8afa      	ldrh	r2, [r7, #22]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	b29b      	uxth	r3, r3
 8008842:	429a      	cmp	r2, r3
 8008844:	d91c      	bls.n	8008880 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	f043 0220 	orr.w	r2, r3, #32
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	619a      	str	r2, [r3, #24]
        }
        break;
 8008852:	e015      	b.n	8008880 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	3303      	adds	r3, #3
 800885a:	089b      	lsrs	r3, r3, #2
 800885c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800885e:	8afa      	ldrh	r2, [r7, #22]
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	b29b      	uxth	r3, r3
 800886a:	429a      	cmp	r2, r3
 800886c:	d90a      	bls.n	8008884 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	619a      	str	r2, [r3, #24]
        }
        break;
 800887a:	e003      	b.n	8008884 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800887c:	bf00      	nop
 800887e:	e002      	b.n	8008886 <USB_HC_StartXfer+0x25e>
        break;
 8008880:	bf00      	nop
 8008882:	e000      	b.n	8008886 <USB_HC_StartXfer+0x25e>
        break;
 8008884:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	68d9      	ldr	r1, [r3, #12]
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	785a      	ldrb	r2, [r3, #1]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	b29b      	uxth	r3, r3
 8008894:	2000      	movs	r0, #0
 8008896:	9000      	str	r0, [sp, #0]
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f7ff fb81 	bl	8007fa0 <USB_WritePacket>
  }

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3728      	adds	r7, #40	; 0x28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	1ff80000 	.word	0x1ff80000

080088ac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	b29b      	uxth	r3, r3
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr

080088ce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b089      	sub	sp, #36	; 0x24
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	460b      	mov	r3, r1
 80088d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80088de:	78fb      	ldrb	r3, [r7, #3]
 80088e0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	0c9b      	lsrs	r3, r3, #18
 80088f6:	f003 0303 	and.w	r3, r3, #3
 80088fa:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	4413      	add	r3, r2
 8008904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	0fdb      	lsrs	r3, r3, #31
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f003 0320 	and.w	r3, r3, #32
 800891a:	2b20      	cmp	r3, #32
 800891c:	d104      	bne.n	8008928 <USB_HC_Halt+0x5a>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	e0e8      	b.n	8008afa <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d002      	beq.n	8008934 <USB_HC_Halt+0x66>
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	2b02      	cmp	r3, #2
 8008932:	d173      	bne.n	8008a1c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	4413      	add	r3, r2
 800893c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	0151      	lsls	r1, r2, #5
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	440a      	add	r2, r1
 800894a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800894e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008952:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	f003 0320 	and.w	r3, r3, #32
 800895c:	2b00      	cmp	r3, #0
 800895e:	f040 80cb 	bne.w	8008af8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008966:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d143      	bne.n	80089f6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	4413      	add	r3, r2
 8008976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	0151      	lsls	r1, r2, #5
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	440a      	add	r2, r1
 8008984:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008988:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800898c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	015a      	lsls	r2, r3, #5
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	4413      	add	r3, r2
 8008996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	0151      	lsls	r1, r2, #5
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	440a      	add	r2, r1
 80089a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	697a      	ldr	r2, [r7, #20]
 80089be:	0151      	lsls	r1, r2, #5
 80089c0:	69ba      	ldr	r2, [r7, #24]
 80089c2:	440a      	add	r2, r1
 80089c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089cc:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	3301      	adds	r3, #1
 80089d2:	61fb      	str	r3, [r7, #28]
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089da:	d81d      	bhi.n	8008a18 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089f2:	d0ec      	beq.n	80089ce <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80089f4:	e080      	b.n	8008af8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	015a      	lsls	r2, r3, #5
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	4413      	add	r3, r2
 80089fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	0151      	lsls	r1, r2, #5
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	440a      	add	r2, r1
 8008a0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a14:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a16:	e06f      	b.n	8008af8 <USB_HC_Halt+0x22a>
            break;
 8008a18:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a1a:	e06d      	b.n	8008af8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	0151      	lsls	r1, r2, #5
 8008a2e:	69ba      	ldr	r2, [r7, #24]
 8008a30:	440a      	add	r2, r1
 8008a32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a3a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d143      	bne.n	8008ad4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	0151      	lsls	r1, r2, #5
 8008a5e:	69ba      	ldr	r2, [r7, #24]
 8008a60:	440a      	add	r2, r1
 8008a62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a6a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	015a      	lsls	r2, r3, #5
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	4413      	add	r3, r2
 8008a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	0151      	lsls	r1, r2, #5
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	440a      	add	r2, r1
 8008a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a8a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	015a      	lsls	r2, r3, #5
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	0151      	lsls	r1, r2, #5
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	440a      	add	r2, r1
 8008aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008aa6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008aaa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	61fb      	str	r3, [r7, #28]
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ab8:	d81d      	bhi.n	8008af6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ad0:	d0ec      	beq.n	8008aac <USB_HC_Halt+0x1de>
 8008ad2:	e011      	b.n	8008af8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	4413      	add	r3, r2
 8008adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	0151      	lsls	r1, r2, #5
 8008ae6:	69ba      	ldr	r2, [r7, #24]
 8008ae8:	440a      	add	r2, r1
 8008aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	e000      	b.n	8008af8 <USB_HC_Halt+0x22a>
          break;
 8008af6:	bf00      	nop
    }
  }

  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3724      	adds	r7, #36	; 0x24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
	...

08008b08 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b087      	sub	sp, #28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008b18:	78fb      	ldrb	r3, [r7, #3]
 8008b1a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	04da      	lsls	r2, r3, #19
 8008b24:	4b15      	ldr	r3, [pc, #84]	; (8008b7c <USB_DoPing+0x74>)
 8008b26:	4013      	ands	r3, r2
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	0151      	lsls	r1, r2, #5
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	440a      	add	r2, r1
 8008b30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b38:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b50:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b58:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b66:	461a      	mov	r2, r3
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	371c      	adds	r7, #28
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	1ff80000 	.word	0x1ff80000

08008b80 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7ff f981 	bl	8007e98 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008b96:	2110      	movs	r1, #16
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7ff f9b9 	bl	8007f10 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7ff f9dc 	bl	8007f5c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	613b      	str	r3, [r7, #16]
 8008ba8:	e01f      	b.n	8008bea <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bc0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bc8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bd0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	015a      	lsls	r2, r3, #5
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bde:	461a      	mov	r2, r3
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	3301      	adds	r3, #1
 8008be8:	613b      	str	r3, [r7, #16]
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	2b0f      	cmp	r3, #15
 8008bee:	d9dc      	bls.n	8008baa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	613b      	str	r3, [r7, #16]
 8008bf4:	e034      	b.n	8008c60 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c0c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c14:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c1c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	3301      	adds	r3, #1
 8008c34:	617b      	str	r3, [r7, #20]
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c3c:	d80c      	bhi.n	8008c58 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c54:	d0ec      	beq.n	8008c30 <USB_StopHost+0xb0>
 8008c56:	e000      	b.n	8008c5a <USB_StopHost+0xda>
        break;
 8008c58:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	613b      	str	r3, [r7, #16]
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	2b0f      	cmp	r3, #15
 8008c64:	d9c7      	bls.n	8008bf6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c72:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c7a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7ff f8fa 	bl	8007e76 <USB_EnableGlobalInt>

  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008c8c:	b590      	push	{r4, r7, lr}
 8008c8e:	b089      	sub	sp, #36	; 0x24
 8008c90:	af04      	add	r7, sp, #16
 8008c92:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008c94:	2301      	movs	r3, #1
 8008c96:	2202      	movs	r2, #2
 8008c98:	2102      	movs	r1, #2
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fc66 	bl	800956c <USBH_FindInterface>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
 8008ca6:	2bff      	cmp	r3, #255	; 0xff
 8008ca8:	d002      	beq.n	8008cb0 <USBH_CDC_InterfaceInit+0x24>
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d901      	bls.n	8008cb4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e13d      	b.n	8008f30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fc3b 	bl	8009534 <USBH_SelectInterface>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008cc2:	7bbb      	ldrb	r3, [r7, #14]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008cc8:	2302      	movs	r3, #2
 8008cca:	e131      	b.n	8008f30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008cd2:	2050      	movs	r0, #80	; 0x50
 8008cd4:	f002 fa00 	bl	800b0d8 <malloc>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008cec:	2302      	movs	r3, #2
 8008cee:	e11f      	b.n	8008f30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008cf0:	2250      	movs	r2, #80	; 0x50
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	68b8      	ldr	r0, [r7, #8]
 8008cf6:	f002 f9ff 	bl	800b0f8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	211a      	movs	r1, #26
 8008d00:	fb01 f303 	mul.w	r3, r1, r3
 8008d04:	4413      	add	r3, r2
 8008d06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	b25b      	sxtb	r3, r3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	da15      	bge.n	8008d3e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	211a      	movs	r1, #26
 8008d18:	fb01 f303 	mul.w	r3, r1, r3
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d22:	781a      	ldrb	r2, [r3, #0]
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	211a      	movs	r1, #26
 8008d2e:	fb01 f303 	mul.w	r3, r1, r3
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008d38:	881a      	ldrh	r2, [r3, #0]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	785b      	ldrb	r3, [r3, #1]
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f001 fe32 	bl	800a9ae <USBH_AllocPipe>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	7819      	ldrb	r1, [r3, #0]
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	7858      	ldrb	r0, [r3, #1]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	8952      	ldrh	r2, [r2, #10]
 8008d6a:	9202      	str	r2, [sp, #8]
 8008d6c:	2203      	movs	r2, #3
 8008d6e:	9201      	str	r2, [sp, #4]
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	4623      	mov	r3, r4
 8008d74:	4602      	mov	r2, r0
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f001 fdea 	bl	800a950 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2200      	movs	r2, #0
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f002 f8f9 	bl	800af7c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	210a      	movs	r1, #10
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fbeb 	bl	800956c <USBH_FindInterface>
 8008d96:	4603      	mov	r3, r0
 8008d98:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
 8008d9c:	2bff      	cmp	r3, #255	; 0xff
 8008d9e:	d002      	beq.n	8008da6 <USBH_CDC_InterfaceInit+0x11a>
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d901      	bls.n	8008daa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008da6:	2302      	movs	r3, #2
 8008da8:	e0c2      	b.n	8008f30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	211a      	movs	r1, #26
 8008db0:	fb01 f303 	mul.w	r3, r1, r3
 8008db4:	4413      	add	r3, r2
 8008db6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	b25b      	sxtb	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	da16      	bge.n	8008df0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	211a      	movs	r1, #26
 8008dc8:	fb01 f303 	mul.w	r3, r1, r3
 8008dcc:	4413      	add	r3, r2
 8008dce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dd2:	781a      	ldrb	r2, [r3, #0]
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	211a      	movs	r1, #26
 8008dde:	fb01 f303 	mul.w	r3, r1, r3
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008de8:	881a      	ldrh	r2, [r3, #0]
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	835a      	strh	r2, [r3, #26]
 8008dee:	e015      	b.n	8008e1c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	211a      	movs	r1, #26
 8008df6:	fb01 f303 	mul.w	r3, r1, r3
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e00:	781a      	ldrb	r2, [r3, #0]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	211a      	movs	r1, #26
 8008e0c:	fb01 f303 	mul.w	r3, r1, r3
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e16:	881a      	ldrh	r2, [r3, #0]
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	211a      	movs	r1, #26
 8008e22:	fb01 f303 	mul.w	r3, r1, r3
 8008e26:	4413      	add	r3, r2
 8008e28:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	b25b      	sxtb	r3, r3
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	da16      	bge.n	8008e62 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	211a      	movs	r1, #26
 8008e3a:	fb01 f303 	mul.w	r3, r1, r3
 8008e3e:	4413      	add	r3, r2
 8008e40:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e44:	781a      	ldrb	r2, [r3, #0]
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	211a      	movs	r1, #26
 8008e50:	fb01 f303 	mul.w	r3, r1, r3
 8008e54:	4413      	add	r3, r2
 8008e56:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008e5a:	881a      	ldrh	r2, [r3, #0]
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	835a      	strh	r2, [r3, #26]
 8008e60:	e015      	b.n	8008e8e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	211a      	movs	r1, #26
 8008e68:	fb01 f303 	mul.w	r3, r1, r3
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e72:	781a      	ldrb	r2, [r3, #0]
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	211a      	movs	r1, #26
 8008e7e:	fb01 f303 	mul.w	r3, r1, r3
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008e88:	881a      	ldrh	r2, [r3, #0]
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	7b9b      	ldrb	r3, [r3, #14]
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f001 fd8a 	bl	800a9ae <USBH_AllocPipe>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	7bdb      	ldrb	r3, [r3, #15]
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f001 fd80 	bl	800a9ae <USBH_AllocPipe>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	7b59      	ldrb	r1, [r3, #13]
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	7b98      	ldrb	r0, [r3, #14]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	8b12      	ldrh	r2, [r2, #24]
 8008ece:	9202      	str	r2, [sp, #8]
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	9201      	str	r2, [sp, #4]
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	4623      	mov	r3, r4
 8008ed8:	4602      	mov	r2, r0
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f001 fd38 	bl	800a950 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	7b19      	ldrb	r1, [r3, #12]
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	7bd8      	ldrb	r0, [r3, #15]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	8b52      	ldrh	r2, [r2, #26]
 8008ef8:	9202      	str	r2, [sp, #8]
 8008efa:	2202      	movs	r2, #2
 8008efc:	9201      	str	r2, [sp, #4]
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	4623      	mov	r3, r4
 8008f02:	4602      	mov	r2, r0
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 fd23 	bl	800a950 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	7b5b      	ldrb	r3, [r3, #13]
 8008f16:	2200      	movs	r2, #0
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f002 f82e 	bl	800af7c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	7b1b      	ldrb	r3, [r3, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	4619      	mov	r1, r3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f002 f827 	bl	800af7c <USBH_LL_SetToggle>

  return USBH_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd90      	pop	{r4, r7, pc}

08008f38 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f46:	69db      	ldr	r3, [r3, #28]
 8008f48:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00e      	beq.n	8008f70 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 fd18 	bl	800a98e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f001 fd43 	bl	800a9f0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	7b1b      	ldrb	r3, [r3, #12]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00e      	beq.n	8008f96 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	7b1b      	ldrb	r3, [r3, #12]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f001 fd05 	bl	800a98e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	7b1b      	ldrb	r3, [r3, #12]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f001 fd30 	bl	800a9f0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	7b5b      	ldrb	r3, [r3, #13]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00e      	beq.n	8008fbc <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	7b5b      	ldrb	r3, [r3, #13]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f001 fcf2 	bl	800a98e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	7b5b      	ldrb	r3, [r3, #13]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 fd1d 	bl	800a9f0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fc2:	69db      	ldr	r3, [r3, #28]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00b      	beq.n	8008fe0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fce:	69db      	ldr	r3, [r3, #28]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f002 f889 	bl	800b0e8 <free>
    phost->pActiveClass->pData = 0U;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fdc:	2200      	movs	r2, #0
 8008fde:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b084      	sub	sp, #16
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ff8:	69db      	ldr	r3, [r3, #28]
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	3340      	adds	r3, #64	; 0x40
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f8b1 	bl	800916a <GetLineCoding>
 8009008:	4603      	mov	r3, r0
 800900a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800900c:	7afb      	ldrb	r3, [r7, #11]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d105      	bne.n	800901e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009018:	2102      	movs	r1, #2
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800901e:	7afb      	ldrb	r3, [r7, #11]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009030:	2301      	movs	r3, #1
 8009032:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800903e:	69db      	ldr	r3, [r3, #28]
 8009040:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009048:	2b04      	cmp	r3, #4
 800904a:	d877      	bhi.n	800913c <USBH_CDC_Process+0x114>
 800904c:	a201      	add	r2, pc, #4	; (adr r2, 8009054 <USBH_CDC_Process+0x2c>)
 800904e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009052:	bf00      	nop
 8009054:	08009069 	.word	0x08009069
 8009058:	0800906f 	.word	0x0800906f
 800905c:	0800909f 	.word	0x0800909f
 8009060:	08009113 	.word	0x08009113
 8009064:	08009121 	.word	0x08009121
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	73fb      	strb	r3, [r7, #15]
      break;
 800906c:	e06d      	b.n	800914a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009072:	4619      	mov	r1, r3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f897 	bl	80091a8 <SetLineCoding>
 800907a:	4603      	mov	r3, r0
 800907c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d104      	bne.n	800908e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	2202      	movs	r2, #2
 8009088:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800908c:	e058      	b.n	8009140 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800908e:	7bbb      	ldrb	r3, [r7, #14]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d055      	beq.n	8009140 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	2204      	movs	r2, #4
 8009098:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800909c:	e050      	b.n	8009140 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	3340      	adds	r3, #64	; 0x40
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f860 	bl	800916a <GetLineCoding>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d126      	bne.n	8009102 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090c6:	791b      	ldrb	r3, [r3, #4]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d13b      	bne.n	8009144 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090d6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80090d8:	429a      	cmp	r2, r3
 80090da:	d133      	bne.n	8009144 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090e6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d12b      	bne.n	8009144 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090f4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d124      	bne.n	8009144 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f958 	bl	80093b0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009100:	e020      	b.n	8009144 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009102:	7bbb      	ldrb	r3, [r7, #14]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d01d      	beq.n	8009144 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	2204      	movs	r2, #4
 800910c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009110:	e018      	b.n	8009144 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f867 	bl	80091e6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f8da 	bl	80092d2 <CDC_ProcessReception>
      break;
 800911e:	e014      	b.n	800914a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009120:	2100      	movs	r1, #0
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 ffe3 	bl	800a0ee <USBH_ClrFeature>
 8009128:	4603      	mov	r3, r0
 800912a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800912c:	7bbb      	ldrb	r3, [r7, #14]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10a      	bne.n	8009148 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800913a:	e005      	b.n	8009148 <USBH_CDC_Process+0x120>

    default:
      break;
 800913c:	bf00      	nop
 800913e:	e004      	b.n	800914a <USBH_CDC_Process+0x122>
      break;
 8009140:	bf00      	nop
 8009142:	e002      	b.n	800914a <USBH_CDC_Process+0x122>
      break;
 8009144:	bf00      	nop
 8009146:	e000      	b.n	800914a <USBH_CDC_Process+0x122>
      break;
 8009148:	bf00      	nop

  }

  return status;
 800914a:	7bfb      	ldrb	r3, [r7, #15]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b082      	sub	sp, #8
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	22a1      	movs	r2, #161	; 0xa1
 8009178:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2221      	movs	r2, #33	; 0x21
 800917e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2207      	movs	r2, #7
 8009190:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2207      	movs	r2, #7
 8009196:	4619      	mov	r1, r3
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f001 f988 	bl	800a4ae <USBH_CtlReq>
 800919e:	4603      	mov	r3, r0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2221      	movs	r2, #33	; 0x21
 80091b6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2220      	movs	r2, #32
 80091bc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2207      	movs	r2, #7
 80091ce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	2207      	movs	r2, #7
 80091d4:	4619      	mov	r1, r3
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f001 f969 	bl	800a4ae <USBH_CtlReq>
 80091dc:	4603      	mov	r3, r0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b086      	sub	sp, #24
 80091ea:	af02      	add	r7, sp, #8
 80091ec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091f4:	69db      	ldr	r3, [r3, #28]
 80091f6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80091f8:	2300      	movs	r3, #0
 80091fa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009202:	2b01      	cmp	r3, #1
 8009204:	d002      	beq.n	800920c <CDC_ProcessTransmission+0x26>
 8009206:	2b02      	cmp	r3, #2
 8009208:	d023      	beq.n	8009252 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800920a:	e05e      	b.n	80092ca <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	8b12      	ldrh	r2, [r2, #24]
 8009214:	4293      	cmp	r3, r2
 8009216:	d90b      	bls.n	8009230 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	69d9      	ldr	r1, [r3, #28]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	8b1a      	ldrh	r2, [r3, #24]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	7b5b      	ldrb	r3, [r3, #13]
 8009224:	2001      	movs	r0, #1
 8009226:	9000      	str	r0, [sp, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f001 fb4e 	bl	800a8ca <USBH_BulkSendData>
 800922e:	e00b      	b.n	8009248 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009238:	b29a      	uxth	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	7b5b      	ldrb	r3, [r3, #13]
 800923e:	2001      	movs	r0, #1
 8009240:	9000      	str	r0, [sp, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f001 fb41 	bl	800a8ca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2202      	movs	r2, #2
 800924c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009250:	e03b      	b.n	80092ca <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	7b5b      	ldrb	r3, [r3, #13]
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f001 fe65 	bl	800af28 <USBH_LL_GetURBState>
 800925e:	4603      	mov	r3, r0
 8009260:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009262:	7afb      	ldrb	r3, [r7, #11]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d128      	bne.n	80092ba <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	8b12      	ldrh	r2, [r2, #24]
 8009270:	4293      	cmp	r3, r2
 8009272:	d90e      	bls.n	8009292 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	8b12      	ldrh	r2, [r2, #24]
 800927c:	1a9a      	subs	r2, r3, r2
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	8b12      	ldrh	r2, [r2, #24]
 800928a:	441a      	add	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	61da      	str	r2, [r3, #28]
 8009290:	e002      	b.n	8009298 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929c:	2b00      	cmp	r3, #0
 800929e:	d004      	beq.n	80092aa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80092a8:	e00e      	b.n	80092c8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f868 	bl	8009388 <USBH_CDC_TransmitCallback>
      break;
 80092b8:	e006      	b.n	80092c8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80092ba:	7afb      	ldrb	r3, [r7, #11]
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d103      	bne.n	80092c8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80092c8:	bf00      	nop
  }
}
 80092ca:	bf00      	nop
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b086      	sub	sp, #24
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092e0:	69db      	ldr	r3, [r3, #28]
 80092e2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80092e4:	2300      	movs	r3, #0
 80092e6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d002      	beq.n	80092f8 <CDC_ProcessReception+0x26>
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	d00e      	beq.n	8009314 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80092f6:	e043      	b.n	8009380 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	6a19      	ldr	r1, [r3, #32]
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	8b5a      	ldrh	r2, [r3, #26]
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	7b1b      	ldrb	r3, [r3, #12]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f001 fb05 	bl	800a914 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	2204      	movs	r2, #4
 800930e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009312:	e035      	b.n	8009380 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	7b1b      	ldrb	r3, [r3, #12]
 8009318:	4619      	mov	r1, r3
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f001 fe04 	bl	800af28 <USBH_LL_GetURBState>
 8009320:	4603      	mov	r3, r0
 8009322:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009324:	7cfb      	ldrb	r3, [r7, #19]
 8009326:	2b01      	cmp	r3, #1
 8009328:	d129      	bne.n	800937e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	7b1b      	ldrb	r3, [r3, #12]
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f001 fd67 	bl	800ae04 <USBH_LL_GetLastXferSize>
 8009336:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	429a      	cmp	r2, r3
 8009340:	d016      	beq.n	8009370 <CDC_ProcessReception+0x9e>
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	8b5b      	ldrh	r3, [r3, #26]
 8009346:	461a      	mov	r2, r3
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	4293      	cmp	r3, r2
 800934c:	d910      	bls.n	8009370 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	1ad2      	subs	r2, r2, r3
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	6a1a      	ldr	r2, [r3, #32]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	441a      	add	r2, r3
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2203      	movs	r2, #3
 800936a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800936e:	e006      	b.n	800937e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f80f 	bl	800939c <USBH_CDC_ReceiveCallback>
      break;
 800937e:	bf00      	nop
  }
}
 8009380:	bf00      	nop
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	4613      	mov	r3, r2
 80093d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d101      	bne.n	80093dc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80093d8:	2302      	movs	r3, #2
 80093da:	e029      	b.n	8009430 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	79fa      	ldrb	r2, [r7, #7]
 80093e0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 f81f 	bl	8009438 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d003      	beq.n	8009428 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f001 fc37 	bl	800ac9c <USBH_LL_Init>

  return USBH_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009444:	2300      	movs	r3, #0
 8009446:	60fb      	str	r3, [r7, #12]
 8009448:	e009      	b.n	800945e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	33e0      	adds	r3, #224	; 0xe0
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4413      	add	r3, r2
 8009454:	2200      	movs	r2, #0
 8009456:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	3301      	adds	r3, #1
 800945c:	60fb      	str	r3, [r7, #12]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2b0e      	cmp	r3, #14
 8009462:	d9f2      	bls.n	800944a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009464:	2300      	movs	r3, #0
 8009466:	60fb      	str	r3, [r7, #12]
 8009468:	e009      	b.n	800947e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4413      	add	r3, r2
 8009470:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009474:	2200      	movs	r2, #0
 8009476:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	3301      	adds	r3, #1
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009484:	d3f1      	bcc.n	800946a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2240      	movs	r2, #64	; 0x40
 80094aa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d016      	beq.n	8009522 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10e      	bne.n	800951c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009504:	1c59      	adds	r1, r3, #1
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	33de      	adds	r3, #222	; 0xde
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]
 800951a:	e004      	b.n	8009526 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800951c:	2302      	movs	r3, #2
 800951e:	73fb      	strb	r3, [r7, #15]
 8009520:	e001      	b.n	8009526 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009522:	2302      	movs	r3, #2
 8009524:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009526:	7bfb      	ldrb	r3, [r7, #15]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800954a:	78fa      	ldrb	r2, [r7, #3]
 800954c:	429a      	cmp	r2, r3
 800954e:	d204      	bcs.n	800955a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	78fa      	ldrb	r2, [r7, #3]
 8009554:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009558:	e001      	b.n	800955e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800955a:	2302      	movs	r3, #2
 800955c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800955e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800956c:	b480      	push	{r7}
 800956e:	b087      	sub	sp, #28
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	4608      	mov	r0, r1
 8009576:	4611      	mov	r1, r2
 8009578:	461a      	mov	r2, r3
 800957a:	4603      	mov	r3, r0
 800957c:	70fb      	strb	r3, [r7, #3]
 800957e:	460b      	mov	r3, r1
 8009580:	70bb      	strb	r3, [r7, #2]
 8009582:	4613      	mov	r3, r2
 8009584:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009586:	2300      	movs	r3, #0
 8009588:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800958a:	2300      	movs	r3, #0
 800958c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009594:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009596:	e025      	b.n	80095e4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009598:	7dfb      	ldrb	r3, [r7, #23]
 800959a:	221a      	movs	r2, #26
 800959c:	fb02 f303 	mul.w	r3, r2, r3
 80095a0:	3308      	adds	r3, #8
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	4413      	add	r3, r2
 80095a6:	3302      	adds	r3, #2
 80095a8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	795b      	ldrb	r3, [r3, #5]
 80095ae:	78fa      	ldrb	r2, [r7, #3]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d002      	beq.n	80095ba <USBH_FindInterface+0x4e>
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	2bff      	cmp	r3, #255	; 0xff
 80095b8:	d111      	bne.n	80095de <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80095be:	78ba      	ldrb	r2, [r7, #2]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d002      	beq.n	80095ca <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80095c4:	78bb      	ldrb	r3, [r7, #2]
 80095c6:	2bff      	cmp	r3, #255	; 0xff
 80095c8:	d109      	bne.n	80095de <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80095ce:	787a      	ldrb	r2, [r7, #1]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d002      	beq.n	80095da <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80095d4:	787b      	ldrb	r3, [r7, #1]
 80095d6:	2bff      	cmp	r3, #255	; 0xff
 80095d8:	d101      	bne.n	80095de <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80095da:	7dfb      	ldrb	r3, [r7, #23]
 80095dc:	e006      	b.n	80095ec <USBH_FindInterface+0x80>
    }
    if_ix++;
 80095de:	7dfb      	ldrb	r3, [r7, #23]
 80095e0:	3301      	adds	r3, #1
 80095e2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d9d6      	bls.n	8009598 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80095ea:	23ff      	movs	r3, #255	; 0xff
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	371c      	adds	r7, #28
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f001 fb87 	bl	800ad14 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009606:	2101      	movs	r1, #1
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f001 fca0 	bl	800af4e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af04      	add	r7, sp, #16
 800961e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009620:	2302      	movs	r3, #2
 8009622:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b01      	cmp	r3, #1
 8009632:	d102      	bne.n	800963a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2203      	movs	r2, #3
 8009638:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b0b      	cmp	r3, #11
 8009642:	f200 81b3 	bhi.w	80099ac <USBH_Process+0x394>
 8009646:	a201      	add	r2, pc, #4	; (adr r2, 800964c <USBH_Process+0x34>)
 8009648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964c:	0800967d 	.word	0x0800967d
 8009650:	080096af 	.word	0x080096af
 8009654:	08009717 	.word	0x08009717
 8009658:	08009947 	.word	0x08009947
 800965c:	080099ad 	.word	0x080099ad
 8009660:	080097bb 	.word	0x080097bb
 8009664:	080098ed 	.word	0x080098ed
 8009668:	080097f1 	.word	0x080097f1
 800966c:	08009811 	.word	0x08009811
 8009670:	08009831 	.word	0x08009831
 8009674:	0800985f 	.word	0x0800985f
 8009678:	0800992f 	.word	0x0800992f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b00      	cmp	r3, #0
 8009686:	f000 8193 	beq.w	80099b0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009690:	20c8      	movs	r0, #200	; 0xc8
 8009692:	f001 fca3 	bl	800afdc <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f001 fb99 	bl	800adce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80096ac:	e180      	b.n	80099b0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d107      	bne.n	80096c8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2202      	movs	r2, #2
 80096c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80096c6:	e182      	b.n	80099ce <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80096ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096d2:	d914      	bls.n	80096fe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80096da:	3301      	adds	r3, #1
 80096dc:	b2da      	uxtb	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80096ea:	2b03      	cmp	r3, #3
 80096ec:	d903      	bls.n	80096f6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	220d      	movs	r2, #13
 80096f2:	701a      	strb	r2, [r3, #0]
      break;
 80096f4:	e16b      	b.n	80099ce <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	701a      	strb	r2, [r3, #0]
      break;
 80096fc:	e167      	b.n	80099ce <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009704:	f103 020a 	add.w	r2, r3, #10
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800970e:	200a      	movs	r0, #10
 8009710:	f001 fc64 	bl	800afdc <USBH_Delay>
      break;
 8009714:	e15b      	b.n	80099ce <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800971c:	2b00      	cmp	r3, #0
 800971e:	d005      	beq.n	800972c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009726:	2104      	movs	r1, #4
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800972c:	2064      	movs	r0, #100	; 0x64
 800972e:	f001 fc55 	bl	800afdc <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f001 fb24 	bl	800ad80 <USBH_LL_GetSpeed>
 8009738:	4603      	mov	r3, r0
 800973a:	461a      	mov	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2205      	movs	r2, #5
 8009746:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009748:	2100      	movs	r1, #0
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f001 f92f 	bl	800a9ae <USBH_AllocPipe>
 8009750:	4603      	mov	r3, r0
 8009752:	461a      	mov	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009758:	2180      	movs	r1, #128	; 0x80
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f001 f927 	bl	800a9ae <USBH_AllocPipe>
 8009760:	4603      	mov	r3, r0
 8009762:	461a      	mov	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	7919      	ldrb	r1, [r3, #4]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800977c:	b292      	uxth	r2, r2
 800977e:	9202      	str	r2, [sp, #8]
 8009780:	2200      	movs	r2, #0
 8009782:	9201      	str	r2, [sp, #4]
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	4603      	mov	r3, r0
 8009788:	2280      	movs	r2, #128	; 0x80
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f001 f8e0 	bl	800a950 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	7959      	ldrb	r1, [r3, #5]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80097a4:	b292      	uxth	r2, r2
 80097a6:	9202      	str	r2, [sp, #8]
 80097a8:	2200      	movs	r2, #0
 80097aa:	9201      	str	r2, [sp, #4]
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	4603      	mov	r3, r0
 80097b0:	2200      	movs	r2, #0
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f001 f8cc 	bl	800a950 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80097b8:	e109      	b.n	80099ce <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f90c 	bl	80099d8 <USBH_HandleEnum>
 80097c0:	4603      	mov	r3, r0
 80097c2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80097c4:	7bbb      	ldrb	r3, [r7, #14]
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f040 80f3 	bne.w	80099b4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d103      	bne.n	80097e8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2208      	movs	r2, #8
 80097e4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80097e6:	e0e5      	b.n	80099b4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2207      	movs	r2, #7
 80097ec:	701a      	strb	r2, [r3, #0]
      break;
 80097ee:	e0e1      	b.n	80099b4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f000 80de 	beq.w	80099b8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009802:	2101      	movs	r1, #1
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2208      	movs	r2, #8
 800980c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800980e:	e0d3      	b.n	80099b8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009816:	b29b      	uxth	r3, r3
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fc20 	bl	800a060 <USBH_SetCfg>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	f040 80ca 	bne.w	80099bc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2209      	movs	r2, #9
 800982c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800982e:	e0c5      	b.n	80099bc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009836:	f003 0320 	and.w	r3, r3, #32
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00b      	beq.n	8009856 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800983e:	2101      	movs	r1, #1
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fc30 	bl	800a0a6 <USBH_SetFeature>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	f040 80b9 	bne.w	80099c0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	220a      	movs	r2, #10
 8009852:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009854:	e0b4      	b.n	80099c0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	220a      	movs	r2, #10
 800985a:	701a      	strb	r2, [r3, #0]
      break;
 800985c:	e0b0      	b.n	80099c0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 80ad 	beq.w	80099c4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009872:	2300      	movs	r3, #0
 8009874:	73fb      	strb	r3, [r7, #15]
 8009876:	e016      	b.n	80098a6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009878:	7bfa      	ldrb	r2, [r7, #15]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	32de      	adds	r2, #222	; 0xde
 800987e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009882:	791a      	ldrb	r2, [r3, #4]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800988a:	429a      	cmp	r2, r3
 800988c:	d108      	bne.n	80098a0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800988e:	7bfa      	ldrb	r2, [r7, #15]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	32de      	adds	r2, #222	; 0xde
 8009894:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800989e:	e005      	b.n	80098ac <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80098a0:	7bfb      	ldrb	r3, [r7, #15]
 80098a2:	3301      	adds	r3, #1
 80098a4:	73fb      	strb	r3, [r7, #15]
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d0e5      	beq.n	8009878 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d016      	beq.n	80098e4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	4798      	blx	r3
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d109      	bne.n	80098dc <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2206      	movs	r2, #6
 80098cc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80098d4:	2103      	movs	r1, #3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80098da:	e073      	b.n	80099c4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	220d      	movs	r2, #13
 80098e0:	701a      	strb	r2, [r3, #0]
      break;
 80098e2:	e06f      	b.n	80099c4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	220d      	movs	r2, #13
 80098e8:	701a      	strb	r2, [r3, #0]
      break;
 80098ea:	e06b      	b.n	80099c4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d017      	beq.n	8009926 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	4798      	blx	r3
 8009902:	4603      	mov	r3, r0
 8009904:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009906:	7bbb      	ldrb	r3, [r7, #14]
 8009908:	b2db      	uxtb	r3, r3
 800990a:	2b00      	cmp	r3, #0
 800990c:	d103      	bne.n	8009916 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	220b      	movs	r2, #11
 8009912:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009914:	e058      	b.n	80099c8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8009916:	7bbb      	ldrb	r3, [r7, #14]
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b02      	cmp	r3, #2
 800991c:	d154      	bne.n	80099c8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	220d      	movs	r2, #13
 8009922:	701a      	strb	r2, [r3, #0]
      break;
 8009924:	e050      	b.n	80099c8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	220d      	movs	r2, #13
 800992a:	701a      	strb	r2, [r3, #0]
      break;
 800992c:	e04c      	b.n	80099c8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009934:	2b00      	cmp	r3, #0
 8009936:	d049      	beq.n	80099cc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	4798      	blx	r3
      }
      break;
 8009944:	e042      	b.n	80099cc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7ff fd72 	bl	8009438 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800995a:	2b00      	cmp	r3, #0
 800995c:	d009      	beq.n	8009972 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009978:	2b00      	cmp	r3, #0
 800997a:	d005      	beq.n	8009988 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009982:	2105      	movs	r1, #5
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800998e:	b2db      	uxtb	r3, r3
 8009990:	2b01      	cmp	r3, #1
 8009992:	d107      	bne.n	80099a4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7ff fe2b 	bl	80095f8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80099a2:	e014      	b.n	80099ce <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f001 f9b5 	bl	800ad14 <USBH_LL_Start>
      break;
 80099aa:	e010      	b.n	80099ce <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80099ac:	bf00      	nop
 80099ae:	e00e      	b.n	80099ce <USBH_Process+0x3b6>
      break;
 80099b0:	bf00      	nop
 80099b2:	e00c      	b.n	80099ce <USBH_Process+0x3b6>
      break;
 80099b4:	bf00      	nop
 80099b6:	e00a      	b.n	80099ce <USBH_Process+0x3b6>
    break;
 80099b8:	bf00      	nop
 80099ba:	e008      	b.n	80099ce <USBH_Process+0x3b6>
      break;
 80099bc:	bf00      	nop
 80099be:	e006      	b.n	80099ce <USBH_Process+0x3b6>
      break;
 80099c0:	bf00      	nop
 80099c2:	e004      	b.n	80099ce <USBH_Process+0x3b6>
      break;
 80099c4:	bf00      	nop
 80099c6:	e002      	b.n	80099ce <USBH_Process+0x3b6>
      break;
 80099c8:	bf00      	nop
 80099ca:	e000      	b.n	80099ce <USBH_Process+0x3b6>
      break;
 80099cc:	bf00      	nop
  }
  return USBH_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b088      	sub	sp, #32
 80099dc:	af04      	add	r7, sp, #16
 80099de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80099e0:	2301      	movs	r3, #1
 80099e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80099e4:	2301      	movs	r3, #1
 80099e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	785b      	ldrb	r3, [r3, #1]
 80099ec:	2b07      	cmp	r3, #7
 80099ee:	f200 81c1 	bhi.w	8009d74 <USBH_HandleEnum+0x39c>
 80099f2:	a201      	add	r2, pc, #4	; (adr r2, 80099f8 <USBH_HandleEnum+0x20>)
 80099f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f8:	08009a19 	.word	0x08009a19
 80099fc:	08009ad7 	.word	0x08009ad7
 8009a00:	08009b41 	.word	0x08009b41
 8009a04:	08009bcf 	.word	0x08009bcf
 8009a08:	08009c39 	.word	0x08009c39
 8009a0c:	08009ca9 	.word	0x08009ca9
 8009a10:	08009cef 	.word	0x08009cef
 8009a14:	08009d35 	.word	0x08009d35
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009a18:	2108      	movs	r1, #8
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fa50 	bl	8009ec0 <USBH_Get_DevDesc>
 8009a20:	4603      	mov	r3, r0
 8009a22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a24:	7bbb      	ldrb	r3, [r7, #14]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d130      	bne.n	8009a8c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	7919      	ldrb	r1, [r3, #4]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009a4e:	b292      	uxth	r2, r2
 8009a50:	9202      	str	r2, [sp, #8]
 8009a52:	2200      	movs	r2, #0
 8009a54:	9201      	str	r2, [sp, #4]
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2280      	movs	r2, #128	; 0x80
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 ff77 	bl	800a950 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	7959      	ldrb	r1, [r3, #5]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a76:	b292      	uxth	r2, r2
 8009a78:	9202      	str	r2, [sp, #8]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	9201      	str	r2, [sp, #4]
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	4603      	mov	r3, r0
 8009a82:	2200      	movs	r2, #0
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 ff63 	bl	800a950 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009a8a:	e175      	b.n	8009d78 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a8c:	7bbb      	ldrb	r3, [r7, #14]
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	f040 8172 	bne.w	8009d78 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	b2da      	uxtb	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	d903      	bls.n	8009ab6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	220d      	movs	r2, #13
 8009ab2:	701a      	strb	r2, [r3, #0]
      break;
 8009ab4:	e160      	b.n	8009d78 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	795b      	ldrb	r3, [r3, #5]
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 ff97 	bl	800a9f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	791b      	ldrb	r3, [r3, #4]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 ff91 	bl	800a9f0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	701a      	strb	r2, [r3, #0]
      break;
 8009ad4:	e150      	b.n	8009d78 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009ad6:	2112      	movs	r1, #18
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f9f1 	bl	8009ec0 <USBH_Get_DevDesc>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ae2:	7bbb      	ldrb	r3, [r7, #14]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d103      	bne.n	8009af0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2202      	movs	r2, #2
 8009aec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009aee:	e145      	b.n	8009d7c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009af0:	7bbb      	ldrb	r3, [r7, #14]
 8009af2:	2b03      	cmp	r3, #3
 8009af4:	f040 8142 	bne.w	8009d7c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009afe:	3301      	adds	r3, #1
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d903      	bls.n	8009b1a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	220d      	movs	r2, #13
 8009b16:	701a      	strb	r2, [r3, #0]
      break;
 8009b18:	e130      	b.n	8009d7c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	795b      	ldrb	r3, [r3, #5]
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 ff65 	bl	800a9f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	791b      	ldrb	r3, [r3, #4]
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 ff5f 	bl	800a9f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	701a      	strb	r2, [r3, #0]
      break;
 8009b3e:	e11d      	b.n	8009d7c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009b40:	2101      	movs	r1, #1
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fa68 	bl	800a018 <USBH_SetAddress>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b4c:	7bbb      	ldrb	r3, [r7, #14]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d132      	bne.n	8009bb8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009b52:	2002      	movs	r0, #2
 8009b54:	f001 fa42 	bl	800afdc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2203      	movs	r2, #3
 8009b64:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	7919      	ldrb	r1, [r3, #4]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009b7a:	b292      	uxth	r2, r2
 8009b7c:	9202      	str	r2, [sp, #8]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	9201      	str	r2, [sp, #4]
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	4603      	mov	r3, r0
 8009b86:	2280      	movs	r2, #128	; 0x80
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fee1 	bl	800a950 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	7959      	ldrb	r1, [r3, #5]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009ba2:	b292      	uxth	r2, r2
 8009ba4:	9202      	str	r2, [sp, #8]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	9201      	str	r2, [sp, #4]
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	4603      	mov	r3, r0
 8009bae:	2200      	movs	r2, #0
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fecd 	bl	800a950 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009bb6:	e0e3      	b.n	8009d80 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bb8:	7bbb      	ldrb	r3, [r7, #14]
 8009bba:	2b03      	cmp	r3, #3
 8009bbc:	f040 80e0 	bne.w	8009d80 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	220d      	movs	r2, #13
 8009bc4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	705a      	strb	r2, [r3, #1]
      break;
 8009bcc:	e0d8      	b.n	8009d80 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009bce:	2109      	movs	r1, #9
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f99d 	bl	8009f10 <USBH_Get_CfgDesc>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d103      	bne.n	8009be8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2204      	movs	r2, #4
 8009be4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009be6:	e0cd      	b.n	8009d84 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	2b03      	cmp	r3, #3
 8009bec:	f040 80ca 	bne.w	8009d84 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	d903      	bls.n	8009c12 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	220d      	movs	r2, #13
 8009c0e:	701a      	strb	r2, [r3, #0]
      break;
 8009c10:	e0b8      	b.n	8009d84 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	795b      	ldrb	r3, [r3, #5]
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 fee9 	bl	800a9f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	791b      	ldrb	r3, [r3, #4]
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fee3 	bl	800a9f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	701a      	strb	r2, [r3, #0]
      break;
 8009c36:	e0a5      	b.n	8009d84 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f965 	bl	8009f10 <USBH_Get_CfgDesc>
 8009c46:	4603      	mov	r3, r0
 8009c48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c4a:	7bbb      	ldrb	r3, [r7, #14]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d103      	bne.n	8009c58 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2205      	movs	r2, #5
 8009c54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009c56:	e097      	b.n	8009d88 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	f040 8094 	bne.w	8009d88 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c66:	3301      	adds	r3, #1
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	d903      	bls.n	8009c82 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	220d      	movs	r2, #13
 8009c7e:	701a      	strb	r2, [r3, #0]
      break;
 8009c80:	e082      	b.n	8009d88 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	795b      	ldrb	r3, [r3, #5]
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 feb1 	bl	800a9f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	791b      	ldrb	r3, [r3, #4]
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 feab 	bl	800a9f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	701a      	strb	r2, [r3, #0]
      break;
 8009ca6:	e06f      	b.n	8009d88 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d019      	beq.n	8009ce6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009cbe:	23ff      	movs	r3, #255	; 0xff
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f949 	bl	8009f58 <USBH_Get_StringDesc>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d103      	bne.n	8009cd8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2206      	movs	r2, #6
 8009cd4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009cd6:	e059      	b.n	8009d8c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d156      	bne.n	8009d8c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2206      	movs	r2, #6
 8009ce2:	705a      	strb	r2, [r3, #1]
      break;
 8009ce4:	e052      	b.n	8009d8c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2206      	movs	r2, #6
 8009cea:	705a      	strb	r2, [r3, #1]
      break;
 8009cec:	e04e      	b.n	8009d8c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d019      	beq.n	8009d2c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009d04:	23ff      	movs	r3, #255	; 0xff
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f926 	bl	8009f58 <USBH_Get_StringDesc>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d103      	bne.n	8009d1e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2207      	movs	r2, #7
 8009d1a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009d1c:	e038      	b.n	8009d90 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d1e:	7bbb      	ldrb	r3, [r7, #14]
 8009d20:	2b03      	cmp	r3, #3
 8009d22:	d135      	bne.n	8009d90 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2207      	movs	r2, #7
 8009d28:	705a      	strb	r2, [r3, #1]
      break;
 8009d2a:	e031      	b.n	8009d90 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2207      	movs	r2, #7
 8009d30:	705a      	strb	r2, [r3, #1]
      break;
 8009d32:	e02d      	b.n	8009d90 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d017      	beq.n	8009d6e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009d4a:	23ff      	movs	r3, #255	; 0xff
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f903 	bl	8009f58 <USBH_Get_StringDesc>
 8009d52:	4603      	mov	r3, r0
 8009d54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009d56:	7bbb      	ldrb	r3, [r7, #14]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d102      	bne.n	8009d62 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009d60:	e018      	b.n	8009d94 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d62:	7bbb      	ldrb	r3, [r7, #14]
 8009d64:	2b03      	cmp	r3, #3
 8009d66:	d115      	bne.n	8009d94 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d6c:	e012      	b.n	8009d94 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	73fb      	strb	r3, [r7, #15]
      break;
 8009d72:	e00f      	b.n	8009d94 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009d74:	bf00      	nop
 8009d76:	e00e      	b.n	8009d96 <USBH_HandleEnum+0x3be>
      break;
 8009d78:	bf00      	nop
 8009d7a:	e00c      	b.n	8009d96 <USBH_HandleEnum+0x3be>
      break;
 8009d7c:	bf00      	nop
 8009d7e:	e00a      	b.n	8009d96 <USBH_HandleEnum+0x3be>
      break;
 8009d80:	bf00      	nop
 8009d82:	e008      	b.n	8009d96 <USBH_HandleEnum+0x3be>
      break;
 8009d84:	bf00      	nop
 8009d86:	e006      	b.n	8009d96 <USBH_HandleEnum+0x3be>
      break;
 8009d88:	bf00      	nop
 8009d8a:	e004      	b.n	8009d96 <USBH_HandleEnum+0x3be>
      break;
 8009d8c:	bf00      	nop
 8009d8e:	e002      	b.n	8009d96 <USBH_HandleEnum+0x3be>
      break;
 8009d90:	bf00      	nop
 8009d92:	e000      	b.n	8009d96 <USBH_HandleEnum+0x3be>
      break;
 8009d94:	bf00      	nop
  }
  return Status;
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009db2:	bf00      	nop
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b082      	sub	sp, #8
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009dcc:	1c5a      	adds	r2, r3, #1
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f804 	bl	8009de2 <USBH_HandleSof>
}
 8009dda:	bf00      	nop
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b082      	sub	sp, #8
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	2b0b      	cmp	r3, #11
 8009df2:	d10a      	bne.n	8009e0a <USBH_HandleSof+0x28>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d005      	beq.n	8009e0a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	4798      	blx	r3
  }
}
 8009e0a:	bf00      	nop
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009e22:	bf00      	nop
}
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009e2e:	b480      	push	{r7}
 8009e30:	b083      	sub	sp, #12
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009e3e:	bf00      	nop
}
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b083      	sub	sp, #12
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 ff56 	bl	800ad4a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	791b      	ldrb	r3, [r3, #4]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fda3 	bl	800a9f0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	795b      	ldrb	r3, [r3, #5]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 fd9d 	bl	800a9f0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af02      	add	r7, sp, #8
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009ed2:	78fb      	ldrb	r3, [r7, #3]
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ede:	2100      	movs	r1, #0
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 f864 	bl	8009fae <USBH_GetDescriptor>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	73fb      	strb	r3, [r7, #15]
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10a      	bne.n	8009f06 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009efc:	78fa      	ldrb	r2, [r7, #3]
 8009efe:	b292      	uxth	r2, r2
 8009f00:	4619      	mov	r1, r3
 8009f02:	f000 f918 	bl	800a136 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af02      	add	r7, sp, #8
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	331c      	adds	r3, #28
 8009f20:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009f22:	887b      	ldrh	r3, [r7, #2]
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f83d 	bl	8009fae <USBH_GetDescriptor>
 8009f34:	4603      	mov	r3, r0
 8009f36:	72fb      	strb	r3, [r7, #11]
 8009f38:	7afb      	ldrb	r3, [r7, #11]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d107      	bne.n	8009f4e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009f44:	887a      	ldrh	r2, [r7, #2]
 8009f46:	68f9      	ldr	r1, [r7, #12]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 f964 	bl	800a216 <USBH_ParseCfgDesc>
  }

  return status;
 8009f4e:	7afb      	ldrb	r3, [r7, #11]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b088      	sub	sp, #32
 8009f5c:	af02      	add	r7, sp, #8
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	607a      	str	r2, [r7, #4]
 8009f62:	461a      	mov	r2, r3
 8009f64:	460b      	mov	r3, r1
 8009f66:	72fb      	strb	r3, [r7, #11]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009f6c:	7afb      	ldrb	r3, [r7, #11]
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009f74:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009f7c:	893b      	ldrh	r3, [r7, #8]
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	460b      	mov	r3, r1
 8009f82:	2100      	movs	r1, #0
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f000 f812 	bl	8009fae <USBH_GetDescriptor>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	75fb      	strb	r3, [r7, #23]
 8009f8e:	7dfb      	ldrb	r3, [r7, #23]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d107      	bne.n	8009fa4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f9a:	893a      	ldrh	r2, [r7, #8]
 8009f9c:	6879      	ldr	r1, [r7, #4]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f000 fa37 	bl	800a412 <USBH_ParseStringDesc>
  }

  return status;
 8009fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3718      	adds	r7, #24
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b084      	sub	sp, #16
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	60f8      	str	r0, [r7, #12]
 8009fb6:	607b      	str	r3, [r7, #4]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	72fb      	strb	r3, [r7, #11]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	789b      	ldrb	r3, [r3, #2]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d11c      	bne.n	800a002 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009fc8:	7afb      	ldrb	r3, [r7, #11]
 8009fca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fce:	b2da      	uxtb	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2206      	movs	r2, #6
 8009fd8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	893a      	ldrh	r2, [r7, #8]
 8009fde:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009fe0:	893b      	ldrh	r3, [r7, #8]
 8009fe2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fea:	d104      	bne.n	8009ff6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f240 4209 	movw	r2, #1033	; 0x409
 8009ff2:	829a      	strh	r2, [r3, #20]
 8009ff4:	e002      	b.n	8009ffc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	8b3a      	ldrh	r2, [r7, #24]
 800a000:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a002:	8b3b      	ldrh	r3, [r7, #24]
 800a004:	461a      	mov	r2, r3
 800a006:	6879      	ldr	r1, [r7, #4]
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 fa50 	bl	800a4ae <USBH_CtlReq>
 800a00e:	4603      	mov	r3, r0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	789b      	ldrb	r3, [r3, #2]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d10f      	bne.n	800a04c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2205      	movs	r2, #5
 800a036:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a038:	78fb      	ldrb	r3, [r7, #3]
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a04c:	2200      	movs	r2, #0
 800a04e:	2100      	movs	r1, #0
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 fa2c 	bl	800a4ae <USBH_CtlReq>
 800a056:	4603      	mov	r3, r0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	460b      	mov	r3, r1
 800a06a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	789b      	ldrb	r3, [r3, #2]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d10e      	bne.n	800a092 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2209      	movs	r2, #9
 800a07e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	887a      	ldrh	r2, [r7, #2]
 800a084:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a092:	2200      	movs	r2, #0
 800a094:	2100      	movs	r1, #0
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fa09 	bl	800a4ae <USBH_CtlReq>
 800a09c:	4603      	mov	r3, r0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b082      	sub	sp, #8
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	789b      	ldrb	r3, [r3, #2]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d10f      	bne.n	800a0da <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2203      	movs	r2, #3
 800a0c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a0c6:	78fb      	ldrb	r3, [r7, #3]
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a0da:	2200      	movs	r2, #0
 800a0dc:	2100      	movs	r1, #0
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f9e5 	bl	800a4ae <USBH_CtlReq>
 800a0e4:	4603      	mov	r3, r0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b082      	sub	sp, #8
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	789b      	ldrb	r3, [r3, #2]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d10f      	bne.n	800a122 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2202      	movs	r2, #2
 800a106:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a114:	78fb      	ldrb	r3, [r7, #3]
 800a116:	b29a      	uxth	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a122:	2200      	movs	r2, #0
 800a124:	2100      	movs	r1, #0
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f9c1 	bl	800a4ae <USBH_CtlReq>
 800a12c:	4603      	mov	r3, r0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a136:	b480      	push	{r7}
 800a138:	b085      	sub	sp, #20
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	60f8      	str	r0, [r7, #12]
 800a13e:	60b9      	str	r1, [r7, #8]
 800a140:	4613      	mov	r3, r2
 800a142:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	781a      	ldrb	r2, [r3, #0]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	785a      	ldrb	r2, [r3, #1]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	3302      	adds	r3, #2
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	3303      	adds	r3, #3
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	b29b      	uxth	r3, r3
 800a164:	021b      	lsls	r3, r3, #8
 800a166:	b29b      	uxth	r3, r3
 800a168:	4313      	orrs	r3, r2
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	791a      	ldrb	r2, [r3, #4]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	795a      	ldrb	r2, [r3, #5]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	799a      	ldrb	r2, [r3, #6]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	79da      	ldrb	r2, [r3, #7]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a190:	88fb      	ldrh	r3, [r7, #6]
 800a192:	2b08      	cmp	r3, #8
 800a194:	d939      	bls.n	800a20a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	3308      	adds	r3, #8
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	3309      	adds	r3, #9
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	021b      	lsls	r3, r3, #8
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	330a      	adds	r3, #10
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	b29a      	uxth	r2, r3
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	330b      	adds	r3, #11
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	021b      	lsls	r3, r3, #8
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	330c      	adds	r3, #12
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	330d      	adds	r3, #13
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	021b      	lsls	r3, r3, #8
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	7b9a      	ldrb	r2, [r3, #14]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	7bda      	ldrb	r2, [r3, #15]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	7c1a      	ldrb	r2, [r3, #16]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	7c5a      	ldrb	r2, [r3, #17]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	745a      	strb	r2, [r3, #17]
  }
}
 800a20a:	bf00      	nop
 800a20c:	3714      	adds	r7, #20
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b08a      	sub	sp, #40	; 0x28
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	60f8      	str	r0, [r7, #12]
 800a21e:	60b9      	str	r1, [r7, #8]
 800a220:	4613      	mov	r3, r2
 800a222:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a228:	2300      	movs	r3, #0
 800a22a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a22e:	2300      	movs	r3, #0
 800a230:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	781a      	ldrb	r2, [r3, #0]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	785a      	ldrb	r2, [r3, #1]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	3302      	adds	r3, #2
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	b29a      	uxth	r2, r3
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	3303      	adds	r3, #3
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	b29b      	uxth	r3, r3
 800a258:	021b      	lsls	r3, r3, #8
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	4313      	orrs	r3, r2
 800a25e:	b29a      	uxth	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	791a      	ldrb	r2, [r3, #4]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	795a      	ldrb	r2, [r3, #5]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	799a      	ldrb	r2, [r3, #6]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	79da      	ldrb	r2, [r3, #7]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	7a1a      	ldrb	r2, [r3, #8]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a28c:	88fb      	ldrh	r3, [r7, #6]
 800a28e:	2b09      	cmp	r3, #9
 800a290:	d95f      	bls.n	800a352 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a292:	2309      	movs	r3, #9
 800a294:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a296:	2300      	movs	r3, #0
 800a298:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a29a:	e051      	b.n	800a340 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a29c:	f107 0316 	add.w	r3, r7, #22
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2a4:	f000 f8e8 	bl	800a478 <USBH_GetNextDesc>
 800a2a8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ac:	785b      	ldrb	r3, [r3, #1]
 800a2ae:	2b04      	cmp	r3, #4
 800a2b0:	d146      	bne.n	800a340 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a2b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2b6:	221a      	movs	r2, #26
 800a2b8:	fb02 f303 	mul.w	r3, r2, r3
 800a2bc:	3308      	adds	r3, #8
 800a2be:	68fa      	ldr	r2, [r7, #12]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	3302      	adds	r3, #2
 800a2c4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a2c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2c8:	69f8      	ldr	r0, [r7, #28]
 800a2ca:	f000 f846 	bl	800a35a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a2d8:	e022      	b.n	800a320 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a2da:	f107 0316 	add.w	r3, r7, #22
 800a2de:	4619      	mov	r1, r3
 800a2e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2e2:	f000 f8c9 	bl	800a478 <USBH_GetNextDesc>
 800a2e6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	785b      	ldrb	r3, [r3, #1]
 800a2ec:	2b05      	cmp	r3, #5
 800a2ee:	d117      	bne.n	800a320 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a2f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a2f8:	3201      	adds	r2, #1
 800a2fa:	00d2      	lsls	r2, r2, #3
 800a2fc:	211a      	movs	r1, #26
 800a2fe:	fb01 f303 	mul.w	r3, r1, r3
 800a302:	4413      	add	r3, r2
 800a304:	3308      	adds	r3, #8
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	4413      	add	r3, r2
 800a30a:	3304      	adds	r3, #4
 800a30c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a30e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a310:	69b8      	ldr	r0, [r7, #24]
 800a312:	f000 f851 	bl	800a3b8 <USBH_ParseEPDesc>
            ep_ix++;
 800a316:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a31a:	3301      	adds	r3, #1
 800a31c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	791b      	ldrb	r3, [r3, #4]
 800a324:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a328:	429a      	cmp	r2, r3
 800a32a:	d204      	bcs.n	800a336 <USBH_ParseCfgDesc+0x120>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	885a      	ldrh	r2, [r3, #2]
 800a330:	8afb      	ldrh	r3, [r7, #22]
 800a332:	429a      	cmp	r2, r3
 800a334:	d8d1      	bhi.n	800a2da <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a336:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a33a:	3301      	adds	r3, #1
 800a33c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a340:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a344:	2b01      	cmp	r3, #1
 800a346:	d804      	bhi.n	800a352 <USBH_ParseCfgDesc+0x13c>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	885a      	ldrh	r2, [r3, #2]
 800a34c:	8afb      	ldrh	r3, [r7, #22]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d8a4      	bhi.n	800a29c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a352:	bf00      	nop
 800a354:	3728      	adds	r7, #40	; 0x28
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a35a:	b480      	push	{r7}
 800a35c:	b083      	sub	sp, #12
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	781a      	ldrb	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	785a      	ldrb	r2, [r3, #1]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	789a      	ldrb	r2, [r3, #2]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	78da      	ldrb	r2, [r3, #3]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	791a      	ldrb	r2, [r3, #4]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	795a      	ldrb	r2, [r3, #5]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	799a      	ldrb	r2, [r3, #6]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	79da      	ldrb	r2, [r3, #7]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	7a1a      	ldrb	r2, [r3, #8]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	721a      	strb	r2, [r3, #8]
}
 800a3ac:	bf00      	nop
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	781a      	ldrb	r2, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	785a      	ldrb	r2, [r3, #1]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	789a      	ldrb	r2, [r3, #2]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	78da      	ldrb	r2, [r3, #3]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	3305      	adds	r3, #5
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	021b      	lsls	r3, r3, #8
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	799a      	ldrb	r2, [r3, #6]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	719a      	strb	r2, [r3, #6]
}
 800a406:	bf00      	nop
 800a408:	370c      	adds	r7, #12
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a412:	b480      	push	{r7}
 800a414:	b087      	sub	sp, #28
 800a416:	af00      	add	r7, sp, #0
 800a418:	60f8      	str	r0, [r7, #12]
 800a41a:	60b9      	str	r1, [r7, #8]
 800a41c:	4613      	mov	r3, r2
 800a41e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	3301      	adds	r3, #1
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	2b03      	cmp	r3, #3
 800a428:	d120      	bne.n	800a46c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	1e9a      	subs	r2, r3, #2
 800a430:	88fb      	ldrh	r3, [r7, #6]
 800a432:	4293      	cmp	r3, r2
 800a434:	bf28      	it	cs
 800a436:	4613      	movcs	r3, r2
 800a438:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	3302      	adds	r3, #2
 800a43e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a440:	2300      	movs	r3, #0
 800a442:	82fb      	strh	r3, [r7, #22]
 800a444:	e00b      	b.n	800a45e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a446:	8afb      	ldrh	r3, [r7, #22]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	4413      	add	r3, r2
 800a44c:	781a      	ldrb	r2, [r3, #0]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	3301      	adds	r3, #1
 800a456:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a458:	8afb      	ldrh	r3, [r7, #22]
 800a45a:	3302      	adds	r3, #2
 800a45c:	82fb      	strh	r3, [r7, #22]
 800a45e:	8afa      	ldrh	r2, [r7, #22]
 800a460:	8abb      	ldrh	r3, [r7, #20]
 800a462:	429a      	cmp	r2, r3
 800a464:	d3ef      	bcc.n	800a446 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	2200      	movs	r2, #0
 800a46a:	701a      	strb	r2, [r3, #0]
  }
}
 800a46c:	bf00      	nop
 800a46e:	371c      	adds	r7, #28
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	881a      	ldrh	r2, [r3, #0]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	4413      	add	r3, r2
 800a48e:	b29a      	uxth	r2, r3
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4413      	add	r3, r2
 800a49e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3714      	adds	r7, #20
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b086      	sub	sp, #24
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	60f8      	str	r0, [r7, #12]
 800a4b6:	60b9      	str	r1, [r7, #8]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	789b      	ldrb	r3, [r3, #2]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d002      	beq.n	800a4ce <USBH_CtlReq+0x20>
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d00f      	beq.n	800a4ec <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a4cc:	e027      	b.n	800a51e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	68ba      	ldr	r2, [r7, #8]
 800a4d2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	88fa      	ldrh	r2, [r7, #6]
 800a4d8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a4ea:	e018      	b.n	800a51e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f000 f81b 	bl	800a528 <USBH_HandleControl>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a4f6:	7dfb      	ldrb	r3, [r7, #23]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d002      	beq.n	800a502 <USBH_CtlReq+0x54>
 800a4fc:	7dfb      	ldrb	r3, [r7, #23]
 800a4fe:	2b03      	cmp	r3, #3
 800a500:	d106      	bne.n	800a510 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2201      	movs	r2, #1
 800a506:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	761a      	strb	r2, [r3, #24]
      break;
 800a50e:	e005      	b.n	800a51c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a510:	7dfb      	ldrb	r3, [r7, #23]
 800a512:	2b02      	cmp	r3, #2
 800a514:	d102      	bne.n	800a51c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2201      	movs	r2, #1
 800a51a:	709a      	strb	r2, [r3, #2]
      break;
 800a51c:	bf00      	nop
  }
  return status;
 800a51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3718      	adds	r7, #24
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b086      	sub	sp, #24
 800a52c:	af02      	add	r7, sp, #8
 800a52e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a530:	2301      	movs	r3, #1
 800a532:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a534:	2300      	movs	r3, #0
 800a536:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	7e1b      	ldrb	r3, [r3, #24]
 800a53c:	3b01      	subs	r3, #1
 800a53e:	2b0a      	cmp	r3, #10
 800a540:	f200 8156 	bhi.w	800a7f0 <USBH_HandleControl+0x2c8>
 800a544:	a201      	add	r2, pc, #4	; (adr r2, 800a54c <USBH_HandleControl+0x24>)
 800a546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a54a:	bf00      	nop
 800a54c:	0800a579 	.word	0x0800a579
 800a550:	0800a593 	.word	0x0800a593
 800a554:	0800a5fd 	.word	0x0800a5fd
 800a558:	0800a623 	.word	0x0800a623
 800a55c:	0800a65b 	.word	0x0800a65b
 800a560:	0800a685 	.word	0x0800a685
 800a564:	0800a6d7 	.word	0x0800a6d7
 800a568:	0800a6f9 	.word	0x0800a6f9
 800a56c:	0800a735 	.word	0x0800a735
 800a570:	0800a75b 	.word	0x0800a75b
 800a574:	0800a799 	.word	0x0800a799
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f103 0110 	add.w	r1, r3, #16
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	795b      	ldrb	r3, [r3, #5]
 800a582:	461a      	mov	r2, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f943 	bl	800a810 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2202      	movs	r2, #2
 800a58e:	761a      	strb	r2, [r3, #24]
      break;
 800a590:	e139      	b.n	800a806 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	795b      	ldrb	r3, [r3, #5]
 800a596:	4619      	mov	r1, r3
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 fcc5 	bl	800af28 <USBH_LL_GetURBState>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a5a2:	7bbb      	ldrb	r3, [r7, #14]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d11e      	bne.n	800a5e6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	7c1b      	ldrb	r3, [r3, #16]
 800a5ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a5b0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	8adb      	ldrh	r3, [r3, #22]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00a      	beq.n	800a5d0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a5ba:	7b7b      	ldrb	r3, [r7, #13]
 800a5bc:	2b80      	cmp	r3, #128	; 0x80
 800a5be:	d103      	bne.n	800a5c8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2203      	movs	r2, #3
 800a5c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a5c6:	e115      	b.n	800a7f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2205      	movs	r2, #5
 800a5cc:	761a      	strb	r2, [r3, #24]
      break;
 800a5ce:	e111      	b.n	800a7f4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a5d0:	7b7b      	ldrb	r3, [r7, #13]
 800a5d2:	2b80      	cmp	r3, #128	; 0x80
 800a5d4:	d103      	bne.n	800a5de <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2209      	movs	r2, #9
 800a5da:	761a      	strb	r2, [r3, #24]
      break;
 800a5dc:	e10a      	b.n	800a7f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2207      	movs	r2, #7
 800a5e2:	761a      	strb	r2, [r3, #24]
      break;
 800a5e4:	e106      	b.n	800a7f4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a5e6:	7bbb      	ldrb	r3, [r7, #14]
 800a5e8:	2b04      	cmp	r3, #4
 800a5ea:	d003      	beq.n	800a5f4 <USBH_HandleControl+0xcc>
 800a5ec:	7bbb      	ldrb	r3, [r7, #14]
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	f040 8100 	bne.w	800a7f4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	220b      	movs	r2, #11
 800a5f8:	761a      	strb	r2, [r3, #24]
      break;
 800a5fa:	e0fb      	b.n	800a7f4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a602:	b29a      	uxth	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6899      	ldr	r1, [r3, #8]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	899a      	ldrh	r2, [r3, #12]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	791b      	ldrb	r3, [r3, #4]
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 f93a 	bl	800a88e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2204      	movs	r2, #4
 800a61e:	761a      	strb	r2, [r3, #24]
      break;
 800a620:	e0f1      	b.n	800a806 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	791b      	ldrb	r3, [r3, #4]
 800a626:	4619      	mov	r1, r3
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fc7d 	bl	800af28 <USBH_LL_GetURBState>
 800a62e:	4603      	mov	r3, r0
 800a630:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a632:	7bbb      	ldrb	r3, [r7, #14]
 800a634:	2b01      	cmp	r3, #1
 800a636:	d102      	bne.n	800a63e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2209      	movs	r2, #9
 800a63c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a63e:	7bbb      	ldrb	r3, [r7, #14]
 800a640:	2b05      	cmp	r3, #5
 800a642:	d102      	bne.n	800a64a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a644:	2303      	movs	r3, #3
 800a646:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a648:	e0d6      	b.n	800a7f8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a64a:	7bbb      	ldrb	r3, [r7, #14]
 800a64c:	2b04      	cmp	r3, #4
 800a64e:	f040 80d3 	bne.w	800a7f8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	220b      	movs	r2, #11
 800a656:	761a      	strb	r2, [r3, #24]
      break;
 800a658:	e0ce      	b.n	800a7f8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6899      	ldr	r1, [r3, #8]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	899a      	ldrh	r2, [r3, #12]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	795b      	ldrb	r3, [r3, #5]
 800a666:	2001      	movs	r0, #1
 800a668:	9000      	str	r0, [sp, #0]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f8ea 	bl	800a844 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a676:	b29a      	uxth	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2206      	movs	r2, #6
 800a680:	761a      	strb	r2, [r3, #24]
      break;
 800a682:	e0c0      	b.n	800a806 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	795b      	ldrb	r3, [r3, #5]
 800a688:	4619      	mov	r1, r3
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fc4c 	bl	800af28 <USBH_LL_GetURBState>
 800a690:	4603      	mov	r3, r0
 800a692:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a694:	7bbb      	ldrb	r3, [r7, #14]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d103      	bne.n	800a6a2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2207      	movs	r2, #7
 800a69e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a6a0:	e0ac      	b.n	800a7fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a6a2:	7bbb      	ldrb	r3, [r7, #14]
 800a6a4:	2b05      	cmp	r3, #5
 800a6a6:	d105      	bne.n	800a6b4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	220c      	movs	r2, #12
 800a6ac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a6ae:	2303      	movs	r3, #3
 800a6b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a6b2:	e0a3      	b.n	800a7fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a6b4:	7bbb      	ldrb	r3, [r7, #14]
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d103      	bne.n	800a6c2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2205      	movs	r2, #5
 800a6be:	761a      	strb	r2, [r3, #24]
      break;
 800a6c0:	e09c      	b.n	800a7fc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a6c2:	7bbb      	ldrb	r3, [r7, #14]
 800a6c4:	2b04      	cmp	r3, #4
 800a6c6:	f040 8099 	bne.w	800a7fc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	220b      	movs	r2, #11
 800a6ce:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a6d4:	e092      	b.n	800a7fc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	791b      	ldrb	r3, [r3, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	2100      	movs	r1, #0
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f8d5 	bl	800a88e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2208      	movs	r2, #8
 800a6f4:	761a      	strb	r2, [r3, #24]

      break;
 800a6f6:	e086      	b.n	800a806 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	791b      	ldrb	r3, [r3, #4]
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 fc12 	bl	800af28 <USBH_LL_GetURBState>
 800a704:	4603      	mov	r3, r0
 800a706:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a708:	7bbb      	ldrb	r3, [r7, #14]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d105      	bne.n	800a71a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	220d      	movs	r2, #13
 800a712:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a714:	2300      	movs	r3, #0
 800a716:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a718:	e072      	b.n	800a800 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a71a:	7bbb      	ldrb	r3, [r7, #14]
 800a71c:	2b04      	cmp	r3, #4
 800a71e:	d103      	bne.n	800a728 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	220b      	movs	r2, #11
 800a724:	761a      	strb	r2, [r3, #24]
      break;
 800a726:	e06b      	b.n	800a800 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a728:	7bbb      	ldrb	r3, [r7, #14]
 800a72a:	2b05      	cmp	r3, #5
 800a72c:	d168      	bne.n	800a800 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a72e:	2303      	movs	r3, #3
 800a730:	73fb      	strb	r3, [r7, #15]
      break;
 800a732:	e065      	b.n	800a800 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	795b      	ldrb	r3, [r3, #5]
 800a738:	2201      	movs	r2, #1
 800a73a:	9200      	str	r2, [sp, #0]
 800a73c:	2200      	movs	r2, #0
 800a73e:	2100      	movs	r1, #0
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f87f 	bl	800a844 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	220a      	movs	r2, #10
 800a756:	761a      	strb	r2, [r3, #24]
      break;
 800a758:	e055      	b.n	800a806 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	795b      	ldrb	r3, [r3, #5]
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 fbe1 	bl	800af28 <USBH_LL_GetURBState>
 800a766:	4603      	mov	r3, r0
 800a768:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a76a:	7bbb      	ldrb	r3, [r7, #14]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d105      	bne.n	800a77c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	220d      	movs	r2, #13
 800a778:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a77a:	e043      	b.n	800a804 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d103      	bne.n	800a78a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2209      	movs	r2, #9
 800a786:	761a      	strb	r2, [r3, #24]
      break;
 800a788:	e03c      	b.n	800a804 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a78a:	7bbb      	ldrb	r3, [r7, #14]
 800a78c:	2b04      	cmp	r3, #4
 800a78e:	d139      	bne.n	800a804 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	220b      	movs	r2, #11
 800a794:	761a      	strb	r2, [r3, #24]
      break;
 800a796:	e035      	b.n	800a804 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	7e5b      	ldrb	r3, [r3, #25]
 800a79c:	3301      	adds	r3, #1
 800a79e:	b2da      	uxtb	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	765a      	strb	r2, [r3, #25]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	7e5b      	ldrb	r3, [r3, #25]
 800a7a8:	2b02      	cmp	r3, #2
 800a7aa:	d806      	bhi.n	800a7ba <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a7b8:	e025      	b.n	800a806 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7c0:	2106      	movs	r1, #6
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	795b      	ldrb	r3, [r3, #5]
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f90c 	bl	800a9f0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	791b      	ldrb	r3, [r3, #4]
 800a7dc:	4619      	mov	r1, r3
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 f906 	bl	800a9f0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a7ea:	2302      	movs	r3, #2
 800a7ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a7ee:	e00a      	b.n	800a806 <USBH_HandleControl+0x2de>

    default:
      break;
 800a7f0:	bf00      	nop
 800a7f2:	e008      	b.n	800a806 <USBH_HandleControl+0x2de>
      break;
 800a7f4:	bf00      	nop
 800a7f6:	e006      	b.n	800a806 <USBH_HandleControl+0x2de>
      break;
 800a7f8:	bf00      	nop
 800a7fa:	e004      	b.n	800a806 <USBH_HandleControl+0x2de>
      break;
 800a7fc:	bf00      	nop
 800a7fe:	e002      	b.n	800a806 <USBH_HandleControl+0x2de>
      break;
 800a800:	bf00      	nop
 800a802:	e000      	b.n	800a806 <USBH_HandleControl+0x2de>
      break;
 800a804:	bf00      	nop
  }

  return status;
 800a806:	7bfb      	ldrb	r3, [r7, #15]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b088      	sub	sp, #32
 800a814:	af04      	add	r7, sp, #16
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	4613      	mov	r3, r2
 800a81c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a81e:	79f9      	ldrb	r1, [r7, #7]
 800a820:	2300      	movs	r3, #0
 800a822:	9303      	str	r3, [sp, #12]
 800a824:	2308      	movs	r3, #8
 800a826:	9302      	str	r3, [sp, #8]
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	9301      	str	r3, [sp, #4]
 800a82c:	2300      	movs	r3, #0
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	2300      	movs	r3, #0
 800a832:	2200      	movs	r2, #0
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f000 fb46 	bl	800aec6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b088      	sub	sp, #32
 800a848:	af04      	add	r7, sp, #16
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	4611      	mov	r1, r2
 800a850:	461a      	mov	r2, r3
 800a852:	460b      	mov	r3, r1
 800a854:	80fb      	strh	r3, [r7, #6]
 800a856:	4613      	mov	r3, r2
 800a858:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a860:	2b00      	cmp	r3, #0
 800a862:	d001      	beq.n	800a868 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a864:	2300      	movs	r3, #0
 800a866:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a868:	7979      	ldrb	r1, [r7, #5]
 800a86a:	7e3b      	ldrb	r3, [r7, #24]
 800a86c:	9303      	str	r3, [sp, #12]
 800a86e:	88fb      	ldrh	r3, [r7, #6]
 800a870:	9302      	str	r3, [sp, #8]
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	9301      	str	r3, [sp, #4]
 800a876:	2301      	movs	r3, #1
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	2300      	movs	r3, #0
 800a87c:	2200      	movs	r2, #0
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f000 fb21 	bl	800aec6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b088      	sub	sp, #32
 800a892:	af04      	add	r7, sp, #16
 800a894:	60f8      	str	r0, [r7, #12]
 800a896:	60b9      	str	r1, [r7, #8]
 800a898:	4611      	mov	r1, r2
 800a89a:	461a      	mov	r2, r3
 800a89c:	460b      	mov	r3, r1
 800a89e:	80fb      	strh	r3, [r7, #6]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a8a4:	7979      	ldrb	r1, [r7, #5]
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	9303      	str	r3, [sp, #12]
 800a8aa:	88fb      	ldrh	r3, [r7, #6]
 800a8ac:	9302      	str	r3, [sp, #8]
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	9301      	str	r3, [sp, #4]
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f000 fb03 	bl	800aec6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a8c0:	2300      	movs	r3, #0

}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b088      	sub	sp, #32
 800a8ce:	af04      	add	r7, sp, #16
 800a8d0:	60f8      	str	r0, [r7, #12]
 800a8d2:	60b9      	str	r1, [r7, #8]
 800a8d4:	4611      	mov	r1, r2
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	460b      	mov	r3, r1
 800a8da:	80fb      	strh	r3, [r7, #6]
 800a8dc:	4613      	mov	r3, r2
 800a8de:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d001      	beq.n	800a8ee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a8ee:	7979      	ldrb	r1, [r7, #5]
 800a8f0:	7e3b      	ldrb	r3, [r7, #24]
 800a8f2:	9303      	str	r3, [sp, #12]
 800a8f4:	88fb      	ldrh	r3, [r7, #6]
 800a8f6:	9302      	str	r3, [sp, #8]
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	9301      	str	r3, [sp, #4]
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	9300      	str	r3, [sp, #0]
 800a900:	2302      	movs	r3, #2
 800a902:	2200      	movs	r2, #0
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f000 fade 	bl	800aec6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b088      	sub	sp, #32
 800a918:	af04      	add	r7, sp, #16
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	4611      	mov	r1, r2
 800a920:	461a      	mov	r2, r3
 800a922:	460b      	mov	r3, r1
 800a924:	80fb      	strh	r3, [r7, #6]
 800a926:	4613      	mov	r3, r2
 800a928:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a92a:	7979      	ldrb	r1, [r7, #5]
 800a92c:	2300      	movs	r3, #0
 800a92e:	9303      	str	r3, [sp, #12]
 800a930:	88fb      	ldrh	r3, [r7, #6]
 800a932:	9302      	str	r3, [sp, #8]
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	9301      	str	r3, [sp, #4]
 800a938:	2301      	movs	r3, #1
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	2302      	movs	r3, #2
 800a93e:	2201      	movs	r2, #1
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f000 fac0 	bl	800aec6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af04      	add	r7, sp, #16
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	4608      	mov	r0, r1
 800a95a:	4611      	mov	r1, r2
 800a95c:	461a      	mov	r2, r3
 800a95e:	4603      	mov	r3, r0
 800a960:	70fb      	strb	r3, [r7, #3]
 800a962:	460b      	mov	r3, r1
 800a964:	70bb      	strb	r3, [r7, #2]
 800a966:	4613      	mov	r3, r2
 800a968:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a96a:	7878      	ldrb	r0, [r7, #1]
 800a96c:	78ba      	ldrb	r2, [r7, #2]
 800a96e:	78f9      	ldrb	r1, [r7, #3]
 800a970:	8b3b      	ldrh	r3, [r7, #24]
 800a972:	9302      	str	r3, [sp, #8]
 800a974:	7d3b      	ldrb	r3, [r7, #20]
 800a976:	9301      	str	r3, [sp, #4]
 800a978:	7c3b      	ldrb	r3, [r7, #16]
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	4603      	mov	r3, r0
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 fa53 	bl	800ae2a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3708      	adds	r7, #8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b082      	sub	sp, #8
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	460b      	mov	r3, r1
 800a998:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a99a:	78fb      	ldrb	r3, [r7, #3]
 800a99c:	4619      	mov	r1, r3
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 fa72 	bl	800ae88 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b084      	sub	sp, #16
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 f836 	bl	800aa2c <USBH_GetFreePipe>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a9c4:	89fb      	ldrh	r3, [r7, #14]
 800a9c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d00a      	beq.n	800a9e4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a9ce:	78fa      	ldrb	r2, [r7, #3]
 800a9d0:	89fb      	ldrh	r3, [r7, #14]
 800a9d2:	f003 030f 	and.w	r3, r3, #15
 800a9d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a9da:	6879      	ldr	r1, [r7, #4]
 800a9dc:	33e0      	adds	r3, #224	; 0xe0
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	440b      	add	r3, r1
 800a9e2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a9e4:	89fb      	ldrh	r3, [r7, #14]
 800a9e6:	b2db      	uxtb	r3, r3
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a9fc:	78fb      	ldrb	r3, [r7, #3]
 800a9fe:	2b0a      	cmp	r3, #10
 800aa00:	d80d      	bhi.n	800aa1e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800aa02:	78fb      	ldrb	r3, [r7, #3]
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	33e0      	adds	r3, #224	; 0xe0
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	4413      	add	r3, r2
 800aa0c:	685a      	ldr	r2, [r3, #4]
 800aa0e:	78fb      	ldrb	r3, [r7, #3]
 800aa10:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800aa14:	6879      	ldr	r1, [r7, #4]
 800aa16:	33e0      	adds	r3, #224	; 0xe0
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	440b      	add	r3, r1
 800aa1c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800aa34:	2300      	movs	r3, #0
 800aa36:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800aa38:	2300      	movs	r3, #0
 800aa3a:	73fb      	strb	r3, [r7, #15]
 800aa3c:	e00f      	b.n	800aa5e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800aa3e:	7bfb      	ldrb	r3, [r7, #15]
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	33e0      	adds	r3, #224	; 0xe0
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4413      	add	r3, r2
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d102      	bne.n	800aa58 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800aa52:	7bfb      	ldrb	r3, [r7, #15]
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	e007      	b.n	800aa68 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	73fb      	strb	r3, [r7, #15]
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	2b0a      	cmp	r3, #10
 800aa62:	d9ec      	bls.n	800aa3e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800aa64:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3714      	adds	r7, #20
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800aa78:	2201      	movs	r2, #1
 800aa7a:	490e      	ldr	r1, [pc, #56]	; (800aab4 <MX_USB_HOST_Init+0x40>)
 800aa7c:	480e      	ldr	r0, [pc, #56]	; (800aab8 <MX_USB_HOST_Init+0x44>)
 800aa7e:	f7fe fca1 	bl	80093c4 <USBH_Init>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d001      	beq.n	800aa8c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800aa88:	f7f6 fbb6 	bl	80011f8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800aa8c:	490b      	ldr	r1, [pc, #44]	; (800aabc <MX_USB_HOST_Init+0x48>)
 800aa8e:	480a      	ldr	r0, [pc, #40]	; (800aab8 <MX_USB_HOST_Init+0x44>)
 800aa90:	f7fe fd26 	bl	80094e0 <USBH_RegisterClass>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d001      	beq.n	800aa9e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aa9a:	f7f6 fbad 	bl	80011f8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800aa9e:	4806      	ldr	r0, [pc, #24]	; (800aab8 <MX_USB_HOST_Init+0x44>)
 800aaa0:	f7fe fdaa 	bl	80095f8 <USBH_Start>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d001      	beq.n	800aaae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800aaaa:	f7f6 fba5 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800aaae:	bf00      	nop
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	0800aad5 	.word	0x0800aad5
 800aab8:	20000388 	.word	0x20000388
 800aabc:	2000001c 	.word	0x2000001c

0800aac0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800aac4:	4802      	ldr	r0, [pc, #8]	; (800aad0 <MX_USB_HOST_Process+0x10>)
 800aac6:	f7fe fda7 	bl	8009618 <USBH_Process>
}
 800aaca:	bf00      	nop
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	20000388 	.word	0x20000388

0800aad4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	460b      	mov	r3, r1
 800aade:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aae0:	78fb      	ldrb	r3, [r7, #3]
 800aae2:	3b01      	subs	r3, #1
 800aae4:	2b04      	cmp	r3, #4
 800aae6:	d819      	bhi.n	800ab1c <USBH_UserProcess+0x48>
 800aae8:	a201      	add	r2, pc, #4	; (adr r2, 800aaf0 <USBH_UserProcess+0x1c>)
 800aaea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaee:	bf00      	nop
 800aaf0:	0800ab1d 	.word	0x0800ab1d
 800aaf4:	0800ab0d 	.word	0x0800ab0d
 800aaf8:	0800ab1d 	.word	0x0800ab1d
 800aafc:	0800ab15 	.word	0x0800ab15
 800ab00:	0800ab05 	.word	0x0800ab05
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ab04:	4b09      	ldr	r3, [pc, #36]	; (800ab2c <USBH_UserProcess+0x58>)
 800ab06:	2203      	movs	r2, #3
 800ab08:	701a      	strb	r2, [r3, #0]
  break;
 800ab0a:	e008      	b.n	800ab1e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ab0c:	4b07      	ldr	r3, [pc, #28]	; (800ab2c <USBH_UserProcess+0x58>)
 800ab0e:	2202      	movs	r2, #2
 800ab10:	701a      	strb	r2, [r3, #0]
  break;
 800ab12:	e004      	b.n	800ab1e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ab14:	4b05      	ldr	r3, [pc, #20]	; (800ab2c <USBH_UserProcess+0x58>)
 800ab16:	2201      	movs	r2, #1
 800ab18:	701a      	strb	r2, [r3, #0]
  break;
 800ab1a:	e000      	b.n	800ab1e <USBH_UserProcess+0x4a>

  default:
  break;
 800ab1c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ab1e:	bf00      	nop
 800ab20:	370c      	adds	r7, #12
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	200000ca 	.word	0x200000ca

0800ab30 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b08a      	sub	sp, #40	; 0x28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab38:	f107 0314 	add.w	r3, r7, #20
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	601a      	str	r2, [r3, #0]
 800ab40:	605a      	str	r2, [r3, #4]
 800ab42:	609a      	str	r2, [r3, #8]
 800ab44:	60da      	str	r2, [r3, #12]
 800ab46:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab50:	d147      	bne.n	800abe2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab52:	2300      	movs	r3, #0
 800ab54:	613b      	str	r3, [r7, #16]
 800ab56:	4b25      	ldr	r3, [pc, #148]	; (800abec <HAL_HCD_MspInit+0xbc>)
 800ab58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5a:	4a24      	ldr	r2, [pc, #144]	; (800abec <HAL_HCD_MspInit+0xbc>)
 800ab5c:	f043 0301 	orr.w	r3, r3, #1
 800ab60:	6313      	str	r3, [r2, #48]	; 0x30
 800ab62:	4b22      	ldr	r3, [pc, #136]	; (800abec <HAL_HCD_MspInit+0xbc>)
 800ab64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab66:	f003 0301 	and.w	r3, r3, #1
 800ab6a:	613b      	str	r3, [r7, #16]
 800ab6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ab6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab74:	2300      	movs	r3, #0
 800ab76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ab7c:	f107 0314 	add.w	r3, r7, #20
 800ab80:	4619      	mov	r1, r3
 800ab82:	481b      	ldr	r0, [pc, #108]	; (800abf0 <HAL_HCD_MspInit+0xc0>)
 800ab84:	f7f7 fd54 	bl	8002630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ab88:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ab8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab8e:	2302      	movs	r3, #2
 800ab90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab92:	2300      	movs	r3, #0
 800ab94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab96:	2300      	movs	r3, #0
 800ab98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ab9a:	230a      	movs	r3, #10
 800ab9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab9e:	f107 0314 	add.w	r3, r7, #20
 800aba2:	4619      	mov	r1, r3
 800aba4:	4812      	ldr	r0, [pc, #72]	; (800abf0 <HAL_HCD_MspInit+0xc0>)
 800aba6:	f7f7 fd43 	bl	8002630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800abaa:	4b10      	ldr	r3, [pc, #64]	; (800abec <HAL_HCD_MspInit+0xbc>)
 800abac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abae:	4a0f      	ldr	r2, [pc, #60]	; (800abec <HAL_HCD_MspInit+0xbc>)
 800abb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abb4:	6353      	str	r3, [r2, #52]	; 0x34
 800abb6:	2300      	movs	r3, #0
 800abb8:	60fb      	str	r3, [r7, #12]
 800abba:	4b0c      	ldr	r3, [pc, #48]	; (800abec <HAL_HCD_MspInit+0xbc>)
 800abbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abbe:	4a0b      	ldr	r2, [pc, #44]	; (800abec <HAL_HCD_MspInit+0xbc>)
 800abc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800abc4:	6453      	str	r3, [r2, #68]	; 0x44
 800abc6:	4b09      	ldr	r3, [pc, #36]	; (800abec <HAL_HCD_MspInit+0xbc>)
 800abc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abce:	60fb      	str	r3, [r7, #12]
 800abd0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800abd2:	2200      	movs	r2, #0
 800abd4:	2100      	movs	r1, #0
 800abd6:	2043      	movs	r0, #67	; 0x43
 800abd8:	f7f7 fcf3 	bl	80025c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800abdc:	2043      	movs	r0, #67	; 0x43
 800abde:	f7f7 fd0c 	bl	80025fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800abe2:	bf00      	nop
 800abe4:	3728      	adds	r7, #40	; 0x28
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	40023800 	.word	0x40023800
 800abf0:	40020000 	.word	0x40020000

0800abf4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7ff f8db 	bl	8009dbe <USBH_LL_IncTimer>
}
 800ac08:	bf00      	nop
 800ac0a:	3708      	adds	r7, #8
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7ff f913 	bl	8009e4a <USBH_LL_Connect>
}
 800ac24:	bf00      	nop
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7ff f91c 	bl	8009e78 <USBH_LL_Disconnect>
}
 800ac40:	bf00      	nop
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	460b      	mov	r3, r1
 800ac52:	70fb      	strb	r3, [r7, #3]
 800ac54:	4613      	mov	r3, r2
 800ac56:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7ff f8cd 	bl	8009e12 <USBH_LL_PortEnabled>
}
 800ac78:	bf00      	nop
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7ff f8cd 	bl	8009e2e <USBH_LL_PortDisabled>
}
 800ac94:	bf00      	nop
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d12a      	bne.n	800ad04 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800acae:	4a18      	ldr	r2, [pc, #96]	; (800ad10 <USBH_LL_Init+0x74>)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a15      	ldr	r2, [pc, #84]	; (800ad10 <USBH_LL_Init+0x74>)
 800acba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800acbe:	4b14      	ldr	r3, [pc, #80]	; (800ad10 <USBH_LL_Init+0x74>)
 800acc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800acc4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800acc6:	4b12      	ldr	r3, [pc, #72]	; (800ad10 <USBH_LL_Init+0x74>)
 800acc8:	2208      	movs	r2, #8
 800acca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800accc:	4b10      	ldr	r3, [pc, #64]	; (800ad10 <USBH_LL_Init+0x74>)
 800acce:	2201      	movs	r2, #1
 800acd0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800acd2:	4b0f      	ldr	r3, [pc, #60]	; (800ad10 <USBH_LL_Init+0x74>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800acd8:	4b0d      	ldr	r3, [pc, #52]	; (800ad10 <USBH_LL_Init+0x74>)
 800acda:	2202      	movs	r2, #2
 800acdc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800acde:	4b0c      	ldr	r3, [pc, #48]	; (800ad10 <USBH_LL_Init+0x74>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ace4:	480a      	ldr	r0, [pc, #40]	; (800ad10 <USBH_LL_Init+0x74>)
 800ace6:	f7f7 fe8a 	bl	80029fe <HAL_HCD_Init>
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d001      	beq.n	800acf4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800acf0:	f7f6 fa82 	bl	80011f8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800acf4:	4806      	ldr	r0, [pc, #24]	; (800ad10 <USBH_LL_Init+0x74>)
 800acf6:	f7f8 fa67 	bl	80031c8 <HAL_HCD_GetCurrentFrame>
 800acfa:	4603      	mov	r3, r0
 800acfc:	4619      	mov	r1, r3
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7ff f84e 	bl	8009da0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	20000760 	.word	0x20000760

0800ad14 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad20:	2300      	movs	r3, #0
 800ad22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7f8 f9d6 	bl	80030dc <HAL_HCD_Start>
 800ad30:	4603      	mov	r3, r0
 800ad32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 f95c 	bl	800aff4 <USBH_Get_USB_Status>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad56:	2300      	movs	r3, #0
 800ad58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7f8 f9de 	bl	8003122 <HAL_HCD_Stop>
 800ad66:	4603      	mov	r3, r0
 800ad68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad6a:	7bfb      	ldrb	r3, [r7, #15]
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f000 f941 	bl	800aff4 <USBH_Get_USB_Status>
 800ad72:	4603      	mov	r3, r0
 800ad74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad76:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7f8 fa26 	bl	80031e4 <HAL_HCD_GetCurrentSpeed>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d00c      	beq.n	800adb8 <USBH_LL_GetSpeed+0x38>
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	d80d      	bhi.n	800adbe <USBH_LL_GetSpeed+0x3e>
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d002      	beq.n	800adac <USBH_LL_GetSpeed+0x2c>
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d003      	beq.n	800adb2 <USBH_LL_GetSpeed+0x32>
 800adaa:	e008      	b.n	800adbe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800adac:	2300      	movs	r3, #0
 800adae:	73fb      	strb	r3, [r7, #15]
    break;
 800adb0:	e008      	b.n	800adc4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800adb2:	2301      	movs	r3, #1
 800adb4:	73fb      	strb	r3, [r7, #15]
    break;
 800adb6:	e005      	b.n	800adc4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800adb8:	2302      	movs	r3, #2
 800adba:	73fb      	strb	r3, [r7, #15]
    break;
 800adbc:	e002      	b.n	800adc4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800adbe:	2301      	movs	r3, #1
 800adc0:	73fb      	strb	r3, [r7, #15]
    break;
 800adc2:	bf00      	nop
  }
  return  speed;
 800adc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b084      	sub	sp, #16
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add6:	2300      	movs	r3, #0
 800add8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7f8 f9b9 	bl	800315c <HAL_HCD_ResetPort>
 800adea:	4603      	mov	r3, r0
 800adec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800adee:	7bfb      	ldrb	r3, [r7, #15]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f000 f8ff 	bl	800aff4 <USBH_Get_USB_Status>
 800adf6:	4603      	mov	r3, r0
 800adf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adfa:	7bbb      	ldrb	r3, [r7, #14]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae16:	78fa      	ldrb	r2, [r7, #3]
 800ae18:	4611      	mov	r1, r2
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7f8 f9c0 	bl	80031a0 <HAL_HCD_HC_GetXferCount>
 800ae20:	4603      	mov	r3, r0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ae2a:	b590      	push	{r4, r7, lr}
 800ae2c:	b089      	sub	sp, #36	; 0x24
 800ae2e:	af04      	add	r7, sp, #16
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	4608      	mov	r0, r1
 800ae34:	4611      	mov	r1, r2
 800ae36:	461a      	mov	r2, r3
 800ae38:	4603      	mov	r3, r0
 800ae3a:	70fb      	strb	r3, [r7, #3]
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	70bb      	strb	r3, [r7, #2]
 800ae40:	4613      	mov	r3, r2
 800ae42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ae52:	787c      	ldrb	r4, [r7, #1]
 800ae54:	78ba      	ldrb	r2, [r7, #2]
 800ae56:	78f9      	ldrb	r1, [r7, #3]
 800ae58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae5a:	9302      	str	r3, [sp, #8]
 800ae5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ae60:	9301      	str	r3, [sp, #4]
 800ae62:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	4623      	mov	r3, r4
 800ae6a:	f7f7 fe2a 	bl	8002ac2 <HAL_HCD_HC_Init>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae72:	7bfb      	ldrb	r3, [r7, #15]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f000 f8bd 	bl	800aff4 <USBH_Get_USB_Status>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3714      	adds	r7, #20
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd90      	pop	{r4, r7, pc}

0800ae88 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	460b      	mov	r3, r1
 800ae92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aea2:	78fa      	ldrb	r2, [r7, #3]
 800aea4:	4611      	mov	r1, r2
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7f7 fe9a 	bl	8002be0 <HAL_HCD_HC_Halt>
 800aeac:	4603      	mov	r3, r0
 800aeae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 f89e 	bl	800aff4 <USBH_Get_USB_Status>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800aec6:	b590      	push	{r4, r7, lr}
 800aec8:	b089      	sub	sp, #36	; 0x24
 800aeca:	af04      	add	r7, sp, #16
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	4608      	mov	r0, r1
 800aed0:	4611      	mov	r1, r2
 800aed2:	461a      	mov	r2, r3
 800aed4:	4603      	mov	r3, r0
 800aed6:	70fb      	strb	r3, [r7, #3]
 800aed8:	460b      	mov	r3, r1
 800aeda:	70bb      	strb	r3, [r7, #2]
 800aedc:	4613      	mov	r3, r2
 800aede:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aee4:	2300      	movs	r3, #0
 800aee6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aeee:	787c      	ldrb	r4, [r7, #1]
 800aef0:	78ba      	ldrb	r2, [r7, #2]
 800aef2:	78f9      	ldrb	r1, [r7, #3]
 800aef4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aef8:	9303      	str	r3, [sp, #12]
 800aefa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aefc:	9302      	str	r3, [sp, #8]
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af00:	9301      	str	r3, [sp, #4]
 800af02:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	4623      	mov	r3, r4
 800af0a:	f7f7 fe8d 	bl	8002c28 <HAL_HCD_HC_SubmitRequest>
 800af0e:	4603      	mov	r3, r0
 800af10:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800af12:	7bfb      	ldrb	r3, [r7, #15]
 800af14:	4618      	mov	r0, r3
 800af16:	f000 f86d 	bl	800aff4 <USBH_Get_USB_Status>
 800af1a:	4603      	mov	r3, r0
 800af1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	bd90      	pop	{r4, r7, pc}

0800af28 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	460b      	mov	r3, r1
 800af32:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af3a:	78fa      	ldrb	r2, [r7, #3]
 800af3c:	4611      	mov	r1, r2
 800af3e:	4618      	mov	r0, r3
 800af40:	f7f8 f91a 	bl	8003178 <HAL_HCD_HC_GetURBState>
 800af44:	4603      	mov	r3, r0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3708      	adds	r7, #8
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b082      	sub	sp, #8
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
 800af56:	460b      	mov	r3, r1
 800af58:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800af60:	2b01      	cmp	r3, #1
 800af62:	d103      	bne.n	800af6c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800af64:	78fb      	ldrb	r3, [r7, #3]
 800af66:	4618      	mov	r0, r3
 800af68:	f000 f870 	bl	800b04c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800af6c:	20c8      	movs	r0, #200	; 0xc8
 800af6e:	f7f7 fa29 	bl	80023c4 <HAL_Delay>
  return USBH_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	460b      	mov	r3, r1
 800af86:	70fb      	strb	r3, [r7, #3]
 800af88:	4613      	mov	r3, r2
 800af8a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af92:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800af94:	78fb      	ldrb	r3, [r7, #3]
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	212c      	movs	r1, #44	; 0x2c
 800af9a:	fb01 f303 	mul.w	r3, r1, r3
 800af9e:	4413      	add	r3, r2
 800afa0:	333b      	adds	r3, #59	; 0x3b
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d009      	beq.n	800afbc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800afa8:	78fb      	ldrb	r3, [r7, #3]
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	212c      	movs	r1, #44	; 0x2c
 800afae:	fb01 f303 	mul.w	r3, r1, r3
 800afb2:	4413      	add	r3, r2
 800afb4:	3354      	adds	r3, #84	; 0x54
 800afb6:	78ba      	ldrb	r2, [r7, #2]
 800afb8:	701a      	strb	r2, [r3, #0]
 800afba:	e008      	b.n	800afce <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800afbc:	78fb      	ldrb	r3, [r7, #3]
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	212c      	movs	r1, #44	; 0x2c
 800afc2:	fb01 f303 	mul.w	r3, r1, r3
 800afc6:	4413      	add	r3, r2
 800afc8:	3355      	adds	r3, #85	; 0x55
 800afca:	78ba      	ldrb	r2, [r7, #2]
 800afcc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7f7 f9ed 	bl	80023c4 <HAL_Delay>
}
 800afea:	bf00      	nop
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
	...

0800aff4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	4603      	mov	r3, r0
 800affc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800affe:	2300      	movs	r3, #0
 800b000:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b002:	79fb      	ldrb	r3, [r7, #7]
 800b004:	2b03      	cmp	r3, #3
 800b006:	d817      	bhi.n	800b038 <USBH_Get_USB_Status+0x44>
 800b008:	a201      	add	r2, pc, #4	; (adr r2, 800b010 <USBH_Get_USB_Status+0x1c>)
 800b00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b00e:	bf00      	nop
 800b010:	0800b021 	.word	0x0800b021
 800b014:	0800b027 	.word	0x0800b027
 800b018:	0800b02d 	.word	0x0800b02d
 800b01c:	0800b033 	.word	0x0800b033
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	73fb      	strb	r3, [r7, #15]
    break;
 800b024:	e00b      	b.n	800b03e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b026:	2302      	movs	r3, #2
 800b028:	73fb      	strb	r3, [r7, #15]
    break;
 800b02a:	e008      	b.n	800b03e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b02c:	2301      	movs	r3, #1
 800b02e:	73fb      	strb	r3, [r7, #15]
    break;
 800b030:	e005      	b.n	800b03e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b032:	2302      	movs	r3, #2
 800b034:	73fb      	strb	r3, [r7, #15]
    break;
 800b036:	e002      	b.n	800b03e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b038:	2302      	movs	r3, #2
 800b03a:	73fb      	strb	r3, [r7, #15]
    break;
 800b03c:	bf00      	nop
  }
  return usb_status;
 800b03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3714      	adds	r7, #20
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	4603      	mov	r3, r0
 800b054:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b056:	79fb      	ldrb	r3, [r7, #7]
 800b058:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b05a:	79fb      	ldrb	r3, [r7, #7]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d102      	bne.n	800b066 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b060:	2301      	movs	r3, #1
 800b062:	73fb      	strb	r3, [r7, #15]
 800b064:	e001      	b.n	800b06a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b066:	2300      	movs	r3, #0
 800b068:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b06a:	7bfb      	ldrb	r3, [r7, #15]
 800b06c:	461a      	mov	r2, r3
 800b06e:	2101      	movs	r1, #1
 800b070:	4803      	ldr	r0, [pc, #12]	; (800b080 <MX_DriverVbusFS+0x34>)
 800b072:	f7f7 fc91 	bl	8002998 <HAL_GPIO_WritePin>
}
 800b076:	bf00      	nop
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	40020800 	.word	0x40020800

0800b084 <__errno>:
 800b084:	4b01      	ldr	r3, [pc, #4]	; (800b08c <__errno+0x8>)
 800b086:	6818      	ldr	r0, [r3, #0]
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	2000003c 	.word	0x2000003c

0800b090 <__libc_init_array>:
 800b090:	b570      	push	{r4, r5, r6, lr}
 800b092:	4d0d      	ldr	r5, [pc, #52]	; (800b0c8 <__libc_init_array+0x38>)
 800b094:	4c0d      	ldr	r4, [pc, #52]	; (800b0cc <__libc_init_array+0x3c>)
 800b096:	1b64      	subs	r4, r4, r5
 800b098:	10a4      	asrs	r4, r4, #2
 800b09a:	2600      	movs	r6, #0
 800b09c:	42a6      	cmp	r6, r4
 800b09e:	d109      	bne.n	800b0b4 <__libc_init_array+0x24>
 800b0a0:	4d0b      	ldr	r5, [pc, #44]	; (800b0d0 <__libc_init_array+0x40>)
 800b0a2:	4c0c      	ldr	r4, [pc, #48]	; (800b0d4 <__libc_init_array+0x44>)
 800b0a4:	f000 f8f8 	bl	800b298 <_init>
 800b0a8:	1b64      	subs	r4, r4, r5
 800b0aa:	10a4      	asrs	r4, r4, #2
 800b0ac:	2600      	movs	r6, #0
 800b0ae:	42a6      	cmp	r6, r4
 800b0b0:	d105      	bne.n	800b0be <__libc_init_array+0x2e>
 800b0b2:	bd70      	pop	{r4, r5, r6, pc}
 800b0b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0b8:	4798      	blx	r3
 800b0ba:	3601      	adds	r6, #1
 800b0bc:	e7ee      	b.n	800b09c <__libc_init_array+0xc>
 800b0be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0c2:	4798      	blx	r3
 800b0c4:	3601      	adds	r6, #1
 800b0c6:	e7f2      	b.n	800b0ae <__libc_init_array+0x1e>
 800b0c8:	0800b2d4 	.word	0x0800b2d4
 800b0cc:	0800b2d4 	.word	0x0800b2d4
 800b0d0:	0800b2d4 	.word	0x0800b2d4
 800b0d4:	0800b2d8 	.word	0x0800b2d8

0800b0d8 <malloc>:
 800b0d8:	4b02      	ldr	r3, [pc, #8]	; (800b0e4 <malloc+0xc>)
 800b0da:	4601      	mov	r1, r0
 800b0dc:	6818      	ldr	r0, [r3, #0]
 800b0de:	f000 b863 	b.w	800b1a8 <_malloc_r>
 800b0e2:	bf00      	nop
 800b0e4:	2000003c 	.word	0x2000003c

0800b0e8 <free>:
 800b0e8:	4b02      	ldr	r3, [pc, #8]	; (800b0f4 <free+0xc>)
 800b0ea:	4601      	mov	r1, r0
 800b0ec:	6818      	ldr	r0, [r3, #0]
 800b0ee:	f000 b80b 	b.w	800b108 <_free_r>
 800b0f2:	bf00      	nop
 800b0f4:	2000003c 	.word	0x2000003c

0800b0f8 <memset>:
 800b0f8:	4402      	add	r2, r0
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d100      	bne.n	800b102 <memset+0xa>
 800b100:	4770      	bx	lr
 800b102:	f803 1b01 	strb.w	r1, [r3], #1
 800b106:	e7f9      	b.n	800b0fc <memset+0x4>

0800b108 <_free_r>:
 800b108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b10a:	2900      	cmp	r1, #0
 800b10c:	d048      	beq.n	800b1a0 <_free_r+0x98>
 800b10e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b112:	9001      	str	r0, [sp, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	f1a1 0404 	sub.w	r4, r1, #4
 800b11a:	bfb8      	it	lt
 800b11c:	18e4      	addlt	r4, r4, r3
 800b11e:	f000 f8ad 	bl	800b27c <__malloc_lock>
 800b122:	4a20      	ldr	r2, [pc, #128]	; (800b1a4 <_free_r+0x9c>)
 800b124:	9801      	ldr	r0, [sp, #4]
 800b126:	6813      	ldr	r3, [r2, #0]
 800b128:	4615      	mov	r5, r2
 800b12a:	b933      	cbnz	r3, 800b13a <_free_r+0x32>
 800b12c:	6063      	str	r3, [r4, #4]
 800b12e:	6014      	str	r4, [r2, #0]
 800b130:	b003      	add	sp, #12
 800b132:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b136:	f000 b8a7 	b.w	800b288 <__malloc_unlock>
 800b13a:	42a3      	cmp	r3, r4
 800b13c:	d90b      	bls.n	800b156 <_free_r+0x4e>
 800b13e:	6821      	ldr	r1, [r4, #0]
 800b140:	1862      	adds	r2, r4, r1
 800b142:	4293      	cmp	r3, r2
 800b144:	bf04      	itt	eq
 800b146:	681a      	ldreq	r2, [r3, #0]
 800b148:	685b      	ldreq	r3, [r3, #4]
 800b14a:	6063      	str	r3, [r4, #4]
 800b14c:	bf04      	itt	eq
 800b14e:	1852      	addeq	r2, r2, r1
 800b150:	6022      	streq	r2, [r4, #0]
 800b152:	602c      	str	r4, [r5, #0]
 800b154:	e7ec      	b.n	800b130 <_free_r+0x28>
 800b156:	461a      	mov	r2, r3
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	b10b      	cbz	r3, 800b160 <_free_r+0x58>
 800b15c:	42a3      	cmp	r3, r4
 800b15e:	d9fa      	bls.n	800b156 <_free_r+0x4e>
 800b160:	6811      	ldr	r1, [r2, #0]
 800b162:	1855      	adds	r5, r2, r1
 800b164:	42a5      	cmp	r5, r4
 800b166:	d10b      	bne.n	800b180 <_free_r+0x78>
 800b168:	6824      	ldr	r4, [r4, #0]
 800b16a:	4421      	add	r1, r4
 800b16c:	1854      	adds	r4, r2, r1
 800b16e:	42a3      	cmp	r3, r4
 800b170:	6011      	str	r1, [r2, #0]
 800b172:	d1dd      	bne.n	800b130 <_free_r+0x28>
 800b174:	681c      	ldr	r4, [r3, #0]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	6053      	str	r3, [r2, #4]
 800b17a:	4421      	add	r1, r4
 800b17c:	6011      	str	r1, [r2, #0]
 800b17e:	e7d7      	b.n	800b130 <_free_r+0x28>
 800b180:	d902      	bls.n	800b188 <_free_r+0x80>
 800b182:	230c      	movs	r3, #12
 800b184:	6003      	str	r3, [r0, #0]
 800b186:	e7d3      	b.n	800b130 <_free_r+0x28>
 800b188:	6825      	ldr	r5, [r4, #0]
 800b18a:	1961      	adds	r1, r4, r5
 800b18c:	428b      	cmp	r3, r1
 800b18e:	bf04      	itt	eq
 800b190:	6819      	ldreq	r1, [r3, #0]
 800b192:	685b      	ldreq	r3, [r3, #4]
 800b194:	6063      	str	r3, [r4, #4]
 800b196:	bf04      	itt	eq
 800b198:	1949      	addeq	r1, r1, r5
 800b19a:	6021      	streq	r1, [r4, #0]
 800b19c:	6054      	str	r4, [r2, #4]
 800b19e:	e7c7      	b.n	800b130 <_free_r+0x28>
 800b1a0:	b003      	add	sp, #12
 800b1a2:	bd30      	pop	{r4, r5, pc}
 800b1a4:	200000cc 	.word	0x200000cc

0800b1a8 <_malloc_r>:
 800b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1aa:	1ccd      	adds	r5, r1, #3
 800b1ac:	f025 0503 	bic.w	r5, r5, #3
 800b1b0:	3508      	adds	r5, #8
 800b1b2:	2d0c      	cmp	r5, #12
 800b1b4:	bf38      	it	cc
 800b1b6:	250c      	movcc	r5, #12
 800b1b8:	2d00      	cmp	r5, #0
 800b1ba:	4606      	mov	r6, r0
 800b1bc:	db01      	blt.n	800b1c2 <_malloc_r+0x1a>
 800b1be:	42a9      	cmp	r1, r5
 800b1c0:	d903      	bls.n	800b1ca <_malloc_r+0x22>
 800b1c2:	230c      	movs	r3, #12
 800b1c4:	6033      	str	r3, [r6, #0]
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1ca:	f000 f857 	bl	800b27c <__malloc_lock>
 800b1ce:	4921      	ldr	r1, [pc, #132]	; (800b254 <_malloc_r+0xac>)
 800b1d0:	680a      	ldr	r2, [r1, #0]
 800b1d2:	4614      	mov	r4, r2
 800b1d4:	b99c      	cbnz	r4, 800b1fe <_malloc_r+0x56>
 800b1d6:	4f20      	ldr	r7, [pc, #128]	; (800b258 <_malloc_r+0xb0>)
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	b923      	cbnz	r3, 800b1e6 <_malloc_r+0x3e>
 800b1dc:	4621      	mov	r1, r4
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f000 f83c 	bl	800b25c <_sbrk_r>
 800b1e4:	6038      	str	r0, [r7, #0]
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f000 f837 	bl	800b25c <_sbrk_r>
 800b1ee:	1c43      	adds	r3, r0, #1
 800b1f0:	d123      	bne.n	800b23a <_malloc_r+0x92>
 800b1f2:	230c      	movs	r3, #12
 800b1f4:	6033      	str	r3, [r6, #0]
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f000 f846 	bl	800b288 <__malloc_unlock>
 800b1fc:	e7e3      	b.n	800b1c6 <_malloc_r+0x1e>
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	1b5b      	subs	r3, r3, r5
 800b202:	d417      	bmi.n	800b234 <_malloc_r+0x8c>
 800b204:	2b0b      	cmp	r3, #11
 800b206:	d903      	bls.n	800b210 <_malloc_r+0x68>
 800b208:	6023      	str	r3, [r4, #0]
 800b20a:	441c      	add	r4, r3
 800b20c:	6025      	str	r5, [r4, #0]
 800b20e:	e004      	b.n	800b21a <_malloc_r+0x72>
 800b210:	6863      	ldr	r3, [r4, #4]
 800b212:	42a2      	cmp	r2, r4
 800b214:	bf0c      	ite	eq
 800b216:	600b      	streq	r3, [r1, #0]
 800b218:	6053      	strne	r3, [r2, #4]
 800b21a:	4630      	mov	r0, r6
 800b21c:	f000 f834 	bl	800b288 <__malloc_unlock>
 800b220:	f104 000b 	add.w	r0, r4, #11
 800b224:	1d23      	adds	r3, r4, #4
 800b226:	f020 0007 	bic.w	r0, r0, #7
 800b22a:	1ac2      	subs	r2, r0, r3
 800b22c:	d0cc      	beq.n	800b1c8 <_malloc_r+0x20>
 800b22e:	1a1b      	subs	r3, r3, r0
 800b230:	50a3      	str	r3, [r4, r2]
 800b232:	e7c9      	b.n	800b1c8 <_malloc_r+0x20>
 800b234:	4622      	mov	r2, r4
 800b236:	6864      	ldr	r4, [r4, #4]
 800b238:	e7cc      	b.n	800b1d4 <_malloc_r+0x2c>
 800b23a:	1cc4      	adds	r4, r0, #3
 800b23c:	f024 0403 	bic.w	r4, r4, #3
 800b240:	42a0      	cmp	r0, r4
 800b242:	d0e3      	beq.n	800b20c <_malloc_r+0x64>
 800b244:	1a21      	subs	r1, r4, r0
 800b246:	4630      	mov	r0, r6
 800b248:	f000 f808 	bl	800b25c <_sbrk_r>
 800b24c:	3001      	adds	r0, #1
 800b24e:	d1dd      	bne.n	800b20c <_malloc_r+0x64>
 800b250:	e7cf      	b.n	800b1f2 <_malloc_r+0x4a>
 800b252:	bf00      	nop
 800b254:	200000cc 	.word	0x200000cc
 800b258:	200000d0 	.word	0x200000d0

0800b25c <_sbrk_r>:
 800b25c:	b538      	push	{r3, r4, r5, lr}
 800b25e:	4d06      	ldr	r5, [pc, #24]	; (800b278 <_sbrk_r+0x1c>)
 800b260:	2300      	movs	r3, #0
 800b262:	4604      	mov	r4, r0
 800b264:	4608      	mov	r0, r1
 800b266:	602b      	str	r3, [r5, #0]
 800b268:	f7f6 fada 	bl	8001820 <_sbrk>
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	d102      	bne.n	800b276 <_sbrk_r+0x1a>
 800b270:	682b      	ldr	r3, [r5, #0]
 800b272:	b103      	cbz	r3, 800b276 <_sbrk_r+0x1a>
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	bd38      	pop	{r3, r4, r5, pc}
 800b278:	20000a64 	.word	0x20000a64

0800b27c <__malloc_lock>:
 800b27c:	4801      	ldr	r0, [pc, #4]	; (800b284 <__malloc_lock+0x8>)
 800b27e:	f000 b809 	b.w	800b294 <__retarget_lock_acquire_recursive>
 800b282:	bf00      	nop
 800b284:	20000a6c 	.word	0x20000a6c

0800b288 <__malloc_unlock>:
 800b288:	4801      	ldr	r0, [pc, #4]	; (800b290 <__malloc_unlock+0x8>)
 800b28a:	f000 b804 	b.w	800b296 <__retarget_lock_release_recursive>
 800b28e:	bf00      	nop
 800b290:	20000a6c 	.word	0x20000a6c

0800b294 <__retarget_lock_acquire_recursive>:
 800b294:	4770      	bx	lr

0800b296 <__retarget_lock_release_recursive>:
 800b296:	4770      	bx	lr

0800b298 <_init>:
 800b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29a:	bf00      	nop
 800b29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b29e:	bc08      	pop	{r3}
 800b2a0:	469e      	mov	lr, r3
 800b2a2:	4770      	bx	lr

0800b2a4 <_fini>:
 800b2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a6:	bf00      	nop
 800b2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2aa:	bc08      	pop	{r3}
 800b2ac:	469e      	mov	lr, r3
 800b2ae:	4770      	bx	lr
