
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800ae34  0800ae34  0001ae34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2c8  0800b2c8  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2c8  0800b2c8  0001b2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2d0  0800b2d0  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2d0  0800b2d0  0001b2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2d4  0800b2d4  0001b2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800b2d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000984  2000009c  0800b374  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  0800b374  00020a20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023bf3  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bef  00000000  00000000  00043cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  000488b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001700  00000000  00000000  0004a180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cc8  00000000  00000000  0004b880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022bee  00000000  00000000  00071548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4ed3  00000000  00000000  00094136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00169009  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a60  00000000  00000000  0016905c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ae1c 	.word	0x0800ae1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	0800ae1c 	.word	0x0800ae1c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b08b      	sub	sp, #44	; 0x2c
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4604      	mov	r4, r0
 80004c8:	4608      	mov	r0, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	461a      	mov	r2, r3
 80004ce:	4623      	mov	r3, r4
 80004d0:	80fb      	strh	r3, [r7, #6]
 80004d2:	4603      	mov	r3, r0
 80004d4:	80bb      	strh	r3, [r7, #4]
 80004d6:	460b      	mov	r3, r1
 80004d8:	807b      	strh	r3, [r7, #2]
 80004da:	4613      	mov	r3, r2
 80004dc:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80004de:	887b      	ldrh	r3, [r7, #2]
 80004e0:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80004e6:	887b      	ldrh	r3, [r7, #2]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	f1c3 0301 	rsb	r3, r3, #1
 80004ee:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80004f8:	e061      	b.n	80005be <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80004fa:	88fa      	ldrh	r2, [r7, #6]
 80004fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	613b      	str	r3, [r7, #16]
 8000502:	e018      	b.n	8000536 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	b298      	uxth	r0, r3
 8000508:	6a3b      	ldr	r3, [r7, #32]
 800050a:	b29a      	uxth	r2, r3
 800050c:	88bb      	ldrh	r3, [r7, #4]
 800050e:	4413      	add	r3, r2
 8000510:	b29b      	uxth	r3, r3
 8000512:	883a      	ldrh	r2, [r7, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	f000 fc0b 	bl	8000d30 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	b298      	uxth	r0, r3
 800051e:	6a3b      	ldr	r3, [r7, #32]
 8000520:	b29b      	uxth	r3, r3
 8000522:	88ba      	ldrh	r2, [r7, #4]
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	b29b      	uxth	r3, r3
 8000528:	883a      	ldrh	r2, [r7, #0]
 800052a:	4619      	mov	r1, r3
 800052c:	f000 fc00 	bl	8000d30 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	3301      	adds	r3, #1
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	88fa      	ldrh	r2, [r7, #6]
 8000538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053a:	4413      	add	r3, r2
 800053c:	693a      	ldr	r2, [r7, #16]
 800053e:	429a      	cmp	r2, r3
 8000540:	dde0      	ble.n	8000504 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8000542:	88fa      	ldrh	r2, [r7, #6]
 8000544:	6a3b      	ldr	r3, [r7, #32]
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e018      	b.n	800057e <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	b298      	uxth	r0, r3
 8000550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000552:	b29a      	uxth	r2, r3
 8000554:	88bb      	ldrh	r3, [r7, #4]
 8000556:	4413      	add	r3, r2
 8000558:	b29b      	uxth	r3, r3
 800055a:	883a      	ldrh	r2, [r7, #0]
 800055c:	4619      	mov	r1, r3
 800055e:	f000 fbe7 	bl	8000d30 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	b298      	uxth	r0, r3
 8000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000568:	b29b      	uxth	r3, r3
 800056a:	88ba      	ldrh	r2, [r7, #4]
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	b29b      	uxth	r3, r3
 8000570:	883a      	ldrh	r2, [r7, #0]
 8000572:	4619      	mov	r1, r3
 8000574:	f000 fbdc 	bl	8000d30 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3301      	adds	r3, #1
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	88fa      	ldrh	r2, [r7, #6]
 8000580:	6a3b      	ldr	r3, [r7, #32]
 8000582:	4413      	add	r3, r2
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	429a      	cmp	r2, r3
 8000588:	dde0      	ble.n	800054c <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800058a:	6a3b      	ldr	r3, [r7, #32]
 800058c:	3301      	adds	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8000590:	697a      	ldr	r2, [r7, #20]
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	4413      	add	r3, r2
 8000596:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	3302      	adds	r3, #2
 800059c:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	005a      	lsls	r2, r3, #1
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	4413      	add	r3, r2
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	dd09      	ble.n	80005be <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80005aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ac:	3b01      	subs	r3, #1
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	4413      	add	r3, r2
 80005b6:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	3302      	adds	r3, #2
 80005bc:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80005be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005c0:	6a3b      	ldr	r3, [r7, #32]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	da99      	bge.n	80004fa <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80005c6:	bf00      	nop
 80005c8:	bf00      	nop
 80005ca:	372c      	adds	r7, #44	; 0x2c
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd90      	pop	{r4, r7, pc}

080005d0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	4604      	mov	r4, r0
 80005d8:	4608      	mov	r0, r1
 80005da:	4611      	mov	r1, r2
 80005dc:	461a      	mov	r2, r3
 80005de:	4623      	mov	r3, r4
 80005e0:	71fb      	strb	r3, [r7, #7]
 80005e2:	4603      	mov	r3, r0
 80005e4:	80bb      	strh	r3, [r7, #4]
 80005e6:	460b      	mov	r3, r1
 80005e8:	71bb      	strb	r3, [r7, #6]
 80005ea:	4613      	mov	r3, r2
 80005ec:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	2b1f      	cmp	r3, #31
 80005f6:	d902      	bls.n	80005fe <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	3b20      	subs	r3, #32
 80005fc:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80005fe:	2300      	movs	r3, #0
 8000600:	753b      	strb	r3, [r7, #20]
 8000602:	e012      	b.n	800062a <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 8000604:	7dfa      	ldrb	r2, [r7, #23]
 8000606:	7d38      	ldrb	r0, [r7, #20]
 8000608:	7d39      	ldrb	r1, [r7, #20]
 800060a:	4c3b      	ldr	r4, [pc, #236]	; (80006f8 <ILI9341_Draw_Char+0x128>)
 800060c:	4613      	mov	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	4413      	add	r3, r2
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	4423      	add	r3, r4
 8000616:	4403      	add	r3, r0
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	440b      	add	r3, r1
 8000620:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000624:	7d3b      	ldrb	r3, [r7, #20]
 8000626:	3301      	adds	r3, #1
 8000628:	753b      	strb	r3, [r7, #20]
 800062a:	7d3b      	ldrb	r3, [r7, #20]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d9e9      	bls.n	8000604 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	b299      	uxth	r1, r3
 8000634:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000636:	461a      	mov	r2, r3
 8000638:	0052      	lsls	r2, r2, #1
 800063a:	4413      	add	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	b29a      	uxth	r2, r3
 8000640:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	b29c      	uxth	r4, r3
 8000646:	88b8      	ldrh	r0, [r7, #4]
 8000648:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	4623      	mov	r3, r4
 800064e:	f000 fc37 	bl	8000ec0 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000652:	2300      	movs	r3, #0
 8000654:	757b      	strb	r3, [r7, #21]
 8000656:	e046      	b.n	80006e6 <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000658:	2300      	movs	r3, #0
 800065a:	75bb      	strb	r3, [r7, #22]
 800065c:	e03d      	b.n	80006da <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 800065e:	7d7b      	ldrb	r3, [r7, #21]
 8000660:	f107 0218 	add.w	r2, r7, #24
 8000664:	4413      	add	r3, r2
 8000666:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800066a:	461a      	mov	r2, r3
 800066c:	7dbb      	ldrb	r3, [r7, #22]
 800066e:	fa42 f303 	asr.w	r3, r2, r3
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	2b00      	cmp	r3, #0
 8000678:	d02c      	beq.n	80006d4 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 800067a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800067c:	2b01      	cmp	r3, #1
 800067e:	d10f      	bne.n	80006a0 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000680:	7d7b      	ldrb	r3, [r7, #21]
 8000682:	b29a      	uxth	r2, r3
 8000684:	88bb      	ldrh	r3, [r7, #4]
 8000686:	4413      	add	r3, r2
 8000688:	b298      	uxth	r0, r3
 800068a:	79bb      	ldrb	r3, [r7, #6]
 800068c:	b29a      	uxth	r2, r3
 800068e:	7dbb      	ldrb	r3, [r7, #22]
 8000690:	b29b      	uxth	r3, r3
 8000692:	4413      	add	r3, r2
 8000694:	b29b      	uxth	r3, r3
 8000696:	887a      	ldrh	r2, [r7, #2]
 8000698:	4619      	mov	r1, r3
 800069a:	f000 fb49 	bl	8000d30 <ILI9341_Draw_Pixel>
 800069e:	e019      	b.n	80006d4 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80006a0:	7d7b      	ldrb	r3, [r7, #21]
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80006a6:	fb12 f303 	smulbb	r3, r2, r3
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	88bb      	ldrh	r3, [r7, #4]
 80006ae:	4413      	add	r3, r2
 80006b0:	b298      	uxth	r0, r3
 80006b2:	79bb      	ldrb	r3, [r7, #6]
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	7dbb      	ldrb	r3, [r7, #22]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80006bc:	fb11 f303 	smulbb	r3, r1, r3
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	4413      	add	r3, r2
 80006c4:	b299      	uxth	r1, r3
 80006c6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80006c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80006ca:	887b      	ldrh	r3, [r7, #2]
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	4623      	mov	r3, r4
 80006d0:	f000 fbf6 	bl	8000ec0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80006d4:	7dbb      	ldrb	r3, [r7, #22]
 80006d6:	3301      	adds	r3, #1
 80006d8:	75bb      	strb	r3, [r7, #22]
 80006da:	7dbb      	ldrb	r3, [r7, #22]
 80006dc:	2b07      	cmp	r3, #7
 80006de:	d9be      	bls.n	800065e <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 80006e0:	7d7b      	ldrb	r3, [r7, #21]
 80006e2:	3301      	adds	r3, #1
 80006e4:	757b      	strb	r3, [r7, #21]
 80006e6:	7d7b      	ldrb	r3, [r7, #21]
 80006e8:	2b05      	cmp	r3, #5
 80006ea:	d9b5      	bls.n	8000658 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	371c      	adds	r7, #28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd90      	pop	{r4, r7, pc}
 80006f6:	bf00      	nop
 80006f8:	0800af10 	.word	0x0800af10

080006fc <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b087      	sub	sp, #28
 8000700:	af02      	add	r7, sp, #8
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	4608      	mov	r0, r1
 8000706:	4611      	mov	r1, r2
 8000708:	461a      	mov	r2, r3
 800070a:	4603      	mov	r3, r0
 800070c:	817b      	strh	r3, [r7, #10]
 800070e:	460b      	mov	r3, r1
 8000710:	727b      	strb	r3, [r7, #9]
 8000712:	4613      	mov	r3, r2
 8000714:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8000716:	e016      	b.n	8000746 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	60fa      	str	r2, [r7, #12]
 800071e:	7818      	ldrb	r0, [r3, #0]
 8000720:	88fc      	ldrh	r4, [r7, #6]
 8000722:	7a7a      	ldrb	r2, [r7, #9]
 8000724:	8979      	ldrh	r1, [r7, #10]
 8000726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000728:	9301      	str	r3, [sp, #4]
 800072a:	8c3b      	ldrh	r3, [r7, #32]
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	4623      	mov	r3, r4
 8000730:	f7ff ff4e 	bl	80005d0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000734:	8c3b      	ldrh	r3, [r7, #32]
 8000736:	461a      	mov	r2, r3
 8000738:	0052      	lsls	r2, r2, #1
 800073a:	4413      	add	r3, r2
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	b29a      	uxth	r2, r3
 8000740:	897b      	ldrh	r3, [r7, #10]
 8000742:	4413      	add	r3, r2
 8000744:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1e4      	bne.n	8000718 <ILI9341_Draw_Text+0x1c>
    }
}
 800074e:	bf00      	nop
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	bd90      	pop	{r4, r7, pc}

08000758 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800075c:	2200      	movs	r2, #0
 800075e:	2110      	movs	r1, #16
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <ILI9341_SPI_Init+0x14>)
 8000762:	f002 fb71 	bl	8002e48 <HAL_GPIO_WritePin>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000

08000770 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800077a:	1df9      	adds	r1, r7, #7
 800077c:	2301      	movs	r3, #1
 800077e:	2201      	movs	r2, #1
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <ILI9341_SPI_Send+0x20>)
 8000782:	f005 fd94 	bl	80062ae <HAL_SPI_Transmit>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000150 	.word	0x20000150

08000794 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2110      	movs	r1, #16
 80007a2:	480a      	ldr	r0, [pc, #40]	; (80007cc <ILI9341_Write_Command+0x38>)
 80007a4:	f002 fb50 	bl	8002e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80007a8:	2200      	movs	r2, #0
 80007aa:	2140      	movs	r1, #64	; 0x40
 80007ac:	4807      	ldr	r0, [pc, #28]	; (80007cc <ILI9341_Write_Command+0x38>)
 80007ae:	f002 fb4b 	bl	8002e48 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ffdb 	bl	8000770 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80007ba:	2201      	movs	r2, #1
 80007bc:	2110      	movs	r1, #16
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <ILI9341_Write_Command+0x38>)
 80007c0:	f002 fb42 	bl	8002e48 <HAL_GPIO_WritePin>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000

080007d0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80007da:	2201      	movs	r2, #1
 80007dc:	2140      	movs	r1, #64	; 0x40
 80007de:	480a      	ldr	r0, [pc, #40]	; (8000808 <ILI9341_Write_Data+0x38>)
 80007e0:	f002 fb32 	bl	8002e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2110      	movs	r1, #16
 80007e8:	4807      	ldr	r0, [pc, #28]	; (8000808 <ILI9341_Write_Data+0x38>)
 80007ea:	f002 fb2d 	bl	8002e48 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ffbd 	bl	8000770 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2110      	movs	r1, #16
 80007fa:	4803      	ldr	r0, [pc, #12]	; (8000808 <ILI9341_Write_Data+0x38>)
 80007fc:	f002 fb24 	bl	8002e48 <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000

0800080c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4604      	mov	r4, r0
 8000814:	4608      	mov	r0, r1
 8000816:	4611      	mov	r1, r2
 8000818:	461a      	mov	r2, r3
 800081a:	4623      	mov	r3, r4
 800081c:	80fb      	strh	r3, [r7, #6]
 800081e:	4603      	mov	r3, r0
 8000820:	80bb      	strh	r3, [r7, #4]
 8000822:	460b      	mov	r3, r1
 8000824:	807b      	strh	r3, [r7, #2]
 8000826:	4613      	mov	r3, r2
 8000828:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800082a:	202a      	movs	r0, #42	; 0x2a
 800082c:	f7ff ffb2 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	0a1b      	lsrs	r3, r3, #8
 8000834:	b29b      	uxth	r3, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ffc9 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ffc4 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	0a1b      	lsrs	r3, r3, #8
 800084c:	b29b      	uxth	r3, r3
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ffbd 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000856:	887b      	ldrh	r3, [r7, #2]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ffb8 	bl	80007d0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000860:	202b      	movs	r0, #43	; 0x2b
 8000862:	f7ff ff97 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000866:	88bb      	ldrh	r3, [r7, #4]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	b29b      	uxth	r3, r3
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ffae 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000874:	88bb      	ldrh	r3, [r7, #4]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ffa9 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800087e:	883b      	ldrh	r3, [r7, #0]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	b29b      	uxth	r3, r3
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ffa2 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800088c:	883b      	ldrh	r3, [r7, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff9d 	bl	80007d0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000896:	202c      	movs	r0, #44	; 0x2c
 8000898:	f7ff ff7c 	bl	8000794 <ILI9341_Write_Command>
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd90      	pop	{r4, r7, pc}

080008a4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2120      	movs	r1, #32
 80008ac:	480a      	ldr	r0, [pc, #40]	; (80008d8 <ILI9341_Reset+0x34>)
 80008ae:	f002 facb 	bl	8002e48 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80008b2:	20c8      	movs	r0, #200	; 0xc8
 80008b4:	f001 ffde 	bl	8002874 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2110      	movs	r1, #16
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <ILI9341_Reset+0x34>)
 80008be:	f002 fac3 	bl	8002e48 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80008c2:	20c8      	movs	r0, #200	; 0xc8
 80008c4:	f001 ffd6 	bl	8002874 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80008c8:	2201      	movs	r2, #1
 80008ca:	2120      	movs	r1, #32
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <ILI9341_Reset+0x34>)
 80008ce:	f002 fabb 	bl	8002e48 <HAL_GPIO_WritePin>
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80008ea:	2036      	movs	r0, #54	; 0x36
 80008ec:	f7ff ff52 	bl	8000794 <ILI9341_Write_Command>
HAL_Delay(1);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f001 ffbf 	bl	8002874 <HAL_Delay>
	
switch(screen_rotation) 
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d837      	bhi.n	800096c <ILI9341_Set_Rotation+0x90>
 80008fc:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <ILI9341_Set_Rotation+0x28>)
 80008fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000902:	bf00      	nop
 8000904:	08000915 	.word	0x08000915
 8000908:	0800092b 	.word	0x0800092b
 800090c:	08000941 	.word	0x08000941
 8000910:	08000957 	.word	0x08000957
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000914:	2048      	movs	r0, #72	; 0x48
 8000916:	f7ff ff5b 	bl	80007d0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <ILI9341_Set_Rotation+0x9c>)
 800091c:	22f0      	movs	r2, #240	; 0xf0
 800091e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <ILI9341_Set_Rotation+0xa0>)
 8000922:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000926:	801a      	strh	r2, [r3, #0]
			break;
 8000928:	e021      	b.n	800096e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800092a:	2028      	movs	r0, #40	; 0x28
 800092c:	f7ff ff50 	bl	80007d0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <ILI9341_Set_Rotation+0x9c>)
 8000932:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000936:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <ILI9341_Set_Rotation+0xa0>)
 800093a:	22f0      	movs	r2, #240	; 0xf0
 800093c:	801a      	strh	r2, [r3, #0]
			break;
 800093e:	e016      	b.n	800096e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000940:	2088      	movs	r0, #136	; 0x88
 8000942:	f7ff ff45 	bl	80007d0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <ILI9341_Set_Rotation+0x9c>)
 8000948:	22f0      	movs	r2, #240	; 0xf0
 800094a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <ILI9341_Set_Rotation+0xa0>)
 800094e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000952:	801a      	strh	r2, [r3, #0]
			break;
 8000954:	e00b      	b.n	800096e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000956:	20e8      	movs	r0, #232	; 0xe8
 8000958:	f7ff ff3a 	bl	80007d0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <ILI9341_Set_Rotation+0x9c>)
 800095e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000962:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <ILI9341_Set_Rotation+0xa0>)
 8000966:	22f0      	movs	r2, #240	; 0xf0
 8000968:	801a      	strh	r2, [r3, #0]
			break;
 800096a:	e000      	b.n	800096e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800096c:	bf00      	nop
	}
}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000002 	.word	0x20000002
 800097c:	20000000 	.word	0x20000000

08000980 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2120      	movs	r1, #32
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <ILI9341_Enable+0x14>)
 800098a:	f002 fa5d 	bl	8002e48 <HAL_GPIO_WritePin>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800099c:	f7ff fff0 	bl	8000980 <ILI9341_Enable>
ILI9341_SPI_Init();
 80009a0:	f7ff feda 	bl	8000758 <ILI9341_SPI_Init>
ILI9341_Reset();
 80009a4:	f7ff ff7e 	bl	80008a4 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff fef3 	bl	8000794 <ILI9341_Write_Command>
HAL_Delay(1000);
 80009ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b2:	f001 ff5f 	bl	8002874 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80009b6:	20cb      	movs	r0, #203	; 0xcb
 80009b8:	f7ff feec 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80009bc:	2039      	movs	r0, #57	; 0x39
 80009be:	f7ff ff07 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80009c2:	202c      	movs	r0, #44	; 0x2c
 80009c4:	f7ff ff04 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ff01 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80009ce:	2034      	movs	r0, #52	; 0x34
 80009d0:	f7ff fefe 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80009d4:	2002      	movs	r0, #2
 80009d6:	f7ff fefb 	bl	80007d0 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80009da:	20cf      	movs	r0, #207	; 0xcf
 80009dc:	f7ff feda 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff fef5 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80009e6:	20c1      	movs	r0, #193	; 0xc1
 80009e8:	f7ff fef2 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80009ec:	2030      	movs	r0, #48	; 0x30
 80009ee:	f7ff feef 	bl	80007d0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80009f2:	20e8      	movs	r0, #232	; 0xe8
 80009f4:	f7ff fece 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80009f8:	2085      	movs	r0, #133	; 0x85
 80009fa:	f7ff fee9 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff fee6 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000a04:	2078      	movs	r0, #120	; 0x78
 8000a06:	f7ff fee3 	bl	80007d0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000a0a:	20ea      	movs	r0, #234	; 0xea
 8000a0c:	f7ff fec2 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fedd 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff feda 	bl	80007d0 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000a1c:	20ed      	movs	r0, #237	; 0xed
 8000a1e:	f7ff feb9 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000a22:	2064      	movs	r0, #100	; 0x64
 8000a24:	f7ff fed4 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f7ff fed1 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000a2e:	2012      	movs	r0, #18
 8000a30:	f7ff fece 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000a34:	2081      	movs	r0, #129	; 0x81
 8000a36:	f7ff fecb 	bl	80007d0 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000a3a:	20f7      	movs	r0, #247	; 0xf7
 8000a3c:	f7ff feaa 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000a40:	2020      	movs	r0, #32
 8000a42:	f7ff fec5 	bl	80007d0 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000a46:	20c0      	movs	r0, #192	; 0xc0
 8000a48:	f7ff fea4 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000a4c:	2023      	movs	r0, #35	; 0x23
 8000a4e:	f7ff febf 	bl	80007d0 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000a52:	20c1      	movs	r0, #193	; 0xc1
 8000a54:	f7ff fe9e 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000a58:	2010      	movs	r0, #16
 8000a5a:	f7ff feb9 	bl	80007d0 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000a5e:	20c5      	movs	r0, #197	; 0xc5
 8000a60:	f7ff fe98 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000a64:	203e      	movs	r0, #62	; 0x3e
 8000a66:	f7ff feb3 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000a6a:	2028      	movs	r0, #40	; 0x28
 8000a6c:	f7ff feb0 	bl	80007d0 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000a70:	20c7      	movs	r0, #199	; 0xc7
 8000a72:	f7ff fe8f 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000a76:	2086      	movs	r0, #134	; 0x86
 8000a78:	f7ff feaa 	bl	80007d0 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000a7c:	2036      	movs	r0, #54	; 0x36
 8000a7e:	f7ff fe89 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000a82:	2048      	movs	r0, #72	; 0x48
 8000a84:	f7ff fea4 	bl	80007d0 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000a88:	203a      	movs	r0, #58	; 0x3a
 8000a8a:	f7ff fe83 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000a8e:	2055      	movs	r0, #85	; 0x55
 8000a90:	f7ff fe9e 	bl	80007d0 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000a94:	20b1      	movs	r0, #177	; 0xb1
 8000a96:	f7ff fe7d 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fe98 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000aa0:	2018      	movs	r0, #24
 8000aa2:	f7ff fe95 	bl	80007d0 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000aa6:	20b6      	movs	r0, #182	; 0xb6
 8000aa8:	f7ff fe74 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000aac:	2008      	movs	r0, #8
 8000aae:	f7ff fe8f 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000ab2:	2082      	movs	r0, #130	; 0x82
 8000ab4:	f7ff fe8c 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000ab8:	2027      	movs	r0, #39	; 0x27
 8000aba:	f7ff fe89 	bl	80007d0 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000abe:	20f2      	movs	r0, #242	; 0xf2
 8000ac0:	f7ff fe68 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff fe83 	bl	80007d0 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000aca:	2026      	movs	r0, #38	; 0x26
 8000acc:	f7ff fe62 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff fe7d 	bl	80007d0 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000ad6:	20e0      	movs	r0, #224	; 0xe0
 8000ad8:	f7ff fe5c 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000adc:	200f      	movs	r0, #15
 8000ade:	f7ff fe77 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000ae2:	2031      	movs	r0, #49	; 0x31
 8000ae4:	f7ff fe74 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000ae8:	202b      	movs	r0, #43	; 0x2b
 8000aea:	f7ff fe71 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000aee:	200c      	movs	r0, #12
 8000af0:	f7ff fe6e 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000af4:	200e      	movs	r0, #14
 8000af6:	f7ff fe6b 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000afa:	2008      	movs	r0, #8
 8000afc:	f7ff fe68 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000b00:	204e      	movs	r0, #78	; 0x4e
 8000b02:	f7ff fe65 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000b06:	20f1      	movs	r0, #241	; 0xf1
 8000b08:	f7ff fe62 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000b0c:	2037      	movs	r0, #55	; 0x37
 8000b0e:	f7ff fe5f 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000b12:	2007      	movs	r0, #7
 8000b14:	f7ff fe5c 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000b18:	2010      	movs	r0, #16
 8000b1a:	f7ff fe59 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000b1e:	2003      	movs	r0, #3
 8000b20:	f7ff fe56 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000b24:	200e      	movs	r0, #14
 8000b26:	f7ff fe53 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000b2a:	2009      	movs	r0, #9
 8000b2c:	f7ff fe50 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000b30:	2000      	movs	r0, #0
 8000b32:	f7ff fe4d 	bl	80007d0 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000b36:	20e1      	movs	r0, #225	; 0xe1
 8000b38:	f7ff fe2c 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff fe47 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff fe44 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000b48:	2014      	movs	r0, #20
 8000b4a:	f7ff fe41 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f7ff fe3e 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000b54:	2011      	movs	r0, #17
 8000b56:	f7ff fe3b 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000b5a:	2007      	movs	r0, #7
 8000b5c:	f7ff fe38 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000b60:	2031      	movs	r0, #49	; 0x31
 8000b62:	f7ff fe35 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000b66:	20c1      	movs	r0, #193	; 0xc1
 8000b68:	f7ff fe32 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000b6c:	2048      	movs	r0, #72	; 0x48
 8000b6e:	f7ff fe2f 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000b72:	2008      	movs	r0, #8
 8000b74:	f7ff fe2c 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000b78:	200f      	movs	r0, #15
 8000b7a:	f7ff fe29 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000b7e:	200c      	movs	r0, #12
 8000b80:	f7ff fe26 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000b84:	2031      	movs	r0, #49	; 0x31
 8000b86:	f7ff fe23 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000b8a:	2036      	movs	r0, #54	; 0x36
 8000b8c:	f7ff fe20 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000b90:	200f      	movs	r0, #15
 8000b92:	f7ff fe1d 	bl	80007d0 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000b96:	2011      	movs	r0, #17
 8000b98:	f7ff fdfc 	bl	8000794 <ILI9341_Write_Command>
HAL_Delay(120);
 8000b9c:	2078      	movs	r0, #120	; 0x78
 8000b9e:	f001 fe69 	bl	8002874 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000ba2:	2029      	movs	r0, #41	; 0x29
 8000ba4:	f7ff fdf6 	bl	8000794 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f7ff fe97 	bl	80008dc <ILI9341_Set_Rotation>

HAL_Delay(10);
 8000bae:	200a      	movs	r0, #10
 8000bb0:	f001 fe60 	bl	8002874 <HAL_Delay>
//
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	80fb      	strh	r3, [r7, #6]
 8000bc4:	466b      	mov	r3, sp
 8000bc6:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bd4:	d202      	bcs.n	8000bdc <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bda:	e002      	b.n	8000be2 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000bdc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000be2:	2201      	movs	r2, #1
 8000be4:	2140      	movs	r1, #64	; 0x40
 8000be6:	483d      	ldr	r0, [pc, #244]	; (8000cdc <ILI9341_Draw_Colour_Burst+0x124>)
 8000be8:	f002 f92e 	bl	8002e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2110      	movs	r1, #16
 8000bf0:	483a      	ldr	r0, [pc, #232]	; (8000cdc <ILI9341_Draw_Colour_Burst+0x124>)
 8000bf2:	f002 f929 	bl	8002e48 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000c00:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000c02:	4623      	mov	r3, r4
 8000c04:	3b01      	subs	r3, #1
 8000c06:	61fb      	str	r3, [r7, #28]
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f04f 0100 	mov.w	r1, #0
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	f04f 0300 	mov.w	r3, #0
 8000c16:	00cb      	lsls	r3, r1, #3
 8000c18:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c1c:	00c2      	lsls	r2, r0, #3
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f04f 0100 	mov.w	r1, #0
 8000c24:	f04f 0200 	mov.w	r2, #0
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	00cb      	lsls	r3, r1, #3
 8000c2e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c32:	00c2      	lsls	r2, r0, #3
 8000c34:	1de3      	adds	r3, r4, #7
 8000c36:	08db      	lsrs	r3, r3, #3
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	ebad 0d03 	sub.w	sp, sp, r3
 8000c3e:	466b      	mov	r3, sp
 8000c40:	3300      	adds	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c48:	e00e      	b.n	8000c68 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c4e:	4413      	add	r3, r2
 8000c50:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c54:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c58:	3301      	adds	r3, #1
 8000c5a:	88fa      	ldrh	r2, [r7, #6]
 8000c5c:	b2d1      	uxtb	r1, r2
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c64:	3302      	adds	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d3ec      	bcc.n	8000c4a <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c84:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c8a:	fb01 f202 	mul.w	r2, r1, r2
 8000c8e:	1a9b      	subs	r3, r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d010      	beq.n	8000cba <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c9c:	e009      	b.n	8000cb2 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000c9e:	69b9      	ldr	r1, [r7, #24]
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	230a      	movs	r3, #10
 8000ca6:	480e      	ldr	r0, [pc, #56]	; (8000ce0 <ILI9341_Draw_Colour_Burst+0x128>)
 8000ca8:	f005 fb01 	bl	80062ae <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cae:	3301      	adds	r3, #1
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d3f1      	bcc.n	8000c9e <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000cba:	69b9      	ldr	r1, [r7, #24]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	230a      	movs	r3, #10
 8000cc2:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <ILI9341_Draw_Colour_Burst+0x128>)
 8000cc4:	f005 faf3 	bl	80062ae <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2110      	movs	r1, #16
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <ILI9341_Draw_Colour_Burst+0x124>)
 8000cce:	f002 f8bb 	bl	8002e48 <HAL_GPIO_WritePin>
 8000cd2:	46ad      	mov	sp, r5
}
 8000cd4:	bf00      	nop
 8000cd6:	3730      	adds	r7, #48	; 0x30
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bdb0      	pop	{r4, r5, r7, pc}
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	20000150 	.word	0x20000150

08000ce4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <ILI9341_Fill_Screen+0x44>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <ILI9341_Fill_Screen+0x48>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff fd85 	bl	800080c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <ILI9341_Fill_Screen+0x44>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <ILI9341_Fill_Screen+0x48>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	fb03 f302 	mul.w	r3, r3, r2
 8000d14:	461a      	mov	r2, r3
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff4c 	bl	8000bb8 <ILI9341_Draw_Colour_Burst>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000002 	.word	0x20000002
 8000d2c:	20000000 	.word	0x20000000

08000d30 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	80bb      	strh	r3, [r7, #4]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000d42:	4b5b      	ldr	r3, [pc, #364]	; (8000eb0 <ILI9341_Draw_Pixel+0x180>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	88fa      	ldrh	r2, [r7, #6]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	f080 80ac 	bcs.w	8000ea8 <ILI9341_Draw_Pixel+0x178>
 8000d50:	4b58      	ldr	r3, [pc, #352]	; (8000eb4 <ILI9341_Draw_Pixel+0x184>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	88ba      	ldrh	r2, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	f080 80a5 	bcs.w	8000ea8 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2140      	movs	r1, #64	; 0x40
 8000d62:	4855      	ldr	r0, [pc, #340]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000d64:	f002 f870 	bl	8002e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	4852      	ldr	r0, [pc, #328]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000d6e:	f002 f86b 	bl	8002e48 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000d72:	202a      	movs	r0, #42	; 0x2a
 8000d74:	f7ff fcfc 	bl	8000770 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2140      	movs	r1, #64	; 0x40
 8000d7c:	484e      	ldr	r0, [pc, #312]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000d7e:	f002 f863 	bl	8002e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000d82:	2201      	movs	r2, #1
 8000d84:	2110      	movs	r1, #16
 8000d86:	484c      	ldr	r0, [pc, #304]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000d88:	f002 f85e 	bl	8002e48 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4849      	ldr	r0, [pc, #292]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000d92:	f002 f859 	bl	8002e48 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	753b      	strb	r3, [r7, #20]
 8000da0:	88fb      	ldrh	r3, [r7, #6]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	757b      	strb	r3, [r7, #21]
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	3301      	adds	r3, #1
 8000daa:	121b      	asrs	r3, r3, #8
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	75bb      	strb	r3, [r7, #22]
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	3301      	adds	r3, #1
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000dba:	f107 0114 	add.w	r1, r7, #20
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	483e      	ldr	r0, [pc, #248]	; (8000ebc <ILI9341_Draw_Pixel+0x18c>)
 8000dc4:	f005 fa73 	bl	80062ae <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2110      	movs	r1, #16
 8000dcc:	483a      	ldr	r0, [pc, #232]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000dce:	f002 f83b 	bl	8002e48 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2140      	movs	r1, #64	; 0x40
 8000dd6:	4838      	ldr	r0, [pc, #224]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000dd8:	f002 f836 	bl	8002e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2110      	movs	r1, #16
 8000de0:	4835      	ldr	r0, [pc, #212]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000de2:	f002 f831 	bl	8002e48 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000de6:	202b      	movs	r0, #43	; 0x2b
 8000de8:	f7ff fcc2 	bl	8000770 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000dec:	2201      	movs	r2, #1
 8000dee:	2140      	movs	r1, #64	; 0x40
 8000df0:	4831      	ldr	r0, [pc, #196]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000df2:	f002 f829 	bl	8002e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000df6:	2201      	movs	r2, #1
 8000df8:	2110      	movs	r1, #16
 8000dfa:	482f      	ldr	r0, [pc, #188]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000dfc:	f002 f824 	bl	8002e48 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2110      	movs	r1, #16
 8000e04:	482c      	ldr	r0, [pc, #176]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e06:	f002 f81f 	bl	8002e48 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000e0a:	88bb      	ldrh	r3, [r7, #4]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	743b      	strb	r3, [r7, #16]
 8000e14:	88bb      	ldrh	r3, [r7, #4]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	747b      	strb	r3, [r7, #17]
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	121b      	asrs	r3, r3, #8
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	74bb      	strb	r3, [r7, #18]
 8000e24:	88bb      	ldrh	r3, [r7, #4]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	3301      	adds	r3, #1
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000e2e:	f107 0110 	add.w	r1, r7, #16
 8000e32:	2301      	movs	r3, #1
 8000e34:	2204      	movs	r2, #4
 8000e36:	4821      	ldr	r0, [pc, #132]	; (8000ebc <ILI9341_Draw_Pixel+0x18c>)
 8000e38:	f005 fa39 	bl	80062ae <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2110      	movs	r1, #16
 8000e40:	481d      	ldr	r0, [pc, #116]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e42:	f002 f801 	bl	8002e48 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000e46:	2200      	movs	r2, #0
 8000e48:	2140      	movs	r1, #64	; 0x40
 8000e4a:	481b      	ldr	r0, [pc, #108]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e4c:	f001 fffc 	bl	8002e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000e50:	2200      	movs	r2, #0
 8000e52:	2110      	movs	r1, #16
 8000e54:	4818      	ldr	r0, [pc, #96]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e56:	f001 fff7 	bl	8002e48 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000e5a:	202c      	movs	r0, #44	; 0x2c
 8000e5c:	f7ff fc88 	bl	8000770 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000e60:	2201      	movs	r2, #1
 8000e62:	2140      	movs	r1, #64	; 0x40
 8000e64:	4814      	ldr	r0, [pc, #80]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e66:	f001 ffef 	bl	8002e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	4812      	ldr	r0, [pc, #72]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e70:	f001 ffea 	bl	8002e48 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2110      	movs	r1, #16
 8000e78:	480f      	ldr	r0, [pc, #60]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e7a:	f001 ffe5 	bl	8002e48 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	733b      	strb	r3, [r7, #12]
 8000e88:	887b      	ldrh	r3, [r7, #2]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000e8e:	f107 010c 	add.w	r1, r7, #12
 8000e92:	2301      	movs	r3, #1
 8000e94:	2202      	movs	r2, #2
 8000e96:	4809      	ldr	r0, [pc, #36]	; (8000ebc <ILI9341_Draw_Pixel+0x18c>)
 8000e98:	f005 fa09 	bl	80062ae <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000ea2:	f001 ffd1 	bl	8002e48 <HAL_GPIO_WritePin>
 8000ea6:	e000      	b.n	8000eaa <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000ea8:	bf00      	nop
	
}
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000002 	.word	0x20000002
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	20000150 	.word	0x20000150

08000ec0 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	4608      	mov	r0, r1
 8000eca:	4611      	mov	r1, r2
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4623      	mov	r3, r4
 8000ed0:	80fb      	strh	r3, [r7, #6]
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80bb      	strh	r3, [r7, #4]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	807b      	strh	r3, [r7, #2]
 8000eda:	4613      	mov	r3, r2
 8000edc:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000ede:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <ILI9341_Draw_Rectangle+0xb0>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	88fa      	ldrh	r2, [r7, #6]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d23d      	bcs.n	8000f66 <ILI9341_Draw_Rectangle+0xa6>
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <ILI9341_Draw_Rectangle+0xb4>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	88ba      	ldrh	r2, [r7, #4]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d237      	bcs.n	8000f66 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8000ef6:	88fa      	ldrh	r2, [r7, #6]
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a1c      	ldr	r2, [pc, #112]	; (8000f70 <ILI9341_Draw_Rectangle+0xb0>)
 8000efe:	8812      	ldrh	r2, [r2, #0]
 8000f00:	b292      	uxth	r2, r2
 8000f02:	4293      	cmp	r3, r2
 8000f04:	dd05      	ble.n	8000f12 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <ILI9341_Draw_Rectangle+0xb0>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8000f12:	88ba      	ldrh	r2, [r7, #4]
 8000f14:	883b      	ldrh	r3, [r7, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <ILI9341_Draw_Rectangle+0xb4>)
 8000f1a:	8812      	ldrh	r2, [r2, #0]
 8000f1c:	b292      	uxth	r2, r2
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	dd05      	ble.n	8000f2e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <ILI9341_Draw_Rectangle+0xb4>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	88bb      	ldrh	r3, [r7, #4]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8000f2e:	88fa      	ldrh	r2, [r7, #6]
 8000f30:	887b      	ldrh	r3, [r7, #2]
 8000f32:	4413      	add	r3, r2
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	3b01      	subs	r3, #1
 8000f38:	b29c      	uxth	r4, r3
 8000f3a:	88ba      	ldrh	r2, [r7, #4]
 8000f3c:	883b      	ldrh	r3, [r7, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	3b01      	subs	r3, #1
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	88b9      	ldrh	r1, [r7, #4]
 8000f48:	88f8      	ldrh	r0, [r7, #6]
 8000f4a:	4622      	mov	r2, r4
 8000f4c:	f7ff fc5e 	bl	800080c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8000f50:	883b      	ldrh	r3, [r7, #0]
 8000f52:	887a      	ldrh	r2, [r7, #2]
 8000f54:	fb02 f303 	mul.w	r3, r2, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	8b3b      	ldrh	r3, [r7, #24]
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fe2a 	bl	8000bb8 <ILI9341_Draw_Colour_Burst>
 8000f64:	e000      	b.n	8000f68 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000f66:	bf00      	nop
}
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd90      	pop	{r4, r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000002 	.word	0x20000002
 8000f74:	20000000 	.word	0x20000000

08000f78 <menu>:


bool flagPressed = false;						// flag presed key

void menu()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
//	bool flagPressed = false;						// flag presed key
	//Menu_Navigate(&Menu_1);			// <<<<<<< What ti i????????????????????????
	Menu_SetGenericWriteCallback(Generic_Write);
 8000f7e:	482e      	ldr	r0, [pc, #184]	; (8001038 <menu+0xc0>)
 8000f80:	f000 f9f0 	bl	8001364 <Menu_SetGenericWriteCallback>
	Menu_Navigate(&Menu_1);
 8000f84:	482d      	ldr	r0, [pc, #180]	; (800103c <menu+0xc4>)
 8000f86:	f000 f9bf 	bl	8001308 <Menu_Navigate>
	while (1)
	  {
	   uint8_t pressed_key = getPressKey();
 8000f8a:	f000 f8f9 	bl	8001180 <getPressKey>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]

	   if (pressed_key != BUTTON_NOTHING && !flagPressed)
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2bff      	cmp	r3, #255	; 0xff
 8000f96:	d042      	beq.n	800101e <menu+0xa6>
 8000f98:	4b29      	ldr	r3, [pc, #164]	; (8001040 <menu+0xc8>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	f083 0301 	eor.w	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d03b      	beq.n	800101e <menu+0xa6>
	   {
//		    Menu_Navigate(&Menu_1);			// <<<<<<< What ti i????????????????????????
			//Menu_SetGenericWriteCallback(Generic_Write);	// print menu
			flagPressed = true;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <menu+0xc8>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
			pressed_key = getPressKey();
 8000fac:	f000 f8e8 	bl	8001180 <getPressKey>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	71fb      	strb	r3, [r7, #7]
			switch(pressed_key)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d82f      	bhi.n	800101a <menu+0xa2>
 8000fba:	a201      	add	r2, pc, #4	; (adr r2, 8000fc0 <menu+0x48>)
 8000fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc0:	08000fd5 	.word	0x08000fd5
 8000fc4:	08000fe5 	.word	0x08000fe5
 8000fc8:	08000ff5 	.word	0x08000ff5
 8000fcc:	08001005 	.word	0x08001005
 8000fd0:	08001015 	.word	0x08001015
			{
			 case BUTTON_LEFT:
			  Menu_Navigate(MENU_PARENT);
 8000fd4:	f000 f98c 	bl	80012f0 <Menu_GetCurrentMenu>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 f993 	bl	8001308 <Menu_Navigate>
			  break;
 8000fe2:	e01b      	b.n	800101c <menu+0xa4>
			 case BUTTON_UP:
			  Menu_Navigate(MENU_PREVIOUS);
 8000fe4:	f000 f984 	bl	80012f0 <Menu_GetCurrentMenu>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f98b 	bl	8001308 <Menu_Navigate>
			  break;
 8000ff2:	e013      	b.n	800101c <menu+0xa4>
			 case BUTTON_DOWN:
			  Menu_Navigate(MENU_NEXT);
 8000ff4:	f000 f97c 	bl	80012f0 <Menu_GetCurrentMenu>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f983 	bl	8001308 <Menu_Navigate>
			  break;
 8001002:	e00b      	b.n	800101c <menu+0xa4>
			 case BUTTON_RIGHT:
			  Menu_Navigate(MENU_CHILD);
 8001004:	f000 f974 	bl	80012f0 <Menu_GetCurrentMenu>
 8001008:	4603      	mov	r3, r0
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f97b 	bl	8001308 <Menu_Navigate>
			  break;
 8001012:	e003      	b.n	800101c <menu+0xa4>
			 case BUTTON_SELECT:
			  Menu_EnterCurrentItem();
 8001014:	f000 f9ba 	bl	800138c <Menu_EnterCurrentItem>
			  break;
 8001018:	e000      	b.n	800101c <menu+0xa4>
			 default:
			  break;
 800101a:	bf00      	nop
			switch(pressed_key)
 800101c:	e00b      	b.n	8001036 <menu+0xbe>
			}
	   }
	   else if (getPressKey() == BUTTON_NOTHING && flagPressed)
 800101e:	f000 f8af 	bl	8001180 <getPressKey>
 8001022:	4603      	mov	r3, r0
 8001024:	2bff      	cmp	r3, #255	; 0xff
 8001026:	d1b0      	bne.n	8000f8a <menu+0x12>
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <menu+0xc8>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0ac      	beq.n	8000f8a <menu+0x12>
	   {
		   flagPressed = false;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <menu+0xc8>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
	  {
 8001036:	e7a8      	b.n	8000f8a <menu+0x12>
 8001038:	080012a9 	.word	0x080012a9
 800103c:	0800b168 	.word	0x0800b168
 8001040:	200000bc 	.word	0x200000bc

08001044 <RED_LED_ON>:

	  }
}
// -----------------------------------------------------------------------
void RED_LED_ON(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800104e:	4802      	ldr	r0, [pc, #8]	; (8001058 <RED_LED_ON+0x14>)
 8001050:	f001 fefa 	bl	8002e48 <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40020c00 	.word	0x40020c00

0800105c <RED_LED_OFF>:
// -----------------------------------------------------------------------
void RED_LED_OFF(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001066:	4802      	ldr	r0, [pc, #8]	; (8001070 <RED_LED_OFF+0x14>)
 8001068:	f001 feee 	bl	8002e48 <HAL_GPIO_WritePin>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40020c00 	.word	0x40020c00

08001074 <Level1Item3_Enter>:
// -----------------------------------------------------------------------
static void Level1Item3_Enter(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af02      	add	r7, sp, #8
 bool flagPressed = false; 			// Прапорець натиснутої кнопки
 800107a:	2300      	movs	r3, #0
 800107c:	71fb      	strb	r3, [r7, #7]

 //lcdClrScr();   // Очищаємо екран дисплею
 ILI9341_Draw_Text( "                          ", 10, 10, WHITE, 2, BLACK);
 800107e:	2300      	movs	r3, #0
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	2302      	movs	r3, #2
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800108a:	220a      	movs	r2, #10
 800108c:	210a      	movs	r1, #10
 800108e:	4835      	ldr	r0, [pc, #212]	; (8001164 <Level1Item3_Enter+0xf0>)
 8001090:	f7ff fb34 	bl	80006fc <ILI9341_Draw_Text>

 //lcdGoto(LCD_1st_LINE,0); // Друкуємо в першому рядку
 //lcdPuts("  BackLight is"); // Назву параметру
 ILI9341_Draw_Text( "Red LED is:", 10, 10, WHITE, 2, BLACK);
 8001094:	2300      	movs	r3, #0
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	2302      	movs	r3, #2
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a0:	220a      	movs	r2, #10
 80010a2:	210a      	movs	r1, #10
 80010a4:	4830      	ldr	r0, [pc, #192]	; (8001168 <Level1Item3_Enter+0xf4>)
 80010a6:	f7ff fb29 	bl	80006fc <ILI9341_Draw_Text>

// Поки не натиснути кнопка "ліворуч" тут виконує функцію як "вихід"
 while(getPressKey() != BUTTON_LEFT)
 80010aa:	e044      	b.n	8001136 <Level1Item3_Enter+0xc2>
 {

	 // Перевіримо в якому стані ніжка мікроконтролера куди під'єднано підсвічування дисплею
	 if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14))
 80010ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b0:	482e      	ldr	r0, [pc, #184]	; (800116c <Level1Item3_Enter+0xf8>)
 80010b2:	f001 feb1 	bl	8002e18 <HAL_GPIO_ReadPin>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00b      	beq.n	80010d4 <Level1Item3_Enter+0x60>
	 {
//		 lcdGoto(LCD_2nd_LINE,0); // В другому рядку друкуємо стан параметру
//		 lcdPuts("\tON ");   // Підсвічування увімкнено
		 ILI9341_Draw_Text( "ON ", 150, 10, WHITE, 2, BLACK);
 80010bc:	2300      	movs	r3, #0
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	2302      	movs	r3, #2
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c8:	220a      	movs	r2, #10
 80010ca:	2196      	movs	r1, #150	; 0x96
 80010cc:	4828      	ldr	r0, [pc, #160]	; (8001170 <Level1Item3_Enter+0xfc>)
 80010ce:	f7ff fb15 	bl	80006fc <ILI9341_Draw_Text>
 80010d2:	e00a      	b.n	80010ea <Level1Item3_Enter+0x76>
	 } else
	 {
//		 lcdGoto(LCD_2nd_LINE,0); // В інакшому разі
//		 lcdPuts("\tOFF");   // Підсвічування вимкнено
		 ILI9341_Draw_Text( "OFF", 150, 10, WHITE, 2, BLACK);
 80010d4:	2300      	movs	r3, #0
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	2302      	movs	r3, #2
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e0:	220a      	movs	r2, #10
 80010e2:	2196      	movs	r1, #150	; 0x96
 80010e4:	4823      	ldr	r0, [pc, #140]	; (8001174 <Level1Item3_Enter+0x100>)
 80010e6:	f7ff fb09 	bl	80006fc <ILI9341_Draw_Text>

	 }
// Скануємо тільки кнопки "вгору" і "вниз"
  if(getPressKey() != BUTTON_NOTHING && !flagPressed)              //<<<<<<<<<<<<<<<<<<<<<< TEN
 80010ea:	f000 f849 	bl	8001180 <getPressKey>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2bff      	cmp	r3, #255	; 0xff
 80010f2:	d016      	beq.n	8001122 <Level1Item3_Enter+0xae>
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f083 0301 	eor.w	r3, r3, #1
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d010      	beq.n	8001122 <Level1Item3_Enter+0xae>
  {
	  flagPressed = true; // Коли якусь кнопку натиснули
 8001100:	2301      	movs	r3, #1
 8001102:	71fb      	strb	r3, [r7, #7]

	  switch(getPressKey())  // Перевіряємо що натиснуто
 8001104:	f000 f83c 	bl	8001180 <getPressKey>
 8001108:	4603      	mov	r3, r0
 800110a:	2b01      	cmp	r3, #1
 800110c:	d002      	beq.n	8001114 <Level1Item3_Enter+0xa0>
 800110e:	2b02      	cmp	r3, #2
 8001110:	d003      	beq.n	800111a <Level1Item3_Enter+0xa6>
	  	  case BUTTON_DOWN: // Якщо кнопку "вниз", то вимкнемо підсвічування дисплею
	  		  //HAL_GPIO_WritePin(LCD_BACKLIGHT_GPIO_Port,LCD_BACKLIGHT_Pin,DISABLE);
	  		  RED_LED_OFF();
	  		  break;
	  	  default:  // В будь якому іншому випадку просто вихід з switch
	  		  break;
 8001112:	e005      	b.n	8001120 <Level1Item3_Enter+0xac>
	  		  RED_LED_ON();
 8001114:	f7ff ff96 	bl	8001044 <RED_LED_ON>
	  		  break;
 8001118:	e002      	b.n	8001120 <Level1Item3_Enter+0xac>
	  		  RED_LED_OFF();
 800111a:	f7ff ff9f 	bl	800105c <RED_LED_OFF>
	  		  break;
 800111e:	bf00      	nop
	  switch(getPressKey())  // Перевіряємо що натиснуто
 8001120:	e009      	b.n	8001136 <Level1Item3_Enter+0xc2>
	  }
  }
  else if(getPressKey() == BUTTON_NOTHING && flagPressed)
 8001122:	f000 f82d 	bl	8001180 <getPressKey>
 8001126:	4603      	mov	r3, r0
 8001128:	2bff      	cmp	r3, #255	; 0xff
 800112a:	d104      	bne.n	8001136 <Level1Item3_Enter+0xc2>
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <Level1Item3_Enter+0xc2>
  {
	  flagPressed = false; // Коли кнопку відпустили
 8001132:	2300      	movs	r3, #0
 8001134:	71fb      	strb	r3, [r7, #7]
 while(getPressKey() != BUTTON_LEFT)
 8001136:	f000 f823 	bl	8001180 <getPressKey>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1b5      	bne.n	80010ac <Level1Item3_Enter+0x38>
  }
 }

 //lcdClrScr();  // Очищення дисплею
 ILI9341_Draw_Text( "                        ", 10, 10, WHITE, 2, BLACK);
 8001140:	2300      	movs	r3, #0
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	2302      	movs	r3, #2
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800114c:	220a      	movs	r2, #10
 800114e:	210a      	movs	r1, #10
 8001150:	4809      	ldr	r0, [pc, #36]	; (8001178 <Level1Item3_Enter+0x104>)
 8001152:	f7ff fad3 	bl	80006fc <ILI9341_Draw_Text>
 //ILI9341_Draw_Text( "                        ", 10, 40, WHITE, 2, BLACK);
 Menu_Navigate(&Menu_3); // Повертаємося до того ж меню де були
 8001156:	4809      	ldr	r0, [pc, #36]	; (800117c <Level1Item3_Enter+0x108>)
 8001158:	f000 f8d6 	bl	8001308 <Menu_Navigate>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	0800ae34 	.word	0x0800ae34
 8001168:	0800ae50 	.word	0x0800ae50
 800116c:	40020c00 	.word	0x40020c00
 8001170:	0800ae5c 	.word	0x0800ae5c
 8001174:	0800ae60 	.word	0x0800ae60
 8001178:	0800ae64 	.word	0x0800ae64
 800117c:	0800b1a8 	.word	0x0800b1a8

08001180 <getPressKey>:
// -----------------------------------------------------------------------
static uint8_t getPressKey()		// Simulation keyboard
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af02      	add	r7, sp, #8
////	BUTTON_SELECT  = 4,
////	BUTTON_NOTHING  = 255
//	//flagPressed = true;


	char digit = '\0';
 8001186:	2300      	movs	r3, #0
 8001188:	75fb      	strb	r3, [r7, #23]
	char buff_lcd[20] = "KEY: ";
 800118a:	4a46      	ldr	r2, [pc, #280]	; (80012a4 <getPressKey+0x124>)
 800118c:	463b      	mov	r3, r7
 800118e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001192:	6018      	str	r0, [r3, #0]
 8001194:	3304      	adds	r3, #4
 8001196:	8019      	strh	r1, [r3, #0]
 8001198:	1dbb      	adds	r3, r7, #6
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	819a      	strh	r2, [r3, #12]
	digit = read_one_digit_from_keyboard();
 80011a4:	f000 f9b4 	bl	8001510 <read_one_digit_from_keyboard>
 80011a8:	4603      	mov	r3, r0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	75fb      	strb	r3, [r7, #23]
	switch(digit)
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	3b30      	subs	r3, #48	; 0x30
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d870      	bhi.n	8001298 <getPressKey+0x118>
 80011b6:	a201      	add	r2, pc, #4	; (adr r2, 80011bc <getPressKey+0x3c>)
 80011b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011bc:	080011d1 	.word	0x080011d1
 80011c0:	080011f9 	.word	0x080011f9
 80011c4:	08001221 	.word	0x08001221
 80011c8:	08001249 	.word	0x08001249
 80011cc:	08001271 	.word	0x08001271
	{
		//flagPressed = true;			// Flag: Key was pressed
		case '0':
		{
			strncat(buff_lcd, &digit, 1);
 80011d0:	f107 0117 	add.w	r1, r7, #23
 80011d4:	463b      	mov	r3, r7
 80011d6:	2201      	movs	r2, #1
 80011d8:	4618      	mov	r0, r3
 80011da:	f009 fdfd 	bl	800add8 <strncat>
			ILI9341_Draw_Text( buff_lcd, 10, 180, WHITE, 2, BLACK);
 80011de:	4638      	mov	r0, r7
 80011e0:	2300      	movs	r3, #0
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	2302      	movs	r3, #2
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ec:	22b4      	movs	r2, #180	; 0xb4
 80011ee:	210a      	movs	r1, #10
 80011f0:	f7ff fa84 	bl	80006fc <ILI9341_Draw_Text>
			return BUTTON_LEFT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e050      	b.n	800129a <getPressKey+0x11a>
		}
		case '1':
		{
			strncat(buff_lcd, &digit, 1);
 80011f8:	f107 0117 	add.w	r1, r7, #23
 80011fc:	463b      	mov	r3, r7
 80011fe:	2201      	movs	r2, #1
 8001200:	4618      	mov	r0, r3
 8001202:	f009 fde9 	bl	800add8 <strncat>
			ILI9341_Draw_Text( buff_lcd, 10, 180, WHITE, 2, BLACK);
 8001206:	4638      	mov	r0, r7
 8001208:	2300      	movs	r3, #0
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	2302      	movs	r3, #2
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001214:	22b4      	movs	r2, #180	; 0xb4
 8001216:	210a      	movs	r1, #10
 8001218:	f7ff fa70 	bl	80006fc <ILI9341_Draw_Text>
			return BUTTON_UP;
 800121c:	2301      	movs	r3, #1
 800121e:	e03c      	b.n	800129a <getPressKey+0x11a>
		}
		case '2':
		{
			strncat(buff_lcd, &digit, 1);
 8001220:	f107 0117 	add.w	r1, r7, #23
 8001224:	463b      	mov	r3, r7
 8001226:	2201      	movs	r2, #1
 8001228:	4618      	mov	r0, r3
 800122a:	f009 fdd5 	bl	800add8 <strncat>
			ILI9341_Draw_Text( buff_lcd, 10, 180, WHITE, 2, BLACK);
 800122e:	4638      	mov	r0, r7
 8001230:	2300      	movs	r3, #0
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	2302      	movs	r3, #2
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800123c:	22b4      	movs	r2, #180	; 0xb4
 800123e:	210a      	movs	r1, #10
 8001240:	f7ff fa5c 	bl	80006fc <ILI9341_Draw_Text>
			return BUTTON_DOWN;
 8001244:	2302      	movs	r3, #2
 8001246:	e028      	b.n	800129a <getPressKey+0x11a>
		}
		case '3':
		{
			strncat(buff_lcd, &digit, 1);
 8001248:	f107 0117 	add.w	r1, r7, #23
 800124c:	463b      	mov	r3, r7
 800124e:	2201      	movs	r2, #1
 8001250:	4618      	mov	r0, r3
 8001252:	f009 fdc1 	bl	800add8 <strncat>
			ILI9341_Draw_Text( buff_lcd, 10, 180, WHITE, 2, BLACK);
 8001256:	4638      	mov	r0, r7
 8001258:	2300      	movs	r3, #0
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	2302      	movs	r3, #2
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001264:	22b4      	movs	r2, #180	; 0xb4
 8001266:	210a      	movs	r1, #10
 8001268:	f7ff fa48 	bl	80006fc <ILI9341_Draw_Text>
			return BUTTON_RIGHT;
 800126c:	2303      	movs	r3, #3
 800126e:	e014      	b.n	800129a <getPressKey+0x11a>
		}
		case '4':
		{
			strncat(buff_lcd, &digit, 1);
 8001270:	f107 0117 	add.w	r1, r7, #23
 8001274:	463b      	mov	r3, r7
 8001276:	2201      	movs	r2, #1
 8001278:	4618      	mov	r0, r3
 800127a:	f009 fdad 	bl	800add8 <strncat>
			ILI9341_Draw_Text( buff_lcd, 10, 180, WHITE, 2, BLACK);
 800127e:	4638      	mov	r0, r7
 8001280:	2300      	movs	r3, #0
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	2302      	movs	r3, #2
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800128c:	22b4      	movs	r2, #180	; 0xb4
 800128e:	210a      	movs	r1, #10
 8001290:	f7ff fa34 	bl	80006fc <ILI9341_Draw_Text>
			return BUTTON_SELECT;
 8001294:	2304      	movs	r3, #4
 8001296:	e000      	b.n	800129a <getPressKey+0x11a>
		}
		default:
			return BUTTON_NOTHING;
 8001298:	23ff      	movs	r3, #255	; 0xff
			break;
	}
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	0800ae80 	.word	0x0800ae80

080012a8 <Generic_Write>:
// -----------------------------------------------------------------------
void Generic_Write(const char* Text)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	6078      	str	r0, [r7, #4]
	if (Text)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d015      	beq.n	80012e2 <Generic_Write+0x3a>
	{
//		lcdClrScr();
//		lcdPuts(Text);

		ILI9341_Draw_Text( "                   ", 10, 10, WHITE, 2, BLACK);
 80012b6:	2300      	movs	r3, #0
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	2302      	movs	r3, #2
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012c2:	220a      	movs	r2, #10
 80012c4:	210a      	movs	r1, #10
 80012c6:	4809      	ldr	r0, [pc, #36]	; (80012ec <Generic_Write+0x44>)
 80012c8:	f7ff fa18 	bl	80006fc <ILI9341_Draw_Text>
		ILI9341_Draw_Text( Text, 10, 10, WHITE, 2, BLACK);
 80012cc:	2300      	movs	r3, #0
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	2302      	movs	r3, #2
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012d8:	220a      	movs	r2, #10
 80012da:	210a      	movs	r1, #10
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fa0d 	bl	80006fc <ILI9341_Draw_Text>
	}
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	0800ae94 	.word	0x0800ae94

080012f0 <Menu_GetCurrentMenu>:
// -----------------------------------------------------------------------
Menu_Item_t* Menu_GetCurrentMenu(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
 return CurrentMenuItem;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <Menu_GetCurrentMenu+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000004 	.word	0x20000004

08001308 <Menu_Navigate>:
// -----------------------------------------------------------------------
void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a11      	ldr	r2, [pc, #68]	; (8001358 <Menu_Navigate+0x50>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d01a      	beq.n	800134e <Menu_Navigate+0x46>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d017      	beq.n	800134e <Menu_Navigate+0x46>
 {
	 return;
 }

 CurrentMenuItem = NewMenu;
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <Menu_Navigate+0x54>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6013      	str	r3, [r2, #0]

 if (MenuWriteFunc)
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <Menu_Navigate+0x58>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <Menu_Navigate+0x32>
 {
	 MenuWriteFunc(CurrentMenuItem->Text);
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <Menu_Navigate+0x58>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0a      	ldr	r2, [pc, #40]	; (800135c <Menu_Navigate+0x54>)
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	3218      	adds	r2, #24
 8001336:	4610      	mov	r0, r2
 8001338:	4798      	blx	r3
 }

 void (*SelectCallback)(void) = CurrentMenuItem->SelectCallback;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <Menu_Navigate+0x54>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	60fb      	str	r3, [r7, #12]

 if (SelectCallback)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <Menu_Navigate+0x48>
 {
	 SelectCallback();
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4798      	blx	r3
 800134c:	e000      	b.n	8001350 <Menu_Navigate+0x48>
	 return;
 800134e:	bf00      	nop
 }
}
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	0800b150 	.word	0x0800b150
 800135c:	20000004 	.word	0x20000004
 8001360:	200000b8 	.word	0x200000b8

08001364 <Menu_SetGenericWriteCallback>:
// -----------------------------------------------------------------------
void Menu_SetGenericWriteCallback(void (*WriteFunc)(const char* Text))
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 MenuWriteFunc = WriteFunc;
 800136c:	4a05      	ldr	r2, [pc, #20]	; (8001384 <Menu_SetGenericWriteCallback+0x20>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
 Menu_Navigate(CurrentMenuItem);
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <Menu_SetGenericWriteCallback+0x24>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ffc6 	bl	8001308 <Menu_Navigate>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200000b8 	.word	0x200000b8
 8001388:	20000004 	.word	0x20000004

0800138c <Menu_EnterCurrentItem>:
// -----------------------------------------------------------------------
void Menu_EnterCurrentItem(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <Menu_EnterCurrentItem+0x34>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <Menu_EnterCurrentItem+0x38>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d00d      	beq.n	80013b8 <Menu_EnterCurrentItem+0x2c>
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <Menu_EnterCurrentItem+0x34>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d009      	beq.n	80013b8 <Menu_EnterCurrentItem+0x2c>
  return;

 void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <Menu_EnterCurrentItem+0x34>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	607b      	str	r3, [r7, #4]

 if (EnterCallback)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <Menu_EnterCurrentItem+0x2e>
  EnterCallback();
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4798      	blx	r3
 80013b6:	e000      	b.n	80013ba <Menu_EnterCurrentItem+0x2e>
  return;
 80013b8:	bf00      	nop
}// -----------------------------------------------------------------------
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000004 	.word	0x20000004
 80013c4:	0800b150 	.word	0x0800b150

080013c8 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	int i =0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 80013d4:	e036      	b.n	8001444 <speed_test_LCD+0x7c>
	{
		i ++;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80013f0:	4819      	ldr	r0, [pc, #100]	; (8001458 <speed_test_LCD+0x90>)
 80013f2:	f004 febe 	bl	8006172 <HAL_RNG_GetRandomNumber>
 80013f6:	6138      	str	r0, [r7, #16]
		xr = random_num;
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80013fc:	4816      	ldr	r0, [pc, #88]	; (8001458 <speed_test_LCD+0x90>)
 80013fe:	f004 feb8 	bl	8006172 <HAL_RNG_GetRandomNumber>
 8001402:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001408:	4813      	ldr	r0, [pc, #76]	; (8001458 <speed_test_LCD+0x90>)
 800140a:	f004 feb2 	bl	8006172 <HAL_RNG_GetRandomNumber>
 800140e:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001414:	4810      	ldr	r0, [pc, #64]	; (8001458 <speed_test_LCD+0x90>)
 8001416:	f004 feac 	bl	8006172 <HAL_RNG_GetRandomNumber>
 800141a:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8001420:	89fb      	ldrh	r3, [r7, #14]
 8001422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001426:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8001428:	89bb      	ldrh	r3, [r7, #12]
 800142a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800142e:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8001430:	897b      	ldrh	r3, [r7, #10]
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8001438:	893b      	ldrh	r3, [r7, #8]
 800143a:	897a      	ldrh	r2, [r7, #10]
 800143c:	89b9      	ldrh	r1, [r7, #12]
 800143e:	89f8      	ldrh	r0, [r7, #14]
 8001440:	f7ff f83e 	bl	80004c0 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	ddc4      	ble.n	80013d6 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000238 	.word	0x20000238

0800145c <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	char digith = 0;;
 8001462:	2300      	movs	r3, #0
 8001464:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 8001466:	f000 f853 	bl	8001510 <read_one_digit_from_keyboard>
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b23      	cmp	r3, #35	; 0x23
 8001472:	d10a      	bne.n	800148a <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 8001474:	221e      	movs	r2, #30
 8001476:	2100      	movs	r1, #0
 8001478:	4824      	ldr	r0, [pc, #144]	; (800150c <read_digits+0xb0>)
 800147a:	f009 fbeb 	bl	800ac54 <memset>
		keyboard.read_digits_position = 0;
 800147e:	4b23      	ldr	r3, [pc, #140]	; (800150c <read_digits+0xb0>)
 8001480:	2200      	movs	r2, #0
 8001482:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <read_digits+0xb0>)
 8001486:	2200      	movs	r2, #0
 8001488:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2b2a      	cmp	r3, #42	; 0x2a
 800148e:	d109      	bne.n	80014a4 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <read_digits+0xb0>)
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 8001498:	4b1c      	ldr	r3, [pc, #112]	; (800150c <read_digits+0xb0>)
 800149a:	2200      	movs	r2, #0
 800149c:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <read_digits+0xb0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d028      	beq.n	80014fc <read_digits+0xa0>
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b23      	cmp	r3, #35	; 0x23
 80014ae:	d025      	beq.n	80014fc <read_digits+0xa0>
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b2a      	cmp	r3, #42	; 0x2a
 80014b4:	d022      	beq.n	80014fc <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <read_digits+0xb0>)
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	4a14      	ldr	r2, [pc, #80]	; (800150c <read_digits+0xb0>)
 80014bc:	7f92      	ldrb	r2, [r2, #30]
 80014be:	4293      	cmp	r3, r2
 80014c0:	dc11      	bgt.n	80014e6 <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <read_digits+0xb0>)
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	4911      	ldr	r1, [pc, #68]	; (800150c <read_digits+0xb0>)
 80014c8:	79fa      	ldrb	r2, [r7, #7]
 80014ca:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <read_digits+0xb0>)
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	3301      	adds	r3, #1
 80014d2:	4a0e      	ldr	r2, [pc, #56]	; (800150c <read_digits+0xb0>)
 80014d4:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <read_digits+0xb0>)
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <read_digits+0xb0>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 80014e4:	e00e      	b.n	8001504 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <read_digits+0xb0>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <read_digits+0xb0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <read_digits+0xb0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 80014fa:	e003      	b.n	8001504 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <read_digits+0xb0>)
 80014fe:	2200      	movs	r2, #0
 8001500:	77da      	strb	r2, [r3, #31]
	}
}
 8001502:	bf00      	nop
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200000d4 	.word	0x200000d4

08001510 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
	char digit = '\0';
 8001516:	2300      	movs	r3, #0
 8001518:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001520:	48cf      	ldr	r0, [pc, #828]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 8001522:	f001 fc91 	bl	8002e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152c:	48cc      	ldr	r0, [pc, #816]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 800152e:	f001 fc8b 	bl	8002e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001538:	48c9      	ldr	r0, [pc, #804]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 800153a:	f001 fc85 	bl	8002e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001544:	48c6      	ldr	r0, [pc, #792]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 8001546:	f001 fc7f 	bl	8002e48 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800154a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800154e:	48c5      	ldr	r0, [pc, #788]	; (8001864 <read_one_digit_from_keyboard+0x354>)
 8001550:	f001 fc62 	bl	8002e18 <HAL_GPIO_ReadPin>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d169      	bne.n	800162e <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001560:	48bf      	ldr	r0, [pc, #764]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 8001562:	f001 fc71 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800156c:	48bc      	ldr	r0, [pc, #752]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 800156e:	f001 fc6b 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001572:	2201      	movs	r2, #1
 8001574:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001578:	48b9      	ldr	r0, [pc, #740]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 800157a:	f001 fc65 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800157e:	2201      	movs	r2, #1
 8001580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001584:	48b6      	ldr	r0, [pc, #728]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 8001586:	f001 fc5f 	bl	8002e48 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800158a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800158e:	48b5      	ldr	r0, [pc, #724]	; (8001864 <read_one_digit_from_keyboard+0x354>)
 8001590:	f001 fc42 	bl	8002e18 <HAL_GPIO_ReadPin>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 800159a:	2331      	movs	r3, #49	; 0x31
 800159c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a4:	48ae      	ldr	r0, [pc, #696]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 80015a6:	f001 fc4f 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b0:	48ab      	ldr	r0, [pc, #684]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 80015b2:	f001 fc49 	bl	8002e48 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80015b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ba:	48aa      	ldr	r0, [pc, #680]	; (8001864 <read_one_digit_from_keyboard+0x354>)
 80015bc:	f001 fc2c 	bl	8002e18 <HAL_GPIO_ReadPin>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 80015c6:	2334      	movs	r3, #52	; 0x34
 80015c8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d0:	48a3      	ldr	r0, [pc, #652]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 80015d2:	f001 fc39 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015dc:	48a0      	ldr	r0, [pc, #640]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 80015de:	f001 fc33 	bl	8002e48 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80015e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e6:	489f      	ldr	r0, [pc, #636]	; (8001864 <read_one_digit_from_keyboard+0x354>)
 80015e8:	f001 fc16 	bl	8002e18 <HAL_GPIO_ReadPin>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 80015f2:	2337      	movs	r3, #55	; 0x37
 80015f4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015fc:	4898      	ldr	r0, [pc, #608]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 80015fe:	f001 fc23 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001608:	4895      	ldr	r0, [pc, #596]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 800160a:	f001 fc1d 	bl	8002e48 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800160e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001612:	4894      	ldr	r0, [pc, #592]	; (8001864 <read_one_digit_from_keyboard+0x354>)
 8001614:	f001 fc00 	bl	8002e18 <HAL_GPIO_ReadPin>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 800161e:	232a      	movs	r3, #42	; 0x2a
 8001620:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001628:	488d      	ldr	r0, [pc, #564]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 800162a:	f001 fc0d 	bl	8002e48 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001634:	488a      	ldr	r0, [pc, #552]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 8001636:	f001 fc07 	bl	8002e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001640:	4887      	ldr	r0, [pc, #540]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 8001642:	f001 fc01 	bl	8002e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 7100 	mov.w	r1, #512	; 0x200
 800164c:	4884      	ldr	r0, [pc, #528]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 800164e:	f001 fbfb 	bl	8002e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001658:	4881      	ldr	r0, [pc, #516]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 800165a:	f001 fbf5 	bl	8002e48 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 800165e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001662:	4880      	ldr	r0, [pc, #512]	; (8001864 <read_one_digit_from_keyboard+0x354>)
 8001664:	f001 fbd8 	bl	8002e18 <HAL_GPIO_ReadPin>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d169      	bne.n	8001742 <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001674:	487a      	ldr	r0, [pc, #488]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 8001676:	f001 fbe7 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800167a:	2201      	movs	r2, #1
 800167c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001680:	4877      	ldr	r0, [pc, #476]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 8001682:	f001 fbe1 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001686:	2201      	movs	r2, #1
 8001688:	f44f 7100 	mov.w	r1, #512	; 0x200
 800168c:	4874      	ldr	r0, [pc, #464]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 800168e:	f001 fbdb 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001692:	2201      	movs	r2, #1
 8001694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001698:	4871      	ldr	r0, [pc, #452]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 800169a:	f001 fbd5 	bl	8002e48 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800169e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a2:	4870      	ldr	r0, [pc, #448]	; (8001864 <read_one_digit_from_keyboard+0x354>)
 80016a4:	f001 fbb8 	bl	8002e18 <HAL_GPIO_ReadPin>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 80016ae:	2332      	movs	r3, #50	; 0x32
 80016b0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80016b2:	2201      	movs	r2, #1
 80016b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b8:	4869      	ldr	r0, [pc, #420]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 80016ba:	f001 fbc5 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c4:	4866      	ldr	r0, [pc, #408]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 80016c6:	f001 fbbf 	bl	8002e48 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80016ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ce:	4865      	ldr	r0, [pc, #404]	; (8001864 <read_one_digit_from_keyboard+0x354>)
 80016d0:	f001 fba2 	bl	8002e18 <HAL_GPIO_ReadPin>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 80016da:	2335      	movs	r3, #53	; 0x35
 80016dc:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80016de:	2201      	movs	r2, #1
 80016e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e4:	485e      	ldr	r0, [pc, #376]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 80016e6:	f001 fbaf 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f0:	485b      	ldr	r0, [pc, #364]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 80016f2:	f001 fba9 	bl	8002e48 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80016f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016fa:	485a      	ldr	r0, [pc, #360]	; (8001864 <read_one_digit_from_keyboard+0x354>)
 80016fc:	f001 fb8c 	bl	8002e18 <HAL_GPIO_ReadPin>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 8001706:	2338      	movs	r3, #56	; 0x38
 8001708:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001710:	4853      	ldr	r0, [pc, #332]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 8001712:	f001 fb99 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171c:	4850      	ldr	r0, [pc, #320]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 800171e:	f001 fb93 	bl	8002e48 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001722:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001726:	484f      	ldr	r0, [pc, #316]	; (8001864 <read_one_digit_from_keyboard+0x354>)
 8001728:	f001 fb76 	bl	8002e18 <HAL_GPIO_ReadPin>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 8001732:	2330      	movs	r3, #48	; 0x30
 8001734:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001736:	2201      	movs	r2, #1
 8001738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800173c:	4848      	ldr	r0, [pc, #288]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 800173e:	f001 fb83 	bl	8002e48 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001748:	4845      	ldr	r0, [pc, #276]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 800174a:	f001 fb7d 	bl	8002e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001754:	4842      	ldr	r0, [pc, #264]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 8001756:	f001 fb77 	bl	8002e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001760:	483f      	ldr	r0, [pc, #252]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 8001762:	f001 fb71 	bl	8002e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176c:	483c      	ldr	r0, [pc, #240]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 800176e:	f001 fb6b 	bl	8002e48 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №
 8001772:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001776:	483b      	ldr	r0, [pc, #236]	; (8001864 <read_one_digit_from_keyboard+0x354>)
 8001778:	f001 fb4e 	bl	8002e18 <HAL_GPIO_ReadPin>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d169      	bne.n	8001856 <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001788:	4835      	ldr	r0, [pc, #212]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 800178a:	f001 fb5d 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800178e:	2201      	movs	r2, #1
 8001790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001794:	4832      	ldr	r0, [pc, #200]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 8001796:	f001 fb57 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800179a:	2201      	movs	r2, #1
 800179c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017a0:	482f      	ldr	r0, [pc, #188]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 80017a2:	f001 fb51 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ac:	482c      	ldr	r0, [pc, #176]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 80017ae:	f001 fb4b 	bl	8002e48 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80017b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017b6:	482b      	ldr	r0, [pc, #172]	; (8001864 <read_one_digit_from_keyboard+0x354>)
 80017b8:	f001 fb2e 	bl	8002e18 <HAL_GPIO_ReadPin>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 80017c2:	2333      	movs	r3, #51	; 0x33
 80017c4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80017c6:	2201      	movs	r2, #1
 80017c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017cc:	4824      	ldr	r0, [pc, #144]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 80017ce:	f001 fb3b 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017d8:	4821      	ldr	r0, [pc, #132]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 80017da:	f001 fb35 	bl	8002e48 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80017de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017e2:	4820      	ldr	r0, [pc, #128]	; (8001864 <read_one_digit_from_keyboard+0x354>)
 80017e4:	f001 fb18 	bl	8002e18 <HAL_GPIO_ReadPin>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 80017ee:	2336      	movs	r3, #54	; 0x36
 80017f0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80017f2:	2201      	movs	r2, #1
 80017f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017f8:	4819      	ldr	r0, [pc, #100]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 80017fa:	f001 fb25 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001804:	4816      	ldr	r0, [pc, #88]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 8001806:	f001 fb1f 	bl	8002e48 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800180a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800180e:	4815      	ldr	r0, [pc, #84]	; (8001864 <read_one_digit_from_keyboard+0x354>)
 8001810:	f001 fb02 	bl	8002e18 <HAL_GPIO_ReadPin>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 800181a:	2339      	movs	r3, #57	; 0x39
 800181c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800181e:	2201      	movs	r2, #1
 8001820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001824:	480e      	ldr	r0, [pc, #56]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 8001826:	f001 fb0f 	bl	8002e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001830:	480b      	ldr	r0, [pc, #44]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 8001832:	f001 fb09 	bl	8002e48 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001836:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800183a:	480a      	ldr	r0, [pc, #40]	; (8001864 <read_one_digit_from_keyboard+0x354>)
 800183c:	f001 faec 	bl	8002e18 <HAL_GPIO_ReadPin>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 8001846:	2323      	movs	r3, #35	; 0x23
 8001848:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800184a:	2201      	movs	r2, #1
 800184c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001850:	4803      	ldr	r0, [pc, #12]	; (8001860 <read_one_digit_from_keyboard+0x350>)
 8001852:	f001 faf9 	bl	8002e48 <HAL_GPIO_WritePin>
	}
	return digit;
 8001856:	79fb      	ldrb	r3, [r7, #7]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40020c00 	.word	0x40020c00
 8001864:	40020400 	.word	0x40020400

08001868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186e:	f000 ff8f 	bl	8002790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001872:	f000 f83d 	bl	80018f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001876:	f000 fac1 	bl	8001dfc <MX_GPIO_Init>
  MX_I2S3_Init();
 800187a:	f000 f8f5 	bl	8001a68 <MX_I2S3_Init>
  MX_SPI1_Init();
 800187e:	f000 f937 	bl	8001af0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001882:	f008 fea5 	bl	800a5d0 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8001886:	f000 f9f7 	bl	8001c78 <MX_TIM2_Init>
  MX_SPI2_Init();
 800188a:	f000 f967 	bl	8001b5c <MX_SPI2_Init>
  MX_RNG_Init();
 800188e:	f000 f91b 	bl	8001ac8 <MX_RNG_Init>
  MX_TIM3_Init();
 8001892:	f000 fa3f 	bl	8001d14 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001896:	f000 f997 	bl	8001bc8 <MX_TIM1_Init>
  MX_I2C3_Init();
 800189a:	f000 f8b7 	bl	8001a0c <MX_I2C3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800189e:	f000 f8a9 	bl	80019f4 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 80018a2:	f7ff f879 	bl	8000998 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f7ff fa1c 	bl	8000ce4 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 80018ac:	2003      	movs	r0, #3
 80018ae:	f7ff f815 	bl	80008dc <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff fa16 	bl	8000ce4 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 80018b8:	2364      	movs	r3, #100	; 0x64
 80018ba:	607b      	str	r3, [r7, #4]
  speed_test_LCD(number_of_tests);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fd83 	bl	80013c8 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f7ff fa0e 	bl	8000ce4 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 80018c8:	4807      	ldr	r0, [pc, #28]	; (80018e8 <main+0x80>)
 80018ca:	f004 ff47 	bl	800675c <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80018ce:	2100      	movs	r1, #0
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <main+0x80>)
 80018d2:	f004 ffb3 	bl	800683c <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <main+0x84>)
 80018d8:	220a      	movs	r2, #10
 80018da:	779a      	strb	r2, [r3, #30]
  ////////////////////////////////////////////////////
  while (1)
  {
	  /////////////////////////////////////////////////////////////////

	 menu();
 80018dc:	f7ff fb4c 	bl	8000f78 <menu>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80018e0:	f008 fe9c 	bl	800a61c <MX_USB_HOST_Process>
	 menu();
 80018e4:	e7fa      	b.n	80018dc <main+0x74>
 80018e6:	bf00      	nop
 80018e8:	200001a8 	.word	0x200001a8
 80018ec:	200000d4 	.word	0x200000d4

080018f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b098      	sub	sp, #96	; 0x60
 80018f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018fa:	2230      	movs	r2, #48	; 0x30
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f009 f9a8 	bl	800ac54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b31      	ldr	r3, [pc, #196]	; (80019ec <SystemClock_Config+0xfc>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a30      	ldr	r2, [pc, #192]	; (80019ec <SystemClock_Config+0xfc>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b2e      	ldr	r3, [pc, #184]	; (80019ec <SystemClock_Config+0xfc>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <SystemClock_Config+0x100>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a2a      	ldr	r2, [pc, #168]	; (80019f0 <SystemClock_Config+0x100>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <SystemClock_Config+0x100>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800195a:	2301      	movs	r3, #1
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800195e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001964:	2302      	movs	r3, #2
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001968:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800196c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800196e:	2308      	movs	r3, #8
 8001970:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001972:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001976:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001978:	2302      	movs	r3, #2
 800197a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800197c:	2307      	movs	r3, #7
 800197e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001980:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001984:	4618      	mov	r0, r3
 8001986:	f003 fddb 	bl	8005540 <HAL_RCC_OscConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001990:	f000 fbae 	bl	80020f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001994:	230f      	movs	r3, #15
 8001996:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001998:	2302      	movs	r3, #2
 800199a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	2105      	movs	r1, #5
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 f83c 	bl	8005a30 <HAL_RCC_ClockConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80019be:	f000 fb97 	bl	80020f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80019c2:	2301      	movs	r3, #1
 80019c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80019c6:	23c0      	movs	r3, #192	; 0xc0
 80019c8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80019ca:	2302      	movs	r3, #2
 80019cc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	4618      	mov	r0, r3
 80019d4:	f004 fa14 	bl	8005e00 <HAL_RCCEx_PeriphCLKConfig>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80019de:	f000 fb87 	bl	80020f0 <Error_Handler>
  }
}
 80019e2:	bf00      	nop
 80019e4:	3760      	adds	r7, #96	; 0x60
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40007000 	.word	0x40007000

080019f4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	201c      	movs	r0, #28
 80019fe:	f001 f838 	bl	8002a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a02:	201c      	movs	r0, #28
 8001a04:	f001 f851 	bl	8002aaa <HAL_NVIC_EnableIRQ>
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <MX_I2C3_Init+0x50>)
 8001a12:	4a13      	ldr	r2, [pc, #76]	; (8001a60 <MX_I2C3_Init+0x54>)
 8001a14:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_I2C3_Init+0x50>)
 8001a18:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <MX_I2C3_Init+0x58>)
 8001a1a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <MX_I2C3_Init+0x50>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <MX_I2C3_Init+0x50>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <MX_I2C3_Init+0x50>)
 8001a2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a2e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a30:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <MX_I2C3_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <MX_I2C3_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <MX_I2C3_Init+0x50>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_I2C3_Init+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a48:	4804      	ldr	r0, [pc, #16]	; (8001a5c <MX_I2C3_Init+0x50>)
 8001a4a:	f002 ff95 	bl	8004978 <HAL_I2C_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a54:	f000 fb4c 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200000fc 	.word	0x200000fc
 8001a60:	40005c00 	.word	0x40005c00
 8001a64:	000186a0 	.word	0x000186a0

08001a68 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_I2S3_Init+0x54>)
 8001a6e:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <MX_I2S3_Init+0x58>)
 8001a70:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <MX_I2S3_Init+0x54>)
 8001a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a78:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <MX_I2S3_Init+0x54>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MX_I2S3_Init+0x54>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <MX_I2S3_Init+0x54>)
 8001a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <MX_I2S3_Init+0x54>)
 8001a90:	4a0c      	ldr	r2, [pc, #48]	; (8001ac4 <MX_I2S3_Init+0x5c>)
 8001a92:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <MX_I2S3_Init+0x54>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <MX_I2S3_Init+0x54>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <MX_I2S3_Init+0x54>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_I2S3_Init+0x54>)
 8001aa8:	f003 f8aa 	bl	8004c00 <HAL_I2S_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001ab2:	f000 fb1d 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200002e8 	.word	0x200002e8
 8001ac0:	40003c00 	.word	0x40003c00
 8001ac4:	00017700 	.word	0x00017700

08001ac8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MX_RNG_Init+0x20>)
 8001ace:	4a07      	ldr	r2, [pc, #28]	; (8001aec <MX_RNG_Init+0x24>)
 8001ad0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001ad2:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <MX_RNG_Init+0x20>)
 8001ad4:	f004 fad4 	bl	8006080 <HAL_RNG_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001ade:	f000 fb07 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000238 	.word	0x20000238
 8001aec:	50060800 	.word	0x50060800

08001af0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001af6:	4a18      	ldr	r2, [pc, #96]	; (8001b58 <MX_SPI1_Init+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001afa:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001afc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b02:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b28:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b3c:	220a      	movs	r2, #10
 8001b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <MX_SPI1_Init+0x64>)
 8001b42:	f004 fb2b 	bl	800619c <HAL_SPI_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b4c:	f000 fad0 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000248 	.word	0x20000248
 8001b58:	40013000 	.word	0x40013000

08001b5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b60:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <MX_SPI2_Init+0x64>)
 8001b62:	4a18      	ldr	r2, [pc, #96]	; (8001bc4 <MX_SPI2_Init+0x68>)
 8001b64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b66:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <MX_SPI2_Init+0x64>)
 8001b68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_SPI2_Init+0x64>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <MX_SPI2_Init+0x64>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_SPI2_Init+0x64>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <MX_SPI2_Init+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_SPI2_Init+0x64>)
 8001b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <MX_SPI2_Init+0x64>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b94:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <MX_SPI2_Init+0x64>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <MX_SPI2_Init+0x64>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba0:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <MX_SPI2_Init+0x64>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_SPI2_Init+0x64>)
 8001ba8:	220a      	movs	r2, #10
 8001baa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bac:	4804      	ldr	r0, [pc, #16]	; (8001bc0 <MX_SPI2_Init+0x64>)
 8001bae:	f004 faf5 	bl	800619c <HAL_SPI_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001bb8:	f000 fa9a 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000150 	.word	0x20000150
 8001bc4:	40003800 	.word	0x40003800

08001bc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08c      	sub	sp, #48	; 0x30
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	2224      	movs	r2, #36	; 0x24
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f009 f83c 	bl	800ac54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001be4:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <MX_TIM1_Init+0xa8>)
 8001be6:	4a23      	ldr	r2, [pc, #140]	; (8001c74 <MX_TIM1_Init+0xac>)
 8001be8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <MX_TIM1_Init+0xa8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf0:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <MX_TIM1_Init+0xa8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <MX_TIM1_Init+0xa8>)
 8001bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <MX_TIM1_Init+0xa8>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <MX_TIM1_Init+0xa8>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <MX_TIM1_Init+0xa8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c10:	2301      	movs	r3, #1
 8001c12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480d      	ldr	r0, [pc, #52]	; (8001c70 <MX_TIM1_Init+0xa8>)
 8001c3c:	f004 ff65 	bl	8006b0a <HAL_TIM_Encoder_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001c46:	f000 fa53 	bl	80020f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4806      	ldr	r0, [pc, #24]	; (8001c70 <MX_TIM1_Init+0xa8>)
 8001c58:	f005 fdca 	bl	80077f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001c62:	f000 fa45 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	3730      	adds	r7, #48	; 0x30
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200001f0 	.word	0x200001f0
 8001c74:	40010000 	.word	0x40010000

08001c78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7e:	f107 0308 	add.w	r3, r7, #8
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c94:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001c96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001c9e:	f240 3247 	movw	r2, #839	; 0x347
 8001ca2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001caa:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001cb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cba:	2280      	movs	r2, #128	; 0x80
 8001cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cbe:	4814      	ldr	r0, [pc, #80]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cc0:	f004 fcfc 	bl	80066bc <HAL_TIM_Base_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001cca:	f000 fa11 	bl	80020f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480d      	ldr	r0, [pc, #52]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cdc:	f005 f982 	bl	8006fe4 <HAL_TIM_ConfigClockSource>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ce6:	f000 fa03 	bl	80020f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001cea:	2310      	movs	r3, #16
 8001cec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4806      	ldr	r0, [pc, #24]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cf8:	f005 fd7a 	bl	80077f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d02:	f000 f9f5 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200002a0 	.word	0x200002a0

08001d14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08e      	sub	sp, #56	; 0x38
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d28:	f107 0320 	add.w	r3, r7, #32
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
 8001d40:	615a      	str	r2, [r3, #20]
 8001d42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d44:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <MX_TIM3_Init+0xe0>)
 8001d46:	4a2c      	ldr	r2, [pc, #176]	; (8001df8 <MX_TIM3_Init+0xe4>)
 8001d48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 8001d4a:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <MX_TIM3_Init+0xe0>)
 8001d4c:	f640 0233 	movw	r2, #2099	; 0x833
 8001d50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d52:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <MX_TIM3_Init+0xe0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001d58:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <MX_TIM3_Init+0xe0>)
 8001d5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d60:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <MX_TIM3_Init+0xe0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <MX_TIM3_Init+0xe0>)
 8001d68:	2280      	movs	r2, #128	; 0x80
 8001d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d6c:	4821      	ldr	r0, [pc, #132]	; (8001df4 <MX_TIM3_Init+0xe0>)
 8001d6e:	f004 fca5 	bl	80066bc <HAL_TIM_Base_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001d78:	f000 f9ba 	bl	80020f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d86:	4619      	mov	r1, r3
 8001d88:	481a      	ldr	r0, [pc, #104]	; (8001df4 <MX_TIM3_Init+0xe0>)
 8001d8a:	f005 f92b 	bl	8006fe4 <HAL_TIM_ConfigClockSource>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001d94:	f000 f9ac 	bl	80020f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d98:	4816      	ldr	r0, [pc, #88]	; (8001df4 <MX_TIM3_Init+0xe0>)
 8001d9a:	f004 fe5d 	bl	8006a58 <HAL_TIM_PWM_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001da4:	f000 f9a4 	bl	80020f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db0:	f107 0320 	add.w	r3, r7, #32
 8001db4:	4619      	mov	r1, r3
 8001db6:	480f      	ldr	r0, [pc, #60]	; (8001df4 <MX_TIM3_Init+0xe0>)
 8001db8:	f005 fd1a 	bl	80077f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001dc2:	f000 f995 	bl	80020f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc6:	2360      	movs	r3, #96	; 0x60
 8001dc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	2200      	movs	r2, #0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4805      	ldr	r0, [pc, #20]	; (8001df4 <MX_TIM3_Init+0xe0>)
 8001dde:	f005 f843 	bl	8006e68 <HAL_TIM_PWM_ConfigChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001de8:	f000 f982 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dec:	bf00      	nop
 8001dee:	3738      	adds	r7, #56	; 0x38
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	200001a8 	.word	0x200001a8
 8001df8:	40000400 	.word	0x40000400

08001dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08c      	sub	sp, #48	; 0x30
 8001e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e02:	f107 031c 	add.w	r3, r7, #28
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	4baf      	ldr	r3, [pc, #700]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4aae      	ldr	r2, [pc, #696]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001e1c:	f043 0310 	orr.w	r3, r3, #16
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4bac      	ldr	r3, [pc, #688]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	61bb      	str	r3, [r7, #24]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	4ba8      	ldr	r3, [pc, #672]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4aa7      	ldr	r2, [pc, #668]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4ba5      	ldr	r3, [pc, #660]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4ba1      	ldr	r3, [pc, #644]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4aa0      	ldr	r2, [pc, #640]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b9e      	ldr	r3, [pc, #632]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b9a      	ldr	r3, [pc, #616]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a99      	ldr	r2, [pc, #612]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b97      	ldr	r3, [pc, #604]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	4b93      	ldr	r3, [pc, #588]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a92      	ldr	r2, [pc, #584]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b90      	ldr	r3, [pc, #576]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	4b8c      	ldr	r3, [pc, #560]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a8b      	ldr	r2, [pc, #556]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001ea8:	f043 0308 	orr.w	r3, r3, #8
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b89      	ldr	r3, [pc, #548]	; (80020d4 <MX_GPIO_Init+0x2d8>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8001eba:	2200      	movs	r2, #0
 8001ebc:	217c      	movs	r1, #124	; 0x7c
 8001ebe:	4886      	ldr	r0, [pc, #536]	; (80020d8 <MX_GPIO_Init+0x2dc>)
 8001ec0:	f000 ffc2 	bl	8002e48 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	4884      	ldr	r0, [pc, #528]	; (80020dc <MX_GPIO_Init+0x2e0>)
 8001eca:	f000 ffbd 	bl	8002e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f64f 7110 	movw	r1, #65296	; 0xff10
 8001ed4:	4882      	ldr	r0, [pc, #520]	; (80020e0 <MX_GPIO_Init+0x2e4>)
 8001ed6:	f000 ffb7 	bl	8002e48 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8001eda:	2200      	movs	r2, #0
 8001edc:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001ee0:	487e      	ldr	r0, [pc, #504]	; (80020dc <MX_GPIO_Init+0x2e0>)
 8001ee2:	f000 ffb1 	bl	8002e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001eec:	487d      	ldr	r0, [pc, #500]	; (80020e4 <MX_GPIO_Init+0x2e8>)
 8001eee:	f000 ffab 	bl	8002e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8001ef2:	2374      	movs	r3, #116	; 0x74
 8001ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efe:	2303      	movs	r3, #3
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f02:	f107 031c 	add.w	r3, r7, #28
 8001f06:	4619      	mov	r1, r3
 8001f08:	4873      	ldr	r0, [pc, #460]	; (80020d8 <MX_GPIO_Init+0x2dc>)
 8001f0a:	f000 fde9 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001f0e:	2308      	movs	r3, #8
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f12:	2301      	movs	r3, #1
 8001f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	4619      	mov	r1, r3
 8001f24:	486c      	ldr	r0, [pc, #432]	; (80020d8 <MX_GPIO_Init+0x2dc>)
 8001f26:	f000 fddb 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001f2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4867      	ldr	r0, [pc, #412]	; (80020dc <MX_GPIO_Init+0x2e0>)
 8001f40:	f000 fdce 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 8001f44:	f640 0341 	movw	r3, #2113	; 0x841
 8001f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	485f      	ldr	r0, [pc, #380]	; (80020dc <MX_GPIO_Init+0x2e0>)
 8001f5e:	f000 fdbf 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001f62:	2308      	movs	r3, #8
 8001f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f72:	2305      	movs	r3, #5
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4857      	ldr	r0, [pc, #348]	; (80020dc <MX_GPIO_Init+0x2e0>)
 8001f7e:	f000 fdaf 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f82:	2301      	movs	r3, #1
 8001f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f86:	4b58      	ldr	r3, [pc, #352]	; (80020e8 <MX_GPIO_Init+0x2ec>)
 8001f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	4855      	ldr	r0, [pc, #340]	; (80020ec <MX_GPIO_Init+0x2f0>)
 8001f96:	f000 fda3 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001fa6:	f107 031c 	add.w	r3, r7, #28
 8001faa:	4619      	mov	r1, r3
 8001fac:	484d      	ldr	r0, [pc, #308]	; (80020e4 <MX_GPIO_Init+0x2e8>)
 8001fae:	f000 fd97 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 8001fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 8001fc0:	f107 031c 	add.w	r3, r7, #28
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4844      	ldr	r0, [pc, #272]	; (80020d8 <MX_GPIO_Init+0x2dc>)
 8001fc8:	f000 fd8a 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fde:	2305      	movs	r3, #5
 8001fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	483e      	ldr	r0, [pc, #248]	; (80020e4 <MX_GPIO_Init+0x2e8>)
 8001fea:	f000 fd79 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001fee:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8001ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 031c 	add.w	r3, r7, #28
 8002000:	4619      	mov	r1, r3
 8002002:	4838      	ldr	r0, [pc, #224]	; (80020e4 <MX_GPIO_Init+0x2e8>)
 8002004:	f000 fd6c 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8002008:	f64f 7310 	movw	r3, #65296	; 0xff10
 800200c:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	2301      	movs	r3, #1
 8002010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	482f      	ldr	r0, [pc, #188]	; (80020e0 <MX_GPIO_Init+0x2e4>)
 8002022:	f000 fd5d 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002026:	2320      	movs	r3, #32
 8002028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	4619      	mov	r1, r3
 8002038:	4829      	ldr	r0, [pc, #164]	; (80020e0 <MX_GPIO_Init+0x2e4>)
 800203a:	f000 fd51 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800203e:	2340      	movs	r3, #64	; 0x40
 8002040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002042:	2301      	movs	r3, #1
 8002044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2300      	movs	r3, #0
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204e:	f107 031c 	add.w	r3, r7, #28
 8002052:	4619      	mov	r1, r3
 8002054:	4823      	ldr	r0, [pc, #140]	; (80020e4 <MX_GPIO_Init+0x2e8>)
 8002056:	f000 fd43 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 800205a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800205e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002060:	2301      	movs	r3, #1
 8002062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002068:	2303      	movs	r3, #3
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	4619      	mov	r1, r3
 8002072:	481c      	ldr	r0, [pc, #112]	; (80020e4 <MX_GPIO_Init+0x2e8>)
 8002074:	f000 fd34 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8002078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800207e:	2312      	movs	r3, #18
 8002080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002082:	2301      	movs	r3, #1
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002086:	2300      	movs	r3, #0
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800208a:	2304      	movs	r3, #4
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	4619      	mov	r1, r3
 8002094:	4813      	ldr	r0, [pc, #76]	; (80020e4 <MX_GPIO_Init+0x2e8>)
 8002096:	f000 fd23 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 800209a:	2301      	movs	r3, #1
 800209c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 80020a6:	f107 031c 	add.w	r3, r7, #28
 80020aa:	4619      	mov	r1, r3
 80020ac:	480a      	ldr	r0, [pc, #40]	; (80020d8 <MX_GPIO_Init+0x2dc>)
 80020ae:	f000 fd17 	bl	8002ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80020b2:	2302      	movs	r3, #2
 80020b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80020b6:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <MX_GPIO_Init+0x2ec>)
 80020b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80020be:	f107 031c 	add.w	r3, r7, #28
 80020c2:	4619      	mov	r1, r3
 80020c4:	4804      	ldr	r0, [pc, #16]	; (80020d8 <MX_GPIO_Init+0x2dc>)
 80020c6:	f000 fd0b 	bl	8002ae0 <HAL_GPIO_Init>

}
 80020ca:	bf00      	nop
 80020cc:	3730      	adds	r7, #48	; 0x30
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40020800 	.word	0x40020800
 80020e0:	40020c00 	.word	0x40020c00
 80020e4:	40020400 	.word	0x40020400
 80020e8:	10120000 	.word	0x10120000
 80020ec:	40020000 	.word	0x40020000

080020f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f4:	b672      	cpsid	i
}
 80020f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <Error_Handler+0x8>
	...

080020fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_MspInit+0x5c>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	4a13      	ldr	r2, [pc, #76]	; (8002158 <HAL_MspInit+0x5c>)
 800210c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002110:	6453      	str	r3, [r2, #68]	; 0x44
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_MspInit+0x5c>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_MspInit+0x5c>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <HAL_MspInit+0x5c>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_MspInit+0x5c>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800213a:	2007      	movs	r0, #7
 800213c:	f000 fc8e 	bl	8002a5c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002140:	2200      	movs	r2, #0
 8002142:	2100      	movs	r1, #0
 8002144:	2005      	movs	r0, #5
 8002146:	f000 fc94 	bl	8002a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800214a:	2005      	movs	r0, #5
 800214c:	f000 fcad 	bl	8002aaa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002150:	bf00      	nop
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40023800 	.word	0x40023800

0800215c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a29      	ldr	r2, [pc, #164]	; (8002220 <HAL_I2C_MspInit+0xc4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d14b      	bne.n	8002216 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_I2C_MspInit+0xc8>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a27      	ldr	r2, [pc, #156]	; (8002224 <HAL_I2C_MspInit+0xc8>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b25      	ldr	r3, [pc, #148]	; (8002224 <HAL_I2C_MspInit+0xc8>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_I2C_MspInit+0xc8>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_I2C_MspInit+0xc8>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_I2C_MspInit+0xc8>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021bc:	2312      	movs	r3, #18
 80021be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021c8:	2304      	movs	r3, #4
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	4619      	mov	r1, r3
 80021d2:	4815      	ldr	r0, [pc, #84]	; (8002228 <HAL_I2C_MspInit+0xcc>)
 80021d4:	f000 fc84 	bl	8002ae0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021de:	2312      	movs	r3, #18
 80021e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021ea:	2304      	movs	r3, #4
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	480d      	ldr	r0, [pc, #52]	; (800222c <HAL_I2C_MspInit+0xd0>)
 80021f6:	f000 fc73 	bl	8002ae0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_I2C_MspInit+0xc8>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <HAL_I2C_MspInit+0xc8>)
 8002204:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_I2C_MspInit+0xc8>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002216:	bf00      	nop
 8002218:	3728      	adds	r7, #40	; 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40005c00 	.word	0x40005c00
 8002224:	40023800 	.word	0x40023800
 8002228:	40020800 	.word	0x40020800
 800222c:	40020000 	.word	0x40020000

08002230 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a28      	ldr	r2, [pc, #160]	; (80022f0 <HAL_I2S_MspInit+0xc0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d14a      	bne.n	80022e8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <HAL_I2S_MspInit+0xc4>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <HAL_I2S_MspInit+0xc4>)
 800225c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_I2S_MspInit+0xc4>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <HAL_I2S_MspInit+0xc4>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <HAL_I2S_MspInit+0xc4>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_I2S_MspInit+0xc4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_I2S_MspInit+0xc4>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a18      	ldr	r2, [pc, #96]	; (80022f4 <HAL_I2S_MspInit+0xc4>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <HAL_I2S_MspInit+0xc4>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80022a6:	2310      	movs	r3, #16
 80022a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022b6:	2306      	movs	r3, #6
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	4619      	mov	r1, r3
 80022c0:	480d      	ldr	r0, [pc, #52]	; (80022f8 <HAL_I2S_MspInit+0xc8>)
 80022c2:	f000 fc0d 	bl	8002ae0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80022c6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80022ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022d8:	2306      	movs	r3, #6
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4619      	mov	r1, r3
 80022e2:	4806      	ldr	r0, [pc, #24]	; (80022fc <HAL_I2S_MspInit+0xcc>)
 80022e4:	f000 fbfc 	bl	8002ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80022e8:	bf00      	nop
 80022ea:	3728      	adds	r7, #40	; 0x28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40003c00 	.word	0x40003c00
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40020000 	.word	0x40020000
 80022fc:	40020800 	.word	0x40020800

08002300 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0b      	ldr	r2, [pc, #44]	; (800233c <HAL_RNG_MspInit+0x3c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d10d      	bne.n	800232e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_RNG_MspInit+0x40>)
 8002318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231a:	4a09      	ldr	r2, [pc, #36]	; (8002340 <HAL_RNG_MspInit+0x40>)
 800231c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002320:	6353      	str	r3, [r2, #52]	; 0x34
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <HAL_RNG_MspInit+0x40>)
 8002324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	50060800 	.word	0x50060800
 8002340:	40023800 	.word	0x40023800

08002344 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08c      	sub	sp, #48	; 0x30
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 031c 	add.w	r3, r7, #28
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a41      	ldr	r2, [pc, #260]	; (8002468 <HAL_SPI_MspInit+0x124>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d12c      	bne.n	80023c0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	4b40      	ldr	r3, [pc, #256]	; (800246c <HAL_SPI_MspInit+0x128>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	4a3f      	ldr	r2, [pc, #252]	; (800246c <HAL_SPI_MspInit+0x128>)
 8002370:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002374:	6453      	str	r3, [r2, #68]	; 0x44
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_SPI_MspInit+0x128>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	4b39      	ldr	r3, [pc, #228]	; (800246c <HAL_SPI_MspInit+0x128>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a38      	ldr	r2, [pc, #224]	; (800246c <HAL_SPI_MspInit+0x128>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b36      	ldr	r3, [pc, #216]	; (800246c <HAL_SPI_MspInit+0x128>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800239e:	23e0      	movs	r3, #224	; 0xe0
 80023a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023ae:	2305      	movs	r3, #5
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f107 031c 	add.w	r3, r7, #28
 80023b6:	4619      	mov	r1, r3
 80023b8:	482d      	ldr	r0, [pc, #180]	; (8002470 <HAL_SPI_MspInit+0x12c>)
 80023ba:	f000 fb91 	bl	8002ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023be:	e04f      	b.n	8002460 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a2b      	ldr	r2, [pc, #172]	; (8002474 <HAL_SPI_MspInit+0x130>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d14a      	bne.n	8002460 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	4b27      	ldr	r3, [pc, #156]	; (800246c <HAL_SPI_MspInit+0x128>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a26      	ldr	r2, [pc, #152]	; (800246c <HAL_SPI_MspInit+0x128>)
 80023d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b24      	ldr	r3, [pc, #144]	; (800246c <HAL_SPI_MspInit+0x128>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_SPI_MspInit+0x128>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a1f      	ldr	r2, [pc, #124]	; (800246c <HAL_SPI_MspInit+0x128>)
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b1d      	ldr	r3, [pc, #116]	; (800246c <HAL_SPI_MspInit+0x128>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_SPI_MspInit+0x128>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a18      	ldr	r2, [pc, #96]	; (800246c <HAL_SPI_MspInit+0x128>)
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <HAL_SPI_MspInit+0x128>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800241e:	2304      	movs	r3, #4
 8002420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800242e:	2305      	movs	r3, #5
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002432:	f107 031c 	add.w	r3, r7, #28
 8002436:	4619      	mov	r1, r3
 8002438:	480f      	ldr	r0, [pc, #60]	; (8002478 <HAL_SPI_MspInit+0x134>)
 800243a:	f000 fb51 	bl	8002ae0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800243e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002450:	2305      	movs	r3, #5
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002454:	f107 031c 	add.w	r3, r7, #28
 8002458:	4619      	mov	r1, r3
 800245a:	4808      	ldr	r0, [pc, #32]	; (800247c <HAL_SPI_MspInit+0x138>)
 800245c:	f000 fb40 	bl	8002ae0 <HAL_GPIO_Init>
}
 8002460:	bf00      	nop
 8002462:	3730      	adds	r7, #48	; 0x30
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40013000 	.word	0x40013000
 800246c:	40023800 	.word	0x40023800
 8002470:	40020000 	.word	0x40020000
 8002474:	40003800 	.word	0x40003800
 8002478:	40020800 	.word	0x40020800
 800247c:	40020400 	.word	0x40020400

08002480 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a19      	ldr	r2, [pc, #100]	; (8002504 <HAL_TIM_Encoder_MspInit+0x84>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d12c      	bne.n	80024fc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	4b18      	ldr	r3, [pc, #96]	; (8002508 <HAL_TIM_Encoder_MspInit+0x88>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	4a17      	ldr	r2, [pc, #92]	; (8002508 <HAL_TIM_Encoder_MspInit+0x88>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6453      	str	r3, [r2, #68]	; 0x44
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_TIM_Encoder_MspInit+0x88>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_TIM_Encoder_MspInit+0x88>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a10      	ldr	r2, [pc, #64]	; (8002508 <HAL_TIM_Encoder_MspInit+0x88>)
 80024c8:	f043 0310 	orr.w	r3, r3, #16
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <HAL_TIM_Encoder_MspInit+0x88>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80024da:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80024de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024e4:	2301      	movs	r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024ec:	2301      	movs	r3, #1
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	4619      	mov	r1, r3
 80024f6:	4805      	ldr	r0, [pc, #20]	; (800250c <HAL_TIM_Encoder_MspInit+0x8c>)
 80024f8:	f000 faf2 	bl	8002ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80024fc:	bf00      	nop
 80024fe:	3728      	adds	r7, #40	; 0x28
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40010000 	.word	0x40010000
 8002508:	40023800 	.word	0x40023800
 800250c:	40021000 	.word	0x40021000

08002510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002520:	d10e      	bne.n	8002540 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b16      	ldr	r3, [pc, #88]	; (8002580 <HAL_TIM_Base_MspInit+0x70>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	4a15      	ldr	r2, [pc, #84]	; (8002580 <HAL_TIM_Base_MspInit+0x70>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6413      	str	r3, [r2, #64]	; 0x40
 8002532:	4b13      	ldr	r3, [pc, #76]	; (8002580 <HAL_TIM_Base_MspInit+0x70>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800253e:	e01a      	b.n	8002576 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0f      	ldr	r2, [pc, #60]	; (8002584 <HAL_TIM_Base_MspInit+0x74>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d115      	bne.n	8002576 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <HAL_TIM_Base_MspInit+0x70>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <HAL_TIM_Base_MspInit+0x70>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_TIM_Base_MspInit+0x70>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	2100      	movs	r1, #0
 800256a:	201d      	movs	r0, #29
 800256c:	f000 fa81 	bl	8002a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002570:	201d      	movs	r0, #29
 8002572:	f000 fa9a 	bl	8002aaa <HAL_NVIC_EnableIRQ>
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	40000400 	.word	0x40000400

08002588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800258c:	e7fe      	b.n	800258c <NMI_Handler+0x4>

0800258e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002592:	e7fe      	b.n	8002592 <HardFault_Handler+0x4>

08002594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002598:	e7fe      	b.n	8002598 <MemManage_Handler+0x4>

0800259a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800259e:	e7fe      	b.n	800259e <BusFault_Handler+0x4>

080025a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025a4:	e7fe      	b.n	80025a4 <UsageFault_Handler+0x4>

080025a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025d4:	f000 f92e 	bl	8002834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}

080025dc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 80025f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025f4:	481b      	ldr	r0, [pc, #108]	; (8002664 <TIM2_IRQHandler+0x78>)
 80025f6:	f000 fc40 	bl	8002e7a <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <TIM2_IRQHandler+0x7c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d111      	bne.n	8002626 <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 8002602:	4b1a      	ldr	r3, [pc, #104]	; (800266c <TIM2_IRQHandler+0x80>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2bc8      	cmp	r3, #200	; 0xc8
 8002608:	dc0a      	bgt.n	8002620 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 800260a:	4b18      	ldr	r3, [pc, #96]	; (800266c <TIM2_IRQHandler+0x80>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4b18      	ldr	r3, [pc, #96]	; (8002670 <TIM2_IRQHandler+0x84>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 8002614:	4b15      	ldr	r3, [pc, #84]	; (800266c <TIM2_IRQHandler+0x80>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	4a14      	ldr	r2, [pc, #80]	; (800266c <TIM2_IRQHandler+0x80>)
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e002      	b.n	8002626 <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <TIM2_IRQHandler+0x7c>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <TIM2_IRQHandler+0x7c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d114      	bne.n	8002658 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <TIM2_IRQHandler+0x80>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b63      	cmp	r3, #99	; 0x63
 8002634:	dd0a      	ble.n	800264c <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <TIM2_IRQHandler+0x80>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <TIM2_IRQHandler+0x84>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 8002640:	4b0a      	ldr	r3, [pc, #40]	; (800266c <TIM2_IRQHandler+0x80>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	3b01      	subs	r3, #1
 8002646:	4a09      	ldr	r2, [pc, #36]	; (800266c <TIM2_IRQHandler+0x80>)
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e005      	b.n	8002658 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <TIM2_IRQHandler+0x7c>)
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
		  i = 100;
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <TIM2_IRQHandler+0x80>)
 8002654:	2264      	movs	r2, #100	; 0x64
 8002656:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002658:	4805      	ldr	r0, [pc, #20]	; (8002670 <TIM2_IRQHandler+0x84>)
 800265a:	f004 fafc 	bl	8006c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40020c00 	.word	0x40020c00
 8002668:	200000c0 	.word	0x200000c0
 800266c:	20000008 	.word	0x20000008
 8002670:	200002a0 	.word	0x200002a0

08002674 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800267c:	4804      	ldr	r0, [pc, #16]	; (8002690 <TIM3_IRQHandler+0x1c>)
 800267e:	f000 fbfc 	bl	8002e7a <HAL_GPIO_TogglePin>
  read_digits();
 8002682:	f7fe feeb 	bl	800145c <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002686:	4803      	ldr	r0, [pc, #12]	; (8002694 <TIM3_IRQHandler+0x20>)
 8002688:	f004 fae5 	bl	8006c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40020c00 	.word	0x40020c00
 8002694:	200001a8 	.word	0x200001a8

08002698 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800269c:	4802      	ldr	r0, [pc, #8]	; (80026a8 <OTG_FS_IRQHandler+0x10>)
 800269e:	f000 fe71 	bl	8003384 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2000070c 	.word	0x2000070c

080026ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b4:	4a14      	ldr	r2, [pc, #80]	; (8002708 <_sbrk+0x5c>)
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <_sbrk+0x60>)
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <_sbrk+0x64>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <_sbrk+0x64>)
 80026ca:	4a12      	ldr	r2, [pc, #72]	; (8002714 <_sbrk+0x68>)
 80026cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <_sbrk+0x64>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d207      	bcs.n	80026ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026dc:	f008 fa80 	bl	800abe0 <__errno>
 80026e0:	4603      	mov	r3, r0
 80026e2:	220c      	movs	r2, #12
 80026e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ea:	e009      	b.n	8002700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <_sbrk+0x64>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <_sbrk+0x64>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	4a05      	ldr	r2, [pc, #20]	; (8002710 <_sbrk+0x64>)
 80026fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20020000 	.word	0x20020000
 800270c:	00000400 	.word	0x00000400
 8002710:	200000c4 	.word	0x200000c4
 8002714:	20000a20 	.word	0x20000a20

08002718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <SystemInit+0x20>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	4a05      	ldr	r2, [pc, #20]	; (8002738 <SystemInit+0x20>)
 8002724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800273c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002774 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002740:	480d      	ldr	r0, [pc, #52]	; (8002778 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002742:	490e      	ldr	r1, [pc, #56]	; (800277c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002744:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002748:	e002      	b.n	8002750 <LoopCopyDataInit>

0800274a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800274a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800274c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800274e:	3304      	adds	r3, #4

08002750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002754:	d3f9      	bcc.n	800274a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002756:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002758:	4c0b      	ldr	r4, [pc, #44]	; (8002788 <LoopFillZerobss+0x26>)
  movs r3, #0
 800275a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800275c:	e001      	b.n	8002762 <LoopFillZerobss>

0800275e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800275e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002760:	3204      	adds	r2, #4

08002762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002764:	d3fb      	bcc.n	800275e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002766:	f7ff ffd7 	bl	8002718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800276a:	f008 fa3f 	bl	800abec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800276e:	f7ff f87b 	bl	8001868 <main>
  bx  lr    
 8002772:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002774:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800277c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002780:	0800b2d8 	.word	0x0800b2d8
  ldr r2, =_sbss
 8002784:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002788:	20000a20 	.word	0x20000a20

0800278c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800278c:	e7fe      	b.n	800278c <ADC_IRQHandler>
	...

08002790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_Init+0x40>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0d      	ldr	r2, [pc, #52]	; (80027d0 <HAL_Init+0x40>)
 800279a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800279e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_Init+0x40>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <HAL_Init+0x40>)
 80027a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ac:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <HAL_Init+0x40>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <HAL_Init+0x40>)
 80027b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b8:	2003      	movs	r0, #3
 80027ba:	f000 f94f 	bl	8002a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027be:	2000      	movs	r0, #0
 80027c0:	f000 f808 	bl	80027d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027c4:	f7ff fc9a 	bl	80020fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40023c00 	.word	0x40023c00

080027d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_InitTick+0x54>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_InitTick+0x58>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	4619      	mov	r1, r3
 80027e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f967 	bl	8002ac6 <HAL_SYSTICK_Config>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e00e      	b.n	8002820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b0f      	cmp	r3, #15
 8002806:	d80a      	bhi.n	800281e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002808:	2200      	movs	r2, #0
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002810:	f000 f92f 	bl	8002a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002814:	4a06      	ldr	r2, [pc, #24]	; (8002830 <HAL_InitTick+0x5c>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e000      	b.n	8002820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	2000000c 	.word	0x2000000c
 800282c:	20000014 	.word	0x20000014
 8002830:	20000010 	.word	0x20000010

08002834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_IncTick+0x20>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_IncTick+0x24>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4413      	add	r3, r2
 8002844:	4a04      	ldr	r2, [pc, #16]	; (8002858 <HAL_IncTick+0x24>)
 8002846:	6013      	str	r3, [r2, #0]
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000014 	.word	0x20000014
 8002858:	20000330 	.word	0x20000330

0800285c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return uwTick;
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_GetTick+0x14>)
 8002862:	681b      	ldr	r3, [r3, #0]
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000330 	.word	0x20000330

08002874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800287c:	f7ff ffee 	bl	800285c <HAL_GetTick>
 8002880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800288c:	d005      	beq.n	800289a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <HAL_Delay+0x44>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4413      	add	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800289a:	bf00      	nop
 800289c:	f7ff ffde 	bl	800285c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d8f7      	bhi.n	800289c <HAL_Delay+0x28>
  {
  }
}
 80028ac:	bf00      	nop
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000014 	.word	0x20000014

080028bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <__NVIC_SetPriorityGrouping+0x44>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d8:	4013      	ands	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ee:	4a04      	ldr	r2, [pc, #16]	; (8002900 <__NVIC_SetPriorityGrouping+0x44>)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	60d3      	str	r3, [r2, #12]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <__NVIC_GetPriorityGrouping+0x18>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	0a1b      	lsrs	r3, r3, #8
 800290e:	f003 0307 	and.w	r3, r3, #7
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	2b00      	cmp	r3, #0
 8002930:	db0b      	blt.n	800294a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	f003 021f 	and.w	r2, r3, #31
 8002938:	4907      	ldr	r1, [pc, #28]	; (8002958 <__NVIC_EnableIRQ+0x38>)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2001      	movs	r0, #1
 8002942:	fa00 f202 	lsl.w	r2, r0, r2
 8002946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000e100 	.word	0xe000e100

0800295c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	6039      	str	r1, [r7, #0]
 8002966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296c:	2b00      	cmp	r3, #0
 800296e:	db0a      	blt.n	8002986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	490c      	ldr	r1, [pc, #48]	; (80029a8 <__NVIC_SetPriority+0x4c>)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	0112      	lsls	r2, r2, #4
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	440b      	add	r3, r1
 8002980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002984:	e00a      	b.n	800299c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4908      	ldr	r1, [pc, #32]	; (80029ac <__NVIC_SetPriority+0x50>)
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	3b04      	subs	r3, #4
 8002994:	0112      	lsls	r2, r2, #4
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	440b      	add	r3, r1
 800299a:	761a      	strb	r2, [r3, #24]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000e100 	.word	0xe000e100
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f1c3 0307 	rsb	r3, r3, #7
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	bf28      	it	cs
 80029ce:	2304      	movcs	r3, #4
 80029d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3304      	adds	r3, #4
 80029d6:	2b06      	cmp	r3, #6
 80029d8:	d902      	bls.n	80029e0 <NVIC_EncodePriority+0x30>
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3b03      	subs	r3, #3
 80029de:	e000      	b.n	80029e2 <NVIC_EncodePriority+0x32>
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43da      	mvns	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	401a      	ands	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	43d9      	mvns	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	4313      	orrs	r3, r2
         );
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3724      	adds	r7, #36	; 0x24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a28:	d301      	bcc.n	8002a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00f      	b.n	8002a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <SysTick_Config+0x40>)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a36:	210f      	movs	r1, #15
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a3c:	f7ff ff8e 	bl	800295c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <SysTick_Config+0x40>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a46:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <SysTick_Config+0x40>)
 8002a48:	2207      	movs	r2, #7
 8002a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	e000e010 	.word	0xe000e010

08002a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff ff29 	bl	80028bc <__NVIC_SetPriorityGrouping>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b086      	sub	sp, #24
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	4603      	mov	r3, r0
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a84:	f7ff ff3e 	bl	8002904 <__NVIC_GetPriorityGrouping>
 8002a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68b9      	ldr	r1, [r7, #8]
 8002a8e:	6978      	ldr	r0, [r7, #20]
 8002a90:	f7ff ff8e 	bl	80029b0 <NVIC_EncodePriority>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ff5d 	bl	800295c <__NVIC_SetPriority>
}
 8002aa2:	bf00      	nop
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff31 	bl	8002920 <__NVIC_EnableIRQ>
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff ffa2 	bl	8002a18 <SysTick_Config>
 8002ad4:	4603      	mov	r3, r0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b089      	sub	sp, #36	; 0x24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	e16b      	b.n	8002dd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002afc:	2201      	movs	r2, #1
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	f040 815a 	bne.w	8002dce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d005      	beq.n	8002b32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d130      	bne.n	8002b94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b68:	2201      	movs	r2, #1
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f003 0201 	and.w	r2, r3, #1
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d017      	beq.n	8002bd0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	2203      	movs	r2, #3
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d123      	bne.n	8002c24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	08da      	lsrs	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3208      	adds	r2, #8
 8002be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	220f      	movs	r2, #15
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	08da      	lsrs	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3208      	adds	r2, #8
 8002c1e:	69b9      	ldr	r1, [r7, #24]
 8002c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	2203      	movs	r2, #3
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0203 	and.w	r2, r3, #3
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80b4 	beq.w	8002dce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	4b60      	ldr	r3, [pc, #384]	; (8002dec <HAL_GPIO_Init+0x30c>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	4a5f      	ldr	r2, [pc, #380]	; (8002dec <HAL_GPIO_Init+0x30c>)
 8002c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c74:	6453      	str	r3, [r2, #68]	; 0x44
 8002c76:	4b5d      	ldr	r3, [pc, #372]	; (8002dec <HAL_GPIO_Init+0x30c>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c82:	4a5b      	ldr	r2, [pc, #364]	; (8002df0 <HAL_GPIO_Init+0x310>)
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	089b      	lsrs	r3, r3, #2
 8002c88:	3302      	adds	r3, #2
 8002c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	220f      	movs	r2, #15
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a52      	ldr	r2, [pc, #328]	; (8002df4 <HAL_GPIO_Init+0x314>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d02b      	beq.n	8002d06 <HAL_GPIO_Init+0x226>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a51      	ldr	r2, [pc, #324]	; (8002df8 <HAL_GPIO_Init+0x318>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d025      	beq.n	8002d02 <HAL_GPIO_Init+0x222>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a50      	ldr	r2, [pc, #320]	; (8002dfc <HAL_GPIO_Init+0x31c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d01f      	beq.n	8002cfe <HAL_GPIO_Init+0x21e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4f      	ldr	r2, [pc, #316]	; (8002e00 <HAL_GPIO_Init+0x320>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d019      	beq.n	8002cfa <HAL_GPIO_Init+0x21a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4e      	ldr	r2, [pc, #312]	; (8002e04 <HAL_GPIO_Init+0x324>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0x216>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4d      	ldr	r2, [pc, #308]	; (8002e08 <HAL_GPIO_Init+0x328>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_GPIO_Init+0x212>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a4c      	ldr	r2, [pc, #304]	; (8002e0c <HAL_GPIO_Init+0x32c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <HAL_GPIO_Init+0x20e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a4b      	ldr	r2, [pc, #300]	; (8002e10 <HAL_GPIO_Init+0x330>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_GPIO_Init+0x20a>
 8002ce6:	2307      	movs	r3, #7
 8002ce8:	e00e      	b.n	8002d08 <HAL_GPIO_Init+0x228>
 8002cea:	2308      	movs	r3, #8
 8002cec:	e00c      	b.n	8002d08 <HAL_GPIO_Init+0x228>
 8002cee:	2306      	movs	r3, #6
 8002cf0:	e00a      	b.n	8002d08 <HAL_GPIO_Init+0x228>
 8002cf2:	2305      	movs	r3, #5
 8002cf4:	e008      	b.n	8002d08 <HAL_GPIO_Init+0x228>
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	e006      	b.n	8002d08 <HAL_GPIO_Init+0x228>
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e004      	b.n	8002d08 <HAL_GPIO_Init+0x228>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e002      	b.n	8002d08 <HAL_GPIO_Init+0x228>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <HAL_GPIO_Init+0x228>
 8002d06:	2300      	movs	r3, #0
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	f002 0203 	and.w	r2, r2, #3
 8002d0e:	0092      	lsls	r2, r2, #2
 8002d10:	4093      	lsls	r3, r2
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d18:	4935      	ldr	r1, [pc, #212]	; (8002df0 <HAL_GPIO_Init+0x310>)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	089b      	lsrs	r3, r3, #2
 8002d1e:	3302      	adds	r3, #2
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d26:	4b3b      	ldr	r3, [pc, #236]	; (8002e14 <HAL_GPIO_Init+0x334>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d4a:	4a32      	ldr	r2, [pc, #200]	; (8002e14 <HAL_GPIO_Init+0x334>)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d50:	4b30      	ldr	r3, [pc, #192]	; (8002e14 <HAL_GPIO_Init+0x334>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d74:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <HAL_GPIO_Init+0x334>)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d7a:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <HAL_GPIO_Init+0x334>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d9e:	4a1d      	ldr	r2, [pc, #116]	; (8002e14 <HAL_GPIO_Init+0x334>)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da4:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <HAL_GPIO_Init+0x334>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dc8:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <HAL_GPIO_Init+0x334>)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b0f      	cmp	r3, #15
 8002dd8:	f67f ae90 	bls.w	8002afc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	3724      	adds	r7, #36	; 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40013800 	.word	0x40013800
 8002df4:	40020000 	.word	0x40020000
 8002df8:	40020400 	.word	0x40020400
 8002dfc:	40020800 	.word	0x40020800
 8002e00:	40020c00 	.word	0x40020c00
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40021400 	.word	0x40021400
 8002e0c:	40021800 	.word	0x40021800
 8002e10:	40021c00 	.word	0x40021c00
 8002e14:	40013c00 	.word	0x40013c00

08002e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	887b      	ldrh	r3, [r7, #2]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
 8002e34:	e001      	b.n	8002e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	807b      	strh	r3, [r7, #2]
 8002e54:	4613      	mov	r3, r2
 8002e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e58:	787b      	ldrb	r3, [r7, #1]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e5e:	887a      	ldrh	r2, [r7, #2]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e64:	e003      	b.n	8002e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e66:	887b      	ldrh	r3, [r7, #2]
 8002e68:	041a      	lsls	r2, r3, #16
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	619a      	str	r2, [r3, #24]
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b085      	sub	sp, #20
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e8c:	887a      	ldrh	r2, [r7, #2]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4013      	ands	r3, r2
 8002e92:	041a      	lsls	r2, r3, #16
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	43d9      	mvns	r1, r3
 8002e98:	887b      	ldrh	r3, [r7, #2]
 8002e9a:	400b      	ands	r3, r1
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	619a      	str	r2, [r3, #24]
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002eae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eb0:	b08f      	sub	sp, #60	; 0x3c
 8002eb2:	af0a      	add	r7, sp, #40	; 0x28
 8002eb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e054      	b.n	8002f6a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d106      	bne.n	8002ee0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f007 fbd6 	bl	800a68c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d102      	bne.n	8002efa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f004 fd78 	bl	80079f4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	687e      	ldr	r6, [r7, #4]
 8002f0c:	466d      	mov	r5, sp
 8002f0e:	f106 0410 	add.w	r4, r6, #16
 8002f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f22:	1d33      	adds	r3, r6, #4
 8002f24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f26:	6838      	ldr	r0, [r7, #0]
 8002f28:	f004 fcf2 	bl	8007910 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2101      	movs	r1, #1
 8002f32:	4618      	mov	r0, r3
 8002f34:	f004 fd6f 	bl	8007a16 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	603b      	str	r3, [r7, #0]
 8002f3e:	687e      	ldr	r6, [r7, #4]
 8002f40:	466d      	mov	r5, sp
 8002f42:	f106 0410 	add.w	r4, r6, #16
 8002f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f52:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f56:	1d33      	adds	r3, r6, #4
 8002f58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f5a:	6838      	ldr	r0, [r7, #0]
 8002f5c:	f004 fe82 	bl	8007c64 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f72 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002f72:	b590      	push	{r4, r7, lr}
 8002f74:	b089      	sub	sp, #36	; 0x24
 8002f76:	af04      	add	r7, sp, #16
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	4608      	mov	r0, r1
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4603      	mov	r3, r0
 8002f82:	70fb      	strb	r3, [r7, #3]
 8002f84:	460b      	mov	r3, r1
 8002f86:	70bb      	strb	r3, [r7, #2]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_HCD_HC_Init+0x28>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e076      	b.n	8003088 <HAL_HCD_HC_Init+0x116>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	212c      	movs	r1, #44	; 0x2c
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	4413      	add	r3, r2
 8002fae:	333d      	adds	r3, #61	; 0x3d
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	212c      	movs	r1, #44	; 0x2c
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3338      	adds	r3, #56	; 0x38
 8002fc2:	787a      	ldrb	r2, [r7, #1]
 8002fc4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	212c      	movs	r1, #44	; 0x2c
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3340      	adds	r3, #64	; 0x40
 8002fd4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002fd6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3339      	adds	r3, #57	; 0x39
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	333f      	adds	r3, #63	; 0x3f
 8002ff8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002ffc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	78ba      	ldrb	r2, [r7, #2]
 8003002:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003006:	b2d0      	uxtb	r0, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	212c      	movs	r1, #44	; 0x2c
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	333a      	adds	r3, #58	; 0x3a
 8003014:	4602      	mov	r2, r0
 8003016:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003018:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800301c:	2b00      	cmp	r3, #0
 800301e:	da09      	bge.n	8003034 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	333b      	adds	r3, #59	; 0x3b
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
 8003032:	e008      	b.n	8003046 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	212c      	movs	r1, #44	; 0x2c
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	4413      	add	r3, r2
 8003040:	333b      	adds	r3, #59	; 0x3b
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	212c      	movs	r1, #44	; 0x2c
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	333c      	adds	r3, #60	; 0x3c
 8003054:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003058:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	787c      	ldrb	r4, [r7, #1]
 8003060:	78ba      	ldrb	r2, [r7, #2]
 8003062:	78f9      	ldrb	r1, [r7, #3]
 8003064:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003066:	9302      	str	r3, [sp, #8]
 8003068:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	4623      	mov	r3, r4
 8003076:	f004 ff77 	bl	8007f68 <USB_HC_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003086:	7bfb      	ldrb	r3, [r7, #15]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bd90      	pop	{r4, r7, pc}

08003090 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_HCD_HC_Halt+0x1e>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e00f      	b.n	80030ce <HAL_HCD_HC_Halt+0x3e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f005 f9b3 	bl	800842a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	4608      	mov	r0, r1
 80030e2:	4611      	mov	r1, r2
 80030e4:	461a      	mov	r2, r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	70fb      	strb	r3, [r7, #3]
 80030ea:	460b      	mov	r3, r1
 80030ec:	70bb      	strb	r3, [r7, #2]
 80030ee:	4613      	mov	r3, r2
 80030f0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	333b      	adds	r3, #59	; 0x3b
 8003100:	78ba      	ldrb	r2, [r7, #2]
 8003102:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	212c      	movs	r1, #44	; 0x2c
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	4413      	add	r3, r2
 8003110:	333f      	adds	r3, #63	; 0x3f
 8003112:	787a      	ldrb	r2, [r7, #1]
 8003114:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003116:	7c3b      	ldrb	r3, [r7, #16]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d112      	bne.n	8003142 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	3342      	adds	r3, #66	; 0x42
 800312a:	2203      	movs	r2, #3
 800312c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	212c      	movs	r1, #44	; 0x2c
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	4413      	add	r3, r2
 800313a:	333d      	adds	r3, #61	; 0x3d
 800313c:	7f3a      	ldrb	r2, [r7, #28]
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	e008      	b.n	8003154 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	212c      	movs	r1, #44	; 0x2c
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	4413      	add	r3, r2
 800314e:	3342      	adds	r3, #66	; 0x42
 8003150:	2202      	movs	r2, #2
 8003152:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003154:	787b      	ldrb	r3, [r7, #1]
 8003156:	2b03      	cmp	r3, #3
 8003158:	f200 80c6 	bhi.w	80032e8 <HAL_HCD_HC_SubmitRequest+0x210>
 800315c:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800315e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003162:	bf00      	nop
 8003164:	08003175 	.word	0x08003175
 8003168:	080032d5 	.word	0x080032d5
 800316c:	080031d9 	.word	0x080031d9
 8003170:	08003257 	.word	0x08003257
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003174:	7c3b      	ldrb	r3, [r7, #16]
 8003176:	2b01      	cmp	r3, #1
 8003178:	f040 80b8 	bne.w	80032ec <HAL_HCD_HC_SubmitRequest+0x214>
 800317c:	78bb      	ldrb	r3, [r7, #2]
 800317e:	2b00      	cmp	r3, #0
 8003180:	f040 80b4 	bne.w	80032ec <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003184:	8b3b      	ldrh	r3, [r7, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d108      	bne.n	800319c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	212c      	movs	r1, #44	; 0x2c
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	3355      	adds	r3, #85	; 0x55
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	212c      	movs	r1, #44	; 0x2c
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	3355      	adds	r3, #85	; 0x55
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d109      	bne.n	80031c4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	212c      	movs	r1, #44	; 0x2c
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	3342      	adds	r3, #66	; 0x42
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80031c2:	e093      	b.n	80032ec <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	212c      	movs	r1, #44	; 0x2c
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	3342      	adds	r3, #66	; 0x42
 80031d2:	2202      	movs	r2, #2
 80031d4:	701a      	strb	r2, [r3, #0]
      break;
 80031d6:	e089      	b.n	80032ec <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80031d8:	78bb      	ldrb	r3, [r7, #2]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d11d      	bne.n	800321a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	212c      	movs	r1, #44	; 0x2c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	3355      	adds	r3, #85	; 0x55
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d109      	bne.n	8003206 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	3342      	adds	r3, #66	; 0x42
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003204:	e073      	b.n	80032ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	3342      	adds	r3, #66	; 0x42
 8003214:	2202      	movs	r2, #2
 8003216:	701a      	strb	r2, [r3, #0]
      break;
 8003218:	e069      	b.n	80032ee <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	212c      	movs	r1, #44	; 0x2c
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	3354      	adds	r3, #84	; 0x54
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	212c      	movs	r1, #44	; 0x2c
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	4413      	add	r3, r2
 800323a:	3342      	adds	r3, #66	; 0x42
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
      break;
 8003240:	e055      	b.n	80032ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	3342      	adds	r3, #66	; 0x42
 8003250:	2202      	movs	r2, #2
 8003252:	701a      	strb	r2, [r3, #0]
      break;
 8003254:	e04b      	b.n	80032ee <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003256:	78bb      	ldrb	r3, [r7, #2]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d11d      	bne.n	8003298 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	3355      	adds	r3, #85	; 0x55
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d109      	bne.n	8003284 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	212c      	movs	r1, #44	; 0x2c
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	4413      	add	r3, r2
 800327c:	3342      	adds	r3, #66	; 0x42
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003282:	e034      	b.n	80032ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3342      	adds	r3, #66	; 0x42
 8003292:	2202      	movs	r2, #2
 8003294:	701a      	strb	r2, [r3, #0]
      break;
 8003296:	e02a      	b.n	80032ee <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	3354      	adds	r3, #84	; 0x54
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d109      	bne.n	80032c0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3342      	adds	r3, #66	; 0x42
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
      break;
 80032be:	e016      	b.n	80032ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	3342      	adds	r3, #66	; 0x42
 80032ce:	2202      	movs	r2, #2
 80032d0:	701a      	strb	r2, [r3, #0]
      break;
 80032d2:	e00c      	b.n	80032ee <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	212c      	movs	r1, #44	; 0x2c
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	3342      	adds	r3, #66	; 0x42
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
      break;
 80032e6:	e002      	b.n	80032ee <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80032e8:	bf00      	nop
 80032ea:	e000      	b.n	80032ee <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80032ec:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	212c      	movs	r1, #44	; 0x2c
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	3344      	adds	r3, #68	; 0x44
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	8b3a      	ldrh	r2, [r7, #24]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	202c      	movs	r0, #44	; 0x2c
 8003308:	fb00 f303 	mul.w	r3, r0, r3
 800330c:	440b      	add	r3, r1
 800330e:	334c      	adds	r3, #76	; 0x4c
 8003310:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	212c      	movs	r1, #44	; 0x2c
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	4413      	add	r3, r2
 800331e:	3360      	adds	r3, #96	; 0x60
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	212c      	movs	r1, #44	; 0x2c
 800332a:	fb01 f303 	mul.w	r3, r1, r3
 800332e:	4413      	add	r3, r2
 8003330:	3350      	adds	r3, #80	; 0x50
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003336:	78fb      	ldrb	r3, [r7, #3]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	212c      	movs	r1, #44	; 0x2c
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	3339      	adds	r3, #57	; 0x39
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	212c      	movs	r1, #44	; 0x2c
 800334e:	fb01 f303 	mul.w	r3, r1, r3
 8003352:	4413      	add	r3, r2
 8003354:	3361      	adds	r3, #97	; 0x61
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	222c      	movs	r2, #44	; 0x2c
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	3338      	adds	r3, #56	; 0x38
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	18d1      	adds	r1, r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	f004 ff06 	bl	8008184 <USB_HC_StartXfer>
 8003378:	4603      	mov	r3, r0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop

08003384 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f004 fc1f 	bl	8007bde <USB_GetMode>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	f040 80ef 	bne.w	8003586 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f004 fc03 	bl	8007bb8 <USB_ReadInterrupts>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80e5 	beq.w	8003584 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f004 fbfa 	bl	8007bb8 <USB_ReadInterrupts>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ce:	d104      	bne.n	80033da <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80033d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f004 fbea 	bl	8007bb8 <USB_ReadInterrupts>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ee:	d104      	bne.n	80033fa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 fbda 	bl	8007bb8 <USB_ReadInterrupts>
 8003404:	4603      	mov	r3, r0
 8003406:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800340a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800340e:	d104      	bne.n	800341a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003418:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f004 fbca 	bl	8007bb8 <USB_ReadInterrupts>
 8003424:	4603      	mov	r3, r0
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b02      	cmp	r3, #2
 800342c:	d103      	bne.n	8003436 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2202      	movs	r2, #2
 8003434:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f004 fbbc 	bl	8007bb8 <USB_ReadInterrupts>
 8003440:	4603      	mov	r3, r0
 8003442:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800344a:	d115      	bne.n	8003478 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003454:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d108      	bne.n	8003478 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f007 f98e 	bl	800a788 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2101      	movs	r1, #1
 8003472:	4618      	mov	r0, r3
 8003474:	f004 fcb2 	bl	8007ddc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f004 fb9b 	bl	8007bb8 <USB_ReadInterrupts>
 8003482:	4603      	mov	r3, r0
 8003484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800348c:	d102      	bne.n	8003494 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f001 f9ff 	bl	8004892 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f004 fb8d 	bl	8007bb8 <USB_ReadInterrupts>
 800349e:	4603      	mov	r3, r0
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d106      	bne.n	80034b6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f007 f951 	bl	800a750 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2208      	movs	r2, #8
 80034b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f004 fb7c 	bl	8007bb8 <USB_ReadInterrupts>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b10      	cmp	r3, #16
 80034c8:	d101      	bne.n	80034ce <HAL_HCD_IRQHandler+0x14a>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <HAL_HCD_IRQHandler+0x14c>
 80034ce:	2300      	movs	r3, #0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d012      	beq.n	80034fa <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0210 	bic.w	r2, r2, #16
 80034e2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f001 f902 	bl	80046ee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699a      	ldr	r2, [r3, #24]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0210 	orr.w	r2, r2, #16
 80034f8:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f004 fb5a 	bl	8007bb8 <USB_ReadInterrupts>
 8003504:	4603      	mov	r3, r0
 8003506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800350e:	d13a      	bne.n	8003586 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f004 ff77 	bl	8008408 <USB_HC_ReadInterrupt>
 800351a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	e025      	b.n	800356e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	fa22 f303 	lsr.w	r3, r2, r3
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d018      	beq.n	8003568 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4413      	add	r3, r2
 800353e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800354c:	d106      	bne.n	800355c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	4619      	mov	r1, r3
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f8ab 	bl	80036b0 <HCD_HC_IN_IRQHandler>
 800355a:	e005      	b.n	8003568 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fcc6 	bl	8003ef4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	3301      	adds	r3, #1
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	429a      	cmp	r2, r3
 8003576:	d3d4      	bcc.n	8003522 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003580:	615a      	str	r2, [r3, #20]
 8003582:	e000      	b.n	8003586 <HAL_HCD_IRQHandler+0x202>
      return;
 8003584:	bf00      	nop
    }
  }
}
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_HCD_Start+0x16>
 800359e:	2302      	movs	r3, #2
 80035a0:	e013      	b.n	80035ca <HAL_HCD_Start+0x3e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f004 fa0f 	bl	80079d2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2101      	movs	r1, #1
 80035ba:	4618      	mov	r0, r3
 80035bc:	f004 fc72 	bl	8007ea4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_HCD_Stop+0x16>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e00d      	b.n	8003604 <HAL_HCD_Stop+0x32>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f005 f871 	bl	80086dc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f004 fc19 	bl	8007e50 <USB_ResetPort>
 800361e:	4603      	mov	r3, r0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	3360      	adds	r3, #96	; 0x60
 8003642:	781b      	ldrb	r3, [r3, #0]
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	212c      	movs	r1, #44	; 0x2c
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	4413      	add	r3, r2
 8003668:	3350      	adds	r3, #80	; 0x50
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f004 fc5d 	bl	8007f44 <USB_GetCurrentFrame>
 800368a:	4603      	mov	r3, r0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f004 fc38 	bl	8007f16 <USB_GetHostSpeed>
 80036a6:	4603      	mov	r3, r0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d119      	bne.n	8003714 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ec:	461a      	mov	r2, r3
 80036ee:	2304      	movs	r3, #4
 80036f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	0151      	lsls	r1, r2, #5
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	440a      	add	r2, r1
 8003708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800370c:	f043 0302 	orr.w	r3, r3, #2
 8003710:	60d3      	str	r3, [r2, #12]
 8003712:	e101      	b.n	8003918 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4413      	add	r3, r2
 800371c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372a:	d12b      	bne.n	8003784 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4413      	add	r3, r2
 8003734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003738:	461a      	mov	r2, r3
 800373a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800373e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	212c      	movs	r1, #44	; 0x2c
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	4413      	add	r3, r2
 800374c:	3361      	adds	r3, #97	; 0x61
 800374e:	2207      	movs	r2, #7
 8003750:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4413      	add	r3, r2
 800375a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	0151      	lsls	r1, r2, #5
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	440a      	add	r2, r1
 8003768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800376c:	f043 0302 	orr.w	r3, r3, #2
 8003770:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f004 fe54 	bl	800842a <USB_HC_Halt>
 8003782:	e0c9      	b.n	8003918 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4413      	add	r3, r2
 800378c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b20      	cmp	r3, #32
 8003798:	d109      	bne.n	80037ae <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a6:	461a      	mov	r2, r3
 80037a8:	2320      	movs	r3, #32
 80037aa:	6093      	str	r3, [r2, #8]
 80037ac:	e0b4      	b.n	8003918 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d133      	bne.n	800382c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	0151      	lsls	r1, r2, #5
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	440a      	add	r2, r1
 80037da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037de:	f043 0302 	orr.w	r3, r3, #2
 80037e2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	212c      	movs	r1, #44	; 0x2c
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	3361      	adds	r3, #97	; 0x61
 80037f2:	2205      	movs	r2, #5
 80037f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003802:	461a      	mov	r2, r3
 8003804:	2310      	movs	r3, #16
 8003806:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4413      	add	r3, r2
 8003810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003814:	461a      	mov	r2, r3
 8003816:	2308      	movs	r3, #8
 8003818:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f004 fe00 	bl	800842a <USB_HC_Halt>
 800382a:	e075      	b.n	8003918 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	4413      	add	r3, r2
 8003834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003842:	d134      	bne.n	80038ae <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	4413      	add	r3, r2
 800384c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	0151      	lsls	r1, r2, #5
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	440a      	add	r2, r1
 800385a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800385e:	f043 0302 	orr.w	r3, r3, #2
 8003862:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	212c      	movs	r1, #44	; 0x2c
 800386a:	fb01 f303 	mul.w	r3, r1, r3
 800386e:	4413      	add	r3, r2
 8003870:	3361      	adds	r3, #97	; 0x61
 8003872:	2208      	movs	r2, #8
 8003874:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4413      	add	r3, r2
 800387e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003882:	461a      	mov	r2, r3
 8003884:	2310      	movs	r3, #16
 8003886:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4413      	add	r3, r2
 8003890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003894:	461a      	mov	r2, r3
 8003896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800389a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	4611      	mov	r1, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f004 fdbf 	bl	800842a <USB_HC_Halt>
 80038ac:	e034      	b.n	8003918 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c0:	2b80      	cmp	r3, #128	; 0x80
 80038c2:	d129      	bne.n	8003918 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	0151      	lsls	r1, r2, #5
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	440a      	add	r2, r1
 80038da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038de:	f043 0302 	orr.w	r3, r3, #2
 80038e2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	212c      	movs	r1, #44	; 0x2c
 80038ea:	fb01 f303 	mul.w	r3, r1, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	3361      	adds	r3, #97	; 0x61
 80038f2:	2206      	movs	r2, #6
 80038f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f004 fd92 	bl	800842a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4413      	add	r3, r2
 800390e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003912:	461a      	mov	r2, r3
 8003914:	2380      	movs	r3, #128	; 0x80
 8003916:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800392a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800392e:	d122      	bne.n	8003976 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4413      	add	r3, r2
 8003938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	0151      	lsls	r1, r2, #5
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	440a      	add	r2, r1
 8003946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800394a:	f043 0302 	orr.w	r3, r3, #2
 800394e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	4611      	mov	r1, r2
 800395a:	4618      	mov	r0, r3
 800395c:	f004 fd65 	bl	800842a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4413      	add	r3, r2
 8003968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396c:	461a      	mov	r2, r3
 800396e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003972:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003974:	e2ba      	b.n	8003eec <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4413      	add	r3, r2
 800397e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b01      	cmp	r3, #1
 800398a:	f040 811b 	bne.w	8003bc4 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d019      	beq.n	80039ca <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	212c      	movs	r1, #44	; 0x2c
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	4413      	add	r3, r2
 80039a2:	3348      	adds	r3, #72	; 0x48
 80039a4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	0159      	lsls	r1, r3, #5
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	440b      	add	r3, r1
 80039ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80039b8:	1ad2      	subs	r2, r2, r3
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	202c      	movs	r0, #44	; 0x2c
 80039c0:	fb00 f303 	mul.w	r3, r0, r3
 80039c4:	440b      	add	r3, r1
 80039c6:	3350      	adds	r3, #80	; 0x50
 80039c8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	212c      	movs	r1, #44	; 0x2c
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	3361      	adds	r3, #97	; 0x61
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	335c      	adds	r3, #92	; 0x5c
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fa:	461a      	mov	r2, r3
 80039fc:	2301      	movs	r3, #1
 80039fe:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	212c      	movs	r1, #44	; 0x2c
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	333f      	adds	r3, #63	; 0x3f
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d009      	beq.n	8003a28 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	212c      	movs	r1, #44	; 0x2c
 8003a1a:	fb01 f303 	mul.w	r3, r1, r3
 8003a1e:	4413      	add	r3, r2
 8003a20:	333f      	adds	r3, #63	; 0x3f
 8003a22:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d121      	bne.n	8003a6c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	0151      	lsls	r1, r2, #5
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	440a      	add	r2, r1
 8003a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a42:	f043 0302 	orr.w	r3, r3, #2
 8003a46:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f004 fce9 	bl	800842a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a64:	461a      	mov	r2, r3
 8003a66:	2310      	movs	r3, #16
 8003a68:	6093      	str	r3, [r2, #8]
 8003a6a:	e066      	b.n	8003b3a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	212c      	movs	r1, #44	; 0x2c
 8003a72:	fb01 f303 	mul.w	r3, r1, r3
 8003a76:	4413      	add	r3, r2
 8003a78:	333f      	adds	r3, #63	; 0x3f
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d127      	bne.n	8003ad0 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	0151      	lsls	r1, r2, #5
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	440a      	add	r2, r1
 8003a96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a9e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	212c      	movs	r1, #44	; 0x2c
 8003aa6:	fb01 f303 	mul.w	r3, r1, r3
 8003aaa:	4413      	add	r3, r2
 8003aac:	3360      	adds	r3, #96	; 0x60
 8003aae:	2201      	movs	r2, #1
 8003ab0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	b2d9      	uxtb	r1, r3
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	202c      	movs	r0, #44	; 0x2c
 8003abc:	fb00 f303 	mul.w	r3, r0, r3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3360      	adds	r3, #96	; 0x60
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f006 fe6b 	bl	800a7a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ace:	e034      	b.n	8003b3a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	212c      	movs	r1, #44	; 0x2c
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	333f      	adds	r3, #63	; 0x3f
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d12a      	bne.n	8003b3a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	212c      	movs	r1, #44	; 0x2c
 8003aea:	fb01 f303 	mul.w	r3, r1, r3
 8003aee:	4413      	add	r3, r2
 8003af0:	3360      	adds	r3, #96	; 0x60
 8003af2:	2201      	movs	r2, #1
 8003af4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	212c      	movs	r1, #44	; 0x2c
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	3354      	adds	r3, #84	; 0x54
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	f083 0301 	eor.w	r3, r3, #1
 8003b0a:	b2d8      	uxtb	r0, r3
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	212c      	movs	r1, #44	; 0x2c
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	3354      	adds	r3, #84	; 0x54
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	b2d9      	uxtb	r1, r3
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	202c      	movs	r0, #44	; 0x2c
 8003b28:	fb00 f303 	mul.w	r3, r0, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3360      	adds	r3, #96	; 0x60
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f006 fe35 	bl	800a7a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d12b      	bne.n	8003b9a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	212c      	movs	r1, #44	; 0x2c
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3348      	adds	r3, #72	; 0x48
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	202c      	movs	r0, #44	; 0x2c
 8003b58:	fb00 f202 	mul.w	r2, r0, r2
 8003b5c:	440a      	add	r2, r1
 8003b5e:	3240      	adds	r2, #64	; 0x40
 8003b60:	8812      	ldrh	r2, [r2, #0]
 8003b62:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 81be 	beq.w	8003eec <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	212c      	movs	r1, #44	; 0x2c
 8003b76:	fb01 f303 	mul.w	r3, r1, r3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3354      	adds	r3, #84	; 0x54
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	f083 0301 	eor.w	r3, r3, #1
 8003b84:	b2d8      	uxtb	r0, r3
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	212c      	movs	r1, #44	; 0x2c
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	4413      	add	r3, r2
 8003b92:	3354      	adds	r3, #84	; 0x54
 8003b94:	4602      	mov	r2, r0
 8003b96:	701a      	strb	r2, [r3, #0]
}
 8003b98:	e1a8      	b.n	8003eec <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	212c      	movs	r1, #44	; 0x2c
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3354      	adds	r3, #84	; 0x54
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	f083 0301 	eor.w	r3, r3, #1
 8003bae:	b2d8      	uxtb	r0, r3
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	212c      	movs	r1, #44	; 0x2c
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	3354      	adds	r3, #84	; 0x54
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	701a      	strb	r2, [r3, #0]
}
 8003bc2:	e193      	b.n	8003eec <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	f040 8106 	bne.w	8003de8 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	0151      	lsls	r1, r2, #5
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	440a      	add	r2, r1
 8003bf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bf6:	f023 0302 	bic.w	r3, r3, #2
 8003bfa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	212c      	movs	r1, #44	; 0x2c
 8003c02:	fb01 f303 	mul.w	r3, r1, r3
 8003c06:	4413      	add	r3, r2
 8003c08:	3361      	adds	r3, #97	; 0x61
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d109      	bne.n	8003c24 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	212c      	movs	r1, #44	; 0x2c
 8003c16:	fb01 f303 	mul.w	r3, r1, r3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3360      	adds	r3, #96	; 0x60
 8003c1e:	2201      	movs	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e0c9      	b.n	8003db8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	212c      	movs	r1, #44	; 0x2c
 8003c2a:	fb01 f303 	mul.w	r3, r1, r3
 8003c2e:	4413      	add	r3, r2
 8003c30:	3361      	adds	r3, #97	; 0x61
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b05      	cmp	r3, #5
 8003c36:	d109      	bne.n	8003c4c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	3360      	adds	r3, #96	; 0x60
 8003c46:	2205      	movs	r2, #5
 8003c48:	701a      	strb	r2, [r3, #0]
 8003c4a:	e0b5      	b.n	8003db8 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	212c      	movs	r1, #44	; 0x2c
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	4413      	add	r3, r2
 8003c58:	3361      	adds	r3, #97	; 0x61
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b06      	cmp	r3, #6
 8003c5e:	d009      	beq.n	8003c74 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	212c      	movs	r1, #44	; 0x2c
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3361      	adds	r3, #97	; 0x61
 8003c6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d150      	bne.n	8003d16 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	212c      	movs	r1, #44	; 0x2c
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	335c      	adds	r3, #92	; 0x5c
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	202c      	movs	r0, #44	; 0x2c
 8003c8c:	fb00 f303 	mul.w	r3, r0, r3
 8003c90:	440b      	add	r3, r1
 8003c92:	335c      	adds	r3, #92	; 0x5c
 8003c94:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	212c      	movs	r1, #44	; 0x2c
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	335c      	adds	r3, #92	; 0x5c
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d912      	bls.n	8003cd0 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	212c      	movs	r1, #44	; 0x2c
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	335c      	adds	r3, #92	; 0x5c
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	212c      	movs	r1, #44	; 0x2c
 8003cc2:	fb01 f303 	mul.w	r3, r1, r3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3360      	adds	r3, #96	; 0x60
 8003cca:	2204      	movs	r2, #4
 8003ccc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003cce:	e073      	b.n	8003db8 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	212c      	movs	r1, #44	; 0x2c
 8003cd6:	fb01 f303 	mul.w	r3, r1, r3
 8003cda:	4413      	add	r3, r2
 8003cdc:	3360      	adds	r3, #96	; 0x60
 8003cde:	2202      	movs	r2, #2
 8003ce0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cf8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d00:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d14:	e050      	b.n	8003db8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	212c      	movs	r1, #44	; 0x2c
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	3361      	adds	r3, #97	; 0x61
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d122      	bne.n	8003d70 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	212c      	movs	r1, #44	; 0x2c
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	4413      	add	r3, r2
 8003d36:	3360      	adds	r3, #96	; 0x60
 8003d38:	2202      	movs	r2, #2
 8003d3a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d52:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d5a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d68:	461a      	mov	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	e023      	b.n	8003db8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	212c      	movs	r1, #44	; 0x2c
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3361      	adds	r3, #97	; 0x61
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b07      	cmp	r3, #7
 8003d82:	d119      	bne.n	8003db8 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	212c      	movs	r1, #44	; 0x2c
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	335c      	adds	r3, #92	; 0x5c
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	202c      	movs	r0, #44	; 0x2c
 8003d9c:	fb00 f303 	mul.w	r3, r0, r3
 8003da0:	440b      	add	r3, r1
 8003da2:	335c      	adds	r3, #92	; 0x5c
 8003da4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	212c      	movs	r1, #44	; 0x2c
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	4413      	add	r3, r2
 8003db2:	3360      	adds	r3, #96	; 0x60
 8003db4:	2204      	movs	r2, #4
 8003db6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	b2d9      	uxtb	r1, r3
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	202c      	movs	r0, #44	; 0x2c
 8003dd4:	fb00 f303 	mul.w	r3, r0, r3
 8003dd8:	4413      	add	r3, r2
 8003dda:	3360      	adds	r3, #96	; 0x60
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f006 fcdf 	bl	800a7a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003de6:	e081      	b.n	8003eec <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	2b10      	cmp	r3, #16
 8003dfc:	d176      	bne.n	8003eec <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	212c      	movs	r1, #44	; 0x2c
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	4413      	add	r3, r2
 8003e0a:	333f      	adds	r3, #63	; 0x3f
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d121      	bne.n	8003e56 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	212c      	movs	r1, #44	; 0x2c
 8003e18:	fb01 f303 	mul.w	r3, r1, r3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	335c      	adds	r3, #92	; 0x5c
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	0151      	lsls	r1, r2, #5
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	440a      	add	r2, r1
 8003e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e3e:	f043 0302 	orr.w	r3, r3, #2
 8003e42:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f004 faeb 	bl	800842a <USB_HC_Halt>
 8003e54:	e041      	b.n	8003eda <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	212c      	movs	r1, #44	; 0x2c
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	4413      	add	r3, r2
 8003e62:	333f      	adds	r3, #63	; 0x3f
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	212c      	movs	r1, #44	; 0x2c
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	333f      	adds	r3, #63	; 0x3f
 8003e78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d12d      	bne.n	8003eda <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	212c      	movs	r1, #44	; 0x2c
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	4413      	add	r3, r2
 8003e8a:	335c      	adds	r3, #92	; 0x5c
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d120      	bne.n	8003eda <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	212c      	movs	r1, #44	; 0x2c
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3361      	adds	r3, #97	; 0x61
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	0151      	lsls	r1, r2, #5
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	440a      	add	r2, r1
 8003ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ec4:	f043 0302 	orr.w	r3, r3, #2
 8003ec8:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f004 faa8 	bl	800842a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2310      	movs	r3, #16
 8003eea:	6093      	str	r3, [r2, #8]
}
 8003eec:	bf00      	nop
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d119      	bne.n	8003f58 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f30:	461a      	mov	r2, r3
 8003f32:	2304      	movs	r3, #4
 8003f34:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	0151      	lsls	r1, r2, #5
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	440a      	add	r2, r1
 8003f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f50:	f043 0302 	orr.w	r3, r3, #2
 8003f54:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003f56:	e3c6      	b.n	80046e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d13e      	bne.n	8003fec <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	2320      	movs	r3, #32
 8003f7e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	212c      	movs	r1, #44	; 0x2c
 8003f86:	fb01 f303 	mul.w	r3, r1, r3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	333d      	adds	r3, #61	; 0x3d
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	f040 83a8 	bne.w	80046e6 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	212c      	movs	r1, #44	; 0x2c
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	333d      	adds	r3, #61	; 0x3d
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	212c      	movs	r1, #44	; 0x2c
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3360      	adds	r3, #96	; 0x60
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	0151      	lsls	r1, r2, #5
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	440a      	add	r2, r1
 8003fd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fd4:	f043 0302 	orr.w	r3, r3, #2
 8003fd8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f004 fa20 	bl	800842a <USB_HC_Halt>
}
 8003fea:	e37c      	b.n	80046e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004002:	d122      	bne.n	800404a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	4413      	add	r3, r2
 800400c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	0151      	lsls	r1, r2, #5
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	440a      	add	r2, r1
 800401a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800401e:	f043 0302 	orr.w	r3, r3, #2
 8004022:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	4611      	mov	r1, r2
 800402e:	4618      	mov	r0, r3
 8004030:	f004 f9fb 	bl	800842a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	4413      	add	r3, r2
 800403c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004040:	461a      	mov	r2, r3
 8004042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004046:	6093      	str	r3, [r2, #8]
}
 8004048:	e34d      	b.n	80046e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	4413      	add	r3, r2
 8004052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b01      	cmp	r3, #1
 800405e:	d150      	bne.n	8004102 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	335c      	adds	r3, #92	; 0x5c
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	4413      	add	r3, r2
 800407a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	2b40      	cmp	r3, #64	; 0x40
 8004086:	d111      	bne.n	80040ac <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	212c      	movs	r1, #44	; 0x2c
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	4413      	add	r3, r2
 8004094:	333d      	adds	r3, #61	; 0x3d
 8004096:	2201      	movs	r2, #1
 8004098:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a6:	461a      	mov	r2, r3
 80040a8:	2340      	movs	r3, #64	; 0x40
 80040aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	0151      	lsls	r1, r2, #5
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	440a      	add	r2, r1
 80040c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040c6:	f043 0302 	orr.w	r3, r3, #2
 80040ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	4611      	mov	r1, r2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f004 f9a7 	bl	800842a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e8:	461a      	mov	r2, r3
 80040ea:	2301      	movs	r3, #1
 80040ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	212c      	movs	r1, #44	; 0x2c
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	4413      	add	r3, r2
 80040fa:	3361      	adds	r3, #97	; 0x61
 80040fc:	2201      	movs	r2, #1
 80040fe:	701a      	strb	r2, [r3, #0]
}
 8004100:	e2f1      	b.n	80046e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	4413      	add	r3, r2
 800410a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004114:	2b40      	cmp	r3, #64	; 0x40
 8004116:	d13c      	bne.n	8004192 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	212c      	movs	r1, #44	; 0x2c
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	4413      	add	r3, r2
 8004124:	3361      	adds	r3, #97	; 0x61
 8004126:	2204      	movs	r2, #4
 8004128:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	212c      	movs	r1, #44	; 0x2c
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	4413      	add	r3, r2
 8004136:	333d      	adds	r3, #61	; 0x3d
 8004138:	2201      	movs	r2, #1
 800413a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	212c      	movs	r1, #44	; 0x2c
 8004142:	fb01 f303 	mul.w	r3, r1, r3
 8004146:	4413      	add	r3, r2
 8004148:	335c      	adds	r3, #92	; 0x5c
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	4413      	add	r3, r2
 8004156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	0151      	lsls	r1, r2, #5
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	440a      	add	r2, r1
 8004164:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004168:	f043 0302 	orr.w	r3, r3, #2
 800416c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	4611      	mov	r1, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f004 f956 	bl	800842a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	4413      	add	r3, r2
 8004186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418a:	461a      	mov	r2, r3
 800418c:	2340      	movs	r3, #64	; 0x40
 800418e:	6093      	str	r3, [r2, #8]
}
 8004190:	e2a9      	b.n	80046e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	4413      	add	r3, r2
 800419a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d12a      	bne.n	80041fe <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b4:	461a      	mov	r2, r3
 80041b6:	2308      	movs	r3, #8
 80041b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041d4:	f043 0302 	orr.w	r3, r3, #2
 80041d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f004 f920 	bl	800842a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	212c      	movs	r1, #44	; 0x2c
 80041f0:	fb01 f303 	mul.w	r3, r1, r3
 80041f4:	4413      	add	r3, r2
 80041f6:	3361      	adds	r3, #97	; 0x61
 80041f8:	2205      	movs	r2, #5
 80041fa:	701a      	strb	r2, [r3, #0]
}
 80041fc:	e273      	b.n	80046e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	4413      	add	r3, r2
 8004206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b10      	cmp	r3, #16
 8004212:	d150      	bne.n	80042b6 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	212c      	movs	r1, #44	; 0x2c
 800421a:	fb01 f303 	mul.w	r3, r1, r3
 800421e:	4413      	add	r3, r2
 8004220:	335c      	adds	r3, #92	; 0x5c
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	212c      	movs	r1, #44	; 0x2c
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	4413      	add	r3, r2
 8004232:	3361      	adds	r3, #97	; 0x61
 8004234:	2203      	movs	r2, #3
 8004236:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	212c      	movs	r1, #44	; 0x2c
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	4413      	add	r3, r2
 8004244:	333d      	adds	r3, #61	; 0x3d
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d112      	bne.n	8004272 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	212c      	movs	r1, #44	; 0x2c
 8004252:	fb01 f303 	mul.w	r3, r1, r3
 8004256:	4413      	add	r3, r2
 8004258:	333c      	adds	r3, #60	; 0x3c
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d108      	bne.n	8004272 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	212c      	movs	r1, #44	; 0x2c
 8004266:	fb01 f303 	mul.w	r3, r1, r3
 800426a:	4413      	add	r3, r2
 800426c:	333d      	adds	r3, #61	; 0x3d
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	4413      	add	r3, r2
 800427a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	0151      	lsls	r1, r2, #5
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	440a      	add	r2, r1
 8004288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800428c:	f043 0302 	orr.w	r3, r3, #2
 8004290:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	4611      	mov	r1, r2
 800429c:	4618      	mov	r0, r3
 800429e:	f004 f8c4 	bl	800842a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ae:	461a      	mov	r2, r3
 80042b0:	2310      	movs	r3, #16
 80042b2:	6093      	str	r3, [r2, #8]
}
 80042b4:	e217      	b.n	80046e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	2b80      	cmp	r3, #128	; 0x80
 80042ca:	d174      	bne.n	80043b6 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d121      	bne.n	8004318 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	212c      	movs	r1, #44	; 0x2c
 80042da:	fb01 f303 	mul.w	r3, r1, r3
 80042de:	4413      	add	r3, r2
 80042e0:	3361      	adds	r3, #97	; 0x61
 80042e2:	2206      	movs	r2, #6
 80042e4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	0151      	lsls	r1, r2, #5
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	440a      	add	r2, r1
 80042fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004300:	f043 0302 	orr.w	r3, r3, #2
 8004304:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f004 f88a 	bl	800842a <USB_HC_Halt>
 8004316:	e044      	b.n	80043a2 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	212c      	movs	r1, #44	; 0x2c
 800431e:	fb01 f303 	mul.w	r3, r1, r3
 8004322:	4413      	add	r3, r2
 8004324:	335c      	adds	r3, #92	; 0x5c
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	202c      	movs	r0, #44	; 0x2c
 8004330:	fb00 f303 	mul.w	r3, r0, r3
 8004334:	440b      	add	r3, r1
 8004336:	335c      	adds	r3, #92	; 0x5c
 8004338:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	212c      	movs	r1, #44	; 0x2c
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	4413      	add	r3, r2
 8004346:	335c      	adds	r3, #92	; 0x5c
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d920      	bls.n	8004390 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	212c      	movs	r1, #44	; 0x2c
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	4413      	add	r3, r2
 800435a:	335c      	adds	r3, #92	; 0x5c
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	212c      	movs	r1, #44	; 0x2c
 8004366:	fb01 f303 	mul.w	r3, r1, r3
 800436a:	4413      	add	r3, r2
 800436c:	3360      	adds	r3, #96	; 0x60
 800436e:	2204      	movs	r2, #4
 8004370:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	b2d9      	uxtb	r1, r3
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	202c      	movs	r0, #44	; 0x2c
 800437c:	fb00 f303 	mul.w	r3, r0, r3
 8004380:	4413      	add	r3, r2
 8004382:	3360      	adds	r3, #96	; 0x60
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f006 fa0b 	bl	800a7a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800438e:	e008      	b.n	80043a2 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	212c      	movs	r1, #44	; 0x2c
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	4413      	add	r3, r2
 800439c:	3360      	adds	r3, #96	; 0x60
 800439e:	2202      	movs	r2, #2
 80043a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ae:	461a      	mov	r2, r3
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	6093      	str	r3, [r2, #8]
}
 80043b4:	e197      	b.n	80046e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043cc:	d134      	bne.n	8004438 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	0151      	lsls	r1, r2, #5
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	440a      	add	r2, r1
 80043e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043e8:	f043 0302 	orr.w	r3, r3, #2
 80043ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	4611      	mov	r1, r2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f004 f816 	bl	800842a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	4413      	add	r3, r2
 8004406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440a:	461a      	mov	r2, r3
 800440c:	2310      	movs	r3, #16
 800440e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	4413      	add	r3, r2
 8004418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441c:	461a      	mov	r2, r3
 800441e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004422:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	212c      	movs	r1, #44	; 0x2c
 800442a:	fb01 f303 	mul.w	r3, r1, r3
 800442e:	4413      	add	r3, r2
 8004430:	3361      	adds	r3, #97	; 0x61
 8004432:	2208      	movs	r2, #8
 8004434:	701a      	strb	r2, [r3, #0]
}
 8004436:	e156      	b.n	80046e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	4413      	add	r3, r2
 8004440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b02      	cmp	r3, #2
 800444c:	f040 814b 	bne.w	80046e6 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	4413      	add	r3, r2
 8004458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	0151      	lsls	r1, r2, #5
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	440a      	add	r2, r1
 8004466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800446a:	f023 0302 	bic.w	r3, r3, #2
 800446e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	212c      	movs	r1, #44	; 0x2c
 8004476:	fb01 f303 	mul.w	r3, r1, r3
 800447a:	4413      	add	r3, r2
 800447c:	3361      	adds	r3, #97	; 0x61
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d179      	bne.n	8004578 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	212c      	movs	r1, #44	; 0x2c
 800448a:	fb01 f303 	mul.w	r3, r1, r3
 800448e:	4413      	add	r3, r2
 8004490:	3360      	adds	r3, #96	; 0x60
 8004492:	2201      	movs	r2, #1
 8004494:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	212c      	movs	r1, #44	; 0x2c
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	4413      	add	r3, r2
 80044a2:	333f      	adds	r3, #63	; 0x3f
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d00a      	beq.n	80044c0 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	212c      	movs	r1, #44	; 0x2c
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	4413      	add	r3, r2
 80044b6:	333f      	adds	r3, #63	; 0x3f
 80044b8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	f040 80fc 	bne.w	80046b8 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d142      	bne.n	800454e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	212c      	movs	r1, #44	; 0x2c
 80044ce:	fb01 f303 	mul.w	r3, r1, r3
 80044d2:	4413      	add	r3, r2
 80044d4:	334c      	adds	r3, #76	; 0x4c
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80ed 	beq.w	80046b8 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	212c      	movs	r1, #44	; 0x2c
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	4413      	add	r3, r2
 80044ea:	334c      	adds	r3, #76	; 0x4c
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	202c      	movs	r0, #44	; 0x2c
 80044f4:	fb00 f202 	mul.w	r2, r0, r2
 80044f8:	440a      	add	r2, r1
 80044fa:	3240      	adds	r2, #64	; 0x40
 80044fc:	8812      	ldrh	r2, [r2, #0]
 80044fe:	4413      	add	r3, r2
 8004500:	3b01      	subs	r3, #1
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	202c      	movs	r0, #44	; 0x2c
 8004508:	fb00 f202 	mul.w	r2, r0, r2
 800450c:	440a      	add	r2, r1
 800450e:	3240      	adds	r2, #64	; 0x40
 8004510:	8812      	ldrh	r2, [r2, #0]
 8004512:	fbb3 f3f2 	udiv	r3, r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 80ca 	beq.w	80046b8 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	212c      	movs	r1, #44	; 0x2c
 800452a:	fb01 f303 	mul.w	r3, r1, r3
 800452e:	4413      	add	r3, r2
 8004530:	3355      	adds	r3, #85	; 0x55
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	f083 0301 	eor.w	r3, r3, #1
 8004538:	b2d8      	uxtb	r0, r3
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	212c      	movs	r1, #44	; 0x2c
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	4413      	add	r3, r2
 8004546:	3355      	adds	r3, #85	; 0x55
 8004548:	4602      	mov	r2, r0
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	e0b4      	b.n	80046b8 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	212c      	movs	r1, #44	; 0x2c
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	4413      	add	r3, r2
 800455a:	3355      	adds	r3, #85	; 0x55
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	f083 0301 	eor.w	r3, r3, #1
 8004562:	b2d8      	uxtb	r0, r3
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	212c      	movs	r1, #44	; 0x2c
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	4413      	add	r3, r2
 8004570:	3355      	adds	r3, #85	; 0x55
 8004572:	4602      	mov	r2, r0
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	e09f      	b.n	80046b8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	212c      	movs	r1, #44	; 0x2c
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	4413      	add	r3, r2
 8004584:	3361      	adds	r3, #97	; 0x61
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b03      	cmp	r3, #3
 800458a:	d109      	bne.n	80045a0 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	212c      	movs	r1, #44	; 0x2c
 8004592:	fb01 f303 	mul.w	r3, r1, r3
 8004596:	4413      	add	r3, r2
 8004598:	3360      	adds	r3, #96	; 0x60
 800459a:	2202      	movs	r2, #2
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	e08b      	b.n	80046b8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	212c      	movs	r1, #44	; 0x2c
 80045a6:	fb01 f303 	mul.w	r3, r1, r3
 80045aa:	4413      	add	r3, r2
 80045ac:	3361      	adds	r3, #97	; 0x61
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d109      	bne.n	80045c8 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	212c      	movs	r1, #44	; 0x2c
 80045ba:	fb01 f303 	mul.w	r3, r1, r3
 80045be:	4413      	add	r3, r2
 80045c0:	3360      	adds	r3, #96	; 0x60
 80045c2:	2202      	movs	r2, #2
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	e077      	b.n	80046b8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	212c      	movs	r1, #44	; 0x2c
 80045ce:	fb01 f303 	mul.w	r3, r1, r3
 80045d2:	4413      	add	r3, r2
 80045d4:	3361      	adds	r3, #97	; 0x61
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d109      	bne.n	80045f0 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	212c      	movs	r1, #44	; 0x2c
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	4413      	add	r3, r2
 80045e8:	3360      	adds	r3, #96	; 0x60
 80045ea:	2205      	movs	r2, #5
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	e063      	b.n	80046b8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	212c      	movs	r1, #44	; 0x2c
 80045f6:	fb01 f303 	mul.w	r3, r1, r3
 80045fa:	4413      	add	r3, r2
 80045fc:	3361      	adds	r3, #97	; 0x61
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b06      	cmp	r3, #6
 8004602:	d009      	beq.n	8004618 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	212c      	movs	r1, #44	; 0x2c
 800460a:	fb01 f303 	mul.w	r3, r1, r3
 800460e:	4413      	add	r3, r2
 8004610:	3361      	adds	r3, #97	; 0x61
 8004612:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004614:	2b08      	cmp	r3, #8
 8004616:	d14f      	bne.n	80046b8 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	212c      	movs	r1, #44	; 0x2c
 800461e:	fb01 f303 	mul.w	r3, r1, r3
 8004622:	4413      	add	r3, r2
 8004624:	335c      	adds	r3, #92	; 0x5c
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	202c      	movs	r0, #44	; 0x2c
 8004630:	fb00 f303 	mul.w	r3, r0, r3
 8004634:	440b      	add	r3, r1
 8004636:	335c      	adds	r3, #92	; 0x5c
 8004638:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	212c      	movs	r1, #44	; 0x2c
 8004640:	fb01 f303 	mul.w	r3, r1, r3
 8004644:	4413      	add	r3, r2
 8004646:	335c      	adds	r3, #92	; 0x5c
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d912      	bls.n	8004674 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	212c      	movs	r1, #44	; 0x2c
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	4413      	add	r3, r2
 800465a:	335c      	adds	r3, #92	; 0x5c
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	212c      	movs	r1, #44	; 0x2c
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	4413      	add	r3, r2
 800466c:	3360      	adds	r3, #96	; 0x60
 800466e:	2204      	movs	r2, #4
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	e021      	b.n	80046b8 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	212c      	movs	r1, #44	; 0x2c
 800467a:	fb01 f303 	mul.w	r3, r1, r3
 800467e:	4413      	add	r3, r2
 8004680:	3360      	adds	r3, #96	; 0x60
 8004682:	2202      	movs	r2, #2
 8004684:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	4413      	add	r3, r2
 800468e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800469c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046a4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b2:	461a      	mov	r2, r3
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c4:	461a      	mov	r2, r3
 80046c6:	2302      	movs	r3, #2
 80046c8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	b2d9      	uxtb	r1, r3
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	202c      	movs	r0, #44	; 0x2c
 80046d4:	fb00 f303 	mul.w	r3, r0, r3
 80046d8:	4413      	add	r3, r2
 80046da:	3360      	adds	r3, #96	; 0x60
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f006 f85f 	bl	800a7a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80046e6:	bf00      	nop
 80046e8:	3720      	adds	r7, #32
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b08a      	sub	sp, #40	; 0x28
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	0c5b      	lsrs	r3, r3, #17
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004722:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d004      	beq.n	8004734 <HCD_RXQLVL_IRQHandler+0x46>
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b05      	cmp	r3, #5
 800472e:	f000 80a9 	beq.w	8004884 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004732:	e0aa      	b.n	800488a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80a6 	beq.w	8004888 <HCD_RXQLVL_IRQHandler+0x19a>
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	212c      	movs	r1, #44	; 0x2c
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	4413      	add	r3, r2
 8004748:	3344      	adds	r3, #68	; 0x44
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 809b 	beq.w	8004888 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	212c      	movs	r1, #44	; 0x2c
 8004758:	fb01 f303 	mul.w	r3, r1, r3
 800475c:	4413      	add	r3, r2
 800475e:	3350      	adds	r3, #80	; 0x50
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	441a      	add	r2, r3
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	202c      	movs	r0, #44	; 0x2c
 800476c:	fb00 f303 	mul.w	r3, r0, r3
 8004770:	440b      	add	r3, r1
 8004772:	334c      	adds	r3, #76	; 0x4c
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d87a      	bhi.n	8004870 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	212c      	movs	r1, #44	; 0x2c
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	4413      	add	r3, r2
 800478a:	3344      	adds	r3, #68	; 0x44
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	b292      	uxth	r2, r2
 8004792:	4619      	mov	r1, r3
 8004794:	f003 f9e7 	bl	8007b66 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	212c      	movs	r1, #44	; 0x2c
 800479e:	fb01 f303 	mul.w	r3, r1, r3
 80047a2:	4413      	add	r3, r2
 80047a4:	3344      	adds	r3, #68	; 0x44
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	441a      	add	r2, r3
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	202c      	movs	r0, #44	; 0x2c
 80047b2:	fb00 f303 	mul.w	r3, r0, r3
 80047b6:	440b      	add	r3, r1
 80047b8:	3344      	adds	r3, #68	; 0x44
 80047ba:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	212c      	movs	r1, #44	; 0x2c
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	4413      	add	r3, r2
 80047c8:	3350      	adds	r3, #80	; 0x50
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	441a      	add	r2, r3
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	202c      	movs	r0, #44	; 0x2c
 80047d6:	fb00 f303 	mul.w	r3, r0, r3
 80047da:	440b      	add	r3, r1
 80047dc:	3350      	adds	r3, #80	; 0x50
 80047de:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	0cdb      	lsrs	r3, r3, #19
 80047f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047f4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	212c      	movs	r1, #44	; 0x2c
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	4413      	add	r3, r2
 8004802:	3340      	adds	r3, #64	; 0x40
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4293      	cmp	r3, r2
 800480c:	d13c      	bne.n	8004888 <HCD_RXQLVL_IRQHandler+0x19a>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d039      	beq.n	8004888 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	4413      	add	r3, r2
 800481c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800482a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004832:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	4413      	add	r3, r2
 800483c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004840:	461a      	mov	r2, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	212c      	movs	r1, #44	; 0x2c
 800484c:	fb01 f303 	mul.w	r3, r1, r3
 8004850:	4413      	add	r3, r2
 8004852:	3354      	adds	r3, #84	; 0x54
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	f083 0301 	eor.w	r3, r3, #1
 800485a:	b2d8      	uxtb	r0, r3
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	212c      	movs	r1, #44	; 0x2c
 8004862:	fb01 f303 	mul.w	r3, r1, r3
 8004866:	4413      	add	r3, r2
 8004868:	3354      	adds	r3, #84	; 0x54
 800486a:	4602      	mov	r2, r0
 800486c:	701a      	strb	r2, [r3, #0]
      break;
 800486e:	e00b      	b.n	8004888 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	212c      	movs	r1, #44	; 0x2c
 8004876:	fb01 f303 	mul.w	r3, r1, r3
 800487a:	4413      	add	r3, r2
 800487c:	3360      	adds	r3, #96	; 0x60
 800487e:	2204      	movs	r2, #4
 8004880:	701a      	strb	r2, [r3, #0]
      break;
 8004882:	e001      	b.n	8004888 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004884:	bf00      	nop
 8004886:	e000      	b.n	800488a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004888:	bf00      	nop
  }
}
 800488a:	bf00      	nop
 800488c:	3728      	adds	r7, #40	; 0x28
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b086      	sub	sp, #24
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80048be:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d10b      	bne.n	80048e2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d102      	bne.n	80048da <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f005 ff49 	bl	800a76c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f043 0302 	orr.w	r3, r3, #2
 80048e0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d132      	bne.n	8004952 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f043 0308 	orr.w	r3, r3, #8
 80048f2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d126      	bne.n	800494c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d113      	bne.n	800492e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800490c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004910:	d106      	bne.n	8004920 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2102      	movs	r1, #2
 8004918:	4618      	mov	r0, r3
 800491a:	f003 fa5f 	bl	8007ddc <USB_InitFSLSPClkSel>
 800491e:	e011      	b.n	8004944 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2101      	movs	r1, #1
 8004926:	4618      	mov	r0, r3
 8004928:	f003 fa58 	bl	8007ddc <USB_InitFSLSPClkSel>
 800492c:	e00a      	b.n	8004944 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d106      	bne.n	8004944 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800493c:	461a      	mov	r2, r3
 800493e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004942:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f005 ff3b 	bl	800a7c0 <HAL_HCD_PortEnabled_Callback>
 800494a:	e002      	b.n	8004952 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f005 ff45 	bl	800a7dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b20      	cmp	r3, #32
 800495a:	d103      	bne.n	8004964 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f043 0320 	orr.w	r3, r3, #32
 8004962:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800496a:	461a      	mov	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	6013      	str	r3, [r2, #0]
}
 8004970:	bf00      	nop
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e12b      	b.n	8004be2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fd fbdc 	bl	800215c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2224      	movs	r2, #36	; 0x24
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0201 	bic.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049dc:	f001 f9fc 	bl	8005dd8 <HAL_RCC_GetPCLK1Freq>
 80049e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	4a81      	ldr	r2, [pc, #516]	; (8004bec <HAL_I2C_Init+0x274>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d807      	bhi.n	80049fc <HAL_I2C_Init+0x84>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4a80      	ldr	r2, [pc, #512]	; (8004bf0 <HAL_I2C_Init+0x278>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	bf94      	ite	ls
 80049f4:	2301      	movls	r3, #1
 80049f6:	2300      	movhi	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	e006      	b.n	8004a0a <HAL_I2C_Init+0x92>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4a7d      	ldr	r2, [pc, #500]	; (8004bf4 <HAL_I2C_Init+0x27c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	bf94      	ite	ls
 8004a04:	2301      	movls	r3, #1
 8004a06:	2300      	movhi	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e0e7      	b.n	8004be2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4a78      	ldr	r2, [pc, #480]	; (8004bf8 <HAL_I2C_Init+0x280>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	0c9b      	lsrs	r3, r3, #18
 8004a1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a6a      	ldr	r2, [pc, #424]	; (8004bec <HAL_I2C_Init+0x274>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d802      	bhi.n	8004a4c <HAL_I2C_Init+0xd4>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	e009      	b.n	8004a60 <HAL_I2C_Init+0xe8>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
 8004a56:	4a69      	ldr	r2, [pc, #420]	; (8004bfc <HAL_I2C_Init+0x284>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	099b      	lsrs	r3, r3, #6
 8004a5e:	3301      	adds	r3, #1
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	430b      	orrs	r3, r1
 8004a66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	495c      	ldr	r1, [pc, #368]	; (8004bec <HAL_I2C_Init+0x274>)
 8004a7c:	428b      	cmp	r3, r1
 8004a7e:	d819      	bhi.n	8004ab4 <HAL_I2C_Init+0x13c>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1e59      	subs	r1, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a8e:	1c59      	adds	r1, r3, #1
 8004a90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a94:	400b      	ands	r3, r1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_I2C_Init+0x138>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1e59      	subs	r1, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aae:	e051      	b.n	8004b54 <HAL_I2C_Init+0x1dc>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	e04f      	b.n	8004b54 <HAL_I2C_Init+0x1dc>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d111      	bne.n	8004ae0 <HAL_I2C_Init+0x168>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	1e58      	subs	r0, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6859      	ldr	r1, [r3, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	440b      	add	r3, r1
 8004aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bf0c      	ite	eq
 8004ad8:	2301      	moveq	r3, #1
 8004ada:	2300      	movne	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	e012      	b.n	8004b06 <HAL_I2C_Init+0x18e>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	1e58      	subs	r0, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6859      	ldr	r1, [r3, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	0099      	lsls	r1, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af6:	3301      	adds	r3, #1
 8004af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_I2C_Init+0x196>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e022      	b.n	8004b54 <HAL_I2C_Init+0x1dc>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10e      	bne.n	8004b34 <HAL_I2C_Init+0x1bc>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1e58      	subs	r0, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6859      	ldr	r1, [r3, #4]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	440b      	add	r3, r1
 8004b24:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b32:	e00f      	b.n	8004b54 <HAL_I2C_Init+0x1dc>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	1e58      	subs	r0, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6859      	ldr	r1, [r3, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	0099      	lsls	r1, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	6809      	ldr	r1, [r1, #0]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69da      	ldr	r2, [r3, #28]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6911      	ldr	r1, [r2, #16]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	68d2      	ldr	r2, [r2, #12]
 8004b8e:	4311      	orrs	r1, r2
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6812      	ldr	r2, [r2, #0]
 8004b94:	430b      	orrs	r3, r1
 8004b96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695a      	ldr	r2, [r3, #20]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	000186a0 	.word	0x000186a0
 8004bf0:	001e847f 	.word	0x001e847f
 8004bf4:	003d08ff 	.word	0x003d08ff
 8004bf8:	431bde83 	.word	0x431bde83
 8004bfc:	10624dd3 	.word	0x10624dd3

08004c00 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e128      	b.n	8004e64 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a90      	ldr	r2, [pc, #576]	; (8004e6c <HAL_I2S_Init+0x26c>)
 8004c2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7fd faff 	bl	8002230 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2202      	movs	r2, #2
 8004c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c48:	f023 030f 	bic.w	r3, r3, #15
 8004c4c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2202      	movs	r2, #2
 8004c54:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d060      	beq.n	8004d20 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d102      	bne.n	8004c6c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004c66:	2310      	movs	r3, #16
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	e001      	b.n	8004c70 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004c6c:	2320      	movs	r3, #32
 8004c6e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d802      	bhi.n	8004c7e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004c7e:	2001      	movs	r0, #1
 8004c80:	f001 f9a0 	bl	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c84:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c8e:	d125      	bne.n	8004cdc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d010      	beq.n	8004cba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	461a      	mov	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	3305      	adds	r3, #5
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	e01f      	b.n	8004cfa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	461a      	mov	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd6:	3305      	adds	r3, #5
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	e00e      	b.n	8004cfa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	461a      	mov	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf6:	3305      	adds	r3, #5
 8004cf8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4a5c      	ldr	r2, [pc, #368]	; (8004e70 <HAL_I2S_Init+0x270>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	08db      	lsrs	r3, r3, #3
 8004d04:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	085b      	lsrs	r3, r3, #1
 8004d16:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	e003      	b.n	8004d28 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004d20:	2302      	movs	r3, #2
 8004d22:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d902      	bls.n	8004d34 <HAL_I2S_Init+0x134>
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	2bff      	cmp	r3, #255	; 0xff
 8004d32:	d907      	bls.n	8004d44 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d38:	f043 0210 	orr.w	r2, r3, #16
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e08f      	b.n	8004e64 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	ea42 0103 	orr.w	r1, r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d62:	f023 030f 	bic.w	r3, r3, #15
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6851      	ldr	r1, [r2, #4]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6892      	ldr	r2, [r2, #8]
 8004d6e:	4311      	orrs	r1, r2
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	68d2      	ldr	r2, [r2, #12]
 8004d74:	4311      	orrs	r1, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6992      	ldr	r2, [r2, #24]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d86:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d161      	bne.n	8004e54 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a38      	ldr	r2, [pc, #224]	; (8004e74 <HAL_I2S_Init+0x274>)
 8004d94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a37      	ldr	r2, [pc, #220]	; (8004e78 <HAL_I2S_Init+0x278>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d101      	bne.n	8004da4 <HAL_I2S_Init+0x1a4>
 8004da0:	4b36      	ldr	r3, [pc, #216]	; (8004e7c <HAL_I2S_Init+0x27c>)
 8004da2:	e001      	b.n	8004da8 <HAL_I2S_Init+0x1a8>
 8004da4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	4932      	ldr	r1, [pc, #200]	; (8004e78 <HAL_I2S_Init+0x278>)
 8004db0:	428a      	cmp	r2, r1
 8004db2:	d101      	bne.n	8004db8 <HAL_I2S_Init+0x1b8>
 8004db4:	4a31      	ldr	r2, [pc, #196]	; (8004e7c <HAL_I2S_Init+0x27c>)
 8004db6:	e001      	b.n	8004dbc <HAL_I2S_Init+0x1bc>
 8004db8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004dbc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004dc0:	f023 030f 	bic.w	r3, r3, #15
 8004dc4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a2b      	ldr	r2, [pc, #172]	; (8004e78 <HAL_I2S_Init+0x278>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d101      	bne.n	8004dd4 <HAL_I2S_Init+0x1d4>
 8004dd0:	4b2a      	ldr	r3, [pc, #168]	; (8004e7c <HAL_I2S_Init+0x27c>)
 8004dd2:	e001      	b.n	8004dd8 <HAL_I2S_Init+0x1d8>
 8004dd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dd8:	2202      	movs	r2, #2
 8004dda:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a25      	ldr	r2, [pc, #148]	; (8004e78 <HAL_I2S_Init+0x278>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d101      	bne.n	8004dea <HAL_I2S_Init+0x1ea>
 8004de6:	4b25      	ldr	r3, [pc, #148]	; (8004e7c <HAL_I2S_Init+0x27c>)
 8004de8:	e001      	b.n	8004dee <HAL_I2S_Init+0x1ee>
 8004dea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dfa:	d003      	beq.n	8004e04 <HAL_I2S_Init+0x204>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d103      	bne.n	8004e0c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	e001      	b.n	8004e10 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e24:	4313      	orrs	r3, r2
 8004e26:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	897b      	ldrh	r3, [r7, #10]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e3c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a0d      	ldr	r2, [pc, #52]	; (8004e78 <HAL_I2S_Init+0x278>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d101      	bne.n	8004e4c <HAL_I2S_Init+0x24c>
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <HAL_I2S_Init+0x27c>)
 8004e4a:	e001      	b.n	8004e50 <HAL_I2S_Init+0x250>
 8004e4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e50:	897a      	ldrh	r2, [r7, #10]
 8004e52:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3720      	adds	r7, #32
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	08004f77 	.word	0x08004f77
 8004e70:	cccccccd 	.word	0xcccccccd
 8004e74:	0800508d 	.word	0x0800508d
 8004e78:	40003800 	.word	0x40003800
 8004e7c:	40003400 	.word	0x40003400

08004e80 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	881a      	ldrh	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	1c9a      	adds	r2, r3, #2
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10e      	bne.n	8004f10 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f00:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff ffb8 	bl	8004e80 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	b292      	uxth	r2, r2
 8004f2c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f32:	1c9a      	adds	r2, r3, #2
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10e      	bne.n	8004f6e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f5e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff ff93 	bl	8004e94 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f6e:	bf00      	nop
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b086      	sub	sp, #24
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d13a      	bne.n	8005008 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d109      	bne.n	8004fb0 <I2S_IRQHandler+0x3a>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa6:	2b40      	cmp	r3, #64	; 0x40
 8004fa8:	d102      	bne.n	8004fb0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff ffb4 	bl	8004f18 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb6:	2b40      	cmp	r3, #64	; 0x40
 8004fb8:	d126      	bne.n	8005008 <I2S_IRQHandler+0x92>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f003 0320 	and.w	r3, r3, #32
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d11f      	bne.n	8005008 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fd6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004fd8:	2300      	movs	r3, #0
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffa:	f043 0202 	orr.w	r2, r3, #2
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7ff ff50 	bl	8004ea8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b03      	cmp	r3, #3
 8005012:	d136      	bne.n	8005082 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b02      	cmp	r3, #2
 800501c:	d109      	bne.n	8005032 <I2S_IRQHandler+0xbc>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005028:	2b80      	cmp	r3, #128	; 0x80
 800502a:	d102      	bne.n	8005032 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7ff ff45 	bl	8004ebc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b08      	cmp	r3, #8
 800503a:	d122      	bne.n	8005082 <I2S_IRQHandler+0x10c>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b20      	cmp	r3, #32
 8005048:	d11b      	bne.n	8005082 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005058:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005074:	f043 0204 	orr.w	r2, r3, #4
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff ff13 	bl	8004ea8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005082:	bf00      	nop
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4aa2      	ldr	r2, [pc, #648]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d101      	bne.n	80050aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80050a6:	4ba2      	ldr	r3, [pc, #648]	; (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050a8:	e001      	b.n	80050ae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80050aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a9b      	ldr	r2, [pc, #620]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d101      	bne.n	80050c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80050c4:	4b9a      	ldr	r3, [pc, #616]	; (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050c6:	e001      	b.n	80050cc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80050c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d8:	d004      	beq.n	80050e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f040 8099 	bne.w	8005216 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d107      	bne.n	80050fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f925 	bl	8005348 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b01      	cmp	r3, #1
 8005106:	d107      	bne.n	8005118 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f9c8 	bl	80054a8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511e:	2b40      	cmp	r3, #64	; 0x40
 8005120:	d13a      	bne.n	8005198 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	2b00      	cmp	r3, #0
 800512a:	d035      	beq.n	8005198 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a7e      	ldr	r2, [pc, #504]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d101      	bne.n	800513a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005136:	4b7e      	ldr	r3, [pc, #504]	; (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005138:	e001      	b.n	800513e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800513a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4979      	ldr	r1, [pc, #484]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005146:	428b      	cmp	r3, r1
 8005148:	d101      	bne.n	800514e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800514a:	4b79      	ldr	r3, [pc, #484]	; (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800514c:	e001      	b.n	8005152 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800514e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005152:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005156:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005166:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518a:	f043 0202 	orr.w	r2, r3, #2
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7ff fe88 	bl	8004ea8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b08      	cmp	r3, #8
 80051a0:	f040 80be 	bne.w	8005320 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80b8 	beq.w	8005320 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a59      	ldr	r2, [pc, #356]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d101      	bne.n	80051ce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80051ca:	4b59      	ldr	r3, [pc, #356]	; (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051cc:	e001      	b.n	80051d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80051ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4954      	ldr	r1, [pc, #336]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051da:	428b      	cmp	r3, r1
 80051dc:	d101      	bne.n	80051e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80051de:	4b54      	ldr	r3, [pc, #336]	; (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051e0:	e001      	b.n	80051e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80051e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051ea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80051ec:	2300      	movs	r3, #0
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	60bb      	str	r3, [r7, #8]
 80051f8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005206:	f043 0204 	orr.w	r2, r3, #4
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff fe4a 	bl	8004ea8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005214:	e084      	b.n	8005320 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b02      	cmp	r3, #2
 800521e:	d107      	bne.n	8005230 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f8be 	bl	80053ac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b01      	cmp	r3, #1
 8005238:	d107      	bne.n	800524a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f8fd 	bl	8005444 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b40      	cmp	r3, #64	; 0x40
 8005252:	d12f      	bne.n	80052b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b00      	cmp	r3, #0
 800525c:	d02a      	beq.n	80052b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800526c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a2e      	ldr	r2, [pc, #184]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d101      	bne.n	800527c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005278:	4b2d      	ldr	r3, [pc, #180]	; (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800527a:	e001      	b.n	8005280 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800527c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4929      	ldr	r1, [pc, #164]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005288:	428b      	cmp	r3, r1
 800528a:	d101      	bne.n	8005290 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800528c:	4b28      	ldr	r3, [pc, #160]	; (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800528e:	e001      	b.n	8005294 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005290:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005294:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005298:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a6:	f043 0202 	orr.w	r2, r3, #2
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff fdfa 	bl	8004ea8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d131      	bne.n	8005322 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d02c      	beq.n	8005322 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a17      	ldr	r2, [pc, #92]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d101      	bne.n	80052d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80052d2:	4b17      	ldr	r3, [pc, #92]	; (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052d4:	e001      	b.n	80052da <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80052d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4912      	ldr	r1, [pc, #72]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052e2:	428b      	cmp	r3, r1
 80052e4:	d101      	bne.n	80052ea <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80052e6:	4b12      	ldr	r3, [pc, #72]	; (8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052e8:	e001      	b.n	80052ee <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80052ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005302:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005310:	f043 0204 	orr.w	r2, r3, #4
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7ff fdc5 	bl	8004ea8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800531e:	e000      	b.n	8005322 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005320:	bf00      	nop
}
 8005322:	bf00      	nop
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40003800 	.word	0x40003800
 8005330:	40003400 	.word	0x40003400

08005334 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	1c99      	adds	r1, r3, #2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6251      	str	r1, [r2, #36]	; 0x24
 800535a:	881a      	ldrh	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005366:	b29b      	uxth	r3, r3
 8005368:	3b01      	subs	r3, #1
 800536a:	b29a      	uxth	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d113      	bne.n	80053a2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005388:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d106      	bne.n	80053a2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff ffc9 	bl	8005334 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053a2:	bf00      	nop
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	1c99      	adds	r1, r3, #2
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6251      	str	r1, [r2, #36]	; 0x24
 80053be:	8819      	ldrh	r1, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a1d      	ldr	r2, [pc, #116]	; (800543c <I2SEx_TxISR_I2SExt+0x90>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d101      	bne.n	80053ce <I2SEx_TxISR_I2SExt+0x22>
 80053ca:	4b1d      	ldr	r3, [pc, #116]	; (8005440 <I2SEx_TxISR_I2SExt+0x94>)
 80053cc:	e001      	b.n	80053d2 <I2SEx_TxISR_I2SExt+0x26>
 80053ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053d2:	460a      	mov	r2, r1
 80053d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d121      	bne.n	8005432 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a12      	ldr	r2, [pc, #72]	; (800543c <I2SEx_TxISR_I2SExt+0x90>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d101      	bne.n	80053fc <I2SEx_TxISR_I2SExt+0x50>
 80053f8:	4b11      	ldr	r3, [pc, #68]	; (8005440 <I2SEx_TxISR_I2SExt+0x94>)
 80053fa:	e001      	b.n	8005400 <I2SEx_TxISR_I2SExt+0x54>
 80053fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	490d      	ldr	r1, [pc, #52]	; (800543c <I2SEx_TxISR_I2SExt+0x90>)
 8005408:	428b      	cmp	r3, r1
 800540a:	d101      	bne.n	8005410 <I2SEx_TxISR_I2SExt+0x64>
 800540c:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <I2SEx_TxISR_I2SExt+0x94>)
 800540e:	e001      	b.n	8005414 <I2SEx_TxISR_I2SExt+0x68>
 8005410:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005414:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005418:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800541e:	b29b      	uxth	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	d106      	bne.n	8005432 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff ff81 	bl	8005334 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40003800 	.word	0x40003800
 8005440:	40003400 	.word	0x40003400

08005444 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68d8      	ldr	r0, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	1c99      	adds	r1, r3, #2
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800545c:	b282      	uxth	r2, r0
 800545e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005464:	b29b      	uxth	r3, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005472:	b29b      	uxth	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d113      	bne.n	80054a0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005486:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff ff4a 	bl	8005334 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a20      	ldr	r2, [pc, #128]	; (8005538 <I2SEx_RxISR_I2SExt+0x90>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d101      	bne.n	80054be <I2SEx_RxISR_I2SExt+0x16>
 80054ba:	4b20      	ldr	r3, [pc, #128]	; (800553c <I2SEx_RxISR_I2SExt+0x94>)
 80054bc:	e001      	b.n	80054c2 <I2SEx_RxISR_I2SExt+0x1a>
 80054be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054c2:	68d8      	ldr	r0, [r3, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	1c99      	adds	r1, r3, #2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80054ce:	b282      	uxth	r2, r0
 80054d0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d121      	bne.n	800552e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a12      	ldr	r2, [pc, #72]	; (8005538 <I2SEx_RxISR_I2SExt+0x90>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d101      	bne.n	80054f8 <I2SEx_RxISR_I2SExt+0x50>
 80054f4:	4b11      	ldr	r3, [pc, #68]	; (800553c <I2SEx_RxISR_I2SExt+0x94>)
 80054f6:	e001      	b.n	80054fc <I2SEx_RxISR_I2SExt+0x54>
 80054f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	490d      	ldr	r1, [pc, #52]	; (8005538 <I2SEx_RxISR_I2SExt+0x90>)
 8005504:	428b      	cmp	r3, r1
 8005506:	d101      	bne.n	800550c <I2SEx_RxISR_I2SExt+0x64>
 8005508:	4b0c      	ldr	r3, [pc, #48]	; (800553c <I2SEx_RxISR_I2SExt+0x94>)
 800550a:	e001      	b.n	8005510 <I2SEx_RxISR_I2SExt+0x68>
 800550c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005510:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005514:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d106      	bne.n	800552e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff ff03 	bl	8005334 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800552e:	bf00      	nop
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40003800 	.word	0x40003800
 800553c:	40003400 	.word	0x40003400

08005540 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e264      	b.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d075      	beq.n	800564a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800555e:	4ba3      	ldr	r3, [pc, #652]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
 8005566:	2b04      	cmp	r3, #4
 8005568:	d00c      	beq.n	8005584 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800556a:	4ba0      	ldr	r3, [pc, #640]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005572:	2b08      	cmp	r3, #8
 8005574:	d112      	bne.n	800559c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005576:	4b9d      	ldr	r3, [pc, #628]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800557e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005582:	d10b      	bne.n	800559c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005584:	4b99      	ldr	r3, [pc, #612]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d05b      	beq.n	8005648 <HAL_RCC_OscConfig+0x108>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d157      	bne.n	8005648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e23f      	b.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a4:	d106      	bne.n	80055b4 <HAL_RCC_OscConfig+0x74>
 80055a6:	4b91      	ldr	r3, [pc, #580]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a90      	ldr	r2, [pc, #576]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80055ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	e01d      	b.n	80055f0 <HAL_RCC_OscConfig+0xb0>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055bc:	d10c      	bne.n	80055d8 <HAL_RCC_OscConfig+0x98>
 80055be:	4b8b      	ldr	r3, [pc, #556]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a8a      	ldr	r2, [pc, #552]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80055c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	4b88      	ldr	r3, [pc, #544]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a87      	ldr	r2, [pc, #540]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80055d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	e00b      	b.n	80055f0 <HAL_RCC_OscConfig+0xb0>
 80055d8:	4b84      	ldr	r3, [pc, #528]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a83      	ldr	r2, [pc, #524]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80055de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	4b81      	ldr	r3, [pc, #516]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a80      	ldr	r2, [pc, #512]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80055ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d013      	beq.n	8005620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f8:	f7fd f930 	bl	800285c <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005600:	f7fd f92c 	bl	800285c <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b64      	cmp	r3, #100	; 0x64
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e204      	b.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005612:	4b76      	ldr	r3, [pc, #472]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f0      	beq.n	8005600 <HAL_RCC_OscConfig+0xc0>
 800561e:	e014      	b.n	800564a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005620:	f7fd f91c 	bl	800285c <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005628:	f7fd f918 	bl	800285c <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b64      	cmp	r3, #100	; 0x64
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e1f0      	b.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800563a:	4b6c      	ldr	r3, [pc, #432]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f0      	bne.n	8005628 <HAL_RCC_OscConfig+0xe8>
 8005646:	e000      	b.n	800564a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d063      	beq.n	800571e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005656:	4b65      	ldr	r3, [pc, #404]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 030c 	and.w	r3, r3, #12
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00b      	beq.n	800567a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005662:	4b62      	ldr	r3, [pc, #392]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800566a:	2b08      	cmp	r3, #8
 800566c:	d11c      	bne.n	80056a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800566e:	4b5f      	ldr	r3, [pc, #380]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d116      	bne.n	80056a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800567a:	4b5c      	ldr	r3, [pc, #368]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d005      	beq.n	8005692 <HAL_RCC_OscConfig+0x152>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d001      	beq.n	8005692 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e1c4      	b.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005692:	4b56      	ldr	r3, [pc, #344]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	4952      	ldr	r1, [pc, #328]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056a6:	e03a      	b.n	800571e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d020      	beq.n	80056f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056b0:	4b4f      	ldr	r3, [pc, #316]	; (80057f0 <HAL_RCC_OscConfig+0x2b0>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b6:	f7fd f8d1 	bl	800285c <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056be:	f7fd f8cd 	bl	800285c <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e1a5      	b.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056d0:	4b46      	ldr	r3, [pc, #280]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0f0      	beq.n	80056be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056dc:	4b43      	ldr	r3, [pc, #268]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	4940      	ldr	r1, [pc, #256]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	600b      	str	r3, [r1, #0]
 80056f0:	e015      	b.n	800571e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056f2:	4b3f      	ldr	r3, [pc, #252]	; (80057f0 <HAL_RCC_OscConfig+0x2b0>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f8:	f7fd f8b0 	bl	800285c <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005700:	f7fd f8ac 	bl	800285c <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e184      	b.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005712:	4b36      	ldr	r3, [pc, #216]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d030      	beq.n	800578c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d016      	beq.n	8005760 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005732:	4b30      	ldr	r3, [pc, #192]	; (80057f4 <HAL_RCC_OscConfig+0x2b4>)
 8005734:	2201      	movs	r2, #1
 8005736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005738:	f7fd f890 	bl	800285c <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005740:	f7fd f88c 	bl	800285c <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e164      	b.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005752:	4b26      	ldr	r3, [pc, #152]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 8005754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0f0      	beq.n	8005740 <HAL_RCC_OscConfig+0x200>
 800575e:	e015      	b.n	800578c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005760:	4b24      	ldr	r3, [pc, #144]	; (80057f4 <HAL_RCC_OscConfig+0x2b4>)
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005766:	f7fd f879 	bl	800285c <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800576e:	f7fd f875 	bl	800285c <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e14d      	b.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005780:	4b1a      	ldr	r3, [pc, #104]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 8005782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f0      	bne.n	800576e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 80a0 	beq.w	80058da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800579a:	2300      	movs	r3, #0
 800579c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800579e:	4b13      	ldr	r3, [pc, #76]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10f      	bne.n	80057ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057aa:	2300      	movs	r3, #0
 80057ac:	60bb      	str	r3, [r7, #8]
 80057ae:	4b0f      	ldr	r3, [pc, #60]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	4a0e      	ldr	r2, [pc, #56]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80057b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b8:	6413      	str	r3, [r2, #64]	; 0x40
 80057ba:	4b0c      	ldr	r3, [pc, #48]	; (80057ec <HAL_RCC_OscConfig+0x2ac>)
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c2:	60bb      	str	r3, [r7, #8]
 80057c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057c6:	2301      	movs	r3, #1
 80057c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ca:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <HAL_RCC_OscConfig+0x2b8>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d121      	bne.n	800581a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057d6:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <HAL_RCC_OscConfig+0x2b8>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a07      	ldr	r2, [pc, #28]	; (80057f8 <HAL_RCC_OscConfig+0x2b8>)
 80057dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057e2:	f7fd f83b 	bl	800285c <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e8:	e011      	b.n	800580e <HAL_RCC_OscConfig+0x2ce>
 80057ea:	bf00      	nop
 80057ec:	40023800 	.word	0x40023800
 80057f0:	42470000 	.word	0x42470000
 80057f4:	42470e80 	.word	0x42470e80
 80057f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057fc:	f7fd f82e 	bl	800285c <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e106      	b.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800580e:	4b85      	ldr	r3, [pc, #532]	; (8005a24 <HAL_RCC_OscConfig+0x4e4>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f0      	beq.n	80057fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d106      	bne.n	8005830 <HAL_RCC_OscConfig+0x2f0>
 8005822:	4b81      	ldr	r3, [pc, #516]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 8005824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005826:	4a80      	ldr	r2, [pc, #512]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	6713      	str	r3, [r2, #112]	; 0x70
 800582e:	e01c      	b.n	800586a <HAL_RCC_OscConfig+0x32a>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2b05      	cmp	r3, #5
 8005836:	d10c      	bne.n	8005852 <HAL_RCC_OscConfig+0x312>
 8005838:	4b7b      	ldr	r3, [pc, #492]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 800583a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583c:	4a7a      	ldr	r2, [pc, #488]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 800583e:	f043 0304 	orr.w	r3, r3, #4
 8005842:	6713      	str	r3, [r2, #112]	; 0x70
 8005844:	4b78      	ldr	r3, [pc, #480]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 8005846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005848:	4a77      	ldr	r2, [pc, #476]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 800584a:	f043 0301 	orr.w	r3, r3, #1
 800584e:	6713      	str	r3, [r2, #112]	; 0x70
 8005850:	e00b      	b.n	800586a <HAL_RCC_OscConfig+0x32a>
 8005852:	4b75      	ldr	r3, [pc, #468]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 8005854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005856:	4a74      	ldr	r2, [pc, #464]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 8005858:	f023 0301 	bic.w	r3, r3, #1
 800585c:	6713      	str	r3, [r2, #112]	; 0x70
 800585e:	4b72      	ldr	r3, [pc, #456]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 8005860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005862:	4a71      	ldr	r2, [pc, #452]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 8005864:	f023 0304 	bic.w	r3, r3, #4
 8005868:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d015      	beq.n	800589e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005872:	f7fc fff3 	bl	800285c <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005878:	e00a      	b.n	8005890 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800587a:	f7fc ffef 	bl	800285c <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	f241 3288 	movw	r2, #5000	; 0x1388
 8005888:	4293      	cmp	r3, r2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e0c5      	b.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005890:	4b65      	ldr	r3, [pc, #404]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 8005892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0ee      	beq.n	800587a <HAL_RCC_OscConfig+0x33a>
 800589c:	e014      	b.n	80058c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800589e:	f7fc ffdd 	bl	800285c <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a4:	e00a      	b.n	80058bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058a6:	f7fc ffd9 	bl	800285c <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e0af      	b.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058bc:	4b5a      	ldr	r3, [pc, #360]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 80058be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1ee      	bne.n	80058a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d105      	bne.n	80058da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ce:	4b56      	ldr	r3, [pc, #344]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	4a55      	ldr	r2, [pc, #340]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 80058d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 809b 	beq.w	8005a1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058e4:	4b50      	ldr	r3, [pc, #320]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 030c 	and.w	r3, r3, #12
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d05c      	beq.n	80059aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d141      	bne.n	800597c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f8:	4b4c      	ldr	r3, [pc, #304]	; (8005a2c <HAL_RCC_OscConfig+0x4ec>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fe:	f7fc ffad 	bl	800285c <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005904:	e008      	b.n	8005918 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005906:	f7fc ffa9 	bl	800285c <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e081      	b.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005918:	4b43      	ldr	r3, [pc, #268]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1f0      	bne.n	8005906 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	019b      	lsls	r3, r3, #6
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593a:	085b      	lsrs	r3, r3, #1
 800593c:	3b01      	subs	r3, #1
 800593e:	041b      	lsls	r3, r3, #16
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005946:	061b      	lsls	r3, r3, #24
 8005948:	4937      	ldr	r1, [pc, #220]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 800594a:	4313      	orrs	r3, r2
 800594c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800594e:	4b37      	ldr	r3, [pc, #220]	; (8005a2c <HAL_RCC_OscConfig+0x4ec>)
 8005950:	2201      	movs	r2, #1
 8005952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005954:	f7fc ff82 	bl	800285c <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800595c:	f7fc ff7e 	bl	800285c <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e056      	b.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800596e:	4b2e      	ldr	r3, [pc, #184]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0f0      	beq.n	800595c <HAL_RCC_OscConfig+0x41c>
 800597a:	e04e      	b.n	8005a1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800597c:	4b2b      	ldr	r3, [pc, #172]	; (8005a2c <HAL_RCC_OscConfig+0x4ec>)
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005982:	f7fc ff6b 	bl	800285c <HAL_GetTick>
 8005986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005988:	e008      	b.n	800599c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800598a:	f7fc ff67 	bl	800285c <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e03f      	b.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800599c:	4b22      	ldr	r3, [pc, #136]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1f0      	bne.n	800598a <HAL_RCC_OscConfig+0x44a>
 80059a8:	e037      	b.n	8005a1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e032      	b.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059b6:	4b1c      	ldr	r3, [pc, #112]	; (8005a28 <HAL_RCC_OscConfig+0x4e8>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d028      	beq.n	8005a16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d121      	bne.n	8005a16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059dc:	429a      	cmp	r2, r3
 80059de:	d11a      	bne.n	8005a16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059e6:	4013      	ands	r3, r2
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d111      	bne.n	8005a16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	3b01      	subs	r3, #1
 8005a00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d107      	bne.n	8005a16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d001      	beq.n	8005a1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	40007000 	.word	0x40007000
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	42470060 	.word	0x42470060

08005a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e0cc      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a44:	4b68      	ldr	r3, [pc, #416]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d90c      	bls.n	8005a6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a52:	4b65      	ldr	r3, [pc, #404]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a5a:	4b63      	ldr	r3, [pc, #396]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d001      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e0b8      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d020      	beq.n	8005aba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a84:	4b59      	ldr	r3, [pc, #356]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	4a58      	ldr	r2, [pc, #352]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005a8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a9c:	4b53      	ldr	r3, [pc, #332]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	4a52      	ldr	r2, [pc, #328]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005aa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aa8:	4b50      	ldr	r3, [pc, #320]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	494d      	ldr	r1, [pc, #308]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d044      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d107      	bne.n	8005ade <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ace:	4b47      	ldr	r3, [pc, #284]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d119      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e07f      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d003      	beq.n	8005aee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d107      	bne.n	8005afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aee:	4b3f      	ldr	r3, [pc, #252]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d109      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e06f      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005afe:	4b3b      	ldr	r3, [pc, #236]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e067      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b0e:	4b37      	ldr	r3, [pc, #220]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f023 0203 	bic.w	r2, r3, #3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	4934      	ldr	r1, [pc, #208]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b20:	f7fc fe9c 	bl	800285c <HAL_GetTick>
 8005b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b26:	e00a      	b.n	8005b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b28:	f7fc fe98 	bl	800285c <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e04f      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3e:	4b2b      	ldr	r3, [pc, #172]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 020c 	and.w	r2, r3, #12
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d1eb      	bne.n	8005b28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b50:	4b25      	ldr	r3, [pc, #148]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d20c      	bcs.n	8005b78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b5e:	4b22      	ldr	r3, [pc, #136]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b66:	4b20      	ldr	r3, [pc, #128]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d001      	beq.n	8005b78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e032      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b84:	4b19      	ldr	r3, [pc, #100]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	4916      	ldr	r1, [pc, #88]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d009      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ba2:	4b12      	ldr	r3, [pc, #72]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	490e      	ldr	r1, [pc, #56]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bb6:	f000 f821 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	4b0b      	ldr	r3, [pc, #44]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	091b      	lsrs	r3, r3, #4
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	490a      	ldr	r1, [pc, #40]	; (8005bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8005bc8:	5ccb      	ldrb	r3, [r1, r3]
 8005bca:	fa22 f303 	lsr.w	r3, r2, r3
 8005bce:	4a09      	ldr	r2, [pc, #36]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bd2:	4b09      	ldr	r3, [pc, #36]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fc fdfc 	bl	80027d4 <HAL_InitTick>

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40023c00 	.word	0x40023c00
 8005bec:	40023800 	.word	0x40023800
 8005bf0:	0800b2b0 	.word	0x0800b2b0
 8005bf4:	2000000c 	.word	0x2000000c
 8005bf8:	20000010 	.word	0x20000010

08005bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bfc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	607b      	str	r3, [r7, #4]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c14:	4b67      	ldr	r3, [pc, #412]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 030c 	and.w	r3, r3, #12
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d00d      	beq.n	8005c3c <HAL_RCC_GetSysClockFreq+0x40>
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	f200 80bd 	bhi.w	8005da0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <HAL_RCC_GetSysClockFreq+0x34>
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d003      	beq.n	8005c36 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c2e:	e0b7      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c30:	4b61      	ldr	r3, [pc, #388]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c32:	60bb      	str	r3, [r7, #8]
       break;
 8005c34:	e0b7      	b.n	8005da6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c36:	4b61      	ldr	r3, [pc, #388]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005c38:	60bb      	str	r3, [r7, #8]
      break;
 8005c3a:	e0b4      	b.n	8005da6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c3c:	4b5d      	ldr	r3, [pc, #372]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c46:	4b5b      	ldr	r3, [pc, #364]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d04d      	beq.n	8005cee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c52:	4b58      	ldr	r3, [pc, #352]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	099b      	lsrs	r3, r3, #6
 8005c58:	461a      	mov	r2, r3
 8005c5a:	f04f 0300 	mov.w	r3, #0
 8005c5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c62:	f04f 0100 	mov.w	r1, #0
 8005c66:	ea02 0800 	and.w	r8, r2, r0
 8005c6a:	ea03 0901 	and.w	r9, r3, r1
 8005c6e:	4640      	mov	r0, r8
 8005c70:	4649      	mov	r1, r9
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	f04f 0300 	mov.w	r3, #0
 8005c7a:	014b      	lsls	r3, r1, #5
 8005c7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c80:	0142      	lsls	r2, r0, #5
 8005c82:	4610      	mov	r0, r2
 8005c84:	4619      	mov	r1, r3
 8005c86:	ebb0 0008 	subs.w	r0, r0, r8
 8005c8a:	eb61 0109 	sbc.w	r1, r1, r9
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	018b      	lsls	r3, r1, #6
 8005c98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c9c:	0182      	lsls	r2, r0, #6
 8005c9e:	1a12      	subs	r2, r2, r0
 8005ca0:	eb63 0301 	sbc.w	r3, r3, r1
 8005ca4:	f04f 0000 	mov.w	r0, #0
 8005ca8:	f04f 0100 	mov.w	r1, #0
 8005cac:	00d9      	lsls	r1, r3, #3
 8005cae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cb2:	00d0      	lsls	r0, r2, #3
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	eb12 0208 	adds.w	r2, r2, r8
 8005cbc:	eb43 0309 	adc.w	r3, r3, r9
 8005cc0:	f04f 0000 	mov.w	r0, #0
 8005cc4:	f04f 0100 	mov.w	r1, #0
 8005cc8:	0259      	lsls	r1, r3, #9
 8005cca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005cce:	0250      	lsls	r0, r2, #9
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	f7fa fa72 	bl	80001c8 <__aeabi_uldivmod>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4613      	mov	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	e04a      	b.n	8005d84 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cee:	4b31      	ldr	r3, [pc, #196]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	099b      	lsrs	r3, r3, #6
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	f04f 0300 	mov.w	r3, #0
 8005cfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005cfe:	f04f 0100 	mov.w	r1, #0
 8005d02:	ea02 0400 	and.w	r4, r2, r0
 8005d06:	ea03 0501 	and.w	r5, r3, r1
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	4629      	mov	r1, r5
 8005d0e:	f04f 0200 	mov.w	r2, #0
 8005d12:	f04f 0300 	mov.w	r3, #0
 8005d16:	014b      	lsls	r3, r1, #5
 8005d18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d1c:	0142      	lsls	r2, r0, #5
 8005d1e:	4610      	mov	r0, r2
 8005d20:	4619      	mov	r1, r3
 8005d22:	1b00      	subs	r0, r0, r4
 8005d24:	eb61 0105 	sbc.w	r1, r1, r5
 8005d28:	f04f 0200 	mov.w	r2, #0
 8005d2c:	f04f 0300 	mov.w	r3, #0
 8005d30:	018b      	lsls	r3, r1, #6
 8005d32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d36:	0182      	lsls	r2, r0, #6
 8005d38:	1a12      	subs	r2, r2, r0
 8005d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8005d3e:	f04f 0000 	mov.w	r0, #0
 8005d42:	f04f 0100 	mov.w	r1, #0
 8005d46:	00d9      	lsls	r1, r3, #3
 8005d48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d4c:	00d0      	lsls	r0, r2, #3
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	1912      	adds	r2, r2, r4
 8005d54:	eb45 0303 	adc.w	r3, r5, r3
 8005d58:	f04f 0000 	mov.w	r0, #0
 8005d5c:	f04f 0100 	mov.w	r1, #0
 8005d60:	0299      	lsls	r1, r3, #10
 8005d62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005d66:	0290      	lsls	r0, r2, #10
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	4619      	mov	r1, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	461a      	mov	r2, r3
 8005d74:	f04f 0300 	mov.w	r3, #0
 8005d78:	f7fa fa26 	bl	80001c8 <__aeabi_uldivmod>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4613      	mov	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d84:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	0c1b      	lsrs	r3, r3, #16
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	3301      	adds	r3, #1
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9c:	60bb      	str	r3, [r7, #8]
      break;
 8005d9e:	e002      	b.n	8005da6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005da0:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005da2:	60bb      	str	r3, [r7, #8]
      break;
 8005da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005da6:	68bb      	ldr	r3, [r7, #8]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005db2:	bf00      	nop
 8005db4:	40023800 	.word	0x40023800
 8005db8:	00f42400 	.word	0x00f42400
 8005dbc:	007a1200 	.word	0x007a1200

08005dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dc4:	4b03      	ldr	r3, [pc, #12]	; (8005dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	2000000c 	.word	0x2000000c

08005dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ddc:	f7ff fff0 	bl	8005dc0 <HAL_RCC_GetHCLKFreq>
 8005de0:	4602      	mov	r2, r0
 8005de2:	4b05      	ldr	r3, [pc, #20]	; (8005df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	0a9b      	lsrs	r3, r3, #10
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	4903      	ldr	r1, [pc, #12]	; (8005dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dee:	5ccb      	ldrb	r3, [r1, r3]
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	0800b2c0 	.word	0x0800b2c0

08005e00 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d105      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d035      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e28:	4b62      	ldr	r3, [pc, #392]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e2e:	f7fc fd15 	bl	800285c <HAL_GetTick>
 8005e32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e34:	e008      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e36:	f7fc fd11 	bl	800285c <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e0b0      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e48:	4b5b      	ldr	r3, [pc, #364]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1f0      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	019a      	lsls	r2, r3, #6
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	071b      	lsls	r3, r3, #28
 8005e60:	4955      	ldr	r1, [pc, #340]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e68:	4b52      	ldr	r3, [pc, #328]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e6e:	f7fc fcf5 	bl	800285c <HAL_GetTick>
 8005e72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e74:	e008      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e76:	f7fc fcf1 	bl	800285c <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e090      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e88:	4b4b      	ldr	r3, [pc, #300]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0f0      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 8083 	beq.w	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	4b44      	ldr	r3, [pc, #272]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	4a43      	ldr	r2, [pc, #268]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8005eb2:	4b41      	ldr	r3, [pc, #260]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ebe:	4b3f      	ldr	r3, [pc, #252]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a3e      	ldr	r2, [pc, #248]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005eca:	f7fc fcc7 	bl	800285c <HAL_GetTick>
 8005ece:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ed2:	f7fc fcc3 	bl	800285c <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e062      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ee4:	4b35      	ldr	r3, [pc, #212]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0f0      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ef0:	4b31      	ldr	r3, [pc, #196]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d02f      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d028      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f0e:	4b2a      	ldr	r3, [pc, #168]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f18:	4b29      	ldr	r3, [pc, #164]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f1e:	4b28      	ldr	r3, [pc, #160]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f24:	4a24      	ldr	r2, [pc, #144]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f2a:	4b23      	ldr	r3, [pc, #140]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d114      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f36:	f7fc fc91 	bl	800285c <HAL_GetTick>
 8005f3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f3c:	e00a      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f3e:	f7fc fc8d 	bl	800285c <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e02a      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f54:	4b18      	ldr	r3, [pc, #96]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0ee      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f6c:	d10d      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005f6e:	4b12      	ldr	r3, [pc, #72]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f82:	490d      	ldr	r1, [pc, #52]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	608b      	str	r3, [r1, #8]
 8005f88:	e005      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005f8a:	4b0b      	ldr	r3, [pc, #44]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	4a0a      	ldr	r2, [pc, #40]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f90:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f94:	6093      	str	r3, [r2, #8]
 8005f96:	4b08      	ldr	r3, [pc, #32]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fa2:	4905      	ldr	r1, [pc, #20]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	42470068 	.word	0x42470068
 8005fb8:	40023800 	.word	0x40023800
 8005fbc:	40007000 	.word	0x40007000
 8005fc0:	42470e40 	.word	0x42470e40

08005fc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d13e      	bne.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005fe2:	4b23      	ldr	r3, [pc, #140]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d12f      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ff8:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ffa:	617b      	str	r3, [r7, #20]
          break;
 8005ffc:	e02f      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ffe:	4b1c      	ldr	r3, [pc, #112]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800600a:	d108      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800600c:	4b18      	ldr	r3, [pc, #96]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006014:	4a18      	ldr	r2, [pc, #96]	; (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006016:	fbb2 f3f3 	udiv	r3, r2, r3
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	e007      	b.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800601e:	4b14      	ldr	r3, [pc, #80]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006026:	4a15      	ldr	r2, [pc, #84]	; (800607c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006028:	fbb2 f3f3 	udiv	r3, r2, r3
 800602c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800602e:	4b10      	ldr	r3, [pc, #64]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006034:	099b      	lsrs	r3, r3, #6
 8006036:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	fb02 f303 	mul.w	r3, r2, r3
 8006040:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006042:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006048:	0f1b      	lsrs	r3, r3, #28
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	fbb2 f3f3 	udiv	r3, r2, r3
 8006054:	617b      	str	r3, [r7, #20]
          break;
 8006056:	e002      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	617b      	str	r3, [r7, #20]
          break;
 800605c:	bf00      	nop
        }
      }
      break;
 800605e:	bf00      	nop
    }
  }
  return frequency;
 8006060:	697b      	ldr	r3, [r7, #20]
}
 8006062:	4618      	mov	r0, r3
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40023800 	.word	0x40023800
 8006074:	00bb8000 	.word	0x00bb8000
 8006078:	007a1200 	.word	0x007a1200
 800607c:	00f42400 	.word	0x00f42400

08006080 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e01c      	b.n	80060cc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	795b      	ldrb	r3, [r3, #5]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d105      	bne.n	80060a8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fc f92c 	bl	8002300 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0204 	orr.w	r2, r2, #4
 80060bc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	791b      	ldrb	r3, [r3, #4]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <HAL_RNG_GenerateRandomNumber+0x1a>
 80060ea:	2302      	movs	r3, #2
 80060ec:	e03d      	b.n	800616a <HAL_RNG_GenerateRandomNumber+0x96>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	795b      	ldrb	r3, [r3, #5]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d12c      	bne.n	8006158 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2202      	movs	r2, #2
 8006102:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006104:	f7fc fbaa 	bl	800285c <HAL_GetTick>
 8006108:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800610a:	e011      	b.n	8006130 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800610c:	f7fc fba6 	bl	800285c <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d90a      	bls.n	8006130 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e01c      	b.n	800616a <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b01      	cmp	r3, #1
 800613c:	d1e6      	bne.n	800610c <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	715a      	strb	r2, [r3, #5]
 8006156:	e004      	b.n	8006162 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2204      	movs	r2, #4
 800615c:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	711a      	strb	r2, [r3, #4]

  return status;
 8006168:	7bfb      	ldrb	r3, [r7, #15]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b082      	sub	sp, #8
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	330c      	adds	r3, #12
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff ffa7 	bl	80060d4 <HAL_RNG_GenerateRandomNumber>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d102      	bne.n	8006192 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	e000      	b.n	8006194 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8006192:	2300      	movs	r3, #0
  }
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e07b      	b.n	80062a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d108      	bne.n	80061c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061be:	d009      	beq.n	80061d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	61da      	str	r2, [r3, #28]
 80061c6:	e005      	b.n	80061d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7fc f8a8 	bl	8002344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800620a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	431a      	orrs	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	431a      	orrs	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006244:	431a      	orrs	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800624e:	431a      	orrs	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006258:	ea42 0103 	orr.w	r1, r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006260:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	0c1b      	lsrs	r3, r3, #16
 8006272:	f003 0104 	and.w	r1, r3, #4
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	f003 0210 	and.w	r2, r3, #16
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69da      	ldr	r2, [r3, #28]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006294:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b088      	sub	sp, #32
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	603b      	str	r3, [r7, #0]
 80062ba:	4613      	mov	r3, r2
 80062bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <HAL_SPI_Transmit+0x22>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e126      	b.n	800651e <HAL_SPI_Transmit+0x270>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062d8:	f7fc fac0 	bl	800285c <HAL_GetTick>
 80062dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80062de:	88fb      	ldrh	r3, [r7, #6]
 80062e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d002      	beq.n	80062f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80062ee:	2302      	movs	r3, #2
 80062f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062f2:	e10b      	b.n	800650c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <HAL_SPI_Transmit+0x52>
 80062fa:	88fb      	ldrh	r3, [r7, #6]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d102      	bne.n	8006306 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006304:	e102      	b.n	800650c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2203      	movs	r2, #3
 800630a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	88fa      	ldrh	r2, [r7, #6]
 800631e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	88fa      	ldrh	r2, [r7, #6]
 8006324:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800634c:	d10f      	bne.n	800636e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800635c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800636c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006378:	2b40      	cmp	r3, #64	; 0x40
 800637a:	d007      	beq.n	800638c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800638a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006394:	d14b      	bne.n	800642e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <HAL_SPI_Transmit+0xf6>
 800639e:	8afb      	ldrh	r3, [r7, #22]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d13e      	bne.n	8006422 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	881a      	ldrh	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	1c9a      	adds	r2, r3, #2
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063be:	b29b      	uxth	r3, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063c8:	e02b      	b.n	8006422 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d112      	bne.n	80063fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	881a      	ldrh	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e8:	1c9a      	adds	r2, r3, #2
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80063fc:	e011      	b.n	8006422 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063fe:	f7fc fa2d 	bl	800285c <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d803      	bhi.n	8006416 <HAL_SPI_Transmit+0x168>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006414:	d102      	bne.n	800641c <HAL_SPI_Transmit+0x16e>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006420:	e074      	b.n	800650c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1ce      	bne.n	80063ca <HAL_SPI_Transmit+0x11c>
 800642c:	e04c      	b.n	80064c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <HAL_SPI_Transmit+0x18e>
 8006436:	8afb      	ldrh	r3, [r7, #22]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d140      	bne.n	80064be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	330c      	adds	r3, #12
 8006446:	7812      	ldrb	r2, [r2, #0]
 8006448:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006458:	b29b      	uxth	r3, r3
 800645a:	3b01      	subs	r3, #1
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006462:	e02c      	b.n	80064be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b02      	cmp	r3, #2
 8006470:	d113      	bne.n	800649a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	330c      	adds	r3, #12
 800647c:	7812      	ldrb	r2, [r2, #0]
 800647e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800648e:	b29b      	uxth	r3, r3
 8006490:	3b01      	subs	r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	86da      	strh	r2, [r3, #54]	; 0x36
 8006498:	e011      	b.n	80064be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800649a:	f7fc f9df 	bl	800285c <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d803      	bhi.n	80064b2 <HAL_SPI_Transmit+0x204>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064b0:	d102      	bne.n	80064b8 <HAL_SPI_Transmit+0x20a>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d102      	bne.n	80064be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064bc:	e026      	b.n	800650c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1cd      	bne.n	8006464 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f8b3 	bl	8006638 <SPI_EndRxTxTransaction>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2220      	movs	r2, #32
 80064dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10a      	bne.n	80064fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064e6:	2300      	movs	r3, #0
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	613b      	str	r3, [r7, #16]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	613b      	str	r3, [r7, #16]
 80064fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	77fb      	strb	r3, [r7, #31]
 8006508:	e000      	b.n	800650c <HAL_SPI_Transmit+0x25e>
  }

error:
 800650a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800651c:	7ffb      	ldrb	r3, [r7, #31]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3720      	adds	r7, #32
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	4613      	mov	r3, r2
 8006536:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006538:	f7fc f990 	bl	800285c <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	1a9b      	subs	r3, r3, r2
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	4413      	add	r3, r2
 8006546:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006548:	f7fc f988 	bl	800285c <HAL_GetTick>
 800654c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800654e:	4b39      	ldr	r3, [pc, #228]	; (8006634 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	015b      	lsls	r3, r3, #5
 8006554:	0d1b      	lsrs	r3, r3, #20
 8006556:	69fa      	ldr	r2, [r7, #28]
 8006558:	fb02 f303 	mul.w	r3, r2, r3
 800655c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800655e:	e054      	b.n	800660a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006566:	d050      	beq.n	800660a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006568:	f7fc f978 	bl	800285c <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	429a      	cmp	r2, r3
 8006576:	d902      	bls.n	800657e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d13d      	bne.n	80065fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800658c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006596:	d111      	bne.n	80065bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a0:	d004      	beq.n	80065ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065aa:	d107      	bne.n	80065bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c4:	d10f      	bne.n	80065e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e017      	b.n	800662a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	3b01      	subs	r3, #1
 8006608:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	4013      	ands	r3, r2
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	429a      	cmp	r2, r3
 8006618:	bf0c      	ite	eq
 800661a:	2301      	moveq	r3, #1
 800661c:	2300      	movne	r3, #0
 800661e:	b2db      	uxtb	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	79fb      	ldrb	r3, [r7, #7]
 8006624:	429a      	cmp	r2, r3
 8006626:	d19b      	bne.n	8006560 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3720      	adds	r7, #32
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	2000000c 	.word	0x2000000c

08006638 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af02      	add	r7, sp, #8
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006644:	4b1b      	ldr	r3, [pc, #108]	; (80066b4 <SPI_EndRxTxTransaction+0x7c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a1b      	ldr	r2, [pc, #108]	; (80066b8 <SPI_EndRxTxTransaction+0x80>)
 800664a:	fba2 2303 	umull	r2, r3, r2, r3
 800664e:	0d5b      	lsrs	r3, r3, #21
 8006650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006654:	fb02 f303 	mul.w	r3, r2, r3
 8006658:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006662:	d112      	bne.n	800668a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2200      	movs	r2, #0
 800666c:	2180      	movs	r1, #128	; 0x80
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f7ff ff5a 	bl	8006528 <SPI_WaitFlagStateUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d016      	beq.n	80066a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	f043 0220 	orr.w	r2, r3, #32
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e00f      	b.n	80066aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	3b01      	subs	r3, #1
 8006694:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a0:	2b80      	cmp	r3, #128	; 0x80
 80066a2:	d0f2      	beq.n	800668a <SPI_EndRxTxTransaction+0x52>
 80066a4:	e000      	b.n	80066a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80066a6:	bf00      	nop
  }

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	2000000c 	.word	0x2000000c
 80066b8:	165e9f81 	.word	0x165e9f81

080066bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e041      	b.n	8006752 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d106      	bne.n	80066e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7fb ff14 	bl	8002510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3304      	adds	r3, #4
 80066f8:	4619      	mov	r1, r3
 80066fa:	4610      	mov	r0, r2
 80066fc:	f000 fd68 	bl	80071d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b01      	cmp	r3, #1
 800676e:	d001      	beq.n	8006774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e04e      	b.n	8006812 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0201 	orr.w	r2, r2, #1
 800678a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a23      	ldr	r2, [pc, #140]	; (8006820 <HAL_TIM_Base_Start_IT+0xc4>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d022      	beq.n	80067dc <HAL_TIM_Base_Start_IT+0x80>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679e:	d01d      	beq.n	80067dc <HAL_TIM_Base_Start_IT+0x80>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1f      	ldr	r2, [pc, #124]	; (8006824 <HAL_TIM_Base_Start_IT+0xc8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d018      	beq.n	80067dc <HAL_TIM_Base_Start_IT+0x80>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1e      	ldr	r2, [pc, #120]	; (8006828 <HAL_TIM_Base_Start_IT+0xcc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d013      	beq.n	80067dc <HAL_TIM_Base_Start_IT+0x80>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1c      	ldr	r2, [pc, #112]	; (800682c <HAL_TIM_Base_Start_IT+0xd0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d00e      	beq.n	80067dc <HAL_TIM_Base_Start_IT+0x80>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a1b      	ldr	r2, [pc, #108]	; (8006830 <HAL_TIM_Base_Start_IT+0xd4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d009      	beq.n	80067dc <HAL_TIM_Base_Start_IT+0x80>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a19      	ldr	r2, [pc, #100]	; (8006834 <HAL_TIM_Base_Start_IT+0xd8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d004      	beq.n	80067dc <HAL_TIM_Base_Start_IT+0x80>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a18      	ldr	r2, [pc, #96]	; (8006838 <HAL_TIM_Base_Start_IT+0xdc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d111      	bne.n	8006800 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b06      	cmp	r3, #6
 80067ec:	d010      	beq.n	8006810 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f042 0201 	orr.w	r2, r2, #1
 80067fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067fe:	e007      	b.n	8006810 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0201 	orr.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40010000 	.word	0x40010000
 8006824:	40000400 	.word	0x40000400
 8006828:	40000800 	.word	0x40000800
 800682c:	40000c00 	.word	0x40000c00
 8006830:	40010400 	.word	0x40010400
 8006834:	40014000 	.word	0x40014000
 8006838:	40001800 	.word	0x40001800

0800683c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d109      	bne.n	8006860 <HAL_TIM_OC_Start_IT+0x24>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b01      	cmp	r3, #1
 8006856:	bf14      	ite	ne
 8006858:	2301      	movne	r3, #1
 800685a:	2300      	moveq	r3, #0
 800685c:	b2db      	uxtb	r3, r3
 800685e:	e022      	b.n	80068a6 <HAL_TIM_OC_Start_IT+0x6a>
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b04      	cmp	r3, #4
 8006864:	d109      	bne.n	800687a <HAL_TIM_OC_Start_IT+0x3e>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b01      	cmp	r3, #1
 8006870:	bf14      	ite	ne
 8006872:	2301      	movne	r3, #1
 8006874:	2300      	moveq	r3, #0
 8006876:	b2db      	uxtb	r3, r3
 8006878:	e015      	b.n	80068a6 <HAL_TIM_OC_Start_IT+0x6a>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b08      	cmp	r3, #8
 800687e:	d109      	bne.n	8006894 <HAL_TIM_OC_Start_IT+0x58>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b01      	cmp	r3, #1
 800688a:	bf14      	ite	ne
 800688c:	2301      	movne	r3, #1
 800688e:	2300      	moveq	r3, #0
 8006890:	b2db      	uxtb	r3, r3
 8006892:	e008      	b.n	80068a6 <HAL_TIM_OC_Start_IT+0x6a>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	bf14      	ite	ne
 80068a0:	2301      	movne	r3, #1
 80068a2:	2300      	moveq	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e0c2      	b.n	8006a34 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d104      	bne.n	80068be <HAL_TIM_OC_Start_IT+0x82>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068bc:	e013      	b.n	80068e6 <HAL_TIM_OC_Start_IT+0xaa>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b04      	cmp	r3, #4
 80068c2:	d104      	bne.n	80068ce <HAL_TIM_OC_Start_IT+0x92>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068cc:	e00b      	b.n	80068e6 <HAL_TIM_OC_Start_IT+0xaa>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d104      	bne.n	80068de <HAL_TIM_OC_Start_IT+0xa2>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2202      	movs	r2, #2
 80068d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068dc:	e003      	b.n	80068e6 <HAL_TIM_OC_Start_IT+0xaa>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2202      	movs	r2, #2
 80068e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b0c      	cmp	r3, #12
 80068ea:	d841      	bhi.n	8006970 <HAL_TIM_OC_Start_IT+0x134>
 80068ec:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <HAL_TIM_OC_Start_IT+0xb8>)
 80068ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f2:	bf00      	nop
 80068f4:	08006929 	.word	0x08006929
 80068f8:	08006971 	.word	0x08006971
 80068fc:	08006971 	.word	0x08006971
 8006900:	08006971 	.word	0x08006971
 8006904:	0800693b 	.word	0x0800693b
 8006908:	08006971 	.word	0x08006971
 800690c:	08006971 	.word	0x08006971
 8006910:	08006971 	.word	0x08006971
 8006914:	0800694d 	.word	0x0800694d
 8006918:	08006971 	.word	0x08006971
 800691c:	08006971 	.word	0x08006971
 8006920:	08006971 	.word	0x08006971
 8006924:	0800695f 	.word	0x0800695f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0202 	orr.w	r2, r2, #2
 8006936:	60da      	str	r2, [r3, #12]
      break;
 8006938:	e01b      	b.n	8006972 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0204 	orr.w	r2, r2, #4
 8006948:	60da      	str	r2, [r3, #12]
      break;
 800694a:	e012      	b.n	8006972 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0208 	orr.w	r2, r2, #8
 800695a:	60da      	str	r2, [r3, #12]
      break;
 800695c:	e009      	b.n	8006972 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0210 	orr.w	r2, r2, #16
 800696c:	60da      	str	r2, [r3, #12]
      break;
 800696e:	e000      	b.n	8006972 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8006970:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2201      	movs	r2, #1
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f000 ff12 	bl	80077a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a2d      	ldr	r2, [pc, #180]	; (8006a3c <HAL_TIM_OC_Start_IT+0x200>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d004      	beq.n	8006994 <HAL_TIM_OC_Start_IT+0x158>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a2c      	ldr	r2, [pc, #176]	; (8006a40 <HAL_TIM_OC_Start_IT+0x204>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d101      	bne.n	8006998 <HAL_TIM_OC_Start_IT+0x15c>
 8006994:	2301      	movs	r3, #1
 8006996:	e000      	b.n	800699a <HAL_TIM_OC_Start_IT+0x15e>
 8006998:	2300      	movs	r3, #0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d007      	beq.n	80069ae <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a22      	ldr	r2, [pc, #136]	; (8006a3c <HAL_TIM_OC_Start_IT+0x200>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d022      	beq.n	80069fe <HAL_TIM_OC_Start_IT+0x1c2>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c0:	d01d      	beq.n	80069fe <HAL_TIM_OC_Start_IT+0x1c2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1f      	ldr	r2, [pc, #124]	; (8006a44 <HAL_TIM_OC_Start_IT+0x208>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d018      	beq.n	80069fe <HAL_TIM_OC_Start_IT+0x1c2>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a1d      	ldr	r2, [pc, #116]	; (8006a48 <HAL_TIM_OC_Start_IT+0x20c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d013      	beq.n	80069fe <HAL_TIM_OC_Start_IT+0x1c2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a1c      	ldr	r2, [pc, #112]	; (8006a4c <HAL_TIM_OC_Start_IT+0x210>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d00e      	beq.n	80069fe <HAL_TIM_OC_Start_IT+0x1c2>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a16      	ldr	r2, [pc, #88]	; (8006a40 <HAL_TIM_OC_Start_IT+0x204>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d009      	beq.n	80069fe <HAL_TIM_OC_Start_IT+0x1c2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a18      	ldr	r2, [pc, #96]	; (8006a50 <HAL_TIM_OC_Start_IT+0x214>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d004      	beq.n	80069fe <HAL_TIM_OC_Start_IT+0x1c2>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a16      	ldr	r2, [pc, #88]	; (8006a54 <HAL_TIM_OC_Start_IT+0x218>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d111      	bne.n	8006a22 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b06      	cmp	r3, #6
 8006a0e:	d010      	beq.n	8006a32 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0201 	orr.w	r2, r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a20:	e007      	b.n	8006a32 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f042 0201 	orr.w	r2, r2, #1
 8006a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40010000 	.word	0x40010000
 8006a40:	40010400 	.word	0x40010400
 8006a44:	40000400 	.word	0x40000400
 8006a48:	40000800 	.word	0x40000800
 8006a4c:	40000c00 	.word	0x40000c00
 8006a50:	40014000 	.word	0x40014000
 8006a54:	40001800 	.word	0x40001800

08006a58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e041      	b.n	8006aee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d106      	bne.n	8006a84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f839 	bl	8006af6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3304      	adds	r3, #4
 8006a94:	4619      	mov	r1, r3
 8006a96:	4610      	mov	r0, r2
 8006a98:	f000 fb9a 	bl	80071d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b086      	sub	sp, #24
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e097      	b.n	8006c4e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d106      	bne.n	8006b38 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7fb fca4 	bl	8002480 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6812      	ldr	r2, [r2, #0]
 8006b4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b4e:	f023 0307 	bic.w	r3, r3, #7
 8006b52:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	f000 fb36 	bl	80071d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b8c:	f023 0303 	bic.w	r3, r3, #3
 8006b90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	689a      	ldr	r2, [r3, #8]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	021b      	lsls	r3, r3, #8
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006baa:	f023 030c 	bic.w	r3, r3, #12
 8006bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	021b      	lsls	r3, r3, #8
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	011a      	lsls	r2, r3, #4
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	031b      	lsls	r3, r3, #12
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006be8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006bf0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d122      	bne.n	8006cb2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d11b      	bne.n	8006cb2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f06f 0202 	mvn.w	r2, #2
 8006c82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	f003 0303 	and.w	r3, r3, #3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fa7b 	bl	8007194 <HAL_TIM_IC_CaptureCallback>
 8006c9e:	e005      	b.n	8006cac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fa6d 	bl	8007180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fa7e 	bl	80071a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d122      	bne.n	8006d06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d11b      	bne.n	8006d06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f06f 0204 	mvn.w	r2, #4
 8006cd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fa51 	bl	8007194 <HAL_TIM_IC_CaptureCallback>
 8006cf2:	e005      	b.n	8006d00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fa43 	bl	8007180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fa54 	bl	80071a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	f003 0308 	and.w	r3, r3, #8
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d122      	bne.n	8006d5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b08      	cmp	r3, #8
 8006d20:	d11b      	bne.n	8006d5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f06f 0208 	mvn.w	r2, #8
 8006d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2204      	movs	r2, #4
 8006d30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	f003 0303 	and.w	r3, r3, #3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fa27 	bl	8007194 <HAL_TIM_IC_CaptureCallback>
 8006d46:	e005      	b.n	8006d54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fa19 	bl	8007180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fa2a 	bl	80071a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	f003 0310 	and.w	r3, r3, #16
 8006d64:	2b10      	cmp	r3, #16
 8006d66:	d122      	bne.n	8006dae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f003 0310 	and.w	r3, r3, #16
 8006d72:	2b10      	cmp	r3, #16
 8006d74:	d11b      	bne.n	8006dae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f06f 0210 	mvn.w	r2, #16
 8006d7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2208      	movs	r2, #8
 8006d84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f9fd 	bl	8007194 <HAL_TIM_IC_CaptureCallback>
 8006d9a:	e005      	b.n	8006da8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f9ef 	bl	8007180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fa00 	bl	80071a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d10e      	bne.n	8006dda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d107      	bne.n	8006dda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f06f 0201 	mvn.w	r2, #1
 8006dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f9c9 	bl	800716c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de4:	2b80      	cmp	r3, #128	; 0x80
 8006de6:	d10e      	bne.n	8006e06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df2:	2b80      	cmp	r3, #128	; 0x80
 8006df4:	d107      	bne.n	8006e06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fd7b 	bl	80078fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e10:	2b40      	cmp	r3, #64	; 0x40
 8006e12:	d10e      	bne.n	8006e32 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1e:	2b40      	cmp	r3, #64	; 0x40
 8006e20:	d107      	bne.n	8006e32 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f9c5 	bl	80071bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	f003 0320 	and.w	r3, r3, #32
 8006e3c:	2b20      	cmp	r3, #32
 8006e3e:	d10e      	bne.n	8006e5e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f003 0320 	and.w	r3, r3, #32
 8006e4a:	2b20      	cmp	r3, #32
 8006e4c:	d107      	bne.n	8006e5e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f06f 0220 	mvn.w	r2, #32
 8006e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fd45 	bl	80078e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d101      	bne.n	8006e82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006e7e:	2302      	movs	r3, #2
 8006e80:	e0ac      	b.n	8006fdc <HAL_TIM_PWM_ConfigChannel+0x174>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b0c      	cmp	r3, #12
 8006e8e:	f200 809f 	bhi.w	8006fd0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006e92:	a201      	add	r2, pc, #4	; (adr r2, 8006e98 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e98:	08006ecd 	.word	0x08006ecd
 8006e9c:	08006fd1 	.word	0x08006fd1
 8006ea0:	08006fd1 	.word	0x08006fd1
 8006ea4:	08006fd1 	.word	0x08006fd1
 8006ea8:	08006f0d 	.word	0x08006f0d
 8006eac:	08006fd1 	.word	0x08006fd1
 8006eb0:	08006fd1 	.word	0x08006fd1
 8006eb4:	08006fd1 	.word	0x08006fd1
 8006eb8:	08006f4f 	.word	0x08006f4f
 8006ebc:	08006fd1 	.word	0x08006fd1
 8006ec0:	08006fd1 	.word	0x08006fd1
 8006ec4:	08006fd1 	.word	0x08006fd1
 8006ec8:	08006f8f 	.word	0x08006f8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fa1c 	bl	8007310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699a      	ldr	r2, [r3, #24]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 0208 	orr.w	r2, r2, #8
 8006ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699a      	ldr	r2, [r3, #24]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 0204 	bic.w	r2, r2, #4
 8006ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6999      	ldr	r1, [r3, #24]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	619a      	str	r2, [r3, #24]
      break;
 8006f0a:	e062      	b.n	8006fd2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68b9      	ldr	r1, [r7, #8]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fa6c 	bl	80073f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	699a      	ldr	r2, [r3, #24]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	699a      	ldr	r2, [r3, #24]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6999      	ldr	r1, [r3, #24]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	021a      	lsls	r2, r3, #8
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	619a      	str	r2, [r3, #24]
      break;
 8006f4c:	e041      	b.n	8006fd2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68b9      	ldr	r1, [r7, #8]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fac1 	bl	80074dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69da      	ldr	r2, [r3, #28]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f042 0208 	orr.w	r2, r2, #8
 8006f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69da      	ldr	r2, [r3, #28]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0204 	bic.w	r2, r2, #4
 8006f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69d9      	ldr	r1, [r3, #28]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	691a      	ldr	r2, [r3, #16]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	61da      	str	r2, [r3, #28]
      break;
 8006f8c:	e021      	b.n	8006fd2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68b9      	ldr	r1, [r7, #8]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 fb15 	bl	80075c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69da      	ldr	r2, [r3, #28]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69da      	ldr	r2, [r3, #28]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69d9      	ldr	r1, [r3, #28]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	021a      	lsls	r2, r3, #8
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	61da      	str	r2, [r3, #28]
      break;
 8006fce:	e000      	b.n	8006fd2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006fd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d101      	bne.n	8006ffc <HAL_TIM_ConfigClockSource+0x18>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e0b3      	b.n	8007164 <HAL_TIM_ConfigClockSource+0x180>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800701a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007022:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007034:	d03e      	beq.n	80070b4 <HAL_TIM_ConfigClockSource+0xd0>
 8007036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800703a:	f200 8087 	bhi.w	800714c <HAL_TIM_ConfigClockSource+0x168>
 800703e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007042:	f000 8085 	beq.w	8007150 <HAL_TIM_ConfigClockSource+0x16c>
 8007046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800704a:	d87f      	bhi.n	800714c <HAL_TIM_ConfigClockSource+0x168>
 800704c:	2b70      	cmp	r3, #112	; 0x70
 800704e:	d01a      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0xa2>
 8007050:	2b70      	cmp	r3, #112	; 0x70
 8007052:	d87b      	bhi.n	800714c <HAL_TIM_ConfigClockSource+0x168>
 8007054:	2b60      	cmp	r3, #96	; 0x60
 8007056:	d050      	beq.n	80070fa <HAL_TIM_ConfigClockSource+0x116>
 8007058:	2b60      	cmp	r3, #96	; 0x60
 800705a:	d877      	bhi.n	800714c <HAL_TIM_ConfigClockSource+0x168>
 800705c:	2b50      	cmp	r3, #80	; 0x50
 800705e:	d03c      	beq.n	80070da <HAL_TIM_ConfigClockSource+0xf6>
 8007060:	2b50      	cmp	r3, #80	; 0x50
 8007062:	d873      	bhi.n	800714c <HAL_TIM_ConfigClockSource+0x168>
 8007064:	2b40      	cmp	r3, #64	; 0x40
 8007066:	d058      	beq.n	800711a <HAL_TIM_ConfigClockSource+0x136>
 8007068:	2b40      	cmp	r3, #64	; 0x40
 800706a:	d86f      	bhi.n	800714c <HAL_TIM_ConfigClockSource+0x168>
 800706c:	2b30      	cmp	r3, #48	; 0x30
 800706e:	d064      	beq.n	800713a <HAL_TIM_ConfigClockSource+0x156>
 8007070:	2b30      	cmp	r3, #48	; 0x30
 8007072:	d86b      	bhi.n	800714c <HAL_TIM_ConfigClockSource+0x168>
 8007074:	2b20      	cmp	r3, #32
 8007076:	d060      	beq.n	800713a <HAL_TIM_ConfigClockSource+0x156>
 8007078:	2b20      	cmp	r3, #32
 800707a:	d867      	bhi.n	800714c <HAL_TIM_ConfigClockSource+0x168>
 800707c:	2b00      	cmp	r3, #0
 800707e:	d05c      	beq.n	800713a <HAL_TIM_ConfigClockSource+0x156>
 8007080:	2b10      	cmp	r3, #16
 8007082:	d05a      	beq.n	800713a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007084:	e062      	b.n	800714c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	6899      	ldr	r1, [r3, #8]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f000 fb65 	bl	8007764 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80070a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	609a      	str	r2, [r3, #8]
      break;
 80070b2:	e04e      	b.n	8007152 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6818      	ldr	r0, [r3, #0]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	6899      	ldr	r1, [r3, #8]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f000 fb4e 	bl	8007764 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070d6:	609a      	str	r2, [r3, #8]
      break;
 80070d8:	e03b      	b.n	8007152 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6818      	ldr	r0, [r3, #0]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	6859      	ldr	r1, [r3, #4]
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	461a      	mov	r2, r3
 80070e8:	f000 fac2 	bl	8007670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2150      	movs	r1, #80	; 0x50
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fb1b 	bl	800772e <TIM_ITRx_SetConfig>
      break;
 80070f8:	e02b      	b.n	8007152 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6818      	ldr	r0, [r3, #0]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	6859      	ldr	r1, [r3, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	461a      	mov	r2, r3
 8007108:	f000 fae1 	bl	80076ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2160      	movs	r1, #96	; 0x60
 8007112:	4618      	mov	r0, r3
 8007114:	f000 fb0b 	bl	800772e <TIM_ITRx_SetConfig>
      break;
 8007118:	e01b      	b.n	8007152 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6818      	ldr	r0, [r3, #0]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	6859      	ldr	r1, [r3, #4]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	461a      	mov	r2, r3
 8007128:	f000 faa2 	bl	8007670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2140      	movs	r1, #64	; 0x40
 8007132:	4618      	mov	r0, r3
 8007134:	f000 fafb 	bl	800772e <TIM_ITRx_SetConfig>
      break;
 8007138:	e00b      	b.n	8007152 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4619      	mov	r1, r3
 8007144:	4610      	mov	r0, r2
 8007146:	f000 faf2 	bl	800772e <TIM_ITRx_SetConfig>
        break;
 800714a:	e002      	b.n	8007152 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800714c:	bf00      	nop
 800714e:	e000      	b.n	8007152 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007150:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a40      	ldr	r2, [pc, #256]	; (80072e4 <TIM_Base_SetConfig+0x114>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d013      	beq.n	8007210 <TIM_Base_SetConfig+0x40>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ee:	d00f      	beq.n	8007210 <TIM_Base_SetConfig+0x40>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a3d      	ldr	r2, [pc, #244]	; (80072e8 <TIM_Base_SetConfig+0x118>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d00b      	beq.n	8007210 <TIM_Base_SetConfig+0x40>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a3c      	ldr	r2, [pc, #240]	; (80072ec <TIM_Base_SetConfig+0x11c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d007      	beq.n	8007210 <TIM_Base_SetConfig+0x40>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a3b      	ldr	r2, [pc, #236]	; (80072f0 <TIM_Base_SetConfig+0x120>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d003      	beq.n	8007210 <TIM_Base_SetConfig+0x40>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a3a      	ldr	r2, [pc, #232]	; (80072f4 <TIM_Base_SetConfig+0x124>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d108      	bne.n	8007222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a2f      	ldr	r2, [pc, #188]	; (80072e4 <TIM_Base_SetConfig+0x114>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d02b      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007230:	d027      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a2c      	ldr	r2, [pc, #176]	; (80072e8 <TIM_Base_SetConfig+0x118>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d023      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a2b      	ldr	r2, [pc, #172]	; (80072ec <TIM_Base_SetConfig+0x11c>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d01f      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a2a      	ldr	r2, [pc, #168]	; (80072f0 <TIM_Base_SetConfig+0x120>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d01b      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a29      	ldr	r2, [pc, #164]	; (80072f4 <TIM_Base_SetConfig+0x124>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d017      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a28      	ldr	r2, [pc, #160]	; (80072f8 <TIM_Base_SetConfig+0x128>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d013      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a27      	ldr	r2, [pc, #156]	; (80072fc <TIM_Base_SetConfig+0x12c>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00f      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a26      	ldr	r2, [pc, #152]	; (8007300 <TIM_Base_SetConfig+0x130>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00b      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a25      	ldr	r2, [pc, #148]	; (8007304 <TIM_Base_SetConfig+0x134>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d007      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a24      	ldr	r2, [pc, #144]	; (8007308 <TIM_Base_SetConfig+0x138>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d003      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a23      	ldr	r2, [pc, #140]	; (800730c <TIM_Base_SetConfig+0x13c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d108      	bne.n	8007294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4313      	orrs	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a0a      	ldr	r2, [pc, #40]	; (80072e4 <TIM_Base_SetConfig+0x114>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d003      	beq.n	80072c8 <TIM_Base_SetConfig+0xf8>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a0c      	ldr	r2, [pc, #48]	; (80072f4 <TIM_Base_SetConfig+0x124>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d103      	bne.n	80072d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	691a      	ldr	r2, [r3, #16]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	615a      	str	r2, [r3, #20]
}
 80072d6:	bf00      	nop
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	40010000 	.word	0x40010000
 80072e8:	40000400 	.word	0x40000400
 80072ec:	40000800 	.word	0x40000800
 80072f0:	40000c00 	.word	0x40000c00
 80072f4:	40010400 	.word	0x40010400
 80072f8:	40014000 	.word	0x40014000
 80072fc:	40014400 	.word	0x40014400
 8007300:	40014800 	.word	0x40014800
 8007304:	40001800 	.word	0x40001800
 8007308:	40001c00 	.word	0x40001c00
 800730c:	40002000 	.word	0x40002000

08007310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	f023 0201 	bic.w	r2, r3, #1
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 0303 	bic.w	r3, r3, #3
 8007346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f023 0302 	bic.w	r3, r3, #2
 8007358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	4313      	orrs	r3, r2
 8007362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a20      	ldr	r2, [pc, #128]	; (80073e8 <TIM_OC1_SetConfig+0xd8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d003      	beq.n	8007374 <TIM_OC1_SetConfig+0x64>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a1f      	ldr	r2, [pc, #124]	; (80073ec <TIM_OC1_SetConfig+0xdc>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d10c      	bne.n	800738e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	f023 0308 	bic.w	r3, r3, #8
 800737a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	4313      	orrs	r3, r2
 8007384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f023 0304 	bic.w	r3, r3, #4
 800738c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a15      	ldr	r2, [pc, #84]	; (80073e8 <TIM_OC1_SetConfig+0xd8>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d003      	beq.n	800739e <TIM_OC1_SetConfig+0x8e>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a14      	ldr	r2, [pc, #80]	; (80073ec <TIM_OC1_SetConfig+0xdc>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d111      	bne.n	80073c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	4313      	orrs	r3, r2
 80073c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	621a      	str	r2, [r3, #32]
}
 80073dc:	bf00      	nop
 80073de:	371c      	adds	r7, #28
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	40010000 	.word	0x40010000
 80073ec:	40010400 	.word	0x40010400

080073f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	f023 0210 	bic.w	r2, r3, #16
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800741e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4313      	orrs	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f023 0320 	bic.w	r3, r3, #32
 800743a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a22      	ldr	r2, [pc, #136]	; (80074d4 <TIM_OC2_SetConfig+0xe4>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d003      	beq.n	8007458 <TIM_OC2_SetConfig+0x68>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a21      	ldr	r2, [pc, #132]	; (80074d8 <TIM_OC2_SetConfig+0xe8>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d10d      	bne.n	8007474 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800745e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	011b      	lsls	r3, r3, #4
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	4313      	orrs	r3, r2
 800746a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007472:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a17      	ldr	r2, [pc, #92]	; (80074d4 <TIM_OC2_SetConfig+0xe4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d003      	beq.n	8007484 <TIM_OC2_SetConfig+0x94>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a16      	ldr	r2, [pc, #88]	; (80074d8 <TIM_OC2_SetConfig+0xe8>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d113      	bne.n	80074ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800748a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	4313      	orrs	r3, r2
 800749e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	621a      	str	r2, [r3, #32]
}
 80074c6:	bf00      	nop
 80074c8:	371c      	adds	r7, #28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	40010000 	.word	0x40010000
 80074d8:	40010400 	.word	0x40010400

080074dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 0303 	bic.w	r3, r3, #3
 8007512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	4313      	orrs	r3, r2
 800751c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	021b      	lsls	r3, r3, #8
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	4313      	orrs	r3, r2
 8007530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a21      	ldr	r2, [pc, #132]	; (80075bc <TIM_OC3_SetConfig+0xe0>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d003      	beq.n	8007542 <TIM_OC3_SetConfig+0x66>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a20      	ldr	r2, [pc, #128]	; (80075c0 <TIM_OC3_SetConfig+0xe4>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d10d      	bne.n	800755e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	021b      	lsls	r3, r3, #8
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	4313      	orrs	r3, r2
 8007554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800755c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a16      	ldr	r2, [pc, #88]	; (80075bc <TIM_OC3_SetConfig+0xe0>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d003      	beq.n	800756e <TIM_OC3_SetConfig+0x92>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a15      	ldr	r2, [pc, #84]	; (80075c0 <TIM_OC3_SetConfig+0xe4>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d113      	bne.n	8007596 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800757c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	011b      	lsls	r3, r3, #4
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	4313      	orrs	r3, r2
 8007588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	4313      	orrs	r3, r2
 8007594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	621a      	str	r2, [r3, #32]
}
 80075b0:	bf00      	nop
 80075b2:	371c      	adds	r7, #28
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	40010000 	.word	0x40010000
 80075c0:	40010400 	.word	0x40010400

080075c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	021b      	lsls	r3, r3, #8
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	4313      	orrs	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800760e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	031b      	lsls	r3, r3, #12
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a12      	ldr	r2, [pc, #72]	; (8007668 <TIM_OC4_SetConfig+0xa4>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d003      	beq.n	800762c <TIM_OC4_SetConfig+0x68>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a11      	ldr	r2, [pc, #68]	; (800766c <TIM_OC4_SetConfig+0xa8>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d109      	bne.n	8007640 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	019b      	lsls	r3, r3, #6
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	4313      	orrs	r3, r2
 800763e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	621a      	str	r2, [r3, #32]
}
 800765a:	bf00      	nop
 800765c:	371c      	adds	r7, #28
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	40010000 	.word	0x40010000
 800766c:	40010400 	.word	0x40010400

08007670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007670:	b480      	push	{r7}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	f023 0201 	bic.w	r2, r3, #1
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800769a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	011b      	lsls	r3, r3, #4
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f023 030a 	bic.w	r3, r3, #10
 80076ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	621a      	str	r2, [r3, #32]
}
 80076c2:	bf00      	nop
 80076c4:	371c      	adds	r7, #28
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b087      	sub	sp, #28
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	60b9      	str	r1, [r7, #8]
 80076d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	f023 0210 	bic.w	r2, r3, #16
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	031b      	lsls	r3, r3, #12
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4313      	orrs	r3, r2
 8007702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800770a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	011b      	lsls	r3, r3, #4
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	4313      	orrs	r3, r2
 8007714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	621a      	str	r2, [r3, #32]
}
 8007722:	bf00      	nop
 8007724:	371c      	adds	r7, #28
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800772e:	b480      	push	{r7}
 8007730:	b085      	sub	sp, #20
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4313      	orrs	r3, r2
 800774c:	f043 0307 	orr.w	r3, r3, #7
 8007750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	609a      	str	r2, [r3, #8]
}
 8007758:	bf00      	nop
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800777e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	021a      	lsls	r2, r3, #8
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	431a      	orrs	r2, r3
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	4313      	orrs	r3, r2
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	4313      	orrs	r3, r2
 8007790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	609a      	str	r2, [r3, #8]
}
 8007798:	bf00      	nop
 800779a:	371c      	adds	r7, #28
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f003 031f 	and.w	r3, r3, #31
 80077b6:	2201      	movs	r2, #1
 80077b8:	fa02 f303 	lsl.w	r3, r2, r3
 80077bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6a1a      	ldr	r2, [r3, #32]
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	43db      	mvns	r3, r3
 80077c6:	401a      	ands	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6a1a      	ldr	r2, [r3, #32]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	6879      	ldr	r1, [r7, #4]
 80077d8:	fa01 f303 	lsl.w	r3, r1, r3
 80077dc:	431a      	orrs	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	621a      	str	r2, [r3, #32]
}
 80077e2:	bf00      	nop
 80077e4:	371c      	adds	r7, #28
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007800:	2b01      	cmp	r3, #1
 8007802:	d101      	bne.n	8007808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007804:	2302      	movs	r3, #2
 8007806:	e05a      	b.n	80078be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800782e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a21      	ldr	r2, [pc, #132]	; (80078cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d022      	beq.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007854:	d01d      	beq.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a1d      	ldr	r2, [pc, #116]	; (80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d018      	beq.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a1b      	ldr	r2, [pc, #108]	; (80078d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d013      	beq.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1a      	ldr	r2, [pc, #104]	; (80078d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00e      	beq.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a18      	ldr	r2, [pc, #96]	; (80078dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d009      	beq.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a17      	ldr	r2, [pc, #92]	; (80078e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d004      	beq.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a15      	ldr	r2, [pc, #84]	; (80078e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d10c      	bne.n	80078ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	40010000 	.word	0x40010000
 80078d0:	40000400 	.word	0x40000400
 80078d4:	40000800 	.word	0x40000800
 80078d8:	40000c00 	.word	0x40000c00
 80078dc:	40010400 	.word	0x40010400
 80078e0:	40014000 	.word	0x40014000
 80078e4:	40001800 	.word	0x40001800

080078e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007910:	b084      	sub	sp, #16
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	f107 001c 	add.w	r0, r7, #28
 800791e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	2b01      	cmp	r3, #1
 8007926:	d122      	bne.n	800796e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800793c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007952:	2b01      	cmp	r3, #1
 8007954:	d105      	bne.n	8007962 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f94a 	bl	8007bfc <USB_CoreReset>
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]
 800796c:	e01a      	b.n	80079a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f93e 	bl	8007bfc <USB_CoreReset>
 8007980:	4603      	mov	r3, r0
 8007982:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007986:	2b00      	cmp	r3, #0
 8007988:	d106      	bne.n	8007998 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	639a      	str	r2, [r3, #56]	; 0x38
 8007996:	e005      	b.n	80079a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d10b      	bne.n	80079c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f043 0206 	orr.w	r2, r3, #6
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f043 0220 	orr.w	r2, r3, #32
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079ce:	b004      	add	sp, #16
 80079d0:	4770      	bx	lr

080079d2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f043 0201 	orr.w	r2, r3, #1
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f023 0201 	bic.w	r2, r3, #1
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b082      	sub	sp, #8
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a2e:	78fb      	ldrb	r3, [r7, #3]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d106      	bne.n	8007a42 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	60da      	str	r2, [r3, #12]
 8007a40:	e00b      	b.n	8007a5a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a42:	78fb      	ldrb	r3, [r7, #3]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d106      	bne.n	8007a56 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	60da      	str	r2, [r3, #12]
 8007a54:	e001      	b.n	8007a5a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e003      	b.n	8007a62 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007a5a:	2032      	movs	r0, #50	; 0x32
 8007a5c:	f7fa ff0a 	bl	8002874 <HAL_Delay>

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
	...

08007a6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	019b      	lsls	r3, r3, #6
 8007a7e:	f043 0220 	orr.w	r2, r3, #32
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4a09      	ldr	r2, [pc, #36]	; (8007ab4 <USB_FlushTxFifo+0x48>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d901      	bls.n	8007a98 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e006      	b.n	8007aa6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	f003 0320 	and.w	r3, r3, #32
 8007aa0:	2b20      	cmp	r3, #32
 8007aa2:	d0f0      	beq.n	8007a86 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	00030d40 	.word	0x00030d40

08007ab8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2210      	movs	r2, #16
 8007ac8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	3301      	adds	r3, #1
 8007ace:	60fb      	str	r3, [r7, #12]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4a09      	ldr	r2, [pc, #36]	; (8007af8 <USB_FlushRxFifo+0x40>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d901      	bls.n	8007adc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e006      	b.n	8007aea <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	f003 0310 	and.w	r3, r3, #16
 8007ae4:	2b10      	cmp	r3, #16
 8007ae6:	d0f0      	beq.n	8007aca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	00030d40 	.word	0x00030d40

08007afc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b089      	sub	sp, #36	; 0x24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	4611      	mov	r1, r2
 8007b08:	461a      	mov	r2, r3
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	71fb      	strb	r3, [r7, #7]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007b1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d11a      	bne.n	8007b58 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b22:	88bb      	ldrh	r3, [r7, #4]
 8007b24:	3303      	adds	r3, #3
 8007b26:	089b      	lsrs	r3, r3, #2
 8007b28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	61bb      	str	r3, [r7, #24]
 8007b2e:	e00f      	b.n	8007b50 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	031a      	lsls	r2, r3, #12
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	3304      	adds	r3, #4
 8007b48:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	61bb      	str	r3, [r7, #24]
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d3eb      	bcc.n	8007b30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3724      	adds	r7, #36	; 0x24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b089      	sub	sp, #36	; 0x24
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	60f8      	str	r0, [r7, #12]
 8007b6e:	60b9      	str	r1, [r7, #8]
 8007b70:	4613      	mov	r3, r2
 8007b72:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007b7c:	88fb      	ldrh	r3, [r7, #6]
 8007b7e:	3303      	adds	r3, #3
 8007b80:	089b      	lsrs	r3, r3, #2
 8007b82:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007b84:	2300      	movs	r3, #0
 8007b86:	61bb      	str	r3, [r7, #24]
 8007b88:	e00b      	b.n	8007ba2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	61bb      	str	r3, [r7, #24]
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d3ef      	bcc.n	8007b8a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007baa:	69fb      	ldr	r3, [r7, #28]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3724      	adds	r7, #36	; 0x24
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	4013      	ands	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b083      	sub	sp, #12
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	f003 0301 	and.w	r3, r3, #1
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
	...

08007bfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4a13      	ldr	r2, [pc, #76]	; (8007c60 <USB_CoreReset+0x64>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d901      	bls.n	8007c1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e01b      	b.n	8007c52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	daf2      	bge.n	8007c08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	f043 0201 	orr.w	r2, r3, #1
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3301      	adds	r3, #1
 8007c36:	60fb      	str	r3, [r7, #12]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4a09      	ldr	r2, [pc, #36]	; (8007c60 <USB_CoreReset+0x64>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d901      	bls.n	8007c44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e006      	b.n	8007c52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d0f0      	beq.n	8007c32 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	00030d40 	.word	0x00030d40

08007c64 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c64:	b084      	sub	sp, #16
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	f107 001c 	add.w	r0, r7, #28
 8007c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c80:	461a      	mov	r2, r3
 8007c82:	2300      	movs	r3, #0
 8007c84:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c96:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d018      	beq.n	8007ce8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d10a      	bne.n	8007cd2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cca:	f043 0304 	orr.w	r3, r3, #4
 8007cce:	6013      	str	r3, [r2, #0]
 8007cd0:	e014      	b.n	8007cfc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ce0:	f023 0304 	bic.w	r3, r3, #4
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	e009      	b.n	8007cfc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cf6:	f023 0304 	bic.w	r3, r3, #4
 8007cfa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007cfc:	2110      	movs	r1, #16
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff feb4 	bl	8007a6c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7ff fed7 	bl	8007ab8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	e015      	b.n	8007d3c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d22:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d30:	461a      	mov	r2, r3
 8007d32:	2300      	movs	r3, #0
 8007d34:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	60fb      	str	r3, [r7, #12]
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d3e5      	bcc.n	8007d10 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007d44:	2101      	movs	r1, #1
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f8ac 	bl	8007ea4 <USB_DriveVbus>

  HAL_Delay(200U);
 8007d4c:	20c8      	movs	r0, #200	; 0xc8
 8007d4e:	f7fa fd91 	bl	8002874 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d5e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00b      	beq.n	8007d84 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d72:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a14      	ldr	r2, [pc, #80]	; (8007dc8 <USB_HostInit+0x164>)
 8007d78:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a13      	ldr	r2, [pc, #76]	; (8007dcc <USB_HostInit+0x168>)
 8007d7e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007d82:	e009      	b.n	8007d98 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2280      	movs	r2, #128	; 0x80
 8007d88:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a10      	ldr	r2, [pc, #64]	; (8007dd0 <USB_HostInit+0x16c>)
 8007d8e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a10      	ldr	r2, [pc, #64]	; (8007dd4 <USB_HostInit+0x170>)
 8007d94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d105      	bne.n	8007daa <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	f043 0210 	orr.w	r2, r3, #16
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	699a      	ldr	r2, [r3, #24]
 8007dae:	4b0a      	ldr	r3, [pc, #40]	; (8007dd8 <USB_HostInit+0x174>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dc2:	b004      	add	sp, #16
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	01000200 	.word	0x01000200
 8007dcc:	00e00300 	.word	0x00e00300
 8007dd0:	00600080 	.word	0x00600080
 8007dd4:	004000e0 	.word	0x004000e0
 8007dd8:	a3200008 	.word	0xa3200008

08007ddc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	460b      	mov	r3, r1
 8007de6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007dfa:	f023 0303 	bic.w	r3, r3, #3
 8007dfe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	f003 0303 	and.w	r3, r3, #3
 8007e0e:	68f9      	ldr	r1, [r7, #12]
 8007e10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007e14:	4313      	orrs	r3, r2
 8007e16:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d107      	bne.n	8007e2e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e24:	461a      	mov	r2, r3
 8007e26:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007e2a:	6053      	str	r3, [r2, #4]
 8007e2c:	e009      	b.n	8007e42 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007e2e:	78fb      	ldrb	r3, [r7, #3]
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d106      	bne.n	8007e42 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007e40:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007e70:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e7e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007e80:	2064      	movs	r0, #100	; 0x64
 8007e82:	f7fa fcf7 	bl	8002874 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e92:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007e94:	200a      	movs	r0, #10
 8007e96:	f7fa fced 	bl	8002874 <HAL_Delay>

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007ec8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d109      	bne.n	8007ee8 <USB_DriveVbus+0x44>
 8007ed4:	78fb      	ldrb	r3, [r7, #3]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d106      	bne.n	8007ee8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007ee2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ee6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef2:	d109      	bne.n	8007f08 <USB_DriveVbus+0x64>
 8007ef4:	78fb      	ldrb	r3, [r7, #3]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f06:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b085      	sub	sp, #20
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	0c5b      	lsrs	r3, r3, #17
 8007f34:	f003 0303 	and.w	r3, r3, #3
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	b29b      	uxth	r3, r3
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
	...

08007f68 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	4608      	mov	r0, r1
 8007f72:	4611      	mov	r1, r2
 8007f74:	461a      	mov	r2, r3
 8007f76:	4603      	mov	r3, r0
 8007f78:	70fb      	strb	r3, [r7, #3]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	70bb      	strb	r3, [r7, #2]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f96:	461a      	mov	r2, r3
 8007f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f9c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007f9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d87e      	bhi.n	80080a4 <USB_HC_Init+0x13c>
 8007fa6:	a201      	add	r2, pc, #4	; (adr r2, 8007fac <USB_HC_Init+0x44>)
 8007fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fac:	08007fbd 	.word	0x08007fbd
 8007fb0:	08008067 	.word	0x08008067
 8007fb4:	08007fbd 	.word	0x08007fbd
 8007fb8:	08008029 	.word	0x08008029
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc8:	461a      	mov	r2, r3
 8007fca:	f240 439d 	movw	r3, #1181	; 0x49d
 8007fce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007fd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	da10      	bge.n	8007ffa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	78fa      	ldrb	r2, [r7, #3]
 8007fe8:	0151      	lsls	r1, r2, #5
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	440a      	add	r2, r1
 8007fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ff6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007ff8:	e057      	b.n	80080aa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008002:	2b00      	cmp	r3, #0
 8008004:	d051      	beq.n	80080aa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008006:	78fb      	ldrb	r3, [r7, #3]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	4413      	add	r3, r2
 800800e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	78fa      	ldrb	r2, [r7, #3]
 8008016:	0151      	lsls	r1, r2, #5
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	440a      	add	r2, r1
 800801c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008020:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008024:	60d3      	str	r3, [r2, #12]
      break;
 8008026:	e040      	b.n	80080aa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008028:	78fb      	ldrb	r3, [r7, #3]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	4413      	add	r3, r2
 8008030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008034:	461a      	mov	r2, r3
 8008036:	f240 639d 	movw	r3, #1693	; 0x69d
 800803a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800803c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008040:	2b00      	cmp	r3, #0
 8008042:	da34      	bge.n	80080ae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	4413      	add	r3, r2
 800804c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	78fa      	ldrb	r2, [r7, #3]
 8008054:	0151      	lsls	r1, r2, #5
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	440a      	add	r2, r1
 800805a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800805e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008062:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008064:	e023      	b.n	80080ae <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008066:	78fb      	ldrb	r3, [r7, #3]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	4413      	add	r3, r2
 800806e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008072:	461a      	mov	r2, r3
 8008074:	f240 2325 	movw	r3, #549	; 0x225
 8008078:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800807a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800807e:	2b00      	cmp	r3, #0
 8008080:	da17      	bge.n	80080b2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008082:	78fb      	ldrb	r3, [r7, #3]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	4413      	add	r3, r2
 800808a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	78fa      	ldrb	r2, [r7, #3]
 8008092:	0151      	lsls	r1, r2, #5
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	440a      	add	r2, r1
 8008098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800809c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80080a0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80080a2:	e006      	b.n	80080b2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	77fb      	strb	r3, [r7, #31]
      break;
 80080a8:	e004      	b.n	80080b4 <USB_HC_Init+0x14c>
      break;
 80080aa:	bf00      	nop
 80080ac:	e002      	b.n	80080b4 <USB_HC_Init+0x14c>
      break;
 80080ae:	bf00      	nop
 80080b0:	e000      	b.n	80080b4 <USB_HC_Init+0x14c>
      break;
 80080b2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080ba:	699a      	ldr	r2, [r3, #24]
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	f003 030f 	and.w	r3, r3, #15
 80080c2:	2101      	movs	r1, #1
 80080c4:	fa01 f303 	lsl.w	r3, r1, r3
 80080c8:	6939      	ldr	r1, [r7, #16]
 80080ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80080ce:	4313      	orrs	r3, r2
 80080d0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80080de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	da03      	bge.n	80080ee <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80080e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080ea:	61bb      	str	r3, [r7, #24]
 80080ec:	e001      	b.n	80080f2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80080ee:	2300      	movs	r3, #0
 80080f0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7ff ff0f 	bl	8007f16 <USB_GetHostSpeed>
 80080f8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80080fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d106      	bne.n	8008110 <USB_HC_Init+0x1a8>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b02      	cmp	r3, #2
 8008106:	d003      	beq.n	8008110 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800810c:	617b      	str	r3, [r7, #20]
 800810e:	e001      	b.n	8008114 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008114:	787b      	ldrb	r3, [r7, #1]
 8008116:	059b      	lsls	r3, r3, #22
 8008118:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800811c:	78bb      	ldrb	r3, [r7, #2]
 800811e:	02db      	lsls	r3, r3, #11
 8008120:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008124:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008126:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800812a:	049b      	lsls	r3, r3, #18
 800812c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008130:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008132:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008134:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008138:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800813e:	78fb      	ldrb	r3, [r7, #3]
 8008140:	0159      	lsls	r1, r3, #5
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	440b      	add	r3, r1
 8008146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800814a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008150:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008152:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008156:	2b03      	cmp	r3, #3
 8008158:	d10f      	bne.n	800817a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	015a      	lsls	r2, r3, #5
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	4413      	add	r3, r2
 8008162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	78fa      	ldrb	r2, [r7, #3]
 800816a:	0151      	lsls	r1, r2, #5
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	440a      	add	r2, r1
 8008170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008174:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008178:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800817a:	7ffb      	ldrb	r3, [r7, #31]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3720      	adds	r7, #32
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b08c      	sub	sp, #48	; 0x30
 8008188:	af02      	add	r7, sp, #8
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	4613      	mov	r3, r2
 8008190:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	785b      	ldrb	r3, [r3, #1]
 800819a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800819c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081a0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d02d      	beq.n	800820a <USB_HC_StartXfer+0x86>
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	791b      	ldrb	r3, [r3, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d129      	bne.n	800820a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80081b6:	79fb      	ldrb	r3, [r7, #7]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d117      	bne.n	80081ec <USB_HC_StartXfer+0x68>
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	79db      	ldrb	r3, [r3, #7]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <USB_HC_StartXfer+0x48>
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	79db      	ldrb	r3, [r3, #7]
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d10f      	bne.n	80081ec <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	015a      	lsls	r2, r3, #5
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	4413      	add	r3, r2
 80081d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	69fa      	ldr	r2, [r7, #28]
 80081dc:	0151      	lsls	r1, r2, #5
 80081de:	6a3a      	ldr	r2, [r7, #32]
 80081e0:	440a      	add	r2, r1
 80081e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ea:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10b      	bne.n	800820a <USB_HC_StartXfer+0x86>
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	795b      	ldrb	r3, [r3, #5]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d107      	bne.n	800820a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	785b      	ldrb	r3, [r3, #1]
 80081fe:	4619      	mov	r1, r3
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 fa2f 	bl	8008664 <USB_DoPing>
      return HAL_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	e0f8      	b.n	80083fc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d018      	beq.n	8008244 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	8912      	ldrh	r2, [r2, #8]
 800821a:	4413      	add	r3, r2
 800821c:	3b01      	subs	r3, #1
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	8912      	ldrh	r2, [r2, #8]
 8008222:	fbb3 f3f2 	udiv	r3, r3, r2
 8008226:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008228:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800822a:	8b7b      	ldrh	r3, [r7, #26]
 800822c:	429a      	cmp	r2, r3
 800822e:	d90b      	bls.n	8008248 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008230:	8b7b      	ldrh	r3, [r7, #26]
 8008232:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008234:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	8912      	ldrh	r2, [r2, #8]
 800823a:	fb02 f203 	mul.w	r2, r2, r3
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	611a      	str	r2, [r3, #16]
 8008242:	e001      	b.n	8008248 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008244:	2301      	movs	r3, #1
 8008246:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	78db      	ldrb	r3, [r3, #3]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d007      	beq.n	8008260 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008250:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	8912      	ldrh	r2, [r2, #8]
 8008256:	fb02 f203 	mul.w	r2, r2, r3
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	611a      	str	r2, [r3, #16]
 800825e:	e003      	b.n	8008268 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	695a      	ldr	r2, [r3, #20]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008270:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008272:	04d9      	lsls	r1, r3, #19
 8008274:	4b63      	ldr	r3, [pc, #396]	; (8008404 <USB_HC_StartXfer+0x280>)
 8008276:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008278:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	7a9b      	ldrb	r3, [r3, #10]
 800827e:	075b      	lsls	r3, r3, #29
 8008280:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008284:	69f9      	ldr	r1, [r7, #28]
 8008286:	0148      	lsls	r0, r1, #5
 8008288:	6a39      	ldr	r1, [r7, #32]
 800828a:	4401      	add	r1, r0
 800828c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008290:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008292:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008294:	79fb      	ldrb	r3, [r7, #7]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d009      	beq.n	80082ae <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	68d9      	ldr	r1, [r3, #12]
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	6a3b      	ldr	r3, [r7, #32]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082aa:	460a      	mov	r2, r1
 80082ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	bf0c      	ite	eq
 80082be:	2301      	moveq	r3, #1
 80082c0:	2300      	movne	r3, #0
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	69fa      	ldr	r2, [r7, #28]
 80082d6:	0151      	lsls	r1, r2, #5
 80082d8:	6a3a      	ldr	r2, [r7, #32]
 80082da:	440a      	add	r2, r1
 80082dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80082e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	7e7b      	ldrb	r3, [r7, #25]
 80082f6:	075b      	lsls	r3, r3, #29
 80082f8:	69f9      	ldr	r1, [r7, #28]
 80082fa:	0148      	lsls	r0, r1, #5
 80082fc:	6a39      	ldr	r1, [r7, #32]
 80082fe:	4401      	add	r1, r0
 8008300:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008304:	4313      	orrs	r3, r2
 8008306:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	4413      	add	r3, r2
 8008310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800831e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	78db      	ldrb	r3, [r3, #3]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d004      	beq.n	8008332 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800832e:	613b      	str	r3, [r7, #16]
 8008330:	e003      	b.n	800833a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008338:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008340:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	4413      	add	r3, r2
 800834a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800834e:	461a      	mov	r2, r3
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	e04e      	b.n	80083fc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	78db      	ldrb	r3, [r3, #3]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d149      	bne.n	80083fa <USB_HC_StartXfer+0x276>
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d045      	beq.n	80083fa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	79db      	ldrb	r3, [r3, #7]
 8008372:	2b03      	cmp	r3, #3
 8008374:	d830      	bhi.n	80083d8 <USB_HC_StartXfer+0x254>
 8008376:	a201      	add	r2, pc, #4	; (adr r2, 800837c <USB_HC_StartXfer+0x1f8>)
 8008378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837c:	0800838d 	.word	0x0800838d
 8008380:	080083b1 	.word	0x080083b1
 8008384:	0800838d 	.word	0x0800838d
 8008388:	080083b1 	.word	0x080083b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	3303      	adds	r3, #3
 8008392:	089b      	lsrs	r3, r3, #2
 8008394:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008396:	8afa      	ldrh	r2, [r7, #22]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839c:	b29b      	uxth	r3, r3
 800839e:	429a      	cmp	r2, r3
 80083a0:	d91c      	bls.n	80083dc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	f043 0220 	orr.w	r2, r3, #32
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80083ae:	e015      	b.n	80083dc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	3303      	adds	r3, #3
 80083b6:	089b      	lsrs	r3, r3, #2
 80083b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80083ba:	8afa      	ldrh	r2, [r7, #22]
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d90a      	bls.n	80083e0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80083d6:	e003      	b.n	80083e0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80083d8:	bf00      	nop
 80083da:	e002      	b.n	80083e2 <USB_HC_StartXfer+0x25e>
        break;
 80083dc:	bf00      	nop
 80083de:	e000      	b.n	80083e2 <USB_HC_StartXfer+0x25e>
        break;
 80083e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	68d9      	ldr	r1, [r3, #12]
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	785a      	ldrb	r2, [r3, #1]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	2000      	movs	r0, #0
 80083f2:	9000      	str	r0, [sp, #0]
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f7ff fb81 	bl	8007afc <USB_WritePacket>
  }

  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3728      	adds	r7, #40	; 0x28
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	1ff80000 	.word	0x1ff80000

08008408 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	b29b      	uxth	r3, r3
}
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800842a:	b480      	push	{r7}
 800842c:	b089      	sub	sp, #36	; 0x24
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	460b      	mov	r3, r1
 8008434:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800843a:	78fb      	ldrb	r3, [r7, #3]
 800843c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	4413      	add	r3, r2
 800844a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	0c9b      	lsrs	r3, r3, #18
 8008452:	f003 0303 	and.w	r3, r3, #3
 8008456:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	4413      	add	r3, r2
 8008460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	0fdb      	lsrs	r3, r3, #31
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f003 0320 	and.w	r3, r3, #32
 8008476:	2b20      	cmp	r3, #32
 8008478:	d104      	bne.n	8008484 <USB_HC_Halt+0x5a>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	e0e8      	b.n	8008656 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <USB_HC_Halt+0x66>
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	2b02      	cmp	r3, #2
 800848e:	d173      	bne.n	8008578 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	4413      	add	r3, r2
 8008498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	0151      	lsls	r1, r2, #5
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	440a      	add	r2, r1
 80084a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084ae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f003 0320 	and.w	r3, r3, #32
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f040 80cb 	bne.w	8008654 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d143      	bne.n	8008552 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	0151      	lsls	r1, r2, #5
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	440a      	add	r2, r1
 80084e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084e8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	0151      	lsls	r1, r2, #5
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	440a      	add	r2, r1
 8008500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008508:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	015a      	lsls	r2, r3, #5
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	4413      	add	r3, r2
 8008512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	0151      	lsls	r1, r2, #5
 800851c:	69ba      	ldr	r2, [r7, #24]
 800851e:	440a      	add	r2, r1
 8008520:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008524:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008528:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	3301      	adds	r3, #1
 800852e:	61fb      	str	r3, [r7, #28]
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008536:	d81d      	bhi.n	8008574 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	015a      	lsls	r2, r3, #5
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	4413      	add	r3, r2
 8008540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800854a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800854e:	d0ec      	beq.n	800852a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008550:	e080      	b.n	8008654 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	4413      	add	r3, r2
 800855a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	0151      	lsls	r1, r2, #5
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	440a      	add	r2, r1
 8008568:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800856c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008570:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008572:	e06f      	b.n	8008654 <USB_HC_Halt+0x22a>
            break;
 8008574:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008576:	e06d      	b.n	8008654 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	015a      	lsls	r2, r3, #5
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	4413      	add	r3, r2
 8008580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	0151      	lsls	r1, r2, #5
 800858a:	69ba      	ldr	r2, [r7, #24]
 800858c:	440a      	add	r2, r1
 800858e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008592:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008596:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d143      	bne.n	8008630 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	0151      	lsls	r1, r2, #5
 80085ba:	69ba      	ldr	r2, [r7, #24]
 80085bc:	440a      	add	r2, r1
 80085be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	0151      	lsls	r1, r2, #5
 80085da:	69ba      	ldr	r2, [r7, #24]
 80085dc:	440a      	add	r2, r1
 80085de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	0151      	lsls	r1, r2, #5
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	440a      	add	r2, r1
 80085fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008602:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008606:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	3301      	adds	r3, #1
 800860c:	61fb      	str	r3, [r7, #28]
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008614:	d81d      	bhi.n	8008652 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	4413      	add	r3, r2
 800861e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800862c:	d0ec      	beq.n	8008608 <USB_HC_Halt+0x1de>
 800862e:	e011      	b.n	8008654 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	4413      	add	r3, r2
 8008638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	0151      	lsls	r1, r2, #5
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	440a      	add	r2, r1
 8008646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800864a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	e000      	b.n	8008654 <USB_HC_Halt+0x22a>
          break;
 8008652:	bf00      	nop
    }
  }

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3724      	adds	r7, #36	; 0x24
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
	...

08008664 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008678:	2301      	movs	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	04da      	lsls	r2, r3, #19
 8008680:	4b15      	ldr	r3, [pc, #84]	; (80086d8 <USB_DoPing+0x74>)
 8008682:	4013      	ands	r3, r2
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	0151      	lsls	r1, r2, #5
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	440a      	add	r2, r1
 800868c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008694:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	015a      	lsls	r2, r3, #5
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	4413      	add	r3, r2
 800869e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80086ac:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086b4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	015a      	lsls	r2, r3, #5
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	4413      	add	r3, r2
 80086be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086c2:	461a      	mov	r2, r3
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	1ff80000 	.word	0x1ff80000

080086dc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7ff f981 	bl	80079f4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80086f2:	2110      	movs	r1, #16
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7ff f9b9 	bl	8007a6c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff f9dc 	bl	8007ab8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008700:	2300      	movs	r3, #0
 8008702:	613b      	str	r3, [r7, #16]
 8008704:	e01f      	b.n	8008746 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	4413      	add	r3, r2
 800870e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800871c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008724:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800872c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	4413      	add	r3, r2
 8008736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800873a:	461a      	mov	r2, r3
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	3301      	adds	r3, #1
 8008744:	613b      	str	r3, [r7, #16]
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	2b0f      	cmp	r3, #15
 800874a:	d9dc      	bls.n	8008706 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800874c:	2300      	movs	r3, #0
 800874e:	613b      	str	r3, [r7, #16]
 8008750:	e034      	b.n	80087bc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	015a      	lsls	r2, r3, #5
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	4413      	add	r3, r2
 800875a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008768:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008770:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008778:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4413      	add	r3, r2
 8008782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008786:	461a      	mov	r2, r3
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	3301      	adds	r3, #1
 8008790:	617b      	str	r3, [r7, #20]
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008798:	d80c      	bhi.n	80087b4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087b0:	d0ec      	beq.n	800878c <USB_StopHost+0xb0>
 80087b2:	e000      	b.n	80087b6 <USB_StopHost+0xda>
        break;
 80087b4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	3301      	adds	r3, #1
 80087ba:	613b      	str	r3, [r7, #16]
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	2b0f      	cmp	r3, #15
 80087c0:	d9c7      	bls.n	8008752 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087c8:	461a      	mov	r2, r3
 80087ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087ce:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087d6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff f8fa 	bl	80079d2 <USB_EnableGlobalInt>

  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3718      	adds	r7, #24
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80087e8:	b590      	push	{r4, r7, lr}
 80087ea:	b089      	sub	sp, #36	; 0x24
 80087ec:	af04      	add	r7, sp, #16
 80087ee:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80087f0:	2301      	movs	r3, #1
 80087f2:	2202      	movs	r2, #2
 80087f4:	2102      	movs	r1, #2
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fc66 	bl	80090c8 <USBH_FindInterface>
 80087fc:	4603      	mov	r3, r0
 80087fe:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008800:	7bfb      	ldrb	r3, [r7, #15]
 8008802:	2bff      	cmp	r3, #255	; 0xff
 8008804:	d002      	beq.n	800880c <USBH_CDC_InterfaceInit+0x24>
 8008806:	7bfb      	ldrb	r3, [r7, #15]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d901      	bls.n	8008810 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800880c:	2302      	movs	r3, #2
 800880e:	e13d      	b.n	8008a8c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fc3b 	bl	8009090 <USBH_SelectInterface>
 800881a:	4603      	mov	r3, r0
 800881c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800881e:	7bbb      	ldrb	r3, [r7, #14]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008824:	2302      	movs	r3, #2
 8008826:	e131      	b.n	8008a8c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800882e:	2050      	movs	r0, #80	; 0x50
 8008830:	f002 fa00 	bl	800ac34 <malloc>
 8008834:	4603      	mov	r3, r0
 8008836:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008848:	2302      	movs	r3, #2
 800884a:	e11f      	b.n	8008a8c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800884c:	2250      	movs	r2, #80	; 0x50
 800884e:	2100      	movs	r1, #0
 8008850:	68b8      	ldr	r0, [r7, #8]
 8008852:	f002 f9ff 	bl	800ac54 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008856:	7bfb      	ldrb	r3, [r7, #15]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	211a      	movs	r1, #26
 800885c:	fb01 f303 	mul.w	r3, r1, r3
 8008860:	4413      	add	r3, r2
 8008862:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	b25b      	sxtb	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	da15      	bge.n	800889a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	211a      	movs	r1, #26
 8008874:	fb01 f303 	mul.w	r3, r1, r3
 8008878:	4413      	add	r3, r2
 800887a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800887e:	781a      	ldrb	r2, [r3, #0]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	211a      	movs	r1, #26
 800888a:	fb01 f303 	mul.w	r3, r1, r3
 800888e:	4413      	add	r3, r2
 8008890:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008894:	881a      	ldrh	r2, [r3, #0]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	785b      	ldrb	r3, [r3, #1]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f001 fe32 	bl	800a50a <USBH_AllocPipe>
 80088a6:	4603      	mov	r3, r0
 80088a8:	461a      	mov	r2, r3
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	7819      	ldrb	r1, [r3, #0]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	7858      	ldrb	r0, [r3, #1]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	8952      	ldrh	r2, [r2, #10]
 80088c6:	9202      	str	r2, [sp, #8]
 80088c8:	2203      	movs	r2, #3
 80088ca:	9201      	str	r2, [sp, #4]
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	4623      	mov	r3, r4
 80088d0:	4602      	mov	r2, r0
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f001 fdea 	bl	800a4ac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	2200      	movs	r2, #0
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f002 f8f9 	bl	800aad8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80088e6:	2300      	movs	r3, #0
 80088e8:	2200      	movs	r2, #0
 80088ea:	210a      	movs	r1, #10
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fbeb 	bl	80090c8 <USBH_FindInterface>
 80088f2:	4603      	mov	r3, r0
 80088f4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
 80088f8:	2bff      	cmp	r3, #255	; 0xff
 80088fa:	d002      	beq.n	8008902 <USBH_CDC_InterfaceInit+0x11a>
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d901      	bls.n	8008906 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008902:	2302      	movs	r3, #2
 8008904:	e0c2      	b.n	8008a8c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008906:	7bfb      	ldrb	r3, [r7, #15]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	211a      	movs	r1, #26
 800890c:	fb01 f303 	mul.w	r3, r1, r3
 8008910:	4413      	add	r3, r2
 8008912:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	b25b      	sxtb	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	da16      	bge.n	800894c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	211a      	movs	r1, #26
 8008924:	fb01 f303 	mul.w	r3, r1, r3
 8008928:	4413      	add	r3, r2
 800892a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800892e:	781a      	ldrb	r2, [r3, #0]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	211a      	movs	r1, #26
 800893a:	fb01 f303 	mul.w	r3, r1, r3
 800893e:	4413      	add	r3, r2
 8008940:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008944:	881a      	ldrh	r2, [r3, #0]
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	835a      	strh	r2, [r3, #26]
 800894a:	e015      	b.n	8008978 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	211a      	movs	r1, #26
 8008952:	fb01 f303 	mul.w	r3, r1, r3
 8008956:	4413      	add	r3, r2
 8008958:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800895c:	781a      	ldrb	r2, [r3, #0]
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008962:	7bfb      	ldrb	r3, [r7, #15]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	211a      	movs	r1, #26
 8008968:	fb01 f303 	mul.w	r3, r1, r3
 800896c:	4413      	add	r3, r2
 800896e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008972:	881a      	ldrh	r2, [r3, #0]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008978:	7bfb      	ldrb	r3, [r7, #15]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	211a      	movs	r1, #26
 800897e:	fb01 f303 	mul.w	r3, r1, r3
 8008982:	4413      	add	r3, r2
 8008984:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	b25b      	sxtb	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	da16      	bge.n	80089be <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	211a      	movs	r1, #26
 8008996:	fb01 f303 	mul.w	r3, r1, r3
 800899a:	4413      	add	r3, r2
 800899c:	f203 3356 	addw	r3, r3, #854	; 0x356
 80089a0:	781a      	ldrb	r2, [r3, #0]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	211a      	movs	r1, #26
 80089ac:	fb01 f303 	mul.w	r3, r1, r3
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80089b6:	881a      	ldrh	r2, [r3, #0]
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	835a      	strh	r2, [r3, #26]
 80089bc:	e015      	b.n	80089ea <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80089be:	7bfb      	ldrb	r3, [r7, #15]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	211a      	movs	r1, #26
 80089c4:	fb01 f303 	mul.w	r3, r1, r3
 80089c8:	4413      	add	r3, r2
 80089ca:	f203 3356 	addw	r3, r3, #854	; 0x356
 80089ce:	781a      	ldrb	r2, [r3, #0]
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	211a      	movs	r1, #26
 80089da:	fb01 f303 	mul.w	r3, r1, r3
 80089de:	4413      	add	r3, r2
 80089e0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80089e4:	881a      	ldrh	r2, [r3, #0]
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	7b9b      	ldrb	r3, [r3, #14]
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f001 fd8a 	bl	800a50a <USBH_AllocPipe>
 80089f6:	4603      	mov	r3, r0
 80089f8:	461a      	mov	r2, r3
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	7bdb      	ldrb	r3, [r3, #15]
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f001 fd80 	bl	800a50a <USBH_AllocPipe>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	7b59      	ldrb	r1, [r3, #13]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	7b98      	ldrb	r0, [r3, #14]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	8b12      	ldrh	r2, [r2, #24]
 8008a2a:	9202      	str	r2, [sp, #8]
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	9201      	str	r2, [sp, #4]
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	4623      	mov	r3, r4
 8008a34:	4602      	mov	r2, r0
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f001 fd38 	bl	800a4ac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	7b19      	ldrb	r1, [r3, #12]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	7bd8      	ldrb	r0, [r3, #15]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	8b52      	ldrh	r2, [r2, #26]
 8008a54:	9202      	str	r2, [sp, #8]
 8008a56:	2202      	movs	r2, #2
 8008a58:	9201      	str	r2, [sp, #4]
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	4623      	mov	r3, r4
 8008a5e:	4602      	mov	r2, r0
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f001 fd23 	bl	800a4ac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	7b5b      	ldrb	r3, [r3, #13]
 8008a72:	2200      	movs	r2, #0
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f002 f82e 	bl	800aad8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	7b1b      	ldrb	r3, [r3, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f002 f827 	bl	800aad8 <USBH_LL_SetToggle>

  return USBH_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd90      	pop	{r4, r7, pc}

08008a94 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00e      	beq.n	8008acc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f001 fd18 	bl	800a4ea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	4619      	mov	r1, r3
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f001 fd43 	bl	800a54c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	7b1b      	ldrb	r3, [r3, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00e      	beq.n	8008af2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	7b1b      	ldrb	r3, [r3, #12]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f001 fd05 	bl	800a4ea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	7b1b      	ldrb	r3, [r3, #12]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f001 fd30 	bl	800a54c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	7b5b      	ldrb	r3, [r3, #13]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00e      	beq.n	8008b18 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	7b5b      	ldrb	r3, [r3, #13]
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f001 fcf2 	bl	800a4ea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	7b5b      	ldrb	r3, [r3, #13]
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 fd1d 	bl	800a54c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00b      	beq.n	8008b3c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b2a:	69db      	ldr	r3, [r3, #28]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f002 f889 	bl	800ac44 <free>
    phost->pActiveClass->pData = 0U;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b38:	2200      	movs	r2, #0
 8008b3a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3340      	adds	r3, #64	; 0x40
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f8b1 	bl	8008cc6 <GetLineCoding>
 8008b64:	4603      	mov	r3, r0
 8008b66:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008b68:	7afb      	ldrb	r3, [r7, #11]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d105      	bne.n	8008b7a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b74:	2102      	movs	r1, #2
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008b7a:	7afb      	ldrb	r3, [r7, #11]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008ba4:	2b04      	cmp	r3, #4
 8008ba6:	d877      	bhi.n	8008c98 <USBH_CDC_Process+0x114>
 8008ba8:	a201      	add	r2, pc, #4	; (adr r2, 8008bb0 <USBH_CDC_Process+0x2c>)
 8008baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bae:	bf00      	nop
 8008bb0:	08008bc5 	.word	0x08008bc5
 8008bb4:	08008bcb 	.word	0x08008bcb
 8008bb8:	08008bfb 	.word	0x08008bfb
 8008bbc:	08008c6f 	.word	0x08008c6f
 8008bc0:	08008c7d 	.word	0x08008c7d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8008bc8:	e06d      	b.n	8008ca6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f897 	bl	8008d04 <SetLineCoding>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008bda:	7bbb      	ldrb	r3, [r7, #14]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d104      	bne.n	8008bea <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	2202      	movs	r2, #2
 8008be4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008be8:	e058      	b.n	8008c9c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d055      	beq.n	8008c9c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2204      	movs	r2, #4
 8008bf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008bf8:	e050      	b.n	8008c9c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	3340      	adds	r3, #64	; 0x40
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f860 	bl	8008cc6 <GetLineCoding>
 8008c06:	4603      	mov	r3, r0
 8008c08:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c0a:	7bbb      	ldrb	r3, [r7, #14]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d126      	bne.n	8008c5e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c22:	791b      	ldrb	r3, [r3, #4]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d13b      	bne.n	8008ca0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c32:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d133      	bne.n	8008ca0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c42:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d12b      	bne.n	8008ca0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c50:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d124      	bne.n	8008ca0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f958 	bl	8008f0c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008c5c:	e020      	b.n	8008ca0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008c5e:	7bbb      	ldrb	r3, [r7, #14]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d01d      	beq.n	8008ca0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2204      	movs	r2, #4
 8008c68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008c6c:	e018      	b.n	8008ca0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f867 	bl	8008d42 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f8da 	bl	8008e2e <CDC_ProcessReception>
      break;
 8008c7a:	e014      	b.n	8008ca6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 ffe3 	bl	8009c4a <USBH_ClrFeature>
 8008c84:	4603      	mov	r3, r0
 8008c86:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c88:	7bbb      	ldrb	r3, [r7, #14]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10a      	bne.n	8008ca4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008c96:	e005      	b.n	8008ca4 <USBH_CDC_Process+0x120>

    default:
      break;
 8008c98:	bf00      	nop
 8008c9a:	e004      	b.n	8008ca6 <USBH_CDC_Process+0x122>
      break;
 8008c9c:	bf00      	nop
 8008c9e:	e002      	b.n	8008ca6 <USBH_CDC_Process+0x122>
      break;
 8008ca0:	bf00      	nop
 8008ca2:	e000      	b.n	8008ca6 <USBH_CDC_Process+0x122>
      break;
 8008ca4:	bf00      	nop

  }

  return status;
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	370c      	adds	r7, #12
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b082      	sub	sp, #8
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	22a1      	movs	r2, #161	; 0xa1
 8008cd4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2221      	movs	r2, #33	; 0x21
 8008cda:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2207      	movs	r2, #7
 8008cec:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2207      	movs	r2, #7
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f001 f988 	bl	800a00a <USBH_CtlReq>
 8008cfa:	4603      	mov	r3, r0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2221      	movs	r2, #33	; 0x21
 8008d12:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2220      	movs	r2, #32
 8008d18:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2207      	movs	r2, #7
 8008d2a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2207      	movs	r2, #7
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f001 f969 	bl	800a00a <USBH_CtlReq>
 8008d38:	4603      	mov	r3, r0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b086      	sub	sp, #24
 8008d46:	af02      	add	r7, sp, #8
 8008d48:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d54:	2300      	movs	r3, #0
 8008d56:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d002      	beq.n	8008d68 <CDC_ProcessTransmission+0x26>
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d023      	beq.n	8008dae <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008d66:	e05e      	b.n	8008e26 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	8b12      	ldrh	r2, [r2, #24]
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d90b      	bls.n	8008d8c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	69d9      	ldr	r1, [r3, #28]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	8b1a      	ldrh	r2, [r3, #24]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	7b5b      	ldrb	r3, [r3, #13]
 8008d80:	2001      	movs	r0, #1
 8008d82:	9000      	str	r0, [sp, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f001 fb4e 	bl	800a426 <USBH_BulkSendData>
 8008d8a:	e00b      	b.n	8008da4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	7b5b      	ldrb	r3, [r3, #13]
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	9000      	str	r0, [sp, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f001 fb41 	bl	800a426 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2202      	movs	r2, #2
 8008da8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008dac:	e03b      	b.n	8008e26 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	7b5b      	ldrb	r3, [r3, #13]
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f001 fe65 	bl	800aa84 <USBH_LL_GetURBState>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008dbe:	7afb      	ldrb	r3, [r7, #11]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d128      	bne.n	8008e16 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	8b12      	ldrh	r2, [r2, #24]
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d90e      	bls.n	8008dee <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	8b12      	ldrh	r2, [r2, #24]
 8008dd8:	1a9a      	subs	r2, r3, r2
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	8b12      	ldrh	r2, [r2, #24]
 8008de6:	441a      	add	r2, r3
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	61da      	str	r2, [r3, #28]
 8008dec:	e002      	b.n	8008df4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d004      	beq.n	8008e06 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008e04:	e00e      	b.n	8008e24 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f868 	bl	8008ee4 <USBH_CDC_TransmitCallback>
      break;
 8008e14:	e006      	b.n	8008e24 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008e16:	7afb      	ldrb	r3, [r7, #11]
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d103      	bne.n	8008e24 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008e24:	bf00      	nop
  }
}
 8008e26:	bf00      	nop
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b086      	sub	sp, #24
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e40:	2300      	movs	r3, #0
 8008e42:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	d002      	beq.n	8008e54 <CDC_ProcessReception+0x26>
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d00e      	beq.n	8008e70 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008e52:	e043      	b.n	8008edc <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	6a19      	ldr	r1, [r3, #32]
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	8b5a      	ldrh	r2, [r3, #26]
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	7b1b      	ldrb	r3, [r3, #12]
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f001 fb05 	bl	800a470 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2204      	movs	r2, #4
 8008e6a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008e6e:	e035      	b.n	8008edc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	7b1b      	ldrb	r3, [r3, #12]
 8008e74:	4619      	mov	r1, r3
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f001 fe04 	bl	800aa84 <USBH_LL_GetURBState>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008e80:	7cfb      	ldrb	r3, [r7, #19]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d129      	bne.n	8008eda <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	7b1b      	ldrb	r3, [r3, #12]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f001 fd67 	bl	800a960 <USBH_LL_GetLastXferSize>
 8008e92:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d016      	beq.n	8008ecc <CDC_ProcessReception+0x9e>
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	8b5b      	ldrh	r3, [r3, #26]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d910      	bls.n	8008ecc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	1ad2      	subs	r2, r2, r3
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	6a1a      	ldr	r2, [r3, #32]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	441a      	add	r2, r3
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	2203      	movs	r2, #3
 8008ec6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008eca:	e006      	b.n	8008eda <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f80f 	bl	8008ef8 <USBH_CDC_ReceiveCallback>
      break;
 8008eda:	bf00      	nop
  }
}
 8008edc:	bf00      	nop
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d101      	bne.n	8008f38 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008f34:	2302      	movs	r3, #2
 8008f36:	e029      	b.n	8008f8c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	79fa      	ldrb	r2, [r7, #7]
 8008f3c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f000 f81f 	bl	8008f94 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d003      	beq.n	8008f84 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f001 fc37 	bl	800a7f8 <USBH_LL_Init>

  return USBH_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	60fb      	str	r3, [r7, #12]
 8008fa4:	e009      	b.n	8008fba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	33e0      	adds	r3, #224	; 0xe0
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4413      	add	r3, r2
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	60fb      	str	r3, [r7, #12]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b0e      	cmp	r3, #14
 8008fbe:	d9f2      	bls.n	8008fa6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	60fb      	str	r3, [r7, #12]
 8008fc4:	e009      	b.n	8008fda <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	60fb      	str	r3, [r7, #12]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fe0:	d3f1      	bcc.n	8008fc6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2240      	movs	r2, #64	; 0x40
 8009006:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009046:	2300      	movs	r3, #0
 8009048:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d016      	beq.n	800907e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10e      	bne.n	8009078 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009060:	1c59      	adds	r1, r3, #1
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	33de      	adds	r3, #222	; 0xde
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	73fb      	strb	r3, [r7, #15]
 8009076:	e004      	b.n	8009082 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009078:	2302      	movs	r3, #2
 800907a:	73fb      	strb	r3, [r7, #15]
 800907c:	e001      	b.n	8009082 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800907e:	2302      	movs	r3, #2
 8009080:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009082:	7bfb      	ldrb	r3, [r7, #15]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	460b      	mov	r3, r1
 800909a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80090a6:	78fa      	ldrb	r2, [r7, #3]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d204      	bcs.n	80090b6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	78fa      	ldrb	r2, [r7, #3]
 80090b0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80090b4:	e001      	b.n	80090ba <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80090b6:	2302      	movs	r3, #2
 80090b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3714      	adds	r7, #20
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b087      	sub	sp, #28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	4608      	mov	r0, r1
 80090d2:	4611      	mov	r1, r2
 80090d4:	461a      	mov	r2, r3
 80090d6:	4603      	mov	r3, r0
 80090d8:	70fb      	strb	r3, [r7, #3]
 80090da:	460b      	mov	r3, r1
 80090dc:	70bb      	strb	r3, [r7, #2]
 80090de:	4613      	mov	r3, r2
 80090e0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80090e2:	2300      	movs	r3, #0
 80090e4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80090f0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80090f2:	e025      	b.n	8009140 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80090f4:	7dfb      	ldrb	r3, [r7, #23]
 80090f6:	221a      	movs	r2, #26
 80090f8:	fb02 f303 	mul.w	r3, r2, r3
 80090fc:	3308      	adds	r3, #8
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	4413      	add	r3, r2
 8009102:	3302      	adds	r3, #2
 8009104:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	795b      	ldrb	r3, [r3, #5]
 800910a:	78fa      	ldrb	r2, [r7, #3]
 800910c:	429a      	cmp	r2, r3
 800910e:	d002      	beq.n	8009116 <USBH_FindInterface+0x4e>
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	2bff      	cmp	r3, #255	; 0xff
 8009114:	d111      	bne.n	800913a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800911a:	78ba      	ldrb	r2, [r7, #2]
 800911c:	429a      	cmp	r2, r3
 800911e:	d002      	beq.n	8009126 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009120:	78bb      	ldrb	r3, [r7, #2]
 8009122:	2bff      	cmp	r3, #255	; 0xff
 8009124:	d109      	bne.n	800913a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800912a:	787a      	ldrb	r2, [r7, #1]
 800912c:	429a      	cmp	r2, r3
 800912e:	d002      	beq.n	8009136 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009130:	787b      	ldrb	r3, [r7, #1]
 8009132:	2bff      	cmp	r3, #255	; 0xff
 8009134:	d101      	bne.n	800913a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009136:	7dfb      	ldrb	r3, [r7, #23]
 8009138:	e006      	b.n	8009148 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800913a:	7dfb      	ldrb	r3, [r7, #23]
 800913c:	3301      	adds	r3, #1
 800913e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009140:	7dfb      	ldrb	r3, [r7, #23]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d9d6      	bls.n	80090f4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009146:	23ff      	movs	r3, #255	; 0xff
}
 8009148:	4618      	mov	r0, r3
 800914a:	371c      	adds	r7, #28
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f001 fb87 	bl	800a870 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009162:	2101      	movs	r1, #1
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f001 fca0 	bl	800aaaa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b088      	sub	sp, #32
 8009178:	af04      	add	r7, sp, #16
 800917a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800917c:	2302      	movs	r3, #2
 800917e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800918a:	b2db      	uxtb	r3, r3
 800918c:	2b01      	cmp	r3, #1
 800918e:	d102      	bne.n	8009196 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2203      	movs	r2, #3
 8009194:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b0b      	cmp	r3, #11
 800919e:	f200 81b3 	bhi.w	8009508 <USBH_Process+0x394>
 80091a2:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <USBH_Process+0x34>)
 80091a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a8:	080091d9 	.word	0x080091d9
 80091ac:	0800920b 	.word	0x0800920b
 80091b0:	08009273 	.word	0x08009273
 80091b4:	080094a3 	.word	0x080094a3
 80091b8:	08009509 	.word	0x08009509
 80091bc:	08009317 	.word	0x08009317
 80091c0:	08009449 	.word	0x08009449
 80091c4:	0800934d 	.word	0x0800934d
 80091c8:	0800936d 	.word	0x0800936d
 80091cc:	0800938d 	.word	0x0800938d
 80091d0:	080093bb 	.word	0x080093bb
 80091d4:	0800948b 	.word	0x0800948b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 8193 	beq.w	800950c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80091ec:	20c8      	movs	r0, #200	; 0xc8
 80091ee:	f001 fca3 	bl	800ab38 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f001 fb99 	bl	800a92a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009208:	e180      	b.n	800950c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009210:	2b01      	cmp	r3, #1
 8009212:	d107      	bne.n	8009224 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2202      	movs	r2, #2
 8009220:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009222:	e182      	b.n	800952a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800922a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800922e:	d914      	bls.n	800925a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009236:	3301      	adds	r3, #1
 8009238:	b2da      	uxtb	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009246:	2b03      	cmp	r3, #3
 8009248:	d903      	bls.n	8009252 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	220d      	movs	r2, #13
 800924e:	701a      	strb	r2, [r3, #0]
      break;
 8009250:	e16b      	b.n	800952a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	701a      	strb	r2, [r3, #0]
      break;
 8009258:	e167      	b.n	800952a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009260:	f103 020a 	add.w	r2, r3, #10
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800926a:	200a      	movs	r0, #10
 800926c:	f001 fc64 	bl	800ab38 <USBH_Delay>
      break;
 8009270:	e15b      	b.n	800952a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009278:	2b00      	cmp	r3, #0
 800927a:	d005      	beq.n	8009288 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009282:	2104      	movs	r1, #4
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009288:	2064      	movs	r0, #100	; 0x64
 800928a:	f001 fc55 	bl	800ab38 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f001 fb24 	bl	800a8dc <USBH_LL_GetSpeed>
 8009294:	4603      	mov	r3, r0
 8009296:	461a      	mov	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2205      	movs	r2, #5
 80092a2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80092a4:	2100      	movs	r1, #0
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f001 f92f 	bl	800a50a <USBH_AllocPipe>
 80092ac:	4603      	mov	r3, r0
 80092ae:	461a      	mov	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80092b4:	2180      	movs	r1, #128	; 0x80
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f001 f927 	bl	800a50a <USBH_AllocPipe>
 80092bc:	4603      	mov	r3, r0
 80092be:	461a      	mov	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	7919      	ldrb	r1, [r3, #4]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80092d8:	b292      	uxth	r2, r2
 80092da:	9202      	str	r2, [sp, #8]
 80092dc:	2200      	movs	r2, #0
 80092de:	9201      	str	r2, [sp, #4]
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	4603      	mov	r3, r0
 80092e4:	2280      	movs	r2, #128	; 0x80
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f001 f8e0 	bl	800a4ac <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	7959      	ldrb	r1, [r3, #5]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009300:	b292      	uxth	r2, r2
 8009302:	9202      	str	r2, [sp, #8]
 8009304:	2200      	movs	r2, #0
 8009306:	9201      	str	r2, [sp, #4]
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	4603      	mov	r3, r0
 800930c:	2200      	movs	r2, #0
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 f8cc 	bl	800a4ac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009314:	e109      	b.n	800952a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f90c 	bl	8009534 <USBH_HandleEnum>
 800931c:	4603      	mov	r3, r0
 800931e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	b2db      	uxtb	r3, r3
 8009324:	2b00      	cmp	r3, #0
 8009326:	f040 80f3 	bne.w	8009510 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009338:	2b01      	cmp	r3, #1
 800933a:	d103      	bne.n	8009344 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2208      	movs	r2, #8
 8009340:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009342:	e0e5      	b.n	8009510 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2207      	movs	r2, #7
 8009348:	701a      	strb	r2, [r3, #0]
      break;
 800934a:	e0e1      	b.n	8009510 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 80de 	beq.w	8009514 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800935e:	2101      	movs	r1, #1
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2208      	movs	r2, #8
 8009368:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800936a:	e0d3      	b.n	8009514 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009372:	b29b      	uxth	r3, r3
 8009374:	4619      	mov	r1, r3
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fc20 	bl	8009bbc <USBH_SetCfg>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	f040 80ca 	bne.w	8009518 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2209      	movs	r2, #9
 8009388:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800938a:	e0c5      	b.n	8009518 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009392:	f003 0320 	and.w	r3, r3, #32
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00b      	beq.n	80093b2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800939a:	2101      	movs	r1, #1
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fc30 	bl	8009c02 <USBH_SetFeature>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f040 80b9 	bne.w	800951c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	220a      	movs	r2, #10
 80093ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80093b0:	e0b4      	b.n	800951c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	220a      	movs	r2, #10
 80093b6:	701a      	strb	r2, [r3, #0]
      break;
 80093b8:	e0b0      	b.n	800951c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 80ad 	beq.w	8009520 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80093ce:	2300      	movs	r3, #0
 80093d0:	73fb      	strb	r3, [r7, #15]
 80093d2:	e016      	b.n	8009402 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80093d4:	7bfa      	ldrb	r2, [r7, #15]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	32de      	adds	r2, #222	; 0xde
 80093da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093de:	791a      	ldrb	r2, [r3, #4]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d108      	bne.n	80093fc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80093ea:	7bfa      	ldrb	r2, [r7, #15]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	32de      	adds	r2, #222	; 0xde
 80093f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80093fa:	e005      	b.n	8009408 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
 80093fe:	3301      	adds	r3, #1
 8009400:	73fb      	strb	r3, [r7, #15]
 8009402:	7bfb      	ldrb	r3, [r7, #15]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d0e5      	beq.n	80093d4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800940e:	2b00      	cmp	r3, #0
 8009410:	d016      	beq.n	8009440 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	4798      	blx	r3
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d109      	bne.n	8009438 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2206      	movs	r2, #6
 8009428:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009430:	2103      	movs	r1, #3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009436:	e073      	b.n	8009520 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	220d      	movs	r2, #13
 800943c:	701a      	strb	r2, [r3, #0]
      break;
 800943e:	e06f      	b.n	8009520 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	220d      	movs	r2, #13
 8009444:	701a      	strb	r2, [r3, #0]
      break;
 8009446:	e06b      	b.n	8009520 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800944e:	2b00      	cmp	r3, #0
 8009450:	d017      	beq.n	8009482 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	4798      	blx	r3
 800945e:	4603      	mov	r3, r0
 8009460:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009462:	7bbb      	ldrb	r3, [r7, #14]
 8009464:	b2db      	uxtb	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	d103      	bne.n	8009472 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	220b      	movs	r2, #11
 800946e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009470:	e058      	b.n	8009524 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8009472:	7bbb      	ldrb	r3, [r7, #14]
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2b02      	cmp	r3, #2
 8009478:	d154      	bne.n	8009524 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	220d      	movs	r2, #13
 800947e:	701a      	strb	r2, [r3, #0]
      break;
 8009480:	e050      	b.n	8009524 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	220d      	movs	r2, #13
 8009486:	701a      	strb	r2, [r3, #0]
      break;
 8009488:	e04c      	b.n	8009524 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009490:	2b00      	cmp	r3, #0
 8009492:	d049      	beq.n	8009528 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	4798      	blx	r3
      }
      break;
 80094a0:	e042      	b.n	8009528 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7ff fd72 	bl	8008f94 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d009      	beq.n	80094ce <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d005      	beq.n	80094e4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094de:	2105      	movs	r1, #5
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d107      	bne.n	8009500 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f7ff fe2b 	bl	8009154 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80094fe:	e014      	b.n	800952a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 f9b5 	bl	800a870 <USBH_LL_Start>
      break;
 8009506:	e010      	b.n	800952a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009508:	bf00      	nop
 800950a:	e00e      	b.n	800952a <USBH_Process+0x3b6>
      break;
 800950c:	bf00      	nop
 800950e:	e00c      	b.n	800952a <USBH_Process+0x3b6>
      break;
 8009510:	bf00      	nop
 8009512:	e00a      	b.n	800952a <USBH_Process+0x3b6>
    break;
 8009514:	bf00      	nop
 8009516:	e008      	b.n	800952a <USBH_Process+0x3b6>
      break;
 8009518:	bf00      	nop
 800951a:	e006      	b.n	800952a <USBH_Process+0x3b6>
      break;
 800951c:	bf00      	nop
 800951e:	e004      	b.n	800952a <USBH_Process+0x3b6>
      break;
 8009520:	bf00      	nop
 8009522:	e002      	b.n	800952a <USBH_Process+0x3b6>
      break;
 8009524:	bf00      	nop
 8009526:	e000      	b.n	800952a <USBH_Process+0x3b6>
      break;
 8009528:	bf00      	nop
  }
  return USBH_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af04      	add	r7, sp, #16
 800953a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800953c:	2301      	movs	r3, #1
 800953e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009540:	2301      	movs	r3, #1
 8009542:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	785b      	ldrb	r3, [r3, #1]
 8009548:	2b07      	cmp	r3, #7
 800954a:	f200 81c1 	bhi.w	80098d0 <USBH_HandleEnum+0x39c>
 800954e:	a201      	add	r2, pc, #4	; (adr r2, 8009554 <USBH_HandleEnum+0x20>)
 8009550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009554:	08009575 	.word	0x08009575
 8009558:	08009633 	.word	0x08009633
 800955c:	0800969d 	.word	0x0800969d
 8009560:	0800972b 	.word	0x0800972b
 8009564:	08009795 	.word	0x08009795
 8009568:	08009805 	.word	0x08009805
 800956c:	0800984b 	.word	0x0800984b
 8009570:	08009891 	.word	0x08009891
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009574:	2108      	movs	r1, #8
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fa50 	bl	8009a1c <USBH_Get_DevDesc>
 800957c:	4603      	mov	r3, r0
 800957e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009580:	7bbb      	ldrb	r3, [r7, #14]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d130      	bne.n	80095e8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	7919      	ldrb	r1, [r3, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80095aa:	b292      	uxth	r2, r2
 80095ac:	9202      	str	r2, [sp, #8]
 80095ae:	2200      	movs	r2, #0
 80095b0:	9201      	str	r2, [sp, #4]
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	4603      	mov	r3, r0
 80095b6:	2280      	movs	r2, #128	; 0x80
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 ff77 	bl	800a4ac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	7959      	ldrb	r1, [r3, #5]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095d2:	b292      	uxth	r2, r2
 80095d4:	9202      	str	r2, [sp, #8]
 80095d6:	2200      	movs	r2, #0
 80095d8:	9201      	str	r2, [sp, #4]
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	4603      	mov	r3, r0
 80095de:	2200      	movs	r2, #0
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 ff63 	bl	800a4ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80095e6:	e175      	b.n	80098d4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095e8:	7bbb      	ldrb	r3, [r7, #14]
 80095ea:	2b03      	cmp	r3, #3
 80095ec:	f040 8172 	bne.w	80098d4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095f6:	3301      	adds	r3, #1
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009606:	2b03      	cmp	r3, #3
 8009608:	d903      	bls.n	8009612 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	220d      	movs	r2, #13
 800960e:	701a      	strb	r2, [r3, #0]
      break;
 8009610:	e160      	b.n	80098d4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	795b      	ldrb	r3, [r3, #5]
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 ff97 	bl	800a54c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	791b      	ldrb	r3, [r3, #4]
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 ff91 	bl	800a54c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	701a      	strb	r2, [r3, #0]
      break;
 8009630:	e150      	b.n	80098d4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009632:	2112      	movs	r1, #18
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f9f1 	bl	8009a1c <USBH_Get_DevDesc>
 800963a:	4603      	mov	r3, r0
 800963c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d103      	bne.n	800964c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2202      	movs	r2, #2
 8009648:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800964a:	e145      	b.n	80098d8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800964c:	7bbb      	ldrb	r3, [r7, #14]
 800964e:	2b03      	cmp	r3, #3
 8009650:	f040 8142 	bne.w	80098d8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800965a:	3301      	adds	r3, #1
 800965c:	b2da      	uxtb	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800966a:	2b03      	cmp	r3, #3
 800966c:	d903      	bls.n	8009676 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	220d      	movs	r2, #13
 8009672:	701a      	strb	r2, [r3, #0]
      break;
 8009674:	e130      	b.n	80098d8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	795b      	ldrb	r3, [r3, #5]
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 ff65 	bl	800a54c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	791b      	ldrb	r3, [r3, #4]
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 ff5f 	bl	800a54c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	701a      	strb	r2, [r3, #0]
      break;
 800969a:	e11d      	b.n	80098d8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800969c:	2101      	movs	r1, #1
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 fa68 	bl	8009b74 <USBH_SetAddress>
 80096a4:	4603      	mov	r3, r0
 80096a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80096a8:	7bbb      	ldrb	r3, [r7, #14]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d132      	bne.n	8009714 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80096ae:	2002      	movs	r0, #2
 80096b0:	f001 fa42 	bl	800ab38 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2203      	movs	r2, #3
 80096c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	7919      	ldrb	r1, [r3, #4]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80096d6:	b292      	uxth	r2, r2
 80096d8:	9202      	str	r2, [sp, #8]
 80096da:	2200      	movs	r2, #0
 80096dc:	9201      	str	r2, [sp, #4]
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	4603      	mov	r3, r0
 80096e2:	2280      	movs	r2, #128	; 0x80
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fee1 	bl	800a4ac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	7959      	ldrb	r1, [r3, #5]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80096fe:	b292      	uxth	r2, r2
 8009700:	9202      	str	r2, [sp, #8]
 8009702:	2200      	movs	r2, #0
 8009704:	9201      	str	r2, [sp, #4]
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	4603      	mov	r3, r0
 800970a:	2200      	movs	r2, #0
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fecd 	bl	800a4ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009712:	e0e3      	b.n	80098dc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009714:	7bbb      	ldrb	r3, [r7, #14]
 8009716:	2b03      	cmp	r3, #3
 8009718:	f040 80e0 	bne.w	80098dc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	220d      	movs	r2, #13
 8009720:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	705a      	strb	r2, [r3, #1]
      break;
 8009728:	e0d8      	b.n	80098dc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800972a:	2109      	movs	r1, #9
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f99d 	bl	8009a6c <USBH_Get_CfgDesc>
 8009732:	4603      	mov	r3, r0
 8009734:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009736:	7bbb      	ldrb	r3, [r7, #14]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d103      	bne.n	8009744 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2204      	movs	r2, #4
 8009740:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009742:	e0cd      	b.n	80098e0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	2b03      	cmp	r3, #3
 8009748:	f040 80ca 	bne.w	80098e0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009752:	3301      	adds	r3, #1
 8009754:	b2da      	uxtb	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009762:	2b03      	cmp	r3, #3
 8009764:	d903      	bls.n	800976e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	220d      	movs	r2, #13
 800976a:	701a      	strb	r2, [r3, #0]
      break;
 800976c:	e0b8      	b.n	80098e0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	795b      	ldrb	r3, [r3, #5]
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fee9 	bl	800a54c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	791b      	ldrb	r3, [r3, #4]
 800977e:	4619      	mov	r1, r3
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fee3 	bl	800a54c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	701a      	strb	r2, [r3, #0]
      break;
 8009792:	e0a5      	b.n	80098e0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800979a:	4619      	mov	r1, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f965 	bl	8009a6c <USBH_Get_CfgDesc>
 80097a2:	4603      	mov	r3, r0
 80097a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d103      	bne.n	80097b4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2205      	movs	r2, #5
 80097b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80097b2:	e097      	b.n	80098e4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	f040 8094 	bne.w	80098e4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80097c2:	3301      	adds	r3, #1
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80097d2:	2b03      	cmp	r3, #3
 80097d4:	d903      	bls.n	80097de <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	220d      	movs	r2, #13
 80097da:	701a      	strb	r2, [r3, #0]
      break;
 80097dc:	e082      	b.n	80098e4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	795b      	ldrb	r3, [r3, #5]
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 feb1 	bl	800a54c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	791b      	ldrb	r3, [r3, #4]
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 feab 	bl	800a54c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	701a      	strb	r2, [r3, #0]
      break;
 8009802:	e06f      	b.n	80098e4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800980a:	2b00      	cmp	r3, #0
 800980c:	d019      	beq.n	8009842 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800981a:	23ff      	movs	r3, #255	; 0xff
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f949 	bl	8009ab4 <USBH_Get_StringDesc>
 8009822:	4603      	mov	r3, r0
 8009824:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009826:	7bbb      	ldrb	r3, [r7, #14]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d103      	bne.n	8009834 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2206      	movs	r2, #6
 8009830:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009832:	e059      	b.n	80098e8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009834:	7bbb      	ldrb	r3, [r7, #14]
 8009836:	2b03      	cmp	r3, #3
 8009838:	d156      	bne.n	80098e8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2206      	movs	r2, #6
 800983e:	705a      	strb	r2, [r3, #1]
      break;
 8009840:	e052      	b.n	80098e8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2206      	movs	r2, #6
 8009846:	705a      	strb	r2, [r3, #1]
      break;
 8009848:	e04e      	b.n	80098e8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009850:	2b00      	cmp	r3, #0
 8009852:	d019      	beq.n	8009888 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009860:	23ff      	movs	r3, #255	; 0xff
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f926 	bl	8009ab4 <USBH_Get_StringDesc>
 8009868:	4603      	mov	r3, r0
 800986a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800986c:	7bbb      	ldrb	r3, [r7, #14]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d103      	bne.n	800987a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2207      	movs	r2, #7
 8009876:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009878:	e038      	b.n	80098ec <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800987a:	7bbb      	ldrb	r3, [r7, #14]
 800987c:	2b03      	cmp	r3, #3
 800987e:	d135      	bne.n	80098ec <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2207      	movs	r2, #7
 8009884:	705a      	strb	r2, [r3, #1]
      break;
 8009886:	e031      	b.n	80098ec <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2207      	movs	r2, #7
 800988c:	705a      	strb	r2, [r3, #1]
      break;
 800988e:	e02d      	b.n	80098ec <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009896:	2b00      	cmp	r3, #0
 8009898:	d017      	beq.n	80098ca <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80098a6:	23ff      	movs	r3, #255	; 0xff
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f903 	bl	8009ab4 <USBH_Get_StringDesc>
 80098ae:	4603      	mov	r3, r0
 80098b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d102      	bne.n	80098be <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80098b8:	2300      	movs	r3, #0
 80098ba:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80098bc:	e018      	b.n	80098f0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	d115      	bne.n	80098f0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	73fb      	strb	r3, [r7, #15]
      break;
 80098c8:	e012      	b.n	80098f0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	73fb      	strb	r3, [r7, #15]
      break;
 80098ce:	e00f      	b.n	80098f0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80098d0:	bf00      	nop
 80098d2:	e00e      	b.n	80098f2 <USBH_HandleEnum+0x3be>
      break;
 80098d4:	bf00      	nop
 80098d6:	e00c      	b.n	80098f2 <USBH_HandleEnum+0x3be>
      break;
 80098d8:	bf00      	nop
 80098da:	e00a      	b.n	80098f2 <USBH_HandleEnum+0x3be>
      break;
 80098dc:	bf00      	nop
 80098de:	e008      	b.n	80098f2 <USBH_HandleEnum+0x3be>
      break;
 80098e0:	bf00      	nop
 80098e2:	e006      	b.n	80098f2 <USBH_HandleEnum+0x3be>
      break;
 80098e4:	bf00      	nop
 80098e6:	e004      	b.n	80098f2 <USBH_HandleEnum+0x3be>
      break;
 80098e8:	bf00      	nop
 80098ea:	e002      	b.n	80098f2 <USBH_HandleEnum+0x3be>
      break;
 80098ec:	bf00      	nop
 80098ee:	e000      	b.n	80098f2 <USBH_HandleEnum+0x3be>
      break;
 80098f0:	bf00      	nop
  }
  return Status;
 80098f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	683a      	ldr	r2, [r7, #0]
 800990a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800990e:	bf00      	nop
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009928:	1c5a      	adds	r2, r3, #1
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 f804 	bl	800993e <USBH_HandleSof>
}
 8009936:	bf00      	nop
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b082      	sub	sp, #8
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	b2db      	uxtb	r3, r3
 800994c:	2b0b      	cmp	r3, #11
 800994e:	d10a      	bne.n	8009966 <USBH_HandleSof+0x28>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009956:	2b00      	cmp	r3, #0
 8009958:	d005      	beq.n	8009966 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	4798      	blx	r3
  }
}
 8009966:	bf00      	nop
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800996e:	b480      	push	{r7}
 8009970:	b083      	sub	sp, #12
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2201      	movs	r2, #1
 800997a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800997e:	bf00      	nop
}
 8009980:	370c      	adds	r7, #12
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800998a:	b480      	push	{r7}
 800998c:	b083      	sub	sp, #12
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800999a:	bf00      	nop
}
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80099a6:	b480      	push	{r7}
 80099a8:	b083      	sub	sp, #12
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2201      	movs	r2, #1
 80099b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 ff56 	bl	800a8a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	791b      	ldrb	r3, [r3, #4]
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 fda3 	bl	800a54c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	795b      	ldrb	r3, [r3, #5]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fd9d 	bl	800a54c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af02      	add	r7, sp, #8
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009a2e:	78fb      	ldrb	r3, [r7, #3]
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	4613      	mov	r3, r2
 8009a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f864 	bl	8009b0a <USBH_GetDescriptor>
 8009a42:	4603      	mov	r3, r0
 8009a44:	73fb      	strb	r3, [r7, #15]
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10a      	bne.n	8009a62 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009a58:	78fa      	ldrb	r2, [r7, #3]
 8009a5a:	b292      	uxth	r2, r2
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	f000 f918 	bl	8009c92 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af02      	add	r7, sp, #8
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	460b      	mov	r3, r1
 8009a76:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	331c      	adds	r3, #28
 8009a7c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009a7e:	887b      	ldrh	r3, [r7, #2]
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a88:	2100      	movs	r1, #0
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f83d 	bl	8009b0a <USBH_GetDescriptor>
 8009a90:	4603      	mov	r3, r0
 8009a92:	72fb      	strb	r3, [r7, #11]
 8009a94:	7afb      	ldrb	r3, [r7, #11]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d107      	bne.n	8009aaa <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009aa0:	887a      	ldrh	r2, [r7, #2]
 8009aa2:	68f9      	ldr	r1, [r7, #12]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f000 f964 	bl	8009d72 <USBH_ParseCfgDesc>
  }

  return status;
 8009aaa:	7afb      	ldrb	r3, [r7, #11]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b088      	sub	sp, #32
 8009ab8:	af02      	add	r7, sp, #8
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	607a      	str	r2, [r7, #4]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	72fb      	strb	r3, [r7, #11]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009ac8:	7afb      	ldrb	r3, [r7, #11]
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009ad0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009ad8:	893b      	ldrh	r3, [r7, #8]
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	460b      	mov	r3, r1
 8009ade:	2100      	movs	r1, #0
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f000 f812 	bl	8009b0a <USBH_GetDescriptor>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	75fb      	strb	r3, [r7, #23]
 8009aea:	7dfb      	ldrb	r3, [r7, #23]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d107      	bne.n	8009b00 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009af6:	893a      	ldrh	r2, [r7, #8]
 8009af8:	6879      	ldr	r1, [r7, #4]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f000 fa37 	bl	8009f6e <USBH_ParseStringDesc>
  }

  return status;
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3718      	adds	r7, #24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	60f8      	str	r0, [r7, #12]
 8009b12:	607b      	str	r3, [r7, #4]
 8009b14:	460b      	mov	r3, r1
 8009b16:	72fb      	strb	r3, [r7, #11]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	789b      	ldrb	r3, [r3, #2]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d11c      	bne.n	8009b5e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009b24:	7afb      	ldrb	r3, [r7, #11]
 8009b26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2206      	movs	r2, #6
 8009b34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	893a      	ldrh	r2, [r7, #8]
 8009b3a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009b3c:	893b      	ldrh	r3, [r7, #8]
 8009b3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b46:	d104      	bne.n	8009b52 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f240 4209 	movw	r2, #1033	; 0x409
 8009b4e:	829a      	strh	r2, [r3, #20]
 8009b50:	e002      	b.n	8009b58 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2200      	movs	r2, #0
 8009b56:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	8b3a      	ldrh	r2, [r7, #24]
 8009b5c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009b5e:	8b3b      	ldrh	r3, [r7, #24]
 8009b60:	461a      	mov	r2, r3
 8009b62:	6879      	ldr	r1, [r7, #4]
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 fa50 	bl	800a00a <USBH_CtlReq>
 8009b6a:	4603      	mov	r3, r0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	789b      	ldrb	r3, [r3, #2]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d10f      	bne.n	8009ba8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2205      	movs	r2, #5
 8009b92:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009b94:	78fb      	ldrb	r3, [r7, #3]
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009ba8:	2200      	movs	r2, #0
 8009baa:	2100      	movs	r1, #0
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fa2c 	bl	800a00a <USBH_CtlReq>
 8009bb2:	4603      	mov	r3, r0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	789b      	ldrb	r3, [r3, #2]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d10e      	bne.n	8009bee <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2209      	movs	r2, #9
 8009bda:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	887a      	ldrh	r2, [r7, #2]
 8009be0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009bee:	2200      	movs	r2, #0
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fa09 	bl	800a00a <USBH_CtlReq>
 8009bf8:	4603      	mov	r3, r0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b082      	sub	sp, #8
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	789b      	ldrb	r3, [r3, #2]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d10f      	bne.n	8009c36 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2203      	movs	r2, #3
 8009c20:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009c22:	78fb      	ldrb	r3, [r7, #3]
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009c36:	2200      	movs	r2, #0
 8009c38:	2100      	movs	r1, #0
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f9e5 	bl	800a00a <USBH_CtlReq>
 8009c40:	4603      	mov	r3, r0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3708      	adds	r7, #8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b082      	sub	sp, #8
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	460b      	mov	r3, r1
 8009c54:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	789b      	ldrb	r3, [r3, #2]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d10f      	bne.n	8009c7e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2202      	movs	r2, #2
 8009c62:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009c70:	78fb      	ldrb	r3, [r7, #3]
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009c7e:	2200      	movs	r2, #0
 8009c80:	2100      	movs	r1, #0
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f9c1 	bl	800a00a <USBH_CtlReq>
 8009c88:	4603      	mov	r3, r0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b085      	sub	sp, #20
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	60f8      	str	r0, [r7, #12]
 8009c9a:	60b9      	str	r1, [r7, #8]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	781a      	ldrb	r2, [r3, #0]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	785a      	ldrb	r2, [r3, #1]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	3302      	adds	r3, #2
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	3303      	adds	r3, #3
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	021b      	lsls	r3, r3, #8
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	791a      	ldrb	r2, [r3, #4]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	795a      	ldrb	r2, [r3, #5]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	799a      	ldrb	r2, [r3, #6]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	79da      	ldrb	r2, [r3, #7]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009cec:	88fb      	ldrh	r3, [r7, #6]
 8009cee:	2b08      	cmp	r3, #8
 8009cf0:	d939      	bls.n	8009d66 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	3308      	adds	r3, #8
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	3309      	adds	r3, #9
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	021b      	lsls	r3, r3, #8
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	4313      	orrs	r3, r2
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	330a      	adds	r3, #10
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	330b      	adds	r3, #11
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	021b      	lsls	r3, r3, #8
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	4313      	orrs	r3, r2
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	330c      	adds	r3, #12
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	330d      	adds	r3, #13
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	021b      	lsls	r3, r3, #8
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	7b9a      	ldrb	r2, [r3, #14]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	7bda      	ldrb	r2, [r3, #15]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	7c1a      	ldrb	r2, [r3, #16]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	7c5a      	ldrb	r2, [r3, #17]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	745a      	strb	r2, [r3, #17]
  }
}
 8009d66:	bf00      	nop
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b08a      	sub	sp, #40	; 0x28
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	60f8      	str	r0, [r7, #12]
 8009d7a:	60b9      	str	r1, [r7, #8]
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009d84:	2300      	movs	r3, #0
 8009d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	781a      	ldrb	r2, [r3, #0]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	785a      	ldrb	r2, [r3, #1]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	3302      	adds	r3, #2
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	b29a      	uxth	r2, r3
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	3303      	adds	r3, #3
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	021b      	lsls	r3, r3, #8
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	4313      	orrs	r3, r2
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	791a      	ldrb	r2, [r3, #4]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	795a      	ldrb	r2, [r3, #5]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	799a      	ldrb	r2, [r3, #6]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	79da      	ldrb	r2, [r3, #7]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	7a1a      	ldrb	r2, [r3, #8]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009de8:	88fb      	ldrh	r3, [r7, #6]
 8009dea:	2b09      	cmp	r3, #9
 8009dec:	d95f      	bls.n	8009eae <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009dee:	2309      	movs	r3, #9
 8009df0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009df2:	2300      	movs	r3, #0
 8009df4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009df6:	e051      	b.n	8009e9c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009df8:	f107 0316 	add.w	r3, r7, #22
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e00:	f000 f8e8 	bl	8009fd4 <USBH_GetNextDesc>
 8009e04:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	785b      	ldrb	r3, [r3, #1]
 8009e0a:	2b04      	cmp	r3, #4
 8009e0c:	d146      	bne.n	8009e9c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009e0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e12:	221a      	movs	r2, #26
 8009e14:	fb02 f303 	mul.w	r3, r2, r3
 8009e18:	3308      	adds	r3, #8
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	3302      	adds	r3, #2
 8009e20:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009e22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e24:	69f8      	ldr	r0, [r7, #28]
 8009e26:	f000 f846 	bl	8009eb6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009e30:	2300      	movs	r3, #0
 8009e32:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e34:	e022      	b.n	8009e7c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009e36:	f107 0316 	add.w	r3, r7, #22
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e3e:	f000 f8c9 	bl	8009fd4 <USBH_GetNextDesc>
 8009e42:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e46:	785b      	ldrb	r3, [r3, #1]
 8009e48:	2b05      	cmp	r3, #5
 8009e4a:	d117      	bne.n	8009e7c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e50:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009e54:	3201      	adds	r2, #1
 8009e56:	00d2      	lsls	r2, r2, #3
 8009e58:	211a      	movs	r1, #26
 8009e5a:	fb01 f303 	mul.w	r3, r1, r3
 8009e5e:	4413      	add	r3, r2
 8009e60:	3308      	adds	r3, #8
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	4413      	add	r3, r2
 8009e66:	3304      	adds	r3, #4
 8009e68:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009e6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e6c:	69b8      	ldr	r0, [r7, #24]
 8009e6e:	f000 f851 	bl	8009f14 <USBH_ParseEPDesc>
            ep_ix++;
 8009e72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009e76:	3301      	adds	r3, #1
 8009e78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	791b      	ldrb	r3, [r3, #4]
 8009e80:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d204      	bcs.n	8009e92 <USBH_ParseCfgDesc+0x120>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	885a      	ldrh	r2, [r3, #2]
 8009e8c:	8afb      	ldrh	r3, [r7, #22]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d8d1      	bhi.n	8009e36 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009e92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e96:	3301      	adds	r3, #1
 8009e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009e9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d804      	bhi.n	8009eae <USBH_ParseCfgDesc+0x13c>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	885a      	ldrh	r2, [r3, #2]
 8009ea8:	8afb      	ldrh	r3, [r7, #22]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d8a4      	bhi.n	8009df8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009eae:	bf00      	nop
 8009eb0:	3728      	adds	r7, #40	; 0x28
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b083      	sub	sp, #12
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	781a      	ldrb	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	785a      	ldrb	r2, [r3, #1]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	789a      	ldrb	r2, [r3, #2]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	78da      	ldrb	r2, [r3, #3]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	791a      	ldrb	r2, [r3, #4]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	795a      	ldrb	r2, [r3, #5]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	799a      	ldrb	r2, [r3, #6]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	79da      	ldrb	r2, [r3, #7]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	7a1a      	ldrb	r2, [r3, #8]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	721a      	strb	r2, [r3, #8]
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	781a      	ldrb	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	785a      	ldrb	r2, [r3, #1]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	789a      	ldrb	r2, [r3, #2]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	78da      	ldrb	r2, [r3, #3]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	3304      	adds	r3, #4
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	3305      	adds	r3, #5
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	021b      	lsls	r3, r3, #8
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	4313      	orrs	r3, r2
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	799a      	ldrb	r2, [r3, #6]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	719a      	strb	r2, [r3, #6]
}
 8009f62:	bf00      	nop
 8009f64:	370c      	adds	r7, #12
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr

08009f6e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	b087      	sub	sp, #28
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	60f8      	str	r0, [r7, #12]
 8009f76:	60b9      	str	r1, [r7, #8]
 8009f78:	4613      	mov	r3, r2
 8009f7a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	2b03      	cmp	r3, #3
 8009f84:	d120      	bne.n	8009fc8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	1e9a      	subs	r2, r3, #2
 8009f8c:	88fb      	ldrh	r3, [r7, #6]
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	bf28      	it	cs
 8009f92:	4613      	movcs	r3, r2
 8009f94:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	3302      	adds	r3, #2
 8009f9a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	82fb      	strh	r3, [r7, #22]
 8009fa0:	e00b      	b.n	8009fba <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009fa2:	8afb      	ldrh	r3, [r7, #22]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	781a      	ldrb	r2, [r3, #0]
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009fb4:	8afb      	ldrh	r3, [r7, #22]
 8009fb6:	3302      	adds	r3, #2
 8009fb8:	82fb      	strh	r3, [r7, #22]
 8009fba:	8afa      	ldrh	r2, [r7, #22]
 8009fbc:	8abb      	ldrh	r3, [r7, #20]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d3ef      	bcc.n	8009fa2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	701a      	strb	r2, [r3, #0]
  }
}
 8009fc8:	bf00      	nop
 8009fca:	371c      	adds	r7, #28
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	881a      	ldrh	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	4413      	add	r3, r2
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3714      	adds	r7, #20
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b086      	sub	sp, #24
 800a00e:	af00      	add	r7, sp, #0
 800a010:	60f8      	str	r0, [r7, #12]
 800a012:	60b9      	str	r1, [r7, #8]
 800a014:	4613      	mov	r3, r2
 800a016:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a018:	2301      	movs	r3, #1
 800a01a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	789b      	ldrb	r3, [r3, #2]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d002      	beq.n	800a02a <USBH_CtlReq+0x20>
 800a024:	2b02      	cmp	r3, #2
 800a026:	d00f      	beq.n	800a048 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a028:	e027      	b.n	800a07a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	88fa      	ldrh	r2, [r7, #6]
 800a034:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2201      	movs	r2, #1
 800a03a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2202      	movs	r2, #2
 800a040:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a042:	2301      	movs	r3, #1
 800a044:	75fb      	strb	r3, [r7, #23]
      break;
 800a046:	e018      	b.n	800a07a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f000 f81b 	bl	800a084 <USBH_HandleControl>
 800a04e:	4603      	mov	r3, r0
 800a050:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a052:	7dfb      	ldrb	r3, [r7, #23]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d002      	beq.n	800a05e <USBH_CtlReq+0x54>
 800a058:	7dfb      	ldrb	r3, [r7, #23]
 800a05a:	2b03      	cmp	r3, #3
 800a05c:	d106      	bne.n	800a06c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2201      	movs	r2, #1
 800a062:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	761a      	strb	r2, [r3, #24]
      break;
 800a06a:	e005      	b.n	800a078 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a06c:	7dfb      	ldrb	r3, [r7, #23]
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d102      	bne.n	800a078 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2201      	movs	r2, #1
 800a076:	709a      	strb	r2, [r3, #2]
      break;
 800a078:	bf00      	nop
  }
  return status;
 800a07a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3718      	adds	r7, #24
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af02      	add	r7, sp, #8
 800a08a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a08c:	2301      	movs	r3, #1
 800a08e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a090:	2300      	movs	r3, #0
 800a092:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	7e1b      	ldrb	r3, [r3, #24]
 800a098:	3b01      	subs	r3, #1
 800a09a:	2b0a      	cmp	r3, #10
 800a09c:	f200 8156 	bhi.w	800a34c <USBH_HandleControl+0x2c8>
 800a0a0:	a201      	add	r2, pc, #4	; (adr r2, 800a0a8 <USBH_HandleControl+0x24>)
 800a0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a6:	bf00      	nop
 800a0a8:	0800a0d5 	.word	0x0800a0d5
 800a0ac:	0800a0ef 	.word	0x0800a0ef
 800a0b0:	0800a159 	.word	0x0800a159
 800a0b4:	0800a17f 	.word	0x0800a17f
 800a0b8:	0800a1b7 	.word	0x0800a1b7
 800a0bc:	0800a1e1 	.word	0x0800a1e1
 800a0c0:	0800a233 	.word	0x0800a233
 800a0c4:	0800a255 	.word	0x0800a255
 800a0c8:	0800a291 	.word	0x0800a291
 800a0cc:	0800a2b7 	.word	0x0800a2b7
 800a0d0:	0800a2f5 	.word	0x0800a2f5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f103 0110 	add.w	r1, r3, #16
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	795b      	ldrb	r3, [r3, #5]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 f943 	bl	800a36c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2202      	movs	r2, #2
 800a0ea:	761a      	strb	r2, [r3, #24]
      break;
 800a0ec:	e139      	b.n	800a362 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	795b      	ldrb	r3, [r3, #5]
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 fcc5 	bl	800aa84 <USBH_LL_GetURBState>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a0fe:	7bbb      	ldrb	r3, [r7, #14]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d11e      	bne.n	800a142 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	7c1b      	ldrb	r3, [r3, #16]
 800a108:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a10c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	8adb      	ldrh	r3, [r3, #22]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00a      	beq.n	800a12c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a116:	7b7b      	ldrb	r3, [r7, #13]
 800a118:	2b80      	cmp	r3, #128	; 0x80
 800a11a:	d103      	bne.n	800a124 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2203      	movs	r2, #3
 800a120:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a122:	e115      	b.n	800a350 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2205      	movs	r2, #5
 800a128:	761a      	strb	r2, [r3, #24]
      break;
 800a12a:	e111      	b.n	800a350 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a12c:	7b7b      	ldrb	r3, [r7, #13]
 800a12e:	2b80      	cmp	r3, #128	; 0x80
 800a130:	d103      	bne.n	800a13a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2209      	movs	r2, #9
 800a136:	761a      	strb	r2, [r3, #24]
      break;
 800a138:	e10a      	b.n	800a350 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2207      	movs	r2, #7
 800a13e:	761a      	strb	r2, [r3, #24]
      break;
 800a140:	e106      	b.n	800a350 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a142:	7bbb      	ldrb	r3, [r7, #14]
 800a144:	2b04      	cmp	r3, #4
 800a146:	d003      	beq.n	800a150 <USBH_HandleControl+0xcc>
 800a148:	7bbb      	ldrb	r3, [r7, #14]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	f040 8100 	bne.w	800a350 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	220b      	movs	r2, #11
 800a154:	761a      	strb	r2, [r3, #24]
      break;
 800a156:	e0fb      	b.n	800a350 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a15e:	b29a      	uxth	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6899      	ldr	r1, [r3, #8]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	899a      	ldrh	r2, [r3, #12]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	791b      	ldrb	r3, [r3, #4]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f93a 	bl	800a3ea <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2204      	movs	r2, #4
 800a17a:	761a      	strb	r2, [r3, #24]
      break;
 800a17c:	e0f1      	b.n	800a362 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	791b      	ldrb	r3, [r3, #4]
 800a182:	4619      	mov	r1, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 fc7d 	bl	800aa84 <USBH_LL_GetURBState>
 800a18a:	4603      	mov	r3, r0
 800a18c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a18e:	7bbb      	ldrb	r3, [r7, #14]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d102      	bne.n	800a19a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2209      	movs	r2, #9
 800a198:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a19a:	7bbb      	ldrb	r3, [r7, #14]
 800a19c:	2b05      	cmp	r3, #5
 800a19e:	d102      	bne.n	800a1a6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a1a4:	e0d6      	b.n	800a354 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a1a6:	7bbb      	ldrb	r3, [r7, #14]
 800a1a8:	2b04      	cmp	r3, #4
 800a1aa:	f040 80d3 	bne.w	800a354 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	220b      	movs	r2, #11
 800a1b2:	761a      	strb	r2, [r3, #24]
      break;
 800a1b4:	e0ce      	b.n	800a354 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6899      	ldr	r1, [r3, #8]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	899a      	ldrh	r2, [r3, #12]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	795b      	ldrb	r3, [r3, #5]
 800a1c2:	2001      	movs	r0, #1
 800a1c4:	9000      	str	r0, [sp, #0]
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f8ea 	bl	800a3a0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2206      	movs	r2, #6
 800a1dc:	761a      	strb	r2, [r3, #24]
      break;
 800a1de:	e0c0      	b.n	800a362 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	795b      	ldrb	r3, [r3, #5]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 fc4c 	bl	800aa84 <USBH_LL_GetURBState>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a1f0:	7bbb      	ldrb	r3, [r7, #14]
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d103      	bne.n	800a1fe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2207      	movs	r2, #7
 800a1fa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a1fc:	e0ac      	b.n	800a358 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a1fe:	7bbb      	ldrb	r3, [r7, #14]
 800a200:	2b05      	cmp	r3, #5
 800a202:	d105      	bne.n	800a210 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	220c      	movs	r2, #12
 800a208:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a20a:	2303      	movs	r3, #3
 800a20c:	73fb      	strb	r3, [r7, #15]
      break;
 800a20e:	e0a3      	b.n	800a358 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a210:	7bbb      	ldrb	r3, [r7, #14]
 800a212:	2b02      	cmp	r3, #2
 800a214:	d103      	bne.n	800a21e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2205      	movs	r2, #5
 800a21a:	761a      	strb	r2, [r3, #24]
      break;
 800a21c:	e09c      	b.n	800a358 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a21e:	7bbb      	ldrb	r3, [r7, #14]
 800a220:	2b04      	cmp	r3, #4
 800a222:	f040 8099 	bne.w	800a358 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	220b      	movs	r2, #11
 800a22a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a22c:	2302      	movs	r3, #2
 800a22e:	73fb      	strb	r3, [r7, #15]
      break;
 800a230:	e092      	b.n	800a358 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	791b      	ldrb	r3, [r3, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	2100      	movs	r1, #0
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f8d5 	bl	800a3ea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a246:	b29a      	uxth	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2208      	movs	r2, #8
 800a250:	761a      	strb	r2, [r3, #24]

      break;
 800a252:	e086      	b.n	800a362 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	791b      	ldrb	r3, [r3, #4]
 800a258:	4619      	mov	r1, r3
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fc12 	bl	800aa84 <USBH_LL_GetURBState>
 800a260:	4603      	mov	r3, r0
 800a262:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a264:	7bbb      	ldrb	r3, [r7, #14]
 800a266:	2b01      	cmp	r3, #1
 800a268:	d105      	bne.n	800a276 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	220d      	movs	r2, #13
 800a26e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a274:	e072      	b.n	800a35c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a276:	7bbb      	ldrb	r3, [r7, #14]
 800a278:	2b04      	cmp	r3, #4
 800a27a:	d103      	bne.n	800a284 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	220b      	movs	r2, #11
 800a280:	761a      	strb	r2, [r3, #24]
      break;
 800a282:	e06b      	b.n	800a35c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a284:	7bbb      	ldrb	r3, [r7, #14]
 800a286:	2b05      	cmp	r3, #5
 800a288:	d168      	bne.n	800a35c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a28a:	2303      	movs	r3, #3
 800a28c:	73fb      	strb	r3, [r7, #15]
      break;
 800a28e:	e065      	b.n	800a35c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	795b      	ldrb	r3, [r3, #5]
 800a294:	2201      	movs	r2, #1
 800a296:	9200      	str	r2, [sp, #0]
 800a298:	2200      	movs	r2, #0
 800a29a:	2100      	movs	r1, #0
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 f87f 	bl	800a3a0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	220a      	movs	r2, #10
 800a2b2:	761a      	strb	r2, [r3, #24]
      break;
 800a2b4:	e055      	b.n	800a362 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	795b      	ldrb	r3, [r3, #5]
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fbe1 	bl	800aa84 <USBH_LL_GetURBState>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a2c6:	7bbb      	ldrb	r3, [r7, #14]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d105      	bne.n	800a2d8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	220d      	movs	r2, #13
 800a2d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a2d6:	e043      	b.n	800a360 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a2d8:	7bbb      	ldrb	r3, [r7, #14]
 800a2da:	2b02      	cmp	r3, #2
 800a2dc:	d103      	bne.n	800a2e6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2209      	movs	r2, #9
 800a2e2:	761a      	strb	r2, [r3, #24]
      break;
 800a2e4:	e03c      	b.n	800a360 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a2e6:	7bbb      	ldrb	r3, [r7, #14]
 800a2e8:	2b04      	cmp	r3, #4
 800a2ea:	d139      	bne.n	800a360 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	220b      	movs	r2, #11
 800a2f0:	761a      	strb	r2, [r3, #24]
      break;
 800a2f2:	e035      	b.n	800a360 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	7e5b      	ldrb	r3, [r3, #25]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	765a      	strb	r2, [r3, #25]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	7e5b      	ldrb	r3, [r3, #25]
 800a304:	2b02      	cmp	r3, #2
 800a306:	d806      	bhi.n	800a316 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a314:	e025      	b.n	800a362 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a31c:	2106      	movs	r1, #6
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	795b      	ldrb	r3, [r3, #5]
 800a32c:	4619      	mov	r1, r3
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f90c 	bl	800a54c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	791b      	ldrb	r3, [r3, #4]
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f906 	bl	800a54c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a346:	2302      	movs	r3, #2
 800a348:	73fb      	strb	r3, [r7, #15]
      break;
 800a34a:	e00a      	b.n	800a362 <USBH_HandleControl+0x2de>

    default:
      break;
 800a34c:	bf00      	nop
 800a34e:	e008      	b.n	800a362 <USBH_HandleControl+0x2de>
      break;
 800a350:	bf00      	nop
 800a352:	e006      	b.n	800a362 <USBH_HandleControl+0x2de>
      break;
 800a354:	bf00      	nop
 800a356:	e004      	b.n	800a362 <USBH_HandleControl+0x2de>
      break;
 800a358:	bf00      	nop
 800a35a:	e002      	b.n	800a362 <USBH_HandleControl+0x2de>
      break;
 800a35c:	bf00      	nop
 800a35e:	e000      	b.n	800a362 <USBH_HandleControl+0x2de>
      break;
 800a360:	bf00      	nop
  }

  return status;
 800a362:	7bfb      	ldrb	r3, [r7, #15]
}
 800a364:	4618      	mov	r0, r3
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b088      	sub	sp, #32
 800a370:	af04      	add	r7, sp, #16
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	4613      	mov	r3, r2
 800a378:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a37a:	79f9      	ldrb	r1, [r7, #7]
 800a37c:	2300      	movs	r3, #0
 800a37e:	9303      	str	r3, [sp, #12]
 800a380:	2308      	movs	r3, #8
 800a382:	9302      	str	r3, [sp, #8]
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	9301      	str	r3, [sp, #4]
 800a388:	2300      	movs	r3, #0
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	2300      	movs	r3, #0
 800a38e:	2200      	movs	r2, #0
 800a390:	68f8      	ldr	r0, [r7, #12]
 800a392:	f000 fb46 	bl	800aa22 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b088      	sub	sp, #32
 800a3a4:	af04      	add	r7, sp, #16
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	80fb      	strh	r3, [r7, #6]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d001      	beq.n	800a3c4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a3c4:	7979      	ldrb	r1, [r7, #5]
 800a3c6:	7e3b      	ldrb	r3, [r7, #24]
 800a3c8:	9303      	str	r3, [sp, #12]
 800a3ca:	88fb      	ldrh	r3, [r7, #6]
 800a3cc:	9302      	str	r3, [sp, #8]
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	9301      	str	r3, [sp, #4]
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	2200      	movs	r2, #0
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f000 fb21 	bl	800aa22 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b088      	sub	sp, #32
 800a3ee:	af04      	add	r7, sp, #16
 800a3f0:	60f8      	str	r0, [r7, #12]
 800a3f2:	60b9      	str	r1, [r7, #8]
 800a3f4:	4611      	mov	r1, r2
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	80fb      	strh	r3, [r7, #6]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a400:	7979      	ldrb	r1, [r7, #5]
 800a402:	2300      	movs	r3, #0
 800a404:	9303      	str	r3, [sp, #12]
 800a406:	88fb      	ldrh	r3, [r7, #6]
 800a408:	9302      	str	r3, [sp, #8]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	9301      	str	r3, [sp, #4]
 800a40e:	2301      	movs	r3, #1
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	2300      	movs	r3, #0
 800a414:	2201      	movs	r2, #1
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f000 fb03 	bl	800aa22 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a41c:	2300      	movs	r3, #0

}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b088      	sub	sp, #32
 800a42a:	af04      	add	r7, sp, #16
 800a42c:	60f8      	str	r0, [r7, #12]
 800a42e:	60b9      	str	r1, [r7, #8]
 800a430:	4611      	mov	r1, r2
 800a432:	461a      	mov	r2, r3
 800a434:	460b      	mov	r3, r1
 800a436:	80fb      	strh	r3, [r7, #6]
 800a438:	4613      	mov	r3, r2
 800a43a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a446:	2300      	movs	r3, #0
 800a448:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a44a:	7979      	ldrb	r1, [r7, #5]
 800a44c:	7e3b      	ldrb	r3, [r7, #24]
 800a44e:	9303      	str	r3, [sp, #12]
 800a450:	88fb      	ldrh	r3, [r7, #6]
 800a452:	9302      	str	r3, [sp, #8]
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	9301      	str	r3, [sp, #4]
 800a458:	2301      	movs	r3, #1
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	2302      	movs	r3, #2
 800a45e:	2200      	movs	r2, #0
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	f000 fade 	bl	800aa22 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b088      	sub	sp, #32
 800a474:	af04      	add	r7, sp, #16
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	4611      	mov	r1, r2
 800a47c:	461a      	mov	r2, r3
 800a47e:	460b      	mov	r3, r1
 800a480:	80fb      	strh	r3, [r7, #6]
 800a482:	4613      	mov	r3, r2
 800a484:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a486:	7979      	ldrb	r1, [r7, #5]
 800a488:	2300      	movs	r3, #0
 800a48a:	9303      	str	r3, [sp, #12]
 800a48c:	88fb      	ldrh	r3, [r7, #6]
 800a48e:	9302      	str	r3, [sp, #8]
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	9301      	str	r3, [sp, #4]
 800a494:	2301      	movs	r3, #1
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	2302      	movs	r3, #2
 800a49a:	2201      	movs	r2, #1
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f000 fac0 	bl	800aa22 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af04      	add	r7, sp, #16
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	4608      	mov	r0, r1
 800a4b6:	4611      	mov	r1, r2
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	70fb      	strb	r3, [r7, #3]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	70bb      	strb	r3, [r7, #2]
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a4c6:	7878      	ldrb	r0, [r7, #1]
 800a4c8:	78ba      	ldrb	r2, [r7, #2]
 800a4ca:	78f9      	ldrb	r1, [r7, #3]
 800a4cc:	8b3b      	ldrh	r3, [r7, #24]
 800a4ce:	9302      	str	r3, [sp, #8]
 800a4d0:	7d3b      	ldrb	r3, [r7, #20]
 800a4d2:	9301      	str	r3, [sp, #4]
 800a4d4:	7c3b      	ldrb	r3, [r7, #16]
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	4603      	mov	r3, r0
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fa53 	bl	800a986 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b082      	sub	sp, #8
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a4f6:	78fb      	ldrb	r3, [r7, #3]
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 fa72 	bl	800a9e4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b084      	sub	sp, #16
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
 800a512:	460b      	mov	r3, r1
 800a514:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f836 	bl	800a588 <USBH_GetFreePipe>
 800a51c:	4603      	mov	r3, r0
 800a51e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a520:	89fb      	ldrh	r3, [r7, #14]
 800a522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a526:	4293      	cmp	r3, r2
 800a528:	d00a      	beq.n	800a540 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a52a:	78fa      	ldrb	r2, [r7, #3]
 800a52c:	89fb      	ldrh	r3, [r7, #14]
 800a52e:	f003 030f 	and.w	r3, r3, #15
 800a532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a536:	6879      	ldr	r1, [r7, #4]
 800a538:	33e0      	adds	r3, #224	; 0xe0
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	440b      	add	r3, r1
 800a53e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a540:	89fb      	ldrh	r3, [r7, #14]
 800a542:	b2db      	uxtb	r3, r3
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	460b      	mov	r3, r1
 800a556:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a558:	78fb      	ldrb	r3, [r7, #3]
 800a55a:	2b0a      	cmp	r3, #10
 800a55c:	d80d      	bhi.n	800a57a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a55e:	78fb      	ldrb	r3, [r7, #3]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	33e0      	adds	r3, #224	; 0xe0
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	685a      	ldr	r2, [r3, #4]
 800a56a:	78fb      	ldrb	r3, [r7, #3]
 800a56c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a570:	6879      	ldr	r1, [r7, #4]
 800a572:	33e0      	adds	r3, #224	; 0xe0
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	440b      	add	r3, r1
 800a578:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a590:	2300      	movs	r3, #0
 800a592:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a594:	2300      	movs	r3, #0
 800a596:	73fb      	strb	r3, [r7, #15]
 800a598:	e00f      	b.n	800a5ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a59a:	7bfb      	ldrb	r3, [r7, #15]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	33e0      	adds	r3, #224	; 0xe0
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4413      	add	r3, r2
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d102      	bne.n	800a5b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a5ae:	7bfb      	ldrb	r3, [r7, #15]
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	e007      	b.n	800a5c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	73fb      	strb	r3, [r7, #15]
 800a5ba:	7bfb      	ldrb	r3, [r7, #15]
 800a5bc:	2b0a      	cmp	r3, #10
 800a5be:	d9ec      	bls.n	800a59a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a5c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3714      	adds	r7, #20
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	490e      	ldr	r1, [pc, #56]	; (800a610 <MX_USB_HOST_Init+0x40>)
 800a5d8:	480e      	ldr	r0, [pc, #56]	; (800a614 <MX_USB_HOST_Init+0x44>)
 800a5da:	f7fe fca1 	bl	8008f20 <USBH_Init>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d001      	beq.n	800a5e8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a5e4:	f7f7 fd84 	bl	80020f0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a5e8:	490b      	ldr	r1, [pc, #44]	; (800a618 <MX_USB_HOST_Init+0x48>)
 800a5ea:	480a      	ldr	r0, [pc, #40]	; (800a614 <MX_USB_HOST_Init+0x44>)
 800a5ec:	f7fe fd26 	bl	800903c <USBH_RegisterClass>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a5f6:	f7f7 fd7b 	bl	80020f0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a5fa:	4806      	ldr	r0, [pc, #24]	; (800a614 <MX_USB_HOST_Init+0x44>)
 800a5fc:	f7fe fdaa 	bl	8009154 <USBH_Start>
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d001      	beq.n	800a60a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a606:	f7f7 fd73 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a60a:	bf00      	nop
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	0800a631 	.word	0x0800a631
 800a614:	20000334 	.word	0x20000334
 800a618:	20000018 	.word	0x20000018

0800a61c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a620:	4802      	ldr	r0, [pc, #8]	; (800a62c <MX_USB_HOST_Process+0x10>)
 800a622:	f7fe fda7 	bl	8009174 <USBH_Process>
}
 800a626:	bf00      	nop
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	20000334 	.word	0x20000334

0800a630 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	460b      	mov	r3, r1
 800a63a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a63c:	78fb      	ldrb	r3, [r7, #3]
 800a63e:	3b01      	subs	r3, #1
 800a640:	2b04      	cmp	r3, #4
 800a642:	d819      	bhi.n	800a678 <USBH_UserProcess+0x48>
 800a644:	a201      	add	r2, pc, #4	; (adr r2, 800a64c <USBH_UserProcess+0x1c>)
 800a646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64a:	bf00      	nop
 800a64c:	0800a679 	.word	0x0800a679
 800a650:	0800a669 	.word	0x0800a669
 800a654:	0800a679 	.word	0x0800a679
 800a658:	0800a671 	.word	0x0800a671
 800a65c:	0800a661 	.word	0x0800a661
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a660:	4b09      	ldr	r3, [pc, #36]	; (800a688 <USBH_UserProcess+0x58>)
 800a662:	2203      	movs	r2, #3
 800a664:	701a      	strb	r2, [r3, #0]
  break;
 800a666:	e008      	b.n	800a67a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a668:	4b07      	ldr	r3, [pc, #28]	; (800a688 <USBH_UserProcess+0x58>)
 800a66a:	2202      	movs	r2, #2
 800a66c:	701a      	strb	r2, [r3, #0]
  break;
 800a66e:	e004      	b.n	800a67a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a670:	4b05      	ldr	r3, [pc, #20]	; (800a688 <USBH_UserProcess+0x58>)
 800a672:	2201      	movs	r2, #1
 800a674:	701a      	strb	r2, [r3, #0]
  break;
 800a676:	e000      	b.n	800a67a <USBH_UserProcess+0x4a>

  default:
  break;
 800a678:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a67a:	bf00      	nop
 800a67c:	370c      	adds	r7, #12
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop
 800a688:	200000c8 	.word	0x200000c8

0800a68c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b08a      	sub	sp, #40	; 0x28
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a694:	f107 0314 	add.w	r3, r7, #20
 800a698:	2200      	movs	r2, #0
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	605a      	str	r2, [r3, #4]
 800a69e:	609a      	str	r2, [r3, #8]
 800a6a0:	60da      	str	r2, [r3, #12]
 800a6a2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6ac:	d147      	bne.n	800a73e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	613b      	str	r3, [r7, #16]
 800a6b2:	4b25      	ldr	r3, [pc, #148]	; (800a748 <HAL_HCD_MspInit+0xbc>)
 800a6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b6:	4a24      	ldr	r2, [pc, #144]	; (800a748 <HAL_HCD_MspInit+0xbc>)
 800a6b8:	f043 0301 	orr.w	r3, r3, #1
 800a6bc:	6313      	str	r3, [r2, #48]	; 0x30
 800a6be:	4b22      	ldr	r3, [pc, #136]	; (800a748 <HAL_HCD_MspInit+0xbc>)
 800a6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	613b      	str	r3, [r7, #16]
 800a6c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a6ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a6d8:	f107 0314 	add.w	r3, r7, #20
 800a6dc:	4619      	mov	r1, r3
 800a6de:	481b      	ldr	r0, [pc, #108]	; (800a74c <HAL_HCD_MspInit+0xc0>)
 800a6e0:	f7f8 f9fe 	bl	8002ae0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a6e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a6e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6ea:	2302      	movs	r3, #2
 800a6ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a6f6:	230a      	movs	r3, #10
 800a6f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6fa:	f107 0314 	add.w	r3, r7, #20
 800a6fe:	4619      	mov	r1, r3
 800a700:	4812      	ldr	r0, [pc, #72]	; (800a74c <HAL_HCD_MspInit+0xc0>)
 800a702:	f7f8 f9ed 	bl	8002ae0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a706:	4b10      	ldr	r3, [pc, #64]	; (800a748 <HAL_HCD_MspInit+0xbc>)
 800a708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a70a:	4a0f      	ldr	r2, [pc, #60]	; (800a748 <HAL_HCD_MspInit+0xbc>)
 800a70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a710:	6353      	str	r3, [r2, #52]	; 0x34
 800a712:	2300      	movs	r3, #0
 800a714:	60fb      	str	r3, [r7, #12]
 800a716:	4b0c      	ldr	r3, [pc, #48]	; (800a748 <HAL_HCD_MspInit+0xbc>)
 800a718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a71a:	4a0b      	ldr	r2, [pc, #44]	; (800a748 <HAL_HCD_MspInit+0xbc>)
 800a71c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a720:	6453      	str	r3, [r2, #68]	; 0x44
 800a722:	4b09      	ldr	r3, [pc, #36]	; (800a748 <HAL_HCD_MspInit+0xbc>)
 800a724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a72a:	60fb      	str	r3, [r7, #12]
 800a72c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a72e:	2200      	movs	r2, #0
 800a730:	2100      	movs	r1, #0
 800a732:	2043      	movs	r0, #67	; 0x43
 800a734:	f7f8 f99d 	bl	8002a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a738:	2043      	movs	r0, #67	; 0x43
 800a73a:	f7f8 f9b6 	bl	8002aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a73e:	bf00      	nop
 800a740:	3728      	adds	r7, #40	; 0x28
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	40023800 	.word	0x40023800
 800a74c:	40020000 	.word	0x40020000

0800a750 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a75e:	4618      	mov	r0, r3
 800a760:	f7ff f8db 	bl	800991a <USBH_LL_IncTimer>
}
 800a764:	bf00      	nop
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7ff f913 	bl	80099a6 <USBH_LL_Connect>
}
 800a780:	bf00      	nop
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a796:	4618      	mov	r0, r3
 800a798:	f7ff f91c 	bl	80099d4 <USBH_LL_Disconnect>
}
 800a79c:	bf00      	nop
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	70fb      	strb	r3, [r7, #3]
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a7b4:	bf00      	nop
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7ff f8cd 	bl	800996e <USBH_LL_PortEnabled>
}
 800a7d4:	bf00      	nop
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7ff f8cd 	bl	800998a <USBH_LL_PortDisabled>
}
 800a7f0:	bf00      	nop
 800a7f2:	3708      	adds	r7, #8
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a806:	2b01      	cmp	r3, #1
 800a808:	d12a      	bne.n	800a860 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a80a:	4a18      	ldr	r2, [pc, #96]	; (800a86c <USBH_LL_Init+0x74>)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a15      	ldr	r2, [pc, #84]	; (800a86c <USBH_LL_Init+0x74>)
 800a816:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a81a:	4b14      	ldr	r3, [pc, #80]	; (800a86c <USBH_LL_Init+0x74>)
 800a81c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a820:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a822:	4b12      	ldr	r3, [pc, #72]	; (800a86c <USBH_LL_Init+0x74>)
 800a824:	2208      	movs	r2, #8
 800a826:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a828:	4b10      	ldr	r3, [pc, #64]	; (800a86c <USBH_LL_Init+0x74>)
 800a82a:	2201      	movs	r2, #1
 800a82c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a82e:	4b0f      	ldr	r3, [pc, #60]	; (800a86c <USBH_LL_Init+0x74>)
 800a830:	2200      	movs	r2, #0
 800a832:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a834:	4b0d      	ldr	r3, [pc, #52]	; (800a86c <USBH_LL_Init+0x74>)
 800a836:	2202      	movs	r2, #2
 800a838:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a83a:	4b0c      	ldr	r3, [pc, #48]	; (800a86c <USBH_LL_Init+0x74>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a840:	480a      	ldr	r0, [pc, #40]	; (800a86c <USBH_LL_Init+0x74>)
 800a842:	f7f8 fb34 	bl	8002eae <HAL_HCD_Init>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d001      	beq.n	800a850 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a84c:	f7f7 fc50 	bl	80020f0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a850:	4806      	ldr	r0, [pc, #24]	; (800a86c <USBH_LL_Init+0x74>)
 800a852:	f7f8 ff11 	bl	8003678 <HAL_HCD_GetCurrentFrame>
 800a856:	4603      	mov	r3, r0
 800a858:	4619      	mov	r1, r3
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7ff f84e 	bl	80098fc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	2000070c 	.word	0x2000070c

0800a870 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a87c:	2300      	movs	r3, #0
 800a87e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a886:	4618      	mov	r0, r3
 800a888:	f7f8 fe80 	bl	800358c <HAL_HCD_Start>
 800a88c:	4603      	mov	r3, r0
 800a88e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a890:	7bfb      	ldrb	r3, [r7, #15]
 800a892:	4618      	mov	r0, r3
 800a894:	f000 f95c 	bl	800ab50 <USBH_Get_USB_Status>
 800a898:	4603      	mov	r3, r0
 800a89a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a89c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b084      	sub	sp, #16
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7f8 fe88 	bl	80035d2 <HAL_HCD_Stop>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a8c6:	7bfb      	ldrb	r3, [r7, #15]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 f941 	bl	800ab50 <USBH_Get_USB_Status>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7f8 fed0 	bl	8003694 <HAL_HCD_GetCurrentSpeed>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b02      	cmp	r3, #2
 800a8f8:	d00c      	beq.n	800a914 <USBH_LL_GetSpeed+0x38>
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d80d      	bhi.n	800a91a <USBH_LL_GetSpeed+0x3e>
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d002      	beq.n	800a908 <USBH_LL_GetSpeed+0x2c>
 800a902:	2b01      	cmp	r3, #1
 800a904:	d003      	beq.n	800a90e <USBH_LL_GetSpeed+0x32>
 800a906:	e008      	b.n	800a91a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a908:	2300      	movs	r3, #0
 800a90a:	73fb      	strb	r3, [r7, #15]
    break;
 800a90c:	e008      	b.n	800a920 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a90e:	2301      	movs	r3, #1
 800a910:	73fb      	strb	r3, [r7, #15]
    break;
 800a912:	e005      	b.n	800a920 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a914:	2302      	movs	r3, #2
 800a916:	73fb      	strb	r3, [r7, #15]
    break;
 800a918:	e002      	b.n	800a920 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a91a:	2301      	movs	r3, #1
 800a91c:	73fb      	strb	r3, [r7, #15]
    break;
 800a91e:	bf00      	nop
  }
  return  speed;
 800a920:	7bfb      	ldrb	r3, [r7, #15]
}
 800a922:	4618      	mov	r0, r3
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b084      	sub	sp, #16
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a940:	4618      	mov	r0, r3
 800a942:	f7f8 fe63 	bl	800360c <HAL_HCD_ResetPort>
 800a946:	4603      	mov	r3, r0
 800a948:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a94a:	7bfb      	ldrb	r3, [r7, #15]
 800a94c:	4618      	mov	r0, r3
 800a94e:	f000 f8ff 	bl	800ab50 <USBH_Get_USB_Status>
 800a952:	4603      	mov	r3, r0
 800a954:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a956:	7bbb      	ldrb	r3, [r7, #14]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	460b      	mov	r3, r1
 800a96a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a972:	78fa      	ldrb	r2, [r7, #3]
 800a974:	4611      	mov	r1, r2
 800a976:	4618      	mov	r0, r3
 800a978:	f7f8 fe6a 	bl	8003650 <HAL_HCD_HC_GetXferCount>
 800a97c:	4603      	mov	r3, r0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3708      	adds	r7, #8
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a986:	b590      	push	{r4, r7, lr}
 800a988:	b089      	sub	sp, #36	; 0x24
 800a98a:	af04      	add	r7, sp, #16
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	4608      	mov	r0, r1
 800a990:	4611      	mov	r1, r2
 800a992:	461a      	mov	r2, r3
 800a994:	4603      	mov	r3, r0
 800a996:	70fb      	strb	r3, [r7, #3]
 800a998:	460b      	mov	r3, r1
 800a99a:	70bb      	strb	r3, [r7, #2]
 800a99c:	4613      	mov	r3, r2
 800a99e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a9ae:	787c      	ldrb	r4, [r7, #1]
 800a9b0:	78ba      	ldrb	r2, [r7, #2]
 800a9b2:	78f9      	ldrb	r1, [r7, #3]
 800a9b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a9b6:	9302      	str	r3, [sp, #8]
 800a9b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a9bc:	9301      	str	r3, [sp, #4]
 800a9be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	4623      	mov	r3, r4
 800a9c6:	f7f8 fad4 	bl	8002f72 <HAL_HCD_HC_Init>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a9ce:	7bfb      	ldrb	r3, [r7, #15]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f000 f8bd 	bl	800ab50 <USBH_Get_USB_Status>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd90      	pop	{r4, r7, pc}

0800a9e4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a9fe:	78fa      	ldrb	r2, [r7, #3]
 800aa00:	4611      	mov	r1, r2
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7f8 fb44 	bl	8003090 <HAL_HCD_HC_Halt>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 f89e 	bl	800ab50 <USBH_Get_USB_Status>
 800aa14:	4603      	mov	r3, r0
 800aa16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa18:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800aa22:	b590      	push	{r4, r7, lr}
 800aa24:	b089      	sub	sp, #36	; 0x24
 800aa26:	af04      	add	r7, sp, #16
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	4608      	mov	r0, r1
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	461a      	mov	r2, r3
 800aa30:	4603      	mov	r3, r0
 800aa32:	70fb      	strb	r3, [r7, #3]
 800aa34:	460b      	mov	r3, r1
 800aa36:	70bb      	strb	r3, [r7, #2]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa40:	2300      	movs	r3, #0
 800aa42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aa4a:	787c      	ldrb	r4, [r7, #1]
 800aa4c:	78ba      	ldrb	r2, [r7, #2]
 800aa4e:	78f9      	ldrb	r1, [r7, #3]
 800aa50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aa54:	9303      	str	r3, [sp, #12]
 800aa56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa58:	9302      	str	r3, [sp, #8]
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	9301      	str	r3, [sp, #4]
 800aa5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa62:	9300      	str	r3, [sp, #0]
 800aa64:	4623      	mov	r3, r4
 800aa66:	f7f8 fb37 	bl	80030d8 <HAL_HCD_HC_SubmitRequest>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aa6e:	7bfb      	ldrb	r3, [r7, #15]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f000 f86d 	bl	800ab50 <USBH_Get_USB_Status>
 800aa76:	4603      	mov	r3, r0
 800aa78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd90      	pop	{r4, r7, pc}

0800aa84 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa96:	78fa      	ldrb	r2, [r7, #3]
 800aa98:	4611      	mov	r1, r2
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7f8 fdc4 	bl	8003628 <HAL_HCD_HC_GetURBState>
 800aaa0:	4603      	mov	r3, r0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b082      	sub	sp, #8
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	460b      	mov	r3, r1
 800aab4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d103      	bne.n	800aac8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800aac0:	78fb      	ldrb	r3, [r7, #3]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f000 f870 	bl	800aba8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800aac8:	20c8      	movs	r0, #200	; 0xc8
 800aaca:	f7f7 fed3 	bl	8002874 <HAL_Delay>
  return USBH_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800aad8:	b480      	push	{r7}
 800aada:	b085      	sub	sp, #20
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	460b      	mov	r3, r1
 800aae2:	70fb      	strb	r3, [r7, #3]
 800aae4:	4613      	mov	r3, r2
 800aae6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aaee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800aaf0:	78fb      	ldrb	r3, [r7, #3]
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	212c      	movs	r1, #44	; 0x2c
 800aaf6:	fb01 f303 	mul.w	r3, r1, r3
 800aafa:	4413      	add	r3, r2
 800aafc:	333b      	adds	r3, #59	; 0x3b
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d009      	beq.n	800ab18 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ab04:	78fb      	ldrb	r3, [r7, #3]
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	212c      	movs	r1, #44	; 0x2c
 800ab0a:	fb01 f303 	mul.w	r3, r1, r3
 800ab0e:	4413      	add	r3, r2
 800ab10:	3354      	adds	r3, #84	; 0x54
 800ab12:	78ba      	ldrb	r2, [r7, #2]
 800ab14:	701a      	strb	r2, [r3, #0]
 800ab16:	e008      	b.n	800ab2a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ab18:	78fb      	ldrb	r3, [r7, #3]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	212c      	movs	r1, #44	; 0x2c
 800ab1e:	fb01 f303 	mul.w	r3, r1, r3
 800ab22:	4413      	add	r3, r2
 800ab24:	3355      	adds	r3, #85	; 0x55
 800ab26:	78ba      	ldrb	r2, [r7, #2]
 800ab28:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f7f7 fe97 	bl	8002874 <HAL_Delay>
}
 800ab46:	bf00      	nop
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
	...

0800ab50 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	4603      	mov	r3, r0
 800ab58:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab5e:	79fb      	ldrb	r3, [r7, #7]
 800ab60:	2b03      	cmp	r3, #3
 800ab62:	d817      	bhi.n	800ab94 <USBH_Get_USB_Status+0x44>
 800ab64:	a201      	add	r2, pc, #4	; (adr r2, 800ab6c <USBH_Get_USB_Status+0x1c>)
 800ab66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6a:	bf00      	nop
 800ab6c:	0800ab7d 	.word	0x0800ab7d
 800ab70:	0800ab83 	.word	0x0800ab83
 800ab74:	0800ab89 	.word	0x0800ab89
 800ab78:	0800ab8f 	.word	0x0800ab8f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab80:	e00b      	b.n	800ab9a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ab82:	2302      	movs	r3, #2
 800ab84:	73fb      	strb	r3, [r7, #15]
    break;
 800ab86:	e008      	b.n	800ab9a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab8c:	e005      	b.n	800ab9a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ab8e:	2302      	movs	r3, #2
 800ab90:	73fb      	strb	r3, [r7, #15]
    break;
 800ab92:	e002      	b.n	800ab9a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ab94:	2302      	movs	r3, #2
 800ab96:	73fb      	strb	r3, [r7, #15]
    break;
 800ab98:	bf00      	nop
  }
  return usb_status;
 800ab9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	4603      	mov	r3, r0
 800abb0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800abb2:	79fb      	ldrb	r3, [r7, #7]
 800abb4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d102      	bne.n	800abc2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800abbc:	2301      	movs	r3, #1
 800abbe:	73fb      	strb	r3, [r7, #15]
 800abc0:	e001      	b.n	800abc6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800abc2:	2300      	movs	r3, #0
 800abc4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800abc6:	7bfb      	ldrb	r3, [r7, #15]
 800abc8:	461a      	mov	r2, r3
 800abca:	2101      	movs	r1, #1
 800abcc:	4803      	ldr	r0, [pc, #12]	; (800abdc <MX_DriverVbusFS+0x34>)
 800abce:	f7f8 f93b 	bl	8002e48 <HAL_GPIO_WritePin>
}
 800abd2:	bf00      	nop
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	40020800 	.word	0x40020800

0800abe0 <__errno>:
 800abe0:	4b01      	ldr	r3, [pc, #4]	; (800abe8 <__errno+0x8>)
 800abe2:	6818      	ldr	r0, [r3, #0]
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	20000038 	.word	0x20000038

0800abec <__libc_init_array>:
 800abec:	b570      	push	{r4, r5, r6, lr}
 800abee:	4d0d      	ldr	r5, [pc, #52]	; (800ac24 <__libc_init_array+0x38>)
 800abf0:	4c0d      	ldr	r4, [pc, #52]	; (800ac28 <__libc_init_array+0x3c>)
 800abf2:	1b64      	subs	r4, r4, r5
 800abf4:	10a4      	asrs	r4, r4, #2
 800abf6:	2600      	movs	r6, #0
 800abf8:	42a6      	cmp	r6, r4
 800abfa:	d109      	bne.n	800ac10 <__libc_init_array+0x24>
 800abfc:	4d0b      	ldr	r5, [pc, #44]	; (800ac2c <__libc_init_array+0x40>)
 800abfe:	4c0c      	ldr	r4, [pc, #48]	; (800ac30 <__libc_init_array+0x44>)
 800ac00:	f000 f90c 	bl	800ae1c <_init>
 800ac04:	1b64      	subs	r4, r4, r5
 800ac06:	10a4      	asrs	r4, r4, #2
 800ac08:	2600      	movs	r6, #0
 800ac0a:	42a6      	cmp	r6, r4
 800ac0c:	d105      	bne.n	800ac1a <__libc_init_array+0x2e>
 800ac0e:	bd70      	pop	{r4, r5, r6, pc}
 800ac10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac14:	4798      	blx	r3
 800ac16:	3601      	adds	r6, #1
 800ac18:	e7ee      	b.n	800abf8 <__libc_init_array+0xc>
 800ac1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac1e:	4798      	blx	r3
 800ac20:	3601      	adds	r6, #1
 800ac22:	e7f2      	b.n	800ac0a <__libc_init_array+0x1e>
 800ac24:	0800b2d0 	.word	0x0800b2d0
 800ac28:	0800b2d0 	.word	0x0800b2d0
 800ac2c:	0800b2d0 	.word	0x0800b2d0
 800ac30:	0800b2d4 	.word	0x0800b2d4

0800ac34 <malloc>:
 800ac34:	4b02      	ldr	r3, [pc, #8]	; (800ac40 <malloc+0xc>)
 800ac36:	4601      	mov	r1, r0
 800ac38:	6818      	ldr	r0, [r3, #0]
 800ac3a:	f000 b863 	b.w	800ad04 <_malloc_r>
 800ac3e:	bf00      	nop
 800ac40:	20000038 	.word	0x20000038

0800ac44 <free>:
 800ac44:	4b02      	ldr	r3, [pc, #8]	; (800ac50 <free+0xc>)
 800ac46:	4601      	mov	r1, r0
 800ac48:	6818      	ldr	r0, [r3, #0]
 800ac4a:	f000 b80b 	b.w	800ac64 <_free_r>
 800ac4e:	bf00      	nop
 800ac50:	20000038 	.word	0x20000038

0800ac54 <memset>:
 800ac54:	4402      	add	r2, r0
 800ac56:	4603      	mov	r3, r0
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d100      	bne.n	800ac5e <memset+0xa>
 800ac5c:	4770      	bx	lr
 800ac5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac62:	e7f9      	b.n	800ac58 <memset+0x4>

0800ac64 <_free_r>:
 800ac64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac66:	2900      	cmp	r1, #0
 800ac68:	d048      	beq.n	800acfc <_free_r+0x98>
 800ac6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac6e:	9001      	str	r0, [sp, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f1a1 0404 	sub.w	r4, r1, #4
 800ac76:	bfb8      	it	lt
 800ac78:	18e4      	addlt	r4, r4, r3
 800ac7a:	f000 f8c1 	bl	800ae00 <__malloc_lock>
 800ac7e:	4a20      	ldr	r2, [pc, #128]	; (800ad00 <_free_r+0x9c>)
 800ac80:	9801      	ldr	r0, [sp, #4]
 800ac82:	6813      	ldr	r3, [r2, #0]
 800ac84:	4615      	mov	r5, r2
 800ac86:	b933      	cbnz	r3, 800ac96 <_free_r+0x32>
 800ac88:	6063      	str	r3, [r4, #4]
 800ac8a:	6014      	str	r4, [r2, #0]
 800ac8c:	b003      	add	sp, #12
 800ac8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac92:	f000 b8bb 	b.w	800ae0c <__malloc_unlock>
 800ac96:	42a3      	cmp	r3, r4
 800ac98:	d90b      	bls.n	800acb2 <_free_r+0x4e>
 800ac9a:	6821      	ldr	r1, [r4, #0]
 800ac9c:	1862      	adds	r2, r4, r1
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	bf04      	itt	eq
 800aca2:	681a      	ldreq	r2, [r3, #0]
 800aca4:	685b      	ldreq	r3, [r3, #4]
 800aca6:	6063      	str	r3, [r4, #4]
 800aca8:	bf04      	itt	eq
 800acaa:	1852      	addeq	r2, r2, r1
 800acac:	6022      	streq	r2, [r4, #0]
 800acae:	602c      	str	r4, [r5, #0]
 800acb0:	e7ec      	b.n	800ac8c <_free_r+0x28>
 800acb2:	461a      	mov	r2, r3
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	b10b      	cbz	r3, 800acbc <_free_r+0x58>
 800acb8:	42a3      	cmp	r3, r4
 800acba:	d9fa      	bls.n	800acb2 <_free_r+0x4e>
 800acbc:	6811      	ldr	r1, [r2, #0]
 800acbe:	1855      	adds	r5, r2, r1
 800acc0:	42a5      	cmp	r5, r4
 800acc2:	d10b      	bne.n	800acdc <_free_r+0x78>
 800acc4:	6824      	ldr	r4, [r4, #0]
 800acc6:	4421      	add	r1, r4
 800acc8:	1854      	adds	r4, r2, r1
 800acca:	42a3      	cmp	r3, r4
 800accc:	6011      	str	r1, [r2, #0]
 800acce:	d1dd      	bne.n	800ac8c <_free_r+0x28>
 800acd0:	681c      	ldr	r4, [r3, #0]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	6053      	str	r3, [r2, #4]
 800acd6:	4421      	add	r1, r4
 800acd8:	6011      	str	r1, [r2, #0]
 800acda:	e7d7      	b.n	800ac8c <_free_r+0x28>
 800acdc:	d902      	bls.n	800ace4 <_free_r+0x80>
 800acde:	230c      	movs	r3, #12
 800ace0:	6003      	str	r3, [r0, #0]
 800ace2:	e7d3      	b.n	800ac8c <_free_r+0x28>
 800ace4:	6825      	ldr	r5, [r4, #0]
 800ace6:	1961      	adds	r1, r4, r5
 800ace8:	428b      	cmp	r3, r1
 800acea:	bf04      	itt	eq
 800acec:	6819      	ldreq	r1, [r3, #0]
 800acee:	685b      	ldreq	r3, [r3, #4]
 800acf0:	6063      	str	r3, [r4, #4]
 800acf2:	bf04      	itt	eq
 800acf4:	1949      	addeq	r1, r1, r5
 800acf6:	6021      	streq	r1, [r4, #0]
 800acf8:	6054      	str	r4, [r2, #4]
 800acfa:	e7c7      	b.n	800ac8c <_free_r+0x28>
 800acfc:	b003      	add	sp, #12
 800acfe:	bd30      	pop	{r4, r5, pc}
 800ad00:	200000cc 	.word	0x200000cc

0800ad04 <_malloc_r>:
 800ad04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad06:	1ccd      	adds	r5, r1, #3
 800ad08:	f025 0503 	bic.w	r5, r5, #3
 800ad0c:	3508      	adds	r5, #8
 800ad0e:	2d0c      	cmp	r5, #12
 800ad10:	bf38      	it	cc
 800ad12:	250c      	movcc	r5, #12
 800ad14:	2d00      	cmp	r5, #0
 800ad16:	4606      	mov	r6, r0
 800ad18:	db01      	blt.n	800ad1e <_malloc_r+0x1a>
 800ad1a:	42a9      	cmp	r1, r5
 800ad1c:	d903      	bls.n	800ad26 <_malloc_r+0x22>
 800ad1e:	230c      	movs	r3, #12
 800ad20:	6033      	str	r3, [r6, #0]
 800ad22:	2000      	movs	r0, #0
 800ad24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad26:	f000 f86b 	bl	800ae00 <__malloc_lock>
 800ad2a:	4921      	ldr	r1, [pc, #132]	; (800adb0 <_malloc_r+0xac>)
 800ad2c:	680a      	ldr	r2, [r1, #0]
 800ad2e:	4614      	mov	r4, r2
 800ad30:	b99c      	cbnz	r4, 800ad5a <_malloc_r+0x56>
 800ad32:	4f20      	ldr	r7, [pc, #128]	; (800adb4 <_malloc_r+0xb0>)
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	b923      	cbnz	r3, 800ad42 <_malloc_r+0x3e>
 800ad38:	4621      	mov	r1, r4
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f000 f83c 	bl	800adb8 <_sbrk_r>
 800ad40:	6038      	str	r0, [r7, #0]
 800ad42:	4629      	mov	r1, r5
 800ad44:	4630      	mov	r0, r6
 800ad46:	f000 f837 	bl	800adb8 <_sbrk_r>
 800ad4a:	1c43      	adds	r3, r0, #1
 800ad4c:	d123      	bne.n	800ad96 <_malloc_r+0x92>
 800ad4e:	230c      	movs	r3, #12
 800ad50:	6033      	str	r3, [r6, #0]
 800ad52:	4630      	mov	r0, r6
 800ad54:	f000 f85a 	bl	800ae0c <__malloc_unlock>
 800ad58:	e7e3      	b.n	800ad22 <_malloc_r+0x1e>
 800ad5a:	6823      	ldr	r3, [r4, #0]
 800ad5c:	1b5b      	subs	r3, r3, r5
 800ad5e:	d417      	bmi.n	800ad90 <_malloc_r+0x8c>
 800ad60:	2b0b      	cmp	r3, #11
 800ad62:	d903      	bls.n	800ad6c <_malloc_r+0x68>
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	441c      	add	r4, r3
 800ad68:	6025      	str	r5, [r4, #0]
 800ad6a:	e004      	b.n	800ad76 <_malloc_r+0x72>
 800ad6c:	6863      	ldr	r3, [r4, #4]
 800ad6e:	42a2      	cmp	r2, r4
 800ad70:	bf0c      	ite	eq
 800ad72:	600b      	streq	r3, [r1, #0]
 800ad74:	6053      	strne	r3, [r2, #4]
 800ad76:	4630      	mov	r0, r6
 800ad78:	f000 f848 	bl	800ae0c <__malloc_unlock>
 800ad7c:	f104 000b 	add.w	r0, r4, #11
 800ad80:	1d23      	adds	r3, r4, #4
 800ad82:	f020 0007 	bic.w	r0, r0, #7
 800ad86:	1ac2      	subs	r2, r0, r3
 800ad88:	d0cc      	beq.n	800ad24 <_malloc_r+0x20>
 800ad8a:	1a1b      	subs	r3, r3, r0
 800ad8c:	50a3      	str	r3, [r4, r2]
 800ad8e:	e7c9      	b.n	800ad24 <_malloc_r+0x20>
 800ad90:	4622      	mov	r2, r4
 800ad92:	6864      	ldr	r4, [r4, #4]
 800ad94:	e7cc      	b.n	800ad30 <_malloc_r+0x2c>
 800ad96:	1cc4      	adds	r4, r0, #3
 800ad98:	f024 0403 	bic.w	r4, r4, #3
 800ad9c:	42a0      	cmp	r0, r4
 800ad9e:	d0e3      	beq.n	800ad68 <_malloc_r+0x64>
 800ada0:	1a21      	subs	r1, r4, r0
 800ada2:	4630      	mov	r0, r6
 800ada4:	f000 f808 	bl	800adb8 <_sbrk_r>
 800ada8:	3001      	adds	r0, #1
 800adaa:	d1dd      	bne.n	800ad68 <_malloc_r+0x64>
 800adac:	e7cf      	b.n	800ad4e <_malloc_r+0x4a>
 800adae:	bf00      	nop
 800adb0:	200000cc 	.word	0x200000cc
 800adb4:	200000d0 	.word	0x200000d0

0800adb8 <_sbrk_r>:
 800adb8:	b538      	push	{r3, r4, r5, lr}
 800adba:	4d06      	ldr	r5, [pc, #24]	; (800add4 <_sbrk_r+0x1c>)
 800adbc:	2300      	movs	r3, #0
 800adbe:	4604      	mov	r4, r0
 800adc0:	4608      	mov	r0, r1
 800adc2:	602b      	str	r3, [r5, #0]
 800adc4:	f7f7 fc72 	bl	80026ac <_sbrk>
 800adc8:	1c43      	adds	r3, r0, #1
 800adca:	d102      	bne.n	800add2 <_sbrk_r+0x1a>
 800adcc:	682b      	ldr	r3, [r5, #0]
 800adce:	b103      	cbz	r3, 800add2 <_sbrk_r+0x1a>
 800add0:	6023      	str	r3, [r4, #0]
 800add2:	bd38      	pop	{r3, r4, r5, pc}
 800add4:	20000a10 	.word	0x20000a10

0800add8 <strncat>:
 800add8:	b530      	push	{r4, r5, lr}
 800adda:	4604      	mov	r4, r0
 800addc:	7825      	ldrb	r5, [r4, #0]
 800adde:	4623      	mov	r3, r4
 800ade0:	3401      	adds	r4, #1
 800ade2:	2d00      	cmp	r5, #0
 800ade4:	d1fa      	bne.n	800addc <strncat+0x4>
 800ade6:	3a01      	subs	r2, #1
 800ade8:	d304      	bcc.n	800adf4 <strncat+0x1c>
 800adea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adee:	f803 4b01 	strb.w	r4, [r3], #1
 800adf2:	b904      	cbnz	r4, 800adf6 <strncat+0x1e>
 800adf4:	bd30      	pop	{r4, r5, pc}
 800adf6:	2a00      	cmp	r2, #0
 800adf8:	d1f5      	bne.n	800ade6 <strncat+0xe>
 800adfa:	701a      	strb	r2, [r3, #0]
 800adfc:	e7f3      	b.n	800ade6 <strncat+0xe>
	...

0800ae00 <__malloc_lock>:
 800ae00:	4801      	ldr	r0, [pc, #4]	; (800ae08 <__malloc_lock+0x8>)
 800ae02:	f000 b809 	b.w	800ae18 <__retarget_lock_acquire_recursive>
 800ae06:	bf00      	nop
 800ae08:	20000a18 	.word	0x20000a18

0800ae0c <__malloc_unlock>:
 800ae0c:	4801      	ldr	r0, [pc, #4]	; (800ae14 <__malloc_unlock+0x8>)
 800ae0e:	f000 b804 	b.w	800ae1a <__retarget_lock_release_recursive>
 800ae12:	bf00      	nop
 800ae14:	20000a18 	.word	0x20000a18

0800ae18 <__retarget_lock_acquire_recursive>:
 800ae18:	4770      	bx	lr

0800ae1a <__retarget_lock_release_recursive>:
 800ae1a:	4770      	bx	lr

0800ae1c <_init>:
 800ae1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1e:	bf00      	nop
 800ae20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae22:	bc08      	pop	{r3}
 800ae24:	469e      	mov	lr, r3
 800ae26:	4770      	bx	lr

0800ae28 <_fini>:
 800ae28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2a:	bf00      	nop
 800ae2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae2e:	bc08      	pop	{r3}
 800ae30:	469e      	mov	lr, r3
 800ae32:	4770      	bx	lr
