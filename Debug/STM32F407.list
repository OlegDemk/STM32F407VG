
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08009e74  08009e74  00019e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e88  08009e88  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08009e88  08009e88  00019e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e90  08009e90  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e90  08009e90  00019e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e94  08009e94  00019e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08009e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  20000098  08009f30  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000950  08009f30  00020950  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f44b  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046fe  00000000  00000000  0003f513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  00043c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  000451c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025191  00000000  00000000  00046580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e4a6  00000000  00000000  0006b711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2379  00000000  00000000  00089bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015bf30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b8c  00000000  00000000  0015bf84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009e5c 	.word	0x08009e5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08009e5c 	.word	0x08009e5c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b08b      	sub	sp, #44	; 0x2c
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4604      	mov	r4, r0
 80004c8:	4608      	mov	r0, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	461a      	mov	r2, r3
 80004ce:	4623      	mov	r3, r4
 80004d0:	80fb      	strh	r3, [r7, #6]
 80004d2:	4603      	mov	r3, r0
 80004d4:	80bb      	strh	r3, [r7, #4]
 80004d6:	460b      	mov	r3, r1
 80004d8:	807b      	strh	r3, [r7, #2]
 80004da:	4613      	mov	r3, r2
 80004dc:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80004de:	887b      	ldrh	r3, [r7, #2]
 80004e0:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80004e6:	887b      	ldrh	r3, [r7, #2]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	f1c3 0301 	rsb	r3, r3, #1
 80004ee:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80004f8:	e061      	b.n	80005be <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80004fa:	88fa      	ldrh	r2, [r7, #6]
 80004fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	613b      	str	r3, [r7, #16]
 8000502:	e018      	b.n	8000536 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	b298      	uxth	r0, r3
 8000508:	6a3b      	ldr	r3, [r7, #32]
 800050a:	b29a      	uxth	r2, r3
 800050c:	88bb      	ldrh	r3, [r7, #4]
 800050e:	4413      	add	r3, r2
 8000510:	b29b      	uxth	r3, r3
 8000512:	883a      	ldrh	r2, [r7, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	f000 fb47 	bl	8000ba8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	b298      	uxth	r0, r3
 800051e:	6a3b      	ldr	r3, [r7, #32]
 8000520:	b29b      	uxth	r3, r3
 8000522:	88ba      	ldrh	r2, [r7, #4]
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	b29b      	uxth	r3, r3
 8000528:	883a      	ldrh	r2, [r7, #0]
 800052a:	4619      	mov	r1, r3
 800052c:	f000 fb3c 	bl	8000ba8 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	3301      	adds	r3, #1
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	88fa      	ldrh	r2, [r7, #6]
 8000538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053a:	4413      	add	r3, r2
 800053c:	693a      	ldr	r2, [r7, #16]
 800053e:	429a      	cmp	r2, r3
 8000540:	dde0      	ble.n	8000504 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8000542:	88fa      	ldrh	r2, [r7, #6]
 8000544:	6a3b      	ldr	r3, [r7, #32]
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e018      	b.n	800057e <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	b298      	uxth	r0, r3
 8000550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000552:	b29a      	uxth	r2, r3
 8000554:	88bb      	ldrh	r3, [r7, #4]
 8000556:	4413      	add	r3, r2
 8000558:	b29b      	uxth	r3, r3
 800055a:	883a      	ldrh	r2, [r7, #0]
 800055c:	4619      	mov	r1, r3
 800055e:	f000 fb23 	bl	8000ba8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	b298      	uxth	r0, r3
 8000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000568:	b29b      	uxth	r3, r3
 800056a:	88ba      	ldrh	r2, [r7, #4]
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	b29b      	uxth	r3, r3
 8000570:	883a      	ldrh	r2, [r7, #0]
 8000572:	4619      	mov	r1, r3
 8000574:	f000 fb18 	bl	8000ba8 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3301      	adds	r3, #1
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	88fa      	ldrh	r2, [r7, #6]
 8000580:	6a3b      	ldr	r3, [r7, #32]
 8000582:	4413      	add	r3, r2
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	429a      	cmp	r2, r3
 8000588:	dde0      	ble.n	800054c <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800058a:	6a3b      	ldr	r3, [r7, #32]
 800058c:	3301      	adds	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8000590:	697a      	ldr	r2, [r7, #20]
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	4413      	add	r3, r2
 8000596:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	3302      	adds	r3, #2
 800059c:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	005a      	lsls	r2, r3, #1
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	4413      	add	r3, r2
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	dd09      	ble.n	80005be <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80005aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ac:	3b01      	subs	r3, #1
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	4413      	add	r3, r2
 80005b6:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	3302      	adds	r3, #2
 80005bc:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80005be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005c0:	6a3b      	ldr	r3, [r7, #32]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	da99      	bge.n	80004fa <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80005c6:	bf00      	nop
 80005c8:	bf00      	nop
 80005ca:	372c      	adds	r7, #44	; 0x2c
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd90      	pop	{r4, r7, pc}

080005d0 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80005d4:	2200      	movs	r2, #0
 80005d6:	2110      	movs	r1, #16
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <ILI9341_SPI_Init+0x14>)
 80005da:	f001 ff79 	bl	80024d0 <HAL_GPIO_WritePin>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80005f2:	1df9      	adds	r1, r7, #7
 80005f4:	2301      	movs	r3, #1
 80005f6:	2201      	movs	r2, #1
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <ILI9341_SPI_Send+0x20>)
 80005fa:	f005 f838 	bl	800566e <HAL_SPI_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200000c8 	.word	0x200000c8

0800060c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2110      	movs	r1, #16
 800061a:	480a      	ldr	r0, [pc, #40]	; (8000644 <ILI9341_Write_Command+0x38>)
 800061c:	f001 ff58 	bl	80024d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000620:	2200      	movs	r2, #0
 8000622:	2140      	movs	r1, #64	; 0x40
 8000624:	4807      	ldr	r0, [pc, #28]	; (8000644 <ILI9341_Write_Command+0x38>)
 8000626:	f001 ff53 	bl	80024d0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffdb 	bl	80005e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000632:	2201      	movs	r2, #1
 8000634:	2110      	movs	r1, #16
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <ILI9341_Write_Command+0x38>)
 8000638:	f001 ff4a 	bl	80024d0 <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000

08000648 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000652:	2201      	movs	r2, #1
 8000654:	2140      	movs	r1, #64	; 0x40
 8000656:	480a      	ldr	r0, [pc, #40]	; (8000680 <ILI9341_Write_Data+0x38>)
 8000658:	f001 ff3a 	bl	80024d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2110      	movs	r1, #16
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <ILI9341_Write_Data+0x38>)
 8000662:	f001 ff35 	bl	80024d0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffbd 	bl	80005e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2110      	movs	r1, #16
 8000672:	4803      	ldr	r0, [pc, #12]	; (8000680 <ILI9341_Write_Data+0x38>)
 8000674:	f001 ff2c 	bl	80024d0 <HAL_GPIO_WritePin>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000

08000684 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4604      	mov	r4, r0
 800068c:	4608      	mov	r0, r1
 800068e:	4611      	mov	r1, r2
 8000690:	461a      	mov	r2, r3
 8000692:	4623      	mov	r3, r4
 8000694:	80fb      	strh	r3, [r7, #6]
 8000696:	4603      	mov	r3, r0
 8000698:	80bb      	strh	r3, [r7, #4]
 800069a:	460b      	mov	r3, r1
 800069c:	807b      	strh	r3, [r7, #2]
 800069e:	4613      	mov	r3, r2
 80006a0:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80006a2:	202a      	movs	r0, #42	; 0x2a
 80006a4:	f7ff ffb2 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	0a1b      	lsrs	r3, r3, #8
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffc9 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffc4 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80006c0:	887b      	ldrh	r3, [r7, #2]
 80006c2:	0a1b      	lsrs	r3, r3, #8
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ffbd 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80006ce:	887b      	ldrh	r3, [r7, #2]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ffb8 	bl	8000648 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80006d8:	202b      	movs	r0, #43	; 0x2b
 80006da:	f7ff ff97 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80006de:	88bb      	ldrh	r3, [r7, #4]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ffae 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ffa9 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80006f6:	883b      	ldrh	r3, [r7, #0]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ffa2 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000704:	883b      	ldrh	r3, [r7, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff9d 	bl	8000648 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800070e:	202c      	movs	r0, #44	; 0x2c
 8000710:	f7ff ff7c 	bl	800060c <ILI9341_Write_Command>
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bd90      	pop	{r4, r7, pc}

0800071c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2120      	movs	r1, #32
 8000724:	480a      	ldr	r0, [pc, #40]	; (8000750 <ILI9341_Reset+0x34>)
 8000726:	f001 fed3 	bl	80024d0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800072a:	20c8      	movs	r0, #200	; 0xc8
 800072c:	f001 fbe6 	bl	8001efc <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2110      	movs	r1, #16
 8000734:	4806      	ldr	r0, [pc, #24]	; (8000750 <ILI9341_Reset+0x34>)
 8000736:	f001 fecb 	bl	80024d0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800073a:	20c8      	movs	r0, #200	; 0xc8
 800073c:	f001 fbde 	bl	8001efc <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000740:	2201      	movs	r2, #1
 8000742:	2120      	movs	r1, #32
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <ILI9341_Reset+0x34>)
 8000746:	f001 fec3 	bl	80024d0 <HAL_GPIO_WritePin>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000762:	2036      	movs	r0, #54	; 0x36
 8000764:	f7ff ff52 	bl	800060c <ILI9341_Write_Command>
HAL_Delay(1);
 8000768:	2001      	movs	r0, #1
 800076a:	f001 fbc7 	bl	8001efc <HAL_Delay>
	
switch(screen_rotation) 
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	2b03      	cmp	r3, #3
 8000772:	d837      	bhi.n	80007e4 <ILI9341_Set_Rotation+0x90>
 8000774:	a201      	add	r2, pc, #4	; (adr r2, 800077c <ILI9341_Set_Rotation+0x28>)
 8000776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077a:	bf00      	nop
 800077c:	0800078d 	.word	0x0800078d
 8000780:	080007a3 	.word	0x080007a3
 8000784:	080007b9 	.word	0x080007b9
 8000788:	080007cf 	.word	0x080007cf
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 800078c:	2048      	movs	r0, #72	; 0x48
 800078e:	f7ff ff5b 	bl	8000648 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <ILI9341_Set_Rotation+0x9c>)
 8000794:	22f0      	movs	r2, #240	; 0xf0
 8000796:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <ILI9341_Set_Rotation+0xa0>)
 800079a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079e:	801a      	strh	r2, [r3, #0]
			break;
 80007a0:	e021      	b.n	80007e6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80007a2:	2028      	movs	r0, #40	; 0x28
 80007a4:	f7ff ff50 	bl	8000648 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <ILI9341_Set_Rotation+0x9c>)
 80007aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007ae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <ILI9341_Set_Rotation+0xa0>)
 80007b2:	22f0      	movs	r2, #240	; 0xf0
 80007b4:	801a      	strh	r2, [r3, #0]
			break;
 80007b6:	e016      	b.n	80007e6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80007b8:	2088      	movs	r0, #136	; 0x88
 80007ba:	f7ff ff45 	bl	8000648 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <ILI9341_Set_Rotation+0x9c>)
 80007c0:	22f0      	movs	r2, #240	; 0xf0
 80007c2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <ILI9341_Set_Rotation+0xa0>)
 80007c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007ca:	801a      	strh	r2, [r3, #0]
			break;
 80007cc:	e00b      	b.n	80007e6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80007ce:	20e8      	movs	r0, #232	; 0xe8
 80007d0:	f7ff ff3a 	bl	8000648 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <ILI9341_Set_Rotation+0x9c>)
 80007d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007da:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <ILI9341_Set_Rotation+0xa0>)
 80007de:	22f0      	movs	r2, #240	; 0xf0
 80007e0:	801a      	strh	r2, [r3, #0]
			break;
 80007e2:	e000      	b.n	80007e6 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80007e4:	bf00      	nop
	}
}
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000002 	.word	0x20000002
 80007f4:	20000000 	.word	0x20000000

080007f8 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2120      	movs	r1, #32
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <ILI9341_Enable+0x14>)
 8000802:	f001 fe65 	bl	80024d0 <HAL_GPIO_WritePin>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000814:	f7ff fff0 	bl	80007f8 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000818:	f7ff feda 	bl	80005d0 <ILI9341_SPI_Init>
ILI9341_Reset();
 800081c:	f7ff ff7e 	bl	800071c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff fef3 	bl	800060c <ILI9341_Write_Command>
HAL_Delay(1000);
 8000826:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800082a:	f001 fb67 	bl	8001efc <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800082e:	20cb      	movs	r0, #203	; 0xcb
 8000830:	f7ff feec 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000834:	2039      	movs	r0, #57	; 0x39
 8000836:	f7ff ff07 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800083a:	202c      	movs	r0, #44	; 0x2c
 800083c:	f7ff ff04 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff ff01 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000846:	2034      	movs	r0, #52	; 0x34
 8000848:	f7ff fefe 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800084c:	2002      	movs	r0, #2
 800084e:	f7ff fefb 	bl	8000648 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000852:	20cf      	movs	r0, #207	; 0xcf
 8000854:	f7ff feda 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff fef5 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800085e:	20c1      	movs	r0, #193	; 0xc1
 8000860:	f7ff fef2 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000864:	2030      	movs	r0, #48	; 0x30
 8000866:	f7ff feef 	bl	8000648 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800086a:	20e8      	movs	r0, #232	; 0xe8
 800086c:	f7ff fece 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000870:	2085      	movs	r0, #133	; 0x85
 8000872:	f7ff fee9 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff fee6 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 800087c:	2078      	movs	r0, #120	; 0x78
 800087e:	f7ff fee3 	bl	8000648 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000882:	20ea      	movs	r0, #234	; 0xea
 8000884:	f7ff fec2 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff fedd 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff feda 	bl	8000648 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000894:	20ed      	movs	r0, #237	; 0xed
 8000896:	f7ff feb9 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800089a:	2064      	movs	r0, #100	; 0x64
 800089c:	f7ff fed4 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f7ff fed1 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80008a6:	2012      	movs	r0, #18
 80008a8:	f7ff fece 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80008ac:	2081      	movs	r0, #129	; 0x81
 80008ae:	f7ff fecb 	bl	8000648 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80008b2:	20f7      	movs	r0, #247	; 0xf7
 80008b4:	f7ff feaa 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80008b8:	2020      	movs	r0, #32
 80008ba:	f7ff fec5 	bl	8000648 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80008be:	20c0      	movs	r0, #192	; 0xc0
 80008c0:	f7ff fea4 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80008c4:	2023      	movs	r0, #35	; 0x23
 80008c6:	f7ff febf 	bl	8000648 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80008ca:	20c1      	movs	r0, #193	; 0xc1
 80008cc:	f7ff fe9e 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80008d0:	2010      	movs	r0, #16
 80008d2:	f7ff feb9 	bl	8000648 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80008d6:	20c5      	movs	r0, #197	; 0xc5
 80008d8:	f7ff fe98 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80008dc:	203e      	movs	r0, #62	; 0x3e
 80008de:	f7ff feb3 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80008e2:	2028      	movs	r0, #40	; 0x28
 80008e4:	f7ff feb0 	bl	8000648 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80008e8:	20c7      	movs	r0, #199	; 0xc7
 80008ea:	f7ff fe8f 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80008ee:	2086      	movs	r0, #134	; 0x86
 80008f0:	f7ff feaa 	bl	8000648 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80008f4:	2036      	movs	r0, #54	; 0x36
 80008f6:	f7ff fe89 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80008fa:	2048      	movs	r0, #72	; 0x48
 80008fc:	f7ff fea4 	bl	8000648 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000900:	203a      	movs	r0, #58	; 0x3a
 8000902:	f7ff fe83 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000906:	2055      	movs	r0, #85	; 0x55
 8000908:	f7ff fe9e 	bl	8000648 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800090c:	20b1      	movs	r0, #177	; 0xb1
 800090e:	f7ff fe7d 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff fe98 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000918:	2018      	movs	r0, #24
 800091a:	f7ff fe95 	bl	8000648 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800091e:	20b6      	movs	r0, #182	; 0xb6
 8000920:	f7ff fe74 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000924:	2008      	movs	r0, #8
 8000926:	f7ff fe8f 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800092a:	2082      	movs	r0, #130	; 0x82
 800092c:	f7ff fe8c 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000930:	2027      	movs	r0, #39	; 0x27
 8000932:	f7ff fe89 	bl	8000648 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000936:	20f2      	movs	r0, #242	; 0xf2
 8000938:	f7ff fe68 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fe83 	bl	8000648 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000942:	2026      	movs	r0, #38	; 0x26
 8000944:	f7ff fe62 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000948:	2001      	movs	r0, #1
 800094a:	f7ff fe7d 	bl	8000648 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800094e:	20e0      	movs	r0, #224	; 0xe0
 8000950:	f7ff fe5c 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000954:	200f      	movs	r0, #15
 8000956:	f7ff fe77 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800095a:	2031      	movs	r0, #49	; 0x31
 800095c:	f7ff fe74 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000960:	202b      	movs	r0, #43	; 0x2b
 8000962:	f7ff fe71 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000966:	200c      	movs	r0, #12
 8000968:	f7ff fe6e 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800096c:	200e      	movs	r0, #14
 800096e:	f7ff fe6b 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000972:	2008      	movs	r0, #8
 8000974:	f7ff fe68 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000978:	204e      	movs	r0, #78	; 0x4e
 800097a:	f7ff fe65 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 800097e:	20f1      	movs	r0, #241	; 0xf1
 8000980:	f7ff fe62 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000984:	2037      	movs	r0, #55	; 0x37
 8000986:	f7ff fe5f 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800098a:	2007      	movs	r0, #7
 800098c:	f7ff fe5c 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000990:	2010      	movs	r0, #16
 8000992:	f7ff fe59 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000996:	2003      	movs	r0, #3
 8000998:	f7ff fe56 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800099c:	200e      	movs	r0, #14
 800099e:	f7ff fe53 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80009a2:	2009      	movs	r0, #9
 80009a4:	f7ff fe50 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff fe4d 	bl	8000648 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80009ae:	20e1      	movs	r0, #225	; 0xe1
 80009b0:	f7ff fe2c 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff fe47 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80009ba:	200e      	movs	r0, #14
 80009bc:	f7ff fe44 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80009c0:	2014      	movs	r0, #20
 80009c2:	f7ff fe41 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80009c6:	2003      	movs	r0, #3
 80009c8:	f7ff fe3e 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80009cc:	2011      	movs	r0, #17
 80009ce:	f7ff fe3b 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80009d2:	2007      	movs	r0, #7
 80009d4:	f7ff fe38 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80009d8:	2031      	movs	r0, #49	; 0x31
 80009da:	f7ff fe35 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80009de:	20c1      	movs	r0, #193	; 0xc1
 80009e0:	f7ff fe32 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80009e4:	2048      	movs	r0, #72	; 0x48
 80009e6:	f7ff fe2f 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80009ea:	2008      	movs	r0, #8
 80009ec:	f7ff fe2c 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80009f0:	200f      	movs	r0, #15
 80009f2:	f7ff fe29 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80009f6:	200c      	movs	r0, #12
 80009f8:	f7ff fe26 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80009fc:	2031      	movs	r0, #49	; 0x31
 80009fe:	f7ff fe23 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000a02:	2036      	movs	r0, #54	; 0x36
 8000a04:	f7ff fe20 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000a08:	200f      	movs	r0, #15
 8000a0a:	f7ff fe1d 	bl	8000648 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000a0e:	2011      	movs	r0, #17
 8000a10:	f7ff fdfc 	bl	800060c <ILI9341_Write_Command>
HAL_Delay(120);
 8000a14:	2078      	movs	r0, #120	; 0x78
 8000a16:	f001 fa71 	bl	8001efc <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000a1a:	2029      	movs	r0, #41	; 0x29
 8000a1c:	f7ff fdf6 	bl	800060c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f7ff fe97 	bl	8000754 <ILI9341_Set_Rotation>

HAL_Delay(10);
 8000a26:	200a      	movs	r0, #10
 8000a28:	f001 fa68 	bl	8001efc <HAL_Delay>
//
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000a30:	b5b0      	push	{r4, r5, r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	80fb      	strh	r3, [r7, #6]
 8000a3c:	466b      	mov	r3, sp
 8000a3e:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a4c:	d202      	bcs.n	8000a54 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
 8000a52:	e002      	b.n	8000a5a <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000a54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2140      	movs	r1, #64	; 0x40
 8000a5e:	483d      	ldr	r0, [pc, #244]	; (8000b54 <ILI9341_Draw_Colour_Burst+0x124>)
 8000a60:	f001 fd36 	bl	80024d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2110      	movs	r1, #16
 8000a68:	483a      	ldr	r0, [pc, #232]	; (8000b54 <ILI9341_Draw_Colour_Burst+0x124>)
 8000a6a:	f001 fd31 	bl	80024d0 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000a78:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000a7a:	4623      	mov	r3, r4
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
 8000a80:	4620      	mov	r0, r4
 8000a82:	f04f 0100 	mov.w	r1, #0
 8000a86:	f04f 0200 	mov.w	r2, #0
 8000a8a:	f04f 0300 	mov.w	r3, #0
 8000a8e:	00cb      	lsls	r3, r1, #3
 8000a90:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a94:	00c2      	lsls	r2, r0, #3
 8000a96:	4620      	mov	r0, r4
 8000a98:	f04f 0100 	mov.w	r1, #0
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	f04f 0300 	mov.w	r3, #0
 8000aa4:	00cb      	lsls	r3, r1, #3
 8000aa6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000aaa:	00c2      	lsls	r2, r0, #3
 8000aac:	1de3      	adds	r3, r4, #7
 8000aae:	08db      	lsrs	r3, r3, #3
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	ebad 0d03 	sub.w	sp, sp, r3
 8000ab6:	466b      	mov	r3, sp
 8000ab8:	3300      	adds	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac0:	e00e      	b.n	8000ae0 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	4413      	add	r3, r2
 8000ac8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000acc:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	88fa      	ldrh	r2, [r7, #6]
 8000ad4:	b2d1      	uxtb	r1, r2
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000adc:	3302      	adds	r3, #2
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d3ec      	bcc.n	8000ac2 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000afc:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b02:	fb01 f202 	mul.w	r2, r1, r2
 8000b06:	1a9b      	subs	r3, r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d010      	beq.n	8000b32 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b14:	e009      	b.n	8000b2a <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000b16:	69b9      	ldr	r1, [r7, #24]
 8000b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	230a      	movs	r3, #10
 8000b1e:	480e      	ldr	r0, [pc, #56]	; (8000b58 <ILI9341_Draw_Colour_Burst+0x128>)
 8000b20:	f004 fda5 	bl	800566e <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b26:	3301      	adds	r3, #1
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d3f1      	bcc.n	8000b16 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000b32:	69b9      	ldr	r1, [r7, #24]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	230a      	movs	r3, #10
 8000b3a:	4807      	ldr	r0, [pc, #28]	; (8000b58 <ILI9341_Draw_Colour_Burst+0x128>)
 8000b3c:	f004 fd97 	bl	800566e <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2110      	movs	r1, #16
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <ILI9341_Draw_Colour_Burst+0x124>)
 8000b46:	f001 fcc3 	bl	80024d0 <HAL_GPIO_WritePin>
 8000b4a:	46ad      	mov	sp, r5
}
 8000b4c:	bf00      	nop
 8000b4e:	3730      	adds	r7, #48	; 0x30
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bdb0      	pop	{r4, r5, r7, pc}
 8000b54:	40021000 	.word	0x40021000
 8000b58:	200000c8 	.word	0x200000c8

08000b5c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <ILI9341_Fill_Screen+0x44>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <ILI9341_Fill_Screen+0x48>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	2100      	movs	r1, #0
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fd85 	bl	8000684 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <ILI9341_Fill_Screen+0x44>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <ILI9341_Fill_Screen+0x48>)
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	fb03 f302 	mul.w	r3, r3, r2
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff4c 	bl	8000a30 <ILI9341_Draw_Colour_Burst>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000002 	.word	0x20000002
 8000ba4:	20000000 	.word	0x20000000

08000ba8 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	80bb      	strh	r3, [r7, #4]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000bba:	4b5b      	ldr	r3, [pc, #364]	; (8000d28 <ILI9341_Draw_Pixel+0x180>)
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	88fa      	ldrh	r2, [r7, #6]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f080 80ac 	bcs.w	8000d20 <ILI9341_Draw_Pixel+0x178>
 8000bc8:	4b58      	ldr	r3, [pc, #352]	; (8000d2c <ILI9341_Draw_Pixel+0x184>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	88ba      	ldrh	r2, [r7, #4]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	f080 80a5 	bcs.w	8000d20 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	4855      	ldr	r0, [pc, #340]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000bdc:	f001 fc78 	bl	80024d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2110      	movs	r1, #16
 8000be4:	4852      	ldr	r0, [pc, #328]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000be6:	f001 fc73 	bl	80024d0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000bea:	202a      	movs	r0, #42	; 0x2a
 8000bec:	f7ff fcfc 	bl	80005e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2140      	movs	r1, #64	; 0x40
 8000bf4:	484e      	ldr	r0, [pc, #312]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000bf6:	f001 fc6b 	bl	80024d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2110      	movs	r1, #16
 8000bfe:	484c      	ldr	r0, [pc, #304]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c00:	f001 fc66 	bl	80024d0 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000c04:	2200      	movs	r2, #0
 8000c06:	2110      	movs	r1, #16
 8000c08:	4849      	ldr	r0, [pc, #292]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c0a:	f001 fc61 	bl	80024d0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	753b      	strb	r3, [r7, #20]
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	757b      	strb	r3, [r7, #21]
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	3301      	adds	r3, #1
 8000c22:	121b      	asrs	r3, r3, #8
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	75bb      	strb	r3, [r7, #22]
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000c32:	f107 0114 	add.w	r1, r7, #20
 8000c36:	2301      	movs	r3, #1
 8000c38:	2204      	movs	r2, #4
 8000c3a:	483e      	ldr	r0, [pc, #248]	; (8000d34 <ILI9341_Draw_Pixel+0x18c>)
 8000c3c:	f004 fd17 	bl	800566e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2110      	movs	r1, #16
 8000c44:	483a      	ldr	r0, [pc, #232]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c46:	f001 fc43 	bl	80024d0 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2140      	movs	r1, #64	; 0x40
 8000c4e:	4838      	ldr	r0, [pc, #224]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c50:	f001 fc3e 	bl	80024d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000c54:	2200      	movs	r2, #0
 8000c56:	2110      	movs	r1, #16
 8000c58:	4835      	ldr	r0, [pc, #212]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c5a:	f001 fc39 	bl	80024d0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000c5e:	202b      	movs	r0, #43	; 0x2b
 8000c60:	f7ff fcc2 	bl	80005e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000c64:	2201      	movs	r2, #1
 8000c66:	2140      	movs	r1, #64	; 0x40
 8000c68:	4831      	ldr	r0, [pc, #196]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c6a:	f001 fc31 	bl	80024d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2110      	movs	r1, #16
 8000c72:	482f      	ldr	r0, [pc, #188]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c74:	f001 fc2c 	bl	80024d0 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	482c      	ldr	r0, [pc, #176]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c7e:	f001 fc27 	bl	80024d0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000c82:	88bb      	ldrh	r3, [r7, #4]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	743b      	strb	r3, [r7, #16]
 8000c8c:	88bb      	ldrh	r3, [r7, #4]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	747b      	strb	r3, [r7, #17]
 8000c92:	88bb      	ldrh	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	121b      	asrs	r3, r3, #8
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	74bb      	strb	r3, [r7, #18]
 8000c9c:	88bb      	ldrh	r3, [r7, #4]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000ca6:	f107 0110 	add.w	r1, r7, #16
 8000caa:	2301      	movs	r3, #1
 8000cac:	2204      	movs	r2, #4
 8000cae:	4821      	ldr	r0, [pc, #132]	; (8000d34 <ILI9341_Draw_Pixel+0x18c>)
 8000cb0:	f004 fcdd 	bl	800566e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	481d      	ldr	r0, [pc, #116]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000cba:	f001 fc09 	bl	80024d0 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2140      	movs	r1, #64	; 0x40
 8000cc2:	481b      	ldr	r0, [pc, #108]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000cc4:	f001 fc04 	bl	80024d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2110      	movs	r1, #16
 8000ccc:	4818      	ldr	r0, [pc, #96]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000cce:	f001 fbff 	bl	80024d0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000cd2:	202c      	movs	r0, #44	; 0x2c
 8000cd4:	f7ff fc88 	bl	80005e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2140      	movs	r1, #64	; 0x40
 8000cdc:	4814      	ldr	r0, [pc, #80]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000cde:	f001 fbf7 	bl	80024d0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	4812      	ldr	r0, [pc, #72]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000ce8:	f001 fbf2 	bl	80024d0 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2110      	movs	r1, #16
 8000cf0:	480f      	ldr	r0, [pc, #60]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000cf2:	f001 fbed 	bl	80024d0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000cf6:	887b      	ldrh	r3, [r7, #2]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	733b      	strb	r3, [r7, #12]
 8000d00:	887b      	ldrh	r3, [r7, #2]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000d06:	f107 010c 	add.w	r1, r7, #12
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	4809      	ldr	r0, [pc, #36]	; (8000d34 <ILI9341_Draw_Pixel+0x18c>)
 8000d10:	f004 fcad 	bl	800566e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2110      	movs	r1, #16
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000d1a:	f001 fbd9 	bl	80024d0 <HAL_GPIO_WritePin>
 8000d1e:	e000      	b.n	8000d22 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000d20:	bf00      	nop
	
}
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000002 	.word	0x20000002
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	40021000 	.word	0x40021000
 8000d34:	200000c8 	.word	0x200000c8

08000d38 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	int i =0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 8000d44:	e036      	b.n	8000db4 <speed_test_LCD+0x7c>
	{
		i ++;
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000d60:	4819      	ldr	r0, [pc, #100]	; (8000dc8 <speed_test_LCD+0x90>)
 8000d62:	f004 fbe6 	bl	8005532 <HAL_RNG_GetRandomNumber>
 8000d66:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000d6c:	4816      	ldr	r0, [pc, #88]	; (8000dc8 <speed_test_LCD+0x90>)
 8000d6e:	f004 fbe0 	bl	8005532 <HAL_RNG_GetRandomNumber>
 8000d72:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000d78:	4813      	ldr	r0, [pc, #76]	; (8000dc8 <speed_test_LCD+0x90>)
 8000d7a:	f004 fbda 	bl	8005532 <HAL_RNG_GetRandomNumber>
 8000d7e:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000d84:	4810      	ldr	r0, [pc, #64]	; (8000dc8 <speed_test_LCD+0x90>)
 8000d86:	f004 fbd4 	bl	8005532 <HAL_RNG_GetRandomNumber>
 8000d8a:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8000d90:	89fb      	ldrh	r3, [r7, #14]
 8000d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d96:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8000d98:	89bb      	ldrh	r3, [r7, #12]
 8000d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d9e:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8000da0:	897b      	ldrh	r3, [r7, #10]
 8000da2:	f003 031f 	and.w	r3, r3, #31
 8000da6:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8000da8:	893b      	ldrh	r3, [r7, #8]
 8000daa:	897a      	ldrh	r2, [r7, #10]
 8000dac:	89b9      	ldrh	r1, [r7, #12]
 8000dae:	89f8      	ldrh	r0, [r7, #14]
 8000db0:	f7ff fb86 	bl	80004c0 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	ddc4      	ble.n	8000d46 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000168 	.word	0x20000168

08000dcc <keyboard_test>:
 */

#include "main.h"

char keyboard_test(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
	char num;
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd8:	48cf      	ldr	r0, [pc, #828]	; (8001118 <keyboard_test+0x34c>)
 8000dda:	f001 fb79 	bl	80024d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de4:	48cc      	ldr	r0, [pc, #816]	; (8001118 <keyboard_test+0x34c>)
 8000de6:	f001 fb73 	bl	80024d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df0:	48c9      	ldr	r0, [pc, #804]	; (8001118 <keyboard_test+0x34c>)
 8000df2:	f001 fb6d 	bl	80024d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfc:	48c6      	ldr	r0, [pc, #792]	; (8001118 <keyboard_test+0x34c>)
 8000dfe:	f001 fb67 	bl	80024d0 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000e02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e06:	48c5      	ldr	r0, [pc, #788]	; (800111c <keyboard_test+0x350>)
 8000e08:	f001 fb4a 	bl	80024a0 <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d169      	bne.n	8000ee6 <keyboard_test+0x11a>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e18:	48bf      	ldr	r0, [pc, #764]	; (8001118 <keyboard_test+0x34c>)
 8000e1a:	f001 fb59 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e24:	48bc      	ldr	r0, [pc, #752]	; (8001118 <keyboard_test+0x34c>)
 8000e26:	f001 fb53 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e30:	48b9      	ldr	r0, [pc, #740]	; (8001118 <keyboard_test+0x34c>)
 8000e32:	f001 fb4d 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3c:	48b6      	ldr	r0, [pc, #728]	; (8001118 <keyboard_test+0x34c>)
 8000e3e:	f001 fb47 	bl	80024d0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000e42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e46:	48b5      	ldr	r0, [pc, #724]	; (800111c <keyboard_test+0x350>)
 8000e48:	f001 fb2a 	bl	80024a0 <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d101      	bne.n	8000e56 <keyboard_test+0x8a>
		{
			num = '1';
 8000e52:	2331      	movs	r3, #49	; 0x31
 8000e54:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e5c:	48ae      	ldr	r0, [pc, #696]	; (8001118 <keyboard_test+0x34c>)
 8000e5e:	f001 fb37 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e68:	48ab      	ldr	r0, [pc, #684]	; (8001118 <keyboard_test+0x34c>)
 8000e6a:	f001 fb31 	bl	80024d0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000e6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e72:	48aa      	ldr	r0, [pc, #680]	; (800111c <keyboard_test+0x350>)
 8000e74:	f001 fb14 	bl	80024a0 <HAL_GPIO_ReadPin>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <keyboard_test+0xb6>
		{
			num = '4';
 8000e7e:	2334      	movs	r3, #52	; 0x34
 8000e80:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e88:	48a3      	ldr	r0, [pc, #652]	; (8001118 <keyboard_test+0x34c>)
 8000e8a:	f001 fb21 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e94:	48a0      	ldr	r0, [pc, #640]	; (8001118 <keyboard_test+0x34c>)
 8000e96:	f001 fb1b 	bl	80024d0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000e9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9e:	489f      	ldr	r0, [pc, #636]	; (800111c <keyboard_test+0x350>)
 8000ea0:	f001 fafe 	bl	80024a0 <HAL_GPIO_ReadPin>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <keyboard_test+0xe2>
		{
			num = '7';
 8000eaa:	2337      	movs	r3, #55	; 0x37
 8000eac:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb4:	4898      	ldr	r0, [pc, #608]	; (8001118 <keyboard_test+0x34c>)
 8000eb6:	f001 fb0b 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec0:	4895      	ldr	r0, [pc, #596]	; (8001118 <keyboard_test+0x34c>)
 8000ec2:	f001 fb05 	bl	80024d0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eca:	4894      	ldr	r0, [pc, #592]	; (800111c <keyboard_test+0x350>)
 8000ecc:	f001 fae8 	bl	80024a0 <HAL_GPIO_ReadPin>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <keyboard_test+0x10e>
		{
			num = '*';
 8000ed6:	232a      	movs	r3, #42	; 0x2a
 8000ed8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee0:	488d      	ldr	r0, [pc, #564]	; (8001118 <keyboard_test+0x34c>)
 8000ee2:	f001 faf5 	bl	80024d0 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eec:	488a      	ldr	r0, [pc, #552]	; (8001118 <keyboard_test+0x34c>)
 8000eee:	f001 faef 	bl	80024d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef8:	4887      	ldr	r0, [pc, #540]	; (8001118 <keyboard_test+0x34c>)
 8000efa:	f001 fae9 	bl	80024d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f04:	4884      	ldr	r0, [pc, #528]	; (8001118 <keyboard_test+0x34c>)
 8000f06:	f001 fae3 	bl	80024d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f10:	4881      	ldr	r0, [pc, #516]	; (8001118 <keyboard_test+0x34c>)
 8000f12:	f001 fadd 	bl	80024d0 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 8000f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1a:	4880      	ldr	r0, [pc, #512]	; (800111c <keyboard_test+0x350>)
 8000f1c:	f001 fac0 	bl	80024a0 <HAL_GPIO_ReadPin>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d169      	bne.n	8000ffa <keyboard_test+0x22e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f2c:	487a      	ldr	r0, [pc, #488]	; (8001118 <keyboard_test+0x34c>)
 8000f2e:	f001 facf 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f38:	4877      	ldr	r0, [pc, #476]	; (8001118 <keyboard_test+0x34c>)
 8000f3a:	f001 fac9 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f44:	4874      	ldr	r0, [pc, #464]	; (8001118 <keyboard_test+0x34c>)
 8000f46:	f001 fac3 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f50:	4871      	ldr	r0, [pc, #452]	; (8001118 <keyboard_test+0x34c>)
 8000f52:	f001 fabd 	bl	80024d0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000f56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f5a:	4870      	ldr	r0, [pc, #448]	; (800111c <keyboard_test+0x350>)
 8000f5c:	f001 faa0 	bl	80024a0 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <keyboard_test+0x19e>
		{
			num = '2';
 8000f66:	2332      	movs	r3, #50	; 0x32
 8000f68:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f70:	4869      	ldr	r0, [pc, #420]	; (8001118 <keyboard_test+0x34c>)
 8000f72:	f001 faad 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7c:	4866      	ldr	r0, [pc, #408]	; (8001118 <keyboard_test+0x34c>)
 8000f7e:	f001 faa7 	bl	80024d0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000f82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f86:	4865      	ldr	r0, [pc, #404]	; (800111c <keyboard_test+0x350>)
 8000f88:	f001 fa8a 	bl	80024a0 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <keyboard_test+0x1ca>
		{
			num = '5';
 8000f92:	2335      	movs	r3, #53	; 0x35
 8000f94:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9c:	485e      	ldr	r0, [pc, #376]	; (8001118 <keyboard_test+0x34c>)
 8000f9e:	f001 fa97 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa8:	485b      	ldr	r0, [pc, #364]	; (8001118 <keyboard_test+0x34c>)
 8000faa:	f001 fa91 	bl	80024d0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000fae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb2:	485a      	ldr	r0, [pc, #360]	; (800111c <keyboard_test+0x350>)
 8000fb4:	f001 fa74 	bl	80024a0 <HAL_GPIO_ReadPin>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <keyboard_test+0x1f6>
		{
			num = '8';
 8000fbe:	2338      	movs	r3, #56	; 0x38
 8000fc0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc8:	4853      	ldr	r0, [pc, #332]	; (8001118 <keyboard_test+0x34c>)
 8000fca:	f001 fa81 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd4:	4850      	ldr	r0, [pc, #320]	; (8001118 <keyboard_test+0x34c>)
 8000fd6:	f001 fa7b 	bl	80024d0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000fda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fde:	484f      	ldr	r0, [pc, #316]	; (800111c <keyboard_test+0x350>)
 8000fe0:	f001 fa5e 	bl	80024a0 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <keyboard_test+0x222>
		{
			num = '0';
 8000fea:	2330      	movs	r3, #48	; 0x30
 8000fec:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff4:	4848      	ldr	r0, [pc, #288]	; (8001118 <keyboard_test+0x34c>)
 8000ff6:	f001 fa6b 	bl	80024d0 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001000:	4845      	ldr	r0, [pc, #276]	; (8001118 <keyboard_test+0x34c>)
 8001002:	f001 fa65 	bl	80024d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100c:	4842      	ldr	r0, [pc, #264]	; (8001118 <keyboard_test+0x34c>)
 800100e:	f001 fa5f 	bl	80024d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001018:	483f      	ldr	r0, [pc, #252]	; (8001118 <keyboard_test+0x34c>)
 800101a:	f001 fa59 	bl	80024d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001024:	483c      	ldr	r0, [pc, #240]	; (8001118 <keyboard_test+0x34c>)
 8001026:	f001 fa53 	bl	80024d0 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №
 800102a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800102e:	483b      	ldr	r0, [pc, #236]	; (800111c <keyboard_test+0x350>)
 8001030:	f001 fa36 	bl	80024a0 <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d169      	bne.n	800110e <keyboard_test+0x342>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001040:	4835      	ldr	r0, [pc, #212]	; (8001118 <keyboard_test+0x34c>)
 8001042:	f001 fa45 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800104c:	4832      	ldr	r0, [pc, #200]	; (8001118 <keyboard_test+0x34c>)
 800104e:	f001 fa3f 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001058:	482f      	ldr	r0, [pc, #188]	; (8001118 <keyboard_test+0x34c>)
 800105a:	f001 fa39 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001064:	482c      	ldr	r0, [pc, #176]	; (8001118 <keyboard_test+0x34c>)
 8001066:	f001 fa33 	bl	80024d0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800106a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800106e:	482b      	ldr	r0, [pc, #172]	; (800111c <keyboard_test+0x350>)
 8001070:	f001 fa16 	bl	80024a0 <HAL_GPIO_ReadPin>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <keyboard_test+0x2b2>
		{
			num = '3';
 800107a:	2333      	movs	r3, #51	; 0x33
 800107c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001084:	4824      	ldr	r0, [pc, #144]	; (8001118 <keyboard_test+0x34c>)
 8001086:	f001 fa23 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001090:	4821      	ldr	r0, [pc, #132]	; (8001118 <keyboard_test+0x34c>)
 8001092:	f001 fa1d 	bl	80024d0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001096:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800109a:	4820      	ldr	r0, [pc, #128]	; (800111c <keyboard_test+0x350>)
 800109c:	f001 fa00 	bl	80024a0 <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <keyboard_test+0x2de>
		{
			num = '6';
 80010a6:	2336      	movs	r3, #54	; 0x36
 80010a8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80010aa:	2201      	movs	r2, #1
 80010ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b0:	4819      	ldr	r0, [pc, #100]	; (8001118 <keyboard_test+0x34c>)
 80010b2:	f001 fa0d 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010bc:	4816      	ldr	r0, [pc, #88]	; (8001118 <keyboard_test+0x34c>)
 80010be:	f001 fa07 	bl	80024d0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80010c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c6:	4815      	ldr	r0, [pc, #84]	; (800111c <keyboard_test+0x350>)
 80010c8:	f001 f9ea 	bl	80024a0 <HAL_GPIO_ReadPin>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <keyboard_test+0x30a>
		{
			num = '9';
 80010d2:	2339      	movs	r3, #57	; 0x39
 80010d4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010dc:	480e      	ldr	r0, [pc, #56]	; (8001118 <keyboard_test+0x34c>)
 80010de:	f001 f9f7 	bl	80024d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <keyboard_test+0x34c>)
 80010ea:	f001 f9f1 	bl	80024d0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80010ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f2:	480a      	ldr	r0, [pc, #40]	; (800111c <keyboard_test+0x350>)
 80010f4:	f001 f9d4 	bl	80024a0 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <keyboard_test+0x336>
		{
			num = '#';
 80010fe:	2323      	movs	r3, #35	; 0x23
 8001100:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <keyboard_test+0x34c>)
 800110a:	f001 f9e1 	bl	80024d0 <HAL_GPIO_WritePin>
	}
	return num;
 800110e:	79fb      	ldrb	r3, [r7, #7]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40020c00 	.word	0x40020c00
 800111c:	40020400 	.word	0x40020400

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001126:	f000 fe77 	bl	8001e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112a:	f000 f83d 	bl	80011a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112e:	f000 fa3d 	bl	80015ac <MX_GPIO_Init>
  MX_I2S3_Init();
 8001132:	f000 f8c7 	bl	80012c4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001136:	f000 f909 	bl	800134c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800113a:	f008 fa7d 	bl	8009638 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 800113e:	f000 f971 	bl	8001424 <MX_TIM2_Init>
  MX_SPI2_Init();
 8001142:	f000 f939 	bl	80013b8 <MX_SPI2_Init>
  MX_RNG_Init();
 8001146:	f000 f8ed 	bl	8001324 <MX_RNG_Init>
  MX_TIM3_Init();
 800114a:	f000 f9e1 	bl	8001510 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800114e:	f000 f8ad 	bl	80012ac <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 8001152:	f7ff fb5d 	bl	8000810 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff fd00 	bl	8000b5c <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 800115c:	2003      	movs	r0, #3
 800115e:	f7ff faf9 	bl	8000754 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff fcfa 	bl	8000b5c <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 8001168:	2364      	movs	r3, #100	; 0x64
 800116a:	60fb      	str	r3, [r7, #12]
  speed_test_LCD(number_of_tests);
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f7ff fde3 	bl	8000d38 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff fcf2 	bl	8000b5c <ILI9341_Fill_Screen>

  //HAL_TIM_Base_Start_IT(&htim3);

  int i = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  while (1)
  {
	  char number;
	  int ARR_REG =0;
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]

	  HAL_TIM_Base_Start_IT(&htim3);			// Start timer measure
 8001180:	4807      	ldr	r0, [pc, #28]	; (80011a0 <main+0x80>)
 8001182:	f004 fccb 	bl	8005b1c <HAL_TIM_Base_Start_IT>
	  number = keyboard_test();					// Target function
 8001186:	f7ff fe21 	bl	8000dcc <keyboard_test>
 800118a:	4603      	mov	r3, r0
 800118c:	70fb      	strb	r3, [r7, #3]
	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <main+0x80>)
 8001190:	f004 fd34 	bl	8005bfc <HAL_TIM_Base_Stop_IT>
	  ARR_REG = TIM3-> CNT;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <main+0x84>)
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	607b      	str	r3, [r7, #4]


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800119a:	f008 fa73 	bl	8009684 <MX_USB_HOST_Process>
  {
 800119e:	e7ed      	b.n	800117c <main+0x5c>
 80011a0:	20000120 	.word	0x20000120
 80011a4:	40000400 	.word	0x40000400

080011a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b098      	sub	sp, #96	; 0x60
 80011ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011b2:	2230      	movs	r2, #48	; 0x30
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f008 fd80 	bl	8009cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <SystemClock_Config+0xfc>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a30      	ldr	r2, [pc, #192]	; (80012a4 <SystemClock_Config+0xfc>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <SystemClock_Config+0xfc>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <SystemClock_Config+0x100>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a2a      	ldr	r2, [pc, #168]	; (80012a8 <SystemClock_Config+0x100>)
 8001200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <SystemClock_Config+0x100>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001212:	2301      	movs	r3, #1
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121c:	2302      	movs	r3, #2
 800121e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001220:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001224:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001226:	2308      	movs	r3, #8
 8001228:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800122a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800122e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001230:	2302      	movs	r3, #2
 8001232:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001234:	2307      	movs	r3, #7
 8001236:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800123c:	4618      	mov	r0, r3
 800123e:	f003 fb7f 	bl	8004940 <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001248:	f000 fb16 	bl	8001878 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	230f      	movs	r3, #15
 800124e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001250:	2302      	movs	r3, #2
 8001252:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001258:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	2105      	movs	r1, #5
 800126a:	4618      	mov	r0, r3
 800126c:	f003 fde0 	bl	8004e30 <HAL_RCC_ClockConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001276:	f000 faff 	bl	8001878 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800127a:	2301      	movs	r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800127e:	23c0      	movs	r3, #192	; 0xc0
 8001280:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001282:	2302      	movs	r3, #2
 8001284:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4618      	mov	r0, r3
 800128c:	f003 ff98 	bl	80051c0 <HAL_RCCEx_PeriphCLKConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001296:	f000 faef 	bl	8001878 <Error_Handler>
  }
}
 800129a:	bf00      	nop
 800129c:	3760      	adds	r7, #96	; 0x60
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40007000 	.word	0x40007000

080012ac <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	201c      	movs	r0, #28
 80012b6:	f000 ff20 	bl	80020fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012ba:	201c      	movs	r0, #28
 80012bc:	f000 ff39 	bl	8002132 <HAL_NVIC_EnableIRQ>
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_I2S3_Init+0x54>)
 80012ca:	4a14      	ldr	r2, [pc, #80]	; (800131c <MX_I2S3_Init+0x58>)
 80012cc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_I2S3_Init+0x54>)
 80012d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_I2S3_Init+0x54>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_I2S3_Init+0x54>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <MX_I2S3_Init+0x54>)
 80012e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_I2S3_Init+0x54>)
 80012ec:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <MX_I2S3_Init+0x5c>)
 80012ee:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_I2S3_Init+0x54>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_I2S3_Init+0x54>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_I2S3_Init+0x54>)
 80012fe:	2200      	movs	r2, #0
 8001300:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_I2S3_Init+0x54>)
 8001304:	f002 fe7c 	bl	8004000 <HAL_I2S_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800130e:	f000 fab3 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000218 	.word	0x20000218
 800131c:	40003c00 	.word	0x40003c00
 8001320:	00017700 	.word	0x00017700

08001324 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_RNG_Init+0x20>)
 800132a:	4a07      	ldr	r2, [pc, #28]	; (8001348 <MX_RNG_Init+0x24>)
 800132c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_RNG_Init+0x20>)
 8001330:	f004 f886 	bl	8005440 <HAL_RNG_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800133a:	f000 fa9d 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000168 	.word	0x20000168
 8001348:	50060800 	.word	0x50060800

0800134c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <MX_SPI1_Init+0x64>)
 8001352:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <MX_SPI1_Init+0x68>)
 8001354:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_SPI1_Init+0x64>)
 8001358:	f44f 7282 	mov.w	r2, #260	; 0x104
 800135c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_SPI1_Init+0x64>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <MX_SPI1_Init+0x64>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_SPI1_Init+0x64>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_SPI1_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_SPI1_Init+0x64>)
 8001378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800137c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_SPI1_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <MX_SPI1_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_SPI1_Init+0x64>)
 800138c:	2200      	movs	r2, #0
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <MX_SPI1_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_SPI1_Init+0x64>)
 8001398:	220a      	movs	r2, #10
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800139c:	4804      	ldr	r0, [pc, #16]	; (80013b0 <MX_SPI1_Init+0x64>)
 800139e:	f004 f8dd 	bl	800555c <HAL_SPI_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013a8:	f000 fa66 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000178 	.word	0x20000178
 80013b4:	40013000 	.word	0x40013000

080013b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <MX_SPI2_Init+0x64>)
 80013be:	4a18      	ldr	r2, [pc, #96]	; (8001420 <MX_SPI2_Init+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <MX_SPI2_Init+0x64>)
 80013c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <MX_SPI2_Init+0x64>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_SPI2_Init+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_SPI2_Init+0x64>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_SPI2_Init+0x64>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_SPI2_Init+0x64>)
 80013e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_SPI2_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <MX_SPI2_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_SPI2_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <MX_SPI2_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_SPI2_Init+0x64>)
 8001404:	220a      	movs	r2, #10
 8001406:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_SPI2_Init+0x64>)
 800140a:	f004 f8a7 	bl	800555c <HAL_SPI_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001414:	f000 fa30 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200000c8 	.word	0x200000c8
 8001420:	40003800 	.word	0x40003800

08001424 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08e      	sub	sp, #56	; 0x38
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	f107 0320 	add.w	r3, r7, #32
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
 8001450:	615a      	str	r2, [r3, #20]
 8001452:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001454:	4b2d      	ldr	r3, [pc, #180]	; (800150c <MX_TIM2_Init+0xe8>)
 8001456:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800145a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <MX_TIM2_Init+0xe8>)
 800145e:	f240 3247 	movw	r2, #839	; 0x347
 8001462:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b29      	ldr	r3, [pc, #164]	; (800150c <MX_TIM2_Init+0xe8>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800146a:	4b28      	ldr	r3, [pc, #160]	; (800150c <MX_TIM2_Init+0xe8>)
 800146c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001470:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <MX_TIM2_Init+0xe8>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <MX_TIM2_Init+0xe8>)
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800147e:	4823      	ldr	r0, [pc, #140]	; (800150c <MX_TIM2_Init+0xe8>)
 8001480:	f004 fafc 	bl	8005a7c <HAL_TIM_Base_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800148a:	f000 f9f5 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001498:	4619      	mov	r1, r3
 800149a:	481c      	ldr	r0, [pc, #112]	; (800150c <MX_TIM2_Init+0xe8>)
 800149c:	f004 fdfc 	bl	8006098 <HAL_TIM_ConfigClockSource>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80014a6:	f000 f9e7 	bl	8001878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014aa:	4818      	ldr	r0, [pc, #96]	; (800150c <MX_TIM2_Init+0xe8>)
 80014ac:	f004 fbd5 	bl	8005c5a <HAL_TIM_PWM_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80014b6:	f000 f9df 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80014ba:	2310      	movs	r3, #16
 80014bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	4619      	mov	r1, r3
 80014c8:	4810      	ldr	r0, [pc, #64]	; (800150c <MX_TIM2_Init+0xe8>)
 80014ca:	f005 f9c5 	bl	8006858 <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80014d4:	f000 f9d0 	bl	8001878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d8:	2360      	movs	r3, #96	; 0x60
 80014da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80014dc:	2364      	movs	r3, #100	; 0x64
 80014de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	2200      	movs	r2, #0
 80014ec:	4619      	mov	r1, r3
 80014ee:	4807      	ldr	r0, [pc, #28]	; (800150c <MX_TIM2_Init+0xe8>)
 80014f0:	f004 fd14 	bl	8005f1c <HAL_TIM_PWM_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014fa:	f000 f9bd 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014fe:	4803      	ldr	r0, [pc, #12]	; (800150c <MX_TIM2_Init+0xe8>)
 8001500:	f000 fb54 	bl	8001bac <HAL_TIM_MspPostInit>

}
 8001504:	bf00      	nop
 8001506:	3738      	adds	r7, #56	; 0x38
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200001d0 	.word	0x200001d0

08001510 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001524:	463b      	mov	r3, r7
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <MX_TIM3_Init+0x94>)
 800152e:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <MX_TIM3_Init+0x98>)
 8001530:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <MX_TIM3_Init+0x94>)
 8001534:	2201      	movs	r2, #1
 8001536:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_TIM3_Init+0x94>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42000;
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <MX_TIM3_Init+0x94>)
 8001540:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001544:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <MX_TIM3_Init+0x94>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <MX_TIM3_Init+0x94>)
 800154e:	2280      	movs	r2, #128	; 0x80
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001552:	4814      	ldr	r0, [pc, #80]	; (80015a4 <MX_TIM3_Init+0x94>)
 8001554:	f004 fa92 	bl	8005a7c <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800155e:	f000 f98b 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001566:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001568:	f107 0308 	add.w	r3, r7, #8
 800156c:	4619      	mov	r1, r3
 800156e:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_TIM3_Init+0x94>)
 8001570:	f004 fd92 	bl	8006098 <HAL_TIM_ConfigClockSource>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800157a:	f000 f97d 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001586:	463b      	mov	r3, r7
 8001588:	4619      	mov	r1, r3
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <MX_TIM3_Init+0x94>)
 800158c:	f005 f964 	bl	8006858 <HAL_TIMEx_MasterConfigSynchronization>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001596:	f000 f96f 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000120 	.word	0x20000120
 80015a8:	40000400 	.word	0x40000400

080015ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08c      	sub	sp, #48	; 0x30
 80015b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	4ba5      	ldr	r3, [pc, #660]	; (800185c <MX_GPIO_Init+0x2b0>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4aa4      	ldr	r2, [pc, #656]	; (800185c <MX_GPIO_Init+0x2b0>)
 80015cc:	f043 0310 	orr.w	r3, r3, #16
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4ba2      	ldr	r3, [pc, #648]	; (800185c <MX_GPIO_Init+0x2b0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	61bb      	str	r3, [r7, #24]
 80015dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	4b9e      	ldr	r3, [pc, #632]	; (800185c <MX_GPIO_Init+0x2b0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a9d      	ldr	r2, [pc, #628]	; (800185c <MX_GPIO_Init+0x2b0>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b9b      	ldr	r3, [pc, #620]	; (800185c <MX_GPIO_Init+0x2b0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b97      	ldr	r3, [pc, #604]	; (800185c <MX_GPIO_Init+0x2b0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a96      	ldr	r2, [pc, #600]	; (800185c <MX_GPIO_Init+0x2b0>)
 8001604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b94      	ldr	r3, [pc, #592]	; (800185c <MX_GPIO_Init+0x2b0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b90      	ldr	r3, [pc, #576]	; (800185c <MX_GPIO_Init+0x2b0>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a8f      	ldr	r2, [pc, #572]	; (800185c <MX_GPIO_Init+0x2b0>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b8d      	ldr	r3, [pc, #564]	; (800185c <MX_GPIO_Init+0x2b0>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	4b89      	ldr	r3, [pc, #548]	; (800185c <MX_GPIO_Init+0x2b0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a88      	ldr	r2, [pc, #544]	; (800185c <MX_GPIO_Init+0x2b0>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b86      	ldr	r3, [pc, #536]	; (800185c <MX_GPIO_Init+0x2b0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b82      	ldr	r3, [pc, #520]	; (800185c <MX_GPIO_Init+0x2b0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a81      	ldr	r2, [pc, #516]	; (800185c <MX_GPIO_Init+0x2b0>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b7f      	ldr	r3, [pc, #508]	; (800185c <MX_GPIO_Init+0x2b0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 800166a:	2200      	movs	r2, #0
 800166c:	217c      	movs	r1, #124	; 0x7c
 800166e:	487c      	ldr	r0, [pc, #496]	; (8001860 <MX_GPIO_Init+0x2b4>)
 8001670:	f000 ff2e 	bl	80024d0 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001674:	2201      	movs	r2, #1
 8001676:	2101      	movs	r1, #1
 8001678:	487a      	ldr	r0, [pc, #488]	; (8001864 <MX_GPIO_Init+0x2b8>)
 800167a:	f000 ff29 	bl	80024d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 800167e:	2200      	movs	r2, #0
 8001680:	f64f 7110 	movw	r1, #65296	; 0xff10
 8001684:	4878      	ldr	r0, [pc, #480]	; (8001868 <MX_GPIO_Init+0x2bc>)
 8001686:	f000 ff23 	bl	80024d0 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001690:	4876      	ldr	r0, [pc, #472]	; (800186c <MX_GPIO_Init+0x2c0>)
 8001692:	f000 ff1d 	bl	80024d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8001696:	2374      	movs	r3, #116	; 0x74
 8001698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169a:	2301      	movs	r3, #1
 800169c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	486c      	ldr	r0, [pc, #432]	; (8001860 <MX_GPIO_Init+0x2b4>)
 80016ae:	f000 fd5b 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80016b2:	2308      	movs	r3, #8
 80016b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	4619      	mov	r1, r3
 80016c8:	4865      	ldr	r0, [pc, #404]	; (8001860 <MX_GPIO_Init+0x2b4>)
 80016ca:	f000 fd4d 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 80016ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	4619      	mov	r1, r3
 80016e2:	4860      	ldr	r0, [pc, #384]	; (8001864 <MX_GPIO_Init+0x2b8>)
 80016e4:	f000 fd40 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80016e8:	2301      	movs	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	4859      	ldr	r0, [pc, #356]	; (8001864 <MX_GPIO_Init+0x2b8>)
 8001700:	f000 fd32 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001704:	2308      	movs	r3, #8
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001714:	2305      	movs	r3, #5
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	4619      	mov	r1, r3
 800171e:	4851      	ldr	r0, [pc, #324]	; (8001864 <MX_GPIO_Init+0x2b8>)
 8001720:	f000 fd22 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001724:	2301      	movs	r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001728:	4b51      	ldr	r3, [pc, #324]	; (8001870 <MX_GPIO_Init+0x2c4>)
 800172a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	484f      	ldr	r0, [pc, #316]	; (8001874 <MX_GPIO_Init+0x2c8>)
 8001738:	f000 fd16 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800173c:	2304      	movs	r3, #4
 800173e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	4847      	ldr	r0, [pc, #284]	; (800186c <MX_GPIO_Init+0x2c0>)
 8001750:	f000 fd0a 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001766:	2305      	movs	r3, #5
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	4619      	mov	r1, r3
 8001770:	483e      	ldr	r0, [pc, #248]	; (800186c <MX_GPIO_Init+0x2c0>)
 8001772:	f000 fcf9 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001776:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800177a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001780:	2301      	movs	r3, #1
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	4838      	ldr	r0, [pc, #224]	; (800186c <MX_GPIO_Init+0x2c0>)
 800178c:	f000 fcec 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001790:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001794:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	482f      	ldr	r0, [pc, #188]	; (8001868 <MX_GPIO_Init+0x2bc>)
 80017aa:	f000 fcdd 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80017ae:	2320      	movs	r3, #32
 80017b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	4829      	ldr	r0, [pc, #164]	; (8001868 <MX_GPIO_Init+0x2bc>)
 80017c2:	f000 fcd1 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017c6:	2340      	movs	r3, #64	; 0x40
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	4619      	mov	r1, r3
 80017dc:	4823      	ldr	r0, [pc, #140]	; (800186c <MX_GPIO_Init+0x2c0>)
 80017de:	f000 fcc3 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 80017e2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e8:	2301      	movs	r3, #1
 80017ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4619      	mov	r1, r3
 80017fa:	481c      	ldr	r0, [pc, #112]	; (800186c <MX_GPIO_Init+0x2c0>)
 80017fc:	f000 fcb4 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001806:	2312      	movs	r3, #18
 8001808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800180a:	2301      	movs	r3, #1
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001812:	2304      	movs	r3, #4
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4619      	mov	r1, r3
 800181c:	4813      	ldr	r0, [pc, #76]	; (800186c <MX_GPIO_Init+0x2c0>)
 800181e:	f000 fca3 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001822:	2301      	movs	r3, #1
 8001824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	4619      	mov	r1, r3
 8001834:	480a      	ldr	r0, [pc, #40]	; (8001860 <MX_GPIO_Init+0x2b4>)
 8001836:	f000 fc97 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800183a:	2302      	movs	r3, #2
 800183c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_GPIO_Init+0x2c4>)
 8001840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <MX_GPIO_Init+0x2b4>)
 800184e:	f000 fc8b 	bl	8002168 <HAL_GPIO_Init>

}
 8001852:	bf00      	nop
 8001854:	3730      	adds	r7, #48	; 0x30
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40021000 	.word	0x40021000
 8001864:	40020800 	.word	0x40020800
 8001868:	40020c00 	.word	0x40020c00
 800186c:	40020400 	.word	0x40020400
 8001870:	10120000 	.word	0x10120000
 8001874:	40020000 	.word	0x40020000

08001878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800187c:	b672      	cpsid	i
}
 800187e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001880:	e7fe      	b.n	8001880 <Error_Handler+0x8>
	...

08001884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_MspInit+0x5c>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <HAL_MspInit+0x5c>)
 8001894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001898:	6453      	str	r3, [r2, #68]	; 0x44
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_MspInit+0x5c>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_MspInit+0x5c>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	4a0c      	ldr	r2, [pc, #48]	; (80018e0 <HAL_MspInit+0x5c>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6413      	str	r3, [r2, #64]	; 0x40
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_MspInit+0x5c>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018c2:	2007      	movs	r0, #7
 80018c4:	f000 fc0e 	bl	80020e4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2100      	movs	r1, #0
 80018cc:	2005      	movs	r0, #5
 80018ce:	f000 fc14 	bl	80020fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80018d2:	2005      	movs	r0, #5
 80018d4:	f000 fc2d 	bl	8002132 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40023800 	.word	0x40023800

080018e4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <HAL_I2S_MspInit+0xc0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d14a      	bne.n	800199c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <HAL_I2S_MspInit+0xc4>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <HAL_I2S_MspInit+0xc4>)
 8001910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001914:	6413      	str	r3, [r2, #64]	; 0x40
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_I2S_MspInit+0xc4>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_I2S_MspInit+0xc4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a1f      	ldr	r2, [pc, #124]	; (80019a8 <HAL_I2S_MspInit+0xc4>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <HAL_I2S_MspInit+0xc4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_I2S_MspInit+0xc4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <HAL_I2S_MspInit+0xc4>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <HAL_I2S_MspInit+0xc4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800195a:	2310      	movs	r3, #16
 800195c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800196a:	2306      	movs	r3, #6
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	480d      	ldr	r0, [pc, #52]	; (80019ac <HAL_I2S_MspInit+0xc8>)
 8001976:	f000 fbf7 	bl	8002168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800197a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800198c:	2306      	movs	r3, #6
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <HAL_I2S_MspInit+0xcc>)
 8001998:	f000 fbe6 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800199c:	bf00      	nop
 800199e:	3728      	adds	r7, #40	; 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40003c00 	.word	0x40003c00
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40020800 	.word	0x40020800

080019b4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <HAL_RNG_MspInit+0x3c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10d      	bne.n	80019e2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_RNG_MspInit+0x40>)
 80019cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <HAL_RNG_MspInit+0x40>)
 80019d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019d4:	6353      	str	r3, [r2, #52]	; 0x34
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <HAL_RNG_MspInit+0x40>)
 80019d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	50060800 	.word	0x50060800
 80019f4:	40023800 	.word	0x40023800

080019f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08c      	sub	sp, #48	; 0x30
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a41      	ldr	r2, [pc, #260]	; (8001b1c <HAL_SPI_MspInit+0x124>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d12c      	bne.n	8001a74 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <HAL_SPI_MspInit+0x128>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a3f      	ldr	r2, [pc, #252]	; (8001b20 <HAL_SPI_MspInit+0x128>)
 8001a24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_SPI_MspInit+0x128>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <HAL_SPI_MspInit+0x128>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a38      	ldr	r2, [pc, #224]	; (8001b20 <HAL_SPI_MspInit+0x128>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b36      	ldr	r3, [pc, #216]	; (8001b20 <HAL_SPI_MspInit+0x128>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001a52:	23e0      	movs	r3, #224	; 0xe0
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a62:	2305      	movs	r3, #5
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 031c 	add.w	r3, r7, #28
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	482d      	ldr	r0, [pc, #180]	; (8001b24 <HAL_SPI_MspInit+0x12c>)
 8001a6e:	f000 fb7b 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a72:	e04f      	b.n	8001b14 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a2b      	ldr	r2, [pc, #172]	; (8001b28 <HAL_SPI_MspInit+0x130>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d14a      	bne.n	8001b14 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <HAL_SPI_MspInit+0x128>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a26      	ldr	r2, [pc, #152]	; (8001b20 <HAL_SPI_MspInit+0x128>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <HAL_SPI_MspInit+0x128>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_SPI_MspInit+0x128>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <HAL_SPI_MspInit+0x128>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_SPI_MspInit+0x128>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_SPI_MspInit+0x128>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <HAL_SPI_MspInit+0x128>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_SPI_MspInit+0x128>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae6:	f107 031c 	add.w	r3, r7, #28
 8001aea:	4619      	mov	r1, r3
 8001aec:	480f      	ldr	r0, [pc, #60]	; (8001b2c <HAL_SPI_MspInit+0x134>)
 8001aee:	f000 fb3b 	bl	8002168 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001af2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b04:	2305      	movs	r3, #5
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4808      	ldr	r0, [pc, #32]	; (8001b30 <HAL_SPI_MspInit+0x138>)
 8001b10:	f000 fb2a 	bl	8002168 <HAL_GPIO_Init>
}
 8001b14:	bf00      	nop
 8001b16:	3730      	adds	r7, #48	; 0x30
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40013000 	.word	0x40013000
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020000 	.word	0x40020000
 8001b28:	40003800 	.word	0x40003800
 8001b2c:	40020800 	.word	0x40020800
 8001b30:	40020400 	.word	0x40020400

08001b34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b44:	d10e      	bne.n	8001b64 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <HAL_TIM_Base_MspInit+0x70>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <HAL_TIM_Base_MspInit+0x70>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6413      	str	r3, [r2, #64]	; 0x40
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <HAL_TIM_Base_MspInit+0x70>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b62:	e01a      	b.n	8001b9a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <HAL_TIM_Base_MspInit+0x74>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d115      	bne.n	8001b9a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <HAL_TIM_Base_MspInit+0x70>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <HAL_TIM_Base_MspInit+0x70>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_TIM_Base_MspInit+0x70>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	201d      	movs	r0, #29
 8001b90:	f000 fab3 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b94:	201d      	movs	r0, #29
 8001b96:	f000 facc 	bl	8002132 <HAL_NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40000400 	.word	0x40000400

08001bac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bcc:	d11e      	bne.n	8001c0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <HAL_TIM_MspPostInit+0x68>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a0f      	ldr	r2, [pc, #60]	; (8001c14 <HAL_TIM_MspPostInit+0x68>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_TIM_MspPostInit+0x68>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	4619      	mov	r1, r3
 8001c06:	4804      	ldr	r0, [pc, #16]	; (8001c18 <HAL_TIM_MspPostInit+0x6c>)
 8001c08:	f000 faae 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020000 	.word	0x40020000

08001c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <NMI_Handler+0x4>

08001c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c26:	e7fe      	b.n	8001c26 <HardFault_Handler+0x4>

08001c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <MemManage_Handler+0x4>

08001c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c32:	e7fe      	b.n	8001c32 <BusFault_Handler+0x4>

08001c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <UsageFault_Handler+0x4>

08001c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c68:	f000 f928 	bl	8001ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 8001c84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c88:	481b      	ldr	r0, [pc, #108]	; (8001cf8 <TIM2_IRQHandler+0x78>)
 8001c8a:	f000 fc3a 	bl	8002502 <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <TIM2_IRQHandler+0x7c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d111      	bne.n	8001cba <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <TIM2_IRQHandler+0x80>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2bc8      	cmp	r3, #200	; 0xc8
 8001c9c:	dc0a      	bgt.n	8001cb4 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <TIM2_IRQHandler+0x80>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <TIM2_IRQHandler+0x84>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 8001ca8:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <TIM2_IRQHandler+0x80>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <TIM2_IRQHandler+0x80>)
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e002      	b.n	8001cba <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <TIM2_IRQHandler+0x7c>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <TIM2_IRQHandler+0x7c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d114      	bne.n	8001cec <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <TIM2_IRQHandler+0x80>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b63      	cmp	r3, #99	; 0x63
 8001cc8:	dd0a      	ble.n	8001ce0 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <TIM2_IRQHandler+0x80>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <TIM2_IRQHandler+0x84>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <TIM2_IRQHandler+0x80>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <TIM2_IRQHandler+0x80>)
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e005      	b.n	8001cec <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <TIM2_IRQHandler+0x7c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
		  i = 100;
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <TIM2_IRQHandler+0x80>)
 8001ce8:	2264      	movs	r2, #100	; 0x64
 8001cea:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cec:	4805      	ldr	r0, [pc, #20]	; (8001d04 <TIM2_IRQHandler+0x84>)
 8001cee:	f004 f80d 	bl	8005d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40020c00 	.word	0x40020c00
 8001cfc:	200000b4 	.word	0x200000b4
 8001d00:	20000004 	.word	0x20000004
 8001d04:	200001d0 	.word	0x200001d0

08001d08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);

	keyboard_test();
 8001d0c:	f7ff f85e 	bl	8000dcc <keyboard_test>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <TIM3_IRQHandler+0x14>)
 8001d12:	f003 fffb 	bl	8005d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000120 	.word	0x20000120

08001d20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <OTG_FS_IRQHandler+0x10>)
 8001d26:	f000 fe71 	bl	8002a0c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	2000063c 	.word	0x2000063c

08001d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <_sbrk+0x5c>)
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <_sbrk+0x60>)
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <_sbrk+0x64>)
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <_sbrk+0x68>)
 8001d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d207      	bcs.n	8001d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d64:	f007 ff70 	bl	8009c48 <__errno>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d72:	e009      	b.n	8001d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <_sbrk+0x64>)
 8001d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d86:	68fb      	ldr	r3, [r7, #12]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20020000 	.word	0x20020000
 8001d94:	00000400 	.word	0x00000400
 8001d98:	200000b8 	.word	0x200000b8
 8001d9c:	20000950 	.word	0x20000950

08001da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <SystemInit+0x20>)
 8001da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <SystemInit+0x20>)
 8001dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dc8:	480d      	ldr	r0, [pc, #52]	; (8001e00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dca:	490e      	ldr	r1, [pc, #56]	; (8001e04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dcc:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd0:	e002      	b.n	8001dd8 <LoopCopyDataInit>

08001dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd6:	3304      	adds	r3, #4

08001dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ddc:	d3f9      	bcc.n	8001dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dde:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001de0:	4c0b      	ldr	r4, [pc, #44]	; (8001e10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de4:	e001      	b.n	8001dea <LoopFillZerobss>

08001de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de8:	3204      	adds	r2, #4

08001dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dec:	d3fb      	bcc.n	8001de6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dee:	f7ff ffd7 	bl	8001da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001df2:	f007 ff2f 	bl	8009c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001df6:	f7ff f993 	bl	8001120 <main>
  bx  lr    
 8001dfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e04:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001e08:	08009e98 	.word	0x08009e98
  ldr r2, =_sbss
 8001e0c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001e10:	20000950 	.word	0x20000950

08001e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e14:	e7fe      	b.n	8001e14 <ADC_IRQHandler>
	...

08001e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <HAL_Init+0x40>)
 8001e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_Init+0x40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <HAL_Init+0x40>)
 8001e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_Init+0x40>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <HAL_Init+0x40>)
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e40:	2003      	movs	r0, #3
 8001e42:	f000 f94f 	bl	80020e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f000 f808 	bl	8001e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e4c:	f7ff fd1a 	bl	8001884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023c00 	.word	0x40023c00

08001e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_InitTick+0x54>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_InitTick+0x58>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f967 	bl	800214e <HAL_SYSTICK_Config>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00e      	b.n	8001ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	d80a      	bhi.n	8001ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e90:	2200      	movs	r2, #0
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e98:	f000 f92f 	bl	80020fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e9c:	4a06      	ldr	r2, [pc, #24]	; (8001eb8 <HAL_InitTick+0x5c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e000      	b.n	8001ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	20000010 	.word	0x20000010
 8001eb8:	2000000c 	.word	0x2000000c

08001ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_IncTick+0x20>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_IncTick+0x24>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_IncTick+0x24>)
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000010 	.word	0x20000010
 8001ee0:	20000260 	.word	0x20000260

08001ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_GetTick+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000260 	.word	0x20000260

08001efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f04:	f7ff ffee 	bl	8001ee4 <HAL_GetTick>
 8001f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f14:	d005      	beq.n	8001f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_Delay+0x44>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f22:	bf00      	nop
 8001f24:	f7ff ffde 	bl	8001ee4 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d8f7      	bhi.n	8001f24 <HAL_Delay+0x28>
  {
  }
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000010 	.word	0x20000010

08001f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f60:	4013      	ands	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f76:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	60d3      	str	r3, [r2, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 0307 	and.w	r3, r3, #7
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	db0b      	blt.n	8001fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f003 021f 	and.w	r2, r3, #31
 8001fc0:	4907      	ldr	r1, [pc, #28]	; (8001fe0 <__NVIC_EnableIRQ+0x38>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	2001      	movs	r0, #1
 8001fca:	fa00 f202 	lsl.w	r2, r0, r2
 8001fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000e100 	.word	0xe000e100

08001fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	; (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	; (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
         );
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b0:	d301      	bcc.n	80020b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00f      	b.n	80020d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <SysTick_Config+0x40>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020be:	210f      	movs	r1, #15
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020c4:	f7ff ff8e 	bl	8001fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <SysTick_Config+0x40>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <SysTick_Config+0x40>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff29 	bl	8001f44 <__NVIC_SetPriorityGrouping>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800210c:	f7ff ff3e 	bl	8001f8c <__NVIC_GetPriorityGrouping>
 8002110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	6978      	ldr	r0, [r7, #20]
 8002118:	f7ff ff8e 	bl	8002038 <NVIC_EncodePriority>
 800211c:	4602      	mov	r2, r0
 800211e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff5d 	bl	8001fe4 <__NVIC_SetPriority>
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff31 	bl	8001fa8 <__NVIC_EnableIRQ>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff ffa2 	bl	80020a0 <SysTick_Config>
 800215c:	4603      	mov	r3, r0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	e16b      	b.n	800245c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002184:	2201      	movs	r2, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	429a      	cmp	r2, r3
 800219e:	f040 815a 	bne.w	8002456 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d005      	beq.n	80021ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d130      	bne.n	800221c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	2203      	movs	r2, #3
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f0:	2201      	movs	r2, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 0201 	and.w	r2, r3, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b03      	cmp	r3, #3
 8002226:	d017      	beq.n	8002258 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d123      	bne.n	80022ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	08da      	lsrs	r2, r3, #3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3208      	adds	r2, #8
 800226c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	220f      	movs	r2, #15
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	08da      	lsrs	r2, r3, #3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3208      	adds	r2, #8
 80022a6:	69b9      	ldr	r1, [r7, #24]
 80022a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0203 	and.w	r2, r3, #3
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80b4 	beq.w	8002456 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	4b60      	ldr	r3, [pc, #384]	; (8002474 <HAL_GPIO_Init+0x30c>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	4a5f      	ldr	r2, [pc, #380]	; (8002474 <HAL_GPIO_Init+0x30c>)
 80022f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fc:	6453      	str	r3, [r2, #68]	; 0x44
 80022fe:	4b5d      	ldr	r3, [pc, #372]	; (8002474 <HAL_GPIO_Init+0x30c>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800230a:	4a5b      	ldr	r2, [pc, #364]	; (8002478 <HAL_GPIO_Init+0x310>)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3302      	adds	r3, #2
 8002312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	220f      	movs	r2, #15
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a52      	ldr	r2, [pc, #328]	; (800247c <HAL_GPIO_Init+0x314>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d02b      	beq.n	800238e <HAL_GPIO_Init+0x226>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a51      	ldr	r2, [pc, #324]	; (8002480 <HAL_GPIO_Init+0x318>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d025      	beq.n	800238a <HAL_GPIO_Init+0x222>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a50      	ldr	r2, [pc, #320]	; (8002484 <HAL_GPIO_Init+0x31c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01f      	beq.n	8002386 <HAL_GPIO_Init+0x21e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4f      	ldr	r2, [pc, #316]	; (8002488 <HAL_GPIO_Init+0x320>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d019      	beq.n	8002382 <HAL_GPIO_Init+0x21a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4e      	ldr	r2, [pc, #312]	; (800248c <HAL_GPIO_Init+0x324>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d013      	beq.n	800237e <HAL_GPIO_Init+0x216>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4d      	ldr	r2, [pc, #308]	; (8002490 <HAL_GPIO_Init+0x328>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00d      	beq.n	800237a <HAL_GPIO_Init+0x212>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4c      	ldr	r2, [pc, #304]	; (8002494 <HAL_GPIO_Init+0x32c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d007      	beq.n	8002376 <HAL_GPIO_Init+0x20e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4b      	ldr	r2, [pc, #300]	; (8002498 <HAL_GPIO_Init+0x330>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d101      	bne.n	8002372 <HAL_GPIO_Init+0x20a>
 800236e:	2307      	movs	r3, #7
 8002370:	e00e      	b.n	8002390 <HAL_GPIO_Init+0x228>
 8002372:	2308      	movs	r3, #8
 8002374:	e00c      	b.n	8002390 <HAL_GPIO_Init+0x228>
 8002376:	2306      	movs	r3, #6
 8002378:	e00a      	b.n	8002390 <HAL_GPIO_Init+0x228>
 800237a:	2305      	movs	r3, #5
 800237c:	e008      	b.n	8002390 <HAL_GPIO_Init+0x228>
 800237e:	2304      	movs	r3, #4
 8002380:	e006      	b.n	8002390 <HAL_GPIO_Init+0x228>
 8002382:	2303      	movs	r3, #3
 8002384:	e004      	b.n	8002390 <HAL_GPIO_Init+0x228>
 8002386:	2302      	movs	r3, #2
 8002388:	e002      	b.n	8002390 <HAL_GPIO_Init+0x228>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_GPIO_Init+0x228>
 800238e:	2300      	movs	r3, #0
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	f002 0203 	and.w	r2, r2, #3
 8002396:	0092      	lsls	r2, r2, #2
 8002398:	4093      	lsls	r3, r2
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023a0:	4935      	ldr	r1, [pc, #212]	; (8002478 <HAL_GPIO_Init+0x310>)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3302      	adds	r3, #2
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ae:	4b3b      	ldr	r3, [pc, #236]	; (800249c <HAL_GPIO_Init+0x334>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023d2:	4a32      	ldr	r2, [pc, #200]	; (800249c <HAL_GPIO_Init+0x334>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023d8:	4b30      	ldr	r3, [pc, #192]	; (800249c <HAL_GPIO_Init+0x334>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023fc:	4a27      	ldr	r2, [pc, #156]	; (800249c <HAL_GPIO_Init+0x334>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002402:	4b26      	ldr	r3, [pc, #152]	; (800249c <HAL_GPIO_Init+0x334>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002426:	4a1d      	ldr	r2, [pc, #116]	; (800249c <HAL_GPIO_Init+0x334>)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800242c:	4b1b      	ldr	r3, [pc, #108]	; (800249c <HAL_GPIO_Init+0x334>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002450:	4a12      	ldr	r2, [pc, #72]	; (800249c <HAL_GPIO_Init+0x334>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3301      	adds	r3, #1
 800245a:	61fb      	str	r3, [r7, #28]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b0f      	cmp	r3, #15
 8002460:	f67f ae90 	bls.w	8002184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800
 8002478:	40013800 	.word	0x40013800
 800247c:	40020000 	.word	0x40020000
 8002480:	40020400 	.word	0x40020400
 8002484:	40020800 	.word	0x40020800
 8002488:	40020c00 	.word	0x40020c00
 800248c:	40021000 	.word	0x40021000
 8002490:	40021400 	.word	0x40021400
 8002494:	40021800 	.word	0x40021800
 8002498:	40021c00 	.word	0x40021c00
 800249c:	40013c00 	.word	0x40013c00

080024a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	887b      	ldrh	r3, [r7, #2]
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e001      	b.n	80024c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]
 80024dc:	4613      	mov	r3, r2
 80024de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024e0:	787b      	ldrb	r3, [r7, #1]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024ec:	e003      	b.n	80024f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ee:	887b      	ldrh	r3, [r7, #2]
 80024f0:	041a      	lsls	r2, r3, #16
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	619a      	str	r2, [r3, #24]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002502:	b480      	push	{r7}
 8002504:	b085      	sub	sp, #20
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	460b      	mov	r3, r1
 800250c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002514:	887a      	ldrh	r2, [r7, #2]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4013      	ands	r3, r2
 800251a:	041a      	lsls	r2, r3, #16
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	43d9      	mvns	r1, r3
 8002520:	887b      	ldrh	r3, [r7, #2]
 8002522:	400b      	ands	r3, r1
 8002524:	431a      	orrs	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	619a      	str	r2, [r3, #24]
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002536:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002538:	b08f      	sub	sp, #60	; 0x3c
 800253a:	af0a      	add	r7, sp, #40	; 0x28
 800253c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e054      	b.n	80025f2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f007 f8c6 	bl	80096f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2203      	movs	r2, #3
 800256c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f004 fa68 	bl	8006a5c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	687e      	ldr	r6, [r7, #4]
 8002594:	466d      	mov	r5, sp
 8002596:	f106 0410 	add.w	r4, r6, #16
 800259a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800259c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800259e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80025aa:	1d33      	adds	r3, r6, #4
 80025ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ae:	6838      	ldr	r0, [r7, #0]
 80025b0:	f004 f9e2 	bl	8006978 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2101      	movs	r1, #1
 80025ba:	4618      	mov	r0, r3
 80025bc:	f004 fa5f 	bl	8006a7e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	603b      	str	r3, [r7, #0]
 80025c6:	687e      	ldr	r6, [r7, #4]
 80025c8:	466d      	mov	r5, sp
 80025ca:	f106 0410 	add.w	r4, r6, #16
 80025ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025da:	e885 0003 	stmia.w	r5, {r0, r1}
 80025de:	1d33      	adds	r3, r6, #4
 80025e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e2:	6838      	ldr	r0, [r7, #0]
 80025e4:	f004 fb72 	bl	8006ccc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025fa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80025fa:	b590      	push	{r4, r7, lr}
 80025fc:	b089      	sub	sp, #36	; 0x24
 80025fe:	af04      	add	r7, sp, #16
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	4608      	mov	r0, r1
 8002604:	4611      	mov	r1, r2
 8002606:	461a      	mov	r2, r3
 8002608:	4603      	mov	r3, r0
 800260a:	70fb      	strb	r3, [r7, #3]
 800260c:	460b      	mov	r3, r1
 800260e:	70bb      	strb	r3, [r7, #2]
 8002610:	4613      	mov	r3, r2
 8002612:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_HCD_HC_Init+0x28>
 800261e:	2302      	movs	r3, #2
 8002620:	e076      	b.n	8002710 <HAL_HCD_HC_Init+0x116>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	333d      	adds	r3, #61	; 0x3d
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3338      	adds	r3, #56	; 0x38
 800264a:	787a      	ldrb	r2, [r7, #1]
 800264c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800264e:	78fb      	ldrb	r3, [r7, #3]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	212c      	movs	r1, #44	; 0x2c
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	4413      	add	r3, r2
 800265a:	3340      	adds	r3, #64	; 0x40
 800265c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800265e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	212c      	movs	r1, #44	; 0x2c
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	4413      	add	r3, r2
 800266c:	3339      	adds	r3, #57	; 0x39
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	333f      	adds	r3, #63	; 0x3f
 8002680:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002684:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	78ba      	ldrb	r2, [r7, #2]
 800268a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800268e:	b2d0      	uxtb	r0, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	212c      	movs	r1, #44	; 0x2c
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	4413      	add	r3, r2
 800269a:	333a      	adds	r3, #58	; 0x3a
 800269c:	4602      	mov	r2, r0
 800269e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80026a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	da09      	bge.n	80026bc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	212c      	movs	r1, #44	; 0x2c
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	333b      	adds	r3, #59	; 0x3b
 80026b6:	2201      	movs	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e008      	b.n	80026ce <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	333b      	adds	r3, #59	; 0x3b
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	333c      	adds	r3, #60	; 0x3c
 80026dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80026e0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	787c      	ldrb	r4, [r7, #1]
 80026e8:	78ba      	ldrb	r2, [r7, #2]
 80026ea:	78f9      	ldrb	r1, [r7, #3]
 80026ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026ee:	9302      	str	r3, [sp, #8]
 80026f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026f4:	9301      	str	r3, [sp, #4]
 80026f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	4623      	mov	r3, r4
 80026fe:	f004 fc67 	bl	8006fd0 <USB_HC_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800270e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	bd90      	pop	{r4, r7, pc}

08002718 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_HCD_HC_Halt+0x1e>
 8002732:	2302      	movs	r3, #2
 8002734:	e00f      	b.n	8002756 <HAL_HCD_HC_Halt+0x3e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	4611      	mov	r1, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f004 fea3 	bl	8007492 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002754:	7bfb      	ldrb	r3, [r7, #15]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	4608      	mov	r0, r1
 800276a:	4611      	mov	r1, r2
 800276c:	461a      	mov	r2, r3
 800276e:	4603      	mov	r3, r0
 8002770:	70fb      	strb	r3, [r7, #3]
 8002772:	460b      	mov	r3, r1
 8002774:	70bb      	strb	r3, [r7, #2]
 8002776:	4613      	mov	r3, r2
 8002778:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	333b      	adds	r3, #59	; 0x3b
 8002788:	78ba      	ldrb	r2, [r7, #2]
 800278a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	4413      	add	r3, r2
 8002798:	333f      	adds	r3, #63	; 0x3f
 800279a:	787a      	ldrb	r2, [r7, #1]
 800279c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800279e:	7c3b      	ldrb	r3, [r7, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d112      	bne.n	80027ca <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	3342      	adds	r3, #66	; 0x42
 80027b2:	2203      	movs	r2, #3
 80027b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	333d      	adds	r3, #61	; 0x3d
 80027c4:	7f3a      	ldrb	r2, [r7, #28]
 80027c6:	701a      	strb	r2, [r3, #0]
 80027c8:	e008      	b.n	80027dc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	3342      	adds	r3, #66	; 0x42
 80027d8:	2202      	movs	r2, #2
 80027da:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80027dc:	787b      	ldrb	r3, [r7, #1]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	f200 80c6 	bhi.w	8002970 <HAL_HCD_HC_SubmitRequest+0x210>
 80027e4:	a201      	add	r2, pc, #4	; (adr r2, 80027ec <HAL_HCD_HC_SubmitRequest+0x8c>)
 80027e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ea:	bf00      	nop
 80027ec:	080027fd 	.word	0x080027fd
 80027f0:	0800295d 	.word	0x0800295d
 80027f4:	08002861 	.word	0x08002861
 80027f8:	080028df 	.word	0x080028df
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80027fc:	7c3b      	ldrb	r3, [r7, #16]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	f040 80b8 	bne.w	8002974 <HAL_HCD_HC_SubmitRequest+0x214>
 8002804:	78bb      	ldrb	r3, [r7, #2]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f040 80b4 	bne.w	8002974 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800280c:	8b3b      	ldrh	r3, [r7, #24]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d108      	bne.n	8002824 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	3355      	adds	r3, #85	; 0x55
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	3355      	adds	r3, #85	; 0x55
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d109      	bne.n	800284c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	212c      	movs	r1, #44	; 0x2c
 800283e:	fb01 f303 	mul.w	r3, r1, r3
 8002842:	4413      	add	r3, r2
 8002844:	3342      	adds	r3, #66	; 0x42
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800284a:	e093      	b.n	8002974 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	212c      	movs	r1, #44	; 0x2c
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	4413      	add	r3, r2
 8002858:	3342      	adds	r3, #66	; 0x42
 800285a:	2202      	movs	r2, #2
 800285c:	701a      	strb	r2, [r3, #0]
      break;
 800285e:	e089      	b.n	8002974 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002860:	78bb      	ldrb	r3, [r7, #2]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d11d      	bne.n	80028a2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	212c      	movs	r1, #44	; 0x2c
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	3355      	adds	r3, #85	; 0x55
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800287a:	78fb      	ldrb	r3, [r7, #3]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	212c      	movs	r1, #44	; 0x2c
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	3342      	adds	r3, #66	; 0x42
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800288c:	e073      	b.n	8002976 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	212c      	movs	r1, #44	; 0x2c
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	4413      	add	r3, r2
 800289a:	3342      	adds	r3, #66	; 0x42
 800289c:	2202      	movs	r2, #2
 800289e:	701a      	strb	r2, [r3, #0]
      break;
 80028a0:	e069      	b.n	8002976 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3354      	adds	r3, #84	; 0x54
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	212c      	movs	r1, #44	; 0x2c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	3342      	adds	r3, #66	; 0x42
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
      break;
 80028c8:	e055      	b.n	8002976 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	3342      	adds	r3, #66	; 0x42
 80028d8:	2202      	movs	r2, #2
 80028da:	701a      	strb	r2, [r3, #0]
      break;
 80028dc:	e04b      	b.n	8002976 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80028de:	78bb      	ldrb	r3, [r7, #2]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d11d      	bne.n	8002920 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	212c      	movs	r1, #44	; 0x2c
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	3355      	adds	r3, #85	; 0x55
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d109      	bne.n	800290c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	3342      	adds	r3, #66	; 0x42
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800290a:	e034      	b.n	8002976 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	212c      	movs	r1, #44	; 0x2c
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	4413      	add	r3, r2
 8002918:	3342      	adds	r3, #66	; 0x42
 800291a:	2202      	movs	r2, #2
 800291c:	701a      	strb	r2, [r3, #0]
      break;
 800291e:	e02a      	b.n	8002976 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	3354      	adds	r3, #84	; 0x54
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d109      	bne.n	8002948 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002934:	78fb      	ldrb	r3, [r7, #3]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	212c      	movs	r1, #44	; 0x2c
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	4413      	add	r3, r2
 8002940:	3342      	adds	r3, #66	; 0x42
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
      break;
 8002946:	e016      	b.n	8002976 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	212c      	movs	r1, #44	; 0x2c
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	3342      	adds	r3, #66	; 0x42
 8002956:	2202      	movs	r2, #2
 8002958:	701a      	strb	r2, [r3, #0]
      break;
 800295a:	e00c      	b.n	8002976 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	212c      	movs	r1, #44	; 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	3342      	adds	r3, #66	; 0x42
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
      break;
 800296e:	e002      	b.n	8002976 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002970:	bf00      	nop
 8002972:	e000      	b.n	8002976 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002974:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	3344      	adds	r3, #68	; 0x44
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	8b3a      	ldrh	r2, [r7, #24]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	202c      	movs	r0, #44	; 0x2c
 8002990:	fb00 f303 	mul.w	r3, r0, r3
 8002994:	440b      	add	r3, r1
 8002996:	334c      	adds	r3, #76	; 0x4c
 8002998:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3360      	adds	r3, #96	; 0x60
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3350      	adds	r3, #80	; 0x50
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	3339      	adds	r3, #57	; 0x39
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	3361      	adds	r3, #97	; 0x61
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	222c      	movs	r2, #44	; 0x2c
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	3338      	adds	r3, #56	; 0x38
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	18d1      	adds	r1, r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	f004 fbf6 	bl	80071ec <USB_HC_StartXfer>
 8002a00:	4603      	mov	r3, r0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop

08002a0c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f004 f90f 	bl	8006c46 <USB_GetMode>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	f040 80ef 	bne.w	8002c0e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f004 f8f3 	bl	8006c20 <USB_ReadInterrupts>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80e5 	beq.w	8002c0c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f004 f8ea 	bl	8006c20 <USB_ReadInterrupts>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a56:	d104      	bne.n	8002a62 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f004 f8da 	bl	8006c20 <USB_ReadInterrupts>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a76:	d104      	bne.n	8002a82 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f004 f8ca 	bl	8006c20 <USB_ReadInterrupts>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a96:	d104      	bne.n	8002aa2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002aa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f004 f8ba 	bl	8006c20 <USB_ReadInterrupts>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d103      	bne.n	8002abe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2202      	movs	r2, #2
 8002abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f004 f8ac 	bl	8006c20 <USB_ReadInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad2:	d115      	bne.n	8002b00 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002adc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d108      	bne.n	8002b00 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f006 fe7e 	bl	80097f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2101      	movs	r1, #1
 8002afa:	4618      	mov	r0, r3
 8002afc:	f004 f9a2 	bl	8006e44 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f004 f88b 	bl	8006c20 <USB_ReadInterrupts>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b14:	d102      	bne.n	8002b1c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f001 f9ff 	bl	8003f1a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f004 f87d 	bl	8006c20 <USB_ReadInterrupts>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d106      	bne.n	8002b3e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f006 fe41 	bl	80097b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f004 f86c 	bl	8006c20 <USB_ReadInterrupts>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	2b10      	cmp	r3, #16
 8002b50:	d101      	bne.n	8002b56 <HAL_HCD_IRQHandler+0x14a>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_HCD_IRQHandler+0x14c>
 8002b56:	2300      	movs	r3, #0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d012      	beq.n	8002b82 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0210 	bic.w	r2, r2, #16
 8002b6a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f001 f902 	bl	8003d76 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699a      	ldr	r2, [r3, #24]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0210 	orr.w	r2, r2, #16
 8002b80:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f004 f84a 	bl	8006c20 <USB_ReadInterrupts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b96:	d13a      	bne.n	8002c0e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f004 fc67 	bl	8007470 <USB_HC_ReadInterrupt>
 8002ba2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e025      	b.n	8002bf6 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d018      	beq.n	8002bf0 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd4:	d106      	bne.n	8002be4 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f8ab 	bl	8002d38 <HCD_HC_IN_IRQHandler>
 8002be2:	e005      	b.n	8002bf0 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	4619      	mov	r1, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fcc6 	bl	800357c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d3d4      	bcc.n	8002baa <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c08:	615a      	str	r2, [r3, #20]
 8002c0a:	e000      	b.n	8002c0e <HAL_HCD_IRQHandler+0x202>
      return;
 8002c0c:	bf00      	nop
    }
  }
}
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_HCD_Start+0x16>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e013      	b.n	8002c52 <HAL_HCD_Start+0x3e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 feff 	bl	8006a3a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2101      	movs	r1, #1
 8002c42:	4618      	mov	r0, r3
 8002c44:	f004 f962 	bl	8006f0c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_HCD_Stop+0x16>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e00d      	b.n	8002c8c <HAL_HCD_Stop+0x32>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f004 fd61 	bl	8007744 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f004 f909 	bl	8006eb8 <USB_ResetPort>
 8002ca6:	4603      	mov	r3, r0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3360      	adds	r3, #96	; 0x60
 8002cca:	781b      	ldrb	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3350      	adds	r3, #80	; 0x50
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f004 f94d 	bl	8006fac <USB_GetCurrentFrame>
 8002d12:	4603      	mov	r3, r0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f004 f928 	bl	8006f7e <USB_GetHostSpeed>
 8002d2e:	4603      	mov	r3, r0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d119      	bne.n	8002d9c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d74:	461a      	mov	r2, r3
 8002d76:	2304      	movs	r3, #4
 8002d78:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	0151      	lsls	r1, r2, #5
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	440a      	add	r2, r1
 8002d90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	60d3      	str	r3, [r2, #12]
 8002d9a:	e101      	b.n	8002fa0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db2:	d12b      	bne.n	8002e0c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3361      	adds	r3, #97	; 0x61
 8002dd6:	2207      	movs	r2, #7
 8002dd8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	0151      	lsls	r1, r2, #5
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	440a      	add	r2, r1
 8002df0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002df4:	f043 0302 	orr.w	r3, r3, #2
 8002df8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f004 fb44 	bl	8007492 <USB_HC_Halt>
 8002e0a:	e0c9      	b.n	8002fa0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d109      	bne.n	8002e36 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2320      	movs	r3, #32
 8002e32:	6093      	str	r3, [r2, #8]
 8002e34:	e0b4      	b.n	8002fa0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d133      	bne.n	8002eb4 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	0151      	lsls	r1, r2, #5
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	440a      	add	r2, r1
 8002e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e66:	f043 0302 	orr.w	r3, r3, #2
 8002e6a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	212c      	movs	r1, #44	; 0x2c
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	3361      	adds	r3, #97	; 0x61
 8002e7a:	2205      	movs	r2, #5
 8002e7c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f004 faf0 	bl	8007492 <USB_HC_Halt>
 8002eb2:	e075      	b.n	8002fa0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eca:	d134      	bne.n	8002f36 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	0151      	lsls	r1, r2, #5
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	440a      	add	r2, r1
 8002ee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ee6:	f043 0302 	orr.w	r3, r3, #2
 8002eea:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3361      	adds	r3, #97	; 0x61
 8002efa:	2208      	movs	r2, #8
 8002efc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f22:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f004 faaf 	bl	8007492 <USB_HC_Halt>
 8002f34:	e034      	b.n	8002fa0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f48:	2b80      	cmp	r3, #128	; 0x80
 8002f4a:	d129      	bne.n	8002fa0 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	0151      	lsls	r1, r2, #5
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	440a      	add	r2, r1
 8002f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f66:	f043 0302 	orr.w	r3, r3, #2
 8002f6a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	212c      	movs	r1, #44	; 0x2c
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	3361      	adds	r3, #97	; 0x61
 8002f7a:	2206      	movs	r2, #6
 8002f7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f004 fa82 	bl	8007492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb6:	d122      	bne.n	8002ffe <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	0151      	lsls	r1, r2, #5
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	440a      	add	r2, r1
 8002fce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fd2:	f043 0302 	orr.w	r3, r3, #2
 8002fd6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f004 fa55 	bl	8007492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ffa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ffc:	e2ba      	b.n	8003574 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	f040 811b 	bne.w	800324c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d019      	beq.n	8003052 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	212c      	movs	r1, #44	; 0x2c
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	4413      	add	r3, r2
 800302a:	3348      	adds	r3, #72	; 0x48
 800302c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	0159      	lsls	r1, r3, #5
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	440b      	add	r3, r1
 8003036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003040:	1ad2      	subs	r2, r2, r3
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	202c      	movs	r0, #44	; 0x2c
 8003048:	fb00 f303 	mul.w	r3, r0, r3
 800304c:	440b      	add	r3, r1
 800304e:	3350      	adds	r3, #80	; 0x50
 8003050:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	3361      	adds	r3, #97	; 0x61
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	212c      	movs	r1, #44	; 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	335c      	adds	r3, #92	; 0x5c
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4413      	add	r3, r2
 800307e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003082:	461a      	mov	r2, r3
 8003084:	2301      	movs	r3, #1
 8003086:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	333f      	adds	r3, #63	; 0x3f
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d009      	beq.n	80030b0 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	212c      	movs	r1, #44	; 0x2c
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	333f      	adds	r3, #63	; 0x3f
 80030aa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d121      	bne.n	80030f4 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	0151      	lsls	r1, r2, #5
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	440a      	add	r2, r1
 80030c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030ca:	f043 0302 	orr.w	r3, r3, #2
 80030ce:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	4611      	mov	r1, r2
 80030da:	4618      	mov	r0, r3
 80030dc:	f004 f9d9 	bl	8007492 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ec:	461a      	mov	r2, r3
 80030ee:	2310      	movs	r3, #16
 80030f0:	6093      	str	r3, [r2, #8]
 80030f2:	e066      	b.n	80031c2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	333f      	adds	r3, #63	; 0x3f
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b03      	cmp	r3, #3
 8003106:	d127      	bne.n	8003158 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4413      	add	r3, r2
 8003110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	0151      	lsls	r1, r2, #5
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	440a      	add	r2, r1
 800311e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003122:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003126:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3360      	adds	r3, #96	; 0x60
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	b2d9      	uxtb	r1, r3
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	202c      	movs	r0, #44	; 0x2c
 8003144:	fb00 f303 	mul.w	r3, r0, r3
 8003148:	4413      	add	r3, r2
 800314a:	3360      	adds	r3, #96	; 0x60
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f006 fb5b 	bl	800980c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003156:	e034      	b.n	80031c2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	333f      	adds	r3, #63	; 0x3f
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d12a      	bne.n	80031c2 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	4413      	add	r3, r2
 8003178:	3360      	adds	r3, #96	; 0x60
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	212c      	movs	r1, #44	; 0x2c
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	3354      	adds	r3, #84	; 0x54
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	f083 0301 	eor.w	r3, r3, #1
 8003192:	b2d8      	uxtb	r0, r3
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	212c      	movs	r1, #44	; 0x2c
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	4413      	add	r3, r2
 80031a0:	3354      	adds	r3, #84	; 0x54
 80031a2:	4602      	mov	r2, r0
 80031a4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	b2d9      	uxtb	r1, r3
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	202c      	movs	r0, #44	; 0x2c
 80031b0:	fb00 f303 	mul.w	r3, r0, r3
 80031b4:	4413      	add	r3, r2
 80031b6:	3360      	adds	r3, #96	; 0x60
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f006 fb25 	bl	800980c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d12b      	bne.n	8003222 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	212c      	movs	r1, #44	; 0x2c
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	3348      	adds	r3, #72	; 0x48
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	202c      	movs	r0, #44	; 0x2c
 80031e0:	fb00 f202 	mul.w	r2, r0, r2
 80031e4:	440a      	add	r2, r1
 80031e6:	3240      	adds	r2, #64	; 0x40
 80031e8:	8812      	ldrh	r2, [r2, #0]
 80031ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 81be 	beq.w	8003574 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	212c      	movs	r1, #44	; 0x2c
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	4413      	add	r3, r2
 8003204:	3354      	adds	r3, #84	; 0x54
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	f083 0301 	eor.w	r3, r3, #1
 800320c:	b2d8      	uxtb	r0, r3
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	212c      	movs	r1, #44	; 0x2c
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	4413      	add	r3, r2
 800321a:	3354      	adds	r3, #84	; 0x54
 800321c:	4602      	mov	r2, r0
 800321e:	701a      	strb	r2, [r3, #0]
}
 8003220:	e1a8      	b.n	8003574 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	212c      	movs	r1, #44	; 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	3354      	adds	r3, #84	; 0x54
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	f083 0301 	eor.w	r3, r3, #1
 8003236:	b2d8      	uxtb	r0, r3
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	3354      	adds	r3, #84	; 0x54
 8003246:	4602      	mov	r2, r0
 8003248:	701a      	strb	r2, [r3, #0]
}
 800324a:	e193      	b.n	8003574 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4413      	add	r3, r2
 8003254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b02      	cmp	r3, #2
 8003260:	f040 8106 	bne.w	8003470 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	4413      	add	r3, r2
 800326c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	0151      	lsls	r1, r2, #5
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	440a      	add	r2, r1
 800327a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800327e:	f023 0302 	bic.w	r3, r3, #2
 8003282:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3361      	adds	r3, #97	; 0x61
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d109      	bne.n	80032ac <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	3360      	adds	r3, #96	; 0x60
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e0c9      	b.n	8003440 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3361      	adds	r3, #97	; 0x61
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b05      	cmp	r3, #5
 80032be:	d109      	bne.n	80032d4 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	3360      	adds	r3, #96	; 0x60
 80032ce:	2205      	movs	r2, #5
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	e0b5      	b.n	8003440 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	212c      	movs	r1, #44	; 0x2c
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	3361      	adds	r3, #97	; 0x61
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b06      	cmp	r3, #6
 80032e6:	d009      	beq.n	80032fc <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	3361      	adds	r3, #97	; 0x61
 80032f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d150      	bne.n	800339e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	335c      	adds	r3, #92	; 0x5c
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	202c      	movs	r0, #44	; 0x2c
 8003314:	fb00 f303 	mul.w	r3, r0, r3
 8003318:	440b      	add	r3, r1
 800331a:	335c      	adds	r3, #92	; 0x5c
 800331c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	212c      	movs	r1, #44	; 0x2c
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	4413      	add	r3, r2
 800332a:	335c      	adds	r3, #92	; 0x5c
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d912      	bls.n	8003358 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	212c      	movs	r1, #44	; 0x2c
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	4413      	add	r3, r2
 800333e:	335c      	adds	r3, #92	; 0x5c
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	212c      	movs	r1, #44	; 0x2c
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	4413      	add	r3, r2
 8003350:	3360      	adds	r3, #96	; 0x60
 8003352:	2204      	movs	r2, #4
 8003354:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003356:	e073      	b.n	8003440 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	212c      	movs	r1, #44	; 0x2c
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	4413      	add	r3, r2
 8003364:	3360      	adds	r3, #96	; 0x60
 8003366:	2202      	movs	r2, #2
 8003368:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4413      	add	r3, r2
 8003372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003380:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003388:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003396:	461a      	mov	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800339c:	e050      	b.n	8003440 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	212c      	movs	r1, #44	; 0x2c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	3361      	adds	r3, #97	; 0x61
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d122      	bne.n	80033f8 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	212c      	movs	r1, #44	; 0x2c
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	4413      	add	r3, r2
 80033be:	3360      	adds	r3, #96	; 0x60
 80033c0:	2202      	movs	r2, #2
 80033c2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033da:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033e2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f0:	461a      	mov	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	e023      	b.n	8003440 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	3361      	adds	r3, #97	; 0x61
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b07      	cmp	r3, #7
 800340a:	d119      	bne.n	8003440 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	212c      	movs	r1, #44	; 0x2c
 8003412:	fb01 f303 	mul.w	r3, r1, r3
 8003416:	4413      	add	r3, r2
 8003418:	335c      	adds	r3, #92	; 0x5c
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	202c      	movs	r0, #44	; 0x2c
 8003424:	fb00 f303 	mul.w	r3, r0, r3
 8003428:	440b      	add	r3, r1
 800342a:	335c      	adds	r3, #92	; 0x5c
 800342c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	212c      	movs	r1, #44	; 0x2c
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	4413      	add	r3, r2
 800343a:	3360      	adds	r3, #96	; 0x60
 800343c:	2204      	movs	r2, #4
 800343e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4413      	add	r3, r2
 8003448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344c:	461a      	mov	r2, r3
 800344e:	2302      	movs	r3, #2
 8003450:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	b2d9      	uxtb	r1, r3
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	202c      	movs	r0, #44	; 0x2c
 800345c:	fb00 f303 	mul.w	r3, r0, r3
 8003460:	4413      	add	r3, r2
 8003462:	3360      	adds	r3, #96	; 0x60
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f006 f9cf 	bl	800980c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800346e:	e081      	b.n	8003574 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b10      	cmp	r3, #16
 8003484:	d176      	bne.n	8003574 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	212c      	movs	r1, #44	; 0x2c
 800348c:	fb01 f303 	mul.w	r3, r1, r3
 8003490:	4413      	add	r3, r2
 8003492:	333f      	adds	r3, #63	; 0x3f
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d121      	bne.n	80034de <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	335c      	adds	r3, #92	; 0x5c
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	0151      	lsls	r1, r2, #5
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	440a      	add	r2, r1
 80034c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034c6:	f043 0302 	orr.w	r3, r3, #2
 80034ca:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	4611      	mov	r1, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f003 ffdb 	bl	8007492 <USB_HC_Halt>
 80034dc:	e041      	b.n	8003562 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	212c      	movs	r1, #44	; 0x2c
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	333f      	adds	r3, #63	; 0x3f
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	333f      	adds	r3, #63	; 0x3f
 8003500:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003502:	2b02      	cmp	r3, #2
 8003504:	d12d      	bne.n	8003562 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	212c      	movs	r1, #44	; 0x2c
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	4413      	add	r3, r2
 8003512:	335c      	adds	r3, #92	; 0x5c
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d120      	bne.n	8003562 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	212c      	movs	r1, #44	; 0x2c
 8003526:	fb01 f303 	mul.w	r3, r1, r3
 800352a:	4413      	add	r3, r2
 800352c:	3361      	adds	r3, #97	; 0x61
 800352e:	2203      	movs	r2, #3
 8003530:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4413      	add	r3, r2
 800353a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	0151      	lsls	r1, r2, #5
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	440a      	add	r2, r1
 8003548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800354c:	f043 0302 	orr.w	r3, r3, #2
 8003550:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	4611      	mov	r1, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f003 ff98 	bl	8007492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4413      	add	r3, r2
 800356a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356e:	461a      	mov	r2, r3
 8003570:	2310      	movs	r3, #16
 8003572:	6093      	str	r3, [r2, #8]
}
 8003574:	bf00      	nop
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	4413      	add	r3, r2
 800359e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d119      	bne.n	80035e0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b8:	461a      	mov	r2, r3
 80035ba:	2304      	movs	r3, #4
 80035bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	0151      	lsls	r1, r2, #5
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	440a      	add	r2, r1
 80035d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035d8:	f043 0302 	orr.w	r3, r3, #2
 80035dc:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80035de:	e3c6      	b.n	8003d6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d13e      	bne.n	8003674 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003602:	461a      	mov	r2, r3
 8003604:	2320      	movs	r3, #32
 8003606:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	212c      	movs	r1, #44	; 0x2c
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	4413      	add	r3, r2
 8003614:	333d      	adds	r3, #61	; 0x3d
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b01      	cmp	r3, #1
 800361a:	f040 83a8 	bne.w	8003d6e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	212c      	movs	r1, #44	; 0x2c
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	4413      	add	r3, r2
 800362a:	333d      	adds	r3, #61	; 0x3d
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	212c      	movs	r1, #44	; 0x2c
 8003636:	fb01 f303 	mul.w	r3, r1, r3
 800363a:	4413      	add	r3, r2
 800363c:	3360      	adds	r3, #96	; 0x60
 800363e:	2202      	movs	r2, #2
 8003640:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	4413      	add	r3, r2
 800364a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	0151      	lsls	r1, r2, #5
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	440a      	add	r2, r1
 8003658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800365c:	f043 0302 	orr.w	r3, r3, #2
 8003660:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f003 ff10 	bl	8007492 <USB_HC_Halt>
}
 8003672:	e37c      	b.n	8003d6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368a:	d122      	bne.n	80036d2 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	4413      	add	r3, r2
 8003694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	0151      	lsls	r1, r2, #5
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	440a      	add	r2, r1
 80036a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036a6:	f043 0302 	orr.w	r3, r3, #2
 80036aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f003 feeb 	bl	8007492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	461a      	mov	r2, r3
 80036ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ce:	6093      	str	r3, [r2, #8]
}
 80036d0:	e34d      	b.n	8003d6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d150      	bne.n	800378a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	212c      	movs	r1, #44	; 0x2c
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	335c      	adds	r3, #92	; 0x5c
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	4413      	add	r3, r2
 8003702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	d111      	bne.n	8003734 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	212c      	movs	r1, #44	; 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	333d      	adds	r3, #61	; 0x3d
 800371e:	2201      	movs	r2, #1
 8003720:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	4413      	add	r3, r2
 800372a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372e:	461a      	mov	r2, r3
 8003730:	2340      	movs	r3, #64	; 0x40
 8003732:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	4413      	add	r3, r2
 800373c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	0151      	lsls	r1, r2, #5
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	440a      	add	r2, r1
 800374a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800374e:	f043 0302 	orr.w	r3, r3, #2
 8003752:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	4611      	mov	r1, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f003 fe97 	bl	8007492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	4413      	add	r3, r2
 800376c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003770:	461a      	mov	r2, r3
 8003772:	2301      	movs	r3, #1
 8003774:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	212c      	movs	r1, #44	; 0x2c
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	4413      	add	r3, r2
 8003782:	3361      	adds	r3, #97	; 0x61
 8003784:	2201      	movs	r2, #1
 8003786:	701a      	strb	r2, [r3, #0]
}
 8003788:	e2f1      	b.n	8003d6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	4413      	add	r3, r2
 8003792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d13c      	bne.n	800381a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	212c      	movs	r1, #44	; 0x2c
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	3361      	adds	r3, #97	; 0x61
 80037ae:	2204      	movs	r2, #4
 80037b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	212c      	movs	r1, #44	; 0x2c
 80037b8:	fb01 f303 	mul.w	r3, r1, r3
 80037bc:	4413      	add	r3, r2
 80037be:	333d      	adds	r3, #61	; 0x3d
 80037c0:	2201      	movs	r2, #1
 80037c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	212c      	movs	r1, #44	; 0x2c
 80037ca:	fb01 f303 	mul.w	r3, r1, r3
 80037ce:	4413      	add	r3, r2
 80037d0:	335c      	adds	r3, #92	; 0x5c
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	0151      	lsls	r1, r2, #5
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	440a      	add	r2, r1
 80037ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037f0:	f043 0302 	orr.w	r3, r3, #2
 80037f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	4611      	mov	r1, r2
 8003800:	4618      	mov	r0, r3
 8003802:	f003 fe46 	bl	8007492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	4413      	add	r3, r2
 800380e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003812:	461a      	mov	r2, r3
 8003814:	2340      	movs	r3, #64	; 0x40
 8003816:	6093      	str	r3, [r2, #8]
}
 8003818:	e2a9      	b.n	8003d6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	4413      	add	r3, r2
 8003822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b08      	cmp	r3, #8
 800382e:	d12a      	bne.n	8003886 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383c:	461a      	mov	r2, r3
 800383e:	2308      	movs	r3, #8
 8003840:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	4413      	add	r3, r2
 800384a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	0151      	lsls	r1, r2, #5
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	440a      	add	r2, r1
 8003858:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800385c:	f043 0302 	orr.w	r3, r3, #2
 8003860:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f003 fe10 	bl	8007492 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	212c      	movs	r1, #44	; 0x2c
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	4413      	add	r3, r2
 800387e:	3361      	adds	r3, #97	; 0x61
 8003880:	2205      	movs	r2, #5
 8003882:	701a      	strb	r2, [r3, #0]
}
 8003884:	e273      	b.n	8003d6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	4413      	add	r3, r2
 800388e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b10      	cmp	r3, #16
 800389a:	d150      	bne.n	800393e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	212c      	movs	r1, #44	; 0x2c
 80038a2:	fb01 f303 	mul.w	r3, r1, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	335c      	adds	r3, #92	; 0x5c
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	212c      	movs	r1, #44	; 0x2c
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	4413      	add	r3, r2
 80038ba:	3361      	adds	r3, #97	; 0x61
 80038bc:	2203      	movs	r2, #3
 80038be:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	212c      	movs	r1, #44	; 0x2c
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	333d      	adds	r3, #61	; 0x3d
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d112      	bne.n	80038fa <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	333c      	adds	r3, #60	; 0x3c
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d108      	bne.n	80038fa <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	212c      	movs	r1, #44	; 0x2c
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	333d      	adds	r3, #61	; 0x3d
 80038f6:	2201      	movs	r2, #1
 80038f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	4413      	add	r3, r2
 8003902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	0151      	lsls	r1, r2, #5
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	440a      	add	r2, r1
 8003910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003914:	f043 0302 	orr.w	r3, r3, #2
 8003918:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f003 fdb4 	bl	8007492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	4413      	add	r3, r2
 8003932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003936:	461a      	mov	r2, r3
 8003938:	2310      	movs	r3, #16
 800393a:	6093      	str	r3, [r2, #8]
}
 800393c:	e217      	b.n	8003d6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	4413      	add	r3, r2
 8003946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003950:	2b80      	cmp	r3, #128	; 0x80
 8003952:	d174      	bne.n	8003a3e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d121      	bne.n	80039a0 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	3361      	adds	r3, #97	; 0x61
 800396a:	2206      	movs	r2, #6
 800396c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	4413      	add	r3, r2
 8003976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	0151      	lsls	r1, r2, #5
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	440a      	add	r2, r1
 8003984:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003988:	f043 0302 	orr.w	r3, r3, #2
 800398c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f003 fd7a 	bl	8007492 <USB_HC_Halt>
 800399e:	e044      	b.n	8003a2a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	212c      	movs	r1, #44	; 0x2c
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	4413      	add	r3, r2
 80039ac:	335c      	adds	r3, #92	; 0x5c
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	202c      	movs	r0, #44	; 0x2c
 80039b8:	fb00 f303 	mul.w	r3, r0, r3
 80039bc:	440b      	add	r3, r1
 80039be:	335c      	adds	r3, #92	; 0x5c
 80039c0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	212c      	movs	r1, #44	; 0x2c
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	4413      	add	r3, r2
 80039ce:	335c      	adds	r3, #92	; 0x5c
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d920      	bls.n	8003a18 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	212c      	movs	r1, #44	; 0x2c
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	335c      	adds	r3, #92	; 0x5c
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	212c      	movs	r1, #44	; 0x2c
 80039ee:	fb01 f303 	mul.w	r3, r1, r3
 80039f2:	4413      	add	r3, r2
 80039f4:	3360      	adds	r3, #96	; 0x60
 80039f6:	2204      	movs	r2, #4
 80039f8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	b2d9      	uxtb	r1, r3
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	202c      	movs	r0, #44	; 0x2c
 8003a04:	fb00 f303 	mul.w	r3, r0, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	3360      	adds	r3, #96	; 0x60
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f005 fefb 	bl	800980c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a16:	e008      	b.n	8003a2a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	212c      	movs	r1, #44	; 0x2c
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	3360      	adds	r3, #96	; 0x60
 8003a26:	2202      	movs	r2, #2
 8003a28:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a36:	461a      	mov	r2, r3
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	6093      	str	r3, [r2, #8]
}
 8003a3c:	e197      	b.n	8003d6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a54:	d134      	bne.n	8003ac0 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	0151      	lsls	r1, r2, #5
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	440a      	add	r2, r1
 8003a6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a70:	f043 0302 	orr.w	r3, r3, #2
 8003a74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f003 fd06 	bl	8007492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a92:	461a      	mov	r2, r3
 8003a94:	2310      	movs	r3, #16
 8003a96:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aaa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	212c      	movs	r1, #44	; 0x2c
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3361      	adds	r3, #97	; 0x61
 8003aba:	2208      	movs	r2, #8
 8003abc:	701a      	strb	r2, [r3, #0]
}
 8003abe:	e156      	b.n	8003d6e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	f040 814b 	bne.w	8003d6e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	0151      	lsls	r1, r2, #5
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	440a      	add	r2, r1
 8003aee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003af2:	f023 0302 	bic.w	r3, r3, #2
 8003af6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	212c      	movs	r1, #44	; 0x2c
 8003afe:	fb01 f303 	mul.w	r3, r1, r3
 8003b02:	4413      	add	r3, r2
 8003b04:	3361      	adds	r3, #97	; 0x61
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d179      	bne.n	8003c00 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	212c      	movs	r1, #44	; 0x2c
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	3360      	adds	r3, #96	; 0x60
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	212c      	movs	r1, #44	; 0x2c
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	4413      	add	r3, r2
 8003b2a:	333f      	adds	r3, #63	; 0x3f
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d00a      	beq.n	8003b48 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	212c      	movs	r1, #44	; 0x2c
 8003b38:	fb01 f303 	mul.w	r3, r1, r3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	333f      	adds	r3, #63	; 0x3f
 8003b40:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	f040 80fc 	bne.w	8003d40 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d142      	bne.n	8003bd6 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	212c      	movs	r1, #44	; 0x2c
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	334c      	adds	r3, #76	; 0x4c
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80ed 	beq.w	8003d40 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	212c      	movs	r1, #44	; 0x2c
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	4413      	add	r3, r2
 8003b72:	334c      	adds	r3, #76	; 0x4c
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	202c      	movs	r0, #44	; 0x2c
 8003b7c:	fb00 f202 	mul.w	r2, r0, r2
 8003b80:	440a      	add	r2, r1
 8003b82:	3240      	adds	r2, #64	; 0x40
 8003b84:	8812      	ldrh	r2, [r2, #0]
 8003b86:	4413      	add	r3, r2
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	202c      	movs	r0, #44	; 0x2c
 8003b90:	fb00 f202 	mul.w	r2, r0, r2
 8003b94:	440a      	add	r2, r1
 8003b96:	3240      	adds	r2, #64	; 0x40
 8003b98:	8812      	ldrh	r2, [r2, #0]
 8003b9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80ca 	beq.w	8003d40 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3355      	adds	r3, #85	; 0x55
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	f083 0301 	eor.w	r3, r3, #1
 8003bc0:	b2d8      	uxtb	r0, r3
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	212c      	movs	r1, #44	; 0x2c
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	4413      	add	r3, r2
 8003bce:	3355      	adds	r3, #85	; 0x55
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	e0b4      	b.n	8003d40 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	212c      	movs	r1, #44	; 0x2c
 8003bdc:	fb01 f303 	mul.w	r3, r1, r3
 8003be0:	4413      	add	r3, r2
 8003be2:	3355      	adds	r3, #85	; 0x55
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	f083 0301 	eor.w	r3, r3, #1
 8003bea:	b2d8      	uxtb	r0, r3
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3355      	adds	r3, #85	; 0x55
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	e09f      	b.n	8003d40 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	212c      	movs	r1, #44	; 0x2c
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3361      	adds	r3, #97	; 0x61
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d109      	bne.n	8003c28 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	212c      	movs	r1, #44	; 0x2c
 8003c1a:	fb01 f303 	mul.w	r3, r1, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	3360      	adds	r3, #96	; 0x60
 8003c22:	2202      	movs	r2, #2
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	e08b      	b.n	8003d40 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	212c      	movs	r1, #44	; 0x2c
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	4413      	add	r3, r2
 8003c34:	3361      	adds	r3, #97	; 0x61
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d109      	bne.n	8003c50 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	3360      	adds	r3, #96	; 0x60
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	e077      	b.n	8003d40 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3361      	adds	r3, #97	; 0x61
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b05      	cmp	r3, #5
 8003c62:	d109      	bne.n	8003c78 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	3360      	adds	r3, #96	; 0x60
 8003c72:	2205      	movs	r2, #5
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	e063      	b.n	8003d40 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	212c      	movs	r1, #44	; 0x2c
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	3361      	adds	r3, #97	; 0x61
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b06      	cmp	r3, #6
 8003c8a:	d009      	beq.n	8003ca0 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	212c      	movs	r1, #44	; 0x2c
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	4413      	add	r3, r2
 8003c98:	3361      	adds	r3, #97	; 0x61
 8003c9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d14f      	bne.n	8003d40 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	212c      	movs	r1, #44	; 0x2c
 8003ca6:	fb01 f303 	mul.w	r3, r1, r3
 8003caa:	4413      	add	r3, r2
 8003cac:	335c      	adds	r3, #92	; 0x5c
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	202c      	movs	r0, #44	; 0x2c
 8003cb8:	fb00 f303 	mul.w	r3, r0, r3
 8003cbc:	440b      	add	r3, r1
 8003cbe:	335c      	adds	r3, #92	; 0x5c
 8003cc0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	212c      	movs	r1, #44	; 0x2c
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	335c      	adds	r3, #92	; 0x5c
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d912      	bls.n	8003cfc <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	212c      	movs	r1, #44	; 0x2c
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	335c      	adds	r3, #92	; 0x5c
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	212c      	movs	r1, #44	; 0x2c
 8003cee:	fb01 f303 	mul.w	r3, r1, r3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3360      	adds	r3, #96	; 0x60
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	e021      	b.n	8003d40 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	212c      	movs	r1, #44	; 0x2c
 8003d02:	fb01 f303 	mul.w	r3, r1, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	3360      	adds	r3, #96	; 0x60
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d24:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d2c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2302      	movs	r3, #2
 8003d50:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	b2d9      	uxtb	r1, r3
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	202c      	movs	r0, #44	; 0x2c
 8003d5c:	fb00 f303 	mul.w	r3, r0, r3
 8003d60:	4413      	add	r3, r2
 8003d62:	3360      	adds	r3, #96	; 0x60
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f005 fd4f 	bl	800980c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d6e:	bf00      	nop
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b08a      	sub	sp, #40	; 0x28
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	0c5b      	lsrs	r3, r3, #17
 8003d9c:	f003 030f 	and.w	r3, r3, #15
 8003da0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003daa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d004      	beq.n	8003dbc <HCD_RXQLVL_IRQHandler+0x46>
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b05      	cmp	r3, #5
 8003db6:	f000 80a9 	beq.w	8003f0c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003dba:	e0aa      	b.n	8003f12 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 80a6 	beq.w	8003f10 <HCD_RXQLVL_IRQHandler+0x19a>
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	212c      	movs	r1, #44	; 0x2c
 8003dca:	fb01 f303 	mul.w	r3, r1, r3
 8003dce:	4413      	add	r3, r2
 8003dd0:	3344      	adds	r3, #68	; 0x44
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 809b 	beq.w	8003f10 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	212c      	movs	r1, #44	; 0x2c
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	4413      	add	r3, r2
 8003de6:	3350      	adds	r3, #80	; 0x50
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	441a      	add	r2, r3
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	202c      	movs	r0, #44	; 0x2c
 8003df4:	fb00 f303 	mul.w	r3, r0, r3
 8003df8:	440b      	add	r3, r1
 8003dfa:	334c      	adds	r3, #76	; 0x4c
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d87a      	bhi.n	8003ef8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	212c      	movs	r1, #44	; 0x2c
 8003e0c:	fb01 f303 	mul.w	r3, r1, r3
 8003e10:	4413      	add	r3, r2
 8003e12:	3344      	adds	r3, #68	; 0x44
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	b292      	uxth	r2, r2
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	f002 fed7 	bl	8006bce <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	212c      	movs	r1, #44	; 0x2c
 8003e26:	fb01 f303 	mul.w	r3, r1, r3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3344      	adds	r3, #68	; 0x44
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	441a      	add	r2, r3
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	202c      	movs	r0, #44	; 0x2c
 8003e3a:	fb00 f303 	mul.w	r3, r0, r3
 8003e3e:	440b      	add	r3, r1
 8003e40:	3344      	adds	r3, #68	; 0x44
 8003e42:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	212c      	movs	r1, #44	; 0x2c
 8003e4a:	fb01 f303 	mul.w	r3, r1, r3
 8003e4e:	4413      	add	r3, r2
 8003e50:	3350      	adds	r3, #80	; 0x50
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	441a      	add	r2, r3
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	202c      	movs	r0, #44	; 0x2c
 8003e5e:	fb00 f303 	mul.w	r3, r0, r3
 8003e62:	440b      	add	r3, r1
 8003e64:	3350      	adds	r3, #80	; 0x50
 8003e66:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	0cdb      	lsrs	r3, r3, #19
 8003e78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e7c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	212c      	movs	r1, #44	; 0x2c
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	4413      	add	r3, r2
 8003e8a:	3340      	adds	r3, #64	; 0x40
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d13c      	bne.n	8003f10 <HCD_RXQLVL_IRQHandler+0x19a>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d039      	beq.n	8003f10 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003eb2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003eba:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec8:	461a      	mov	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	212c      	movs	r1, #44	; 0x2c
 8003ed4:	fb01 f303 	mul.w	r3, r1, r3
 8003ed8:	4413      	add	r3, r2
 8003eda:	3354      	adds	r3, #84	; 0x54
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	f083 0301 	eor.w	r3, r3, #1
 8003ee2:	b2d8      	uxtb	r0, r3
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	212c      	movs	r1, #44	; 0x2c
 8003eea:	fb01 f303 	mul.w	r3, r1, r3
 8003eee:	4413      	add	r3, r2
 8003ef0:	3354      	adds	r3, #84	; 0x54
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	701a      	strb	r2, [r3, #0]
      break;
 8003ef6:	e00b      	b.n	8003f10 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	212c      	movs	r1, #44	; 0x2c
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	4413      	add	r3, r2
 8003f04:	3360      	adds	r3, #96	; 0x60
 8003f06:	2204      	movs	r2, #4
 8003f08:	701a      	strb	r2, [r3, #0]
      break;
 8003f0a:	e001      	b.n	8003f10 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003f0c:	bf00      	nop
 8003f0e:	e000      	b.n	8003f12 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003f10:	bf00      	nop
  }
}
 8003f12:	bf00      	nop
 8003f14:	3728      	adds	r7, #40	; 0x28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b086      	sub	sp, #24
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f46:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d10b      	bne.n	8003f6a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d102      	bne.n	8003f62 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f005 fc39 	bl	80097d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f043 0302 	orr.w	r3, r3, #2
 8003f68:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d132      	bne.n	8003fda <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f043 0308 	orr.w	r3, r3, #8
 8003f7a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d126      	bne.n	8003fd4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d113      	bne.n	8003fb6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003f94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f98:	d106      	bne.n	8003fa8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f002 ff4f 	bl	8006e44 <USB_InitFSLSPClkSel>
 8003fa6:	e011      	b.n	8003fcc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2101      	movs	r1, #1
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f002 ff48 	bl	8006e44 <USB_InitFSLSPClkSel>
 8003fb4:	e00a      	b.n	8003fcc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d106      	bne.n	8003fcc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003fca:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f005 fc2b 	bl	8009828 <HAL_HCD_PortEnabled_Callback>
 8003fd2:	e002      	b.n	8003fda <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f005 fc35 	bl	8009844 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d103      	bne.n	8003fec <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f043 0320 	orr.w	r3, r3, #32
 8003fea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6013      	str	r3, [r2, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e128      	b.n	8004264 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a90      	ldr	r2, [pc, #576]	; (800426c <HAL_I2S_Init+0x26c>)
 800402a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7fd fc59 	bl	80018e4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2202      	movs	r2, #2
 8004036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004048:	f023 030f 	bic.w	r3, r3, #15
 800404c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2202      	movs	r2, #2
 8004054:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d060      	beq.n	8004120 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d102      	bne.n	800406c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004066:	2310      	movs	r3, #16
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	e001      	b.n	8004070 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800406c:	2320      	movs	r3, #32
 800406e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b20      	cmp	r3, #32
 8004076:	d802      	bhi.n	800407e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800407e:	2001      	movs	r0, #1
 8004080:	f001 f980 	bl	8005384 <HAL_RCCEx_GetPeriphCLKFreq>
 8004084:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800408e:	d125      	bne.n	80040dc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d010      	beq.n	80040ba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	461a      	mov	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	3305      	adds	r3, #5
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	e01f      	b.n	80040fa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	461a      	mov	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d6:	3305      	adds	r3, #5
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	e00e      	b.n	80040fa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	461a      	mov	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f6:	3305      	adds	r3, #5
 80040f8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4a5c      	ldr	r2, [pc, #368]	; (8004270 <HAL_I2S_Init+0x270>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	08db      	lsrs	r3, r3, #3
 8004104:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	085b      	lsrs	r3, r3, #1
 8004116:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	e003      	b.n	8004128 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004120:	2302      	movs	r3, #2
 8004122:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d902      	bls.n	8004134 <HAL_I2S_Init+0x134>
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	2bff      	cmp	r3, #255	; 0xff
 8004132:	d907      	bls.n	8004144 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004138:	f043 0210 	orr.w	r2, r3, #16
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e08f      	b.n	8004264 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	ea42 0103 	orr.w	r1, r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	430a      	orrs	r2, r1
 8004156:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004162:	f023 030f 	bic.w	r3, r3, #15
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6851      	ldr	r1, [r2, #4]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6892      	ldr	r2, [r2, #8]
 800416e:	4311      	orrs	r1, r2
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	68d2      	ldr	r2, [r2, #12]
 8004174:	4311      	orrs	r1, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6992      	ldr	r2, [r2, #24]
 800417a:	430a      	orrs	r2, r1
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004186:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d161      	bne.n	8004254 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a38      	ldr	r2, [pc, #224]	; (8004274 <HAL_I2S_Init+0x274>)
 8004194:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a37      	ldr	r2, [pc, #220]	; (8004278 <HAL_I2S_Init+0x278>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d101      	bne.n	80041a4 <HAL_I2S_Init+0x1a4>
 80041a0:	4b36      	ldr	r3, [pc, #216]	; (800427c <HAL_I2S_Init+0x27c>)
 80041a2:	e001      	b.n	80041a8 <HAL_I2S_Init+0x1a8>
 80041a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6812      	ldr	r2, [r2, #0]
 80041ae:	4932      	ldr	r1, [pc, #200]	; (8004278 <HAL_I2S_Init+0x278>)
 80041b0:	428a      	cmp	r2, r1
 80041b2:	d101      	bne.n	80041b8 <HAL_I2S_Init+0x1b8>
 80041b4:	4a31      	ldr	r2, [pc, #196]	; (800427c <HAL_I2S_Init+0x27c>)
 80041b6:	e001      	b.n	80041bc <HAL_I2S_Init+0x1bc>
 80041b8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80041bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80041c0:	f023 030f 	bic.w	r3, r3, #15
 80041c4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a2b      	ldr	r2, [pc, #172]	; (8004278 <HAL_I2S_Init+0x278>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d101      	bne.n	80041d4 <HAL_I2S_Init+0x1d4>
 80041d0:	4b2a      	ldr	r3, [pc, #168]	; (800427c <HAL_I2S_Init+0x27c>)
 80041d2:	e001      	b.n	80041d8 <HAL_I2S_Init+0x1d8>
 80041d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041d8:	2202      	movs	r2, #2
 80041da:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a25      	ldr	r2, [pc, #148]	; (8004278 <HAL_I2S_Init+0x278>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d101      	bne.n	80041ea <HAL_I2S_Init+0x1ea>
 80041e6:	4b25      	ldr	r3, [pc, #148]	; (800427c <HAL_I2S_Init+0x27c>)
 80041e8:	e001      	b.n	80041ee <HAL_I2S_Init+0x1ee>
 80041ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041fa:	d003      	beq.n	8004204 <HAL_I2S_Init+0x204>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d103      	bne.n	800420c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	e001      	b.n	8004210 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800420c:	2300      	movs	r3, #0
 800420e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800421a:	4313      	orrs	r3, r2
 800421c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004224:	4313      	orrs	r3, r2
 8004226:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800422e:	4313      	orrs	r3, r2
 8004230:	b29a      	uxth	r2, r3
 8004232:	897b      	ldrh	r3, [r7, #10]
 8004234:	4313      	orrs	r3, r2
 8004236:	b29b      	uxth	r3, r3
 8004238:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800423c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a0d      	ldr	r2, [pc, #52]	; (8004278 <HAL_I2S_Init+0x278>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d101      	bne.n	800424c <HAL_I2S_Init+0x24c>
 8004248:	4b0c      	ldr	r3, [pc, #48]	; (800427c <HAL_I2S_Init+0x27c>)
 800424a:	e001      	b.n	8004250 <HAL_I2S_Init+0x250>
 800424c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004250:	897a      	ldrh	r2, [r7, #10]
 8004252:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3720      	adds	r7, #32
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	08004377 	.word	0x08004377
 8004270:	cccccccd 	.word	0xcccccccd
 8004274:	0800448d 	.word	0x0800448d
 8004278:	40003800 	.word	0x40003800
 800427c:	40003400 	.word	0x40003400

08004280 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	881a      	ldrh	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	1c9a      	adds	r2, r3, #2
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10e      	bne.n	8004310 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004300:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff ffb8 	bl	8004280 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	b292      	uxth	r2, r2
 800432c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	1c9a      	adds	r2, r3, #2
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10e      	bne.n	800436e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800435e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff ff93 	bl	8004294 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b086      	sub	sp, #24
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b04      	cmp	r3, #4
 8004390:	d13a      	bne.n	8004408 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d109      	bne.n	80043b0 <I2S_IRQHandler+0x3a>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a6:	2b40      	cmp	r3, #64	; 0x40
 80043a8:	d102      	bne.n	80043b0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff ffb4 	bl	8004318 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b6:	2b40      	cmp	r3, #64	; 0x40
 80043b8:	d126      	bne.n	8004408 <I2S_IRQHandler+0x92>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	d11f      	bne.n	8004408 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	f043 0202 	orr.w	r2, r3, #2
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7ff ff50 	bl	80042a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b03      	cmp	r3, #3
 8004412:	d136      	bne.n	8004482 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b02      	cmp	r3, #2
 800441c:	d109      	bne.n	8004432 <I2S_IRQHandler+0xbc>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	2b80      	cmp	r3, #128	; 0x80
 800442a:	d102      	bne.n	8004432 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff ff45 	bl	80042bc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b08      	cmp	r3, #8
 800443a:	d122      	bne.n	8004482 <I2S_IRQHandler+0x10c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b20      	cmp	r3, #32
 8004448:	d11b      	bne.n	8004482 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004458:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004474:	f043 0204 	orr.w	r2, r3, #4
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ff13 	bl	80042a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004482:	bf00      	nop
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4aa2      	ldr	r2, [pc, #648]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d101      	bne.n	80044aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80044a6:	4ba2      	ldr	r3, [pc, #648]	; (8004730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044a8:	e001      	b.n	80044ae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80044aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a9b      	ldr	r2, [pc, #620]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d101      	bne.n	80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80044c4:	4b9a      	ldr	r3, [pc, #616]	; (8004730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044c6:	e001      	b.n	80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80044c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d8:	d004      	beq.n	80044e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f040 8099 	bne.w	8004616 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d107      	bne.n	80044fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f925 	bl	8004748 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b01      	cmp	r3, #1
 8004506:	d107      	bne.n	8004518 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f9c8 	bl	80048a8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451e:	2b40      	cmp	r3, #64	; 0x40
 8004520:	d13a      	bne.n	8004598 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d035      	beq.n	8004598 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a7e      	ldr	r2, [pc, #504]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d101      	bne.n	800453a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004536:	4b7e      	ldr	r3, [pc, #504]	; (8004730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004538:	e001      	b.n	800453e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800453a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4979      	ldr	r1, [pc, #484]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004546:	428b      	cmp	r3, r1
 8004548:	d101      	bne.n	800454e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800454a:	4b79      	ldr	r3, [pc, #484]	; (8004730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800454c:	e001      	b.n	8004552 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800454e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004552:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004556:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004566:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	f043 0202 	orr.w	r2, r3, #2
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff fe88 	bl	80042a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b08      	cmp	r3, #8
 80045a0:	f040 80be 	bne.w	8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 80b8 	beq.w	8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a59      	ldr	r2, [pc, #356]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d101      	bne.n	80045ce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80045ca:	4b59      	ldr	r3, [pc, #356]	; (8004730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045cc:	e001      	b.n	80045d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80045ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4954      	ldr	r1, [pc, #336]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045da:	428b      	cmp	r3, r1
 80045dc:	d101      	bne.n	80045e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80045de:	4b54      	ldr	r3, [pc, #336]	; (8004730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045e0:	e001      	b.n	80045e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80045e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045ea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80045ec:	2300      	movs	r3, #0
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	60bb      	str	r3, [r7, #8]
 80045f8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	f043 0204 	orr.w	r2, r3, #4
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff fe4a 	bl	80042a8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004614:	e084      	b.n	8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b02      	cmp	r3, #2
 800461e:	d107      	bne.n	8004630 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f8be 	bl	80047ac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b01      	cmp	r3, #1
 8004638:	d107      	bne.n	800464a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f8fd 	bl	8004844 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004650:	2b40      	cmp	r3, #64	; 0x40
 8004652:	d12f      	bne.n	80046b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d02a      	beq.n	80046b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800466c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a2e      	ldr	r2, [pc, #184]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d101      	bne.n	800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004678:	4b2d      	ldr	r3, [pc, #180]	; (8004730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800467a:	e001      	b.n	8004680 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800467c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4929      	ldr	r1, [pc, #164]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004688:	428b      	cmp	r3, r1
 800468a:	d101      	bne.n	8004690 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800468c:	4b28      	ldr	r3, [pc, #160]	; (8004730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800468e:	e001      	b.n	8004694 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004690:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004694:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004698:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a6:	f043 0202 	orr.w	r2, r3, #2
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fdfa 	bl	80042a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d131      	bne.n	8004722 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d02c      	beq.n	8004722 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a17      	ldr	r2, [pc, #92]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d101      	bne.n	80046d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80046d2:	4b17      	ldr	r3, [pc, #92]	; (8004730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046d4:	e001      	b.n	80046da <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80046d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4912      	ldr	r1, [pc, #72]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046e2:	428b      	cmp	r3, r1
 80046e4:	d101      	bne.n	80046ea <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80046e6:	4b12      	ldr	r3, [pc, #72]	; (8004730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046e8:	e001      	b.n	80046ee <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80046ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004702:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004710:	f043 0204 	orr.w	r2, r3, #4
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff fdc5 	bl	80042a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800471e:	e000      	b.n	8004722 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004720:	bf00      	nop
}
 8004722:	bf00      	nop
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40003800 	.word	0x40003800
 8004730:	40003400 	.word	0x40003400

08004734 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	1c99      	adds	r1, r3, #2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6251      	str	r1, [r2, #36]	; 0x24
 800475a:	881a      	ldrh	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d113      	bne.n	80047a2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004788:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d106      	bne.n	80047a2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff ffc9 	bl	8004734 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	1c99      	adds	r1, r3, #2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6251      	str	r1, [r2, #36]	; 0x24
 80047be:	8819      	ldrh	r1, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1d      	ldr	r2, [pc, #116]	; (800483c <I2SEx_TxISR_I2SExt+0x90>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d101      	bne.n	80047ce <I2SEx_TxISR_I2SExt+0x22>
 80047ca:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <I2SEx_TxISR_I2SExt+0x94>)
 80047cc:	e001      	b.n	80047d2 <I2SEx_TxISR_I2SExt+0x26>
 80047ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047d2:	460a      	mov	r2, r1
 80047d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d121      	bne.n	8004832 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a12      	ldr	r2, [pc, #72]	; (800483c <I2SEx_TxISR_I2SExt+0x90>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d101      	bne.n	80047fc <I2SEx_TxISR_I2SExt+0x50>
 80047f8:	4b11      	ldr	r3, [pc, #68]	; (8004840 <I2SEx_TxISR_I2SExt+0x94>)
 80047fa:	e001      	b.n	8004800 <I2SEx_TxISR_I2SExt+0x54>
 80047fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	490d      	ldr	r1, [pc, #52]	; (800483c <I2SEx_TxISR_I2SExt+0x90>)
 8004808:	428b      	cmp	r3, r1
 800480a:	d101      	bne.n	8004810 <I2SEx_TxISR_I2SExt+0x64>
 800480c:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <I2SEx_TxISR_I2SExt+0x94>)
 800480e:	e001      	b.n	8004814 <I2SEx_TxISR_I2SExt+0x68>
 8004810:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004814:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004818:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d106      	bne.n	8004832 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff ff81 	bl	8004734 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40003800 	.word	0x40003800
 8004840:	40003400 	.word	0x40003400

08004844 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68d8      	ldr	r0, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	1c99      	adds	r1, r3, #2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800485c:	b282      	uxth	r2, r0
 800485e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d113      	bne.n	80048a0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004886:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7ff ff4a 	bl	8004734 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a20      	ldr	r2, [pc, #128]	; (8004938 <I2SEx_RxISR_I2SExt+0x90>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d101      	bne.n	80048be <I2SEx_RxISR_I2SExt+0x16>
 80048ba:	4b20      	ldr	r3, [pc, #128]	; (800493c <I2SEx_RxISR_I2SExt+0x94>)
 80048bc:	e001      	b.n	80048c2 <I2SEx_RxISR_I2SExt+0x1a>
 80048be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048c2:	68d8      	ldr	r0, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	1c99      	adds	r1, r3, #2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80048ce:	b282      	uxth	r2, r0
 80048d0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d121      	bne.n	800492e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a12      	ldr	r2, [pc, #72]	; (8004938 <I2SEx_RxISR_I2SExt+0x90>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d101      	bne.n	80048f8 <I2SEx_RxISR_I2SExt+0x50>
 80048f4:	4b11      	ldr	r3, [pc, #68]	; (800493c <I2SEx_RxISR_I2SExt+0x94>)
 80048f6:	e001      	b.n	80048fc <I2SEx_RxISR_I2SExt+0x54>
 80048f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	490d      	ldr	r1, [pc, #52]	; (8004938 <I2SEx_RxISR_I2SExt+0x90>)
 8004904:	428b      	cmp	r3, r1
 8004906:	d101      	bne.n	800490c <I2SEx_RxISR_I2SExt+0x64>
 8004908:	4b0c      	ldr	r3, [pc, #48]	; (800493c <I2SEx_RxISR_I2SExt+0x94>)
 800490a:	e001      	b.n	8004910 <I2SEx_RxISR_I2SExt+0x68>
 800490c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004910:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004914:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff ff03 	bl	8004734 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40003800 	.word	0x40003800
 800493c:	40003400 	.word	0x40003400

08004940 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e264      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d075      	beq.n	8004a4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800495e:	4ba3      	ldr	r3, [pc, #652]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b04      	cmp	r3, #4
 8004968:	d00c      	beq.n	8004984 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800496a:	4ba0      	ldr	r3, [pc, #640]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004972:	2b08      	cmp	r3, #8
 8004974:	d112      	bne.n	800499c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004976:	4b9d      	ldr	r3, [pc, #628]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800497e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004982:	d10b      	bne.n	800499c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004984:	4b99      	ldr	r3, [pc, #612]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d05b      	beq.n	8004a48 <HAL_RCC_OscConfig+0x108>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d157      	bne.n	8004a48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e23f      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a4:	d106      	bne.n	80049b4 <HAL_RCC_OscConfig+0x74>
 80049a6:	4b91      	ldr	r3, [pc, #580]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a90      	ldr	r2, [pc, #576]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	e01d      	b.n	80049f0 <HAL_RCC_OscConfig+0xb0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049bc:	d10c      	bne.n	80049d8 <HAL_RCC_OscConfig+0x98>
 80049be:	4b8b      	ldr	r3, [pc, #556]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a8a      	ldr	r2, [pc, #552]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	4b88      	ldr	r3, [pc, #544]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a87      	ldr	r2, [pc, #540]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	e00b      	b.n	80049f0 <HAL_RCC_OscConfig+0xb0>
 80049d8:	4b84      	ldr	r3, [pc, #528]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a83      	ldr	r2, [pc, #524]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	4b81      	ldr	r3, [pc, #516]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a80      	ldr	r2, [pc, #512]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 80049ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d013      	beq.n	8004a20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7fd fa74 	bl	8001ee4 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a00:	f7fd fa70 	bl	8001ee4 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	; 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e204      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a12:	4b76      	ldr	r3, [pc, #472]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0xc0>
 8004a1e:	e014      	b.n	8004a4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a20:	f7fd fa60 	bl	8001ee4 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a28:	f7fd fa5c 	bl	8001ee4 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b64      	cmp	r3, #100	; 0x64
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e1f0      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a3a:	4b6c      	ldr	r3, [pc, #432]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f0      	bne.n	8004a28 <HAL_RCC_OscConfig+0xe8>
 8004a46:	e000      	b.n	8004a4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d063      	beq.n	8004b1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a56:	4b65      	ldr	r3, [pc, #404]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a62:	4b62      	ldr	r3, [pc, #392]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d11c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a6e:	4b5f      	ldr	r3, [pc, #380]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d116      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7a:	4b5c      	ldr	r3, [pc, #368]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <HAL_RCC_OscConfig+0x152>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d001      	beq.n	8004a92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e1c4      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a92:	4b56      	ldr	r3, [pc, #344]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	4952      	ldr	r1, [pc, #328]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa6:	e03a      	b.n	8004b1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d020      	beq.n	8004af2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab0:	4b4f      	ldr	r3, [pc, #316]	; (8004bf0 <HAL_RCC_OscConfig+0x2b0>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab6:	f7fd fa15 	bl	8001ee4 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004abe:	f7fd fa11 	bl	8001ee4 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e1a5      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad0:	4b46      	ldr	r3, [pc, #280]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004adc:	4b43      	ldr	r3, [pc, #268]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	4940      	ldr	r1, [pc, #256]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	600b      	str	r3, [r1, #0]
 8004af0:	e015      	b.n	8004b1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004af2:	4b3f      	ldr	r3, [pc, #252]	; (8004bf0 <HAL_RCC_OscConfig+0x2b0>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af8:	f7fd f9f4 	bl	8001ee4 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b00:	f7fd f9f0 	bl	8001ee4 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e184      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b12:	4b36      	ldr	r3, [pc, #216]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1f0      	bne.n	8004b00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d030      	beq.n	8004b8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d016      	beq.n	8004b60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b32:	4b30      	ldr	r3, [pc, #192]	; (8004bf4 <HAL_RCC_OscConfig+0x2b4>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b38:	f7fd f9d4 	bl	8001ee4 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b40:	f7fd f9d0 	bl	8001ee4 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e164      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b52:	4b26      	ldr	r3, [pc, #152]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0x200>
 8004b5e:	e015      	b.n	8004b8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b60:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <HAL_RCC_OscConfig+0x2b4>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b66:	f7fd f9bd 	bl	8001ee4 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b6e:	f7fd f9b9 	bl	8001ee4 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e14d      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b80:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1f0      	bne.n	8004b6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 80a0 	beq.w	8004cda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b9e:	4b13      	ldr	r3, [pc, #76]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10f      	bne.n	8004bca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	4a0e      	ldr	r2, [pc, #56]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bba:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <HAL_RCC_OscConfig+0x2ac>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	60bb      	str	r3, [r7, #8]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCC_OscConfig+0x2b8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d121      	bne.n	8004c1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bd6:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <HAL_RCC_OscConfig+0x2b8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a07      	ldr	r2, [pc, #28]	; (8004bf8 <HAL_RCC_OscConfig+0x2b8>)
 8004bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004be2:	f7fd f97f 	bl	8001ee4 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be8:	e011      	b.n	8004c0e <HAL_RCC_OscConfig+0x2ce>
 8004bea:	bf00      	nop
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	42470000 	.word	0x42470000
 8004bf4:	42470e80 	.word	0x42470e80
 8004bf8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfc:	f7fd f972 	bl	8001ee4 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e106      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0e:	4b85      	ldr	r3, [pc, #532]	; (8004e24 <HAL_RCC_OscConfig+0x4e4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0f0      	beq.n	8004bfc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d106      	bne.n	8004c30 <HAL_RCC_OscConfig+0x2f0>
 8004c22:	4b81      	ldr	r3, [pc, #516]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c26:	4a80      	ldr	r2, [pc, #512]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c28:	f043 0301 	orr.w	r3, r3, #1
 8004c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2e:	e01c      	b.n	8004c6a <HAL_RCC_OscConfig+0x32a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2b05      	cmp	r3, #5
 8004c36:	d10c      	bne.n	8004c52 <HAL_RCC_OscConfig+0x312>
 8004c38:	4b7b      	ldr	r3, [pc, #492]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	4a7a      	ldr	r2, [pc, #488]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c3e:	f043 0304 	orr.w	r3, r3, #4
 8004c42:	6713      	str	r3, [r2, #112]	; 0x70
 8004c44:	4b78      	ldr	r3, [pc, #480]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c48:	4a77      	ldr	r2, [pc, #476]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c50:	e00b      	b.n	8004c6a <HAL_RCC_OscConfig+0x32a>
 8004c52:	4b75      	ldr	r3, [pc, #468]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c56:	4a74      	ldr	r2, [pc, #464]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c58:	f023 0301 	bic.w	r3, r3, #1
 8004c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c5e:	4b72      	ldr	r3, [pc, #456]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c62:	4a71      	ldr	r2, [pc, #452]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c64:	f023 0304 	bic.w	r3, r3, #4
 8004c68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d015      	beq.n	8004c9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c72:	f7fd f937 	bl	8001ee4 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c78:	e00a      	b.n	8004c90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c7a:	f7fd f933 	bl	8001ee4 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e0c5      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c90:	4b65      	ldr	r3, [pc, #404]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0ee      	beq.n	8004c7a <HAL_RCC_OscConfig+0x33a>
 8004c9c:	e014      	b.n	8004cc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9e:	f7fd f921 	bl	8001ee4 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca4:	e00a      	b.n	8004cbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca6:	f7fd f91d 	bl	8001ee4 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e0af      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cbc:	4b5a      	ldr	r3, [pc, #360]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1ee      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d105      	bne.n	8004cda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cce:	4b56      	ldr	r3, [pc, #344]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	4a55      	ldr	r2, [pc, #340]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 809b 	beq.w	8004e1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ce4:	4b50      	ldr	r3, [pc, #320]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 030c 	and.w	r3, r3, #12
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d05c      	beq.n	8004daa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d141      	bne.n	8004d7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf8:	4b4c      	ldr	r3, [pc, #304]	; (8004e2c <HAL_RCC_OscConfig+0x4ec>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfe:	f7fd f8f1 	bl	8001ee4 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d06:	f7fd f8ed 	bl	8001ee4 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e081      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d18:	4b43      	ldr	r3, [pc, #268]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f0      	bne.n	8004d06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	019b      	lsls	r3, r3, #6
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	085b      	lsrs	r3, r3, #1
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	061b      	lsls	r3, r3, #24
 8004d48:	4937      	ldr	r1, [pc, #220]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d4e:	4b37      	ldr	r3, [pc, #220]	; (8004e2c <HAL_RCC_OscConfig+0x4ec>)
 8004d50:	2201      	movs	r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d54:	f7fd f8c6 	bl	8001ee4 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d5c:	f7fd f8c2 	bl	8001ee4 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e056      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6e:	4b2e      	ldr	r3, [pc, #184]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f0      	beq.n	8004d5c <HAL_RCC_OscConfig+0x41c>
 8004d7a:	e04e      	b.n	8004e1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7c:	4b2b      	ldr	r3, [pc, #172]	; (8004e2c <HAL_RCC_OscConfig+0x4ec>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d82:	f7fd f8af 	bl	8001ee4 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d8a:	f7fd f8ab 	bl	8001ee4 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e03f      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9c:	4b22      	ldr	r3, [pc, #136]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1f0      	bne.n	8004d8a <HAL_RCC_OscConfig+0x44a>
 8004da8:	e037      	b.n	8004e1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e032      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004db6:	4b1c      	ldr	r3, [pc, #112]	; (8004e28 <HAL_RCC_OscConfig+0x4e8>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d028      	beq.n	8004e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d121      	bne.n	8004e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d11a      	bne.n	8004e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004de6:	4013      	ands	r3, r2
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d111      	bne.n	8004e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	085b      	lsrs	r3, r3, #1
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d107      	bne.n	8004e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d001      	beq.n	8004e1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40007000 	.word	0x40007000
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	42470060 	.word	0x42470060

08004e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0cc      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e44:	4b68      	ldr	r3, [pc, #416]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d90c      	bls.n	8004e6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e52:	4b65      	ldr	r3, [pc, #404]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5a:	4b63      	ldr	r3, [pc, #396]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d001      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0b8      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d020      	beq.n	8004eba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e84:	4b59      	ldr	r3, [pc, #356]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4a58      	ldr	r2, [pc, #352]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e9c:	4b53      	ldr	r3, [pc, #332]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	4a52      	ldr	r2, [pc, #328]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ea8:	4b50      	ldr	r3, [pc, #320]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	494d      	ldr	r1, [pc, #308]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d044      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d107      	bne.n	8004ede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ece:	4b47      	ldr	r3, [pc, #284]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d119      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e07f      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d003      	beq.n	8004eee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d107      	bne.n	8004efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eee:	4b3f      	ldr	r3, [pc, #252]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d109      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e06f      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efe:	4b3b      	ldr	r3, [pc, #236]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e067      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f0e:	4b37      	ldr	r3, [pc, #220]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f023 0203 	bic.w	r2, r3, #3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	4934      	ldr	r1, [pc, #208]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f20:	f7fc ffe0 	bl	8001ee4 <HAL_GetTick>
 8004f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f26:	e00a      	b.n	8004f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f28:	f7fc ffdc 	bl	8001ee4 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e04f      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3e:	4b2b      	ldr	r3, [pc, #172]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 020c 	and.w	r2, r3, #12
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d1eb      	bne.n	8004f28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f50:	4b25      	ldr	r3, [pc, #148]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d20c      	bcs.n	8004f78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5e:	4b22      	ldr	r3, [pc, #136]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f66:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d001      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e032      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d008      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f84:	4b19      	ldr	r3, [pc, #100]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	4916      	ldr	r1, [pc, #88]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fa2:	4b12      	ldr	r3, [pc, #72]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	490e      	ldr	r1, [pc, #56]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fb6:	f000 f821 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	490a      	ldr	r1, [pc, #40]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8004fc8:	5ccb      	ldrb	r3, [r1, r3]
 8004fca:	fa22 f303 	lsr.w	r3, r2, r3
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fd2:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fc ff40 	bl	8001e5c <HAL_InitTick>

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40023c00 	.word	0x40023c00
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	08009e78 	.word	0x08009e78
 8004ff4:	20000008 	.word	0x20000008
 8004ff8:	2000000c 	.word	0x2000000c

08004ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ffc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	607b      	str	r3, [r7, #4]
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	2300      	movs	r3, #0
 800500e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005014:	4b67      	ldr	r3, [pc, #412]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 030c 	and.w	r3, r3, #12
 800501c:	2b08      	cmp	r3, #8
 800501e:	d00d      	beq.n	800503c <HAL_RCC_GetSysClockFreq+0x40>
 8005020:	2b08      	cmp	r3, #8
 8005022:	f200 80bd 	bhi.w	80051a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_RCC_GetSysClockFreq+0x34>
 800502a:	2b04      	cmp	r3, #4
 800502c:	d003      	beq.n	8005036 <HAL_RCC_GetSysClockFreq+0x3a>
 800502e:	e0b7      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005030:	4b61      	ldr	r3, [pc, #388]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005032:	60bb      	str	r3, [r7, #8]
       break;
 8005034:	e0b7      	b.n	80051a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005036:	4b61      	ldr	r3, [pc, #388]	; (80051bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005038:	60bb      	str	r3, [r7, #8]
      break;
 800503a:	e0b4      	b.n	80051a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800503c:	4b5d      	ldr	r3, [pc, #372]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005044:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005046:	4b5b      	ldr	r3, [pc, #364]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d04d      	beq.n	80050ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005052:	4b58      	ldr	r3, [pc, #352]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	099b      	lsrs	r3, r3, #6
 8005058:	461a      	mov	r2, r3
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005062:	f04f 0100 	mov.w	r1, #0
 8005066:	ea02 0800 	and.w	r8, r2, r0
 800506a:	ea03 0901 	and.w	r9, r3, r1
 800506e:	4640      	mov	r0, r8
 8005070:	4649      	mov	r1, r9
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	014b      	lsls	r3, r1, #5
 800507c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005080:	0142      	lsls	r2, r0, #5
 8005082:	4610      	mov	r0, r2
 8005084:	4619      	mov	r1, r3
 8005086:	ebb0 0008 	subs.w	r0, r0, r8
 800508a:	eb61 0109 	sbc.w	r1, r1, r9
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	f04f 0300 	mov.w	r3, #0
 8005096:	018b      	lsls	r3, r1, #6
 8005098:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800509c:	0182      	lsls	r2, r0, #6
 800509e:	1a12      	subs	r2, r2, r0
 80050a0:	eb63 0301 	sbc.w	r3, r3, r1
 80050a4:	f04f 0000 	mov.w	r0, #0
 80050a8:	f04f 0100 	mov.w	r1, #0
 80050ac:	00d9      	lsls	r1, r3, #3
 80050ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050b2:	00d0      	lsls	r0, r2, #3
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	eb12 0208 	adds.w	r2, r2, r8
 80050bc:	eb43 0309 	adc.w	r3, r3, r9
 80050c0:	f04f 0000 	mov.w	r0, #0
 80050c4:	f04f 0100 	mov.w	r1, #0
 80050c8:	0259      	lsls	r1, r3, #9
 80050ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80050ce:	0250      	lsls	r0, r2, #9
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4610      	mov	r0, r2
 80050d6:	4619      	mov	r1, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	461a      	mov	r2, r3
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	f7fb f872 	bl	80001c8 <__aeabi_uldivmod>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4613      	mov	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e04a      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ee:	4b31      	ldr	r3, [pc, #196]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	099b      	lsrs	r3, r3, #6
 80050f4:	461a      	mov	r2, r3
 80050f6:	f04f 0300 	mov.w	r3, #0
 80050fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050fe:	f04f 0100 	mov.w	r1, #0
 8005102:	ea02 0400 	and.w	r4, r2, r0
 8005106:	ea03 0501 	and.w	r5, r3, r1
 800510a:	4620      	mov	r0, r4
 800510c:	4629      	mov	r1, r5
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	014b      	lsls	r3, r1, #5
 8005118:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800511c:	0142      	lsls	r2, r0, #5
 800511e:	4610      	mov	r0, r2
 8005120:	4619      	mov	r1, r3
 8005122:	1b00      	subs	r0, r0, r4
 8005124:	eb61 0105 	sbc.w	r1, r1, r5
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	018b      	lsls	r3, r1, #6
 8005132:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005136:	0182      	lsls	r2, r0, #6
 8005138:	1a12      	subs	r2, r2, r0
 800513a:	eb63 0301 	sbc.w	r3, r3, r1
 800513e:	f04f 0000 	mov.w	r0, #0
 8005142:	f04f 0100 	mov.w	r1, #0
 8005146:	00d9      	lsls	r1, r3, #3
 8005148:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800514c:	00d0      	lsls	r0, r2, #3
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	1912      	adds	r2, r2, r4
 8005154:	eb45 0303 	adc.w	r3, r5, r3
 8005158:	f04f 0000 	mov.w	r0, #0
 800515c:	f04f 0100 	mov.w	r1, #0
 8005160:	0299      	lsls	r1, r3, #10
 8005162:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005166:	0290      	lsls	r0, r2, #10
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4610      	mov	r0, r2
 800516e:	4619      	mov	r1, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	461a      	mov	r2, r3
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	f7fb f826 	bl	80001c8 <__aeabi_uldivmod>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4613      	mov	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005184:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	0c1b      	lsrs	r3, r3, #16
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	3301      	adds	r3, #1
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	fbb2 f3f3 	udiv	r3, r2, r3
 800519c:	60bb      	str	r3, [r7, #8]
      break;
 800519e:	e002      	b.n	80051a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051a0:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80051a2:	60bb      	str	r3, [r7, #8]
      break;
 80051a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051a6:	68bb      	ldr	r3, [r7, #8]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80051b2:	bf00      	nop
 80051b4:	40023800 	.word	0x40023800
 80051b8:	00f42400 	.word	0x00f42400
 80051bc:	007a1200 	.word	0x007a1200

080051c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d035      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051e8:	4b62      	ldr	r3, [pc, #392]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ee:	f7fc fe79 	bl	8001ee4 <HAL_GetTick>
 80051f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051f4:	e008      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051f6:	f7fc fe75 	bl	8001ee4 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e0b0      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005208:	4b5b      	ldr	r3, [pc, #364]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1f0      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	019a      	lsls	r2, r3, #6
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	071b      	lsls	r3, r3, #28
 8005220:	4955      	ldr	r1, [pc, #340]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005228:	4b52      	ldr	r3, [pc, #328]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800522e:	f7fc fe59 	bl	8001ee4 <HAL_GetTick>
 8005232:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005234:	e008      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005236:	f7fc fe55 	bl	8001ee4 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e090      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005248:	4b4b      	ldr	r3, [pc, #300]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f0      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 8083 	beq.w	8005368 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	4b44      	ldr	r3, [pc, #272]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	4a43      	ldr	r2, [pc, #268]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800526c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005270:	6413      	str	r3, [r2, #64]	; 0x40
 8005272:	4b41      	ldr	r3, [pc, #260]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800527e:	4b3f      	ldr	r3, [pc, #252]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a3e      	ldr	r2, [pc, #248]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005288:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800528a:	f7fc fe2b 	bl	8001ee4 <HAL_GetTick>
 800528e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005290:	e008      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005292:	f7fc fe27 	bl	8001ee4 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e062      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052a4:	4b35      	ldr	r3, [pc, #212]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0f0      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052b0:	4b31      	ldr	r3, [pc, #196]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d02f      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d028      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052ce:	4b2a      	ldr	r3, [pc, #168]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052d8:	4b29      	ldr	r3, [pc, #164]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052da:	2201      	movs	r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052de:	4b28      	ldr	r3, [pc, #160]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052e4:	4a24      	ldr	r2, [pc, #144]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052ea:	4b23      	ldr	r3, [pc, #140]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d114      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052f6:	f7fc fdf5 	bl	8001ee4 <HAL_GetTick>
 80052fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fc:	e00a      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052fe:	f7fc fdf1 	bl	8001ee4 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	f241 3288 	movw	r2, #5000	; 0x1388
 800530c:	4293      	cmp	r3, r2
 800530e:	d901      	bls.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e02a      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005314:	4b18      	ldr	r3, [pc, #96]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0ee      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005328:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800532c:	d10d      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800532e:	4b12      	ldr	r3, [pc, #72]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800533e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005342:	490d      	ldr	r1, [pc, #52]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005344:	4313      	orrs	r3, r2
 8005346:	608b      	str	r3, [r1, #8]
 8005348:	e005      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800534a:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	4a0a      	ldr	r2, [pc, #40]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005350:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005354:	6093      	str	r3, [r2, #8]
 8005356:	4b08      	ldr	r3, [pc, #32]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005358:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005362:	4905      	ldr	r1, [pc, #20]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005364:	4313      	orrs	r3, r2
 8005366:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	42470068 	.word	0x42470068
 8005378:	40023800 	.word	0x40023800
 800537c:	40007000 	.word	0x40007000
 8005380:	42470e40 	.word	0x42470e40

08005384 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d13e      	bne.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80053a2:	4b23      	ldr	r3, [pc, #140]	; (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d12f      	bne.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80053b8:	4b1e      	ldr	r3, [pc, #120]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053ba:	617b      	str	r3, [r7, #20]
          break;
 80053bc:	e02f      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053be:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ca:	d108      	bne.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053cc:	4b18      	ldr	r3, [pc, #96]	; (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053d4:	4a18      	ldr	r2, [pc, #96]	; (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80053d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	e007      	b.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053de:	4b14      	ldr	r3, [pc, #80]	; (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053e6:	4a15      	ldr	r2, [pc, #84]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80053e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ec:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80053ee:	4b10      	ldr	r3, [pc, #64]	; (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f4:	099b      	lsrs	r3, r3, #6
 80053f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	fb02 f303 	mul.w	r3, r2, r3
 8005400:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005402:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005408:	0f1b      	lsrs	r3, r3, #28
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	fbb2 f3f3 	udiv	r3, r2, r3
 8005414:	617b      	str	r3, [r7, #20]
          break;
 8005416:	e002      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	617b      	str	r3, [r7, #20]
          break;
 800541c:	bf00      	nop
        }
      }
      break;
 800541e:	bf00      	nop
    }
  }
  return frequency;
 8005420:	697b      	ldr	r3, [r7, #20]
}
 8005422:	4618      	mov	r0, r3
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40023800 	.word	0x40023800
 8005434:	00bb8000 	.word	0x00bb8000
 8005438:	007a1200 	.word	0x007a1200
 800543c:	00f42400 	.word	0x00f42400

08005440 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e01c      	b.n	800548c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	795b      	ldrb	r3, [r3, #5]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d105      	bne.n	8005468 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fc faa6 	bl	80019b4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 0204 	orr.w	r2, r2, #4
 800547c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	791b      	ldrb	r3, [r3, #4]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_RNG_GenerateRandomNumber+0x1a>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e03d      	b.n	800552a <HAL_RNG_GenerateRandomNumber+0x96>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	795b      	ldrb	r3, [r3, #5]
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d12c      	bne.n	8005518 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2202      	movs	r2, #2
 80054c2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054c4:	f7fc fd0e 	bl	8001ee4 <HAL_GetTick>
 80054c8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80054ca:	e011      	b.n	80054f0 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80054cc:	f7fc fd0a 	bl	8001ee4 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d90a      	bls.n	80054f0 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e01c      	b.n	800552a <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d1e6      	bne.n	80054cc <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	715a      	strb	r2, [r3, #5]
 8005516:	e004      	b.n	8005522 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2204      	movs	r2, #4
 800551c:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	711a      	strb	r2, [r3, #4]

  return status;
 8005528:	7bfb      	ldrb	r3, [r7, #15]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b082      	sub	sp, #8
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	330c      	adds	r3, #12
 800553e:	4619      	mov	r1, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff ffa7 	bl	8005494 <HAL_RNG_GenerateRandomNumber>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d102      	bne.n	8005552 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	e000      	b.n	8005554 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8005552:	2300      	movs	r3, #0
  }
}
 8005554:	4618      	mov	r0, r3
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e07b      	b.n	8005666 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	2b00      	cmp	r3, #0
 8005574:	d108      	bne.n	8005588 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800557e:	d009      	beq.n	8005594 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	61da      	str	r2, [r3, #28]
 8005586:	e005      	b.n	8005594 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fc fa22 	bl	80019f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005618:	ea42 0103 	orr.w	r1, r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005620:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	0c1b      	lsrs	r3, r3, #16
 8005632:	f003 0104 	and.w	r1, r3, #4
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	f003 0210 	and.w	r2, r3, #16
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69da      	ldr	r2, [r3, #28]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005654:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b088      	sub	sp, #32
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	4613      	mov	r3, r2
 800567c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_SPI_Transmit+0x22>
 800568c:	2302      	movs	r3, #2
 800568e:	e126      	b.n	80058de <HAL_SPI_Transmit+0x270>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005698:	f7fc fc24 	bl	8001ee4 <HAL_GetTick>
 800569c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800569e:	88fb      	ldrh	r3, [r7, #6]
 80056a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d002      	beq.n	80056b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80056ae:	2302      	movs	r3, #2
 80056b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056b2:	e10b      	b.n	80058cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <HAL_SPI_Transmit+0x52>
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d102      	bne.n	80056c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056c4:	e102      	b.n	80058cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2203      	movs	r2, #3
 80056ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	88fa      	ldrh	r2, [r7, #6]
 80056de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	88fa      	ldrh	r2, [r7, #6]
 80056e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800570c:	d10f      	bne.n	800572e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800571c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800572c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	d007      	beq.n	800574c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800574a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005754:	d14b      	bne.n	80057ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_SPI_Transmit+0xf6>
 800575e:	8afb      	ldrh	r3, [r7, #22]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d13e      	bne.n	80057e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	881a      	ldrh	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	1c9a      	adds	r2, r3, #2
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005788:	e02b      	b.n	80057e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b02      	cmp	r3, #2
 8005796:	d112      	bne.n	80057be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579c:	881a      	ldrh	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a8:	1c9a      	adds	r2, r3, #2
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80057bc:	e011      	b.n	80057e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057be:	f7fc fb91 	bl	8001ee4 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d803      	bhi.n	80057d6 <HAL_SPI_Transmit+0x168>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057d4:	d102      	bne.n	80057dc <HAL_SPI_Transmit+0x16e>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d102      	bne.n	80057e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057e0:	e074      	b.n	80058cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1ce      	bne.n	800578a <HAL_SPI_Transmit+0x11c>
 80057ec:	e04c      	b.n	8005888 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <HAL_SPI_Transmit+0x18e>
 80057f6:	8afb      	ldrh	r3, [r7, #22]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d140      	bne.n	800587e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	7812      	ldrb	r2, [r2, #0]
 8005808:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005822:	e02c      	b.n	800587e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b02      	cmp	r3, #2
 8005830:	d113      	bne.n	800585a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	330c      	adds	r3, #12
 800583c:	7812      	ldrb	r2, [r2, #0]
 800583e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800584e:	b29b      	uxth	r3, r3
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	86da      	strh	r2, [r3, #54]	; 0x36
 8005858:	e011      	b.n	800587e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800585a:	f7fc fb43 	bl	8001ee4 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d803      	bhi.n	8005872 <HAL_SPI_Transmit+0x204>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005870:	d102      	bne.n	8005878 <HAL_SPI_Transmit+0x20a>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d102      	bne.n	800587e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800587c:	e026      	b.n	80058cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005882:	b29b      	uxth	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1cd      	bne.n	8005824 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	6839      	ldr	r1, [r7, #0]
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 f8b3 	bl	80059f8 <SPI_EndRxTxTransaction>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2220      	movs	r2, #32
 800589c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10a      	bne.n	80058bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058a6:	2300      	movs	r3, #0
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	77fb      	strb	r3, [r7, #31]
 80058c8:	e000      	b.n	80058cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80058ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3720      	adds	r7, #32
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	4613      	mov	r3, r2
 80058f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058f8:	f7fc faf4 	bl	8001ee4 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	1a9b      	subs	r3, r3, r2
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	4413      	add	r3, r2
 8005906:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005908:	f7fc faec 	bl	8001ee4 <HAL_GetTick>
 800590c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800590e:	4b39      	ldr	r3, [pc, #228]	; (80059f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	015b      	lsls	r3, r3, #5
 8005914:	0d1b      	lsrs	r3, r3, #20
 8005916:	69fa      	ldr	r2, [r7, #28]
 8005918:	fb02 f303 	mul.w	r3, r2, r3
 800591c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800591e:	e054      	b.n	80059ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005926:	d050      	beq.n	80059ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005928:	f7fc fadc 	bl	8001ee4 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	429a      	cmp	r2, r3
 8005936:	d902      	bls.n	800593e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d13d      	bne.n	80059ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800594c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005956:	d111      	bne.n	800597c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005960:	d004      	beq.n	800596c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596a:	d107      	bne.n	800597c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005984:	d10f      	bne.n	80059a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e017      	b.n	80059ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4013      	ands	r3, r2
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	bf0c      	ite	eq
 80059da:	2301      	moveq	r3, #1
 80059dc:	2300      	movne	r3, #0
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	79fb      	ldrb	r3, [r7, #7]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d19b      	bne.n	8005920 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3720      	adds	r7, #32
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000008 	.word	0x20000008

080059f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a04:	4b1b      	ldr	r3, [pc, #108]	; (8005a74 <SPI_EndRxTxTransaction+0x7c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a1b      	ldr	r2, [pc, #108]	; (8005a78 <SPI_EndRxTxTransaction+0x80>)
 8005a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0e:	0d5b      	lsrs	r3, r3, #21
 8005a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a14:	fb02 f303 	mul.w	r3, r2, r3
 8005a18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a22:	d112      	bne.n	8005a4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	2180      	movs	r1, #128	; 0x80
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f7ff ff5a 	bl	80058e8 <SPI_WaitFlagStateUntilTimeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d016      	beq.n	8005a68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3e:	f043 0220 	orr.w	r2, r3, #32
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e00f      	b.n	8005a6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a60:	2b80      	cmp	r3, #128	; 0x80
 8005a62:	d0f2      	beq.n	8005a4a <SPI_EndRxTxTransaction+0x52>
 8005a64:	e000      	b.n	8005a68 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a66:	bf00      	nop
  }

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000008 	.word	0x20000008
 8005a78:	165e9f81 	.word	0x165e9f81

08005a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e041      	b.n	8005b12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fc f846 	bl	8001b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4610      	mov	r0, r2
 8005abc:	f000 fbe2 	bl	8006284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d001      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e04e      	b.n	8005bd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a23      	ldr	r2, [pc, #140]	; (8005be0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d022      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x80>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b5e:	d01d      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x80>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1f      	ldr	r2, [pc, #124]	; (8005be4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d018      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x80>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a1e      	ldr	r2, [pc, #120]	; (8005be8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d013      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x80>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a1c      	ldr	r2, [pc, #112]	; (8005bec <HAL_TIM_Base_Start_IT+0xd0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00e      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x80>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1b      	ldr	r2, [pc, #108]	; (8005bf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d009      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x80>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a19      	ldr	r2, [pc, #100]	; (8005bf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d004      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x80>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a18      	ldr	r2, [pc, #96]	; (8005bf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d111      	bne.n	8005bc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b06      	cmp	r3, #6
 8005bac:	d010      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0201 	orr.w	r2, r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bbe:	e007      	b.n	8005bd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40010000 	.word	0x40010000
 8005be4:	40000400 	.word	0x40000400
 8005be8:	40000800 	.word	0x40000800
 8005bec:	40000c00 	.word	0x40000c00
 8005bf0:	40010400 	.word	0x40010400
 8005bf4:	40014000 	.word	0x40014000
 8005bf8:	40001800 	.word	0x40001800

08005bfc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0201 	bic.w	r2, r2, #1
 8005c12:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6a1a      	ldr	r2, [r3, #32]
 8005c1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10f      	bne.n	8005c44 <HAL_TIM_Base_Stop_IT+0x48>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6a1a      	ldr	r2, [r3, #32]
 8005c2a:	f240 4344 	movw	r3, #1092	; 0x444
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d107      	bne.n	8005c44 <HAL_TIM_Base_Stop_IT+0x48>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0201 	bic.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e041      	b.n	8005cf0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d106      	bne.n	8005c86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f839 	bl	8005cf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2202      	movs	r2, #2
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f000 faf3 	bl	8006284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d122      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d11b      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f06f 0202 	mvn.w	r2, #2
 8005d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fa7a 	bl	8006248 <HAL_TIM_IC_CaptureCallback>
 8005d54:	e005      	b.n	8005d62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fa6c 	bl	8006234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fa7d 	bl	800625c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d122      	bne.n	8005dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d11b      	bne.n	8005dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f06f 0204 	mvn.w	r2, #4
 8005d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2202      	movs	r2, #2
 8005d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fa50 	bl	8006248 <HAL_TIM_IC_CaptureCallback>
 8005da8:	e005      	b.n	8005db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fa42 	bl	8006234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fa53 	bl	800625c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	d122      	bne.n	8005e10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d11b      	bne.n	8005e10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f06f 0208 	mvn.w	r2, #8
 8005de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2204      	movs	r2, #4
 8005de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fa26 	bl	8006248 <HAL_TIM_IC_CaptureCallback>
 8005dfc:	e005      	b.n	8005e0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fa18 	bl	8006234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fa29 	bl	800625c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f003 0310 	and.w	r3, r3, #16
 8005e1a:	2b10      	cmp	r3, #16
 8005e1c:	d122      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f003 0310 	and.w	r3, r3, #16
 8005e28:	2b10      	cmp	r3, #16
 8005e2a:	d11b      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f06f 0210 	mvn.w	r2, #16
 8005e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2208      	movs	r2, #8
 8005e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f9fc 	bl	8006248 <HAL_TIM_IC_CaptureCallback>
 8005e50:	e005      	b.n	8005e5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f9ee 	bl	8006234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f9ff 	bl	800625c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d10e      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d107      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0201 	mvn.w	r2, #1
 8005e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f9c8 	bl	8006220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9a:	2b80      	cmp	r3, #128	; 0x80
 8005e9c:	d10e      	bne.n	8005ebc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea8:	2b80      	cmp	r3, #128	; 0x80
 8005eaa:	d107      	bne.n	8005ebc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fd54 	bl	8006964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec6:	2b40      	cmp	r3, #64	; 0x40
 8005ec8:	d10e      	bne.n	8005ee8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed4:	2b40      	cmp	r3, #64	; 0x40
 8005ed6:	d107      	bne.n	8005ee8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f9c4 	bl	8006270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d10e      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d107      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f06f 0220 	mvn.w	r2, #32
 8005f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fd1e 	bl	8006950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f14:	bf00      	nop
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d101      	bne.n	8005f36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005f32:	2302      	movs	r3, #2
 8005f34:	e0ac      	b.n	8006090 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b0c      	cmp	r3, #12
 8005f42:	f200 809f 	bhi.w	8006084 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005f46:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005f81 	.word	0x08005f81
 8005f50:	08006085 	.word	0x08006085
 8005f54:	08006085 	.word	0x08006085
 8005f58:	08006085 	.word	0x08006085
 8005f5c:	08005fc1 	.word	0x08005fc1
 8005f60:	08006085 	.word	0x08006085
 8005f64:	08006085 	.word	0x08006085
 8005f68:	08006085 	.word	0x08006085
 8005f6c:	08006003 	.word	0x08006003
 8005f70:	08006085 	.word	0x08006085
 8005f74:	08006085 	.word	0x08006085
 8005f78:	08006085 	.word	0x08006085
 8005f7c:	08006043 	.word	0x08006043
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fa1c 	bl	80063c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699a      	ldr	r2, [r3, #24]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0208 	orr.w	r2, r2, #8
 8005f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	699a      	ldr	r2, [r3, #24]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0204 	bic.w	r2, r2, #4
 8005faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6999      	ldr	r1, [r3, #24]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	691a      	ldr	r2, [r3, #16]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	619a      	str	r2, [r3, #24]
      break;
 8005fbe:	e062      	b.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 fa6c 	bl	80064a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699a      	ldr	r2, [r3, #24]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6999      	ldr	r1, [r3, #24]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	021a      	lsls	r2, r3, #8
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	619a      	str	r2, [r3, #24]
      break;
 8006000:	e041      	b.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68b9      	ldr	r1, [r7, #8]
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fac1 	bl	8006590 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69da      	ldr	r2, [r3, #28]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f042 0208 	orr.w	r2, r2, #8
 800601c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69da      	ldr	r2, [r3, #28]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0204 	bic.w	r2, r2, #4
 800602c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69d9      	ldr	r1, [r3, #28]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	691a      	ldr	r2, [r3, #16]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	61da      	str	r2, [r3, #28]
      break;
 8006040:	e021      	b.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fb15 	bl	8006678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800605c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69da      	ldr	r2, [r3, #28]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800606c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69d9      	ldr	r1, [r3, #28]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	021a      	lsls	r2, r3, #8
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	61da      	str	r2, [r3, #28]
      break;
 8006082:	e000      	b.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006084:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d101      	bne.n	80060b0 <HAL_TIM_ConfigClockSource+0x18>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e0b3      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x180>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e8:	d03e      	beq.n	8006168 <HAL_TIM_ConfigClockSource+0xd0>
 80060ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ee:	f200 8087 	bhi.w	8006200 <HAL_TIM_ConfigClockSource+0x168>
 80060f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f6:	f000 8085 	beq.w	8006204 <HAL_TIM_ConfigClockSource+0x16c>
 80060fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fe:	d87f      	bhi.n	8006200 <HAL_TIM_ConfigClockSource+0x168>
 8006100:	2b70      	cmp	r3, #112	; 0x70
 8006102:	d01a      	beq.n	800613a <HAL_TIM_ConfigClockSource+0xa2>
 8006104:	2b70      	cmp	r3, #112	; 0x70
 8006106:	d87b      	bhi.n	8006200 <HAL_TIM_ConfigClockSource+0x168>
 8006108:	2b60      	cmp	r3, #96	; 0x60
 800610a:	d050      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x116>
 800610c:	2b60      	cmp	r3, #96	; 0x60
 800610e:	d877      	bhi.n	8006200 <HAL_TIM_ConfigClockSource+0x168>
 8006110:	2b50      	cmp	r3, #80	; 0x50
 8006112:	d03c      	beq.n	800618e <HAL_TIM_ConfigClockSource+0xf6>
 8006114:	2b50      	cmp	r3, #80	; 0x50
 8006116:	d873      	bhi.n	8006200 <HAL_TIM_ConfigClockSource+0x168>
 8006118:	2b40      	cmp	r3, #64	; 0x40
 800611a:	d058      	beq.n	80061ce <HAL_TIM_ConfigClockSource+0x136>
 800611c:	2b40      	cmp	r3, #64	; 0x40
 800611e:	d86f      	bhi.n	8006200 <HAL_TIM_ConfigClockSource+0x168>
 8006120:	2b30      	cmp	r3, #48	; 0x30
 8006122:	d064      	beq.n	80061ee <HAL_TIM_ConfigClockSource+0x156>
 8006124:	2b30      	cmp	r3, #48	; 0x30
 8006126:	d86b      	bhi.n	8006200 <HAL_TIM_ConfigClockSource+0x168>
 8006128:	2b20      	cmp	r3, #32
 800612a:	d060      	beq.n	80061ee <HAL_TIM_ConfigClockSource+0x156>
 800612c:	2b20      	cmp	r3, #32
 800612e:	d867      	bhi.n	8006200 <HAL_TIM_ConfigClockSource+0x168>
 8006130:	2b00      	cmp	r3, #0
 8006132:	d05c      	beq.n	80061ee <HAL_TIM_ConfigClockSource+0x156>
 8006134:	2b10      	cmp	r3, #16
 8006136:	d05a      	beq.n	80061ee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006138:	e062      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	6899      	ldr	r1, [r3, #8]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f000 fb65 	bl	8006818 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800615c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	609a      	str	r2, [r3, #8]
      break;
 8006166:	e04e      	b.n	8006206 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	6899      	ldr	r1, [r3, #8]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f000 fb4e 	bl	8006818 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800618a:	609a      	str	r2, [r3, #8]
      break;
 800618c:	e03b      	b.n	8006206 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6859      	ldr	r1, [r3, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	461a      	mov	r2, r3
 800619c:	f000 fac2 	bl	8006724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2150      	movs	r1, #80	; 0x50
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fb1b 	bl	80067e2 <TIM_ITRx_SetConfig>
      break;
 80061ac:	e02b      	b.n	8006206 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	6859      	ldr	r1, [r3, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	461a      	mov	r2, r3
 80061bc:	f000 fae1 	bl	8006782 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2160      	movs	r1, #96	; 0x60
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 fb0b 	bl	80067e2 <TIM_ITRx_SetConfig>
      break;
 80061cc:	e01b      	b.n	8006206 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6818      	ldr	r0, [r3, #0]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	6859      	ldr	r1, [r3, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	461a      	mov	r2, r3
 80061dc:	f000 faa2 	bl	8006724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2140      	movs	r1, #64	; 0x40
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 fafb 	bl	80067e2 <TIM_ITRx_SetConfig>
      break;
 80061ec:	e00b      	b.n	8006206 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4619      	mov	r1, r3
 80061f8:	4610      	mov	r0, r2
 80061fa:	f000 faf2 	bl	80067e2 <TIM_ITRx_SetConfig>
        break;
 80061fe:	e002      	b.n	8006206 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006200:	bf00      	nop
 8006202:	e000      	b.n	8006206 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006204:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a40      	ldr	r2, [pc, #256]	; (8006398 <TIM_Base_SetConfig+0x114>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d013      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a2:	d00f      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a3d      	ldr	r2, [pc, #244]	; (800639c <TIM_Base_SetConfig+0x118>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d00b      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a3c      	ldr	r2, [pc, #240]	; (80063a0 <TIM_Base_SetConfig+0x11c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d007      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a3b      	ldr	r2, [pc, #236]	; (80063a4 <TIM_Base_SetConfig+0x120>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d003      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a3a      	ldr	r2, [pc, #232]	; (80063a8 <TIM_Base_SetConfig+0x124>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d108      	bne.n	80062d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2f      	ldr	r2, [pc, #188]	; (8006398 <TIM_Base_SetConfig+0x114>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d02b      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e4:	d027      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2c      	ldr	r2, [pc, #176]	; (800639c <TIM_Base_SetConfig+0x118>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d023      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a2b      	ldr	r2, [pc, #172]	; (80063a0 <TIM_Base_SetConfig+0x11c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01f      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a2a      	ldr	r2, [pc, #168]	; (80063a4 <TIM_Base_SetConfig+0x120>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d01b      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a29      	ldr	r2, [pc, #164]	; (80063a8 <TIM_Base_SetConfig+0x124>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d017      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a28      	ldr	r2, [pc, #160]	; (80063ac <TIM_Base_SetConfig+0x128>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d013      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a27      	ldr	r2, [pc, #156]	; (80063b0 <TIM_Base_SetConfig+0x12c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00f      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a26      	ldr	r2, [pc, #152]	; (80063b4 <TIM_Base_SetConfig+0x130>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00b      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a25      	ldr	r2, [pc, #148]	; (80063b8 <TIM_Base_SetConfig+0x134>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d007      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a24      	ldr	r2, [pc, #144]	; (80063bc <TIM_Base_SetConfig+0x138>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d003      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a23      	ldr	r2, [pc, #140]	; (80063c0 <TIM_Base_SetConfig+0x13c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d108      	bne.n	8006348 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800633c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a0a      	ldr	r2, [pc, #40]	; (8006398 <TIM_Base_SetConfig+0x114>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d003      	beq.n	800637c <TIM_Base_SetConfig+0xf8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a0c      	ldr	r2, [pc, #48]	; (80063a8 <TIM_Base_SetConfig+0x124>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d103      	bne.n	8006384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	691a      	ldr	r2, [r3, #16]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	615a      	str	r2, [r3, #20]
}
 800638a:	bf00      	nop
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	40010000 	.word	0x40010000
 800639c:	40000400 	.word	0x40000400
 80063a0:	40000800 	.word	0x40000800
 80063a4:	40000c00 	.word	0x40000c00
 80063a8:	40010400 	.word	0x40010400
 80063ac:	40014000 	.word	0x40014000
 80063b0:	40014400 	.word	0x40014400
 80063b4:	40014800 	.word	0x40014800
 80063b8:	40001800 	.word	0x40001800
 80063bc:	40001c00 	.word	0x40001c00
 80063c0:	40002000 	.word	0x40002000

080063c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f023 0201 	bic.w	r2, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0303 	bic.w	r3, r3, #3
 80063fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f023 0302 	bic.w	r3, r3, #2
 800640c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a20      	ldr	r2, [pc, #128]	; (800649c <TIM_OC1_SetConfig+0xd8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d003      	beq.n	8006428 <TIM_OC1_SetConfig+0x64>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a1f      	ldr	r2, [pc, #124]	; (80064a0 <TIM_OC1_SetConfig+0xdc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d10c      	bne.n	8006442 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f023 0308 	bic.w	r3, r3, #8
 800642e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	4313      	orrs	r3, r2
 8006438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f023 0304 	bic.w	r3, r3, #4
 8006440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a15      	ldr	r2, [pc, #84]	; (800649c <TIM_OC1_SetConfig+0xd8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d003      	beq.n	8006452 <TIM_OC1_SetConfig+0x8e>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a14      	ldr	r2, [pc, #80]	; (80064a0 <TIM_OC1_SetConfig+0xdc>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d111      	bne.n	8006476 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	4313      	orrs	r3, r2
 800646a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	621a      	str	r2, [r3, #32]
}
 8006490:	bf00      	nop
 8006492:	371c      	adds	r7, #28
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	40010000 	.word	0x40010000
 80064a0:	40010400 	.word	0x40010400

080064a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f023 0210 	bic.w	r2, r3, #16
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f023 0320 	bic.w	r3, r3, #32
 80064ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a22      	ldr	r2, [pc, #136]	; (8006588 <TIM_OC2_SetConfig+0xe4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d003      	beq.n	800650c <TIM_OC2_SetConfig+0x68>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a21      	ldr	r2, [pc, #132]	; (800658c <TIM_OC2_SetConfig+0xe8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d10d      	bne.n	8006528 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4313      	orrs	r3, r2
 800651e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006526:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a17      	ldr	r2, [pc, #92]	; (8006588 <TIM_OC2_SetConfig+0xe4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d003      	beq.n	8006538 <TIM_OC2_SetConfig+0x94>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a16      	ldr	r2, [pc, #88]	; (800658c <TIM_OC2_SetConfig+0xe8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d113      	bne.n	8006560 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800653e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006546:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	4313      	orrs	r3, r2
 8006552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	621a      	str	r2, [r3, #32]
}
 800657a:	bf00      	nop
 800657c:	371c      	adds	r7, #28
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40010000 	.word	0x40010000
 800658c:	40010400 	.word	0x40010400

08006590 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f023 0303 	bic.w	r3, r3, #3
 80065c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	021b      	lsls	r3, r3, #8
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a21      	ldr	r2, [pc, #132]	; (8006670 <TIM_OC3_SetConfig+0xe0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d003      	beq.n	80065f6 <TIM_OC3_SetConfig+0x66>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a20      	ldr	r2, [pc, #128]	; (8006674 <TIM_OC3_SetConfig+0xe4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d10d      	bne.n	8006612 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	021b      	lsls	r3, r3, #8
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	4313      	orrs	r3, r2
 8006608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a16      	ldr	r2, [pc, #88]	; (8006670 <TIM_OC3_SetConfig+0xe0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d003      	beq.n	8006622 <TIM_OC3_SetConfig+0x92>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a15      	ldr	r2, [pc, #84]	; (8006674 <TIM_OC3_SetConfig+0xe4>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d113      	bne.n	800664a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	621a      	str	r2, [r3, #32]
}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	40010000 	.word	0x40010000
 8006674:	40010400 	.word	0x40010400

08006678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	031b      	lsls	r3, r3, #12
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a12      	ldr	r2, [pc, #72]	; (800671c <TIM_OC4_SetConfig+0xa4>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_OC4_SetConfig+0x68>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a11      	ldr	r2, [pc, #68]	; (8006720 <TIM_OC4_SetConfig+0xa8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d109      	bne.n	80066f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	019b      	lsls	r3, r3, #6
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	621a      	str	r2, [r3, #32]
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	40010000 	.word	0x40010000
 8006720:	40010400 	.word	0x40010400

08006724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	f023 0201 	bic.w	r2, r3, #1
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800674e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	011b      	lsls	r3, r3, #4
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f023 030a 	bic.w	r3, r3, #10
 8006760:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	4313      	orrs	r3, r2
 8006768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	621a      	str	r2, [r3, #32]
}
 8006776:	bf00      	nop
 8006778:	371c      	adds	r7, #28
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006782:	b480      	push	{r7}
 8006784:	b087      	sub	sp, #28
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f023 0210 	bic.w	r2, r3, #16
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	031b      	lsls	r3, r3, #12
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	011b      	lsls	r3, r3, #4
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	621a      	str	r2, [r3, #32]
}
 80067d6:	bf00      	nop
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b085      	sub	sp, #20
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4313      	orrs	r3, r2
 8006800:	f043 0307 	orr.w	r3, r3, #7
 8006804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	609a      	str	r2, [r3, #8]
}
 800680c:	bf00      	nop
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	021a      	lsls	r2, r3, #8
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	431a      	orrs	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4313      	orrs	r3, r2
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	4313      	orrs	r3, r2
 8006844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	609a      	str	r2, [r3, #8]
}
 800684c:	bf00      	nop
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006868:	2b01      	cmp	r3, #1
 800686a:	d101      	bne.n	8006870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800686c:	2302      	movs	r3, #2
 800686e:	e05a      	b.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a21      	ldr	r2, [pc, #132]	; (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d022      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068bc:	d01d      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a1d      	ldr	r2, [pc, #116]	; (8006938 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d018      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a1b      	ldr	r2, [pc, #108]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d013      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1a      	ldr	r2, [pc, #104]	; (8006940 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d00e      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a18      	ldr	r2, [pc, #96]	; (8006944 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d009      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a17      	ldr	r2, [pc, #92]	; (8006948 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d004      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a15      	ldr	r2, [pc, #84]	; (800694c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d10c      	bne.n	8006914 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	4313      	orrs	r3, r2
 800690a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	40010000 	.word	0x40010000
 8006938:	40000400 	.word	0x40000400
 800693c:	40000800 	.word	0x40000800
 8006940:	40000c00 	.word	0x40000c00
 8006944:	40010400 	.word	0x40010400
 8006948:	40014000 	.word	0x40014000
 800694c:	40001800 	.word	0x40001800

08006950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006978:	b084      	sub	sp, #16
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	f107 001c 	add.w	r0, r7, #28
 8006986:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698c:	2b01      	cmp	r3, #1
 800698e:	d122      	bne.n	80069d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80069a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d105      	bne.n	80069ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f94a 	bl	8006c64 <USB_CoreReset>
 80069d0:	4603      	mov	r3, r0
 80069d2:	73fb      	strb	r3, [r7, #15]
 80069d4:	e01a      	b.n	8006a0c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f93e 	bl	8006c64 <USB_CoreReset>
 80069e8:	4603      	mov	r3, r0
 80069ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d106      	bne.n	8006a00 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	639a      	str	r2, [r3, #56]	; 0x38
 80069fe:	e005      	b.n	8006a0c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d10b      	bne.n	8006a2a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f043 0206 	orr.w	r2, r3, #6
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f043 0220 	orr.w	r2, r3, #32
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a36:	b004      	add	sp, #16
 8006a38:	4770      	bx	lr

08006a3a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f043 0201 	orr.w	r2, r3, #1
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f023 0201 	bic.w	r2, r3, #1
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b082      	sub	sp, #8
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	460b      	mov	r3, r1
 8006a88:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d106      	bne.n	8006aaa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	60da      	str	r2, [r3, #12]
 8006aa8:	e00b      	b.n	8006ac2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d106      	bne.n	8006abe <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	60da      	str	r2, [r3, #12]
 8006abc:	e001      	b.n	8006ac2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e003      	b.n	8006aca <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006ac2:	2032      	movs	r0, #50	; 0x32
 8006ac4:	f7fb fa1a 	bl	8001efc <HAL_Delay>

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	019b      	lsls	r3, r3, #6
 8006ae6:	f043 0220 	orr.w	r2, r3, #32
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3301      	adds	r3, #1
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4a09      	ldr	r2, [pc, #36]	; (8006b1c <USB_FlushTxFifo+0x48>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d901      	bls.n	8006b00 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e006      	b.n	8006b0e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	f003 0320 	and.w	r3, r3, #32
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d0f0      	beq.n	8006aee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	00030d40 	.word	0x00030d40

08006b20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2210      	movs	r2, #16
 8006b30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3301      	adds	r3, #1
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4a09      	ldr	r2, [pc, #36]	; (8006b60 <USB_FlushRxFifo+0x40>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d901      	bls.n	8006b44 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e006      	b.n	8006b52 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	f003 0310 	and.w	r3, r3, #16
 8006b4c:	2b10      	cmp	r3, #16
 8006b4e:	d0f0      	beq.n	8006b32 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	00030d40 	.word	0x00030d40

08006b64 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b089      	sub	sp, #36	; 0x24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	4611      	mov	r1, r2
 8006b70:	461a      	mov	r2, r3
 8006b72:	460b      	mov	r3, r1
 8006b74:	71fb      	strb	r3, [r7, #7]
 8006b76:	4613      	mov	r3, r2
 8006b78:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006b82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d11a      	bne.n	8006bc0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b8a:	88bb      	ldrh	r3, [r7, #4]
 8006b8c:	3303      	adds	r3, #3
 8006b8e:	089b      	lsrs	r3, r3, #2
 8006b90:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b92:	2300      	movs	r3, #0
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	e00f      	b.n	8006bb8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b98:	79fb      	ldrb	r3, [r7, #7]
 8006b9a:	031a      	lsls	r2, r3, #12
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	3304      	adds	r3, #4
 8006bb0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	61bb      	str	r3, [r7, #24]
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d3eb      	bcc.n	8006b98 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3724      	adds	r7, #36	; 0x24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b089      	sub	sp, #36	; 0x24
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006be4:	88fb      	ldrh	r3, [r7, #6]
 8006be6:	3303      	adds	r3, #3
 8006be8:	089b      	lsrs	r3, r3, #2
 8006bea:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006bec:	2300      	movs	r3, #0
 8006bee:	61bb      	str	r3, [r7, #24]
 8006bf0:	e00b      	b.n	8006c0a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	601a      	str	r2, [r3, #0]
    pDest++;
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	3304      	adds	r3, #4
 8006c02:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	3301      	adds	r3, #1
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d3ef      	bcc.n	8006bf2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006c12:	69fb      	ldr	r3, [r7, #28]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3724      	adds	r7, #36	; 0x24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4013      	ands	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c38:	68fb      	ldr	r3, [r7, #12]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	f003 0301 	and.w	r3, r3, #1
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
	...

08006c64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	3301      	adds	r3, #1
 8006c74:	60fb      	str	r3, [r7, #12]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4a13      	ldr	r2, [pc, #76]	; (8006cc8 <USB_CoreReset+0x64>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d901      	bls.n	8006c82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e01b      	b.n	8006cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	daf2      	bge.n	8006c70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	f043 0201 	orr.w	r2, r3, #1
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4a09      	ldr	r2, [pc, #36]	; (8006cc8 <USB_CoreReset+0x64>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d901      	bls.n	8006cac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e006      	b.n	8006cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d0f0      	beq.n	8006c9a <USB_CoreReset+0x36>

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	00030d40 	.word	0x00030d40

08006ccc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ccc:	b084      	sub	sp, #16
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	f107 001c 	add.w	r0, r7, #28
 8006cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ce8:	461a      	mov	r2, r3
 8006cea:	2300      	movs	r3, #0
 8006cec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d018      	beq.n	8006d50 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d10a      	bne.n	8006d3a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d32:	f043 0304 	orr.w	r3, r3, #4
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	e014      	b.n	8006d64 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d48:	f023 0304 	bic.w	r3, r3, #4
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	e009      	b.n	8006d64 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d5e:	f023 0304 	bic.w	r3, r3, #4
 8006d62:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006d64:	2110      	movs	r1, #16
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7ff feb4 	bl	8006ad4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff fed7 	bl	8006b20 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	e015      	b.n	8006da4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d84:	461a      	mov	r2, r3
 8006d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d8a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d98:	461a      	mov	r2, r3
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3301      	adds	r3, #1
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d3e5      	bcc.n	8006d78 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006dac:	2101      	movs	r1, #1
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f8ac 	bl	8006f0c <USB_DriveVbus>

  HAL_Delay(200U);
 8006db4:	20c8      	movs	r0, #200	; 0xc8
 8006db6:	f7fb f8a1 	bl	8001efc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dc6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00b      	beq.n	8006dec <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dda:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a14      	ldr	r2, [pc, #80]	; (8006e30 <USB_HostInit+0x164>)
 8006de0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a13      	ldr	r2, [pc, #76]	; (8006e34 <USB_HostInit+0x168>)
 8006de6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006dea:	e009      	b.n	8006e00 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2280      	movs	r2, #128	; 0x80
 8006df0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a10      	ldr	r2, [pc, #64]	; (8006e38 <USB_HostInit+0x16c>)
 8006df6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a10      	ldr	r2, [pc, #64]	; (8006e3c <USB_HostInit+0x170>)
 8006dfc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d105      	bne.n	8006e12 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	f043 0210 	orr.w	r2, r3, #16
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <USB_HostInit+0x174>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e2a:	b004      	add	sp, #16
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	01000200 	.word	0x01000200
 8006e34:	00e00300 	.word	0x00e00300
 8006e38:	00600080 	.word	0x00600080
 8006e3c:	004000e0 	.word	0x004000e0
 8006e40:	a3200008 	.word	0xa3200008

08006e44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e62:	f023 0303 	bic.w	r3, r3, #3
 8006e66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	68f9      	ldr	r1, [r7, #12]
 8006e78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006e80:	78fb      	ldrb	r3, [r7, #3]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d107      	bne.n	8006e96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006e92:	6053      	str	r3, [r2, #4]
 8006e94:	e009      	b.n	8006eaa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d106      	bne.n	8006eaa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f241 7370 	movw	r3, #6000	; 0x1770
 8006ea8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ed8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ee6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006ee8:	2064      	movs	r0, #100	; 0x64
 8006eea:	f7fb f807 	bl	8001efc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ef6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006efa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006efc:	200a      	movs	r0, #10
 8006efe:	f7fa fffd 	bl	8001efc <HAL_Delay>

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006f30:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d109      	bne.n	8006f50 <USB_DriveVbus+0x44>
 8006f3c:	78fb      	ldrb	r3, [r7, #3]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d106      	bne.n	8006f50 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006f4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f4e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f5a:	d109      	bne.n	8006f70 <USB_DriveVbus+0x64>
 8006f5c:	78fb      	ldrb	r3, [r7, #3]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d106      	bne.n	8006f70 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006f6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f6e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b085      	sub	sp, #20
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	0c5b      	lsrs	r3, r3, #17
 8006f9c:	f003 0303 	and.w	r3, r3, #3
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	b29b      	uxth	r3, r3
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
	...

08006fd0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	4608      	mov	r0, r1
 8006fda:	4611      	mov	r1, r2
 8006fdc:	461a      	mov	r2, r3
 8006fde:	4603      	mov	r3, r0
 8006fe0:	70fb      	strb	r3, [r7, #3]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	70bb      	strb	r3, [r7, #2]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006ff2:	78fb      	ldrb	r3, [r7, #3]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ffe:	461a      	mov	r2, r3
 8007000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007004:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007006:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800700a:	2b03      	cmp	r3, #3
 800700c:	d87e      	bhi.n	800710c <USB_HC_Init+0x13c>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <USB_HC_Init+0x44>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	08007025 	.word	0x08007025
 8007018:	080070cf 	.word	0x080070cf
 800701c:	08007025 	.word	0x08007025
 8007020:	08007091 	.word	0x08007091
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007024:	78fb      	ldrb	r3, [r7, #3]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	4413      	add	r3, r2
 800702c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007030:	461a      	mov	r2, r3
 8007032:	f240 439d 	movw	r3, #1181	; 0x49d
 8007036:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007038:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800703c:	2b00      	cmp	r3, #0
 800703e:	da10      	bge.n	8007062 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	4413      	add	r3, r2
 8007048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	78fa      	ldrb	r2, [r7, #3]
 8007050:	0151      	lsls	r1, r2, #5
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	440a      	add	r2, r1
 8007056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800705a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800705e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007060:	e057      	b.n	8007112 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706a:	2b00      	cmp	r3, #0
 800706c:	d051      	beq.n	8007112 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800706e:	78fb      	ldrb	r3, [r7, #3]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	4413      	add	r3, r2
 8007076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	78fa      	ldrb	r2, [r7, #3]
 800707e:	0151      	lsls	r1, r2, #5
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	440a      	add	r2, r1
 8007084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007088:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800708c:	60d3      	str	r3, [r2, #12]
      break;
 800708e:	e040      	b.n	8007112 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007090:	78fb      	ldrb	r3, [r7, #3]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	4413      	add	r3, r2
 8007098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800709c:	461a      	mov	r2, r3
 800709e:	f240 639d 	movw	r3, #1693	; 0x69d
 80070a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80070a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	da34      	bge.n	8007116 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80070ac:	78fb      	ldrb	r3, [r7, #3]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	78fa      	ldrb	r2, [r7, #3]
 80070bc:	0151      	lsls	r1, r2, #5
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	440a      	add	r2, r1
 80070c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070ca:	60d3      	str	r3, [r2, #12]
      }

      break;
 80070cc:	e023      	b.n	8007116 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80070ce:	78fb      	ldrb	r3, [r7, #3]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070da:	461a      	mov	r2, r3
 80070dc:	f240 2325 	movw	r3, #549	; 0x225
 80070e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80070e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	da17      	bge.n	800711a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80070ea:	78fb      	ldrb	r3, [r7, #3]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	78fa      	ldrb	r2, [r7, #3]
 80070fa:	0151      	lsls	r1, r2, #5
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	440a      	add	r2, r1
 8007100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007104:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007108:	60d3      	str	r3, [r2, #12]
      }
      break;
 800710a:	e006      	b.n	800711a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	77fb      	strb	r3, [r7, #31]
      break;
 8007110:	e004      	b.n	800711c <USB_HC_Init+0x14c>
      break;
 8007112:	bf00      	nop
 8007114:	e002      	b.n	800711c <USB_HC_Init+0x14c>
      break;
 8007116:	bf00      	nop
 8007118:	e000      	b.n	800711c <USB_HC_Init+0x14c>
      break;
 800711a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007122:	699a      	ldr	r2, [r3, #24]
 8007124:	78fb      	ldrb	r3, [r7, #3]
 8007126:	f003 030f 	and.w	r3, r3, #15
 800712a:	2101      	movs	r1, #1
 800712c:	fa01 f303 	lsl.w	r3, r1, r3
 8007130:	6939      	ldr	r1, [r7, #16]
 8007132:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007136:	4313      	orrs	r3, r2
 8007138:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007146:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800714a:	2b00      	cmp	r3, #0
 800714c:	da03      	bge.n	8007156 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800714e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007152:	61bb      	str	r3, [r7, #24]
 8007154:	e001      	b.n	800715a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7ff ff0f 	bl	8006f7e <USB_GetHostSpeed>
 8007160:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007162:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007166:	2b02      	cmp	r3, #2
 8007168:	d106      	bne.n	8007178 <USB_HC_Init+0x1a8>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b02      	cmp	r3, #2
 800716e:	d003      	beq.n	8007178 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007174:	617b      	str	r3, [r7, #20]
 8007176:	e001      	b.n	800717c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800717c:	787b      	ldrb	r3, [r7, #1]
 800717e:	059b      	lsls	r3, r3, #22
 8007180:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007184:	78bb      	ldrb	r3, [r7, #2]
 8007186:	02db      	lsls	r3, r3, #11
 8007188:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800718c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800718e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007192:	049b      	lsls	r3, r3, #18
 8007194:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007198:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800719a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800719c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80071a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80071a6:	78fb      	ldrb	r3, [r7, #3]
 80071a8:	0159      	lsls	r1, r3, #5
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	440b      	add	r3, r1
 80071ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80071b8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80071ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d10f      	bne.n	80071e2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80071c2:	78fb      	ldrb	r3, [r7, #3]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	78fa      	ldrb	r2, [r7, #3]
 80071d2:	0151      	lsls	r1, r2, #5
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	440a      	add	r2, r1
 80071d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071e0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80071e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3720      	adds	r7, #32
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08c      	sub	sp, #48	; 0x30
 80071f0:	af02      	add	r7, sp, #8
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	4613      	mov	r3, r2
 80071f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	785b      	ldrb	r3, [r3, #1]
 8007202:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007208:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007212:	2b00      	cmp	r3, #0
 8007214:	d02d      	beq.n	8007272 <USB_HC_StartXfer+0x86>
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	791b      	ldrb	r3, [r3, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d129      	bne.n	8007272 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d117      	bne.n	8007254 <USB_HC_StartXfer+0x68>
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	79db      	ldrb	r3, [r3, #7]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <USB_HC_StartXfer+0x48>
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	79db      	ldrb	r3, [r3, #7]
 8007230:	2b02      	cmp	r3, #2
 8007232:	d10f      	bne.n	8007254 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	4413      	add	r3, r2
 800723c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	69fa      	ldr	r2, [r7, #28]
 8007244:	0151      	lsls	r1, r2, #5
 8007246:	6a3a      	ldr	r2, [r7, #32]
 8007248:	440a      	add	r2, r1
 800724a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800724e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007252:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007254:	79fb      	ldrb	r3, [r7, #7]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10b      	bne.n	8007272 <USB_HC_StartXfer+0x86>
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	795b      	ldrb	r3, [r3, #5]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d107      	bne.n	8007272 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	785b      	ldrb	r3, [r3, #1]
 8007266:	4619      	mov	r1, r3
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 fa2f 	bl	80076cc <USB_DoPing>
      return HAL_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	e0f8      	b.n	8007464 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d018      	beq.n	80072ac <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	8912      	ldrh	r2, [r2, #8]
 8007282:	4413      	add	r3, r2
 8007284:	3b01      	subs	r3, #1
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	8912      	ldrh	r2, [r2, #8]
 800728a:	fbb3 f3f2 	udiv	r3, r3, r2
 800728e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007290:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007292:	8b7b      	ldrh	r3, [r7, #26]
 8007294:	429a      	cmp	r2, r3
 8007296:	d90b      	bls.n	80072b0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007298:	8b7b      	ldrh	r3, [r7, #26]
 800729a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800729c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	8912      	ldrh	r2, [r2, #8]
 80072a2:	fb02 f203 	mul.w	r2, r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	611a      	str	r2, [r3, #16]
 80072aa:	e001      	b.n	80072b0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80072ac:	2301      	movs	r3, #1
 80072ae:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	78db      	ldrb	r3, [r3, #3]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d007      	beq.n	80072c8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80072b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	8912      	ldrh	r2, [r2, #8]
 80072be:	fb02 f203 	mul.w	r2, r2, r3
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	611a      	str	r2, [r3, #16]
 80072c6:	e003      	b.n	80072d0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	695a      	ldr	r2, [r3, #20]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80072d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072da:	04d9      	lsls	r1, r3, #19
 80072dc:	4b63      	ldr	r3, [pc, #396]	; (800746c <USB_HC_StartXfer+0x280>)
 80072de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	7a9b      	ldrb	r3, [r3, #10]
 80072e6:	075b      	lsls	r3, r3, #29
 80072e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072ec:	69f9      	ldr	r1, [r7, #28]
 80072ee:	0148      	lsls	r0, r1, #5
 80072f0:	6a39      	ldr	r1, [r7, #32]
 80072f2:	4401      	add	r1, r0
 80072f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80072f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80072fc:	79fb      	ldrb	r3, [r7, #7]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d009      	beq.n	8007316 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	68d9      	ldr	r1, [r3, #12]
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	4413      	add	r3, r2
 800730e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007312:	460a      	mov	r2, r1
 8007314:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b00      	cmp	r3, #0
 8007324:	bf0c      	ite	eq
 8007326:	2301      	moveq	r3, #1
 8007328:	2300      	movne	r3, #0
 800732a:	b2db      	uxtb	r3, r3
 800732c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	4413      	add	r3, r2
 8007336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	69fa      	ldr	r2, [r7, #28]
 800733e:	0151      	lsls	r1, r2, #5
 8007340:	6a3a      	ldr	r2, [r7, #32]
 8007342:	440a      	add	r2, r1
 8007344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007348:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800734c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	4413      	add	r3, r2
 8007356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	7e7b      	ldrb	r3, [r7, #25]
 800735e:	075b      	lsls	r3, r3, #29
 8007360:	69f9      	ldr	r1, [r7, #28]
 8007362:	0148      	lsls	r0, r1, #5
 8007364:	6a39      	ldr	r1, [r7, #32]
 8007366:	4401      	add	r1, r0
 8007368:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800736c:	4313      	orrs	r3, r2
 800736e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	4413      	add	r3, r2
 8007378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007386:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	78db      	ldrb	r3, [r3, #3]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d004      	beq.n	800739a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007396:	613b      	str	r3, [r7, #16]
 8007398:	e003      	b.n	80073a2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073a0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073a8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073b6:	461a      	mov	r2, r3
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80073bc:	79fb      	ldrb	r3, [r7, #7]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	e04e      	b.n	8007464 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	78db      	ldrb	r3, [r3, #3]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d149      	bne.n	8007462 <USB_HC_StartXfer+0x276>
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d045      	beq.n	8007462 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	79db      	ldrb	r3, [r3, #7]
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d830      	bhi.n	8007440 <USB_HC_StartXfer+0x254>
 80073de:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <USB_HC_StartXfer+0x1f8>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	080073f5 	.word	0x080073f5
 80073e8:	08007419 	.word	0x08007419
 80073ec:	080073f5 	.word	0x080073f5
 80073f0:	08007419 	.word	0x08007419
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	3303      	adds	r3, #3
 80073fa:	089b      	lsrs	r3, r3, #2
 80073fc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80073fe:	8afa      	ldrh	r2, [r7, #22]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007404:	b29b      	uxth	r3, r3
 8007406:	429a      	cmp	r2, r3
 8007408:	d91c      	bls.n	8007444 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	f043 0220 	orr.w	r2, r3, #32
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	619a      	str	r2, [r3, #24]
        }
        break;
 8007416:	e015      	b.n	8007444 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	3303      	adds	r3, #3
 800741e:	089b      	lsrs	r3, r3, #2
 8007420:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007422:	8afa      	ldrh	r2, [r7, #22]
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	b29b      	uxth	r3, r3
 800742e:	429a      	cmp	r2, r3
 8007430:	d90a      	bls.n	8007448 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	619a      	str	r2, [r3, #24]
        }
        break;
 800743e:	e003      	b.n	8007448 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007440:	bf00      	nop
 8007442:	e002      	b.n	800744a <USB_HC_StartXfer+0x25e>
        break;
 8007444:	bf00      	nop
 8007446:	e000      	b.n	800744a <USB_HC_StartXfer+0x25e>
        break;
 8007448:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	68d9      	ldr	r1, [r3, #12]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	785a      	ldrb	r2, [r3, #1]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	b29b      	uxth	r3, r3
 8007458:	2000      	movs	r0, #0
 800745a:	9000      	str	r0, [sp, #0]
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f7ff fb81 	bl	8006b64 <USB_WritePacket>
  }

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3728      	adds	r7, #40	; 0x28
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	1ff80000 	.word	0x1ff80000

08007470 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	b29b      	uxth	r3, r3
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007492:	b480      	push	{r7}
 8007494:	b089      	sub	sp, #36	; 0x24
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	460b      	mov	r3, r1
 800749c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80074a6:	2300      	movs	r3, #0
 80074a8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	0c9b      	lsrs	r3, r3, #18
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	0fdb      	lsrs	r3, r3, #31
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f003 0320 	and.w	r3, r3, #32
 80074de:	2b20      	cmp	r3, #32
 80074e0:	d104      	bne.n	80074ec <USB_HC_Halt+0x5a>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	e0e8      	b.n	80076be <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <USB_HC_Halt+0x66>
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d173      	bne.n	80075e0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	0151      	lsls	r1, r2, #5
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	440a      	add	r2, r1
 800750e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007512:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007516:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f003 0320 	and.w	r3, r3, #32
 8007520:	2b00      	cmp	r3, #0
 8007522:	f040 80cb 	bne.w	80076bc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d143      	bne.n	80075ba <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	4413      	add	r3, r2
 800753a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	0151      	lsls	r1, r2, #5
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	440a      	add	r2, r1
 8007548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800754c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007550:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	4413      	add	r3, r2
 800755a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	0151      	lsls	r1, r2, #5
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	440a      	add	r2, r1
 8007568:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800756c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007570:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	4413      	add	r3, r2
 800757a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	0151      	lsls	r1, r2, #5
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	440a      	add	r2, r1
 8007588:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800758c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007590:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	3301      	adds	r3, #1
 8007596:	61fb      	str	r3, [r7, #28]
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800759e:	d81d      	bhi.n	80075dc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075b6:	d0ec      	beq.n	8007592 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80075b8:	e080      	b.n	80076bc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	0151      	lsls	r1, r2, #5
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	440a      	add	r2, r1
 80075d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075d8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80075da:	e06f      	b.n	80076bc <USB_HC_Halt+0x22a>
            break;
 80075dc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80075de:	e06d      	b.n	80076bc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	0151      	lsls	r1, r2, #5
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	440a      	add	r2, r1
 80075f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075fe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d143      	bne.n	8007698 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	4413      	add	r3, r2
 8007618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	0151      	lsls	r1, r2, #5
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	440a      	add	r2, r1
 8007626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800762a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800762e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	4413      	add	r3, r2
 8007638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	0151      	lsls	r1, r2, #5
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	440a      	add	r2, r1
 8007646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800764a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800764e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	4413      	add	r3, r2
 8007658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	0151      	lsls	r1, r2, #5
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	440a      	add	r2, r1
 8007666:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800766a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800766e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	3301      	adds	r3, #1
 8007674:	61fb      	str	r3, [r7, #28]
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800767c:	d81d      	bhi.n	80076ba <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	4413      	add	r3, r2
 8007686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007690:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007694:	d0ec      	beq.n	8007670 <USB_HC_Halt+0x1de>
 8007696:	e011      	b.n	80076bc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	0151      	lsls	r1, r2, #5
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	440a      	add	r2, r1
 80076ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	e000      	b.n	80076bc <USB_HC_Halt+0x22a>
          break;
 80076ba:	bf00      	nop
    }
  }

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3724      	adds	r7, #36	; 0x24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
	...

080076cc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80076e0:	2301      	movs	r3, #1
 80076e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	04da      	lsls	r2, r3, #19
 80076e8:	4b15      	ldr	r3, [pc, #84]	; (8007740 <USB_DoPing+0x74>)
 80076ea:	4013      	ands	r3, r2
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076fc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	4413      	add	r3, r2
 8007706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007714:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800771c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	4413      	add	r3, r2
 8007726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800772a:	461a      	mov	r2, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	1ff80000 	.word	0x1ff80000

08007744 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007750:	2300      	movs	r3, #0
 8007752:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff f981 	bl	8006a5c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800775a:	2110      	movs	r1, #16
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7ff f9b9 	bl	8006ad4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff f9dc 	bl	8006b20 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007768:	2300      	movs	r3, #0
 800776a:	613b      	str	r3, [r7, #16]
 800776c:	e01f      	b.n	80077ae <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	015a      	lsls	r2, r3, #5
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4413      	add	r3, r2
 8007776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007784:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800778c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007794:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	4413      	add	r3, r2
 800779e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a2:	461a      	mov	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	3301      	adds	r3, #1
 80077ac:	613b      	str	r3, [r7, #16]
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	2b0f      	cmp	r3, #15
 80077b2:	d9dc      	bls.n	800776e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80077b4:	2300      	movs	r3, #0
 80077b6:	613b      	str	r3, [r7, #16]
 80077b8:	e034      	b.n	8007824 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	015a      	lsls	r2, r3, #5
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077d0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077e0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ee:	461a      	mov	r2, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	3301      	adds	r3, #1
 80077f8:	617b      	str	r3, [r7, #20]
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007800:	d80c      	bhi.n	800781c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	4413      	add	r3, r2
 800780a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007818:	d0ec      	beq.n	80077f4 <USB_StopHost+0xb0>
 800781a:	e000      	b.n	800781e <USB_StopHost+0xda>
        break;
 800781c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	3301      	adds	r3, #1
 8007822:	613b      	str	r3, [r7, #16]
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b0f      	cmp	r3, #15
 8007828:	d9c7      	bls.n	80077ba <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007830:	461a      	mov	r2, r3
 8007832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007836:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800783e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff f8fa 	bl	8006a3a <USB_EnableGlobalInt>

  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007850:	b590      	push	{r4, r7, lr}
 8007852:	b089      	sub	sp, #36	; 0x24
 8007854:	af04      	add	r7, sp, #16
 8007856:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007858:	2301      	movs	r3, #1
 800785a:	2202      	movs	r2, #2
 800785c:	2102      	movs	r1, #2
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fc66 	bl	8008130 <USBH_FindInterface>
 8007864:	4603      	mov	r3, r0
 8007866:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	2bff      	cmp	r3, #255	; 0xff
 800786c:	d002      	beq.n	8007874 <USBH_CDC_InterfaceInit+0x24>
 800786e:	7bfb      	ldrb	r3, [r7, #15]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d901      	bls.n	8007878 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007874:	2302      	movs	r3, #2
 8007876:	e13d      	b.n	8007af4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fc3b 	bl	80080f8 <USBH_SelectInterface>
 8007882:	4603      	mov	r3, r0
 8007884:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007886:	7bbb      	ldrb	r3, [r7, #14]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800788c:	2302      	movs	r3, #2
 800788e:	e131      	b.n	8007af4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007896:	2050      	movs	r0, #80	; 0x50
 8007898:	f002 fa00 	bl	8009c9c <malloc>
 800789c:	4603      	mov	r3, r0
 800789e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80078b0:	2302      	movs	r3, #2
 80078b2:	e11f      	b.n	8007af4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80078b4:	2250      	movs	r2, #80	; 0x50
 80078b6:	2100      	movs	r1, #0
 80078b8:	68b8      	ldr	r0, [r7, #8]
 80078ba:	f002 f9ff 	bl	8009cbc <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80078be:	7bfb      	ldrb	r3, [r7, #15]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	211a      	movs	r1, #26
 80078c4:	fb01 f303 	mul.w	r3, r1, r3
 80078c8:	4413      	add	r3, r2
 80078ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	b25b      	sxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	da15      	bge.n	8007902 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	211a      	movs	r1, #26
 80078dc:	fb01 f303 	mul.w	r3, r1, r3
 80078e0:	4413      	add	r3, r2
 80078e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078e6:	781a      	ldrb	r2, [r3, #0]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	211a      	movs	r1, #26
 80078f2:	fb01 f303 	mul.w	r3, r1, r3
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80078fc:	881a      	ldrh	r2, [r3, #0]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	785b      	ldrb	r3, [r3, #1]
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 fe32 	bl	8009572 <USBH_AllocPipe>
 800790e:	4603      	mov	r3, r0
 8007910:	461a      	mov	r2, r3
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	7819      	ldrb	r1, [r3, #0]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	7858      	ldrb	r0, [r3, #1]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	8952      	ldrh	r2, [r2, #10]
 800792e:	9202      	str	r2, [sp, #8]
 8007930:	2203      	movs	r2, #3
 8007932:	9201      	str	r2, [sp, #4]
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	4623      	mov	r3, r4
 8007938:	4602      	mov	r2, r0
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f001 fdea 	bl	8009514 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2200      	movs	r2, #0
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f002 f8f9 	bl	8009b40 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800794e:	2300      	movs	r3, #0
 8007950:	2200      	movs	r2, #0
 8007952:	210a      	movs	r1, #10
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fbeb 	bl	8008130 <USBH_FindInterface>
 800795a:	4603      	mov	r3, r0
 800795c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	2bff      	cmp	r3, #255	; 0xff
 8007962:	d002      	beq.n	800796a <USBH_CDC_InterfaceInit+0x11a>
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d901      	bls.n	800796e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800796a:	2302      	movs	r3, #2
 800796c:	e0c2      	b.n	8007af4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800796e:	7bfb      	ldrb	r3, [r7, #15]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	211a      	movs	r1, #26
 8007974:	fb01 f303 	mul.w	r3, r1, r3
 8007978:	4413      	add	r3, r2
 800797a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	b25b      	sxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	da16      	bge.n	80079b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	211a      	movs	r1, #26
 800798c:	fb01 f303 	mul.w	r3, r1, r3
 8007990:	4413      	add	r3, r2
 8007992:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007996:	781a      	ldrb	r2, [r3, #0]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800799c:	7bfb      	ldrb	r3, [r7, #15]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	211a      	movs	r1, #26
 80079a2:	fb01 f303 	mul.w	r3, r1, r3
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80079ac:	881a      	ldrh	r2, [r3, #0]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	835a      	strh	r2, [r3, #26]
 80079b2:	e015      	b.n	80079e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	211a      	movs	r1, #26
 80079ba:	fb01 f303 	mul.w	r3, r1, r3
 80079be:	4413      	add	r3, r2
 80079c0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80079c4:	781a      	ldrb	r2, [r3, #0]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	211a      	movs	r1, #26
 80079d0:	fb01 f303 	mul.w	r3, r1, r3
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80079da:	881a      	ldrh	r2, [r3, #0]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	211a      	movs	r1, #26
 80079e6:	fb01 f303 	mul.w	r3, r1, r3
 80079ea:	4413      	add	r3, r2
 80079ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	b25b      	sxtb	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	da16      	bge.n	8007a26 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80079f8:	7bfb      	ldrb	r3, [r7, #15]
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	211a      	movs	r1, #26
 80079fe:	fb01 f303 	mul.w	r3, r1, r3
 8007a02:	4413      	add	r3, r2
 8007a04:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007a08:	781a      	ldrb	r2, [r3, #0]
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	211a      	movs	r1, #26
 8007a14:	fb01 f303 	mul.w	r3, r1, r3
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007a1e:	881a      	ldrh	r2, [r3, #0]
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	835a      	strh	r2, [r3, #26]
 8007a24:	e015      	b.n	8007a52 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	211a      	movs	r1, #26
 8007a2c:	fb01 f303 	mul.w	r3, r1, r3
 8007a30:	4413      	add	r3, r2
 8007a32:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007a36:	781a      	ldrb	r2, [r3, #0]
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	211a      	movs	r1, #26
 8007a42:	fb01 f303 	mul.w	r3, r1, r3
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007a4c:	881a      	ldrh	r2, [r3, #0]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	7b9b      	ldrb	r3, [r3, #14]
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 fd8a 	bl	8009572 <USBH_AllocPipe>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	461a      	mov	r2, r3
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	7bdb      	ldrb	r3, [r3, #15]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 fd80 	bl	8009572 <USBH_AllocPipe>
 8007a72:	4603      	mov	r3, r0
 8007a74:	461a      	mov	r2, r3
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	7b59      	ldrb	r1, [r3, #13]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	7b98      	ldrb	r0, [r3, #14]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	8b12      	ldrh	r2, [r2, #24]
 8007a92:	9202      	str	r2, [sp, #8]
 8007a94:	2202      	movs	r2, #2
 8007a96:	9201      	str	r2, [sp, #4]
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	4623      	mov	r3, r4
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f001 fd38 	bl	8009514 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	7b19      	ldrb	r1, [r3, #12]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	7bd8      	ldrb	r0, [r3, #15]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	8b52      	ldrh	r2, [r2, #26]
 8007abc:	9202      	str	r2, [sp, #8]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	9201      	str	r2, [sp, #4]
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	4623      	mov	r3, r4
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 fd23 	bl	8009514 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	7b5b      	ldrb	r3, [r3, #13]
 8007ada:	2200      	movs	r2, #0
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f002 f82e 	bl	8009b40 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	7b1b      	ldrb	r3, [r3, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f002 f827 	bl	8009b40 <USBH_LL_SetToggle>

  return USBH_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd90      	pop	{r4, r7, pc}

08007afc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00e      	beq.n	8007b34 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f001 fd18 	bl	8009552 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f001 fd43 	bl	80095b4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	7b1b      	ldrb	r3, [r3, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00e      	beq.n	8007b5a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	7b1b      	ldrb	r3, [r3, #12]
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f001 fd05 	bl	8009552 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	7b1b      	ldrb	r3, [r3, #12]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f001 fd30 	bl	80095b4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	7b5b      	ldrb	r3, [r3, #13]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00e      	beq.n	8007b80 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	7b5b      	ldrb	r3, [r3, #13]
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 fcf2 	bl	8009552 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	7b5b      	ldrb	r3, [r3, #13]
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 fd1d 	bl	80095b4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00b      	beq.n	8007ba4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b92:	69db      	ldr	r3, [r3, #28]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f002 f889 	bl	8009cac <free>
    phost->pActiveClass->pData = 0U;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3340      	adds	r3, #64	; 0x40
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f8b1 	bl	8007d2e <GetLineCoding>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007bd0:	7afb      	ldrb	r3, [r7, #11]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d105      	bne.n	8007be2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bdc:	2102      	movs	r1, #2
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007be2:	7afb      	ldrb	r3, [r7, #11]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c02:	69db      	ldr	r3, [r3, #28]
 8007c04:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d877      	bhi.n	8007d00 <USBH_CDC_Process+0x114>
 8007c10:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <USBH_CDC_Process+0x2c>)
 8007c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c16:	bf00      	nop
 8007c18:	08007c2d 	.word	0x08007c2d
 8007c1c:	08007c33 	.word	0x08007c33
 8007c20:	08007c63 	.word	0x08007c63
 8007c24:	08007cd7 	.word	0x08007cd7
 8007c28:	08007ce5 	.word	0x08007ce5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c30:	e06d      	b.n	8007d0e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f897 	bl	8007d6c <SetLineCoding>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d104      	bne.n	8007c52 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007c50:	e058      	b.n	8007d04 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d055      	beq.n	8007d04 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2204      	movs	r2, #4
 8007c5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007c60:	e050      	b.n	8007d04 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	3340      	adds	r3, #64	; 0x40
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f860 	bl	8007d2e <GetLineCoding>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d126      	bne.n	8007cc6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c8a:	791b      	ldrb	r3, [r3, #4]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d13b      	bne.n	8007d08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c9a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d133      	bne.n	8007d08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007caa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d12b      	bne.n	8007d08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cb8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d124      	bne.n	8007d08 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f958 	bl	8007f74 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007cc4:	e020      	b.n	8007d08 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d01d      	beq.n	8007d08 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2204      	movs	r2, #4
 8007cd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007cd4:	e018      	b.n	8007d08 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f867 	bl	8007daa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f8da 	bl	8007e96 <CDC_ProcessReception>
      break;
 8007ce2:	e014      	b.n	8007d0e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 ffe3 	bl	8008cb2 <USBH_ClrFeature>
 8007cec:	4603      	mov	r3, r0
 8007cee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10a      	bne.n	8007d0c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007cfe:	e005      	b.n	8007d0c <USBH_CDC_Process+0x120>

    default:
      break;
 8007d00:	bf00      	nop
 8007d02:	e004      	b.n	8007d0e <USBH_CDC_Process+0x122>
      break;
 8007d04:	bf00      	nop
 8007d06:	e002      	b.n	8007d0e <USBH_CDC_Process+0x122>
      break;
 8007d08:	bf00      	nop
 8007d0a:	e000      	b.n	8007d0e <USBH_CDC_Process+0x122>
      break;
 8007d0c:	bf00      	nop

  }

  return status;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b082      	sub	sp, #8
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	22a1      	movs	r2, #161	; 0xa1
 8007d3c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2221      	movs	r2, #33	; 0x21
 8007d42:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2207      	movs	r2, #7
 8007d54:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2207      	movs	r2, #7
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 f988 	bl	8009072 <USBH_CtlReq>
 8007d62:	4603      	mov	r3, r0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2221      	movs	r2, #33	; 0x21
 8007d7a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2207      	movs	r2, #7
 8007d92:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	2207      	movs	r2, #7
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f001 f969 	bl	8009072 <USBH_CtlReq>
 8007da0:	4603      	mov	r3, r0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b086      	sub	sp, #24
 8007dae:	af02      	add	r7, sp, #8
 8007db0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d002      	beq.n	8007dd0 <CDC_ProcessTransmission+0x26>
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d023      	beq.n	8007e16 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007dce:	e05e      	b.n	8007e8e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	8b12      	ldrh	r2, [r2, #24]
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d90b      	bls.n	8007df4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	69d9      	ldr	r1, [r3, #28]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8b1a      	ldrh	r2, [r3, #24]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	7b5b      	ldrb	r3, [r3, #13]
 8007de8:	2001      	movs	r0, #1
 8007dea:	9000      	str	r0, [sp, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f001 fb4e 	bl	800948e <USBH_BulkSendData>
 8007df2:	e00b      	b.n	8007e0c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	7b5b      	ldrb	r3, [r3, #13]
 8007e02:	2001      	movs	r0, #1
 8007e04:	9000      	str	r0, [sp, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fb41 	bl	800948e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007e14:	e03b      	b.n	8007e8e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	7b5b      	ldrb	r3, [r3, #13]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f001 fe65 	bl	8009aec <USBH_LL_GetURBState>
 8007e22:	4603      	mov	r3, r0
 8007e24:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007e26:	7afb      	ldrb	r3, [r7, #11]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d128      	bne.n	8007e7e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	8b12      	ldrh	r2, [r2, #24]
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d90e      	bls.n	8007e56 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	8b12      	ldrh	r2, [r2, #24]
 8007e40:	1a9a      	subs	r2, r3, r2
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	8b12      	ldrh	r2, [r2, #24]
 8007e4e:	441a      	add	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	61da      	str	r2, [r3, #28]
 8007e54:	e002      	b.n	8007e5c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d004      	beq.n	8007e6e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007e6c:	e00e      	b.n	8007e8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f868 	bl	8007f4c <USBH_CDC_TransmitCallback>
      break;
 8007e7c:	e006      	b.n	8007e8c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007e7e:	7afb      	ldrb	r3, [r7, #11]
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d103      	bne.n	8007e8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007e8c:	bf00      	nop
  }
}
 8007e8e:	bf00      	nop
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b086      	sub	sp, #24
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d002      	beq.n	8007ebc <CDC_ProcessReception+0x26>
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	d00e      	beq.n	8007ed8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007eba:	e043      	b.n	8007f44 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	6a19      	ldr	r1, [r3, #32]
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	8b5a      	ldrh	r2, [r3, #26]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	7b1b      	ldrb	r3, [r3, #12]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 fb05 	bl	80094d8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	2204      	movs	r2, #4
 8007ed2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007ed6:	e035      	b.n	8007f44 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	7b1b      	ldrb	r3, [r3, #12]
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f001 fe04 	bl	8009aec <USBH_LL_GetURBState>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007ee8:	7cfb      	ldrb	r3, [r7, #19]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d129      	bne.n	8007f42 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	7b1b      	ldrb	r3, [r3, #12]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f001 fd67 	bl	80099c8 <USBH_LL_GetLastXferSize>
 8007efa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d016      	beq.n	8007f34 <CDC_ProcessReception+0x9e>
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	8b5b      	ldrh	r3, [r3, #26]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d910      	bls.n	8007f34 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	1ad2      	subs	r2, r2, r3
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	6a1a      	ldr	r2, [r3, #32]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	441a      	add	r2, r3
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2203      	movs	r2, #3
 8007f2e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007f32:	e006      	b.n	8007f42 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f80f 	bl	8007f60 <USBH_CDC_ReceiveCallback>
      break;
 8007f42:	bf00      	nop
  }
}
 8007f44:	bf00      	nop
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	4613      	mov	r3, r2
 8007f94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e029      	b.n	8007ff4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	79fa      	ldrb	r2, [r7, #7]
 8007fa4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f000 f81f 	bl	8007ffc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f001 fc37 	bl	8009860 <USBH_LL_Init>

  return USBH_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008008:	2300      	movs	r3, #0
 800800a:	60fb      	str	r3, [r7, #12]
 800800c:	e009      	b.n	8008022 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	33e0      	adds	r3, #224	; 0xe0
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	2200      	movs	r2, #0
 800801a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3301      	adds	r3, #1
 8008020:	60fb      	str	r3, [r7, #12]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2b0e      	cmp	r3, #14
 8008026:	d9f2      	bls.n	800800e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008028:	2300      	movs	r3, #0
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	e009      	b.n	8008042 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4413      	add	r3, r2
 8008034:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008038:	2200      	movs	r2, #0
 800803a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	3301      	adds	r3, #1
 8008040:	60fb      	str	r3, [r7, #12]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008048:	d3f1      	bcc.n	800802e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2240      	movs	r2, #64	; 0x40
 800806e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d016      	beq.n	80080e6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10e      	bne.n	80080e0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080c8:	1c59      	adds	r1, r3, #1
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	33de      	adds	r3, #222	; 0xde
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	73fb      	strb	r3, [r7, #15]
 80080de:	e004      	b.n	80080ea <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80080e0:	2302      	movs	r3, #2
 80080e2:	73fb      	strb	r3, [r7, #15]
 80080e4:	e001      	b.n	80080ea <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80080e6:	2302      	movs	r3, #2
 80080e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	460b      	mov	r3, r1
 8008102:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800810e:	78fa      	ldrb	r2, [r7, #3]
 8008110:	429a      	cmp	r2, r3
 8008112:	d204      	bcs.n	800811e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	78fa      	ldrb	r2, [r7, #3]
 8008118:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800811c:	e001      	b.n	8008122 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800811e:	2302      	movs	r3, #2
 8008120:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008122:	7bfb      	ldrb	r3, [r7, #15]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008130:	b480      	push	{r7}
 8008132:	b087      	sub	sp, #28
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	4608      	mov	r0, r1
 800813a:	4611      	mov	r1, r2
 800813c:	461a      	mov	r2, r3
 800813e:	4603      	mov	r3, r0
 8008140:	70fb      	strb	r3, [r7, #3]
 8008142:	460b      	mov	r3, r1
 8008144:	70bb      	strb	r3, [r7, #2]
 8008146:	4613      	mov	r3, r2
 8008148:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800814a:	2300      	movs	r3, #0
 800814c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800814e:	2300      	movs	r3, #0
 8008150:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008158:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800815a:	e025      	b.n	80081a8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800815c:	7dfb      	ldrb	r3, [r7, #23]
 800815e:	221a      	movs	r2, #26
 8008160:	fb02 f303 	mul.w	r3, r2, r3
 8008164:	3308      	adds	r3, #8
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	4413      	add	r3, r2
 800816a:	3302      	adds	r3, #2
 800816c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	795b      	ldrb	r3, [r3, #5]
 8008172:	78fa      	ldrb	r2, [r7, #3]
 8008174:	429a      	cmp	r2, r3
 8008176:	d002      	beq.n	800817e <USBH_FindInterface+0x4e>
 8008178:	78fb      	ldrb	r3, [r7, #3]
 800817a:	2bff      	cmp	r3, #255	; 0xff
 800817c:	d111      	bne.n	80081a2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008182:	78ba      	ldrb	r2, [r7, #2]
 8008184:	429a      	cmp	r2, r3
 8008186:	d002      	beq.n	800818e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008188:	78bb      	ldrb	r3, [r7, #2]
 800818a:	2bff      	cmp	r3, #255	; 0xff
 800818c:	d109      	bne.n	80081a2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008192:	787a      	ldrb	r2, [r7, #1]
 8008194:	429a      	cmp	r2, r3
 8008196:	d002      	beq.n	800819e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008198:	787b      	ldrb	r3, [r7, #1]
 800819a:	2bff      	cmp	r3, #255	; 0xff
 800819c:	d101      	bne.n	80081a2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	e006      	b.n	80081b0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80081a2:	7dfb      	ldrb	r3, [r7, #23]
 80081a4:	3301      	adds	r3, #1
 80081a6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80081a8:	7dfb      	ldrb	r3, [r7, #23]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d9d6      	bls.n	800815c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80081ae:	23ff      	movs	r3, #255	; 0xff
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	371c      	adds	r7, #28
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f001 fb87 	bl	80098d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80081ca:	2101      	movs	r1, #1
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f001 fca0 	bl	8009b12 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b088      	sub	sp, #32
 80081e0:	af04      	add	r7, sp, #16
 80081e2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80081e4:	2302      	movs	r3, #2
 80081e6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80081e8:	2300      	movs	r3, #0
 80081ea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d102      	bne.n	80081fe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2203      	movs	r2, #3
 80081fc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b0b      	cmp	r3, #11
 8008206:	f200 81b3 	bhi.w	8008570 <USBH_Process+0x394>
 800820a:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <USBH_Process+0x34>)
 800820c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008210:	08008241 	.word	0x08008241
 8008214:	08008273 	.word	0x08008273
 8008218:	080082db 	.word	0x080082db
 800821c:	0800850b 	.word	0x0800850b
 8008220:	08008571 	.word	0x08008571
 8008224:	0800837f 	.word	0x0800837f
 8008228:	080084b1 	.word	0x080084b1
 800822c:	080083b5 	.word	0x080083b5
 8008230:	080083d5 	.word	0x080083d5
 8008234:	080083f5 	.word	0x080083f5
 8008238:	08008423 	.word	0x08008423
 800823c:	080084f3 	.word	0x080084f3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 8193 	beq.w	8008574 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008254:	20c8      	movs	r0, #200	; 0xc8
 8008256:	f001 fca3 	bl	8009ba0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f001 fb99 	bl	8009992 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008270:	e180      	b.n	8008574 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008278:	2b01      	cmp	r3, #1
 800827a:	d107      	bne.n	800828c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2202      	movs	r2, #2
 8008288:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800828a:	e182      	b.n	8008592 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008296:	d914      	bls.n	80082c2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800829e:	3301      	adds	r3, #1
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d903      	bls.n	80082ba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	220d      	movs	r2, #13
 80082b6:	701a      	strb	r2, [r3, #0]
      break;
 80082b8:	e16b      	b.n	8008592 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	701a      	strb	r2, [r3, #0]
      break;
 80082c0:	e167      	b.n	8008592 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80082c8:	f103 020a 	add.w	r2, r3, #10
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80082d2:	200a      	movs	r0, #10
 80082d4:	f001 fc64 	bl	8009ba0 <USBH_Delay>
      break;
 80082d8:	e15b      	b.n	8008592 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d005      	beq.n	80082f0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082ea:	2104      	movs	r1, #4
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80082f0:	2064      	movs	r0, #100	; 0x64
 80082f2:	f001 fc55 	bl	8009ba0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 fb24 	bl	8009944 <USBH_LL_GetSpeed>
 80082fc:	4603      	mov	r3, r0
 80082fe:	461a      	mov	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2205      	movs	r2, #5
 800830a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800830c:	2100      	movs	r1, #0
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 f92f 	bl	8009572 <USBH_AllocPipe>
 8008314:	4603      	mov	r3, r0
 8008316:	461a      	mov	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800831c:	2180      	movs	r1, #128	; 0x80
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f001 f927 	bl	8009572 <USBH_AllocPipe>
 8008324:	4603      	mov	r3, r0
 8008326:	461a      	mov	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	7919      	ldrb	r1, [r3, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008340:	b292      	uxth	r2, r2
 8008342:	9202      	str	r2, [sp, #8]
 8008344:	2200      	movs	r2, #0
 8008346:	9201      	str	r2, [sp, #4]
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	4603      	mov	r3, r0
 800834c:	2280      	movs	r2, #128	; 0x80
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f001 f8e0 	bl	8009514 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	7959      	ldrb	r1, [r3, #5]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008368:	b292      	uxth	r2, r2
 800836a:	9202      	str	r2, [sp, #8]
 800836c:	2200      	movs	r2, #0
 800836e:	9201      	str	r2, [sp, #4]
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	4603      	mov	r3, r0
 8008374:	2200      	movs	r2, #0
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f001 f8cc 	bl	8009514 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800837c:	e109      	b.n	8008592 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f90c 	bl	800859c <USBH_HandleEnum>
 8008384:	4603      	mov	r3, r0
 8008386:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008388:	7bbb      	ldrb	r3, [r7, #14]
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	f040 80f3 	bne.w	8008578 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d103      	bne.n	80083ac <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2208      	movs	r2, #8
 80083a8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80083aa:	e0e5      	b.n	8008578 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2207      	movs	r2, #7
 80083b0:	701a      	strb	r2, [r3, #0]
      break;
 80083b2:	e0e1      	b.n	8008578 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f000 80de 	beq.w	800857c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083c6:	2101      	movs	r1, #1
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2208      	movs	r2, #8
 80083d0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80083d2:	e0d3      	b.n	800857c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80083da:	b29b      	uxth	r3, r3
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fc20 	bl	8008c24 <USBH_SetCfg>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f040 80ca 	bne.w	8008580 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2209      	movs	r2, #9
 80083f0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80083f2:	e0c5      	b.n	8008580 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00b      	beq.n	800841a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008402:	2101      	movs	r1, #1
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fc30 	bl	8008c6a <USBH_SetFeature>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	f040 80b9 	bne.w	8008584 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	220a      	movs	r2, #10
 8008416:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008418:	e0b4      	b.n	8008584 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	220a      	movs	r2, #10
 800841e:	701a      	strb	r2, [r3, #0]
      break;
 8008420:	e0b0      	b.n	8008584 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 80ad 	beq.w	8008588 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]
 800843a:	e016      	b.n	800846a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800843c:	7bfa      	ldrb	r2, [r7, #15]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	32de      	adds	r2, #222	; 0xde
 8008442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008446:	791a      	ldrb	r2, [r3, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800844e:	429a      	cmp	r2, r3
 8008450:	d108      	bne.n	8008464 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008452:	7bfa      	ldrb	r2, [r7, #15]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	32de      	adds	r2, #222	; 0xde
 8008458:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008462:	e005      	b.n	8008470 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008464:	7bfb      	ldrb	r3, [r7, #15]
 8008466:	3301      	adds	r3, #1
 8008468:	73fb      	strb	r3, [r7, #15]
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d0e5      	beq.n	800843c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008476:	2b00      	cmp	r3, #0
 8008478:	d016      	beq.n	80084a8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	4798      	blx	r3
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d109      	bne.n	80084a0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2206      	movs	r2, #6
 8008490:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008498:	2103      	movs	r1, #3
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800849e:	e073      	b.n	8008588 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	220d      	movs	r2, #13
 80084a4:	701a      	strb	r2, [r3, #0]
      break;
 80084a6:	e06f      	b.n	8008588 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	220d      	movs	r2, #13
 80084ac:	701a      	strb	r2, [r3, #0]
      break;
 80084ae:	e06b      	b.n	8008588 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d017      	beq.n	80084ea <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	4798      	blx	r3
 80084c6:	4603      	mov	r3, r0
 80084c8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d103      	bne.n	80084da <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	220b      	movs	r2, #11
 80084d6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80084d8:	e058      	b.n	800858c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80084da:	7bbb      	ldrb	r3, [r7, #14]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d154      	bne.n	800858c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	220d      	movs	r2, #13
 80084e6:	701a      	strb	r2, [r3, #0]
      break;
 80084e8:	e050      	b.n	800858c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	220d      	movs	r2, #13
 80084ee:	701a      	strb	r2, [r3, #0]
      break;
 80084f0:	e04c      	b.n	800858c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d049      	beq.n	8008590 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	4798      	blx	r3
      }
      break;
 8008508:	e042      	b.n	8008590 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7ff fd72 	bl	8007ffc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d009      	beq.n	8008536 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800853c:	2b00      	cmp	r3, #0
 800853e:	d005      	beq.n	800854c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008546:	2105      	movs	r1, #5
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b01      	cmp	r3, #1
 8008556:	d107      	bne.n	8008568 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7ff fe2b 	bl	80081bc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008566:	e014      	b.n	8008592 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f001 f9b5 	bl	80098d8 <USBH_LL_Start>
      break;
 800856e:	e010      	b.n	8008592 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008570:	bf00      	nop
 8008572:	e00e      	b.n	8008592 <USBH_Process+0x3b6>
      break;
 8008574:	bf00      	nop
 8008576:	e00c      	b.n	8008592 <USBH_Process+0x3b6>
      break;
 8008578:	bf00      	nop
 800857a:	e00a      	b.n	8008592 <USBH_Process+0x3b6>
    break;
 800857c:	bf00      	nop
 800857e:	e008      	b.n	8008592 <USBH_Process+0x3b6>
      break;
 8008580:	bf00      	nop
 8008582:	e006      	b.n	8008592 <USBH_Process+0x3b6>
      break;
 8008584:	bf00      	nop
 8008586:	e004      	b.n	8008592 <USBH_Process+0x3b6>
      break;
 8008588:	bf00      	nop
 800858a:	e002      	b.n	8008592 <USBH_Process+0x3b6>
      break;
 800858c:	bf00      	nop
 800858e:	e000      	b.n	8008592 <USBH_Process+0x3b6>
      break;
 8008590:	bf00      	nop
  }
  return USBH_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b088      	sub	sp, #32
 80085a0:	af04      	add	r7, sp, #16
 80085a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80085a4:	2301      	movs	r3, #1
 80085a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80085a8:	2301      	movs	r3, #1
 80085aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	785b      	ldrb	r3, [r3, #1]
 80085b0:	2b07      	cmp	r3, #7
 80085b2:	f200 81c1 	bhi.w	8008938 <USBH_HandleEnum+0x39c>
 80085b6:	a201      	add	r2, pc, #4	; (adr r2, 80085bc <USBH_HandleEnum+0x20>)
 80085b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085bc:	080085dd 	.word	0x080085dd
 80085c0:	0800869b 	.word	0x0800869b
 80085c4:	08008705 	.word	0x08008705
 80085c8:	08008793 	.word	0x08008793
 80085cc:	080087fd 	.word	0x080087fd
 80085d0:	0800886d 	.word	0x0800886d
 80085d4:	080088b3 	.word	0x080088b3
 80085d8:	080088f9 	.word	0x080088f9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80085dc:	2108      	movs	r1, #8
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa50 	bl	8008a84 <USBH_Get_DevDesc>
 80085e4:	4603      	mov	r3, r0
 80085e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085e8:	7bbb      	ldrb	r3, [r7, #14]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d130      	bne.n	8008650 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	7919      	ldrb	r1, [r3, #4]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008612:	b292      	uxth	r2, r2
 8008614:	9202      	str	r2, [sp, #8]
 8008616:	2200      	movs	r2, #0
 8008618:	9201      	str	r2, [sp, #4]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	4603      	mov	r3, r0
 800861e:	2280      	movs	r2, #128	; 0x80
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 ff77 	bl	8009514 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	7959      	ldrb	r1, [r3, #5]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800863a:	b292      	uxth	r2, r2
 800863c:	9202      	str	r2, [sp, #8]
 800863e:	2200      	movs	r2, #0
 8008640:	9201      	str	r2, [sp, #4]
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	4603      	mov	r3, r0
 8008646:	2200      	movs	r2, #0
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 ff63 	bl	8009514 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800864e:	e175      	b.n	800893c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	2b03      	cmp	r3, #3
 8008654:	f040 8172 	bne.w	800893c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800865e:	3301      	adds	r3, #1
 8008660:	b2da      	uxtb	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800866e:	2b03      	cmp	r3, #3
 8008670:	d903      	bls.n	800867a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	220d      	movs	r2, #13
 8008676:	701a      	strb	r2, [r3, #0]
      break;
 8008678:	e160      	b.n	800893c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	795b      	ldrb	r3, [r3, #5]
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 ff97 	bl	80095b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	791b      	ldrb	r3, [r3, #4]
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 ff91 	bl	80095b4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	701a      	strb	r2, [r3, #0]
      break;
 8008698:	e150      	b.n	800893c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800869a:	2112      	movs	r1, #18
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f9f1 	bl	8008a84 <USBH_Get_DevDesc>
 80086a2:	4603      	mov	r3, r0
 80086a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d103      	bne.n	80086b4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2202      	movs	r2, #2
 80086b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80086b2:	e145      	b.n	8008940 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	f040 8142 	bne.w	8008940 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086c2:	3301      	adds	r3, #1
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086d2:	2b03      	cmp	r3, #3
 80086d4:	d903      	bls.n	80086de <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	220d      	movs	r2, #13
 80086da:	701a      	strb	r2, [r3, #0]
      break;
 80086dc:	e130      	b.n	8008940 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	795b      	ldrb	r3, [r3, #5]
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 ff65 	bl	80095b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	791b      	ldrb	r3, [r3, #4]
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 ff5f 	bl	80095b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	701a      	strb	r2, [r3, #0]
      break;
 8008702:	e11d      	b.n	8008940 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008704:	2101      	movs	r1, #1
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fa68 	bl	8008bdc <USBH_SetAddress>
 800870c:	4603      	mov	r3, r0
 800870e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008710:	7bbb      	ldrb	r3, [r7, #14]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d132      	bne.n	800877c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008716:	2002      	movs	r0, #2
 8008718:	f001 fa42 	bl	8009ba0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2203      	movs	r2, #3
 8008728:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	7919      	ldrb	r1, [r3, #4]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800873e:	b292      	uxth	r2, r2
 8008740:	9202      	str	r2, [sp, #8]
 8008742:	2200      	movs	r2, #0
 8008744:	9201      	str	r2, [sp, #4]
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	4603      	mov	r3, r0
 800874a:	2280      	movs	r2, #128	; 0x80
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fee1 	bl	8009514 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	7959      	ldrb	r1, [r3, #5]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008766:	b292      	uxth	r2, r2
 8008768:	9202      	str	r2, [sp, #8]
 800876a:	2200      	movs	r2, #0
 800876c:	9201      	str	r2, [sp, #4]
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	4603      	mov	r3, r0
 8008772:	2200      	movs	r2, #0
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 fecd 	bl	8009514 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800877a:	e0e3      	b.n	8008944 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800877c:	7bbb      	ldrb	r3, [r7, #14]
 800877e:	2b03      	cmp	r3, #3
 8008780:	f040 80e0 	bne.w	8008944 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	220d      	movs	r2, #13
 8008788:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	705a      	strb	r2, [r3, #1]
      break;
 8008790:	e0d8      	b.n	8008944 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008792:	2109      	movs	r1, #9
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f99d 	bl	8008ad4 <USBH_Get_CfgDesc>
 800879a:	4603      	mov	r3, r0
 800879c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800879e:	7bbb      	ldrb	r3, [r7, #14]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d103      	bne.n	80087ac <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2204      	movs	r2, #4
 80087a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80087aa:	e0cd      	b.n	8008948 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	f040 80ca 	bne.w	8008948 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087ba:	3301      	adds	r3, #1
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d903      	bls.n	80087d6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	220d      	movs	r2, #13
 80087d2:	701a      	strb	r2, [r3, #0]
      break;
 80087d4:	e0b8      	b.n	8008948 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	795b      	ldrb	r3, [r3, #5]
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fee9 	bl	80095b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	791b      	ldrb	r3, [r3, #4]
 80087e6:	4619      	mov	r1, r3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fee3 	bl	80095b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	701a      	strb	r2, [r3, #0]
      break;
 80087fa:	e0a5      	b.n	8008948 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008802:	4619      	mov	r1, r3
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f965 	bl	8008ad4 <USBH_Get_CfgDesc>
 800880a:	4603      	mov	r3, r0
 800880c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800880e:	7bbb      	ldrb	r3, [r7, #14]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d103      	bne.n	800881c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2205      	movs	r2, #5
 8008818:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800881a:	e097      	b.n	800894c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	2b03      	cmp	r3, #3
 8008820:	f040 8094 	bne.w	800894c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800882a:	3301      	adds	r3, #1
 800882c:	b2da      	uxtb	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800883a:	2b03      	cmp	r3, #3
 800883c:	d903      	bls.n	8008846 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	220d      	movs	r2, #13
 8008842:	701a      	strb	r2, [r3, #0]
      break;
 8008844:	e082      	b.n	800894c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	795b      	ldrb	r3, [r3, #5]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 feb1 	bl	80095b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	791b      	ldrb	r3, [r3, #4]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 feab 	bl	80095b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	701a      	strb	r2, [r3, #0]
      break;
 800886a:	e06f      	b.n	800894c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008872:	2b00      	cmp	r3, #0
 8008874:	d019      	beq.n	80088aa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008882:	23ff      	movs	r3, #255	; 0xff
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f949 	bl	8008b1c <USBH_Get_StringDesc>
 800888a:	4603      	mov	r3, r0
 800888c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800888e:	7bbb      	ldrb	r3, [r7, #14]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d103      	bne.n	800889c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2206      	movs	r2, #6
 8008898:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800889a:	e059      	b.n	8008950 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800889c:	7bbb      	ldrb	r3, [r7, #14]
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d156      	bne.n	8008950 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2206      	movs	r2, #6
 80088a6:	705a      	strb	r2, [r3, #1]
      break;
 80088a8:	e052      	b.n	8008950 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2206      	movs	r2, #6
 80088ae:	705a      	strb	r2, [r3, #1]
      break;
 80088b0:	e04e      	b.n	8008950 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d019      	beq.n	80088f0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80088c8:	23ff      	movs	r3, #255	; 0xff
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f926 	bl	8008b1c <USBH_Get_StringDesc>
 80088d0:	4603      	mov	r3, r0
 80088d2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80088d4:	7bbb      	ldrb	r3, [r7, #14]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d103      	bne.n	80088e2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2207      	movs	r2, #7
 80088de:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80088e0:	e038      	b.n	8008954 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088e2:	7bbb      	ldrb	r3, [r7, #14]
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d135      	bne.n	8008954 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2207      	movs	r2, #7
 80088ec:	705a      	strb	r2, [r3, #1]
      break;
 80088ee:	e031      	b.n	8008954 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2207      	movs	r2, #7
 80088f4:	705a      	strb	r2, [r3, #1]
      break;
 80088f6:	e02d      	b.n	8008954 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d017      	beq.n	8008932 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800890e:	23ff      	movs	r3, #255	; 0xff
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f903 	bl	8008b1c <USBH_Get_StringDesc>
 8008916:	4603      	mov	r3, r0
 8008918:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d102      	bne.n	8008926 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008920:	2300      	movs	r3, #0
 8008922:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008924:	e018      	b.n	8008958 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008926:	7bbb      	ldrb	r3, [r7, #14]
 8008928:	2b03      	cmp	r3, #3
 800892a:	d115      	bne.n	8008958 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	73fb      	strb	r3, [r7, #15]
      break;
 8008930:	e012      	b.n	8008958 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	73fb      	strb	r3, [r7, #15]
      break;
 8008936:	e00f      	b.n	8008958 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008938:	bf00      	nop
 800893a:	e00e      	b.n	800895a <USBH_HandleEnum+0x3be>
      break;
 800893c:	bf00      	nop
 800893e:	e00c      	b.n	800895a <USBH_HandleEnum+0x3be>
      break;
 8008940:	bf00      	nop
 8008942:	e00a      	b.n	800895a <USBH_HandleEnum+0x3be>
      break;
 8008944:	bf00      	nop
 8008946:	e008      	b.n	800895a <USBH_HandleEnum+0x3be>
      break;
 8008948:	bf00      	nop
 800894a:	e006      	b.n	800895a <USBH_HandleEnum+0x3be>
      break;
 800894c:	bf00      	nop
 800894e:	e004      	b.n	800895a <USBH_HandleEnum+0x3be>
      break;
 8008950:	bf00      	nop
 8008952:	e002      	b.n	800895a <USBH_HandleEnum+0x3be>
      break;
 8008954:	bf00      	nop
 8008956:	e000      	b.n	800895a <USBH_HandleEnum+0x3be>
      break;
 8008958:	bf00      	nop
  }
  return Status;
 800895a:	7bfb      	ldrb	r3, [r7, #15]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008976:	bf00      	nop
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008990:	1c5a      	adds	r2, r3, #1
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f804 	bl	80089a6 <USBH_HandleSof>
}
 800899e:	bf00      	nop
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	2b0b      	cmp	r3, #11
 80089b6:	d10a      	bne.n	80089ce <USBH_HandleSof+0x28>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d005      	beq.n	80089ce <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	4798      	blx	r3
  }
}
 80089ce:	bf00      	nop
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80089e6:	bf00      	nop
}
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008a02:	bf00      	nop
}
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 ff56 	bl	800990e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	791b      	ldrb	r3, [r3, #4]
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fda3 	bl	80095b4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	795b      	ldrb	r3, [r3, #5]
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fd9d 	bl	80095b4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af02      	add	r7, sp, #8
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008a96:	78fb      	ldrb	r3, [r7, #3]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f864 	bl	8008b72 <USBH_GetDescriptor>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	73fb      	strb	r3, [r7, #15]
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d10a      	bne.n	8008aca <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008ac0:	78fa      	ldrb	r2, [r7, #3]
 8008ac2:	b292      	uxth	r2, r2
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	f000 f918 	bl	8008cfa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af02      	add	r7, sp, #8
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	331c      	adds	r3, #28
 8008ae4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008ae6:	887b      	ldrh	r3, [r7, #2]
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008af0:	2100      	movs	r1, #0
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f83d 	bl	8008b72 <USBH_GetDescriptor>
 8008af8:	4603      	mov	r3, r0
 8008afa:	72fb      	strb	r3, [r7, #11]
 8008afc:	7afb      	ldrb	r3, [r7, #11]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d107      	bne.n	8008b12 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008b08:	887a      	ldrh	r2, [r7, #2]
 8008b0a:	68f9      	ldr	r1, [r7, #12]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 f964 	bl	8008dda <USBH_ParseCfgDesc>
  }

  return status;
 8008b12:	7afb      	ldrb	r3, [r7, #11]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b088      	sub	sp, #32
 8008b20:	af02      	add	r7, sp, #8
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	607a      	str	r2, [r7, #4]
 8008b26:	461a      	mov	r2, r3
 8008b28:	460b      	mov	r3, r1
 8008b2a:	72fb      	strb	r3, [r7, #11]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008b30:	7afb      	ldrb	r3, [r7, #11]
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008b38:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008b40:	893b      	ldrh	r3, [r7, #8]
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	460b      	mov	r3, r1
 8008b46:	2100      	movs	r1, #0
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 f812 	bl	8008b72 <USBH_GetDescriptor>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	75fb      	strb	r3, [r7, #23]
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d107      	bne.n	8008b68 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008b5e:	893a      	ldrh	r2, [r7, #8]
 8008b60:	6879      	ldr	r1, [r7, #4]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 fa37 	bl	8008fd6 <USBH_ParseStringDesc>
  }

  return status;
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b084      	sub	sp, #16
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	607b      	str	r3, [r7, #4]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	72fb      	strb	r3, [r7, #11]
 8008b80:	4613      	mov	r3, r2
 8008b82:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	789b      	ldrb	r3, [r3, #2]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d11c      	bne.n	8008bc6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008b8c:	7afb      	ldrb	r3, [r7, #11]
 8008b8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2206      	movs	r2, #6
 8008b9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	893a      	ldrh	r2, [r7, #8]
 8008ba2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008ba4:	893b      	ldrh	r3, [r7, #8]
 8008ba6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bae:	d104      	bne.n	8008bba <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f240 4209 	movw	r2, #1033	; 0x409
 8008bb6:	829a      	strh	r2, [r3, #20]
 8008bb8:	e002      	b.n	8008bc0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	8b3a      	ldrh	r2, [r7, #24]
 8008bc4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008bc6:	8b3b      	ldrh	r3, [r7, #24]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	6879      	ldr	r1, [r7, #4]
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f000 fa50 	bl	8009072 <USBH_CtlReq>
 8008bd2:	4603      	mov	r3, r0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	460b      	mov	r3, r1
 8008be6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	789b      	ldrb	r3, [r3, #2]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d10f      	bne.n	8008c10 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2205      	movs	r2, #5
 8008bfa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008bfc:	78fb      	ldrb	r3, [r7, #3]
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008c10:	2200      	movs	r2, #0
 8008c12:	2100      	movs	r1, #0
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fa2c 	bl	8009072 <USBH_CtlReq>
 8008c1a:	4603      	mov	r3, r0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	789b      	ldrb	r3, [r3, #2]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d10e      	bne.n	8008c56 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2209      	movs	r2, #9
 8008c42:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	887a      	ldrh	r2, [r7, #2]
 8008c48:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008c56:	2200      	movs	r2, #0
 8008c58:	2100      	movs	r1, #0
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fa09 	bl	8009072 <USBH_CtlReq>
 8008c60:	4603      	mov	r3, r0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b082      	sub	sp, #8
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	460b      	mov	r3, r1
 8008c74:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	789b      	ldrb	r3, [r3, #2]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d10f      	bne.n	8008c9e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2203      	movs	r2, #3
 8008c88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008c8a:	78fb      	ldrb	r3, [r7, #3]
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f9e5 	bl	8009072 <USBH_CtlReq>
 8008ca8:	4603      	mov	r3, r0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b082      	sub	sp, #8
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	789b      	ldrb	r3, [r3, #2]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d10f      	bne.n	8008ce6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2202      	movs	r2, #2
 8008cca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008cd8:	78fb      	ldrb	r3, [r7, #3]
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	2100      	movs	r1, #0
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f9c1 	bl	8009072 <USBH_CtlReq>
 8008cf0:	4603      	mov	r3, r0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b085      	sub	sp, #20
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	4613      	mov	r3, r2
 8008d06:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	781a      	ldrb	r2, [r3, #0]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	785a      	ldrb	r2, [r3, #1]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	3302      	adds	r3, #2
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	3303      	adds	r3, #3
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	021b      	lsls	r3, r3, #8
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	791a      	ldrb	r2, [r3, #4]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	795a      	ldrb	r2, [r3, #5]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	799a      	ldrb	r2, [r3, #6]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	79da      	ldrb	r2, [r3, #7]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008d54:	88fb      	ldrh	r3, [r7, #6]
 8008d56:	2b08      	cmp	r3, #8
 8008d58:	d939      	bls.n	8008dce <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	3308      	adds	r3, #8
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	3309      	adds	r3, #9
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	021b      	lsls	r3, r3, #8
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	330a      	adds	r3, #10
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	330b      	adds	r3, #11
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	021b      	lsls	r3, r3, #8
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	330c      	adds	r3, #12
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	330d      	adds	r3, #13
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	021b      	lsls	r3, r3, #8
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	4313      	orrs	r3, r2
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	7b9a      	ldrb	r2, [r3, #14]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	7bda      	ldrb	r2, [r3, #15]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	7c1a      	ldrb	r2, [r3, #16]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	7c5a      	ldrb	r2, [r3, #17]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	745a      	strb	r2, [r3, #17]
  }
}
 8008dce:	bf00      	nop
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b08a      	sub	sp, #40	; 0x28
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	60f8      	str	r0, [r7, #12]
 8008de2:	60b9      	str	r1, [r7, #8]
 8008de4:	4613      	mov	r3, r2
 8008de6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008dec:	2300      	movs	r3, #0
 8008dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008df2:	2300      	movs	r3, #0
 8008df4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	781a      	ldrb	r2, [r3, #0]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	785a      	ldrb	r2, [r3, #1]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	3302      	adds	r3, #2
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	3303      	adds	r3, #3
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	021b      	lsls	r3, r3, #8
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	4313      	orrs	r3, r2
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	791a      	ldrb	r2, [r3, #4]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	795a      	ldrb	r2, [r3, #5]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	799a      	ldrb	r2, [r3, #6]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	79da      	ldrb	r2, [r3, #7]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	7a1a      	ldrb	r2, [r3, #8]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008e50:	88fb      	ldrh	r3, [r7, #6]
 8008e52:	2b09      	cmp	r3, #9
 8008e54:	d95f      	bls.n	8008f16 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008e56:	2309      	movs	r3, #9
 8008e58:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008e5e:	e051      	b.n	8008f04 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008e60:	f107 0316 	add.w	r3, r7, #22
 8008e64:	4619      	mov	r1, r3
 8008e66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e68:	f000 f8e8 	bl	800903c <USBH_GetNextDesc>
 8008e6c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	785b      	ldrb	r3, [r3, #1]
 8008e72:	2b04      	cmp	r3, #4
 8008e74:	d146      	bne.n	8008f04 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008e76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e7a:	221a      	movs	r2, #26
 8008e7c:	fb02 f303 	mul.w	r3, r2, r3
 8008e80:	3308      	adds	r3, #8
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	4413      	add	r3, r2
 8008e86:	3302      	adds	r3, #2
 8008e88:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008e8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e8c:	69f8      	ldr	r0, [r7, #28]
 8008e8e:	f000 f846 	bl	8008f1e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008e92:	2300      	movs	r3, #0
 8008e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008e9c:	e022      	b.n	8008ee4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008e9e:	f107 0316 	add.w	r3, r7, #22
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ea6:	f000 f8c9 	bl	800903c <USBH_GetNextDesc>
 8008eaa:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eae:	785b      	ldrb	r3, [r3, #1]
 8008eb0:	2b05      	cmp	r3, #5
 8008eb2:	d117      	bne.n	8008ee4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008eb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008eb8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008ebc:	3201      	adds	r2, #1
 8008ebe:	00d2      	lsls	r2, r2, #3
 8008ec0:	211a      	movs	r1, #26
 8008ec2:	fb01 f303 	mul.w	r3, r1, r3
 8008ec6:	4413      	add	r3, r2
 8008ec8:	3308      	adds	r3, #8
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	4413      	add	r3, r2
 8008ece:	3304      	adds	r3, #4
 8008ed0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008ed2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ed4:	69b8      	ldr	r0, [r7, #24]
 8008ed6:	f000 f851 	bl	8008f7c <USBH_ParseEPDesc>
            ep_ix++;
 8008eda:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008ede:	3301      	adds	r3, #1
 8008ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	791b      	ldrb	r3, [r3, #4]
 8008ee8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d204      	bcs.n	8008efa <USBH_ParseCfgDesc+0x120>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	885a      	ldrh	r2, [r3, #2]
 8008ef4:	8afb      	ldrh	r3, [r7, #22]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d8d1      	bhi.n	8008e9e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008efa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008efe:	3301      	adds	r3, #1
 8008f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008f04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d804      	bhi.n	8008f16 <USBH_ParseCfgDesc+0x13c>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	885a      	ldrh	r2, [r3, #2]
 8008f10:	8afb      	ldrh	r3, [r7, #22]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d8a4      	bhi.n	8008e60 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008f16:	bf00      	nop
 8008f18:	3728      	adds	r7, #40	; 0x28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b083      	sub	sp, #12
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781a      	ldrb	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	785a      	ldrb	r2, [r3, #1]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	789a      	ldrb	r2, [r3, #2]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	78da      	ldrb	r2, [r3, #3]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	791a      	ldrb	r2, [r3, #4]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	795a      	ldrb	r2, [r3, #5]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	799a      	ldrb	r2, [r3, #6]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	79da      	ldrb	r2, [r3, #7]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	7a1a      	ldrb	r2, [r3, #8]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	721a      	strb	r2, [r3, #8]
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	781a      	ldrb	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	785a      	ldrb	r2, [r3, #1]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	789a      	ldrb	r2, [r3, #2]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	78da      	ldrb	r2, [r3, #3]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	3304      	adds	r3, #4
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	3305      	adds	r3, #5
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	021b      	lsls	r3, r3, #8
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	799a      	ldrb	r2, [r3, #6]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	719a      	strb	r2, [r3, #6]
}
 8008fca:	bf00      	nop
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b087      	sub	sp, #28
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	2b03      	cmp	r3, #3
 8008fec:	d120      	bne.n	8009030 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	1e9a      	subs	r2, r3, #2
 8008ff4:	88fb      	ldrh	r3, [r7, #6]
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	bf28      	it	cs
 8008ffa:	4613      	movcs	r3, r2
 8008ffc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3302      	adds	r3, #2
 8009002:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009004:	2300      	movs	r3, #0
 8009006:	82fb      	strh	r3, [r7, #22]
 8009008:	e00b      	b.n	8009022 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800900a:	8afb      	ldrh	r3, [r7, #22]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	4413      	add	r3, r2
 8009010:	781a      	ldrb	r2, [r3, #0]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	3301      	adds	r3, #1
 800901a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800901c:	8afb      	ldrh	r3, [r7, #22]
 800901e:	3302      	adds	r3, #2
 8009020:	82fb      	strh	r3, [r7, #22]
 8009022:	8afa      	ldrh	r2, [r7, #22]
 8009024:	8abb      	ldrh	r3, [r7, #20]
 8009026:	429a      	cmp	r2, r3
 8009028:	d3ef      	bcc.n	800900a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	2200      	movs	r2, #0
 800902e:	701a      	strb	r2, [r3, #0]
  }
}
 8009030:	bf00      	nop
 8009032:	371c      	adds	r7, #28
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	881a      	ldrh	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	b29b      	uxth	r3, r3
 8009050:	4413      	add	r3, r2
 8009052:	b29a      	uxth	r2, r3
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4413      	add	r3, r2
 8009062:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009064:	68fb      	ldr	r3, [r7, #12]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr

08009072 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b086      	sub	sp, #24
 8009076:	af00      	add	r7, sp, #0
 8009078:	60f8      	str	r0, [r7, #12]
 800907a:	60b9      	str	r1, [r7, #8]
 800907c:	4613      	mov	r3, r2
 800907e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009080:	2301      	movs	r3, #1
 8009082:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	789b      	ldrb	r3, [r3, #2]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d002      	beq.n	8009092 <USBH_CtlReq+0x20>
 800908c:	2b02      	cmp	r3, #2
 800908e:	d00f      	beq.n	80090b0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009090:	e027      	b.n	80090e2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	88fa      	ldrh	r2, [r7, #6]
 800909c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2201      	movs	r2, #1
 80090a2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2202      	movs	r2, #2
 80090a8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80090aa:	2301      	movs	r3, #1
 80090ac:	75fb      	strb	r3, [r7, #23]
      break;
 80090ae:	e018      	b.n	80090e2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 f81b 	bl	80090ec <USBH_HandleControl>
 80090b6:	4603      	mov	r3, r0
 80090b8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d002      	beq.n	80090c6 <USBH_CtlReq+0x54>
 80090c0:	7dfb      	ldrb	r3, [r7, #23]
 80090c2:	2b03      	cmp	r3, #3
 80090c4:	d106      	bne.n	80090d4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2201      	movs	r2, #1
 80090ca:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	761a      	strb	r2, [r3, #24]
      break;
 80090d2:	e005      	b.n	80090e0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80090d4:	7dfb      	ldrb	r3, [r7, #23]
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d102      	bne.n	80090e0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2201      	movs	r2, #1
 80090de:	709a      	strb	r2, [r3, #2]
      break;
 80090e0:	bf00      	nop
  }
  return status;
 80090e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3718      	adds	r7, #24
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af02      	add	r7, sp, #8
 80090f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80090f4:	2301      	movs	r3, #1
 80090f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	7e1b      	ldrb	r3, [r3, #24]
 8009100:	3b01      	subs	r3, #1
 8009102:	2b0a      	cmp	r3, #10
 8009104:	f200 8156 	bhi.w	80093b4 <USBH_HandleControl+0x2c8>
 8009108:	a201      	add	r2, pc, #4	; (adr r2, 8009110 <USBH_HandleControl+0x24>)
 800910a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910e:	bf00      	nop
 8009110:	0800913d 	.word	0x0800913d
 8009114:	08009157 	.word	0x08009157
 8009118:	080091c1 	.word	0x080091c1
 800911c:	080091e7 	.word	0x080091e7
 8009120:	0800921f 	.word	0x0800921f
 8009124:	08009249 	.word	0x08009249
 8009128:	0800929b 	.word	0x0800929b
 800912c:	080092bd 	.word	0x080092bd
 8009130:	080092f9 	.word	0x080092f9
 8009134:	0800931f 	.word	0x0800931f
 8009138:	0800935d 	.word	0x0800935d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f103 0110 	add.w	r1, r3, #16
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	795b      	ldrb	r3, [r3, #5]
 8009146:	461a      	mov	r2, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f943 	bl	80093d4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2202      	movs	r2, #2
 8009152:	761a      	strb	r2, [r3, #24]
      break;
 8009154:	e139      	b.n	80093ca <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	795b      	ldrb	r3, [r3, #5]
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fcc5 	bl	8009aec <USBH_LL_GetURBState>
 8009162:	4603      	mov	r3, r0
 8009164:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009166:	7bbb      	ldrb	r3, [r7, #14]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d11e      	bne.n	80091aa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	7c1b      	ldrb	r3, [r3, #16]
 8009170:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009174:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	8adb      	ldrh	r3, [r3, #22]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800917e:	7b7b      	ldrb	r3, [r7, #13]
 8009180:	2b80      	cmp	r3, #128	; 0x80
 8009182:	d103      	bne.n	800918c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2203      	movs	r2, #3
 8009188:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800918a:	e115      	b.n	80093b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2205      	movs	r2, #5
 8009190:	761a      	strb	r2, [r3, #24]
      break;
 8009192:	e111      	b.n	80093b8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009194:	7b7b      	ldrb	r3, [r7, #13]
 8009196:	2b80      	cmp	r3, #128	; 0x80
 8009198:	d103      	bne.n	80091a2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2209      	movs	r2, #9
 800919e:	761a      	strb	r2, [r3, #24]
      break;
 80091a0:	e10a      	b.n	80093b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2207      	movs	r2, #7
 80091a6:	761a      	strb	r2, [r3, #24]
      break;
 80091a8:	e106      	b.n	80093b8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80091aa:	7bbb      	ldrb	r3, [r7, #14]
 80091ac:	2b04      	cmp	r3, #4
 80091ae:	d003      	beq.n	80091b8 <USBH_HandleControl+0xcc>
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	f040 8100 	bne.w	80093b8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	220b      	movs	r2, #11
 80091bc:	761a      	strb	r2, [r3, #24]
      break;
 80091be:	e0fb      	b.n	80093b8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6899      	ldr	r1, [r3, #8]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	899a      	ldrh	r2, [r3, #12]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	791b      	ldrb	r3, [r3, #4]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f93a 	bl	8009452 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2204      	movs	r2, #4
 80091e2:	761a      	strb	r2, [r3, #24]
      break;
 80091e4:	e0f1      	b.n	80093ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	791b      	ldrb	r3, [r3, #4]
 80091ea:	4619      	mov	r1, r3
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fc7d 	bl	8009aec <USBH_LL_GetURBState>
 80091f2:	4603      	mov	r3, r0
 80091f4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80091f6:	7bbb      	ldrb	r3, [r7, #14]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d102      	bne.n	8009202 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2209      	movs	r2, #9
 8009200:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009202:	7bbb      	ldrb	r3, [r7, #14]
 8009204:	2b05      	cmp	r3, #5
 8009206:	d102      	bne.n	800920e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009208:	2303      	movs	r3, #3
 800920a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800920c:	e0d6      	b.n	80093bc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800920e:	7bbb      	ldrb	r3, [r7, #14]
 8009210:	2b04      	cmp	r3, #4
 8009212:	f040 80d3 	bne.w	80093bc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	220b      	movs	r2, #11
 800921a:	761a      	strb	r2, [r3, #24]
      break;
 800921c:	e0ce      	b.n	80093bc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6899      	ldr	r1, [r3, #8]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	899a      	ldrh	r2, [r3, #12]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	795b      	ldrb	r3, [r3, #5]
 800922a:	2001      	movs	r0, #1
 800922c:	9000      	str	r0, [sp, #0]
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f8ea 	bl	8009408 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800923a:	b29a      	uxth	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2206      	movs	r2, #6
 8009244:	761a      	strb	r2, [r3, #24]
      break;
 8009246:	e0c0      	b.n	80093ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	795b      	ldrb	r3, [r3, #5]
 800924c:	4619      	mov	r1, r3
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fc4c 	bl	8009aec <USBH_LL_GetURBState>
 8009254:	4603      	mov	r3, r0
 8009256:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d103      	bne.n	8009266 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2207      	movs	r2, #7
 8009262:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009264:	e0ac      	b.n	80093c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009266:	7bbb      	ldrb	r3, [r7, #14]
 8009268:	2b05      	cmp	r3, #5
 800926a:	d105      	bne.n	8009278 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	220c      	movs	r2, #12
 8009270:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009272:	2303      	movs	r3, #3
 8009274:	73fb      	strb	r3, [r7, #15]
      break;
 8009276:	e0a3      	b.n	80093c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009278:	7bbb      	ldrb	r3, [r7, #14]
 800927a:	2b02      	cmp	r3, #2
 800927c:	d103      	bne.n	8009286 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2205      	movs	r2, #5
 8009282:	761a      	strb	r2, [r3, #24]
      break;
 8009284:	e09c      	b.n	80093c0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009286:	7bbb      	ldrb	r3, [r7, #14]
 8009288:	2b04      	cmp	r3, #4
 800928a:	f040 8099 	bne.w	80093c0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	220b      	movs	r2, #11
 8009292:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009294:	2302      	movs	r3, #2
 8009296:	73fb      	strb	r3, [r7, #15]
      break;
 8009298:	e092      	b.n	80093c0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	791b      	ldrb	r3, [r3, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	2100      	movs	r1, #0
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f8d5 	bl	8009452 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2208      	movs	r2, #8
 80092b8:	761a      	strb	r2, [r3, #24]

      break;
 80092ba:	e086      	b.n	80093ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	791b      	ldrb	r3, [r3, #4]
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fc12 	bl	8009aec <USBH_LL_GetURBState>
 80092c8:	4603      	mov	r3, r0
 80092ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80092cc:	7bbb      	ldrb	r3, [r7, #14]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d105      	bne.n	80092de <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	220d      	movs	r2, #13
 80092d6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80092dc:	e072      	b.n	80093c4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80092de:	7bbb      	ldrb	r3, [r7, #14]
 80092e0:	2b04      	cmp	r3, #4
 80092e2:	d103      	bne.n	80092ec <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	220b      	movs	r2, #11
 80092e8:	761a      	strb	r2, [r3, #24]
      break;
 80092ea:	e06b      	b.n	80093c4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80092ec:	7bbb      	ldrb	r3, [r7, #14]
 80092ee:	2b05      	cmp	r3, #5
 80092f0:	d168      	bne.n	80093c4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80092f2:	2303      	movs	r3, #3
 80092f4:	73fb      	strb	r3, [r7, #15]
      break;
 80092f6:	e065      	b.n	80093c4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	795b      	ldrb	r3, [r3, #5]
 80092fc:	2201      	movs	r2, #1
 80092fe:	9200      	str	r2, [sp, #0]
 8009300:	2200      	movs	r2, #0
 8009302:	2100      	movs	r1, #0
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f87f 	bl	8009408 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009310:	b29a      	uxth	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	220a      	movs	r2, #10
 800931a:	761a      	strb	r2, [r3, #24]
      break;
 800931c:	e055      	b.n	80093ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	795b      	ldrb	r3, [r3, #5]
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fbe1 	bl	8009aec <USBH_LL_GetURBState>
 800932a:	4603      	mov	r3, r0
 800932c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800932e:	7bbb      	ldrb	r3, [r7, #14]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d105      	bne.n	8009340 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	220d      	movs	r2, #13
 800933c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800933e:	e043      	b.n	80093c8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	2b02      	cmp	r3, #2
 8009344:	d103      	bne.n	800934e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2209      	movs	r2, #9
 800934a:	761a      	strb	r2, [r3, #24]
      break;
 800934c:	e03c      	b.n	80093c8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800934e:	7bbb      	ldrb	r3, [r7, #14]
 8009350:	2b04      	cmp	r3, #4
 8009352:	d139      	bne.n	80093c8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	220b      	movs	r2, #11
 8009358:	761a      	strb	r2, [r3, #24]
      break;
 800935a:	e035      	b.n	80093c8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	7e5b      	ldrb	r3, [r3, #25]
 8009360:	3301      	adds	r3, #1
 8009362:	b2da      	uxtb	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	765a      	strb	r2, [r3, #25]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	7e5b      	ldrb	r3, [r3, #25]
 800936c:	2b02      	cmp	r3, #2
 800936e:	d806      	bhi.n	800937e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2201      	movs	r2, #1
 800937a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800937c:	e025      	b.n	80093ca <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009384:	2106      	movs	r1, #6
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	795b      	ldrb	r3, [r3, #5]
 8009394:	4619      	mov	r1, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f90c 	bl	80095b4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	791b      	ldrb	r3, [r3, #4]
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f906 	bl	80095b4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80093ae:	2302      	movs	r3, #2
 80093b0:	73fb      	strb	r3, [r7, #15]
      break;
 80093b2:	e00a      	b.n	80093ca <USBH_HandleControl+0x2de>

    default:
      break;
 80093b4:	bf00      	nop
 80093b6:	e008      	b.n	80093ca <USBH_HandleControl+0x2de>
      break;
 80093b8:	bf00      	nop
 80093ba:	e006      	b.n	80093ca <USBH_HandleControl+0x2de>
      break;
 80093bc:	bf00      	nop
 80093be:	e004      	b.n	80093ca <USBH_HandleControl+0x2de>
      break;
 80093c0:	bf00      	nop
 80093c2:	e002      	b.n	80093ca <USBH_HandleControl+0x2de>
      break;
 80093c4:	bf00      	nop
 80093c6:	e000      	b.n	80093ca <USBH_HandleControl+0x2de>
      break;
 80093c8:	bf00      	nop
  }

  return status;
 80093ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3710      	adds	r7, #16
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b088      	sub	sp, #32
 80093d8:	af04      	add	r7, sp, #16
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	4613      	mov	r3, r2
 80093e0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80093e2:	79f9      	ldrb	r1, [r7, #7]
 80093e4:	2300      	movs	r3, #0
 80093e6:	9303      	str	r3, [sp, #12]
 80093e8:	2308      	movs	r3, #8
 80093ea:	9302      	str	r3, [sp, #8]
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	9301      	str	r3, [sp, #4]
 80093f0:	2300      	movs	r3, #0
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	2300      	movs	r3, #0
 80093f6:	2200      	movs	r2, #0
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f000 fb46 	bl	8009a8a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b088      	sub	sp, #32
 800940c:	af04      	add	r7, sp, #16
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	4611      	mov	r1, r2
 8009414:	461a      	mov	r2, r3
 8009416:	460b      	mov	r3, r1
 8009418:	80fb      	strh	r3, [r7, #6]
 800941a:	4613      	mov	r3, r2
 800941c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009428:	2300      	movs	r3, #0
 800942a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800942c:	7979      	ldrb	r1, [r7, #5]
 800942e:	7e3b      	ldrb	r3, [r7, #24]
 8009430:	9303      	str	r3, [sp, #12]
 8009432:	88fb      	ldrh	r3, [r7, #6]
 8009434:	9302      	str	r3, [sp, #8]
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	9301      	str	r3, [sp, #4]
 800943a:	2301      	movs	r3, #1
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	2300      	movs	r3, #0
 8009440:	2200      	movs	r2, #0
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f000 fb21 	bl	8009a8a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b088      	sub	sp, #32
 8009456:	af04      	add	r7, sp, #16
 8009458:	60f8      	str	r0, [r7, #12]
 800945a:	60b9      	str	r1, [r7, #8]
 800945c:	4611      	mov	r1, r2
 800945e:	461a      	mov	r2, r3
 8009460:	460b      	mov	r3, r1
 8009462:	80fb      	strh	r3, [r7, #6]
 8009464:	4613      	mov	r3, r2
 8009466:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009468:	7979      	ldrb	r1, [r7, #5]
 800946a:	2300      	movs	r3, #0
 800946c:	9303      	str	r3, [sp, #12]
 800946e:	88fb      	ldrh	r3, [r7, #6]
 8009470:	9302      	str	r3, [sp, #8]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	9301      	str	r3, [sp, #4]
 8009476:	2301      	movs	r3, #1
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	2300      	movs	r3, #0
 800947c:	2201      	movs	r2, #1
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f000 fb03 	bl	8009a8a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009484:	2300      	movs	r3, #0

}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b088      	sub	sp, #32
 8009492:	af04      	add	r7, sp, #16
 8009494:	60f8      	str	r0, [r7, #12]
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	4611      	mov	r1, r2
 800949a:	461a      	mov	r2, r3
 800949c:	460b      	mov	r3, r1
 800949e:	80fb      	strh	r3, [r7, #6]
 80094a0:	4613      	mov	r3, r2
 80094a2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80094ae:	2300      	movs	r3, #0
 80094b0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80094b2:	7979      	ldrb	r1, [r7, #5]
 80094b4:	7e3b      	ldrb	r3, [r7, #24]
 80094b6:	9303      	str	r3, [sp, #12]
 80094b8:	88fb      	ldrh	r3, [r7, #6]
 80094ba:	9302      	str	r3, [sp, #8]
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	9301      	str	r3, [sp, #4]
 80094c0:	2301      	movs	r3, #1
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	2302      	movs	r3, #2
 80094c6:	2200      	movs	r2, #0
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 fade 	bl	8009a8a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b088      	sub	sp, #32
 80094dc:	af04      	add	r7, sp, #16
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	4611      	mov	r1, r2
 80094e4:	461a      	mov	r2, r3
 80094e6:	460b      	mov	r3, r1
 80094e8:	80fb      	strh	r3, [r7, #6]
 80094ea:	4613      	mov	r3, r2
 80094ec:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80094ee:	7979      	ldrb	r1, [r7, #5]
 80094f0:	2300      	movs	r3, #0
 80094f2:	9303      	str	r3, [sp, #12]
 80094f4:	88fb      	ldrh	r3, [r7, #6]
 80094f6:	9302      	str	r3, [sp, #8]
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	9301      	str	r3, [sp, #4]
 80094fc:	2301      	movs	r3, #1
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	2302      	movs	r3, #2
 8009502:	2201      	movs	r2, #1
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 fac0 	bl	8009a8a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af04      	add	r7, sp, #16
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	4608      	mov	r0, r1
 800951e:	4611      	mov	r1, r2
 8009520:	461a      	mov	r2, r3
 8009522:	4603      	mov	r3, r0
 8009524:	70fb      	strb	r3, [r7, #3]
 8009526:	460b      	mov	r3, r1
 8009528:	70bb      	strb	r3, [r7, #2]
 800952a:	4613      	mov	r3, r2
 800952c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800952e:	7878      	ldrb	r0, [r7, #1]
 8009530:	78ba      	ldrb	r2, [r7, #2]
 8009532:	78f9      	ldrb	r1, [r7, #3]
 8009534:	8b3b      	ldrh	r3, [r7, #24]
 8009536:	9302      	str	r3, [sp, #8]
 8009538:	7d3b      	ldrb	r3, [r7, #20]
 800953a:	9301      	str	r3, [sp, #4]
 800953c:	7c3b      	ldrb	r3, [r7, #16]
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	4603      	mov	r3, r0
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fa53 	bl	80099ee <USBH_LL_OpenPipe>

  return USBH_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b082      	sub	sp, #8
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	460b      	mov	r3, r1
 800955c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800955e:	78fb      	ldrb	r3, [r7, #3]
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fa72 	bl	8009a4c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	460b      	mov	r3, r1
 800957c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f836 	bl	80095f0 <USBH_GetFreePipe>
 8009584:	4603      	mov	r3, r0
 8009586:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009588:	89fb      	ldrh	r3, [r7, #14]
 800958a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800958e:	4293      	cmp	r3, r2
 8009590:	d00a      	beq.n	80095a8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009592:	78fa      	ldrb	r2, [r7, #3]
 8009594:	89fb      	ldrh	r3, [r7, #14]
 8009596:	f003 030f 	and.w	r3, r3, #15
 800959a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	33e0      	adds	r3, #224	; 0xe0
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	440b      	add	r3, r1
 80095a6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80095a8:	89fb      	ldrh	r3, [r7, #14]
 80095aa:	b2db      	uxtb	r3, r3
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80095c0:	78fb      	ldrb	r3, [r7, #3]
 80095c2:	2b0a      	cmp	r3, #10
 80095c4:	d80d      	bhi.n	80095e2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80095c6:	78fb      	ldrb	r3, [r7, #3]
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	33e0      	adds	r3, #224	; 0xe0
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	78fb      	ldrb	r3, [r7, #3]
 80095d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80095d8:	6879      	ldr	r1, [r7, #4]
 80095da:	33e0      	adds	r3, #224	; 0xe0
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	440b      	add	r3, r1
 80095e0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80095f8:	2300      	movs	r3, #0
 80095fa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80095fc:	2300      	movs	r3, #0
 80095fe:	73fb      	strb	r3, [r7, #15]
 8009600:	e00f      	b.n	8009622 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009602:	7bfb      	ldrb	r3, [r7, #15]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	33e0      	adds	r3, #224	; 0xe0
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d102      	bne.n	800961c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	b29b      	uxth	r3, r3
 800961a:	e007      	b.n	800962c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	3301      	adds	r3, #1
 8009620:	73fb      	strb	r3, [r7, #15]
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	2b0a      	cmp	r3, #10
 8009626:	d9ec      	bls.n	8009602 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009628:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800962c:	4618      	mov	r0, r3
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800963c:	2201      	movs	r2, #1
 800963e:	490e      	ldr	r1, [pc, #56]	; (8009678 <MX_USB_HOST_Init+0x40>)
 8009640:	480e      	ldr	r0, [pc, #56]	; (800967c <MX_USB_HOST_Init+0x44>)
 8009642:	f7fe fca1 	bl	8007f88 <USBH_Init>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d001      	beq.n	8009650 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800964c:	f7f8 f914 	bl	8001878 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009650:	490b      	ldr	r1, [pc, #44]	; (8009680 <MX_USB_HOST_Init+0x48>)
 8009652:	480a      	ldr	r0, [pc, #40]	; (800967c <MX_USB_HOST_Init+0x44>)
 8009654:	f7fe fd26 	bl	80080a4 <USBH_RegisterClass>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d001      	beq.n	8009662 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800965e:	f7f8 f90b 	bl	8001878 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009662:	4806      	ldr	r0, [pc, #24]	; (800967c <MX_USB_HOST_Init+0x44>)
 8009664:	f7fe fdaa 	bl	80081bc <USBH_Start>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d001      	beq.n	8009672 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800966e:	f7f8 f903 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009672:	bf00      	nop
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	08009699 	.word	0x08009699
 800967c:	20000264 	.word	0x20000264
 8009680:	20000014 	.word	0x20000014

08009684 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009688:	4802      	ldr	r0, [pc, #8]	; (8009694 <MX_USB_HOST_Process+0x10>)
 800968a:	f7fe fda7 	bl	80081dc <USBH_Process>
}
 800968e:	bf00      	nop
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	20000264 	.word	0x20000264

08009698 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	460b      	mov	r3, r1
 80096a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80096a4:	78fb      	ldrb	r3, [r7, #3]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	2b04      	cmp	r3, #4
 80096aa:	d819      	bhi.n	80096e0 <USBH_UserProcess+0x48>
 80096ac:	a201      	add	r2, pc, #4	; (adr r2, 80096b4 <USBH_UserProcess+0x1c>)
 80096ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b2:	bf00      	nop
 80096b4:	080096e1 	.word	0x080096e1
 80096b8:	080096d1 	.word	0x080096d1
 80096bc:	080096e1 	.word	0x080096e1
 80096c0:	080096d9 	.word	0x080096d9
 80096c4:	080096c9 	.word	0x080096c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80096c8:	4b09      	ldr	r3, [pc, #36]	; (80096f0 <USBH_UserProcess+0x58>)
 80096ca:	2203      	movs	r2, #3
 80096cc:	701a      	strb	r2, [r3, #0]
  break;
 80096ce:	e008      	b.n	80096e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80096d0:	4b07      	ldr	r3, [pc, #28]	; (80096f0 <USBH_UserProcess+0x58>)
 80096d2:	2202      	movs	r2, #2
 80096d4:	701a      	strb	r2, [r3, #0]
  break;
 80096d6:	e004      	b.n	80096e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80096d8:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <USBH_UserProcess+0x58>)
 80096da:	2201      	movs	r2, #1
 80096dc:	701a      	strb	r2, [r3, #0]
  break;
 80096de:	e000      	b.n	80096e2 <USBH_UserProcess+0x4a>

  default:
  break;
 80096e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80096e2:	bf00      	nop
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	200000bc 	.word	0x200000bc

080096f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b08a      	sub	sp, #40	; 0x28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096fc:	f107 0314 	add.w	r3, r7, #20
 8009700:	2200      	movs	r2, #0
 8009702:	601a      	str	r2, [r3, #0]
 8009704:	605a      	str	r2, [r3, #4]
 8009706:	609a      	str	r2, [r3, #8]
 8009708:	60da      	str	r2, [r3, #12]
 800970a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009714:	d147      	bne.n	80097a6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009716:	2300      	movs	r3, #0
 8009718:	613b      	str	r3, [r7, #16]
 800971a:	4b25      	ldr	r3, [pc, #148]	; (80097b0 <HAL_HCD_MspInit+0xbc>)
 800971c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971e:	4a24      	ldr	r2, [pc, #144]	; (80097b0 <HAL_HCD_MspInit+0xbc>)
 8009720:	f043 0301 	orr.w	r3, r3, #1
 8009724:	6313      	str	r3, [r2, #48]	; 0x30
 8009726:	4b22      	ldr	r3, [pc, #136]	; (80097b0 <HAL_HCD_MspInit+0xbc>)
 8009728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972a:	f003 0301 	and.w	r3, r3, #1
 800972e:	613b      	str	r3, [r7, #16]
 8009730:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009738:	2300      	movs	r3, #0
 800973a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800973c:	2300      	movs	r3, #0
 800973e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009740:	f107 0314 	add.w	r3, r7, #20
 8009744:	4619      	mov	r1, r3
 8009746:	481b      	ldr	r0, [pc, #108]	; (80097b4 <HAL_HCD_MspInit+0xc0>)
 8009748:	f7f8 fd0e 	bl	8002168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800974c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009752:	2302      	movs	r3, #2
 8009754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009756:	2300      	movs	r3, #0
 8009758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800975a:	2300      	movs	r3, #0
 800975c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800975e:	230a      	movs	r3, #10
 8009760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009762:	f107 0314 	add.w	r3, r7, #20
 8009766:	4619      	mov	r1, r3
 8009768:	4812      	ldr	r0, [pc, #72]	; (80097b4 <HAL_HCD_MspInit+0xc0>)
 800976a:	f7f8 fcfd 	bl	8002168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800976e:	4b10      	ldr	r3, [pc, #64]	; (80097b0 <HAL_HCD_MspInit+0xbc>)
 8009770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009772:	4a0f      	ldr	r2, [pc, #60]	; (80097b0 <HAL_HCD_MspInit+0xbc>)
 8009774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009778:	6353      	str	r3, [r2, #52]	; 0x34
 800977a:	2300      	movs	r3, #0
 800977c:	60fb      	str	r3, [r7, #12]
 800977e:	4b0c      	ldr	r3, [pc, #48]	; (80097b0 <HAL_HCD_MspInit+0xbc>)
 8009780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009782:	4a0b      	ldr	r2, [pc, #44]	; (80097b0 <HAL_HCD_MspInit+0xbc>)
 8009784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009788:	6453      	str	r3, [r2, #68]	; 0x44
 800978a:	4b09      	ldr	r3, [pc, #36]	; (80097b0 <HAL_HCD_MspInit+0xbc>)
 800978c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800978e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009792:	60fb      	str	r3, [r7, #12]
 8009794:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009796:	2200      	movs	r2, #0
 8009798:	2100      	movs	r1, #0
 800979a:	2043      	movs	r0, #67	; 0x43
 800979c:	f7f8 fcad 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80097a0:	2043      	movs	r0, #67	; 0x43
 80097a2:	f7f8 fcc6 	bl	8002132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80097a6:	bf00      	nop
 80097a8:	3728      	adds	r7, #40	; 0x28
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	40023800 	.word	0x40023800
 80097b4:	40020000 	.word	0x40020000

080097b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7ff f8db 	bl	8008982 <USBH_LL_IncTimer>
}
 80097cc:	bf00      	nop
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7ff f913 	bl	8008a0e <USBH_LL_Connect>
}
 80097e8:	bf00      	nop
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80097fe:	4618      	mov	r0, r3
 8009800:	f7ff f91c 	bl	8008a3c <USBH_LL_Disconnect>
}
 8009804:	bf00      	nop
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	460b      	mov	r3, r1
 8009816:	70fb      	strb	r3, [r7, #3]
 8009818:	4613      	mov	r3, r2
 800981a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009836:	4618      	mov	r0, r3
 8009838:	f7ff f8cd 	bl	80089d6 <USBH_LL_PortEnabled>
}
 800983c:	bf00      	nop
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009852:	4618      	mov	r0, r3
 8009854:	f7ff f8cd 	bl	80089f2 <USBH_LL_PortDisabled>
}
 8009858:	bf00      	nop
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800986e:	2b01      	cmp	r3, #1
 8009870:	d12a      	bne.n	80098c8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009872:	4a18      	ldr	r2, [pc, #96]	; (80098d4 <USBH_LL_Init+0x74>)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a15      	ldr	r2, [pc, #84]	; (80098d4 <USBH_LL_Init+0x74>)
 800987e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009882:	4b14      	ldr	r3, [pc, #80]	; (80098d4 <USBH_LL_Init+0x74>)
 8009884:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009888:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800988a:	4b12      	ldr	r3, [pc, #72]	; (80098d4 <USBH_LL_Init+0x74>)
 800988c:	2208      	movs	r2, #8
 800988e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009890:	4b10      	ldr	r3, [pc, #64]	; (80098d4 <USBH_LL_Init+0x74>)
 8009892:	2201      	movs	r2, #1
 8009894:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009896:	4b0f      	ldr	r3, [pc, #60]	; (80098d4 <USBH_LL_Init+0x74>)
 8009898:	2200      	movs	r2, #0
 800989a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800989c:	4b0d      	ldr	r3, [pc, #52]	; (80098d4 <USBH_LL_Init+0x74>)
 800989e:	2202      	movs	r2, #2
 80098a0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80098a2:	4b0c      	ldr	r3, [pc, #48]	; (80098d4 <USBH_LL_Init+0x74>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80098a8:	480a      	ldr	r0, [pc, #40]	; (80098d4 <USBH_LL_Init+0x74>)
 80098aa:	f7f8 fe44 	bl	8002536 <HAL_HCD_Init>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80098b4:	f7f7 ffe0 	bl	8001878 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80098b8:	4806      	ldr	r0, [pc, #24]	; (80098d4 <USBH_LL_Init+0x74>)
 80098ba:	f7f9 fa21 	bl	8002d00 <HAL_HCD_GetCurrentFrame>
 80098be:	4603      	mov	r3, r0
 80098c0:	4619      	mov	r1, r3
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f7ff f84e 	bl	8008964 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	2000063c 	.word	0x2000063c

080098d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7f9 f990 	bl	8002c14 <HAL_HCD_Start>
 80098f4:	4603      	mov	r3, r0
 80098f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 f95c 	bl	8009bb8 <USBH_Get_USB_Status>
 8009900:	4603      	mov	r3, r0
 8009902:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009904:	7bbb      	ldrb	r3, [r7, #14]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b084      	sub	sp, #16
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009924:	4618      	mov	r0, r3
 8009926:	f7f9 f998 	bl	8002c5a <HAL_HCD_Stop>
 800992a:	4603      	mov	r3, r0
 800992c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800992e:	7bfb      	ldrb	r3, [r7, #15]
 8009930:	4618      	mov	r0, r3
 8009932:	f000 f941 	bl	8009bb8 <USBH_Get_USB_Status>
 8009936:	4603      	mov	r3, r0
 8009938:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800993a:	7bbb      	ldrb	r3, [r7, #14]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800994c:	2301      	movs	r3, #1
 800994e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009956:	4618      	mov	r0, r3
 8009958:	f7f9 f9e0 	bl	8002d1c <HAL_HCD_GetCurrentSpeed>
 800995c:	4603      	mov	r3, r0
 800995e:	2b02      	cmp	r3, #2
 8009960:	d00c      	beq.n	800997c <USBH_LL_GetSpeed+0x38>
 8009962:	2b02      	cmp	r3, #2
 8009964:	d80d      	bhi.n	8009982 <USBH_LL_GetSpeed+0x3e>
 8009966:	2b00      	cmp	r3, #0
 8009968:	d002      	beq.n	8009970 <USBH_LL_GetSpeed+0x2c>
 800996a:	2b01      	cmp	r3, #1
 800996c:	d003      	beq.n	8009976 <USBH_LL_GetSpeed+0x32>
 800996e:	e008      	b.n	8009982 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009970:	2300      	movs	r3, #0
 8009972:	73fb      	strb	r3, [r7, #15]
    break;
 8009974:	e008      	b.n	8009988 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009976:	2301      	movs	r3, #1
 8009978:	73fb      	strb	r3, [r7, #15]
    break;
 800997a:	e005      	b.n	8009988 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800997c:	2302      	movs	r3, #2
 800997e:	73fb      	strb	r3, [r7, #15]
    break;
 8009980:	e002      	b.n	8009988 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009982:	2301      	movs	r3, #1
 8009984:	73fb      	strb	r3, [r7, #15]
    break;
 8009986:	bf00      	nop
  }
  return  speed;
 8009988:	7bfb      	ldrb	r3, [r7, #15]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b084      	sub	sp, #16
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800999e:	2300      	movs	r3, #0
 80099a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7f9 f973 	bl	8002c94 <HAL_HCD_ResetPort>
 80099ae:	4603      	mov	r3, r0
 80099b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 f8ff 	bl	8009bb8 <USBH_Get_USB_Status>
 80099ba:	4603      	mov	r3, r0
 80099bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099be:	7bbb      	ldrb	r3, [r7, #14]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80099da:	78fa      	ldrb	r2, [r7, #3]
 80099dc:	4611      	mov	r1, r2
 80099de:	4618      	mov	r0, r3
 80099e0:	f7f9 f97a 	bl	8002cd8 <HAL_HCD_HC_GetXferCount>
 80099e4:	4603      	mov	r3, r0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80099ee:	b590      	push	{r4, r7, lr}
 80099f0:	b089      	sub	sp, #36	; 0x24
 80099f2:	af04      	add	r7, sp, #16
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	4608      	mov	r0, r1
 80099f8:	4611      	mov	r1, r2
 80099fa:	461a      	mov	r2, r3
 80099fc:	4603      	mov	r3, r0
 80099fe:	70fb      	strb	r3, [r7, #3]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70bb      	strb	r3, [r7, #2]
 8009a04:	4613      	mov	r3, r2
 8009a06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009a16:	787c      	ldrb	r4, [r7, #1]
 8009a18:	78ba      	ldrb	r2, [r7, #2]
 8009a1a:	78f9      	ldrb	r1, [r7, #3]
 8009a1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a1e:	9302      	str	r3, [sp, #8]
 8009a20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a24:	9301      	str	r3, [sp, #4]
 8009a26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	4623      	mov	r3, r4
 8009a2e:	f7f8 fde4 	bl	80025fa <HAL_HCD_HC_Init>
 8009a32:	4603      	mov	r3, r0
 8009a34:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f000 f8bd 	bl	8009bb8 <USBH_Get_USB_Status>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a42:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3714      	adds	r7, #20
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd90      	pop	{r4, r7, pc}

08009a4c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	460b      	mov	r3, r1
 8009a56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a66:	78fa      	ldrb	r2, [r7, #3]
 8009a68:	4611      	mov	r1, r2
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7f8 fe54 	bl	8002718 <HAL_HCD_HC_Halt>
 8009a70:	4603      	mov	r3, r0
 8009a72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 f89e 	bl	8009bb8 <USBH_Get_USB_Status>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009a8a:	b590      	push	{r4, r7, lr}
 8009a8c:	b089      	sub	sp, #36	; 0x24
 8009a8e:	af04      	add	r7, sp, #16
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	4608      	mov	r0, r1
 8009a94:	4611      	mov	r1, r2
 8009a96:	461a      	mov	r2, r3
 8009a98:	4603      	mov	r3, r0
 8009a9a:	70fb      	strb	r3, [r7, #3]
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	70bb      	strb	r3, [r7, #2]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009ab2:	787c      	ldrb	r4, [r7, #1]
 8009ab4:	78ba      	ldrb	r2, [r7, #2]
 8009ab6:	78f9      	ldrb	r1, [r7, #3]
 8009ab8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009abc:	9303      	str	r3, [sp, #12]
 8009abe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ac0:	9302      	str	r3, [sp, #8]
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	4623      	mov	r3, r4
 8009ace:	f7f8 fe47 	bl	8002760 <HAL_HCD_HC_SubmitRequest>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f000 f86d 	bl	8009bb8 <USBH_Get_USB_Status>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ae2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd90      	pop	{r4, r7, pc}

08009aec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009afe:	78fa      	ldrb	r2, [r7, #3]
 8009b00:	4611      	mov	r1, r2
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7f9 f8d4 	bl	8002cb0 <HAL_HCD_HC_GetURBState>
 8009b08:	4603      	mov	r3, r0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b082      	sub	sp, #8
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d103      	bne.n	8009b30 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009b28:	78fb      	ldrb	r3, [r7, #3]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 f870 	bl	8009c10 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009b30:	20c8      	movs	r0, #200	; 0xc8
 8009b32:	f7f8 f9e3 	bl	8001efc <HAL_Delay>
  return USBH_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	70fb      	strb	r3, [r7, #3]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b56:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009b58:	78fb      	ldrb	r3, [r7, #3]
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	212c      	movs	r1, #44	; 0x2c
 8009b5e:	fb01 f303 	mul.w	r3, r1, r3
 8009b62:	4413      	add	r3, r2
 8009b64:	333b      	adds	r3, #59	; 0x3b
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d009      	beq.n	8009b80 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009b6c:	78fb      	ldrb	r3, [r7, #3]
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	212c      	movs	r1, #44	; 0x2c
 8009b72:	fb01 f303 	mul.w	r3, r1, r3
 8009b76:	4413      	add	r3, r2
 8009b78:	3354      	adds	r3, #84	; 0x54
 8009b7a:	78ba      	ldrb	r2, [r7, #2]
 8009b7c:	701a      	strb	r2, [r3, #0]
 8009b7e:	e008      	b.n	8009b92 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009b80:	78fb      	ldrb	r3, [r7, #3]
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	212c      	movs	r1, #44	; 0x2c
 8009b86:	fb01 f303 	mul.w	r3, r1, r3
 8009b8a:	4413      	add	r3, r2
 8009b8c:	3355      	adds	r3, #85	; 0x55
 8009b8e:	78ba      	ldrb	r2, [r7, #2]
 8009b90:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3714      	adds	r7, #20
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7f8 f9a7 	bl	8001efc <HAL_Delay>
}
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009bc6:	79fb      	ldrb	r3, [r7, #7]
 8009bc8:	2b03      	cmp	r3, #3
 8009bca:	d817      	bhi.n	8009bfc <USBH_Get_USB_Status+0x44>
 8009bcc:	a201      	add	r2, pc, #4	; (adr r2, 8009bd4 <USBH_Get_USB_Status+0x1c>)
 8009bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd2:	bf00      	nop
 8009bd4:	08009be5 	.word	0x08009be5
 8009bd8:	08009beb 	.word	0x08009beb
 8009bdc:	08009bf1 	.word	0x08009bf1
 8009be0:	08009bf7 	.word	0x08009bf7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	73fb      	strb	r3, [r7, #15]
    break;
 8009be8:	e00b      	b.n	8009c02 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009bea:	2302      	movs	r3, #2
 8009bec:	73fb      	strb	r3, [r7, #15]
    break;
 8009bee:	e008      	b.n	8009c02 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8009bf4:	e005      	b.n	8009c02 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009bf6:	2302      	movs	r3, #2
 8009bf8:	73fb      	strb	r3, [r7, #15]
    break;
 8009bfa:	e002      	b.n	8009c02 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8009c00:	bf00      	nop
  }
  return usb_status;
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3714      	adds	r7, #20
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	4603      	mov	r3, r0
 8009c18:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009c1a:	79fb      	ldrb	r3, [r7, #7]
 8009c1c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009c1e:	79fb      	ldrb	r3, [r7, #7]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d102      	bne.n	8009c2a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009c24:	2301      	movs	r3, #1
 8009c26:	73fb      	strb	r3, [r7, #15]
 8009c28:	e001      	b.n	8009c2e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009c2e:	7bfb      	ldrb	r3, [r7, #15]
 8009c30:	461a      	mov	r2, r3
 8009c32:	2101      	movs	r1, #1
 8009c34:	4803      	ldr	r0, [pc, #12]	; (8009c44 <MX_DriverVbusFS+0x34>)
 8009c36:	f7f8 fc4b 	bl	80024d0 <HAL_GPIO_WritePin>
}
 8009c3a:	bf00      	nop
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	40020800 	.word	0x40020800

08009c48 <__errno>:
 8009c48:	4b01      	ldr	r3, [pc, #4]	; (8009c50 <__errno+0x8>)
 8009c4a:	6818      	ldr	r0, [r3, #0]
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	20000034 	.word	0x20000034

08009c54 <__libc_init_array>:
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	4d0d      	ldr	r5, [pc, #52]	; (8009c8c <__libc_init_array+0x38>)
 8009c58:	4c0d      	ldr	r4, [pc, #52]	; (8009c90 <__libc_init_array+0x3c>)
 8009c5a:	1b64      	subs	r4, r4, r5
 8009c5c:	10a4      	asrs	r4, r4, #2
 8009c5e:	2600      	movs	r6, #0
 8009c60:	42a6      	cmp	r6, r4
 8009c62:	d109      	bne.n	8009c78 <__libc_init_array+0x24>
 8009c64:	4d0b      	ldr	r5, [pc, #44]	; (8009c94 <__libc_init_array+0x40>)
 8009c66:	4c0c      	ldr	r4, [pc, #48]	; (8009c98 <__libc_init_array+0x44>)
 8009c68:	f000 f8f8 	bl	8009e5c <_init>
 8009c6c:	1b64      	subs	r4, r4, r5
 8009c6e:	10a4      	asrs	r4, r4, #2
 8009c70:	2600      	movs	r6, #0
 8009c72:	42a6      	cmp	r6, r4
 8009c74:	d105      	bne.n	8009c82 <__libc_init_array+0x2e>
 8009c76:	bd70      	pop	{r4, r5, r6, pc}
 8009c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c7c:	4798      	blx	r3
 8009c7e:	3601      	adds	r6, #1
 8009c80:	e7ee      	b.n	8009c60 <__libc_init_array+0xc>
 8009c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c86:	4798      	blx	r3
 8009c88:	3601      	adds	r6, #1
 8009c8a:	e7f2      	b.n	8009c72 <__libc_init_array+0x1e>
 8009c8c:	08009e90 	.word	0x08009e90
 8009c90:	08009e90 	.word	0x08009e90
 8009c94:	08009e90 	.word	0x08009e90
 8009c98:	08009e94 	.word	0x08009e94

08009c9c <malloc>:
 8009c9c:	4b02      	ldr	r3, [pc, #8]	; (8009ca8 <malloc+0xc>)
 8009c9e:	4601      	mov	r1, r0
 8009ca0:	6818      	ldr	r0, [r3, #0]
 8009ca2:	f000 b863 	b.w	8009d6c <_malloc_r>
 8009ca6:	bf00      	nop
 8009ca8:	20000034 	.word	0x20000034

08009cac <free>:
 8009cac:	4b02      	ldr	r3, [pc, #8]	; (8009cb8 <free+0xc>)
 8009cae:	4601      	mov	r1, r0
 8009cb0:	6818      	ldr	r0, [r3, #0]
 8009cb2:	f000 b80b 	b.w	8009ccc <_free_r>
 8009cb6:	bf00      	nop
 8009cb8:	20000034 	.word	0x20000034

08009cbc <memset>:
 8009cbc:	4402      	add	r2, r0
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d100      	bne.n	8009cc6 <memset+0xa>
 8009cc4:	4770      	bx	lr
 8009cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8009cca:	e7f9      	b.n	8009cc0 <memset+0x4>

08009ccc <_free_r>:
 8009ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cce:	2900      	cmp	r1, #0
 8009cd0:	d048      	beq.n	8009d64 <_free_r+0x98>
 8009cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cd6:	9001      	str	r0, [sp, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f1a1 0404 	sub.w	r4, r1, #4
 8009cde:	bfb8      	it	lt
 8009ce0:	18e4      	addlt	r4, r4, r3
 8009ce2:	f000 f8ad 	bl	8009e40 <__malloc_lock>
 8009ce6:	4a20      	ldr	r2, [pc, #128]	; (8009d68 <_free_r+0x9c>)
 8009ce8:	9801      	ldr	r0, [sp, #4]
 8009cea:	6813      	ldr	r3, [r2, #0]
 8009cec:	4615      	mov	r5, r2
 8009cee:	b933      	cbnz	r3, 8009cfe <_free_r+0x32>
 8009cf0:	6063      	str	r3, [r4, #4]
 8009cf2:	6014      	str	r4, [r2, #0]
 8009cf4:	b003      	add	sp, #12
 8009cf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cfa:	f000 b8a7 	b.w	8009e4c <__malloc_unlock>
 8009cfe:	42a3      	cmp	r3, r4
 8009d00:	d90b      	bls.n	8009d1a <_free_r+0x4e>
 8009d02:	6821      	ldr	r1, [r4, #0]
 8009d04:	1862      	adds	r2, r4, r1
 8009d06:	4293      	cmp	r3, r2
 8009d08:	bf04      	itt	eq
 8009d0a:	681a      	ldreq	r2, [r3, #0]
 8009d0c:	685b      	ldreq	r3, [r3, #4]
 8009d0e:	6063      	str	r3, [r4, #4]
 8009d10:	bf04      	itt	eq
 8009d12:	1852      	addeq	r2, r2, r1
 8009d14:	6022      	streq	r2, [r4, #0]
 8009d16:	602c      	str	r4, [r5, #0]
 8009d18:	e7ec      	b.n	8009cf4 <_free_r+0x28>
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	b10b      	cbz	r3, 8009d24 <_free_r+0x58>
 8009d20:	42a3      	cmp	r3, r4
 8009d22:	d9fa      	bls.n	8009d1a <_free_r+0x4e>
 8009d24:	6811      	ldr	r1, [r2, #0]
 8009d26:	1855      	adds	r5, r2, r1
 8009d28:	42a5      	cmp	r5, r4
 8009d2a:	d10b      	bne.n	8009d44 <_free_r+0x78>
 8009d2c:	6824      	ldr	r4, [r4, #0]
 8009d2e:	4421      	add	r1, r4
 8009d30:	1854      	adds	r4, r2, r1
 8009d32:	42a3      	cmp	r3, r4
 8009d34:	6011      	str	r1, [r2, #0]
 8009d36:	d1dd      	bne.n	8009cf4 <_free_r+0x28>
 8009d38:	681c      	ldr	r4, [r3, #0]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	6053      	str	r3, [r2, #4]
 8009d3e:	4421      	add	r1, r4
 8009d40:	6011      	str	r1, [r2, #0]
 8009d42:	e7d7      	b.n	8009cf4 <_free_r+0x28>
 8009d44:	d902      	bls.n	8009d4c <_free_r+0x80>
 8009d46:	230c      	movs	r3, #12
 8009d48:	6003      	str	r3, [r0, #0]
 8009d4a:	e7d3      	b.n	8009cf4 <_free_r+0x28>
 8009d4c:	6825      	ldr	r5, [r4, #0]
 8009d4e:	1961      	adds	r1, r4, r5
 8009d50:	428b      	cmp	r3, r1
 8009d52:	bf04      	itt	eq
 8009d54:	6819      	ldreq	r1, [r3, #0]
 8009d56:	685b      	ldreq	r3, [r3, #4]
 8009d58:	6063      	str	r3, [r4, #4]
 8009d5a:	bf04      	itt	eq
 8009d5c:	1949      	addeq	r1, r1, r5
 8009d5e:	6021      	streq	r1, [r4, #0]
 8009d60:	6054      	str	r4, [r2, #4]
 8009d62:	e7c7      	b.n	8009cf4 <_free_r+0x28>
 8009d64:	b003      	add	sp, #12
 8009d66:	bd30      	pop	{r4, r5, pc}
 8009d68:	200000c0 	.word	0x200000c0

08009d6c <_malloc_r>:
 8009d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6e:	1ccd      	adds	r5, r1, #3
 8009d70:	f025 0503 	bic.w	r5, r5, #3
 8009d74:	3508      	adds	r5, #8
 8009d76:	2d0c      	cmp	r5, #12
 8009d78:	bf38      	it	cc
 8009d7a:	250c      	movcc	r5, #12
 8009d7c:	2d00      	cmp	r5, #0
 8009d7e:	4606      	mov	r6, r0
 8009d80:	db01      	blt.n	8009d86 <_malloc_r+0x1a>
 8009d82:	42a9      	cmp	r1, r5
 8009d84:	d903      	bls.n	8009d8e <_malloc_r+0x22>
 8009d86:	230c      	movs	r3, #12
 8009d88:	6033      	str	r3, [r6, #0]
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d8e:	f000 f857 	bl	8009e40 <__malloc_lock>
 8009d92:	4921      	ldr	r1, [pc, #132]	; (8009e18 <_malloc_r+0xac>)
 8009d94:	680a      	ldr	r2, [r1, #0]
 8009d96:	4614      	mov	r4, r2
 8009d98:	b99c      	cbnz	r4, 8009dc2 <_malloc_r+0x56>
 8009d9a:	4f20      	ldr	r7, [pc, #128]	; (8009e1c <_malloc_r+0xb0>)
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	b923      	cbnz	r3, 8009daa <_malloc_r+0x3e>
 8009da0:	4621      	mov	r1, r4
 8009da2:	4630      	mov	r0, r6
 8009da4:	f000 f83c 	bl	8009e20 <_sbrk_r>
 8009da8:	6038      	str	r0, [r7, #0]
 8009daa:	4629      	mov	r1, r5
 8009dac:	4630      	mov	r0, r6
 8009dae:	f000 f837 	bl	8009e20 <_sbrk_r>
 8009db2:	1c43      	adds	r3, r0, #1
 8009db4:	d123      	bne.n	8009dfe <_malloc_r+0x92>
 8009db6:	230c      	movs	r3, #12
 8009db8:	6033      	str	r3, [r6, #0]
 8009dba:	4630      	mov	r0, r6
 8009dbc:	f000 f846 	bl	8009e4c <__malloc_unlock>
 8009dc0:	e7e3      	b.n	8009d8a <_malloc_r+0x1e>
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	1b5b      	subs	r3, r3, r5
 8009dc6:	d417      	bmi.n	8009df8 <_malloc_r+0x8c>
 8009dc8:	2b0b      	cmp	r3, #11
 8009dca:	d903      	bls.n	8009dd4 <_malloc_r+0x68>
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	441c      	add	r4, r3
 8009dd0:	6025      	str	r5, [r4, #0]
 8009dd2:	e004      	b.n	8009dde <_malloc_r+0x72>
 8009dd4:	6863      	ldr	r3, [r4, #4]
 8009dd6:	42a2      	cmp	r2, r4
 8009dd8:	bf0c      	ite	eq
 8009dda:	600b      	streq	r3, [r1, #0]
 8009ddc:	6053      	strne	r3, [r2, #4]
 8009dde:	4630      	mov	r0, r6
 8009de0:	f000 f834 	bl	8009e4c <__malloc_unlock>
 8009de4:	f104 000b 	add.w	r0, r4, #11
 8009de8:	1d23      	adds	r3, r4, #4
 8009dea:	f020 0007 	bic.w	r0, r0, #7
 8009dee:	1ac2      	subs	r2, r0, r3
 8009df0:	d0cc      	beq.n	8009d8c <_malloc_r+0x20>
 8009df2:	1a1b      	subs	r3, r3, r0
 8009df4:	50a3      	str	r3, [r4, r2]
 8009df6:	e7c9      	b.n	8009d8c <_malloc_r+0x20>
 8009df8:	4622      	mov	r2, r4
 8009dfa:	6864      	ldr	r4, [r4, #4]
 8009dfc:	e7cc      	b.n	8009d98 <_malloc_r+0x2c>
 8009dfe:	1cc4      	adds	r4, r0, #3
 8009e00:	f024 0403 	bic.w	r4, r4, #3
 8009e04:	42a0      	cmp	r0, r4
 8009e06:	d0e3      	beq.n	8009dd0 <_malloc_r+0x64>
 8009e08:	1a21      	subs	r1, r4, r0
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f000 f808 	bl	8009e20 <_sbrk_r>
 8009e10:	3001      	adds	r0, #1
 8009e12:	d1dd      	bne.n	8009dd0 <_malloc_r+0x64>
 8009e14:	e7cf      	b.n	8009db6 <_malloc_r+0x4a>
 8009e16:	bf00      	nop
 8009e18:	200000c0 	.word	0x200000c0
 8009e1c:	200000c4 	.word	0x200000c4

08009e20 <_sbrk_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	4d06      	ldr	r5, [pc, #24]	; (8009e3c <_sbrk_r+0x1c>)
 8009e24:	2300      	movs	r3, #0
 8009e26:	4604      	mov	r4, r0
 8009e28:	4608      	mov	r0, r1
 8009e2a:	602b      	str	r3, [r5, #0]
 8009e2c:	f7f7 ff82 	bl	8001d34 <_sbrk>
 8009e30:	1c43      	adds	r3, r0, #1
 8009e32:	d102      	bne.n	8009e3a <_sbrk_r+0x1a>
 8009e34:	682b      	ldr	r3, [r5, #0]
 8009e36:	b103      	cbz	r3, 8009e3a <_sbrk_r+0x1a>
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	bd38      	pop	{r3, r4, r5, pc}
 8009e3c:	20000940 	.word	0x20000940

08009e40 <__malloc_lock>:
 8009e40:	4801      	ldr	r0, [pc, #4]	; (8009e48 <__malloc_lock+0x8>)
 8009e42:	f000 b809 	b.w	8009e58 <__retarget_lock_acquire_recursive>
 8009e46:	bf00      	nop
 8009e48:	20000948 	.word	0x20000948

08009e4c <__malloc_unlock>:
 8009e4c:	4801      	ldr	r0, [pc, #4]	; (8009e54 <__malloc_unlock+0x8>)
 8009e4e:	f000 b804 	b.w	8009e5a <__retarget_lock_release_recursive>
 8009e52:	bf00      	nop
 8009e54:	20000948 	.word	0x20000948

08009e58 <__retarget_lock_acquire_recursive>:
 8009e58:	4770      	bx	lr

08009e5a <__retarget_lock_release_recursive>:
 8009e5a:	4770      	bx	lr

08009e5c <_init>:
 8009e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5e:	bf00      	nop
 8009e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e62:	bc08      	pop	{r3}
 8009e64:	469e      	mov	lr, r3
 8009e66:	4770      	bx	lr

08009e68 <_fini>:
 8009e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6a:	bf00      	nop
 8009e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e6e:	bc08      	pop	{r3}
 8009e70:	469e      	mov	lr, r3
 8009e72:	4770      	bx	lr
