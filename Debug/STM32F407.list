
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800abcc  0800abcc  0001abcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b058  0800b058  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b058  0800b058  0001b058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b060  0800b060  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b060  0800b060  0001b060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b064  0800b064  0001b064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800b068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000984  2000009c  0800b104  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  0800b104  00020a20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023c5c  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c38  00000000  00000000  00043d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  00048960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001710  00000000  00000000  0004a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cd2  00000000  00000000  0004b950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c3e  00000000  00000000  00071622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4f02  00000000  00000000  00094260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00169162  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aa0  00000000  00000000  001691b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800abb4 	.word	0x0800abb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	0800abb4 	.word	0x0800abb4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b089      	sub	sp, #36	; 0x24
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4604      	mov	r4, r0
 80004c8:	4608      	mov	r0, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	461a      	mov	r2, r3
 80004ce:	4623      	mov	r3, r4
 80004d0:	71fb      	strb	r3, [r7, #7]
 80004d2:	4603      	mov	r3, r0
 80004d4:	80bb      	strh	r3, [r7, #4]
 80004d6:	460b      	mov	r3, r1
 80004d8:	71bb      	strb	r3, [r7, #6]
 80004da:	4613      	mov	r3, r2
 80004dc:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80004e2:	7dfb      	ldrb	r3, [r7, #23]
 80004e4:	2b1f      	cmp	r3, #31
 80004e6:	d902      	bls.n	80004ee <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 80004e8:	7dfb      	ldrb	r3, [r7, #23]
 80004ea:	3b20      	subs	r3, #32
 80004ec:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80004ee:	2300      	movs	r3, #0
 80004f0:	753b      	strb	r3, [r7, #20]
 80004f2:	e012      	b.n	800051a <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 80004f4:	7dfa      	ldrb	r2, [r7, #23]
 80004f6:	7d38      	ldrb	r0, [r7, #20]
 80004f8:	7d39      	ldrb	r1, [r7, #20]
 80004fa:	4c3b      	ldr	r4, [pc, #236]	; (80005e8 <ILI9341_Draw_Char+0x128>)
 80004fc:	4613      	mov	r3, r2
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	4413      	add	r3, r2
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	4423      	add	r3, r4
 8000506:	4403      	add	r3, r0
 8000508:	781a      	ldrb	r2, [r3, #0]
 800050a:	f107 0318 	add.w	r3, r7, #24
 800050e:	440b      	add	r3, r1
 8000510:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000514:	7d3b      	ldrb	r3, [r7, #20]
 8000516:	3301      	adds	r3, #1
 8000518:	753b      	strb	r3, [r7, #20]
 800051a:	7d3b      	ldrb	r3, [r7, #20]
 800051c:	2b05      	cmp	r3, #5
 800051e:	d9e9      	bls.n	80004f4 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	b299      	uxth	r1, r3
 8000524:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000526:	461a      	mov	r2, r3
 8000528:	0052      	lsls	r2, r2, #1
 800052a:	4413      	add	r3, r2
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	b29a      	uxth	r2, r3
 8000530:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	b29c      	uxth	r4, r3
 8000536:	88b8      	ldrh	r0, [r7, #4]
 8000538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	4623      	mov	r3, r4
 800053e:	f000 fc37 	bl	8000db0 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000542:	2300      	movs	r3, #0
 8000544:	757b      	strb	r3, [r7, #21]
 8000546:	e046      	b.n	80005d6 <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000548:	2300      	movs	r3, #0
 800054a:	75bb      	strb	r3, [r7, #22]
 800054c:	e03d      	b.n	80005ca <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 800054e:	7d7b      	ldrb	r3, [r7, #21]
 8000550:	f107 0218 	add.w	r2, r7, #24
 8000554:	4413      	add	r3, r2
 8000556:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800055a:	461a      	mov	r2, r3
 800055c:	7dbb      	ldrb	r3, [r7, #22]
 800055e:	fa42 f303 	asr.w	r3, r2, r3
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	2b00      	cmp	r3, #0
 8000568:	d02c      	beq.n	80005c4 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 800056a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800056c:	2b01      	cmp	r3, #1
 800056e:	d10f      	bne.n	8000590 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000570:	7d7b      	ldrb	r3, [r7, #21]
 8000572:	b29a      	uxth	r2, r3
 8000574:	88bb      	ldrh	r3, [r7, #4]
 8000576:	4413      	add	r3, r2
 8000578:	b298      	uxth	r0, r3
 800057a:	79bb      	ldrb	r3, [r7, #6]
 800057c:	b29a      	uxth	r2, r3
 800057e:	7dbb      	ldrb	r3, [r7, #22]
 8000580:	b29b      	uxth	r3, r3
 8000582:	4413      	add	r3, r2
 8000584:	b29b      	uxth	r3, r3
 8000586:	887a      	ldrh	r2, [r7, #2]
 8000588:	4619      	mov	r1, r3
 800058a:	f000 fb49 	bl	8000c20 <ILI9341_Draw_Pixel>
 800058e:	e019      	b.n	80005c4 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000590:	7d7b      	ldrb	r3, [r7, #21]
 8000592:	b29b      	uxth	r3, r3
 8000594:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000596:	fb12 f303 	smulbb	r3, r2, r3
 800059a:	b29a      	uxth	r2, r3
 800059c:	88bb      	ldrh	r3, [r7, #4]
 800059e:	4413      	add	r3, r2
 80005a0:	b298      	uxth	r0, r3
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	7dbb      	ldrb	r3, [r7, #22]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80005ac:	fb11 f303 	smulbb	r3, r1, r3
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	4413      	add	r3, r2
 80005b4:	b299      	uxth	r1, r3
 80005b6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80005b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80005ba:	887b      	ldrh	r3, [r7, #2]
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4623      	mov	r3, r4
 80005c0:	f000 fbf6 	bl	8000db0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80005c4:	7dbb      	ldrb	r3, [r7, #22]
 80005c6:	3301      	adds	r3, #1
 80005c8:	75bb      	strb	r3, [r7, #22]
 80005ca:	7dbb      	ldrb	r3, [r7, #22]
 80005cc:	2b07      	cmp	r3, #7
 80005ce:	d9be      	bls.n	800054e <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 80005d0:	7d7b      	ldrb	r3, [r7, #21]
 80005d2:	3301      	adds	r3, #1
 80005d4:	757b      	strb	r3, [r7, #21]
 80005d6:	7d7b      	ldrb	r3, [r7, #21]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d9b5      	bls.n	8000548 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	371c      	adds	r7, #28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd90      	pop	{r4, r7, pc}
 80005e6:	bf00      	nop
 80005e8:	0800aca8 	.word	0x0800aca8

080005ec <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b087      	sub	sp, #28
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	4608      	mov	r0, r1
 80005f6:	4611      	mov	r1, r2
 80005f8:	461a      	mov	r2, r3
 80005fa:	4603      	mov	r3, r0
 80005fc:	817b      	strh	r3, [r7, #10]
 80005fe:	460b      	mov	r3, r1
 8000600:	727b      	strb	r3, [r7, #9]
 8000602:	4613      	mov	r3, r2
 8000604:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8000606:	e016      	b.n	8000636 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	60fa      	str	r2, [r7, #12]
 800060e:	7818      	ldrb	r0, [r3, #0]
 8000610:	88fc      	ldrh	r4, [r7, #6]
 8000612:	7a7a      	ldrb	r2, [r7, #9]
 8000614:	8979      	ldrh	r1, [r7, #10]
 8000616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	8c3b      	ldrh	r3, [r7, #32]
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	4623      	mov	r3, r4
 8000620:	f7ff ff4e 	bl	80004c0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000624:	8c3b      	ldrh	r3, [r7, #32]
 8000626:	461a      	mov	r2, r3
 8000628:	0052      	lsls	r2, r2, #1
 800062a:	4413      	add	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	b29a      	uxth	r2, r3
 8000630:	897b      	ldrh	r3, [r7, #10]
 8000632:	4413      	add	r3, r2
 8000634:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1e4      	bne.n	8000608 <ILI9341_Draw_Text+0x1c>
    }
}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bd90      	pop	{r4, r7, pc}

08000648 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <ILI9341_SPI_Init+0x14>)
 8000652:	f002 fb29 	bl	8002ca8 <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800066a:	1df9      	adds	r1, r7, #7
 800066c:	2301      	movs	r3, #1
 800066e:	2201      	movs	r2, #1
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <ILI9341_SPI_Send+0x20>)
 8000672:	f005 fce8 	bl	8006046 <HAL_SPI_Transmit>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000150 	.word	0x20000150

08000684 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2110      	movs	r1, #16
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <ILI9341_Write_Command+0x38>)
 8000694:	f002 fb08 	bl	8002ca8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000698:	2200      	movs	r2, #0
 800069a:	2140      	movs	r1, #64	; 0x40
 800069c:	4807      	ldr	r0, [pc, #28]	; (80006bc <ILI9341_Write_Command+0x38>)
 800069e:	f002 fb03 	bl	8002ca8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ffdb 	bl	8000660 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80006aa:	2201      	movs	r2, #1
 80006ac:	2110      	movs	r1, #16
 80006ae:	4803      	ldr	r0, [pc, #12]	; (80006bc <ILI9341_Write_Command+0x38>)
 80006b0:	f002 fafa 	bl	8002ca8 <HAL_GPIO_WritePin>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000

080006c0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80006ca:	2201      	movs	r2, #1
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	480a      	ldr	r0, [pc, #40]	; (80006f8 <ILI9341_Write_Data+0x38>)
 80006d0:	f002 faea 	bl	8002ca8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2110      	movs	r1, #16
 80006d8:	4807      	ldr	r0, [pc, #28]	; (80006f8 <ILI9341_Write_Data+0x38>)
 80006da:	f002 fae5 	bl	8002ca8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ffbd 	bl	8000660 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2110      	movs	r1, #16
 80006ea:	4803      	ldr	r0, [pc, #12]	; (80006f8 <ILI9341_Write_Data+0x38>)
 80006ec:	f002 fadc 	bl	8002ca8 <HAL_GPIO_WritePin>
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000

080006fc <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4604      	mov	r4, r0
 8000704:	4608      	mov	r0, r1
 8000706:	4611      	mov	r1, r2
 8000708:	461a      	mov	r2, r3
 800070a:	4623      	mov	r3, r4
 800070c:	80fb      	strh	r3, [r7, #6]
 800070e:	4603      	mov	r3, r0
 8000710:	80bb      	strh	r3, [r7, #4]
 8000712:	460b      	mov	r3, r1
 8000714:	807b      	strh	r3, [r7, #2]
 8000716:	4613      	mov	r3, r2
 8000718:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800071a:	202a      	movs	r0, #42	; 0x2a
 800071c:	f7ff ffb2 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000720:	88fb      	ldrh	r3, [r7, #6]
 8000722:	0a1b      	lsrs	r3, r3, #8
 8000724:	b29b      	uxth	r3, r3
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ffc9 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ffc4 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000738:	887b      	ldrh	r3, [r7, #2]
 800073a:	0a1b      	lsrs	r3, r3, #8
 800073c:	b29b      	uxth	r3, r3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ffbd 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000746:	887b      	ldrh	r3, [r7, #2]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ffb8 	bl	80006c0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000750:	202b      	movs	r0, #43	; 0x2b
 8000752:	f7ff ff97 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000756:	88bb      	ldrh	r3, [r7, #4]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	b29b      	uxth	r3, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ffae 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ffa9 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800076e:	883b      	ldrh	r3, [r7, #0]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	b29b      	uxth	r3, r3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffa2 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800077c:	883b      	ldrh	r3, [r7, #0]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff9d 	bl	80006c0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000786:	202c      	movs	r0, #44	; 0x2c
 8000788:	f7ff ff7c 	bl	8000684 <ILI9341_Write_Command>
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bd90      	pop	{r4, r7, pc}

08000794 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2120      	movs	r1, #32
 800079c:	480a      	ldr	r0, [pc, #40]	; (80007c8 <ILI9341_Reset+0x34>)
 800079e:	f002 fa83 	bl	8002ca8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80007a2:	20c8      	movs	r0, #200	; 0xc8
 80007a4:	f001 ff96 	bl	80026d4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2110      	movs	r1, #16
 80007ac:	4806      	ldr	r0, [pc, #24]	; (80007c8 <ILI9341_Reset+0x34>)
 80007ae:	f002 fa7b 	bl	8002ca8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80007b2:	20c8      	movs	r0, #200	; 0xc8
 80007b4:	f001 ff8e 	bl	80026d4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80007b8:	2201      	movs	r2, #1
 80007ba:	2120      	movs	r1, #32
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <ILI9341_Reset+0x34>)
 80007be:	f002 fa73 	bl	8002ca8 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000

080007cc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80007da:	2036      	movs	r0, #54	; 0x36
 80007dc:	f7ff ff52 	bl	8000684 <ILI9341_Write_Command>
HAL_Delay(1);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f001 ff77 	bl	80026d4 <HAL_Delay>
	
switch(screen_rotation) 
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	2b03      	cmp	r3, #3
 80007ea:	d837      	bhi.n	800085c <ILI9341_Set_Rotation+0x90>
 80007ec:	a201      	add	r2, pc, #4	; (adr r2, 80007f4 <ILI9341_Set_Rotation+0x28>)
 80007ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f2:	bf00      	nop
 80007f4:	08000805 	.word	0x08000805
 80007f8:	0800081b 	.word	0x0800081b
 80007fc:	08000831 	.word	0x08000831
 8000800:	08000847 	.word	0x08000847
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000804:	2048      	movs	r0, #72	; 0x48
 8000806:	f7ff ff5b 	bl	80006c0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <ILI9341_Set_Rotation+0x9c>)
 800080c:	22f0      	movs	r2, #240	; 0xf0
 800080e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <ILI9341_Set_Rotation+0xa0>)
 8000812:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000816:	801a      	strh	r2, [r3, #0]
			break;
 8000818:	e021      	b.n	800085e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800081a:	2028      	movs	r0, #40	; 0x28
 800081c:	f7ff ff50 	bl	80006c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <ILI9341_Set_Rotation+0x9c>)
 8000822:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000826:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <ILI9341_Set_Rotation+0xa0>)
 800082a:	22f0      	movs	r2, #240	; 0xf0
 800082c:	801a      	strh	r2, [r3, #0]
			break;
 800082e:	e016      	b.n	800085e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000830:	2088      	movs	r0, #136	; 0x88
 8000832:	f7ff ff45 	bl	80006c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <ILI9341_Set_Rotation+0x9c>)
 8000838:	22f0      	movs	r2, #240	; 0xf0
 800083a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <ILI9341_Set_Rotation+0xa0>)
 800083e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000842:	801a      	strh	r2, [r3, #0]
			break;
 8000844:	e00b      	b.n	800085e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000846:	20e8      	movs	r0, #232	; 0xe8
 8000848:	f7ff ff3a 	bl	80006c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <ILI9341_Set_Rotation+0x9c>)
 800084e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000852:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <ILI9341_Set_Rotation+0xa0>)
 8000856:	22f0      	movs	r2, #240	; 0xf0
 8000858:	801a      	strh	r2, [r3, #0]
			break;
 800085a:	e000      	b.n	800085e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800085c:	bf00      	nop
	}
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000002 	.word	0x20000002
 800086c:	20000000 	.word	0x20000000

08000870 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2120      	movs	r1, #32
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <ILI9341_Enable+0x14>)
 800087a:	f002 fa15 	bl	8002ca8 <HAL_GPIO_WritePin>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000

08000888 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800088c:	f7ff fff0 	bl	8000870 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000890:	f7ff feda 	bl	8000648 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000894:	f7ff ff7e 	bl	8000794 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000898:	2001      	movs	r0, #1
 800089a:	f7ff fef3 	bl	8000684 <ILI9341_Write_Command>
HAL_Delay(1000);
 800089e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a2:	f001 ff17 	bl	80026d4 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80008a6:	20cb      	movs	r0, #203	; 0xcb
 80008a8:	f7ff feec 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80008ac:	2039      	movs	r0, #57	; 0x39
 80008ae:	f7ff ff07 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80008b2:	202c      	movs	r0, #44	; 0x2c
 80008b4:	f7ff ff04 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff ff01 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80008be:	2034      	movs	r0, #52	; 0x34
 80008c0:	f7ff fefe 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80008c4:	2002      	movs	r0, #2
 80008c6:	f7ff fefb 	bl	80006c0 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80008ca:	20cf      	movs	r0, #207	; 0xcf
 80008cc:	f7ff feda 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80008d0:	2000      	movs	r0, #0
 80008d2:	f7ff fef5 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80008d6:	20c1      	movs	r0, #193	; 0xc1
 80008d8:	f7ff fef2 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80008dc:	2030      	movs	r0, #48	; 0x30
 80008de:	f7ff feef 	bl	80006c0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80008e2:	20e8      	movs	r0, #232	; 0xe8
 80008e4:	f7ff fece 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80008e8:	2085      	movs	r0, #133	; 0x85
 80008ea:	f7ff fee9 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff fee6 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80008f4:	2078      	movs	r0, #120	; 0x78
 80008f6:	f7ff fee3 	bl	80006c0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80008fa:	20ea      	movs	r0, #234	; 0xea
 80008fc:	f7ff fec2 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fedd 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff feda 	bl	80006c0 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800090c:	20ed      	movs	r0, #237	; 0xed
 800090e:	f7ff feb9 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000912:	2064      	movs	r0, #100	; 0x64
 8000914:	f7ff fed4 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000918:	2003      	movs	r0, #3
 800091a:	f7ff fed1 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800091e:	2012      	movs	r0, #18
 8000920:	f7ff fece 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000924:	2081      	movs	r0, #129	; 0x81
 8000926:	f7ff fecb 	bl	80006c0 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800092a:	20f7      	movs	r0, #247	; 0xf7
 800092c:	f7ff feaa 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000930:	2020      	movs	r0, #32
 8000932:	f7ff fec5 	bl	80006c0 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000936:	20c0      	movs	r0, #192	; 0xc0
 8000938:	f7ff fea4 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800093c:	2023      	movs	r0, #35	; 0x23
 800093e:	f7ff febf 	bl	80006c0 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000942:	20c1      	movs	r0, #193	; 0xc1
 8000944:	f7ff fe9e 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000948:	2010      	movs	r0, #16
 800094a:	f7ff feb9 	bl	80006c0 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800094e:	20c5      	movs	r0, #197	; 0xc5
 8000950:	f7ff fe98 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000954:	203e      	movs	r0, #62	; 0x3e
 8000956:	f7ff feb3 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800095a:	2028      	movs	r0, #40	; 0x28
 800095c:	f7ff feb0 	bl	80006c0 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000960:	20c7      	movs	r0, #199	; 0xc7
 8000962:	f7ff fe8f 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000966:	2086      	movs	r0, #134	; 0x86
 8000968:	f7ff feaa 	bl	80006c0 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 800096c:	2036      	movs	r0, #54	; 0x36
 800096e:	f7ff fe89 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000972:	2048      	movs	r0, #72	; 0x48
 8000974:	f7ff fea4 	bl	80006c0 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000978:	203a      	movs	r0, #58	; 0x3a
 800097a:	f7ff fe83 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800097e:	2055      	movs	r0, #85	; 0x55
 8000980:	f7ff fe9e 	bl	80006c0 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000984:	20b1      	movs	r0, #177	; 0xb1
 8000986:	f7ff fe7d 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fe98 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000990:	2018      	movs	r0, #24
 8000992:	f7ff fe95 	bl	80006c0 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000996:	20b6      	movs	r0, #182	; 0xb6
 8000998:	f7ff fe74 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 800099c:	2008      	movs	r0, #8
 800099e:	f7ff fe8f 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80009a2:	2082      	movs	r0, #130	; 0x82
 80009a4:	f7ff fe8c 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80009a8:	2027      	movs	r0, #39	; 0x27
 80009aa:	f7ff fe89 	bl	80006c0 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80009ae:	20f2      	movs	r0, #242	; 0xf2
 80009b0:	f7ff fe68 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff fe83 	bl	80006c0 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80009ba:	2026      	movs	r0, #38	; 0x26
 80009bc:	f7ff fe62 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80009c0:	2001      	movs	r0, #1
 80009c2:	f7ff fe7d 	bl	80006c0 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80009c6:	20e0      	movs	r0, #224	; 0xe0
 80009c8:	f7ff fe5c 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80009cc:	200f      	movs	r0, #15
 80009ce:	f7ff fe77 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80009d2:	2031      	movs	r0, #49	; 0x31
 80009d4:	f7ff fe74 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80009d8:	202b      	movs	r0, #43	; 0x2b
 80009da:	f7ff fe71 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80009de:	200c      	movs	r0, #12
 80009e0:	f7ff fe6e 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80009e4:	200e      	movs	r0, #14
 80009e6:	f7ff fe6b 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80009ea:	2008      	movs	r0, #8
 80009ec:	f7ff fe68 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80009f0:	204e      	movs	r0, #78	; 0x4e
 80009f2:	f7ff fe65 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80009f6:	20f1      	movs	r0, #241	; 0xf1
 80009f8:	f7ff fe62 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80009fc:	2037      	movs	r0, #55	; 0x37
 80009fe:	f7ff fe5f 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000a02:	2007      	movs	r0, #7
 8000a04:	f7ff fe5c 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000a08:	2010      	movs	r0, #16
 8000a0a:	f7ff fe59 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000a0e:	2003      	movs	r0, #3
 8000a10:	f7ff fe56 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000a14:	200e      	movs	r0, #14
 8000a16:	f7ff fe53 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000a1a:	2009      	movs	r0, #9
 8000a1c:	f7ff fe50 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fe4d 	bl	80006c0 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000a26:	20e1      	movs	r0, #225	; 0xe1
 8000a28:	f7ff fe2c 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff fe47 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000a32:	200e      	movs	r0, #14
 8000a34:	f7ff fe44 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000a38:	2014      	movs	r0, #20
 8000a3a:	f7ff fe41 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000a3e:	2003      	movs	r0, #3
 8000a40:	f7ff fe3e 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000a44:	2011      	movs	r0, #17
 8000a46:	f7ff fe3b 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f7ff fe38 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000a50:	2031      	movs	r0, #49	; 0x31
 8000a52:	f7ff fe35 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000a56:	20c1      	movs	r0, #193	; 0xc1
 8000a58:	f7ff fe32 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000a5c:	2048      	movs	r0, #72	; 0x48
 8000a5e:	f7ff fe2f 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000a62:	2008      	movs	r0, #8
 8000a64:	f7ff fe2c 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000a68:	200f      	movs	r0, #15
 8000a6a:	f7ff fe29 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000a6e:	200c      	movs	r0, #12
 8000a70:	f7ff fe26 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000a74:	2031      	movs	r0, #49	; 0x31
 8000a76:	f7ff fe23 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000a7a:	2036      	movs	r0, #54	; 0x36
 8000a7c:	f7ff fe20 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000a80:	200f      	movs	r0, #15
 8000a82:	f7ff fe1d 	bl	80006c0 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000a86:	2011      	movs	r0, #17
 8000a88:	f7ff fdfc 	bl	8000684 <ILI9341_Write_Command>
HAL_Delay(120);
 8000a8c:	2078      	movs	r0, #120	; 0x78
 8000a8e:	f001 fe21 	bl	80026d4 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000a92:	2029      	movs	r0, #41	; 0x29
 8000a94:	f7ff fdf6 	bl	8000684 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f7ff fe97 	bl	80007cc <ILI9341_Set_Rotation>

HAL_Delay(10);
 8000a9e:	200a      	movs	r0, #10
 8000aa0:	f001 fe18 	bl	80026d4 <HAL_Delay>
//
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000aa8:	b5b0      	push	{r4, r5, r7, lr}
 8000aaa:	b08c      	sub	sp, #48	; 0x30
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	80fb      	strh	r3, [r7, #6]
 8000ab4:	466b      	mov	r3, sp
 8000ab6:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ac4:	d202      	bcs.n	8000acc <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8000aca:	e002      	b.n	8000ad2 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000acc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	483d      	ldr	r0, [pc, #244]	; (8000bcc <ILI9341_Draw_Colour_Burst+0x124>)
 8000ad8:	f002 f8e6 	bl	8002ca8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2110      	movs	r1, #16
 8000ae0:	483a      	ldr	r0, [pc, #232]	; (8000bcc <ILI9341_Draw_Colour_Burst+0x124>)
 8000ae2:	f002 f8e1 	bl	8002ca8 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000af0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000af2:	4623      	mov	r3, r4
 8000af4:	3b01      	subs	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	4620      	mov	r0, r4
 8000afa:	f04f 0100 	mov.w	r1, #0
 8000afe:	f04f 0200 	mov.w	r2, #0
 8000b02:	f04f 0300 	mov.w	r3, #0
 8000b06:	00cb      	lsls	r3, r1, #3
 8000b08:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b0c:	00c2      	lsls	r2, r0, #3
 8000b0e:	4620      	mov	r0, r4
 8000b10:	f04f 0100 	mov.w	r1, #0
 8000b14:	f04f 0200 	mov.w	r2, #0
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	00cb      	lsls	r3, r1, #3
 8000b1e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b22:	00c2      	lsls	r2, r0, #3
 8000b24:	1de3      	adds	r3, r4, #7
 8000b26:	08db      	lsrs	r3, r3, #3
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	ebad 0d03 	sub.w	sp, sp, r3
 8000b2e:	466b      	mov	r3, sp
 8000b30:	3300      	adds	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b38:	e00e      	b.n	8000b58 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3e:	4413      	add	r3, r2
 8000b40:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000b44:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b48:	3301      	adds	r3, #1
 8000b4a:	88fa      	ldrh	r2, [r7, #6]
 8000b4c:	b2d1      	uxtb	r1, r2
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b54:	3302      	adds	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d3ec      	bcc.n	8000b3a <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000b66:	697a      	ldr	r2, [r7, #20]
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b74:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b7a:	fb01 f202 	mul.w	r2, r1, r2
 8000b7e:	1a9b      	subs	r3, r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d010      	beq.n	8000baa <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b8c:	e009      	b.n	8000ba2 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000b8e:	69b9      	ldr	r1, [r7, #24]
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	230a      	movs	r3, #10
 8000b96:	480e      	ldr	r0, [pc, #56]	; (8000bd0 <ILI9341_Draw_Colour_Burst+0x128>)
 8000b98:	f005 fa55 	bl	8006046 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d3f1      	bcc.n	8000b8e <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000baa:	69b9      	ldr	r1, [r7, #24]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <ILI9341_Draw_Colour_Burst+0x128>)
 8000bb4:	f005 fa47 	bl	8006046 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2110      	movs	r1, #16
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <ILI9341_Draw_Colour_Burst+0x124>)
 8000bbe:	f002 f873 	bl	8002ca8 <HAL_GPIO_WritePin>
 8000bc2:	46ad      	mov	sp, r5
}
 8000bc4:	bf00      	nop
 8000bc6:	3730      	adds	r7, #48	; 0x30
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bdb0      	pop	{r4, r5, r7, pc}
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	20000150 	.word	0x20000150

08000bd4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <ILI9341_Fill_Screen+0x44>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <ILI9341_Fill_Screen+0x48>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fd85 	bl	80006fc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <ILI9341_Fill_Screen+0x44>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <ILI9341_Fill_Screen+0x48>)
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	fb03 f302 	mul.w	r3, r3, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff4c 	bl	8000aa8 <ILI9341_Draw_Colour_Burst>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000002 	.word	0x20000002
 8000c1c:	20000000 	.word	0x20000000

08000c20 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	80bb      	strh	r3, [r7, #4]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000c32:	4b5b      	ldr	r3, [pc, #364]	; (8000da0 <ILI9341_Draw_Pixel+0x180>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	88fa      	ldrh	r2, [r7, #6]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	f080 80ac 	bcs.w	8000d98 <ILI9341_Draw_Pixel+0x178>
 8000c40:	4b58      	ldr	r3, [pc, #352]	; (8000da4 <ILI9341_Draw_Pixel+0x184>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	88ba      	ldrh	r2, [r7, #4]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	f080 80a5 	bcs.w	8000d98 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2140      	movs	r1, #64	; 0x40
 8000c52:	4855      	ldr	r0, [pc, #340]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000c54:	f002 f828 	bl	8002ca8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	4852      	ldr	r0, [pc, #328]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000c5e:	f002 f823 	bl	8002ca8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000c62:	202a      	movs	r0, #42	; 0x2a
 8000c64:	f7ff fcfc 	bl	8000660 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2140      	movs	r1, #64	; 0x40
 8000c6c:	484e      	ldr	r0, [pc, #312]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000c6e:	f002 f81b 	bl	8002ca8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000c72:	2201      	movs	r2, #1
 8000c74:	2110      	movs	r1, #16
 8000c76:	484c      	ldr	r0, [pc, #304]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000c78:	f002 f816 	bl	8002ca8 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4849      	ldr	r0, [pc, #292]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000c82:	f002 f811 	bl	8002ca8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	753b      	strb	r3, [r7, #20]
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	757b      	strb	r3, [r7, #21]
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	121b      	asrs	r3, r3, #8
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	75bb      	strb	r3, [r7, #22]
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000caa:	f107 0114 	add.w	r1, r7, #20
 8000cae:	2301      	movs	r3, #1
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	483e      	ldr	r0, [pc, #248]	; (8000dac <ILI9341_Draw_Pixel+0x18c>)
 8000cb4:	f005 f9c7 	bl	8006046 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2110      	movs	r1, #16
 8000cbc:	483a      	ldr	r0, [pc, #232]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000cbe:	f001 fff3 	bl	8002ca8 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2140      	movs	r1, #64	; 0x40
 8000cc6:	4838      	ldr	r0, [pc, #224]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000cc8:	f001 ffee 	bl	8002ca8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2110      	movs	r1, #16
 8000cd0:	4835      	ldr	r0, [pc, #212]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000cd2:	f001 ffe9 	bl	8002ca8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000cd6:	202b      	movs	r0, #43	; 0x2b
 8000cd8:	f7ff fcc2 	bl	8000660 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2140      	movs	r1, #64	; 0x40
 8000ce0:	4831      	ldr	r0, [pc, #196]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000ce2:	f001 ffe1 	bl	8002ca8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2110      	movs	r1, #16
 8000cea:	482f      	ldr	r0, [pc, #188]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000cec:	f001 ffdc 	bl	8002ca8 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	482c      	ldr	r0, [pc, #176]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000cf6:	f001 ffd7 	bl	8002ca8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000cfa:	88bb      	ldrh	r3, [r7, #4]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	743b      	strb	r3, [r7, #16]
 8000d04:	88bb      	ldrh	r3, [r7, #4]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	747b      	strb	r3, [r7, #17]
 8000d0a:	88bb      	ldrh	r3, [r7, #4]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	121b      	asrs	r3, r3, #8
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	74bb      	strb	r3, [r7, #18]
 8000d14:	88bb      	ldrh	r3, [r7, #4]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	3301      	adds	r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000d1e:	f107 0110 	add.w	r1, r7, #16
 8000d22:	2301      	movs	r3, #1
 8000d24:	2204      	movs	r2, #4
 8000d26:	4821      	ldr	r0, [pc, #132]	; (8000dac <ILI9341_Draw_Pixel+0x18c>)
 8000d28:	f005 f98d 	bl	8006046 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2110      	movs	r1, #16
 8000d30:	481d      	ldr	r0, [pc, #116]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d32:	f001 ffb9 	bl	8002ca8 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000d36:	2200      	movs	r2, #0
 8000d38:	2140      	movs	r1, #64	; 0x40
 8000d3a:	481b      	ldr	r0, [pc, #108]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d3c:	f001 ffb4 	bl	8002ca8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000d40:	2200      	movs	r2, #0
 8000d42:	2110      	movs	r1, #16
 8000d44:	4818      	ldr	r0, [pc, #96]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d46:	f001 ffaf 	bl	8002ca8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000d4a:	202c      	movs	r0, #44	; 0x2c
 8000d4c:	f7ff fc88 	bl	8000660 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000d50:	2201      	movs	r2, #1
 8000d52:	2140      	movs	r1, #64	; 0x40
 8000d54:	4814      	ldr	r0, [pc, #80]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d56:	f001 ffa7 	bl	8002ca8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	4812      	ldr	r0, [pc, #72]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d60:	f001 ffa2 	bl	8002ca8 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2110      	movs	r1, #16
 8000d68:	480f      	ldr	r0, [pc, #60]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d6a:	f001 ff9d 	bl	8002ca8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	733b      	strb	r3, [r7, #12]
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000d7e:	f107 010c 	add.w	r1, r7, #12
 8000d82:	2301      	movs	r3, #1
 8000d84:	2202      	movs	r2, #2
 8000d86:	4809      	ldr	r0, [pc, #36]	; (8000dac <ILI9341_Draw_Pixel+0x18c>)
 8000d88:	f005 f95d 	bl	8006046 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d92:	f001 ff89 	bl	8002ca8 <HAL_GPIO_WritePin>
 8000d96:	e000      	b.n	8000d9a <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000d98:	bf00      	nop
	
}
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000002 	.word	0x20000002
 8000da4:	20000000 	.word	0x20000000
 8000da8:	40021000 	.word	0x40021000
 8000dac:	20000150 	.word	0x20000150

08000db0 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4604      	mov	r4, r0
 8000db8:	4608      	mov	r0, r1
 8000dba:	4611      	mov	r1, r2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4623      	mov	r3, r4
 8000dc0:	80fb      	strh	r3, [r7, #6]
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	80bb      	strh	r3, [r7, #4]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	807b      	strh	r3, [r7, #2]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <ILI9341_Draw_Rectangle+0xb0>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	88fa      	ldrh	r2, [r7, #6]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d23d      	bcs.n	8000e56 <ILI9341_Draw_Rectangle+0xa6>
 8000dda:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <ILI9341_Draw_Rectangle+0xb4>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	88ba      	ldrh	r2, [r7, #4]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d237      	bcs.n	8000e56 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8000de6:	88fa      	ldrh	r2, [r7, #6]
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a1c      	ldr	r2, [pc, #112]	; (8000e60 <ILI9341_Draw_Rectangle+0xb0>)
 8000dee:	8812      	ldrh	r2, [r2, #0]
 8000df0:	b292      	uxth	r2, r2
 8000df2:	4293      	cmp	r3, r2
 8000df4:	dd05      	ble.n	8000e02 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <ILI9341_Draw_Rectangle+0xb0>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8000e02:	88ba      	ldrh	r2, [r7, #4]
 8000e04:	883b      	ldrh	r3, [r7, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <ILI9341_Draw_Rectangle+0xb4>)
 8000e0a:	8812      	ldrh	r2, [r2, #0]
 8000e0c:	b292      	uxth	r2, r2
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	dd05      	ble.n	8000e1e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <ILI9341_Draw_Rectangle+0xb4>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	88bb      	ldrh	r3, [r7, #4]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8000e1e:	88fa      	ldrh	r2, [r7, #6]
 8000e20:	887b      	ldrh	r3, [r7, #2]
 8000e22:	4413      	add	r3, r2
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b29c      	uxth	r4, r3
 8000e2a:	88ba      	ldrh	r2, [r7, #4]
 8000e2c:	883b      	ldrh	r3, [r7, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	3b01      	subs	r3, #1
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	88b9      	ldrh	r1, [r7, #4]
 8000e38:	88f8      	ldrh	r0, [r7, #6]
 8000e3a:	4622      	mov	r2, r4
 8000e3c:	f7ff fc5e 	bl	80006fc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8000e40:	883b      	ldrh	r3, [r7, #0]
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	fb02 f303 	mul.w	r3, r2, r3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	8b3b      	ldrh	r3, [r7, #24]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fe2a 	bl	8000aa8 <ILI9341_Draw_Colour_Burst>
 8000e54:	e000      	b.n	8000e58 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000e56:	bf00      	nop
}
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd90      	pop	{r4, r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000002 	.word	0x20000002
 8000e64:	20000000 	.word	0x20000000

08000e68 <menu>:
uint8_t k =0;
//uint8_t p =0;
//void print_sign(p);

void menu()
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
	Menu_SetGenericWriteCallback(Generic_Write);  //передача показника на Generic_Write функцію  point in Menu_SetGenericWriteCallback
 8000e6e:	482c      	ldr	r0, [pc, #176]	; (8000f20 <menu+0xb8>)
 8000e70:	f000 f9f6 	bl	8001260 <Menu_SetGenericWriteCallback>

	//print_all_top_menu();
	Menu_Navigate(&Menu_1);
 8000e74:	482b      	ldr	r0, [pc, #172]	; (8000f24 <menu+0xbc>)
 8000e76:	f000 f9c5 	bl	8001204 <Menu_Navigate>
//	print_sign(p);
//	Menu_Navigate(&Menu_2);
//	Menu_Navigate(&Menu_3);
	while (1)
	  {
	   uint8_t pressed_key = getPressKey();
 8000e7a:	f000 f8fb 	bl	8001074 <getPressKey>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]

	   if (pressed_key != BUTTON_NOTHING && !flagPressed)
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	2bff      	cmp	r3, #255	; 0xff
 8000e86:	d03e      	beq.n	8000f06 <menu+0x9e>
 8000e88:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <menu+0xc0>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	f083 0301 	eor.w	r3, r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d037      	beq.n	8000f06 <menu+0x9e>
	   {
			flagPressed = true;
 8000e96:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <menu+0xc0>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
			switch(pressed_key)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d82f      	bhi.n	8000f02 <menu+0x9a>
 8000ea2:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <menu+0x40>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000ebd 	.word	0x08000ebd
 8000eac:	08000ecd 	.word	0x08000ecd
 8000eb0:	08000edd 	.word	0x08000edd
 8000eb4:	08000eed 	.word	0x08000eed
 8000eb8:	08000efd 	.word	0x08000efd
			{
			 case BUTTON_LEFT:
			  Menu_Navigate(MENU_PARENT);	// Перейти на MENU_PARENT
 8000ebc:	f000 f996 	bl	80011ec <Menu_GetCurrentMenu>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f99d 	bl	8001204 <Menu_Navigate>
			  break;
 8000eca:	e01b      	b.n	8000f04 <menu+0x9c>
			 case BUTTON_UP:
//			  print_sign(p);
//			  p = p - 20;
			  Menu_Navigate(MENU_PREVIOUS);  // Перейти на MENU_PREVIOUS
 8000ecc:	f000 f98e 	bl	80011ec <Menu_GetCurrentMenu>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f995 	bl	8001204 <Menu_Navigate>
			  break;
 8000eda:	e013      	b.n	8000f04 <menu+0x9c>
//			  p = p + 20;
//			  if(p <= 100)
//			  {
//				  p=60;
//			  }
			  Menu_Navigate(MENU_NEXT);      // Перейти на MENU_NEXT
 8000edc:	f000 f986 	bl	80011ec <Menu_GetCurrentMenu>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f98d 	bl	8001204 <Menu_Navigate>
			  break;
 8000eea:	e00b      	b.n	8000f04 <menu+0x9c>
			 case BUTTON_RIGHT:
			  Menu_Navigate(MENU_CHILD);
 8000eec:	f000 f97e 	bl	80011ec <Menu_GetCurrentMenu>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f985 	bl	8001204 <Menu_Navigate>
			  break;
 8000efa:	e003      	b.n	8000f04 <menu+0x9c>
			 case BUTTON_SELECT:
			  Menu_EnterCurrentItem();
 8000efc:	f000 f9c4 	bl	8001288 <Menu_EnterCurrentItem>
			  break;
 8000f00:	e000      	b.n	8000f04 <menu+0x9c>
			 default:
			  break;
 8000f02:	bf00      	nop
			switch(pressed_key)
 8000f04:	e00b      	b.n	8000f1e <menu+0xb6>
			}
	   }
	   else if (getPressKey() == BUTTON_NOTHING && flagPressed)
 8000f06:	f000 f8b5 	bl	8001074 <getPressKey>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2bff      	cmp	r3, #255	; 0xff
 8000f0e:	d1b4      	bne.n	8000e7a <menu+0x12>
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <menu+0xc0>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0b0      	beq.n	8000e7a <menu+0x12>
	   {
		   flagPressed = false;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <menu+0xc0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
	  {
 8000f1e:	e7ac      	b.n	8000e7a <menu+0x12>
 8000f20:	080011a5 	.word	0x080011a5
 8000f24:	0800af00 	.word	0x0800af00
 8000f28:	200000bc 	.word	0x200000bc

08000f2c <RED_LED_ON>:
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------
void RED_LED_ON(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f36:	4802      	ldr	r0, [pc, #8]	; (8000f40 <RED_LED_ON+0x14>)
 8000f38:	f001 feb6 	bl	8002ca8 <HAL_GPIO_WritePin>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40020c00 	.word	0x40020c00

08000f44 <RED_LED_OFF>:
// -----------------------------------------------------------------------
void RED_LED_OFF(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f4e:	4802      	ldr	r0, [pc, #8]	; (8000f58 <RED_LED_OFF+0x14>)
 8000f50:	f001 feaa 	bl	8002ca8 <HAL_GPIO_WritePin>
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40020c00 	.word	0x40020c00

08000f5c <Level1Item3_Enter>:
// -----------------------------------------------------------------------
static void Level1Item3_Enter(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af02      	add	r7, sp, #8
 bool flagPressed = false;
 8000f62:	2300      	movs	r3, #0
 8000f64:	71fb      	strb	r3, [r7, #7]

 ILI9341_Draw_Text( "                          ", 10, 60, WHITE, 2, BLACK);   // Clearn lcd
 8000f66:	2300      	movs	r3, #0
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f72:	223c      	movs	r2, #60	; 0x3c
 8000f74:	210a      	movs	r1, #10
 8000f76:	4838      	ldr	r0, [pc, #224]	; (8001058 <Level1Item3_Enter+0xfc>)
 8000f78:	f7ff fb38 	bl	80005ec <ILI9341_Draw_Text>

 ILI9341_Draw_Text( "Red LED is:", 10, 60, WHITE, 2, BLACK);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	2302      	movs	r3, #2
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f88:	223c      	movs	r2, #60	; 0x3c
 8000f8a:	210a      	movs	r1, #10
 8000f8c:	4833      	ldr	r0, [pc, #204]	; (800105c <Level1Item3_Enter+0x100>)
 8000f8e:	f7ff fb2d 	bl	80005ec <ILI9341_Draw_Text>

 while(getPressKey() != BUTTON_LEFT)
 8000f92:	e049      	b.n	8001028 <Level1Item3_Enter+0xcc>
 {
	 // Read PIN
	 int led_status =  HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14);
 8000f94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f98:	4831      	ldr	r0, [pc, #196]	; (8001060 <Level1Item3_Enter+0x104>)
 8000f9a:	f001 fe6d 	bl	8002c78 <HAL_GPIO_ReadPin>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	603b      	str	r3, [r7, #0]

	 if(flagPressed == true)
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d019      	beq.n	8000fdc <Level1Item3_Enter+0x80>
	 {
		 if(led_status == GPIO_PIN_SET)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d10b      	bne.n	8000fc6 <Level1Item3_Enter+0x6a>
		 {
			 ILI9341_Draw_Text( "ON ", 150, 60, WHITE, 2, BLACK);
 8000fae:	2300      	movs	r3, #0
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fba:	223c      	movs	r2, #60	; 0x3c
 8000fbc:	2196      	movs	r1, #150	; 0x96
 8000fbe:	4829      	ldr	r0, [pc, #164]	; (8001064 <Level1Item3_Enter+0x108>)
 8000fc0:	f7ff fb14 	bl	80005ec <ILI9341_Draw_Text>
 8000fc4:	e00a      	b.n	8000fdc <Level1Item3_Enter+0x80>
		 }
		 else
		 {
		 	 ILI9341_Draw_Text( "OFF", 150, 60, WHITE, 2, BLACK);
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	2302      	movs	r3, #2
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd2:	223c      	movs	r2, #60	; 0x3c
 8000fd4:	2196      	movs	r1, #150	; 0x96
 8000fd6:	4824      	ldr	r0, [pc, #144]	; (8001068 <Level1Item3_Enter+0x10c>)
 8000fd8:	f7ff fb08 	bl	80005ec <ILI9341_Draw_Text>
		 }
	 }


	 if(getPressKey() != BUTTON_NOTHING && !flagPressed)
 8000fdc:	f000 f84a 	bl	8001074 <getPressKey>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2bff      	cmp	r3, #255	; 0xff
 8000fe4:	d016      	beq.n	8001014 <Level1Item3_Enter+0xb8>
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f083 0301 	eor.w	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d010      	beq.n	8001014 <Level1Item3_Enter+0xb8>
	 {
		 flagPressed = true;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	71fb      	strb	r3, [r7, #7]

		 switch(getPressKey())  // If press any key
 8000ff6:	f000 f83d 	bl	8001074 <getPressKey>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d002      	beq.n	8001006 <Level1Item3_Enter+0xaa>
 8001000:	2b02      	cmp	r3, #2
 8001002:	d003      	beq.n	800100c <Level1Item3_Enter+0xb0>
	  	  		  break;
	  	  	  case BUTTON_DOWN:
	  	  		  RED_LED_OFF();
	  	  		  break;
	  	  	  default:
	  	  		  break;
 8001004:	e005      	b.n	8001012 <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_ON();
 8001006:	f7ff ff91 	bl	8000f2c <RED_LED_ON>
	  	  		  break;
 800100a:	e002      	b.n	8001012 <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_OFF();
 800100c:	f7ff ff9a 	bl	8000f44 <RED_LED_OFF>
	  	  		  break;
 8001010:	bf00      	nop
		 switch(getPressKey())  // If press any key
 8001012:	e009      	b.n	8001028 <Level1Item3_Enter+0xcc>
		 }
	 }
	 else if(getPressKey() == BUTTON_NOTHING && flagPressed)
 8001014:	f000 f82e 	bl	8001074 <getPressKey>
 8001018:	4603      	mov	r3, r0
 800101a:	2bff      	cmp	r3, #255	; 0xff
 800101c:	d104      	bne.n	8001028 <Level1Item3_Enter+0xcc>
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <Level1Item3_Enter+0xcc>
	 {
		 flagPressed = false; 	// if button was release
 8001024:	2300      	movs	r3, #0
 8001026:	71fb      	strb	r3, [r7, #7]
 while(getPressKey() != BUTTON_LEFT)
 8001028:	f000 f824 	bl	8001074 <getPressKey>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1b0      	bne.n	8000f94 <Level1Item3_Enter+0x38>
	 }
 }

 ILI9341_Draw_Text( "                           ", 10, 60, WHITE, 2, BLACK); // Cleaning one row LCD
 8001032:	2300      	movs	r3, #0
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	2302      	movs	r3, #2
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800103e:	223c      	movs	r2, #60	; 0x3c
 8001040:	210a      	movs	r1, #10
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <Level1Item3_Enter+0x110>)
 8001044:	f7ff fad2 	bl	80005ec <ILI9341_Draw_Text>
 Menu_Navigate(&Menu_3);  // Back to menu 3
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <Level1Item3_Enter+0x114>)
 800104a:	f000 f8db 	bl	8001204 <Menu_Navigate>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	0800abcc 	.word	0x0800abcc
 800105c:	0800abe8 	.word	0x0800abe8
 8001060:	40020c00 	.word	0x40020c00
 8001064:	0800abf4 	.word	0x0800abf4
 8001068:	0800abf8 	.word	0x0800abf8
 800106c:	0800abfc 	.word	0x0800abfc
 8001070:	0800af40 	.word	0x0800af40

08001074 <getPressKey>:
// -----------------------------------------------------------------------
static uint8_t getPressKey()		// 3x4 keyboard
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af02      	add	r7, sp, #8
	char digit = '\0';
 800107a:	2300      	movs	r3, #0
 800107c:	75fb      	strb	r3, [r7, #23]
	char buff_lcd[20] = "KEY: ";
 800107e:	4a48      	ldr	r2, [pc, #288]	; (80011a0 <getPressKey+0x12c>)
 8001080:	463b      	mov	r3, r7
 8001082:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001086:	6018      	str	r0, [r3, #0]
 8001088:	3304      	adds	r3, #4
 800108a:	8019      	strh	r1, [r3, #0]
 800108c:	1dbb      	adds	r3, r7, #6
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	819a      	strh	r2, [r3, #12]
	digit = read_one_digit_from_keyboard();
 8001098:	f000 f96e 	bl	8001378 <read_one_digit_from_keyboard>
 800109c:	4603      	mov	r3, r0
 800109e:	75fb      	strb	r3, [r7, #23]
	switch(digit)
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	3b32      	subs	r3, #50	; 0x32
 80010a4:	2b06      	cmp	r3, #6
 80010a6:	d875      	bhi.n	8001194 <getPressKey+0x120>
 80010a8:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <getPressKey+0x3c>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	080010f5 	.word	0x080010f5
 80010b4:	08001195 	.word	0x08001195
 80010b8:	080010cd 	.word	0x080010cd
 80010bc:	0800116d 	.word	0x0800116d
 80010c0:	08001145 	.word	0x08001145
 80010c4:	08001195 	.word	0x08001195
 80010c8:	0800111d 	.word	0x0800111d
	{
		case '4':
		{
			strncat(buff_lcd, &digit, 1);
 80010cc:	f107 0117 	add.w	r1, r7, #23
 80010d0:	463b      	mov	r3, r7
 80010d2:	2201      	movs	r2, #1
 80010d4:	4618      	mov	r0, r3
 80010d6:	f009 fd4b 	bl	800ab70 <strncat>
			ILI9341_Draw_Text( buff_lcd, 10, 180, WHITE, 2, BLACK);
 80010da:	4638      	mov	r0, r7
 80010dc:	2300      	movs	r3, #0
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	2302      	movs	r3, #2
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e8:	22b4      	movs	r2, #180	; 0xb4
 80010ea:	210a      	movs	r1, #10
 80010ec:	f7ff fa7e 	bl	80005ec <ILI9341_Draw_Text>
			return BUTTON_LEFT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e050      	b.n	8001196 <getPressKey+0x122>
		}
		case '2':
		{
			strncat(buff_lcd, &digit, 1);
 80010f4:	f107 0117 	add.w	r1, r7, #23
 80010f8:	463b      	mov	r3, r7
 80010fa:	2201      	movs	r2, #1
 80010fc:	4618      	mov	r0, r3
 80010fe:	f009 fd37 	bl	800ab70 <strncat>
			ILI9341_Draw_Text( buff_lcd, 10, 180, WHITE, 2, BLACK);
 8001102:	4638      	mov	r0, r7
 8001104:	2300      	movs	r3, #0
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	2302      	movs	r3, #2
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001110:	22b4      	movs	r2, #180	; 0xb4
 8001112:	210a      	movs	r1, #10
 8001114:	f7ff fa6a 	bl	80005ec <ILI9341_Draw_Text>
			return BUTTON_UP;
 8001118:	2301      	movs	r3, #1
 800111a:	e03c      	b.n	8001196 <getPressKey+0x122>
		}
		case '8':
		{
			strncat(buff_lcd, &digit, 1);
 800111c:	f107 0117 	add.w	r1, r7, #23
 8001120:	463b      	mov	r3, r7
 8001122:	2201      	movs	r2, #1
 8001124:	4618      	mov	r0, r3
 8001126:	f009 fd23 	bl	800ab70 <strncat>
			ILI9341_Draw_Text( buff_lcd, 10, 180, WHITE, 2, BLACK);
 800112a:	4638      	mov	r0, r7
 800112c:	2300      	movs	r3, #0
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	2302      	movs	r3, #2
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001138:	22b4      	movs	r2, #180	; 0xb4
 800113a:	210a      	movs	r1, #10
 800113c:	f7ff fa56 	bl	80005ec <ILI9341_Draw_Text>
			return BUTTON_DOWN;
 8001140:	2302      	movs	r3, #2
 8001142:	e028      	b.n	8001196 <getPressKey+0x122>
		}
		case '6':
		{
			strncat(buff_lcd, &digit, 1);
 8001144:	f107 0117 	add.w	r1, r7, #23
 8001148:	463b      	mov	r3, r7
 800114a:	2201      	movs	r2, #1
 800114c:	4618      	mov	r0, r3
 800114e:	f009 fd0f 	bl	800ab70 <strncat>
			ILI9341_Draw_Text( buff_lcd, 10, 180, WHITE, 2, BLACK);
 8001152:	4638      	mov	r0, r7
 8001154:	2300      	movs	r3, #0
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	2302      	movs	r3, #2
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001160:	22b4      	movs	r2, #180	; 0xb4
 8001162:	210a      	movs	r1, #10
 8001164:	f7ff fa42 	bl	80005ec <ILI9341_Draw_Text>
			return BUTTON_RIGHT;
 8001168:	2303      	movs	r3, #3
 800116a:	e014      	b.n	8001196 <getPressKey+0x122>
		}
		case '5':
		{
			strncat(buff_lcd, &digit, 1);
 800116c:	f107 0117 	add.w	r1, r7, #23
 8001170:	463b      	mov	r3, r7
 8001172:	2201      	movs	r2, #1
 8001174:	4618      	mov	r0, r3
 8001176:	f009 fcfb 	bl	800ab70 <strncat>
			ILI9341_Draw_Text( buff_lcd, 10, 180, WHITE, 2, BLACK);
 800117a:	4638      	mov	r0, r7
 800117c:	2300      	movs	r3, #0
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	2302      	movs	r3, #2
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001188:	22b4      	movs	r2, #180	; 0xb4
 800118a:	210a      	movs	r1, #10
 800118c:	f7ff fa2e 	bl	80005ec <ILI9341_Draw_Text>
			return BUTTON_SELECT;
 8001190:	2304      	movs	r3, #4
 8001192:	e000      	b.n	8001196 <getPressKey+0x122>
		}
		default:
			return BUTTON_NOTHING;
 8001194:	23ff      	movs	r3, #255	; 0xff
			break;


	}
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	0800ac18 	.word	0x0800ac18

080011a4 <Generic_Write>:
// -----------------------------------------------------------------------
void Generic_Write(const char* Text)		// Print "Text" data on LCD
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	6078      	str	r0, [r7, #4]
	if (Text)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d015      	beq.n	80011de <Generic_Write+0x3a>
	{
		ILI9341_Draw_Text( "                   ", 10, 60, WHITE, 2, BLACK);
 80011b2:	2300      	movs	r3, #0
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	2302      	movs	r3, #2
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011be:	223c      	movs	r2, #60	; 0x3c
 80011c0:	210a      	movs	r1, #10
 80011c2:	4809      	ldr	r0, [pc, #36]	; (80011e8 <Generic_Write+0x44>)
 80011c4:	f7ff fa12 	bl	80005ec <ILI9341_Draw_Text>
		ILI9341_Draw_Text( Text, 10, 60, WHITE, 2, BLACK);
 80011c8:	2300      	movs	r3, #0
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	2302      	movs	r3, #2
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011d4:	223c      	movs	r2, #60	; 0x3c
 80011d6:	210a      	movs	r1, #10
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff fa07 	bl	80005ec <ILI9341_Draw_Text>
	}
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	0800ac2c 	.word	0x0800ac2c

080011ec <Menu_GetCurrentMenu>:
// -----------------------------------------------------------------------
Menu_Item_t* Menu_GetCurrentMenu(void)		// Повертає поточни вибраний пункт меню
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	return CurrentMenuItem;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <Menu_GetCurrentMenu+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000004 	.word	0x20000004

08001204 <Menu_Navigate>:
// -----------------------------------------------------------------------
// Переходи по меню
// in: ПОказник на апсолютний пункт меню, для вибору
// MENU_PARENT, MENU_CHILD, MENU_NEXT або  MENU_PREVIOUS
void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))  // What it mean???
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a11      	ldr	r2, [pc, #68]	; (8001254 <Menu_Navigate+0x50>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d01a      	beq.n	800124a <Menu_Navigate+0x46>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d017      	beq.n	800124a <Menu_Navigate+0x46>
	{
		return;		// Exit
	}

	CurrentMenuItem = NewMenu;    // Передане маню стає вибране
 800121a:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <Menu_Navigate+0x54>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6013      	str	r3, [r2, #0]

	if (MenuWriteFunc)    // If   MenuWriteFunc  != NULL  ???????
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <Menu_Navigate+0x58>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d006      	beq.n	8001236 <Menu_Navigate+0x32>
	{
		MenuWriteFunc(CurrentMenuItem->Text);			// Print Text string on LCD
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <Menu_Navigate+0x58>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <Menu_Navigate+0x54>)
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	3218      	adds	r2, #24
 8001232:	4610      	mov	r0, r2
 8001234:	4798      	blx	r3
	}

	//   void (*SelectCallback)(void) - Creating pointer on function
	// Write  CurrentMenuItem->SelectCallback in  void (*SelectCallback)(void) pinter
	void (*SelectCallback)(void) = CurrentMenuItem->SelectCallback;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <Menu_Navigate+0x54>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	60fb      	str	r3, [r7, #12]

	if (SelectCallback)		// If SelectCallback != NULL
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <Menu_Navigate+0x48>
	{
		SelectCallback();   // It does - CurrentMenuItem->SelectCallback;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4798      	blx	r3
 8001248:	e000      	b.n	800124c <Menu_Navigate+0x48>
		return;		// Exit
 800124a:	bf00      	nop
	}
}
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	0800aee8 	.word	0x0800aee8
 8001258:	20000004 	.word	0x20000004
 800125c:	200000b8 	.word	0x200000b8

08001260 <Menu_SetGenericWriteCallback>:
 пунктів меню. В рамках цієї функції зворотного виклику користувач повинен
 реалізувати код для відображення поточного тексту меню, що зберігається
 в  ref MENU_ITEM_STORAGE пам'яті.. */
// In: вказівник на функцію зворотного виклику для виконання кожного вибраного пункту меню.
void Menu_SetGenericWriteCallback(void (*WriteFunc)(const char* Text))    //  What doing this function??????? <<<<<<<<<<<
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	MenuWriteFunc = WriteFunc;  		// Запис показника функції WriteFunc в
 8001268:	4a05      	ldr	r2, [pc, #20]	; (8001280 <Menu_SetGenericWriteCallback+0x20>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
	//  показник на функцію під назвою MenuWriteFunc
	Menu_Navigate(CurrentMenuItem);      // Передача цього показника в функцію Menu_Navigate
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <Menu_SetGenericWriteCallback+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ffc6 	bl	8001204 <Menu_Navigate>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200000b8 	.word	0x200000b8
 8001284:	20000004 	.word	0x20000004

08001288 <Menu_EnterCurrentItem>:
// -----------------------------------------------------------------------
/* Функція входить у вибраний на даний момент пункт меню, виконуючи налаштовану
   функцію зворотного дзвінка (якщо така є) */
void Menu_EnterCurrentItem(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
	if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <Menu_EnterCurrentItem+0x34>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <Menu_EnterCurrentItem+0x38>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d00d      	beq.n	80012b4 <Menu_EnterCurrentItem+0x2c>
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <Menu_EnterCurrentItem+0x34>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d009      	beq.n	80012b4 <Menu_EnterCurrentItem+0x2c>
	{
		return;
	}

	void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <Menu_EnterCurrentItem+0x34>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	607b      	str	r3, [r7, #4]
	if (EnterCallback)		// If EnterCallback != NULL
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <Menu_EnterCurrentItem+0x2e>
	{
		EnterCallback();
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4798      	blx	r3
 80012b2:	e000      	b.n	80012b6 <Menu_EnterCurrentItem+0x2e>
		return;
 80012b4:	bf00      	nop
	}

}// -----------------------------------------------------------------------
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000004 	.word	0x20000004
 80012c0:	0800aee8 	.word	0x0800aee8

080012c4 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
	char digith = 0;;
 80012ca:	2300      	movs	r3, #0
 80012cc:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 80012ce:	f000 f853 	bl	8001378 <read_one_digit_from_keyboard>
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b23      	cmp	r3, #35	; 0x23
 80012da:	d10a      	bne.n	80012f2 <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 80012dc:	221e      	movs	r2, #30
 80012de:	2100      	movs	r1, #0
 80012e0:	4824      	ldr	r0, [pc, #144]	; (8001374 <read_digits+0xb0>)
 80012e2:	f009 fb83 	bl	800a9ec <memset>
		keyboard.read_digits_position = 0;
 80012e6:	4b23      	ldr	r3, [pc, #140]	; (8001374 <read_digits+0xb0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <read_digits+0xb0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b2a      	cmp	r3, #42	; 0x2a
 80012f6:	d109      	bne.n	800130c <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <read_digits+0xb0>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <read_digits+0xb0>)
 8001302:	2200      	movs	r2, #0
 8001304:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <read_digits+0xb0>)
 8001308:	2200      	movs	r2, #0
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d028      	beq.n	8001364 <read_digits+0xa0>
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b23      	cmp	r3, #35	; 0x23
 8001316:	d025      	beq.n	8001364 <read_digits+0xa0>
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2b2a      	cmp	r3, #42	; 0x2a
 800131c:	d022      	beq.n	8001364 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <read_digits+0xb0>)
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	4a14      	ldr	r2, [pc, #80]	; (8001374 <read_digits+0xb0>)
 8001324:	7f92      	ldrb	r2, [r2, #30]
 8001326:	4293      	cmp	r3, r2
 8001328:	dc11      	bgt.n	800134e <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <read_digits+0xb0>)
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	4911      	ldr	r1, [pc, #68]	; (8001374 <read_digits+0xb0>)
 8001330:	79fa      	ldrb	r2, [r7, #7]
 8001332:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <read_digits+0xb0>)
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	3301      	adds	r3, #1
 800133a:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <read_digits+0xb0>)
 800133c:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <read_digits+0xb0>)
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <read_digits+0xb0>)
 8001348:	2201      	movs	r2, #1
 800134a:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800134c:	e00e      	b.n	800136c <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <read_digits+0xb0>)
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <read_digits+0xb0>)
 8001358:	2200      	movs	r2, #0
 800135a:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <read_digits+0xb0>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8001362:	e003      	b.n	800136c <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <read_digits+0xb0>)
 8001366:	2200      	movs	r2, #0
 8001368:	77da      	strb	r2, [r3, #31]
	}
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200000d4 	.word	0x200000d4

08001378 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
	char digit = '\0';
 800137e:	2300      	movs	r3, #0
 8001380:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001388:	48cf      	ldr	r0, [pc, #828]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 800138a:	f001 fc8d 	bl	8002ca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001394:	48cc      	ldr	r0, [pc, #816]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 8001396:	f001 fc87 	bl	8002ca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a0:	48c9      	ldr	r0, [pc, #804]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80013a2:	f001 fc81 	bl	8002ca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ac:	48c6      	ldr	r0, [pc, #792]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80013ae:	f001 fc7b 	bl	8002ca8 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80013b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b6:	48c5      	ldr	r0, [pc, #788]	; (80016cc <read_one_digit_from_keyboard+0x354>)
 80013b8:	f001 fc5e 	bl	8002c78 <HAL_GPIO_ReadPin>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d169      	bne.n	8001496 <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013c8:	48bf      	ldr	r0, [pc, #764]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80013ca:	f001 fc6d 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d4:	48bc      	ldr	r0, [pc, #752]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80013d6:	f001 fc67 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e0:	48b9      	ldr	r0, [pc, #740]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80013e2:	f001 fc61 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ec:	48b6      	ldr	r0, [pc, #728]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80013ee:	f001 fc5b 	bl	8002ca8 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80013f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f6:	48b5      	ldr	r0, [pc, #724]	; (80016cc <read_one_digit_from_keyboard+0x354>)
 80013f8:	f001 fc3e 	bl	8002c78 <HAL_GPIO_ReadPin>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 8001402:	2331      	movs	r3, #49	; 0x31
 8001404:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8001406:	2201      	movs	r2, #1
 8001408:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800140c:	48ae      	ldr	r0, [pc, #696]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 800140e:	f001 fc4b 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001418:	48ab      	ldr	r0, [pc, #684]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 800141a:	f001 fc45 	bl	8002ca8 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800141e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001422:	48aa      	ldr	r0, [pc, #680]	; (80016cc <read_one_digit_from_keyboard+0x354>)
 8001424:	f001 fc28 	bl	8002c78 <HAL_GPIO_ReadPin>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 800142e:	2334      	movs	r3, #52	; 0x34
 8001430:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001438:	48a3      	ldr	r0, [pc, #652]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 800143a:	f001 fc35 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001444:	48a0      	ldr	r0, [pc, #640]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 8001446:	f001 fc2f 	bl	8002ca8 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800144a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800144e:	489f      	ldr	r0, [pc, #636]	; (80016cc <read_one_digit_from_keyboard+0x354>)
 8001450:	f001 fc12 	bl	8002c78 <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 800145a:	2337      	movs	r3, #55	; 0x37
 800145c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001464:	4898      	ldr	r0, [pc, #608]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 8001466:	f001 fc1f 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001470:	4895      	ldr	r0, [pc, #596]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 8001472:	f001 fc19 	bl	8002ca8 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8001476:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800147a:	4894      	ldr	r0, [pc, #592]	; (80016cc <read_one_digit_from_keyboard+0x354>)
 800147c:	f001 fbfc 	bl	8002c78 <HAL_GPIO_ReadPin>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 8001486:	232a      	movs	r3, #42	; 0x2a
 8001488:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001490:	488d      	ldr	r0, [pc, #564]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 8001492:	f001 fc09 	bl	8002ca8 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800149c:	488a      	ldr	r0, [pc, #552]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 800149e:	f001 fc03 	bl	8002ca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a8:	4887      	ldr	r0, [pc, #540]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80014aa:	f001 fbfd 	bl	8002ca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b4:	4884      	ldr	r0, [pc, #528]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80014b6:	f001 fbf7 	bl	8002ca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c0:	4881      	ldr	r0, [pc, #516]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80014c2:	f001 fbf1 	bl	8002ca8 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 80014c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ca:	4880      	ldr	r0, [pc, #512]	; (80016cc <read_one_digit_from_keyboard+0x354>)
 80014cc:	f001 fbd4 	bl	8002c78 <HAL_GPIO_ReadPin>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d169      	bne.n	80015aa <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014dc:	487a      	ldr	r0, [pc, #488]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80014de:	f001 fbe3 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014e8:	4877      	ldr	r0, [pc, #476]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80014ea:	f001 fbdd 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f4:	4874      	ldr	r0, [pc, #464]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80014f6:	f001 fbd7 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001500:	4871      	ldr	r0, [pc, #452]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 8001502:	f001 fbd1 	bl	8002ca8 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001506:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800150a:	4870      	ldr	r0, [pc, #448]	; (80016cc <read_one_digit_from_keyboard+0x354>)
 800150c:	f001 fbb4 	bl	8002c78 <HAL_GPIO_ReadPin>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 8001516:	2332      	movs	r3, #50	; 0x32
 8001518:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001520:	4869      	ldr	r0, [pc, #420]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 8001522:	f001 fbc1 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152c:	4866      	ldr	r0, [pc, #408]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 800152e:	f001 fbbb 	bl	8002ca8 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001532:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001536:	4865      	ldr	r0, [pc, #404]	; (80016cc <read_one_digit_from_keyboard+0x354>)
 8001538:	f001 fb9e 	bl	8002c78 <HAL_GPIO_ReadPin>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 8001542:	2335      	movs	r3, #53	; 0x35
 8001544:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154c:	485e      	ldr	r0, [pc, #376]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 800154e:	f001 fbab 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001558:	485b      	ldr	r0, [pc, #364]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 800155a:	f001 fba5 	bl	8002ca8 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800155e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001562:	485a      	ldr	r0, [pc, #360]	; (80016cc <read_one_digit_from_keyboard+0x354>)
 8001564:	f001 fb88 	bl	8002c78 <HAL_GPIO_ReadPin>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 800156e:	2338      	movs	r3, #56	; 0x38
 8001570:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001572:	2201      	movs	r2, #1
 8001574:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001578:	4853      	ldr	r0, [pc, #332]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 800157a:	f001 fb95 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001584:	4850      	ldr	r0, [pc, #320]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 8001586:	f001 fb8f 	bl	8002ca8 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800158a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800158e:	484f      	ldr	r0, [pc, #316]	; (80016cc <read_one_digit_from_keyboard+0x354>)
 8001590:	f001 fb72 	bl	8002c78 <HAL_GPIO_ReadPin>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 800159a:	2330      	movs	r3, #48	; 0x30
 800159c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a4:	4848      	ldr	r0, [pc, #288]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80015a6:	f001 fb7f 	bl	8002ca8 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b0:	4845      	ldr	r0, [pc, #276]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80015b2:	f001 fb79 	bl	8002ca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015bc:	4842      	ldr	r0, [pc, #264]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80015be:	f001 fb73 	bl	8002ca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c8:	483f      	ldr	r0, [pc, #252]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80015ca:	f001 fb6d 	bl	8002ca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d4:	483c      	ldr	r0, [pc, #240]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80015d6:	f001 fb67 	bl	8002ca8 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №
 80015da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015de:	483b      	ldr	r0, [pc, #236]	; (80016cc <read_one_digit_from_keyboard+0x354>)
 80015e0:	f001 fb4a 	bl	8002c78 <HAL_GPIO_ReadPin>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d169      	bne.n	80016be <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f0:	4835      	ldr	r0, [pc, #212]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80015f2:	f001 fb59 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015fc:	4832      	ldr	r0, [pc, #200]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80015fe:	f001 fb53 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001602:	2201      	movs	r2, #1
 8001604:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001608:	482f      	ldr	r0, [pc, #188]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 800160a:	f001 fb4d 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800160e:	2201      	movs	r2, #1
 8001610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001614:	482c      	ldr	r0, [pc, #176]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 8001616:	f001 fb47 	bl	8002ca8 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800161a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800161e:	482b      	ldr	r0, [pc, #172]	; (80016cc <read_one_digit_from_keyboard+0x354>)
 8001620:	f001 fb2a 	bl	8002c78 <HAL_GPIO_ReadPin>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 800162a:	2333      	movs	r3, #51	; 0x33
 800162c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 800162e:	2201      	movs	r2, #1
 8001630:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001634:	4824      	ldr	r0, [pc, #144]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 8001636:	f001 fb37 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001640:	4821      	ldr	r0, [pc, #132]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 8001642:	f001 fb31 	bl	8002ca8 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001646:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800164a:	4820      	ldr	r0, [pc, #128]	; (80016cc <read_one_digit_from_keyboard+0x354>)
 800164c:	f001 fb14 	bl	8002c78 <HAL_GPIO_ReadPin>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 8001656:	2336      	movs	r3, #54	; 0x36
 8001658:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800165a:	2201      	movs	r2, #1
 800165c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001660:	4819      	ldr	r0, [pc, #100]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 8001662:	f001 fb21 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166c:	4816      	ldr	r0, [pc, #88]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 800166e:	f001 fb1b 	bl	8002ca8 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001672:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001676:	4815      	ldr	r0, [pc, #84]	; (80016cc <read_one_digit_from_keyboard+0x354>)
 8001678:	f001 fafe 	bl	8002c78 <HAL_GPIO_ReadPin>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 8001682:	2339      	movs	r3, #57	; 0x39
 8001684:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001686:	2201      	movs	r2, #1
 8001688:	f44f 7100 	mov.w	r1, #512	; 0x200
 800168c:	480e      	ldr	r0, [pc, #56]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 800168e:	f001 fb0b 	bl	8002ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001698:	480b      	ldr	r0, [pc, #44]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 800169a:	f001 fb05 	bl	8002ca8 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800169e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a2:	480a      	ldr	r0, [pc, #40]	; (80016cc <read_one_digit_from_keyboard+0x354>)
 80016a4:	f001 fae8 	bl	8002c78 <HAL_GPIO_ReadPin>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 80016ae:	2323      	movs	r3, #35	; 0x23
 80016b0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80016b2:	2201      	movs	r2, #1
 80016b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b8:	4803      	ldr	r0, [pc, #12]	; (80016c8 <read_one_digit_from_keyboard+0x350>)
 80016ba:	f001 faf5 	bl	8002ca8 <HAL_GPIO_WritePin>
	}
	return digit;
 80016be:	79fb      	ldrb	r3, [r7, #7]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40020c00 	.word	0x40020c00
 80016cc:	40020400 	.word	0x40020400

080016d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d6:	f000 ff8b 	bl	80025f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016da:	f000 f839 	bl	8001750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016de:	f000 fabd 	bl	8001c5c <MX_GPIO_Init>
  MX_I2S3_Init();
 80016e2:	f000 f8f1 	bl	80018c8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80016e6:	f000 f933 	bl	8001950 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80016ea:	f008 fe3d 	bl	800a368 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80016ee:	f000 f9f3 	bl	8001ad8 <MX_TIM2_Init>
  MX_SPI2_Init();
 80016f2:	f000 f963 	bl	80019bc <MX_SPI2_Init>
  MX_RNG_Init();
 80016f6:	f000 f917 	bl	8001928 <MX_RNG_Init>
  MX_TIM3_Init();
 80016fa:	f000 fa3b 	bl	8001b74 <MX_TIM3_Init>
  MX_TIM1_Init();
 80016fe:	f000 f993 	bl	8001a28 <MX_TIM1_Init>
  MX_I2C3_Init();
 8001702:	f000 f8b3 	bl	800186c <MX_I2C3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001706:	f000 f8a5 	bl	8001854 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 800170a:	f7ff f8bd 	bl	8000888 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 800170e:	2000      	movs	r0, #0
 8001710:	f7ff fa60 	bl	8000bd4 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 8001714:	2003      	movs	r0, #3
 8001716:	f7ff f859 	bl	80007cc <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff fa5a 	bl	8000bd4 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 8001720:	2364      	movs	r3, #100	; 0x64
 8001722:	607b      	str	r3, [r7, #4]
  //speed_test_LCD(number_of_tests);

  ILI9341_Fill_Screen(BLACK);
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff fa55 	bl	8000bd4 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 800172a:	4807      	ldr	r0, [pc, #28]	; (8001748 <main+0x78>)
 800172c:	f004 fee2 	bl	80064f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001730:	2100      	movs	r1, #0
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <main+0x78>)
 8001734:	f004 ff4e 	bl	80065d4 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <main+0x7c>)
 800173a:	220a      	movs	r2, #10
 800173c:	779a      	strb	r2, [r3, #30]
  ////////////////////////////////////////////////////
  while (1)
  {
	  /////////////////////////////////////////////////////////////////

	 menu();
 800173e:	f7ff fb93 	bl	8000e68 <menu>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001742:	f008 fe37 	bl	800a3b4 <MX_USB_HOST_Process>
	 menu();
 8001746:	e7fa      	b.n	800173e <main+0x6e>
 8001748:	200001a8 	.word	0x200001a8
 800174c:	200000d4 	.word	0x200000d4

08001750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b098      	sub	sp, #96	; 0x60
 8001754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001756:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800175a:	2230      	movs	r2, #48	; 0x30
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f009 f944 	bl	800a9ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	4b31      	ldr	r3, [pc, #196]	; (800184c <SystemClock_Config+0xfc>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a30      	ldr	r2, [pc, #192]	; (800184c <SystemClock_Config+0xfc>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b2e      	ldr	r3, [pc, #184]	; (800184c <SystemClock_Config+0xfc>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <SystemClock_Config+0x100>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a2a      	ldr	r2, [pc, #168]	; (8001850 <SystemClock_Config+0x100>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b28      	ldr	r3, [pc, #160]	; (8001850 <SystemClock_Config+0x100>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017ba:	2301      	movs	r3, #1
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c4:	2302      	movs	r3, #2
 80017c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017ce:	2308      	movs	r3, #8
 80017d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017d2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017d6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d8:	2302      	movs	r3, #2
 80017da:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017dc:	2307      	movs	r3, #7
 80017de:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017e4:	4618      	mov	r0, r3
 80017e6:	f003 fddb 	bl	80053a0 <HAL_RCC_OscConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80017f0:	f000 fbae 	bl	8001f50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f4:	230f      	movs	r3, #15
 80017f6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f8:	2302      	movs	r3, #2
 80017fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001800:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	2105      	movs	r1, #5
 8001812:	4618      	mov	r0, r3
 8001814:	f004 f83c 	bl	8005890 <HAL_RCC_ClockConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800181e:	f000 fb97 	bl	8001f50 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001822:	2301      	movs	r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001826:	23c0      	movs	r3, #192	; 0xc0
 8001828:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800182a:	2302      	movs	r3, #2
 800182c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	4618      	mov	r0, r3
 8001834:	f004 fa14 	bl	8005c60 <HAL_RCCEx_PeriphCLKConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800183e:	f000 fb87 	bl	8001f50 <Error_Handler>
  }
}
 8001842:	bf00      	nop
 8001844:	3760      	adds	r7, #96	; 0x60
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40007000 	.word	0x40007000

08001854 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	201c      	movs	r0, #28
 800185e:	f001 f838 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001862:	201c      	movs	r0, #28
 8001864:	f001 f851 	bl	800290a <HAL_NVIC_EnableIRQ>
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}

0800186c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <MX_I2C3_Init+0x50>)
 8001872:	4a13      	ldr	r2, [pc, #76]	; (80018c0 <MX_I2C3_Init+0x54>)
 8001874:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_I2C3_Init+0x50>)
 8001878:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <MX_I2C3_Init+0x58>)
 800187a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <MX_I2C3_Init+0x50>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MX_I2C3_Init+0x50>)
 8001884:	2200      	movs	r2, #0
 8001886:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <MX_I2C3_Init+0x50>)
 800188a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800188e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <MX_I2C3_Init+0x50>)
 8001892:	2200      	movs	r2, #0
 8001894:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_I2C3_Init+0x50>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <MX_I2C3_Init+0x50>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <MX_I2C3_Init+0x50>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <MX_I2C3_Init+0x50>)
 80018aa:	f002 ff95 	bl	80047d8 <HAL_I2C_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80018b4:	f000 fb4c 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200000fc 	.word	0x200000fc
 80018c0:	40005c00 	.word	0x40005c00
 80018c4:	000186a0 	.word	0x000186a0

080018c8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <MX_I2S3_Init+0x54>)
 80018ce:	4a14      	ldr	r2, [pc, #80]	; (8001920 <MX_I2S3_Init+0x58>)
 80018d0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <MX_I2S3_Init+0x54>)
 80018d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <MX_I2S3_Init+0x54>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_I2S3_Init+0x54>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <MX_I2S3_Init+0x54>)
 80018e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ec:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <MX_I2S3_Init+0x54>)
 80018f0:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <MX_I2S3_Init+0x5c>)
 80018f2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_I2S3_Init+0x54>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <MX_I2S3_Init+0x54>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_I2S3_Init+0x54>)
 8001902:	2200      	movs	r2, #0
 8001904:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_I2S3_Init+0x54>)
 8001908:	f003 f8aa 	bl	8004a60 <HAL_I2S_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001912:	f000 fb1d 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200002e8 	.word	0x200002e8
 8001920:	40003c00 	.word	0x40003c00
 8001924:	00017700 	.word	0x00017700

08001928 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_RNG_Init+0x20>)
 800192e:	4a07      	ldr	r2, [pc, #28]	; (800194c <MX_RNG_Init+0x24>)
 8001930:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_RNG_Init+0x20>)
 8001934:	f004 fad4 	bl	8005ee0 <HAL_RNG_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800193e:	f000 fb07 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000238 	.word	0x20000238
 800194c:	50060800 	.word	0x50060800

08001950 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001954:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <MX_SPI1_Init+0x64>)
 8001956:	4a18      	ldr	r2, [pc, #96]	; (80019b8 <MX_SPI1_Init+0x68>)
 8001958:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <MX_SPI1_Init+0x64>)
 800195c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001960:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <MX_SPI1_Init+0x64>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <MX_SPI1_Init+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MX_SPI1_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_SPI1_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_SPI1_Init+0x64>)
 800197c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001980:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_SPI1_Init+0x64>)
 8001984:	2200      	movs	r2, #0
 8001986:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <MX_SPI1_Init+0x64>)
 800198a:	2200      	movs	r2, #0
 800198c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_SPI1_Init+0x64>)
 8001990:	2200      	movs	r2, #0
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <MX_SPI1_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_SPI1_Init+0x64>)
 800199c:	220a      	movs	r2, #10
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019a0:	4804      	ldr	r0, [pc, #16]	; (80019b4 <MX_SPI1_Init+0x64>)
 80019a2:	f004 fac7 	bl	8005f34 <HAL_SPI_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019ac:	f000 fad0 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000248 	.word	0x20000248
 80019b8:	40013000 	.word	0x40013000

080019bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_SPI2_Init+0x64>)
 80019c2:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <MX_SPI2_Init+0x68>)
 80019c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <MX_SPI2_Init+0x64>)
 80019c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_SPI2_Init+0x64>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_SPI2_Init+0x64>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_SPI2_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_SPI2_Init+0x64>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_SPI2_Init+0x64>)
 80019e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_SPI2_Init+0x64>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <MX_SPI2_Init+0x64>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_SPI2_Init+0x64>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <MX_SPI2_Init+0x64>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_SPI2_Init+0x64>)
 8001a08:	220a      	movs	r2, #10
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_SPI2_Init+0x64>)
 8001a0e:	f004 fa91 	bl	8005f34 <HAL_SPI_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a18:	f000 fa9a 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000150 	.word	0x20000150
 8001a24:	40003800 	.word	0x40003800

08001a28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08c      	sub	sp, #48	; 0x30
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	2224      	movs	r2, #36	; 0x24
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f008 ffd8 	bl	800a9ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a44:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <MX_TIM1_Init+0xa8>)
 8001a46:	4a23      	ldr	r2, [pc, #140]	; (8001ad4 <MX_TIM1_Init+0xac>)
 8001a48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a4a:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <MX_TIM1_Init+0xa8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <MX_TIM1_Init+0xa8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a56:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <MX_TIM1_Init+0xa8>)
 8001a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <MX_TIM1_Init+0xa8>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_TIM1_Init+0xa8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <MX_TIM1_Init+0xa8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <MX_TIM1_Init+0xa8>)
 8001a9c:	f004 ff01 	bl	80068a2 <HAL_TIM_Encoder_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001aa6:	f000 fa53 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4806      	ldr	r0, [pc, #24]	; (8001ad0 <MX_TIM1_Init+0xa8>)
 8001ab8:	f005 fd66 	bl	8007588 <HAL_TIMEx_MasterConfigSynchronization>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001ac2:	f000 fa45 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	3730      	adds	r7, #48	; 0x30
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200001f0 	.word	0x200001f0
 8001ad4:	40010000 	.word	0x40010000

08001ad8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ade:	f107 0308 	add.w	r3, r7, #8
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aec:	463b      	mov	r3, r7
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af4:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <MX_TIM2_Init+0x98>)
 8001af6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001afa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_TIM2_Init+0x98>)
 8001afe:	f240 3247 	movw	r2, #839	; 0x347
 8001b02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_TIM2_Init+0x98>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <MX_TIM2_Init+0x98>)
 8001b0c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_TIM2_Init+0x98>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b18:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <MX_TIM2_Init+0x98>)
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b1e:	4814      	ldr	r0, [pc, #80]	; (8001b70 <MX_TIM2_Init+0x98>)
 8001b20:	f004 fc98 	bl	8006454 <HAL_TIM_Base_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b2a:	f000 fa11 	bl	8001f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b34:	f107 0308 	add.w	r3, r7, #8
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480d      	ldr	r0, [pc, #52]	; (8001b70 <MX_TIM2_Init+0x98>)
 8001b3c:	f005 f91e 	bl	8006d7c <HAL_TIM_ConfigClockSource>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b46:	f000 fa03 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001b4a:	2310      	movs	r3, #16
 8001b4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b52:	463b      	mov	r3, r7
 8001b54:	4619      	mov	r1, r3
 8001b56:	4806      	ldr	r0, [pc, #24]	; (8001b70 <MX_TIM2_Init+0x98>)
 8001b58:	f005 fd16 	bl	8007588 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b62:	f000 f9f5 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200002a0 	.word	0x200002a0

08001b74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08e      	sub	sp, #56	; 0x38
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	f107 0320 	add.w	r3, r7, #32
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
 8001ba0:	615a      	str	r2, [r3, #20]
 8001ba2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <MX_TIM3_Init+0xe0>)
 8001ba6:	4a2c      	ldr	r2, [pc, #176]	; (8001c58 <MX_TIM3_Init+0xe4>)
 8001ba8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 8001baa:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <MX_TIM3_Init+0xe0>)
 8001bac:	f640 0233 	movw	r2, #2099	; 0x833
 8001bb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <MX_TIM3_Init+0xe0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001bb8:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <MX_TIM3_Init+0xe0>)
 8001bba:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <MX_TIM3_Init+0xe0>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bc6:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <MX_TIM3_Init+0xe0>)
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bcc:	4821      	ldr	r0, [pc, #132]	; (8001c54 <MX_TIM3_Init+0xe0>)
 8001bce:	f004 fc41 	bl	8006454 <HAL_TIM_Base_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001bd8:	f000 f9ba 	bl	8001f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be6:	4619      	mov	r1, r3
 8001be8:	481a      	ldr	r0, [pc, #104]	; (8001c54 <MX_TIM3_Init+0xe0>)
 8001bea:	f005 f8c7 	bl	8006d7c <HAL_TIM_ConfigClockSource>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001bf4:	f000 f9ac 	bl	8001f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bf8:	4816      	ldr	r0, [pc, #88]	; (8001c54 <MX_TIM3_Init+0xe0>)
 8001bfa:	f004 fdf9 	bl	80067f0 <HAL_TIM_PWM_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c04:	f000 f9a4 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c10:	f107 0320 	add.w	r3, r7, #32
 8001c14:	4619      	mov	r1, r3
 8001c16:	480f      	ldr	r0, [pc, #60]	; (8001c54 <MX_TIM3_Init+0xe0>)
 8001c18:	f005 fcb6 	bl	8007588 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c22:	f000 f995 	bl	8001f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c26:	2360      	movs	r3, #96	; 0x60
 8001c28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_TIM3_Init+0xe0>)
 8001c3e:	f004 ffdf 	bl	8006c00 <HAL_TIM_PWM_ConfigChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001c48:	f000 f982 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	3738      	adds	r7, #56	; 0x38
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200001a8 	.word	0x200001a8
 8001c58:	40000400 	.word	0x40000400

08001c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	; 0x30
 8001c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c62:	f107 031c 	add.w	r3, r7, #28
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	4baf      	ldr	r3, [pc, #700]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4aae      	ldr	r2, [pc, #696]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001c7c:	f043 0310 	orr.w	r3, r3, #16
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4bac      	ldr	r3, [pc, #688]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	61bb      	str	r3, [r7, #24]
 8001c8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	4ba8      	ldr	r3, [pc, #672]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4aa7      	ldr	r2, [pc, #668]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4ba5      	ldr	r3, [pc, #660]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4ba1      	ldr	r3, [pc, #644]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4aa0      	ldr	r2, [pc, #640]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b9e      	ldr	r3, [pc, #632]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b9a      	ldr	r3, [pc, #616]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a99      	ldr	r2, [pc, #612]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b97      	ldr	r3, [pc, #604]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	4b93      	ldr	r3, [pc, #588]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a92      	ldr	r2, [pc, #584]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b90      	ldr	r3, [pc, #576]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	4b8c      	ldr	r3, [pc, #560]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a8b      	ldr	r2, [pc, #556]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001d08:	f043 0308 	orr.w	r3, r3, #8
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b89      	ldr	r3, [pc, #548]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	217c      	movs	r1, #124	; 0x7c
 8001d1e:	4886      	ldr	r0, [pc, #536]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001d20:	f000 ffc2 	bl	8002ca8 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001d24:	2201      	movs	r2, #1
 8001d26:	2101      	movs	r1, #1
 8001d28:	4884      	ldr	r0, [pc, #528]	; (8001f3c <MX_GPIO_Init+0x2e0>)
 8001d2a:	f000 ffbd 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f64f 7110 	movw	r1, #65296	; 0xff10
 8001d34:	4882      	ldr	r0, [pc, #520]	; (8001f40 <MX_GPIO_Init+0x2e4>)
 8001d36:	f000 ffb7 	bl	8002ca8 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001d40:	487e      	ldr	r0, [pc, #504]	; (8001f3c <MX_GPIO_Init+0x2e0>)
 8001d42:	f000 ffb1 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001d46:	2200      	movs	r2, #0
 8001d48:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001d4c:	487d      	ldr	r0, [pc, #500]	; (8001f44 <MX_GPIO_Init+0x2e8>)
 8001d4e:	f000 ffab 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8001d52:	2374      	movs	r3, #116	; 0x74
 8001d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d56:	2301      	movs	r3, #1
 8001d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d62:	f107 031c 	add.w	r3, r7, #28
 8001d66:	4619      	mov	r1, r3
 8001d68:	4873      	ldr	r0, [pc, #460]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001d6a:	f000 fde9 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001d6e:	2308      	movs	r3, #8
 8001d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	4619      	mov	r1, r3
 8001d84:	486c      	ldr	r0, [pc, #432]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001d86:	f000 fddb 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001d8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4867      	ldr	r0, [pc, #412]	; (8001f3c <MX_GPIO_Init+0x2e0>)
 8001da0:	f000 fdce 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 8001da4:	f640 0341 	movw	r3, #2113	; 0x841
 8001da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db6:	f107 031c 	add.w	r3, r7, #28
 8001dba:	4619      	mov	r1, r3
 8001dbc:	485f      	ldr	r0, [pc, #380]	; (8001f3c <MX_GPIO_Init+0x2e0>)
 8001dbe:	f000 fdbf 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001dc2:	2308      	movs	r3, #8
 8001dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4857      	ldr	r0, [pc, #348]	; (8001f3c <MX_GPIO_Init+0x2e0>)
 8001dde:	f000 fdaf 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001de2:	2301      	movs	r3, #1
 8001de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001de6:	4b58      	ldr	r3, [pc, #352]	; (8001f48 <MX_GPIO_Init+0x2ec>)
 8001de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	4619      	mov	r1, r3
 8001df4:	4855      	ldr	r0, [pc, #340]	; (8001f4c <MX_GPIO_Init+0x2f0>)
 8001df6:	f000 fda3 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	484d      	ldr	r0, [pc, #308]	; (8001f44 <MX_GPIO_Init+0x2e8>)
 8001e0e:	f000 fd97 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 8001e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 8001e20:	f107 031c 	add.w	r3, r7, #28
 8001e24:	4619      	mov	r1, r3
 8001e26:	4844      	ldr	r0, [pc, #272]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001e28:	f000 fd8a 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e3e:	2305      	movs	r3, #5
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001e42:	f107 031c 	add.w	r3, r7, #28
 8001e46:	4619      	mov	r1, r3
 8001e48:	483e      	ldr	r0, [pc, #248]	; (8001f44 <MX_GPIO_Init+0x2e8>)
 8001e4a:	f000 fd79 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001e4e:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8001e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	4838      	ldr	r0, [pc, #224]	; (8001f44 <MX_GPIO_Init+0x2e8>)
 8001e64:	f000 fd6c 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001e68:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001e6c:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	482f      	ldr	r0, [pc, #188]	; (8001f40 <MX_GPIO_Init+0x2e4>)
 8001e82:	f000 fd5d 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e86:	2320      	movs	r3, #32
 8001e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	4619      	mov	r1, r3
 8001e98:	4829      	ldr	r0, [pc, #164]	; (8001f40 <MX_GPIO_Init+0x2e4>)
 8001e9a:	f000 fd51 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e9e:	2340      	movs	r3, #64	; 0x40
 8001ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4823      	ldr	r0, [pc, #140]	; (8001f44 <MX_GPIO_Init+0x2e8>)
 8001eb6:	f000 fd43 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001eba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	481c      	ldr	r0, [pc, #112]	; (8001f44 <MX_GPIO_Init+0x2e8>)
 8001ed4:	f000 fd34 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ede:	2312      	movs	r3, #18
 8001ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eea:	2304      	movs	r3, #4
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4813      	ldr	r0, [pc, #76]	; (8001f44 <MX_GPIO_Init+0x2e8>)
 8001ef6:	f000 fd23 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001efa:	2301      	movs	r3, #1
 8001efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	480a      	ldr	r0, [pc, #40]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001f0e:	f000 fd17 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001f12:	2302      	movs	r3, #2
 8001f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_GPIO_Init+0x2ec>)
 8001f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	4619      	mov	r1, r3
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001f26:	f000 fd0b 	bl	8002940 <HAL_GPIO_Init>

}
 8001f2a:	bf00      	nop
 8001f2c:	3730      	adds	r7, #48	; 0x30
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40020c00 	.word	0x40020c00
 8001f44:	40020400 	.word	0x40020400
 8001f48:	10120000 	.word	0x10120000
 8001f4c:	40020000 	.word	0x40020000

08001f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f54:	b672      	cpsid	i
}
 8001f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <Error_Handler+0x8>
	...

08001f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_MspInit+0x5c>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	4a13      	ldr	r2, [pc, #76]	; (8001fb8 <HAL_MspInit+0x5c>)
 8001f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f70:	6453      	str	r3, [r2, #68]	; 0x44
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_MspInit+0x5c>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <HAL_MspInit+0x5c>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <HAL_MspInit+0x5c>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_MspInit+0x5c>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f9a:	2007      	movs	r0, #7
 8001f9c:	f000 fc8e 	bl	80028bc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	2005      	movs	r0, #5
 8001fa6:	f000 fc94 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001faa:	2005      	movs	r0, #5
 8001fac:	f000 fcad 	bl	800290a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40023800 	.word	0x40023800

08001fbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a29      	ldr	r2, [pc, #164]	; (8002080 <HAL_I2C_MspInit+0xc4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d14b      	bne.n	8002076 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	4b28      	ldr	r3, [pc, #160]	; (8002084 <HAL_I2C_MspInit+0xc8>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a27      	ldr	r2, [pc, #156]	; (8002084 <HAL_I2C_MspInit+0xc8>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_I2C_MspInit+0xc8>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_I2C_MspInit+0xc8>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a20      	ldr	r2, [pc, #128]	; (8002084 <HAL_I2C_MspInit+0xc8>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <HAL_I2C_MspInit+0xc8>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800201a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800201c:	2312      	movs	r3, #18
 800201e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002020:	2301      	movs	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002028:	2304      	movs	r3, #4
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4619      	mov	r1, r3
 8002032:	4815      	ldr	r0, [pc, #84]	; (8002088 <HAL_I2C_MspInit+0xcc>)
 8002034:	f000 fc84 	bl	8002940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002038:	f44f 7380 	mov.w	r3, #256	; 0x100
 800203c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800203e:	2312      	movs	r3, #18
 8002040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002042:	2301      	movs	r3, #1
 8002044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002046:	2303      	movs	r3, #3
 8002048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800204a:	2304      	movs	r3, #4
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	4619      	mov	r1, r3
 8002054:	480d      	ldr	r0, [pc, #52]	; (800208c <HAL_I2C_MspInit+0xd0>)
 8002056:	f000 fc73 	bl	8002940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_I2C_MspInit+0xc8>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	4a08      	ldr	r2, [pc, #32]	; (8002084 <HAL_I2C_MspInit+0xc8>)
 8002064:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_I2C_MspInit+0xc8>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002076:	bf00      	nop
 8002078:	3728      	adds	r7, #40	; 0x28
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40005c00 	.word	0x40005c00
 8002084:	40023800 	.word	0x40023800
 8002088:	40020800 	.word	0x40020800
 800208c:	40020000 	.word	0x40020000

08002090 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08a      	sub	sp, #40	; 0x28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a28      	ldr	r2, [pc, #160]	; (8002150 <HAL_I2S_MspInit+0xc0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d14a      	bne.n	8002148 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	4b27      	ldr	r3, [pc, #156]	; (8002154 <HAL_I2S_MspInit+0xc4>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a26      	ldr	r2, [pc, #152]	; (8002154 <HAL_I2S_MspInit+0xc4>)
 80020bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
 80020c2:	4b24      	ldr	r3, [pc, #144]	; (8002154 <HAL_I2S_MspInit+0xc4>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_I2S_MspInit+0xc4>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a1f      	ldr	r2, [pc, #124]	; (8002154 <HAL_I2S_MspInit+0xc4>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_I2S_MspInit+0xc4>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_I2S_MspInit+0xc4>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a18      	ldr	r2, [pc, #96]	; (8002154 <HAL_I2S_MspInit+0xc4>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_I2S_MspInit+0xc4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002106:	2310      	movs	r3, #16
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002116:	2306      	movs	r3, #6
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	480d      	ldr	r0, [pc, #52]	; (8002158 <HAL_I2S_MspInit+0xc8>)
 8002122:	f000 fc0d 	bl	8002940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002126:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800212a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002138:	2306      	movs	r3, #6
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	4619      	mov	r1, r3
 8002142:	4806      	ldr	r0, [pc, #24]	; (800215c <HAL_I2S_MspInit+0xcc>)
 8002144:	f000 fbfc 	bl	8002940 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002148:	bf00      	nop
 800214a:	3728      	adds	r7, #40	; 0x28
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40003c00 	.word	0x40003c00
 8002154:	40023800 	.word	0x40023800
 8002158:	40020000 	.word	0x40020000
 800215c:	40020800 	.word	0x40020800

08002160 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0b      	ldr	r2, [pc, #44]	; (800219c <HAL_RNG_MspInit+0x3c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d10d      	bne.n	800218e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_RNG_MspInit+0x40>)
 8002178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217a:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <HAL_RNG_MspInit+0x40>)
 800217c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002180:	6353      	str	r3, [r2, #52]	; 0x34
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <HAL_RNG_MspInit+0x40>)
 8002184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	50060800 	.word	0x50060800
 80021a0:	40023800 	.word	0x40023800

080021a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	; 0x30
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a41      	ldr	r2, [pc, #260]	; (80022c8 <HAL_SPI_MspInit+0x124>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d12c      	bne.n	8002220 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	4b40      	ldr	r3, [pc, #256]	; (80022cc <HAL_SPI_MspInit+0x128>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	4a3f      	ldr	r2, [pc, #252]	; (80022cc <HAL_SPI_MspInit+0x128>)
 80021d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021d4:	6453      	str	r3, [r2, #68]	; 0x44
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <HAL_SPI_MspInit+0x128>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	4b39      	ldr	r3, [pc, #228]	; (80022cc <HAL_SPI_MspInit+0x128>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a38      	ldr	r2, [pc, #224]	; (80022cc <HAL_SPI_MspInit+0x128>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_SPI_MspInit+0x128>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80021fe:	23e0      	movs	r3, #224	; 0xe0
 8002200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220a:	2303      	movs	r3, #3
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800220e:	2305      	movs	r3, #5
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 031c 	add.w	r3, r7, #28
 8002216:	4619      	mov	r1, r3
 8002218:	482d      	ldr	r0, [pc, #180]	; (80022d0 <HAL_SPI_MspInit+0x12c>)
 800221a:	f000 fb91 	bl	8002940 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800221e:	e04f      	b.n	80022c0 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a2b      	ldr	r2, [pc, #172]	; (80022d4 <HAL_SPI_MspInit+0x130>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d14a      	bne.n	80022c0 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	4b27      	ldr	r3, [pc, #156]	; (80022cc <HAL_SPI_MspInit+0x128>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4a26      	ldr	r2, [pc, #152]	; (80022cc <HAL_SPI_MspInit+0x128>)
 8002234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002238:	6413      	str	r3, [r2, #64]	; 0x40
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_SPI_MspInit+0x128>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	4b20      	ldr	r3, [pc, #128]	; (80022cc <HAL_SPI_MspInit+0x128>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a1f      	ldr	r2, [pc, #124]	; (80022cc <HAL_SPI_MspInit+0x128>)
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_SPI_MspInit+0x128>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_SPI_MspInit+0x128>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a18      	ldr	r2, [pc, #96]	; (80022cc <HAL_SPI_MspInit+0x128>)
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b16      	ldr	r3, [pc, #88]	; (80022cc <HAL_SPI_MspInit+0x128>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800227e:	2304      	movs	r3, #4
 8002280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228a:	2303      	movs	r3, #3
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800228e:	2305      	movs	r3, #5
 8002290:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002292:	f107 031c 	add.w	r3, r7, #28
 8002296:	4619      	mov	r1, r3
 8002298:	480f      	ldr	r0, [pc, #60]	; (80022d8 <HAL_SPI_MspInit+0x134>)
 800229a:	f000 fb51 	bl	8002940 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800229e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80022a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ac:	2303      	movs	r3, #3
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022b0:	2305      	movs	r3, #5
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	4619      	mov	r1, r3
 80022ba:	4808      	ldr	r0, [pc, #32]	; (80022dc <HAL_SPI_MspInit+0x138>)
 80022bc:	f000 fb40 	bl	8002940 <HAL_GPIO_Init>
}
 80022c0:	bf00      	nop
 80022c2:	3730      	adds	r7, #48	; 0x30
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40013000 	.word	0x40013000
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40020000 	.word	0x40020000
 80022d4:	40003800 	.word	0x40003800
 80022d8:	40020800 	.word	0x40020800
 80022dc:	40020400 	.word	0x40020400

080022e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a19      	ldr	r2, [pc, #100]	; (8002364 <HAL_TIM_Encoder_MspInit+0x84>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d12c      	bne.n	800235c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <HAL_TIM_Encoder_MspInit+0x88>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4a17      	ldr	r2, [pc, #92]	; (8002368 <HAL_TIM_Encoder_MspInit+0x88>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6453      	str	r3, [r2, #68]	; 0x44
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <HAL_TIM_Encoder_MspInit+0x88>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_TIM_Encoder_MspInit+0x88>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a10      	ldr	r2, [pc, #64]	; (8002368 <HAL_TIM_Encoder_MspInit+0x88>)
 8002328:	f043 0310 	orr.w	r3, r3, #16
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <HAL_TIM_Encoder_MspInit+0x88>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800233a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800233e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002344:	2301      	movs	r3, #1
 8002346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800234c:	2301      	movs	r3, #1
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	4805      	ldr	r0, [pc, #20]	; (800236c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002358:	f000 faf2 	bl	8002940 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800235c:	bf00      	nop
 800235e:	3728      	adds	r7, #40	; 0x28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40010000 	.word	0x40010000
 8002368:	40023800 	.word	0x40023800
 800236c:	40021000 	.word	0x40021000

08002370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002380:	d10e      	bne.n	80023a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <HAL_TIM_Base_MspInit+0x70>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	4a15      	ldr	r2, [pc, #84]	; (80023e0 <HAL_TIM_Base_MspInit+0x70>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6413      	str	r3, [r2, #64]	; 0x40
 8002392:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <HAL_TIM_Base_MspInit+0x70>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800239e:	e01a      	b.n	80023d6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0f      	ldr	r2, [pc, #60]	; (80023e4 <HAL_TIM_Base_MspInit+0x74>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d115      	bne.n	80023d6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <HAL_TIM_Base_MspInit+0x70>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a0b      	ldr	r2, [pc, #44]	; (80023e0 <HAL_TIM_Base_MspInit+0x70>)
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_TIM_Base_MspInit+0x70>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	201d      	movs	r0, #29
 80023cc:	f000 fa81 	bl	80028d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023d0:	201d      	movs	r0, #29
 80023d2:	f000 fa9a 	bl	800290a <HAL_NVIC_EnableIRQ>
}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40000400 	.word	0x40000400

080023e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <NMI_Handler+0x4>

080023ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f2:	e7fe      	b.n	80023f2 <HardFault_Handler+0x4>

080023f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <MemManage_Handler+0x4>

080023fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fe:	e7fe      	b.n	80023fe <BusFault_Handler+0x4>

08002400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <UsageFault_Handler+0x4>

08002406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002434:	f000 f92e 	bl	8002694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 8002450:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002454:	481b      	ldr	r0, [pc, #108]	; (80024c4 <TIM2_IRQHandler+0x78>)
 8002456:	f000 fc40 	bl	8002cda <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 800245a:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <TIM2_IRQHandler+0x7c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d111      	bne.n	8002486 <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 8002462:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <TIM2_IRQHandler+0x80>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2bc8      	cmp	r3, #200	; 0xc8
 8002468:	dc0a      	bgt.n	8002480 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 800246a:	4b18      	ldr	r3, [pc, #96]	; (80024cc <TIM2_IRQHandler+0x80>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <TIM2_IRQHandler+0x84>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <TIM2_IRQHandler+0x80>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3301      	adds	r3, #1
 800247a:	4a14      	ldr	r2, [pc, #80]	; (80024cc <TIM2_IRQHandler+0x80>)
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e002      	b.n	8002486 <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <TIM2_IRQHandler+0x7c>)
 8002482:	2201      	movs	r2, #1
 8002484:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <TIM2_IRQHandler+0x7c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d114      	bne.n	80024b8 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <TIM2_IRQHandler+0x80>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b63      	cmp	r3, #99	; 0x63
 8002494:	dd0a      	ble.n	80024ac <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <TIM2_IRQHandler+0x80>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <TIM2_IRQHandler+0x84>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 80024a0:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <TIM2_IRQHandler+0x80>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	4a09      	ldr	r2, [pc, #36]	; (80024cc <TIM2_IRQHandler+0x80>)
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e005      	b.n	80024b8 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <TIM2_IRQHandler+0x7c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
		  i = 100;
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <TIM2_IRQHandler+0x80>)
 80024b4:	2264      	movs	r2, #100	; 0x64
 80024b6:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024b8:	4805      	ldr	r0, [pc, #20]	; (80024d0 <TIM2_IRQHandler+0x84>)
 80024ba:	f004 fa98 	bl	80069ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40020c00 	.word	0x40020c00
 80024c8:	200000c0 	.word	0x200000c0
 80024cc:	20000008 	.word	0x20000008
 80024d0:	200002a0 	.word	0x200002a0

080024d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80024d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024dc:	4804      	ldr	r0, [pc, #16]	; (80024f0 <TIM3_IRQHandler+0x1c>)
 80024de:	f000 fbfc 	bl	8002cda <HAL_GPIO_TogglePin>
  read_digits();
 80024e2:	f7fe feef 	bl	80012c4 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024e6:	4803      	ldr	r0, [pc, #12]	; (80024f4 <TIM3_IRQHandler+0x20>)
 80024e8:	f004 fa81 	bl	80069ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40020c00 	.word	0x40020c00
 80024f4:	200001a8 	.word	0x200001a8

080024f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80024fc:	4802      	ldr	r0, [pc, #8]	; (8002508 <OTG_FS_IRQHandler+0x10>)
 80024fe:	f000 fe71 	bl	80031e4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	2000070c 	.word	0x2000070c

0800250c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002514:	4a14      	ldr	r2, [pc, #80]	; (8002568 <_sbrk+0x5c>)
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <_sbrk+0x60>)
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002520:	4b13      	ldr	r3, [pc, #76]	; (8002570 <_sbrk+0x64>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d102      	bne.n	800252e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <_sbrk+0x64>)
 800252a:	4a12      	ldr	r2, [pc, #72]	; (8002574 <_sbrk+0x68>)
 800252c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <_sbrk+0x64>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	429a      	cmp	r2, r3
 800253a:	d207      	bcs.n	800254c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800253c:	f008 fa1c 	bl	800a978 <__errno>
 8002540:	4603      	mov	r3, r0
 8002542:	220c      	movs	r2, #12
 8002544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800254a:	e009      	b.n	8002560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <_sbrk+0x64>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002552:	4b07      	ldr	r3, [pc, #28]	; (8002570 <_sbrk+0x64>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	4a05      	ldr	r2, [pc, #20]	; (8002570 <_sbrk+0x64>)
 800255c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800255e:	68fb      	ldr	r3, [r7, #12]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20020000 	.word	0x20020000
 800256c:	00000400 	.word	0x00000400
 8002570:	200000c4 	.word	0x200000c4
 8002574:	20000a20 	.word	0x20000a20

08002578 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <SystemInit+0x20>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	4a05      	ldr	r2, [pc, #20]	; (8002598 <SystemInit+0x20>)
 8002584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800259c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025a0:	480d      	ldr	r0, [pc, #52]	; (80025d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025a2:	490e      	ldr	r1, [pc, #56]	; (80025dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025a4:	4a0e      	ldr	r2, [pc, #56]	; (80025e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a8:	e002      	b.n	80025b0 <LoopCopyDataInit>

080025aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ae:	3304      	adds	r3, #4

080025b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b4:	d3f9      	bcc.n	80025aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025b6:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025b8:	4c0b      	ldr	r4, [pc, #44]	; (80025e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025bc:	e001      	b.n	80025c2 <LoopFillZerobss>

080025be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c0:	3204      	adds	r2, #4

080025c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c4:	d3fb      	bcc.n	80025be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025c6:	f7ff ffd7 	bl	8002578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ca:	f008 f9db 	bl	800a984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ce:	f7ff f87f 	bl	80016d0 <main>
  bx  lr    
 80025d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80025d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025dc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80025e0:	0800b068 	.word	0x0800b068
  ldr r2, =_sbss
 80025e4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80025e8:	20000a20 	.word	0x20000a20

080025ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025ec:	e7fe      	b.n	80025ec <ADC_IRQHandler>
	...

080025f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_Init+0x40>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <HAL_Init+0x40>)
 80025fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_Init+0x40>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <HAL_Init+0x40>)
 8002606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800260a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <HAL_Init+0x40>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a07      	ldr	r2, [pc, #28]	; (8002630 <HAL_Init+0x40>)
 8002612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002616:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002618:	2003      	movs	r0, #3
 800261a:	f000 f94f 	bl	80028bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800261e:	2000      	movs	r0, #0
 8002620:	f000 f808 	bl	8002634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002624:	f7ff fc9a 	bl	8001f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023c00 	.word	0x40023c00

08002634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800263c:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_InitTick+0x54>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_InitTick+0x58>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800264a:	fbb3 f3f1 	udiv	r3, r3, r1
 800264e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f967 	bl	8002926 <HAL_SYSTICK_Config>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e00e      	b.n	8002680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b0f      	cmp	r3, #15
 8002666:	d80a      	bhi.n	800267e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002668:	2200      	movs	r2, #0
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002670:	f000 f92f 	bl	80028d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002674:	4a06      	ldr	r2, [pc, #24]	; (8002690 <HAL_InitTick+0x5c>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	e000      	b.n	8002680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	2000000c 	.word	0x2000000c
 800268c:	20000014 	.word	0x20000014
 8002690:	20000010 	.word	0x20000010

08002694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_IncTick+0x20>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_IncTick+0x24>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4413      	add	r3, r2
 80026a4:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <HAL_IncTick+0x24>)
 80026a6:	6013      	str	r3, [r2, #0]
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000014 	.word	0x20000014
 80026b8:	20000330 	.word	0x20000330

080026bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return uwTick;
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <HAL_GetTick+0x14>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20000330 	.word	0x20000330

080026d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026dc:	f7ff ffee 	bl	80026bc <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ec:	d005      	beq.n	80026fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <HAL_Delay+0x44>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4413      	add	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026fa:	bf00      	nop
 80026fc:	f7ff ffde 	bl	80026bc <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	429a      	cmp	r2, r3
 800270a:	d8f7      	bhi.n	80026fc <HAL_Delay+0x28>
  {
  }
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000014 	.word	0x20000014

0800271c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002738:	4013      	ands	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274e:	4a04      	ldr	r2, [pc, #16]	; (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	60d3      	str	r3, [r2, #12]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <__NVIC_GetPriorityGrouping+0x18>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	f003 0307 	and.w	r3, r3, #7
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	2b00      	cmp	r3, #0
 8002790:	db0b      	blt.n	80027aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	4907      	ldr	r1, [pc, #28]	; (80027b8 <__NVIC_EnableIRQ+0x38>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	2001      	movs	r0, #1
 80027a2:	fa00 f202 	lsl.w	r2, r0, r2
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000e100 	.word	0xe000e100

080027bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	6039      	str	r1, [r7, #0]
 80027c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	db0a      	blt.n	80027e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	490c      	ldr	r1, [pc, #48]	; (8002808 <__NVIC_SetPriority+0x4c>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	0112      	lsls	r2, r2, #4
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	440b      	add	r3, r1
 80027e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e4:	e00a      	b.n	80027fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4908      	ldr	r1, [pc, #32]	; (800280c <__NVIC_SetPriority+0x50>)
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	3b04      	subs	r3, #4
 80027f4:	0112      	lsls	r2, r2, #4
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	440b      	add	r3, r1
 80027fa:	761a      	strb	r2, [r3, #24]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000e100 	.word	0xe000e100
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f1c3 0307 	rsb	r3, r3, #7
 800282a:	2b04      	cmp	r3, #4
 800282c:	bf28      	it	cs
 800282e:	2304      	movcs	r3, #4
 8002830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3304      	adds	r3, #4
 8002836:	2b06      	cmp	r3, #6
 8002838:	d902      	bls.n	8002840 <NVIC_EncodePriority+0x30>
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3b03      	subs	r3, #3
 800283e:	e000      	b.n	8002842 <NVIC_EncodePriority+0x32>
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43da      	mvns	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	401a      	ands	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	43d9      	mvns	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	4313      	orrs	r3, r2
         );
}
 800286a:	4618      	mov	r0, r3
 800286c:	3724      	adds	r7, #36	; 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002888:	d301      	bcc.n	800288e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800288a:	2301      	movs	r3, #1
 800288c:	e00f      	b.n	80028ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288e:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <SysTick_Config+0x40>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002896:	210f      	movs	r1, #15
 8002898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800289c:	f7ff ff8e 	bl	80027bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <SysTick_Config+0x40>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a6:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <SysTick_Config+0x40>)
 80028a8:	2207      	movs	r2, #7
 80028aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	e000e010 	.word	0xe000e010

080028bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ff29 	bl	800271c <__NVIC_SetPriorityGrouping>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b086      	sub	sp, #24
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e4:	f7ff ff3e 	bl	8002764 <__NVIC_GetPriorityGrouping>
 80028e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	6978      	ldr	r0, [r7, #20]
 80028f0:	f7ff ff8e 	bl	8002810 <NVIC_EncodePriority>
 80028f4:	4602      	mov	r2, r0
 80028f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff5d 	bl	80027bc <__NVIC_SetPriority>
}
 8002902:	bf00      	nop
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	4603      	mov	r3, r0
 8002912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff31 	bl	8002780 <__NVIC_EnableIRQ>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff ffa2 	bl	8002878 <SysTick_Config>
 8002934:	4603      	mov	r3, r0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	e16b      	b.n	8002c34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800295c:	2201      	movs	r2, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	429a      	cmp	r2, r3
 8002976:	f040 815a 	bne.w	8002c2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b01      	cmp	r3, #1
 8002984:	d005      	beq.n	8002992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800298e:	2b02      	cmp	r3, #2
 8002990:	d130      	bne.n	80029f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2203      	movs	r2, #3
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c8:	2201      	movs	r2, #1
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 0201 	and.w	r2, r3, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d017      	beq.n	8002a30 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d123      	bne.n	8002a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	08da      	lsrs	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3208      	adds	r2, #8
 8002a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	220f      	movs	r2, #15
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	08da      	lsrs	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3208      	adds	r2, #8
 8002a7e:	69b9      	ldr	r1, [r7, #24]
 8002a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	2203      	movs	r2, #3
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0203 	and.w	r2, r3, #3
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80b4 	beq.w	8002c2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	4b60      	ldr	r3, [pc, #384]	; (8002c4c <HAL_GPIO_Init+0x30c>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	4a5f      	ldr	r2, [pc, #380]	; (8002c4c <HAL_GPIO_Init+0x30c>)
 8002ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad6:	4b5d      	ldr	r3, [pc, #372]	; (8002c4c <HAL_GPIO_Init+0x30c>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ae2:	4a5b      	ldr	r2, [pc, #364]	; (8002c50 <HAL_GPIO_Init+0x310>)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	3302      	adds	r3, #2
 8002aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	220f      	movs	r2, #15
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4013      	ands	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a52      	ldr	r2, [pc, #328]	; (8002c54 <HAL_GPIO_Init+0x314>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d02b      	beq.n	8002b66 <HAL_GPIO_Init+0x226>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a51      	ldr	r2, [pc, #324]	; (8002c58 <HAL_GPIO_Init+0x318>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d025      	beq.n	8002b62 <HAL_GPIO_Init+0x222>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a50      	ldr	r2, [pc, #320]	; (8002c5c <HAL_GPIO_Init+0x31c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01f      	beq.n	8002b5e <HAL_GPIO_Init+0x21e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4f      	ldr	r2, [pc, #316]	; (8002c60 <HAL_GPIO_Init+0x320>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d019      	beq.n	8002b5a <HAL_GPIO_Init+0x21a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a4e      	ldr	r2, [pc, #312]	; (8002c64 <HAL_GPIO_Init+0x324>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_GPIO_Init+0x216>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a4d      	ldr	r2, [pc, #308]	; (8002c68 <HAL_GPIO_Init+0x328>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00d      	beq.n	8002b52 <HAL_GPIO_Init+0x212>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a4c      	ldr	r2, [pc, #304]	; (8002c6c <HAL_GPIO_Init+0x32c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <HAL_GPIO_Init+0x20e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a4b      	ldr	r2, [pc, #300]	; (8002c70 <HAL_GPIO_Init+0x330>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d101      	bne.n	8002b4a <HAL_GPIO_Init+0x20a>
 8002b46:	2307      	movs	r3, #7
 8002b48:	e00e      	b.n	8002b68 <HAL_GPIO_Init+0x228>
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	e00c      	b.n	8002b68 <HAL_GPIO_Init+0x228>
 8002b4e:	2306      	movs	r3, #6
 8002b50:	e00a      	b.n	8002b68 <HAL_GPIO_Init+0x228>
 8002b52:	2305      	movs	r3, #5
 8002b54:	e008      	b.n	8002b68 <HAL_GPIO_Init+0x228>
 8002b56:	2304      	movs	r3, #4
 8002b58:	e006      	b.n	8002b68 <HAL_GPIO_Init+0x228>
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e004      	b.n	8002b68 <HAL_GPIO_Init+0x228>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e002      	b.n	8002b68 <HAL_GPIO_Init+0x228>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_GPIO_Init+0x228>
 8002b66:	2300      	movs	r3, #0
 8002b68:	69fa      	ldr	r2, [r7, #28]
 8002b6a:	f002 0203 	and.w	r2, r2, #3
 8002b6e:	0092      	lsls	r2, r2, #2
 8002b70:	4093      	lsls	r3, r2
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b78:	4935      	ldr	r1, [pc, #212]	; (8002c50 <HAL_GPIO_Init+0x310>)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	3302      	adds	r3, #2
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b86:	4b3b      	ldr	r3, [pc, #236]	; (8002c74 <HAL_GPIO_Init+0x334>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002baa:	4a32      	ldr	r2, [pc, #200]	; (8002c74 <HAL_GPIO_Init+0x334>)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bb0:	4b30      	ldr	r3, [pc, #192]	; (8002c74 <HAL_GPIO_Init+0x334>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bd4:	4a27      	ldr	r2, [pc, #156]	; (8002c74 <HAL_GPIO_Init+0x334>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bda:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <HAL_GPIO_Init+0x334>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bfe:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <HAL_GPIO_Init+0x334>)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c04:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <HAL_GPIO_Init+0x334>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c28:	4a12      	ldr	r2, [pc, #72]	; (8002c74 <HAL_GPIO_Init+0x334>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3301      	adds	r3, #1
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	2b0f      	cmp	r3, #15
 8002c38:	f67f ae90 	bls.w	800295c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40013800 	.word	0x40013800
 8002c54:	40020000 	.word	0x40020000
 8002c58:	40020400 	.word	0x40020400
 8002c5c:	40020800 	.word	0x40020800
 8002c60:	40020c00 	.word	0x40020c00
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40021400 	.word	0x40021400
 8002c6c:	40021800 	.word	0x40021800
 8002c70:	40021c00 	.word	0x40021c00
 8002c74:	40013c00 	.word	0x40013c00

08002c78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	887b      	ldrh	r3, [r7, #2]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e001      	b.n	8002c9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	807b      	strh	r3, [r7, #2]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb8:	787b      	ldrb	r3, [r7, #1]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cc4:	e003      	b.n	8002cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cc6:	887b      	ldrh	r3, [r7, #2]
 8002cc8:	041a      	lsls	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	619a      	str	r2, [r3, #24]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b085      	sub	sp, #20
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cec:	887a      	ldrh	r2, [r7, #2]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	041a      	lsls	r2, r3, #16
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	43d9      	mvns	r1, r3
 8002cf8:	887b      	ldrh	r3, [r7, #2]
 8002cfa:	400b      	ands	r3, r1
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	619a      	str	r2, [r3, #24]
}
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d10:	b08f      	sub	sp, #60	; 0x3c
 8002d12:	af0a      	add	r7, sp, #40	; 0x28
 8002d14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e054      	b.n	8002dca <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f007 fb72 	bl	800a424 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2203      	movs	r2, #3
 8002d44:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 fd14 	bl	800778c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	687e      	ldr	r6, [r7, #4]
 8002d6c:	466d      	mov	r5, sp
 8002d6e:	f106 0410 	add.w	r4, r6, #16
 8002d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d82:	1d33      	adds	r3, r6, #4
 8002d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d86:	6838      	ldr	r0, [r7, #0]
 8002d88:	f004 fc8e 	bl	80076a8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2101      	movs	r1, #1
 8002d92:	4618      	mov	r0, r3
 8002d94:	f004 fd0b 	bl	80077ae <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	687e      	ldr	r6, [r7, #4]
 8002da0:	466d      	mov	r5, sp
 8002da2:	f106 0410 	add.w	r4, r6, #16
 8002da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002db2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002db6:	1d33      	adds	r3, r6, #4
 8002db8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dba:	6838      	ldr	r0, [r7, #0]
 8002dbc:	f004 fe1e 	bl	80079fc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dd2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002dd2:	b590      	push	{r4, r7, lr}
 8002dd4:	b089      	sub	sp, #36	; 0x24
 8002dd6:	af04      	add	r7, sp, #16
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	4608      	mov	r0, r1
 8002ddc:	4611      	mov	r1, r2
 8002dde:	461a      	mov	r2, r3
 8002de0:	4603      	mov	r3, r0
 8002de2:	70fb      	strb	r3, [r7, #3]
 8002de4:	460b      	mov	r3, r1
 8002de6:	70bb      	strb	r3, [r7, #2]
 8002de8:	4613      	mov	r3, r2
 8002dea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_HCD_HC_Init+0x28>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e076      	b.n	8002ee8 <HAL_HCD_HC_Init+0x116>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	212c      	movs	r1, #44	; 0x2c
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	333d      	adds	r3, #61	; 0x3d
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	212c      	movs	r1, #44	; 0x2c
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	4413      	add	r3, r2
 8002e20:	3338      	adds	r3, #56	; 0x38
 8002e22:	787a      	ldrb	r2, [r7, #1]
 8002e24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002e26:	78fb      	ldrb	r3, [r7, #3]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	212c      	movs	r1, #44	; 0x2c
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	3340      	adds	r3, #64	; 0x40
 8002e34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e36:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	212c      	movs	r1, #44	; 0x2c
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	3339      	adds	r3, #57	; 0x39
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	333f      	adds	r3, #63	; 0x3f
 8002e58:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	78ba      	ldrb	r2, [r7, #2]
 8002e62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e66:	b2d0      	uxtb	r0, r2
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	333a      	adds	r3, #58	; 0x3a
 8002e74:	4602      	mov	r2, r0
 8002e76:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da09      	bge.n	8002e94 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	333b      	adds	r3, #59	; 0x3b
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	e008      	b.n	8002ea6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	212c      	movs	r1, #44	; 0x2c
 8002e9a:	fb01 f303 	mul.w	r3, r1, r3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	333b      	adds	r3, #59	; 0x3b
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	212c      	movs	r1, #44	; 0x2c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	333c      	adds	r3, #60	; 0x3c
 8002eb4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002eb8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	787c      	ldrb	r4, [r7, #1]
 8002ec0:	78ba      	ldrb	r2, [r7, #2]
 8002ec2:	78f9      	ldrb	r1, [r7, #3]
 8002ec4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ec6:	9302      	str	r3, [sp, #8]
 8002ec8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ecc:	9301      	str	r3, [sp, #4]
 8002ece:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	4623      	mov	r3, r4
 8002ed6:	f004 ff13 	bl	8007d00 <USB_HC_Init>
 8002eda:	4603      	mov	r3, r0
 8002edc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd90      	pop	{r4, r7, pc}

08002ef0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_HCD_HC_Halt+0x1e>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e00f      	b.n	8002f2e <HAL_HCD_HC_Halt+0x3e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f005 f94f 	bl	80081c2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	4608      	mov	r0, r1
 8002f42:	4611      	mov	r1, r2
 8002f44:	461a      	mov	r2, r3
 8002f46:	4603      	mov	r3, r0
 8002f48:	70fb      	strb	r3, [r7, #3]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	70bb      	strb	r3, [r7, #2]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	212c      	movs	r1, #44	; 0x2c
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	333b      	adds	r3, #59	; 0x3b
 8002f60:	78ba      	ldrb	r2, [r7, #2]
 8002f62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	333f      	adds	r3, #63	; 0x3f
 8002f72:	787a      	ldrb	r2, [r7, #1]
 8002f74:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f76:	7c3b      	ldrb	r3, [r7, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d112      	bne.n	8002fa2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	3342      	adds	r3, #66	; 0x42
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	333d      	adds	r3, #61	; 0x3d
 8002f9c:	7f3a      	ldrb	r2, [r7, #28]
 8002f9e:	701a      	strb	r2, [r3, #0]
 8002fa0:	e008      	b.n	8002fb4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	212c      	movs	r1, #44	; 0x2c
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	4413      	add	r3, r2
 8002fae:	3342      	adds	r3, #66	; 0x42
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002fb4:	787b      	ldrb	r3, [r7, #1]
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	f200 80c6 	bhi.w	8003148 <HAL_HCD_HC_SubmitRequest+0x210>
 8002fbc:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc2:	bf00      	nop
 8002fc4:	08002fd5 	.word	0x08002fd5
 8002fc8:	08003135 	.word	0x08003135
 8002fcc:	08003039 	.word	0x08003039
 8002fd0:	080030b7 	.word	0x080030b7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002fd4:	7c3b      	ldrb	r3, [r7, #16]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	f040 80b8 	bne.w	800314c <HAL_HCD_HC_SubmitRequest+0x214>
 8002fdc:	78bb      	ldrb	r3, [r7, #2]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f040 80b4 	bne.w	800314c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002fe4:	8b3b      	ldrh	r3, [r7, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d108      	bne.n	8002ffc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3355      	adds	r3, #85	; 0x55
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	212c      	movs	r1, #44	; 0x2c
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	3355      	adds	r3, #85	; 0x55
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d109      	bne.n	8003024 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	212c      	movs	r1, #44	; 0x2c
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	4413      	add	r3, r2
 800301c:	3342      	adds	r3, #66	; 0x42
 800301e:	2200      	movs	r2, #0
 8003020:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003022:	e093      	b.n	800314c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	212c      	movs	r1, #44	; 0x2c
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	4413      	add	r3, r2
 8003030:	3342      	adds	r3, #66	; 0x42
 8003032:	2202      	movs	r2, #2
 8003034:	701a      	strb	r2, [r3, #0]
      break;
 8003036:	e089      	b.n	800314c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003038:	78bb      	ldrb	r3, [r7, #2]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d11d      	bne.n	800307a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	3355      	adds	r3, #85	; 0x55
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	3342      	adds	r3, #66	; 0x42
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003064:	e073      	b.n	800314e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	3342      	adds	r3, #66	; 0x42
 8003074:	2202      	movs	r2, #2
 8003076:	701a      	strb	r2, [r3, #0]
      break;
 8003078:	e069      	b.n	800314e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	212c      	movs	r1, #44	; 0x2c
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	4413      	add	r3, r2
 8003086:	3354      	adds	r3, #84	; 0x54
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	212c      	movs	r1, #44	; 0x2c
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	3342      	adds	r3, #66	; 0x42
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
      break;
 80030a0:	e055      	b.n	800314e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	212c      	movs	r1, #44	; 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	3342      	adds	r3, #66	; 0x42
 80030b0:	2202      	movs	r2, #2
 80030b2:	701a      	strb	r2, [r3, #0]
      break;
 80030b4:	e04b      	b.n	800314e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80030b6:	78bb      	ldrb	r3, [r7, #2]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d11d      	bne.n	80030f8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	212c      	movs	r1, #44	; 0x2c
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	3355      	adds	r3, #85	; 0x55
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d109      	bne.n	80030e4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	3342      	adds	r3, #66	; 0x42
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030e2:	e034      	b.n	800314e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	3342      	adds	r3, #66	; 0x42
 80030f2:	2202      	movs	r2, #2
 80030f4:	701a      	strb	r2, [r3, #0]
      break;
 80030f6:	e02a      	b.n	800314e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	3354      	adds	r3, #84	; 0x54
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d109      	bne.n	8003120 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	212c      	movs	r1, #44	; 0x2c
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	4413      	add	r3, r2
 8003118:	3342      	adds	r3, #66	; 0x42
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
      break;
 800311e:	e016      	b.n	800314e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	212c      	movs	r1, #44	; 0x2c
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	4413      	add	r3, r2
 800312c:	3342      	adds	r3, #66	; 0x42
 800312e:	2202      	movs	r2, #2
 8003130:	701a      	strb	r2, [r3, #0]
      break;
 8003132:	e00c      	b.n	800314e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	212c      	movs	r1, #44	; 0x2c
 800313a:	fb01 f303 	mul.w	r3, r1, r3
 800313e:	4413      	add	r3, r2
 8003140:	3342      	adds	r3, #66	; 0x42
 8003142:	2200      	movs	r2, #0
 8003144:	701a      	strb	r2, [r3, #0]
      break;
 8003146:	e002      	b.n	800314e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003148:	bf00      	nop
 800314a:	e000      	b.n	800314e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800314c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	212c      	movs	r1, #44	; 0x2c
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	3344      	adds	r3, #68	; 0x44
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	8b3a      	ldrh	r2, [r7, #24]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	202c      	movs	r0, #44	; 0x2c
 8003168:	fb00 f303 	mul.w	r3, r0, r3
 800316c:	440b      	add	r3, r1
 800316e:	334c      	adds	r3, #76	; 0x4c
 8003170:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	212c      	movs	r1, #44	; 0x2c
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	4413      	add	r3, r2
 800317e:	3360      	adds	r3, #96	; 0x60
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	212c      	movs	r1, #44	; 0x2c
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	3350      	adds	r3, #80	; 0x50
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	3339      	adds	r3, #57	; 0x39
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	3361      	adds	r3, #97	; 0x61
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	222c      	movs	r2, #44	; 0x2c
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	3338      	adds	r3, #56	; 0x38
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	18d1      	adds	r1, r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	f004 fea2 	bl	8007f1c <USB_HC_StartXfer>
 80031d8:	4603      	mov	r3, r0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop

080031e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f004 fbbb 	bl	8007976 <USB_GetMode>
 8003200:	4603      	mov	r3, r0
 8003202:	2b01      	cmp	r3, #1
 8003204:	f040 80ef 	bne.w	80033e6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f004 fb9f 	bl	8007950 <USB_ReadInterrupts>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80e5 	beq.w	80033e4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f004 fb96 	bl	8007950 <USB_ReadInterrupts>
 8003224:	4603      	mov	r3, r0
 8003226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800322a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800322e:	d104      	bne.n	800323a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003238:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f004 fb86 	bl	8007950 <USB_ReadInterrupts>
 8003244:	4603      	mov	r3, r0
 8003246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800324a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800324e:	d104      	bne.n	800325a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003258:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f004 fb76 	bl	8007950 <USB_ReadInterrupts>
 8003264:	4603      	mov	r3, r0
 8003266:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800326a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800326e:	d104      	bne.n	800327a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003278:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f004 fb66 	bl	8007950 <USB_ReadInterrupts>
 8003284:	4603      	mov	r3, r0
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b02      	cmp	r3, #2
 800328c:	d103      	bne.n	8003296 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2202      	movs	r2, #2
 8003294:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f004 fb58 	bl	8007950 <USB_ReadInterrupts>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032aa:	d115      	bne.n	80032d8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80032b4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d108      	bne.n	80032d8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f007 f92a 	bl	800a520 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2101      	movs	r1, #1
 80032d2:	4618      	mov	r0, r3
 80032d4:	f004 fc4e 	bl	8007b74 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f004 fb37 	bl	8007950 <USB_ReadInterrupts>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032ec:	d102      	bne.n	80032f4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f001 f9ff 	bl	80046f2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f004 fb29 	bl	8007950 <USB_ReadInterrupts>
 80032fe:	4603      	mov	r3, r0
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b08      	cmp	r3, #8
 8003306:	d106      	bne.n	8003316 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f007 f8ed 	bl	800a4e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2208      	movs	r2, #8
 8003314:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f004 fb18 	bl	8007950 <USB_ReadInterrupts>
 8003320:	4603      	mov	r3, r0
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	2b10      	cmp	r3, #16
 8003328:	d101      	bne.n	800332e <HAL_HCD_IRQHandler+0x14a>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_HCD_IRQHandler+0x14c>
 800332e:	2300      	movs	r3, #0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d012      	beq.n	800335a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0210 	bic.w	r2, r2, #16
 8003342:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f001 f902 	bl	800454e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 0210 	orr.w	r2, r2, #16
 8003358:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f004 faf6 	bl	8007950 <USB_ReadInterrupts>
 8003364:	4603      	mov	r3, r0
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800336e:	d13a      	bne.n	80033e6 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f004 ff13 	bl	80081a0 <USB_HC_ReadInterrupt>
 800337a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	e025      	b.n	80033ce <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	fa22 f303 	lsr.w	r3, r2, r3
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d018      	beq.n	80033c8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ac:	d106      	bne.n	80033bc <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	4619      	mov	r1, r3
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f8ab 	bl	8003510 <HCD_HC_IN_IRQHandler>
 80033ba:	e005      	b.n	80033c8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	4619      	mov	r1, r3
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fcc6 	bl	8003d54 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	3301      	adds	r3, #1
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d3d4      	bcc.n	8003382 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033e0:	615a      	str	r2, [r3, #20]
 80033e2:	e000      	b.n	80033e6 <HAL_HCD_IRQHandler+0x202>
      return;
 80033e4:	bf00      	nop
    }
  }
}
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_HCD_Start+0x16>
 80033fe:	2302      	movs	r3, #2
 8003400:	e013      	b.n	800342a <HAL_HCD_Start+0x3e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f004 f9ab 	bl	800776a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2101      	movs	r1, #1
 800341a:	4618      	mov	r0, r3
 800341c:	f004 fc0e 	bl	8007c3c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_HCD_Stop+0x16>
 8003444:	2302      	movs	r3, #2
 8003446:	e00d      	b.n	8003464 <HAL_HCD_Stop+0x32>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f005 f80d 	bl	8008474 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f004 fbb5 	bl	8007be8 <USB_ResetPort>
 800347e:	4603      	mov	r3, r0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	212c      	movs	r1, #44	; 0x2c
 800349a:	fb01 f303 	mul.w	r3, r1, r3
 800349e:	4413      	add	r3, r2
 80034a0:	3360      	adds	r3, #96	; 0x60
 80034a2:	781b      	ldrb	r3, [r3, #0]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	3350      	adds	r3, #80	; 0x50
 80034ca:	681b      	ldr	r3, [r3, #0]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f004 fbf9 	bl	8007cdc <USB_GetCurrentFrame>
 80034ea:	4603      	mov	r3, r0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f004 fbd4 	bl	8007cae <USB_GetHostSpeed>
 8003506:	4603      	mov	r3, r0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4413      	add	r3, r2
 8003532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b04      	cmp	r3, #4
 800353e:	d119      	bne.n	8003574 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354c:	461a      	mov	r2, r3
 800354e:	2304      	movs	r3, #4
 8003550:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4413      	add	r3, r2
 800355a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	0151      	lsls	r1, r2, #5
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	440a      	add	r2, r1
 8003568:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800356c:	f043 0302 	orr.w	r3, r3, #2
 8003570:	60d3      	str	r3, [r2, #12]
 8003572:	e101      	b.n	8003778 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358a:	d12b      	bne.n	80035e4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003598:	461a      	mov	r2, r3
 800359a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800359e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	212c      	movs	r1, #44	; 0x2c
 80035a6:	fb01 f303 	mul.w	r3, r1, r3
 80035aa:	4413      	add	r3, r2
 80035ac:	3361      	adds	r3, #97	; 0x61
 80035ae:	2207      	movs	r2, #7
 80035b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	0151      	lsls	r1, r2, #5
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	440a      	add	r2, r1
 80035c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	4611      	mov	r1, r2
 80035dc:	4618      	mov	r0, r3
 80035de:	f004 fdf0 	bl	80081c2 <USB_HC_Halt>
 80035e2:	e0c9      	b.n	8003778 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d109      	bne.n	800360e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4413      	add	r3, r2
 8003602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003606:	461a      	mov	r2, r3
 8003608:	2320      	movs	r3, #32
 800360a:	6093      	str	r3, [r2, #8]
 800360c:	e0b4      	b.n	8003778 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4413      	add	r3, r2
 8003616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b08      	cmp	r3, #8
 8003622:	d133      	bne.n	800368c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4413      	add	r3, r2
 800362c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	0151      	lsls	r1, r2, #5
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	440a      	add	r2, r1
 800363a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800363e:	f043 0302 	orr.w	r3, r3, #2
 8003642:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	212c      	movs	r1, #44	; 0x2c
 800364a:	fb01 f303 	mul.w	r3, r1, r3
 800364e:	4413      	add	r3, r2
 8003650:	3361      	adds	r3, #97	; 0x61
 8003652:	2205      	movs	r2, #5
 8003654:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4413      	add	r3, r2
 800365e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003662:	461a      	mov	r2, r3
 8003664:	2310      	movs	r3, #16
 8003666:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4413      	add	r3, r2
 8003670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003674:	461a      	mov	r2, r3
 8003676:	2308      	movs	r3, #8
 8003678:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f004 fd9c 	bl	80081c2 <USB_HC_Halt>
 800368a:	e075      	b.n	8003778 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4413      	add	r3, r2
 8003694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a2:	d134      	bne.n	800370e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	0151      	lsls	r1, r2, #5
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	440a      	add	r2, r1
 80036ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036be:	f043 0302 	orr.w	r3, r3, #2
 80036c2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	212c      	movs	r1, #44	; 0x2c
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	3361      	adds	r3, #97	; 0x61
 80036d2:	2208      	movs	r2, #8
 80036d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e2:	461a      	mov	r2, r3
 80036e4:	2310      	movs	r3, #16
 80036e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	461a      	mov	r2, r3
 80036f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036fa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	4611      	mov	r1, r2
 8003706:	4618      	mov	r0, r3
 8003708:	f004 fd5b 	bl	80081c2 <USB_HC_Halt>
 800370c:	e034      	b.n	8003778 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4413      	add	r3, r2
 8003716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003720:	2b80      	cmp	r3, #128	; 0x80
 8003722:	d129      	bne.n	8003778 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4413      	add	r3, r2
 800372c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	0151      	lsls	r1, r2, #5
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	440a      	add	r2, r1
 800373a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800373e:	f043 0302 	orr.w	r3, r3, #2
 8003742:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	212c      	movs	r1, #44	; 0x2c
 800374a:	fb01 f303 	mul.w	r3, r1, r3
 800374e:	4413      	add	r3, r2
 8003750:	3361      	adds	r3, #97	; 0x61
 8003752:	2206      	movs	r2, #6
 8003754:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	4611      	mov	r1, r2
 8003760:	4618      	mov	r0, r3
 8003762:	f004 fd2e 	bl	80081c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4413      	add	r3, r2
 800376e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003772:	461a      	mov	r2, r3
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4413      	add	r3, r2
 8003780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800378a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800378e:	d122      	bne.n	80037d6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4413      	add	r3, r2
 8003798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	0151      	lsls	r1, r2, #5
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	440a      	add	r2, r1
 80037a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037aa:	f043 0302 	orr.w	r3, r3, #2
 80037ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f004 fd01 	bl	80081c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037cc:	461a      	mov	r2, r3
 80037ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037d2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80037d4:	e2ba      	b.n	8003d4c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	f040 811b 	bne.w	8003a24 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d019      	beq.n	800382a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	212c      	movs	r1, #44	; 0x2c
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	4413      	add	r3, r2
 8003802:	3348      	adds	r3, #72	; 0x48
 8003804:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	0159      	lsls	r1, r3, #5
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	440b      	add	r3, r1
 800380e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003818:	1ad2      	subs	r2, r2, r3
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	202c      	movs	r0, #44	; 0x2c
 8003820:	fb00 f303 	mul.w	r3, r0, r3
 8003824:	440b      	add	r3, r1
 8003826:	3350      	adds	r3, #80	; 0x50
 8003828:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	212c      	movs	r1, #44	; 0x2c
 8003830:	fb01 f303 	mul.w	r3, r1, r3
 8003834:	4413      	add	r3, r2
 8003836:	3361      	adds	r3, #97	; 0x61
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	212c      	movs	r1, #44	; 0x2c
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	4413      	add	r3, r2
 8003848:	335c      	adds	r3, #92	; 0x5c
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4413      	add	r3, r2
 8003856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385a:	461a      	mov	r2, r3
 800385c:	2301      	movs	r3, #1
 800385e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	212c      	movs	r1, #44	; 0x2c
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4413      	add	r3, r2
 800386c:	333f      	adds	r3, #63	; 0x3f
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d009      	beq.n	8003888 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	212c      	movs	r1, #44	; 0x2c
 800387a:	fb01 f303 	mul.w	r3, r1, r3
 800387e:	4413      	add	r3, r2
 8003880:	333f      	adds	r3, #63	; 0x3f
 8003882:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003884:	2b02      	cmp	r3, #2
 8003886:	d121      	bne.n	80038cc <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4413      	add	r3, r2
 8003890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	0151      	lsls	r1, r2, #5
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	440a      	add	r2, r1
 800389e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038a2:	f043 0302 	orr.w	r3, r3, #2
 80038a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	4611      	mov	r1, r2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f004 fc85 	bl	80081c2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c4:	461a      	mov	r2, r3
 80038c6:	2310      	movs	r3, #16
 80038c8:	6093      	str	r3, [r2, #8]
 80038ca:	e066      	b.n	800399a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	212c      	movs	r1, #44	; 0x2c
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	333f      	adds	r3, #63	; 0x3f
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d127      	bne.n	8003930 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	0151      	lsls	r1, r2, #5
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	440a      	add	r2, r1
 80038f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038fe:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	212c      	movs	r1, #44	; 0x2c
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	4413      	add	r3, r2
 800390c:	3360      	adds	r3, #96	; 0x60
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	b2d9      	uxtb	r1, r3
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	202c      	movs	r0, #44	; 0x2c
 800391c:	fb00 f303 	mul.w	r3, r0, r3
 8003920:	4413      	add	r3, r2
 8003922:	3360      	adds	r3, #96	; 0x60
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f006 fe07 	bl	800a53c <HAL_HCD_HC_NotifyURBChange_Callback>
 800392e:	e034      	b.n	800399a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	212c      	movs	r1, #44	; 0x2c
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	4413      	add	r3, r2
 800393c:	333f      	adds	r3, #63	; 0x3f
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d12a      	bne.n	800399a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	212c      	movs	r1, #44	; 0x2c
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	4413      	add	r3, r2
 8003950:	3360      	adds	r3, #96	; 0x60
 8003952:	2201      	movs	r2, #1
 8003954:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	212c      	movs	r1, #44	; 0x2c
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	4413      	add	r3, r2
 8003962:	3354      	adds	r3, #84	; 0x54
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	f083 0301 	eor.w	r3, r3, #1
 800396a:	b2d8      	uxtb	r0, r3
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	212c      	movs	r1, #44	; 0x2c
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	4413      	add	r3, r2
 8003978:	3354      	adds	r3, #84	; 0x54
 800397a:	4602      	mov	r2, r0
 800397c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	b2d9      	uxtb	r1, r3
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	202c      	movs	r0, #44	; 0x2c
 8003988:	fb00 f303 	mul.w	r3, r0, r3
 800398c:	4413      	add	r3, r2
 800398e:	3360      	adds	r3, #96	; 0x60
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f006 fdd1 	bl	800a53c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d12b      	bne.n	80039fa <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	212c      	movs	r1, #44	; 0x2c
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	4413      	add	r3, r2
 80039ae:	3348      	adds	r3, #72	; 0x48
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	202c      	movs	r0, #44	; 0x2c
 80039b8:	fb00 f202 	mul.w	r2, r0, r2
 80039bc:	440a      	add	r2, r1
 80039be:	3240      	adds	r2, #64	; 0x40
 80039c0:	8812      	ldrh	r2, [r2, #0]
 80039c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 81be 	beq.w	8003d4c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	212c      	movs	r1, #44	; 0x2c
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	4413      	add	r3, r2
 80039dc:	3354      	adds	r3, #84	; 0x54
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	f083 0301 	eor.w	r3, r3, #1
 80039e4:	b2d8      	uxtb	r0, r3
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	212c      	movs	r1, #44	; 0x2c
 80039ec:	fb01 f303 	mul.w	r3, r1, r3
 80039f0:	4413      	add	r3, r2
 80039f2:	3354      	adds	r3, #84	; 0x54
 80039f4:	4602      	mov	r2, r0
 80039f6:	701a      	strb	r2, [r3, #0]
}
 80039f8:	e1a8      	b.n	8003d4c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	212c      	movs	r1, #44	; 0x2c
 8003a00:	fb01 f303 	mul.w	r3, r1, r3
 8003a04:	4413      	add	r3, r2
 8003a06:	3354      	adds	r3, #84	; 0x54
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	f083 0301 	eor.w	r3, r3, #1
 8003a0e:	b2d8      	uxtb	r0, r3
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	212c      	movs	r1, #44	; 0x2c
 8003a16:	fb01 f303 	mul.w	r3, r1, r3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3354      	adds	r3, #84	; 0x54
 8003a1e:	4602      	mov	r2, r0
 8003a20:	701a      	strb	r2, [r3, #0]
}
 8003a22:	e193      	b.n	8003d4c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	f040 8106 	bne.w	8003c48 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	0151      	lsls	r1, r2, #5
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	440a      	add	r2, r1
 8003a52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a56:	f023 0302 	bic.w	r3, r3, #2
 8003a5a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	212c      	movs	r1, #44	; 0x2c
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	3361      	adds	r3, #97	; 0x61
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d109      	bne.n	8003a84 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	212c      	movs	r1, #44	; 0x2c
 8003a76:	fb01 f303 	mul.w	r3, r1, r3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3360      	adds	r3, #96	; 0x60
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	e0c9      	b.n	8003c18 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	212c      	movs	r1, #44	; 0x2c
 8003a8a:	fb01 f303 	mul.w	r3, r1, r3
 8003a8e:	4413      	add	r3, r2
 8003a90:	3361      	adds	r3, #97	; 0x61
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b05      	cmp	r3, #5
 8003a96:	d109      	bne.n	8003aac <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	212c      	movs	r1, #44	; 0x2c
 8003a9e:	fb01 f303 	mul.w	r3, r1, r3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3360      	adds	r3, #96	; 0x60
 8003aa6:	2205      	movs	r2, #5
 8003aa8:	701a      	strb	r2, [r3, #0]
 8003aaa:	e0b5      	b.n	8003c18 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	212c      	movs	r1, #44	; 0x2c
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3361      	adds	r3, #97	; 0x61
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b06      	cmp	r3, #6
 8003abe:	d009      	beq.n	8003ad4 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	212c      	movs	r1, #44	; 0x2c
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	3361      	adds	r3, #97	; 0x61
 8003ace:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d150      	bne.n	8003b76 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	212c      	movs	r1, #44	; 0x2c
 8003ada:	fb01 f303 	mul.w	r3, r1, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	335c      	adds	r3, #92	; 0x5c
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	202c      	movs	r0, #44	; 0x2c
 8003aec:	fb00 f303 	mul.w	r3, r0, r3
 8003af0:	440b      	add	r3, r1
 8003af2:	335c      	adds	r3, #92	; 0x5c
 8003af4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	212c      	movs	r1, #44	; 0x2c
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	335c      	adds	r3, #92	; 0x5c
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d912      	bls.n	8003b30 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	212c      	movs	r1, #44	; 0x2c
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	4413      	add	r3, r2
 8003b16:	335c      	adds	r3, #92	; 0x5c
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	212c      	movs	r1, #44	; 0x2c
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	3360      	adds	r3, #96	; 0x60
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b2e:	e073      	b.n	8003c18 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	212c      	movs	r1, #44	; 0x2c
 8003b36:	fb01 f303 	mul.w	r3, r1, r3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3360      	adds	r3, #96	; 0x60
 8003b3e:	2202      	movs	r2, #2
 8003b40:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b58:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b60:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6e:	461a      	mov	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b74:	e050      	b.n	8003c18 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	212c      	movs	r1, #44	; 0x2c
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	4413      	add	r3, r2
 8003b82:	3361      	adds	r3, #97	; 0x61
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d122      	bne.n	8003bd0 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	212c      	movs	r1, #44	; 0x2c
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	4413      	add	r3, r2
 8003b96:	3360      	adds	r3, #96	; 0x60
 8003b98:	2202      	movs	r2, #2
 8003b9a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bb2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bba:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e023      	b.n	8003c18 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	212c      	movs	r1, #44	; 0x2c
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	4413      	add	r3, r2
 8003bdc:	3361      	adds	r3, #97	; 0x61
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b07      	cmp	r3, #7
 8003be2:	d119      	bne.n	8003c18 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	212c      	movs	r1, #44	; 0x2c
 8003bea:	fb01 f303 	mul.w	r3, r1, r3
 8003bee:	4413      	add	r3, r2
 8003bf0:	335c      	adds	r3, #92	; 0x5c
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	202c      	movs	r0, #44	; 0x2c
 8003bfc:	fb00 f303 	mul.w	r3, r0, r3
 8003c00:	440b      	add	r3, r1
 8003c02:	335c      	adds	r3, #92	; 0x5c
 8003c04:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	212c      	movs	r1, #44	; 0x2c
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	3360      	adds	r3, #96	; 0x60
 8003c14:	2204      	movs	r2, #4
 8003c16:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c24:	461a      	mov	r2, r3
 8003c26:	2302      	movs	r3, #2
 8003c28:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	b2d9      	uxtb	r1, r3
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	202c      	movs	r0, #44	; 0x2c
 8003c34:	fb00 f303 	mul.w	r3, r0, r3
 8003c38:	4413      	add	r3, r2
 8003c3a:	3360      	adds	r3, #96	; 0x60
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f006 fc7b 	bl	800a53c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c46:	e081      	b.n	8003d4c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	d176      	bne.n	8003d4c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	212c      	movs	r1, #44	; 0x2c
 8003c64:	fb01 f303 	mul.w	r3, r1, r3
 8003c68:	4413      	add	r3, r2
 8003c6a:	333f      	adds	r3, #63	; 0x3f
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d121      	bne.n	8003cb6 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	212c      	movs	r1, #44	; 0x2c
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	335c      	adds	r3, #92	; 0x5c
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	0151      	lsls	r1, r2, #5
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	440a      	add	r2, r1
 8003c9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c9e:	f043 0302 	orr.w	r3, r3, #2
 8003ca2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	4611      	mov	r1, r2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f004 fa87 	bl	80081c2 <USB_HC_Halt>
 8003cb4:	e041      	b.n	8003d3a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	212c      	movs	r1, #44	; 0x2c
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	333f      	adds	r3, #63	; 0x3f
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	212c      	movs	r1, #44	; 0x2c
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	333f      	adds	r3, #63	; 0x3f
 8003cd8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d12d      	bne.n	8003d3a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	212c      	movs	r1, #44	; 0x2c
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	4413      	add	r3, r2
 8003cea:	335c      	adds	r3, #92	; 0x5c
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d120      	bne.n	8003d3a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	212c      	movs	r1, #44	; 0x2c
 8003cfe:	fb01 f303 	mul.w	r3, r1, r3
 8003d02:	4413      	add	r3, r2
 8003d04:	3361      	adds	r3, #97	; 0x61
 8003d06:	2203      	movs	r2, #3
 8003d08:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	0151      	lsls	r1, r2, #5
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	440a      	add	r2, r1
 8003d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d24:	f043 0302 	orr.w	r3, r3, #2
 8003d28:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	4611      	mov	r1, r2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f004 fa44 	bl	80081c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d46:	461a      	mov	r2, r3
 8003d48:	2310      	movs	r3, #16
 8003d4a:	6093      	str	r3, [r2, #8]
}
 8003d4c:	bf00      	nop
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d119      	bne.n	8003db8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d90:	461a      	mov	r2, r3
 8003d92:	2304      	movs	r3, #4
 8003d94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	0151      	lsls	r1, r2, #5
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	440a      	add	r2, r1
 8003dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003db0:	f043 0302 	orr.w	r3, r3, #2
 8003db4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003db6:	e3c6      	b.n	8004546 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d13e      	bne.n	8003e4c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2320      	movs	r3, #32
 8003dde:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	212c      	movs	r1, #44	; 0x2c
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	333d      	adds	r3, #61	; 0x3d
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	f040 83a8 	bne.w	8004546 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	212c      	movs	r1, #44	; 0x2c
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	4413      	add	r3, r2
 8003e02:	333d      	adds	r3, #61	; 0x3d
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	212c      	movs	r1, #44	; 0x2c
 8003e0e:	fb01 f303 	mul.w	r3, r1, r3
 8003e12:	4413      	add	r3, r2
 8003e14:	3360      	adds	r3, #96	; 0x60
 8003e16:	2202      	movs	r2, #2
 8003e18:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	0151      	lsls	r1, r2, #5
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	440a      	add	r2, r1
 8003e30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e34:	f043 0302 	orr.w	r3, r3, #2
 8003e38:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f004 f9bc 	bl	80081c2 <USB_HC_Halt>
}
 8003e4a:	e37c      	b.n	8004546 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e62:	d122      	bne.n	8003eaa <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	0151      	lsls	r1, r2, #5
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	440a      	add	r2, r1
 8003e7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e7e:	f043 0302 	orr.w	r3, r3, #2
 8003e82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f004 f997 	bl	80081c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ea6:	6093      	str	r3, [r2, #8]
}
 8003ea8:	e34d      	b.n	8004546 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d150      	bne.n	8003f62 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	212c      	movs	r1, #44	; 0x2c
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	335c      	adds	r3, #92	; 0x5c
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b40      	cmp	r3, #64	; 0x40
 8003ee6:	d111      	bne.n	8003f0c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	212c      	movs	r1, #44	; 0x2c
 8003eee:	fb01 f303 	mul.w	r3, r1, r3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	333d      	adds	r3, #61	; 0x3d
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f06:	461a      	mov	r2, r3
 8003f08:	2340      	movs	r3, #64	; 0x40
 8003f0a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	0151      	lsls	r1, r2, #5
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	440a      	add	r2, r1
 8003f22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f26:	f043 0302 	orr.w	r3, r3, #2
 8003f2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	4611      	mov	r1, r2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f004 f943 	bl	80081c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f48:	461a      	mov	r2, r3
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	212c      	movs	r1, #44	; 0x2c
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	4413      	add	r3, r2
 8003f5a:	3361      	adds	r3, #97	; 0x61
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	701a      	strb	r2, [r3, #0]
}
 8003f60:	e2f1      	b.n	8004546 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f74:	2b40      	cmp	r3, #64	; 0x40
 8003f76:	d13c      	bne.n	8003ff2 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	212c      	movs	r1, #44	; 0x2c
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	4413      	add	r3, r2
 8003f84:	3361      	adds	r3, #97	; 0x61
 8003f86:	2204      	movs	r2, #4
 8003f88:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	212c      	movs	r1, #44	; 0x2c
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	4413      	add	r3, r2
 8003f96:	333d      	adds	r3, #61	; 0x3d
 8003f98:	2201      	movs	r2, #1
 8003f9a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	212c      	movs	r1, #44	; 0x2c
 8003fa2:	fb01 f303 	mul.w	r3, r1, r3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	335c      	adds	r3, #92	; 0x5c
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fc8:	f043 0302 	orr.w	r3, r3, #2
 8003fcc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f004 f8f2 	bl	80081c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fea:	461a      	mov	r2, r3
 8003fec:	2340      	movs	r3, #64	; 0x40
 8003fee:	6093      	str	r3, [r2, #8]
}
 8003ff0:	e2a9      	b.n	8004546 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0308 	and.w	r3, r3, #8
 8004004:	2b08      	cmp	r3, #8
 8004006:	d12a      	bne.n	800405e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	4413      	add	r3, r2
 8004010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004014:	461a      	mov	r2, r3
 8004016:	2308      	movs	r3, #8
 8004018:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	4413      	add	r3, r2
 8004022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	0151      	lsls	r1, r2, #5
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	440a      	add	r2, r1
 8004030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004034:	f043 0302 	orr.w	r3, r3, #2
 8004038:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f004 f8bc 	bl	80081c2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	212c      	movs	r1, #44	; 0x2c
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	4413      	add	r3, r2
 8004056:	3361      	adds	r3, #97	; 0x61
 8004058:	2205      	movs	r2, #5
 800405a:	701a      	strb	r2, [r3, #0]
}
 800405c:	e273      	b.n	8004546 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	4413      	add	r3, r2
 8004066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b10      	cmp	r3, #16
 8004072:	d150      	bne.n	8004116 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	212c      	movs	r1, #44	; 0x2c
 800407a:	fb01 f303 	mul.w	r3, r1, r3
 800407e:	4413      	add	r3, r2
 8004080:	335c      	adds	r3, #92	; 0x5c
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	212c      	movs	r1, #44	; 0x2c
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	4413      	add	r3, r2
 8004092:	3361      	adds	r3, #97	; 0x61
 8004094:	2203      	movs	r2, #3
 8004096:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	212c      	movs	r1, #44	; 0x2c
 800409e:	fb01 f303 	mul.w	r3, r1, r3
 80040a2:	4413      	add	r3, r2
 80040a4:	333d      	adds	r3, #61	; 0x3d
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d112      	bne.n	80040d2 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	212c      	movs	r1, #44	; 0x2c
 80040b2:	fb01 f303 	mul.w	r3, r1, r3
 80040b6:	4413      	add	r3, r2
 80040b8:	333c      	adds	r3, #60	; 0x3c
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d108      	bne.n	80040d2 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	212c      	movs	r1, #44	; 0x2c
 80040c6:	fb01 f303 	mul.w	r3, r1, r3
 80040ca:	4413      	add	r3, r2
 80040cc:	333d      	adds	r3, #61	; 0x3d
 80040ce:	2201      	movs	r2, #1
 80040d0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	0151      	lsls	r1, r2, #5
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	440a      	add	r2, r1
 80040e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040ec:	f043 0302 	orr.w	r3, r3, #2
 80040f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	4611      	mov	r1, r2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f004 f860 	bl	80081c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	4413      	add	r3, r2
 800410a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410e:	461a      	mov	r2, r3
 8004110:	2310      	movs	r3, #16
 8004112:	6093      	str	r3, [r2, #8]
}
 8004114:	e217      	b.n	8004546 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	4413      	add	r3, r2
 800411e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004128:	2b80      	cmp	r3, #128	; 0x80
 800412a:	d174      	bne.n	8004216 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d121      	bne.n	8004178 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	212c      	movs	r1, #44	; 0x2c
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	4413      	add	r3, r2
 8004140:	3361      	adds	r3, #97	; 0x61
 8004142:	2206      	movs	r2, #6
 8004144:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	4413      	add	r3, r2
 800414e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	0151      	lsls	r1, r2, #5
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	440a      	add	r2, r1
 800415c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004160:	f043 0302 	orr.w	r3, r3, #2
 8004164:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	4611      	mov	r1, r2
 8004170:	4618      	mov	r0, r3
 8004172:	f004 f826 	bl	80081c2 <USB_HC_Halt>
 8004176:	e044      	b.n	8004202 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	212c      	movs	r1, #44	; 0x2c
 800417e:	fb01 f303 	mul.w	r3, r1, r3
 8004182:	4413      	add	r3, r2
 8004184:	335c      	adds	r3, #92	; 0x5c
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	202c      	movs	r0, #44	; 0x2c
 8004190:	fb00 f303 	mul.w	r3, r0, r3
 8004194:	440b      	add	r3, r1
 8004196:	335c      	adds	r3, #92	; 0x5c
 8004198:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	212c      	movs	r1, #44	; 0x2c
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	4413      	add	r3, r2
 80041a6:	335c      	adds	r3, #92	; 0x5c
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d920      	bls.n	80041f0 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	212c      	movs	r1, #44	; 0x2c
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	4413      	add	r3, r2
 80041ba:	335c      	adds	r3, #92	; 0x5c
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	212c      	movs	r1, #44	; 0x2c
 80041c6:	fb01 f303 	mul.w	r3, r1, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	3360      	adds	r3, #96	; 0x60
 80041ce:	2204      	movs	r2, #4
 80041d0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	b2d9      	uxtb	r1, r3
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	202c      	movs	r0, #44	; 0x2c
 80041dc:	fb00 f303 	mul.w	r3, r0, r3
 80041e0:	4413      	add	r3, r2
 80041e2:	3360      	adds	r3, #96	; 0x60
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f006 f9a7 	bl	800a53c <HAL_HCD_HC_NotifyURBChange_Callback>
 80041ee:	e008      	b.n	8004202 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	212c      	movs	r1, #44	; 0x2c
 80041f6:	fb01 f303 	mul.w	r3, r1, r3
 80041fa:	4413      	add	r3, r2
 80041fc:	3360      	adds	r3, #96	; 0x60
 80041fe:	2202      	movs	r2, #2
 8004200:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	4413      	add	r3, r2
 800420a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420e:	461a      	mov	r2, r3
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	6093      	str	r3, [r2, #8]
}
 8004214:	e197      	b.n	8004546 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	4413      	add	r3, r2
 800421e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422c:	d134      	bne.n	8004298 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	4413      	add	r3, r2
 8004236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	0151      	lsls	r1, r2, #5
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	440a      	add	r2, r1
 8004244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004248:	f043 0302 	orr.w	r3, r3, #2
 800424c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	4611      	mov	r1, r2
 8004258:	4618      	mov	r0, r3
 800425a:	f003 ffb2 	bl	80081c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	4413      	add	r3, r2
 8004266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426a:	461a      	mov	r2, r3
 800426c:	2310      	movs	r3, #16
 800426e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	4413      	add	r3, r2
 8004278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427c:	461a      	mov	r2, r3
 800427e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004282:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	212c      	movs	r1, #44	; 0x2c
 800428a:	fb01 f303 	mul.w	r3, r1, r3
 800428e:	4413      	add	r3, r2
 8004290:	3361      	adds	r3, #97	; 0x61
 8004292:	2208      	movs	r2, #8
 8004294:	701a      	strb	r2, [r3, #0]
}
 8004296:	e156      	b.n	8004546 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	f040 814b 	bne.w	8004546 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	0151      	lsls	r1, r2, #5
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	440a      	add	r2, r1
 80042c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ca:	f023 0302 	bic.w	r3, r3, #2
 80042ce:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	212c      	movs	r1, #44	; 0x2c
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	4413      	add	r3, r2
 80042dc:	3361      	adds	r3, #97	; 0x61
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d179      	bne.n	80043d8 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	212c      	movs	r1, #44	; 0x2c
 80042ea:	fb01 f303 	mul.w	r3, r1, r3
 80042ee:	4413      	add	r3, r2
 80042f0:	3360      	adds	r3, #96	; 0x60
 80042f2:	2201      	movs	r2, #1
 80042f4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	212c      	movs	r1, #44	; 0x2c
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	4413      	add	r3, r2
 8004302:	333f      	adds	r3, #63	; 0x3f
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d00a      	beq.n	8004320 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	212c      	movs	r1, #44	; 0x2c
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	4413      	add	r3, r2
 8004316:	333f      	adds	r3, #63	; 0x3f
 8004318:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800431a:	2b03      	cmp	r3, #3
 800431c:	f040 80fc 	bne.w	8004518 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d142      	bne.n	80043ae <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	212c      	movs	r1, #44	; 0x2c
 800432e:	fb01 f303 	mul.w	r3, r1, r3
 8004332:	4413      	add	r3, r2
 8004334:	334c      	adds	r3, #76	; 0x4c
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80ed 	beq.w	8004518 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	212c      	movs	r1, #44	; 0x2c
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	4413      	add	r3, r2
 800434a:	334c      	adds	r3, #76	; 0x4c
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	202c      	movs	r0, #44	; 0x2c
 8004354:	fb00 f202 	mul.w	r2, r0, r2
 8004358:	440a      	add	r2, r1
 800435a:	3240      	adds	r2, #64	; 0x40
 800435c:	8812      	ldrh	r2, [r2, #0]
 800435e:	4413      	add	r3, r2
 8004360:	3b01      	subs	r3, #1
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	202c      	movs	r0, #44	; 0x2c
 8004368:	fb00 f202 	mul.w	r2, r0, r2
 800436c:	440a      	add	r2, r1
 800436e:	3240      	adds	r2, #64	; 0x40
 8004370:	8812      	ldrh	r2, [r2, #0]
 8004372:	fbb3 f3f2 	udiv	r3, r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80ca 	beq.w	8004518 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	212c      	movs	r1, #44	; 0x2c
 800438a:	fb01 f303 	mul.w	r3, r1, r3
 800438e:	4413      	add	r3, r2
 8004390:	3355      	adds	r3, #85	; 0x55
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	f083 0301 	eor.w	r3, r3, #1
 8004398:	b2d8      	uxtb	r0, r3
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	212c      	movs	r1, #44	; 0x2c
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	4413      	add	r3, r2
 80043a6:	3355      	adds	r3, #85	; 0x55
 80043a8:	4602      	mov	r2, r0
 80043aa:	701a      	strb	r2, [r3, #0]
 80043ac:	e0b4      	b.n	8004518 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	212c      	movs	r1, #44	; 0x2c
 80043b4:	fb01 f303 	mul.w	r3, r1, r3
 80043b8:	4413      	add	r3, r2
 80043ba:	3355      	adds	r3, #85	; 0x55
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	f083 0301 	eor.w	r3, r3, #1
 80043c2:	b2d8      	uxtb	r0, r3
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	212c      	movs	r1, #44	; 0x2c
 80043ca:	fb01 f303 	mul.w	r3, r1, r3
 80043ce:	4413      	add	r3, r2
 80043d0:	3355      	adds	r3, #85	; 0x55
 80043d2:	4602      	mov	r2, r0
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	e09f      	b.n	8004518 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	212c      	movs	r1, #44	; 0x2c
 80043de:	fb01 f303 	mul.w	r3, r1, r3
 80043e2:	4413      	add	r3, r2
 80043e4:	3361      	adds	r3, #97	; 0x61
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d109      	bne.n	8004400 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	212c      	movs	r1, #44	; 0x2c
 80043f2:	fb01 f303 	mul.w	r3, r1, r3
 80043f6:	4413      	add	r3, r2
 80043f8:	3360      	adds	r3, #96	; 0x60
 80043fa:	2202      	movs	r2, #2
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	e08b      	b.n	8004518 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	212c      	movs	r1, #44	; 0x2c
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	4413      	add	r3, r2
 800440c:	3361      	adds	r3, #97	; 0x61
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b04      	cmp	r3, #4
 8004412:	d109      	bne.n	8004428 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	212c      	movs	r1, #44	; 0x2c
 800441a:	fb01 f303 	mul.w	r3, r1, r3
 800441e:	4413      	add	r3, r2
 8004420:	3360      	adds	r3, #96	; 0x60
 8004422:	2202      	movs	r2, #2
 8004424:	701a      	strb	r2, [r3, #0]
 8004426:	e077      	b.n	8004518 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	212c      	movs	r1, #44	; 0x2c
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	4413      	add	r3, r2
 8004434:	3361      	adds	r3, #97	; 0x61
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b05      	cmp	r3, #5
 800443a:	d109      	bne.n	8004450 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	212c      	movs	r1, #44	; 0x2c
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	4413      	add	r3, r2
 8004448:	3360      	adds	r3, #96	; 0x60
 800444a:	2205      	movs	r2, #5
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	e063      	b.n	8004518 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	212c      	movs	r1, #44	; 0x2c
 8004456:	fb01 f303 	mul.w	r3, r1, r3
 800445a:	4413      	add	r3, r2
 800445c:	3361      	adds	r3, #97	; 0x61
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b06      	cmp	r3, #6
 8004462:	d009      	beq.n	8004478 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	212c      	movs	r1, #44	; 0x2c
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	4413      	add	r3, r2
 8004470:	3361      	adds	r3, #97	; 0x61
 8004472:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004474:	2b08      	cmp	r3, #8
 8004476:	d14f      	bne.n	8004518 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	212c      	movs	r1, #44	; 0x2c
 800447e:	fb01 f303 	mul.w	r3, r1, r3
 8004482:	4413      	add	r3, r2
 8004484:	335c      	adds	r3, #92	; 0x5c
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	202c      	movs	r0, #44	; 0x2c
 8004490:	fb00 f303 	mul.w	r3, r0, r3
 8004494:	440b      	add	r3, r1
 8004496:	335c      	adds	r3, #92	; 0x5c
 8004498:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	212c      	movs	r1, #44	; 0x2c
 80044a0:	fb01 f303 	mul.w	r3, r1, r3
 80044a4:	4413      	add	r3, r2
 80044a6:	335c      	adds	r3, #92	; 0x5c
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d912      	bls.n	80044d4 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	212c      	movs	r1, #44	; 0x2c
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	4413      	add	r3, r2
 80044ba:	335c      	adds	r3, #92	; 0x5c
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	212c      	movs	r1, #44	; 0x2c
 80044c6:	fb01 f303 	mul.w	r3, r1, r3
 80044ca:	4413      	add	r3, r2
 80044cc:	3360      	adds	r3, #96	; 0x60
 80044ce:	2204      	movs	r2, #4
 80044d0:	701a      	strb	r2, [r3, #0]
 80044d2:	e021      	b.n	8004518 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	212c      	movs	r1, #44	; 0x2c
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	4413      	add	r3, r2
 80044e0:	3360      	adds	r3, #96	; 0x60
 80044e2:	2202      	movs	r2, #2
 80044e4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044fc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004504:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	4413      	add	r3, r2
 800450e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004512:	461a      	mov	r2, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	4413      	add	r3, r2
 8004520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004524:	461a      	mov	r2, r3
 8004526:	2302      	movs	r3, #2
 8004528:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	b2d9      	uxtb	r1, r3
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	202c      	movs	r0, #44	; 0x2c
 8004534:	fb00 f303 	mul.w	r3, r0, r3
 8004538:	4413      	add	r3, r2
 800453a:	3360      	adds	r3, #96	; 0x60
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f005 fffb 	bl	800a53c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004546:	bf00      	nop
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b08a      	sub	sp, #40	; 0x28
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	0c5b      	lsrs	r3, r3, #17
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004582:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d004      	beq.n	8004594 <HCD_RXQLVL_IRQHandler+0x46>
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b05      	cmp	r3, #5
 800458e:	f000 80a9 	beq.w	80046e4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004592:	e0aa      	b.n	80046ea <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 80a6 	beq.w	80046e8 <HCD_RXQLVL_IRQHandler+0x19a>
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	212c      	movs	r1, #44	; 0x2c
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	3344      	adds	r3, #68	; 0x44
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 809b 	beq.w	80046e8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	212c      	movs	r1, #44	; 0x2c
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	4413      	add	r3, r2
 80045be:	3350      	adds	r3, #80	; 0x50
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	441a      	add	r2, r3
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	202c      	movs	r0, #44	; 0x2c
 80045cc:	fb00 f303 	mul.w	r3, r0, r3
 80045d0:	440b      	add	r3, r1
 80045d2:	334c      	adds	r3, #76	; 0x4c
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d87a      	bhi.n	80046d0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	212c      	movs	r1, #44	; 0x2c
 80045e4:	fb01 f303 	mul.w	r3, r1, r3
 80045e8:	4413      	add	r3, r2
 80045ea:	3344      	adds	r3, #68	; 0x44
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	b292      	uxth	r2, r2
 80045f2:	4619      	mov	r1, r3
 80045f4:	f003 f983 	bl	80078fe <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	212c      	movs	r1, #44	; 0x2c
 80045fe:	fb01 f303 	mul.w	r3, r1, r3
 8004602:	4413      	add	r3, r2
 8004604:	3344      	adds	r3, #68	; 0x44
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	441a      	add	r2, r3
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	202c      	movs	r0, #44	; 0x2c
 8004612:	fb00 f303 	mul.w	r3, r0, r3
 8004616:	440b      	add	r3, r1
 8004618:	3344      	adds	r3, #68	; 0x44
 800461a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	212c      	movs	r1, #44	; 0x2c
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	4413      	add	r3, r2
 8004628:	3350      	adds	r3, #80	; 0x50
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	441a      	add	r2, r3
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	202c      	movs	r0, #44	; 0x2c
 8004636:	fb00 f303 	mul.w	r3, r0, r3
 800463a:	440b      	add	r3, r1
 800463c:	3350      	adds	r3, #80	; 0x50
 800463e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	4413      	add	r3, r2
 8004648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	0cdb      	lsrs	r3, r3, #19
 8004650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004654:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	212c      	movs	r1, #44	; 0x2c
 800465c:	fb01 f303 	mul.w	r3, r1, r3
 8004660:	4413      	add	r3, r2
 8004662:	3340      	adds	r3, #64	; 0x40
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	4293      	cmp	r3, r2
 800466c:	d13c      	bne.n	80046e8 <HCD_RXQLVL_IRQHandler+0x19a>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d039      	beq.n	80046e8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	4413      	add	r3, r2
 800467c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800468a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004692:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	4413      	add	r3, r2
 800469c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a0:	461a      	mov	r2, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	212c      	movs	r1, #44	; 0x2c
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	4413      	add	r3, r2
 80046b2:	3354      	adds	r3, #84	; 0x54
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	f083 0301 	eor.w	r3, r3, #1
 80046ba:	b2d8      	uxtb	r0, r3
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	212c      	movs	r1, #44	; 0x2c
 80046c2:	fb01 f303 	mul.w	r3, r1, r3
 80046c6:	4413      	add	r3, r2
 80046c8:	3354      	adds	r3, #84	; 0x54
 80046ca:	4602      	mov	r2, r0
 80046cc:	701a      	strb	r2, [r3, #0]
      break;
 80046ce:	e00b      	b.n	80046e8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	212c      	movs	r1, #44	; 0x2c
 80046d6:	fb01 f303 	mul.w	r3, r1, r3
 80046da:	4413      	add	r3, r2
 80046dc:	3360      	adds	r3, #96	; 0x60
 80046de:	2204      	movs	r2, #4
 80046e0:	701a      	strb	r2, [r3, #0]
      break;
 80046e2:	e001      	b.n	80046e8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80046e4:	bf00      	nop
 80046e6:	e000      	b.n	80046ea <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80046e8:	bf00      	nop
  }
}
 80046ea:	bf00      	nop
 80046ec:	3728      	adds	r7, #40	; 0x28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b086      	sub	sp, #24
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800471e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b02      	cmp	r3, #2
 8004728:	d10b      	bne.n	8004742 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b01      	cmp	r3, #1
 8004732:	d102      	bne.n	800473a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f005 fee5 	bl	800a504 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f043 0302 	orr.w	r3, r3, #2
 8004740:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b08      	cmp	r3, #8
 800474a:	d132      	bne.n	80047b2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f043 0308 	orr.w	r3, r3, #8
 8004752:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b04      	cmp	r3, #4
 800475c:	d126      	bne.n	80047ac <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d113      	bne.n	800478e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800476c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004770:	d106      	bne.n	8004780 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2102      	movs	r1, #2
 8004778:	4618      	mov	r0, r3
 800477a:	f003 f9fb 	bl	8007b74 <USB_InitFSLSPClkSel>
 800477e:	e011      	b.n	80047a4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2101      	movs	r1, #1
 8004786:	4618      	mov	r0, r3
 8004788:	f003 f9f4 	bl	8007b74 <USB_InitFSLSPClkSel>
 800478c:	e00a      	b.n	80047a4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d106      	bne.n	80047a4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800479c:	461a      	mov	r2, r3
 800479e:	f64e 2360 	movw	r3, #60000	; 0xea60
 80047a2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f005 fed7 	bl	800a558 <HAL_HCD_PortEnabled_Callback>
 80047aa:	e002      	b.n	80047b2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f005 fee1 	bl	800a574 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d103      	bne.n	80047c4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f043 0320 	orr.w	r3, r3, #32
 80047c2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047ca:	461a      	mov	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	6013      	str	r3, [r2, #0]
}
 80047d0:	bf00      	nop
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e12b      	b.n	8004a42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fd fbdc 	bl	8001fbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2224      	movs	r2, #36	; 0x24
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0201 	bic.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800482a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800483a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800483c:	f001 f9fc 	bl	8005c38 <HAL_RCC_GetPCLK1Freq>
 8004840:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4a81      	ldr	r2, [pc, #516]	; (8004a4c <HAL_I2C_Init+0x274>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d807      	bhi.n	800485c <HAL_I2C_Init+0x84>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4a80      	ldr	r2, [pc, #512]	; (8004a50 <HAL_I2C_Init+0x278>)
 8004850:	4293      	cmp	r3, r2
 8004852:	bf94      	ite	ls
 8004854:	2301      	movls	r3, #1
 8004856:	2300      	movhi	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e006      	b.n	800486a <HAL_I2C_Init+0x92>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4a7d      	ldr	r2, [pc, #500]	; (8004a54 <HAL_I2C_Init+0x27c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	bf94      	ite	ls
 8004864:	2301      	movls	r3, #1
 8004866:	2300      	movhi	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e0e7      	b.n	8004a42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4a78      	ldr	r2, [pc, #480]	; (8004a58 <HAL_I2C_Init+0x280>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	0c9b      	lsrs	r3, r3, #18
 800487c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	4a6a      	ldr	r2, [pc, #424]	; (8004a4c <HAL_I2C_Init+0x274>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d802      	bhi.n	80048ac <HAL_I2C_Init+0xd4>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	3301      	adds	r3, #1
 80048aa:	e009      	b.n	80048c0 <HAL_I2C_Init+0xe8>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048b2:	fb02 f303 	mul.w	r3, r2, r3
 80048b6:	4a69      	ldr	r2, [pc, #420]	; (8004a5c <HAL_I2C_Init+0x284>)
 80048b8:	fba2 2303 	umull	r2, r3, r2, r3
 80048bc:	099b      	lsrs	r3, r3, #6
 80048be:	3301      	adds	r3, #1
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6812      	ldr	r2, [r2, #0]
 80048c4:	430b      	orrs	r3, r1
 80048c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	495c      	ldr	r1, [pc, #368]	; (8004a4c <HAL_I2C_Init+0x274>)
 80048dc:	428b      	cmp	r3, r1
 80048de:	d819      	bhi.n	8004914 <HAL_I2C_Init+0x13c>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	1e59      	subs	r1, r3, #1
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80048ee:	1c59      	adds	r1, r3, #1
 80048f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048f4:	400b      	ands	r3, r1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HAL_I2C_Init+0x138>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1e59      	subs	r1, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	fbb1 f3f3 	udiv	r3, r1, r3
 8004908:	3301      	adds	r3, #1
 800490a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490e:	e051      	b.n	80049b4 <HAL_I2C_Init+0x1dc>
 8004910:	2304      	movs	r3, #4
 8004912:	e04f      	b.n	80049b4 <HAL_I2C_Init+0x1dc>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d111      	bne.n	8004940 <HAL_I2C_Init+0x168>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	1e58      	subs	r0, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6859      	ldr	r1, [r3, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	440b      	add	r3, r1
 800492a:	fbb0 f3f3 	udiv	r3, r0, r3
 800492e:	3301      	adds	r3, #1
 8004930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004934:	2b00      	cmp	r3, #0
 8004936:	bf0c      	ite	eq
 8004938:	2301      	moveq	r3, #1
 800493a:	2300      	movne	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	e012      	b.n	8004966 <HAL_I2C_Init+0x18e>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	1e58      	subs	r0, r3, #1
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6859      	ldr	r1, [r3, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	0099      	lsls	r1, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	fbb0 f3f3 	udiv	r3, r0, r3
 8004956:	3301      	adds	r3, #1
 8004958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf0c      	ite	eq
 8004960:	2301      	moveq	r3, #1
 8004962:	2300      	movne	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_I2C_Init+0x196>
 800496a:	2301      	movs	r3, #1
 800496c:	e022      	b.n	80049b4 <HAL_I2C_Init+0x1dc>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10e      	bne.n	8004994 <HAL_I2C_Init+0x1bc>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1e58      	subs	r0, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6859      	ldr	r1, [r3, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	440b      	add	r3, r1
 8004984:	fbb0 f3f3 	udiv	r3, r0, r3
 8004988:	3301      	adds	r3, #1
 800498a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800498e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004992:	e00f      	b.n	80049b4 <HAL_I2C_Init+0x1dc>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	1e58      	subs	r0, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6859      	ldr	r1, [r3, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	0099      	lsls	r1, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049aa:	3301      	adds	r3, #1
 80049ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	6809      	ldr	r1, [r1, #0]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69da      	ldr	r2, [r3, #28]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6911      	ldr	r1, [r2, #16]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	68d2      	ldr	r2, [r2, #12]
 80049ee:	4311      	orrs	r1, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	430b      	orrs	r3, r1
 80049f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	000186a0 	.word	0x000186a0
 8004a50:	001e847f 	.word	0x001e847f
 8004a54:	003d08ff 	.word	0x003d08ff
 8004a58:	431bde83 	.word	0x431bde83
 8004a5c:	10624dd3 	.word	0x10624dd3

08004a60 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e128      	b.n	8004cc4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a90      	ldr	r2, [pc, #576]	; (8004ccc <HAL_I2S_Init+0x26c>)
 8004a8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fd faff 	bl	8002090 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6812      	ldr	r2, [r2, #0]
 8004aa4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004aa8:	f023 030f 	bic.w	r3, r3, #15
 8004aac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d060      	beq.n	8004b80 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d102      	bne.n	8004acc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004ac6:	2310      	movs	r3, #16
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	e001      	b.n	8004ad0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004acc:	2320      	movs	r3, #32
 8004ace:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d802      	bhi.n	8004ade <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004ade:	2001      	movs	r0, #1
 8004ae0:	f001 f9a0 	bl	8005e24 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ae4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aee:	d125      	bne.n	8004b3c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d010      	beq.n	8004b1a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b14:	3305      	adds	r3, #5
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	e01f      	b.n	8004b5a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b36:	3305      	adds	r3, #5
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	e00e      	b.n	8004b5a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b56:	3305      	adds	r3, #5
 8004b58:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4a5c      	ldr	r2, [pc, #368]	; (8004cd0 <HAL_I2S_Init+0x270>)
 8004b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b62:	08db      	lsrs	r3, r3, #3
 8004b64:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	085b      	lsrs	r3, r3, #1
 8004b76:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	e003      	b.n	8004b88 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b80:	2302      	movs	r3, #2
 8004b82:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d902      	bls.n	8004b94 <HAL_I2S_Init+0x134>
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	2bff      	cmp	r3, #255	; 0xff
 8004b92:	d907      	bls.n	8004ba4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b98:	f043 0210 	orr.w	r2, r3, #16
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e08f      	b.n	8004cc4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	ea42 0103 	orr.w	r1, r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69fa      	ldr	r2, [r7, #28]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004bc2:	f023 030f 	bic.w	r3, r3, #15
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6851      	ldr	r1, [r2, #4]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6892      	ldr	r2, [r2, #8]
 8004bce:	4311      	orrs	r1, r2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	68d2      	ldr	r2, [r2, #12]
 8004bd4:	4311      	orrs	r1, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6992      	ldr	r2, [r2, #24]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d161      	bne.n	8004cb4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a38      	ldr	r2, [pc, #224]	; (8004cd4 <HAL_I2S_Init+0x274>)
 8004bf4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a37      	ldr	r2, [pc, #220]	; (8004cd8 <HAL_I2S_Init+0x278>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d101      	bne.n	8004c04 <HAL_I2S_Init+0x1a4>
 8004c00:	4b36      	ldr	r3, [pc, #216]	; (8004cdc <HAL_I2S_Init+0x27c>)
 8004c02:	e001      	b.n	8004c08 <HAL_I2S_Init+0x1a8>
 8004c04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6812      	ldr	r2, [r2, #0]
 8004c0e:	4932      	ldr	r1, [pc, #200]	; (8004cd8 <HAL_I2S_Init+0x278>)
 8004c10:	428a      	cmp	r2, r1
 8004c12:	d101      	bne.n	8004c18 <HAL_I2S_Init+0x1b8>
 8004c14:	4a31      	ldr	r2, [pc, #196]	; (8004cdc <HAL_I2S_Init+0x27c>)
 8004c16:	e001      	b.n	8004c1c <HAL_I2S_Init+0x1bc>
 8004c18:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004c1c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c20:	f023 030f 	bic.w	r3, r3, #15
 8004c24:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a2b      	ldr	r2, [pc, #172]	; (8004cd8 <HAL_I2S_Init+0x278>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d101      	bne.n	8004c34 <HAL_I2S_Init+0x1d4>
 8004c30:	4b2a      	ldr	r3, [pc, #168]	; (8004cdc <HAL_I2S_Init+0x27c>)
 8004c32:	e001      	b.n	8004c38 <HAL_I2S_Init+0x1d8>
 8004c34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c38:	2202      	movs	r2, #2
 8004c3a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a25      	ldr	r2, [pc, #148]	; (8004cd8 <HAL_I2S_Init+0x278>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d101      	bne.n	8004c4a <HAL_I2S_Init+0x1ea>
 8004c46:	4b25      	ldr	r3, [pc, #148]	; (8004cdc <HAL_I2S_Init+0x27c>)
 8004c48:	e001      	b.n	8004c4e <HAL_I2S_Init+0x1ee>
 8004c4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c5a:	d003      	beq.n	8004c64 <HAL_I2S_Init+0x204>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d103      	bne.n	8004c6c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	e001      	b.n	8004c70 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c84:	4313      	orrs	r3, r2
 8004c86:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	897b      	ldrh	r3, [r7, #10]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c9c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a0d      	ldr	r2, [pc, #52]	; (8004cd8 <HAL_I2S_Init+0x278>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d101      	bne.n	8004cac <HAL_I2S_Init+0x24c>
 8004ca8:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <HAL_I2S_Init+0x27c>)
 8004caa:	e001      	b.n	8004cb0 <HAL_I2S_Init+0x250>
 8004cac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cb0:	897a      	ldrh	r2, [r7, #10]
 8004cb2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3720      	adds	r7, #32
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	08004dd7 	.word	0x08004dd7
 8004cd0:	cccccccd 	.word	0xcccccccd
 8004cd4:	08004eed 	.word	0x08004eed
 8004cd8:	40003800 	.word	0x40003800
 8004cdc:	40003400 	.word	0x40003400

08004ce0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	881a      	ldrh	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	1c9a      	adds	r2, r3, #2
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10e      	bne.n	8004d70 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d60:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff ffb8 	bl	8004ce0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	b292      	uxth	r2, r2
 8004d8c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	1c9a      	adds	r2, r3, #2
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10e      	bne.n	8004dce <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dbe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff ff93 	bl	8004cf4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b086      	sub	sp, #24
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d13a      	bne.n	8004e68 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d109      	bne.n	8004e10 <I2S_IRQHandler+0x3a>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d102      	bne.n	8004e10 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff ffb4 	bl	8004d78 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d126      	bne.n	8004e68 <I2S_IRQHandler+0x92>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f003 0320 	and.w	r3, r3, #32
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d11f      	bne.n	8004e68 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e36:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e38:	2300      	movs	r3, #0
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	f043 0202 	orr.w	r2, r3, #2
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff ff50 	bl	8004d08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d136      	bne.n	8004ee2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d109      	bne.n	8004e92 <I2S_IRQHandler+0xbc>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e88:	2b80      	cmp	r3, #128	; 0x80
 8004e8a:	d102      	bne.n	8004e92 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff ff45 	bl	8004d1c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d122      	bne.n	8004ee2 <I2S_IRQHandler+0x10c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b20      	cmp	r3, #32
 8004ea8:	d11b      	bne.n	8004ee2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004eb8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed4:	f043 0204 	orr.w	r2, r3, #4
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff ff13 	bl	8004d08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ee2:	bf00      	nop
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
	...

08004eec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4aa2      	ldr	r2, [pc, #648]	; (800518c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d101      	bne.n	8004f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004f06:	4ba2      	ldr	r3, [pc, #648]	; (8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f08:	e001      	b.n	8004f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004f0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a9b      	ldr	r2, [pc, #620]	; (800518c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d101      	bne.n	8004f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004f24:	4b9a      	ldr	r3, [pc, #616]	; (8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f26:	e001      	b.n	8004f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004f28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f38:	d004      	beq.n	8004f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f040 8099 	bne.w	8005076 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d107      	bne.n	8004f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f925 	bl	80051a8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d107      	bne.n	8004f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f9c8 	bl	8005308 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7e:	2b40      	cmp	r3, #64	; 0x40
 8004f80:	d13a      	bne.n	8004ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d035      	beq.n	8004ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a7e      	ldr	r2, [pc, #504]	; (800518c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d101      	bne.n	8004f9a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004f96:	4b7e      	ldr	r3, [pc, #504]	; (8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f98:	e001      	b.n	8004f9e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004f9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4979      	ldr	r1, [pc, #484]	; (800518c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004fa6:	428b      	cmp	r3, r1
 8004fa8:	d101      	bne.n	8004fae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004faa:	4b79      	ldr	r3, [pc, #484]	; (8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004fac:	e001      	b.n	8004fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004fae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fb6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fc6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	f043 0202 	orr.w	r2, r3, #2
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff fe88 	bl	8004d08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	f040 80be 	bne.w	8005180 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 80b8 	beq.w	8005180 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800501e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a59      	ldr	r2, [pc, #356]	; (800518c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d101      	bne.n	800502e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800502a:	4b59      	ldr	r3, [pc, #356]	; (8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800502c:	e001      	b.n	8005032 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800502e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4954      	ldr	r1, [pc, #336]	; (800518c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800503a:	428b      	cmp	r3, r1
 800503c:	d101      	bne.n	8005042 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800503e:	4b54      	ldr	r3, [pc, #336]	; (8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005040:	e001      	b.n	8005046 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005042:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005046:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800504a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800504c:	2300      	movs	r3, #0
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	60bb      	str	r3, [r7, #8]
 8005058:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	f043 0204 	orr.w	r2, r3, #4
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7ff fe4a 	bl	8004d08 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005074:	e084      	b.n	8005180 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b02      	cmp	r3, #2
 800507e:	d107      	bne.n	8005090 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f8be 	bl	800520c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b01      	cmp	r3, #1
 8005098:	d107      	bne.n	80050aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f8fd 	bl	80052a4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b0:	2b40      	cmp	r3, #64	; 0x40
 80050b2:	d12f      	bne.n	8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d02a      	beq.n	8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050cc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a2e      	ldr	r2, [pc, #184]	; (800518c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d101      	bne.n	80050dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80050d8:	4b2d      	ldr	r3, [pc, #180]	; (8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050da:	e001      	b.n	80050e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80050dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4929      	ldr	r1, [pc, #164]	; (800518c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050e8:	428b      	cmp	r3, r1
 80050ea:	d101      	bne.n	80050f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80050ec:	4b28      	ldr	r3, [pc, #160]	; (8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050ee:	e001      	b.n	80050f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80050f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	f043 0202 	orr.w	r2, r3, #2
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff fdfa 	bl	8004d08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b08      	cmp	r3, #8
 800511c:	d131      	bne.n	8005182 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d02c      	beq.n	8005182 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a17      	ldr	r2, [pc, #92]	; (800518c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d101      	bne.n	8005136 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005132:	4b17      	ldr	r3, [pc, #92]	; (8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005134:	e001      	b.n	800513a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005136:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4912      	ldr	r1, [pc, #72]	; (800518c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005142:	428b      	cmp	r3, r1
 8005144:	d101      	bne.n	800514a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005146:	4b12      	ldr	r3, [pc, #72]	; (8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005148:	e001      	b.n	800514e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800514a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800514e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005152:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005162:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005170:	f043 0204 	orr.w	r2, r3, #4
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7ff fdc5 	bl	8004d08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800517e:	e000      	b.n	8005182 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005180:	bf00      	nop
}
 8005182:	bf00      	nop
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40003800 	.word	0x40003800
 8005190:	40003400 	.word	0x40003400

08005194 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	1c99      	adds	r1, r3, #2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6251      	str	r1, [r2, #36]	; 0x24
 80051ba:	881a      	ldrh	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d113      	bne.n	8005202 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d106      	bne.n	8005202 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff ffc9 	bl	8005194 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005202:	bf00      	nop
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	1c99      	adds	r1, r3, #2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6251      	str	r1, [r2, #36]	; 0x24
 800521e:	8819      	ldrh	r1, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1d      	ldr	r2, [pc, #116]	; (800529c <I2SEx_TxISR_I2SExt+0x90>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d101      	bne.n	800522e <I2SEx_TxISR_I2SExt+0x22>
 800522a:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <I2SEx_TxISR_I2SExt+0x94>)
 800522c:	e001      	b.n	8005232 <I2SEx_TxISR_I2SExt+0x26>
 800522e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005232:	460a      	mov	r2, r1
 8005234:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d121      	bne.n	8005292 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a12      	ldr	r2, [pc, #72]	; (800529c <I2SEx_TxISR_I2SExt+0x90>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d101      	bne.n	800525c <I2SEx_TxISR_I2SExt+0x50>
 8005258:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <I2SEx_TxISR_I2SExt+0x94>)
 800525a:	e001      	b.n	8005260 <I2SEx_TxISR_I2SExt+0x54>
 800525c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	490d      	ldr	r1, [pc, #52]	; (800529c <I2SEx_TxISR_I2SExt+0x90>)
 8005268:	428b      	cmp	r3, r1
 800526a:	d101      	bne.n	8005270 <I2SEx_TxISR_I2SExt+0x64>
 800526c:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <I2SEx_TxISR_I2SExt+0x94>)
 800526e:	e001      	b.n	8005274 <I2SEx_TxISR_I2SExt+0x68>
 8005270:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005274:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005278:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff ff81 	bl	8005194 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40003800 	.word	0x40003800
 80052a0:	40003400 	.word	0x40003400

080052a4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68d8      	ldr	r0, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	1c99      	adds	r1, r3, #2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	62d1      	str	r1, [r2, #44]	; 0x2c
 80052bc:	b282      	uxth	r2, r0
 80052be:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d113      	bne.n	8005300 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052e6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7ff ff4a 	bl	8005194 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a20      	ldr	r2, [pc, #128]	; (8005398 <I2SEx_RxISR_I2SExt+0x90>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d101      	bne.n	800531e <I2SEx_RxISR_I2SExt+0x16>
 800531a:	4b20      	ldr	r3, [pc, #128]	; (800539c <I2SEx_RxISR_I2SExt+0x94>)
 800531c:	e001      	b.n	8005322 <I2SEx_RxISR_I2SExt+0x1a>
 800531e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005322:	68d8      	ldr	r0, [r3, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	1c99      	adds	r1, r3, #2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800532e:	b282      	uxth	r2, r0
 8005330:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d121      	bne.n	800538e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a12      	ldr	r2, [pc, #72]	; (8005398 <I2SEx_RxISR_I2SExt+0x90>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d101      	bne.n	8005358 <I2SEx_RxISR_I2SExt+0x50>
 8005354:	4b11      	ldr	r3, [pc, #68]	; (800539c <I2SEx_RxISR_I2SExt+0x94>)
 8005356:	e001      	b.n	800535c <I2SEx_RxISR_I2SExt+0x54>
 8005358:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	490d      	ldr	r1, [pc, #52]	; (8005398 <I2SEx_RxISR_I2SExt+0x90>)
 8005364:	428b      	cmp	r3, r1
 8005366:	d101      	bne.n	800536c <I2SEx_RxISR_I2SExt+0x64>
 8005368:	4b0c      	ldr	r3, [pc, #48]	; (800539c <I2SEx_RxISR_I2SExt+0x94>)
 800536a:	e001      	b.n	8005370 <I2SEx_RxISR_I2SExt+0x68>
 800536c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005370:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005374:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d106      	bne.n	800538e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7ff ff03 	bl	8005194 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40003800 	.word	0x40003800
 800539c:	40003400 	.word	0x40003400

080053a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e264      	b.n	800587c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d075      	beq.n	80054aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053be:	4ba3      	ldr	r3, [pc, #652]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 030c 	and.w	r3, r3, #12
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d00c      	beq.n	80053e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ca:	4ba0      	ldr	r3, [pc, #640]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d112      	bne.n	80053fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053d6:	4b9d      	ldr	r3, [pc, #628]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053e2:	d10b      	bne.n	80053fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e4:	4b99      	ldr	r3, [pc, #612]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d05b      	beq.n	80054a8 <HAL_RCC_OscConfig+0x108>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d157      	bne.n	80054a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e23f      	b.n	800587c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005404:	d106      	bne.n	8005414 <HAL_RCC_OscConfig+0x74>
 8005406:	4b91      	ldr	r3, [pc, #580]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a90      	ldr	r2, [pc, #576]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800540c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	e01d      	b.n	8005450 <HAL_RCC_OscConfig+0xb0>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800541c:	d10c      	bne.n	8005438 <HAL_RCC_OscConfig+0x98>
 800541e:	4b8b      	ldr	r3, [pc, #556]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a8a      	ldr	r2, [pc, #552]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	4b88      	ldr	r3, [pc, #544]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a87      	ldr	r2, [pc, #540]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	e00b      	b.n	8005450 <HAL_RCC_OscConfig+0xb0>
 8005438:	4b84      	ldr	r3, [pc, #528]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a83      	ldr	r2, [pc, #524]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800543e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	4b81      	ldr	r3, [pc, #516]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a80      	ldr	r2, [pc, #512]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800544a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800544e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d013      	beq.n	8005480 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005458:	f7fd f930 	bl	80026bc <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005460:	f7fd f92c 	bl	80026bc <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b64      	cmp	r3, #100	; 0x64
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e204      	b.n	800587c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005472:	4b76      	ldr	r3, [pc, #472]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0f0      	beq.n	8005460 <HAL_RCC_OscConfig+0xc0>
 800547e:	e014      	b.n	80054aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005480:	f7fd f91c 	bl	80026bc <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005488:	f7fd f918 	bl	80026bc <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b64      	cmp	r3, #100	; 0x64
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e1f0      	b.n	800587c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800549a:	4b6c      	ldr	r3, [pc, #432]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0xe8>
 80054a6:	e000      	b.n	80054aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d063      	beq.n	800557e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054b6:	4b65      	ldr	r3, [pc, #404]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00b      	beq.n	80054da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054c2:	4b62      	ldr	r3, [pc, #392]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d11c      	bne.n	8005508 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ce:	4b5f      	ldr	r3, [pc, #380]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d116      	bne.n	8005508 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054da:	4b5c      	ldr	r3, [pc, #368]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <HAL_RCC_OscConfig+0x152>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d001      	beq.n	80054f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e1c4      	b.n	800587c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f2:	4b56      	ldr	r3, [pc, #344]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	4952      	ldr	r1, [pc, #328]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005502:	4313      	orrs	r3, r2
 8005504:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005506:	e03a      	b.n	800557e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d020      	beq.n	8005552 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005510:	4b4f      	ldr	r3, [pc, #316]	; (8005650 <HAL_RCC_OscConfig+0x2b0>)
 8005512:	2201      	movs	r2, #1
 8005514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005516:	f7fd f8d1 	bl	80026bc <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800551e:	f7fd f8cd 	bl	80026bc <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e1a5      	b.n	800587c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005530:	4b46      	ldr	r3, [pc, #280]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f0      	beq.n	800551e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800553c:	4b43      	ldr	r3, [pc, #268]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	4940      	ldr	r1, [pc, #256]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800554c:	4313      	orrs	r3, r2
 800554e:	600b      	str	r3, [r1, #0]
 8005550:	e015      	b.n	800557e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005552:	4b3f      	ldr	r3, [pc, #252]	; (8005650 <HAL_RCC_OscConfig+0x2b0>)
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005558:	f7fd f8b0 	bl	80026bc <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005560:	f7fd f8ac 	bl	80026bc <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e184      	b.n	800587c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005572:	4b36      	ldr	r3, [pc, #216]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f0      	bne.n	8005560 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d030      	beq.n	80055ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d016      	beq.n	80055c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005592:	4b30      	ldr	r3, [pc, #192]	; (8005654 <HAL_RCC_OscConfig+0x2b4>)
 8005594:	2201      	movs	r2, #1
 8005596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005598:	f7fd f890 	bl	80026bc <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055a0:	f7fd f88c 	bl	80026bc <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e164      	b.n	800587c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055b2:	4b26      	ldr	r3, [pc, #152]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80055b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0f0      	beq.n	80055a0 <HAL_RCC_OscConfig+0x200>
 80055be:	e015      	b.n	80055ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055c0:	4b24      	ldr	r3, [pc, #144]	; (8005654 <HAL_RCC_OscConfig+0x2b4>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c6:	f7fd f879 	bl	80026bc <HAL_GetTick>
 80055ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055cc:	e008      	b.n	80055e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ce:	f7fd f875 	bl	80026bc <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e14d      	b.n	800587c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e0:	4b1a      	ldr	r3, [pc, #104]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 80055e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1f0      	bne.n	80055ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80a0 	beq.w	800573a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055fa:	2300      	movs	r3, #0
 80055fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055fe:	4b13      	ldr	r3, [pc, #76]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10f      	bne.n	800562a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]
 800560e:	4b0f      	ldr	r3, [pc, #60]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	4a0e      	ldr	r2, [pc, #56]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 8005614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005618:	6413      	str	r3, [r2, #64]	; 0x40
 800561a:	4b0c      	ldr	r3, [pc, #48]	; (800564c <HAL_RCC_OscConfig+0x2ac>)
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005622:	60bb      	str	r3, [r7, #8]
 8005624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005626:	2301      	movs	r3, #1
 8005628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562a:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <HAL_RCC_OscConfig+0x2b8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005632:	2b00      	cmp	r3, #0
 8005634:	d121      	bne.n	800567a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005636:	4b08      	ldr	r3, [pc, #32]	; (8005658 <HAL_RCC_OscConfig+0x2b8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a07      	ldr	r2, [pc, #28]	; (8005658 <HAL_RCC_OscConfig+0x2b8>)
 800563c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005642:	f7fd f83b 	bl	80026bc <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005648:	e011      	b.n	800566e <HAL_RCC_OscConfig+0x2ce>
 800564a:	bf00      	nop
 800564c:	40023800 	.word	0x40023800
 8005650:	42470000 	.word	0x42470000
 8005654:	42470e80 	.word	0x42470e80
 8005658:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800565c:	f7fd f82e 	bl	80026bc <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e106      	b.n	800587c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566e:	4b85      	ldr	r3, [pc, #532]	; (8005884 <HAL_RCC_OscConfig+0x4e4>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d106      	bne.n	8005690 <HAL_RCC_OscConfig+0x2f0>
 8005682:	4b81      	ldr	r3, [pc, #516]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	4a80      	ldr	r2, [pc, #512]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	6713      	str	r3, [r2, #112]	; 0x70
 800568e:	e01c      	b.n	80056ca <HAL_RCC_OscConfig+0x32a>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b05      	cmp	r3, #5
 8005696:	d10c      	bne.n	80056b2 <HAL_RCC_OscConfig+0x312>
 8005698:	4b7b      	ldr	r3, [pc, #492]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569c:	4a7a      	ldr	r2, [pc, #488]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 800569e:	f043 0304 	orr.w	r3, r3, #4
 80056a2:	6713      	str	r3, [r2, #112]	; 0x70
 80056a4:	4b78      	ldr	r3, [pc, #480]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 80056a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a8:	4a77      	ldr	r2, [pc, #476]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 80056aa:	f043 0301 	orr.w	r3, r3, #1
 80056ae:	6713      	str	r3, [r2, #112]	; 0x70
 80056b0:	e00b      	b.n	80056ca <HAL_RCC_OscConfig+0x32a>
 80056b2:	4b75      	ldr	r3, [pc, #468]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 80056b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b6:	4a74      	ldr	r2, [pc, #464]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	6713      	str	r3, [r2, #112]	; 0x70
 80056be:	4b72      	ldr	r3, [pc, #456]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	4a71      	ldr	r2, [pc, #452]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 80056c4:	f023 0304 	bic.w	r3, r3, #4
 80056c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d015      	beq.n	80056fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d2:	f7fc fff3 	bl	80026bc <HAL_GetTick>
 80056d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d8:	e00a      	b.n	80056f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056da:	f7fc ffef 	bl	80026bc <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e0c5      	b.n	800587c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f0:	4b65      	ldr	r3, [pc, #404]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 80056f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0ee      	beq.n	80056da <HAL_RCC_OscConfig+0x33a>
 80056fc:	e014      	b.n	8005728 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056fe:	f7fc ffdd 	bl	80026bc <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005704:	e00a      	b.n	800571c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005706:	f7fc ffd9 	bl	80026bc <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	f241 3288 	movw	r2, #5000	; 0x1388
 8005714:	4293      	cmp	r3, r2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e0af      	b.n	800587c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800571c:	4b5a      	ldr	r3, [pc, #360]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1ee      	bne.n	8005706 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005728:	7dfb      	ldrb	r3, [r7, #23]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d105      	bne.n	800573a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800572e:	4b56      	ldr	r3, [pc, #344]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	4a55      	ldr	r2, [pc, #340]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 8005734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005738:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 809b 	beq.w	800587a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005744:	4b50      	ldr	r3, [pc, #320]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 030c 	and.w	r3, r3, #12
 800574c:	2b08      	cmp	r3, #8
 800574e:	d05c      	beq.n	800580a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	2b02      	cmp	r3, #2
 8005756:	d141      	bne.n	80057dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005758:	4b4c      	ldr	r3, [pc, #304]	; (800588c <HAL_RCC_OscConfig+0x4ec>)
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575e:	f7fc ffad 	bl	80026bc <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005766:	f7fc ffa9 	bl	80026bc <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e081      	b.n	800587c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005778:	4b43      	ldr	r3, [pc, #268]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f0      	bne.n	8005766 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	69da      	ldr	r2, [r3, #28]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	019b      	lsls	r3, r3, #6
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	085b      	lsrs	r3, r3, #1
 800579c:	3b01      	subs	r3, #1
 800579e:	041b      	lsls	r3, r3, #16
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a6:	061b      	lsls	r3, r3, #24
 80057a8:	4937      	ldr	r1, [pc, #220]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057ae:	4b37      	ldr	r3, [pc, #220]	; (800588c <HAL_RCC_OscConfig+0x4ec>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b4:	f7fc ff82 	bl	80026bc <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057bc:	f7fc ff7e 	bl	80026bc <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e056      	b.n	800587c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ce:	4b2e      	ldr	r3, [pc, #184]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f0      	beq.n	80057bc <HAL_RCC_OscConfig+0x41c>
 80057da:	e04e      	b.n	800587a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057dc:	4b2b      	ldr	r3, [pc, #172]	; (800588c <HAL_RCC_OscConfig+0x4ec>)
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e2:	f7fc ff6b 	bl	80026bc <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e8:	e008      	b.n	80057fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ea:	f7fc ff67 	bl	80026bc <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e03f      	b.n	800587c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fc:	4b22      	ldr	r3, [pc, #136]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1f0      	bne.n	80057ea <HAL_RCC_OscConfig+0x44a>
 8005808:	e037      	b.n	800587a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e032      	b.n	800587c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005816:	4b1c      	ldr	r3, [pc, #112]	; (8005888 <HAL_RCC_OscConfig+0x4e8>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d028      	beq.n	8005876 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800582e:	429a      	cmp	r2, r3
 8005830:	d121      	bne.n	8005876 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800583c:	429a      	cmp	r2, r3
 800583e:	d11a      	bne.n	8005876 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005846:	4013      	ands	r3, r2
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800584c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800584e:	4293      	cmp	r3, r2
 8005850:	d111      	bne.n	8005876 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	085b      	lsrs	r3, r3, #1
 800585e:	3b01      	subs	r3, #1
 8005860:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005862:	429a      	cmp	r2, r3
 8005864:	d107      	bne.n	8005876 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005872:	429a      	cmp	r2, r3
 8005874:	d001      	beq.n	800587a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40007000 	.word	0x40007000
 8005888:	40023800 	.word	0x40023800
 800588c:	42470060 	.word	0x42470060

08005890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e0cc      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058a4:	4b68      	ldr	r3, [pc, #416]	; (8005a48 <HAL_RCC_ClockConfig+0x1b8>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d90c      	bls.n	80058cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b2:	4b65      	ldr	r3, [pc, #404]	; (8005a48 <HAL_RCC_ClockConfig+0x1b8>)
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ba:	4b63      	ldr	r3, [pc, #396]	; (8005a48 <HAL_RCC_ClockConfig+0x1b8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d001      	beq.n	80058cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e0b8      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d020      	beq.n	800591a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058e4:	4b59      	ldr	r3, [pc, #356]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	4a58      	ldr	r2, [pc, #352]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058fc:	4b53      	ldr	r3, [pc, #332]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	4a52      	ldr	r2, [pc, #328]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005908:	4b50      	ldr	r3, [pc, #320]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	494d      	ldr	r1, [pc, #308]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005916:	4313      	orrs	r3, r2
 8005918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d044      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d107      	bne.n	800593e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800592e:	4b47      	ldr	r3, [pc, #284]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d119      	bne.n	800596e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e07f      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d003      	beq.n	800594e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800594a:	2b03      	cmp	r3, #3
 800594c:	d107      	bne.n	800595e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800594e:	4b3f      	ldr	r3, [pc, #252]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e06f      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800595e:	4b3b      	ldr	r3, [pc, #236]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e067      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800596e:	4b37      	ldr	r3, [pc, #220]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f023 0203 	bic.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	4934      	ldr	r1, [pc, #208]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 800597c:	4313      	orrs	r3, r2
 800597e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005980:	f7fc fe9c 	bl	80026bc <HAL_GetTick>
 8005984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005986:	e00a      	b.n	800599e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005988:	f7fc fe98 	bl	80026bc <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	f241 3288 	movw	r2, #5000	; 0x1388
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e04f      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599e:	4b2b      	ldr	r3, [pc, #172]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 020c 	and.w	r2, r3, #12
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d1eb      	bne.n	8005988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059b0:	4b25      	ldr	r3, [pc, #148]	; (8005a48 <HAL_RCC_ClockConfig+0x1b8>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d20c      	bcs.n	80059d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059be:	4b22      	ldr	r3, [pc, #136]	; (8005a48 <HAL_RCC_ClockConfig+0x1b8>)
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c6:	4b20      	ldr	r3, [pc, #128]	; (8005a48 <HAL_RCC_ClockConfig+0x1b8>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d001      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e032      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059e4:	4b19      	ldr	r3, [pc, #100]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	4916      	ldr	r1, [pc, #88]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d009      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a02:	4b12      	ldr	r3, [pc, #72]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	490e      	ldr	r1, [pc, #56]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a16:	f000 f821 	bl	8005a5c <HAL_RCC_GetSysClockFreq>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	091b      	lsrs	r3, r3, #4
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	490a      	ldr	r1, [pc, #40]	; (8005a50 <HAL_RCC_ClockConfig+0x1c0>)
 8005a28:	5ccb      	ldrb	r3, [r1, r3]
 8005a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2e:	4a09      	ldr	r2, [pc, #36]	; (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 8005a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a32:	4b09      	ldr	r3, [pc, #36]	; (8005a58 <HAL_RCC_ClockConfig+0x1c8>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fc fdfc 	bl	8002634 <HAL_InitTick>

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	40023c00 	.word	0x40023c00
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	0800b040 	.word	0x0800b040
 8005a54:	2000000c 	.word	0x2000000c
 8005a58:	20000010 	.word	0x20000010

08005a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a60:	b084      	sub	sp, #16
 8005a62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	607b      	str	r3, [r7, #4]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a74:	4b67      	ldr	r3, [pc, #412]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f003 030c 	and.w	r3, r3, #12
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d00d      	beq.n	8005a9c <HAL_RCC_GetSysClockFreq+0x40>
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	f200 80bd 	bhi.w	8005c00 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <HAL_RCC_GetSysClockFreq+0x34>
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d003      	beq.n	8005a96 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a8e:	e0b7      	b.n	8005c00 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a90:	4b61      	ldr	r3, [pc, #388]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a92:	60bb      	str	r3, [r7, #8]
       break;
 8005a94:	e0b7      	b.n	8005c06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a96:	4b61      	ldr	r3, [pc, #388]	; (8005c1c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005a98:	60bb      	str	r3, [r7, #8]
      break;
 8005a9a:	e0b4      	b.n	8005c06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a9c:	4b5d      	ldr	r3, [pc, #372]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aa4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aa6:	4b5b      	ldr	r3, [pc, #364]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d04d      	beq.n	8005b4e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ab2:	4b58      	ldr	r3, [pc, #352]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	099b      	lsrs	r3, r3, #6
 8005ab8:	461a      	mov	r2, r3
 8005aba:	f04f 0300 	mov.w	r3, #0
 8005abe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ac2:	f04f 0100 	mov.w	r1, #0
 8005ac6:	ea02 0800 	and.w	r8, r2, r0
 8005aca:	ea03 0901 	and.w	r9, r3, r1
 8005ace:	4640      	mov	r0, r8
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	014b      	lsls	r3, r1, #5
 8005adc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ae0:	0142      	lsls	r2, r0, #5
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	ebb0 0008 	subs.w	r0, r0, r8
 8005aea:	eb61 0109 	sbc.w	r1, r1, r9
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	018b      	lsls	r3, r1, #6
 8005af8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005afc:	0182      	lsls	r2, r0, #6
 8005afe:	1a12      	subs	r2, r2, r0
 8005b00:	eb63 0301 	sbc.w	r3, r3, r1
 8005b04:	f04f 0000 	mov.w	r0, #0
 8005b08:	f04f 0100 	mov.w	r1, #0
 8005b0c:	00d9      	lsls	r1, r3, #3
 8005b0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b12:	00d0      	lsls	r0, r2, #3
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	eb12 0208 	adds.w	r2, r2, r8
 8005b1c:	eb43 0309 	adc.w	r3, r3, r9
 8005b20:	f04f 0000 	mov.w	r0, #0
 8005b24:	f04f 0100 	mov.w	r1, #0
 8005b28:	0259      	lsls	r1, r3, #9
 8005b2a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005b2e:	0250      	lsls	r0, r2, #9
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4610      	mov	r0, r2
 8005b36:	4619      	mov	r1, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	f7fa fb42 	bl	80001c8 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4613      	mov	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	e04a      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b4e:	4b31      	ldr	r3, [pc, #196]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	099b      	lsrs	r3, r3, #6
 8005b54:	461a      	mov	r2, r3
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b5e:	f04f 0100 	mov.w	r1, #0
 8005b62:	ea02 0400 	and.w	r4, r2, r0
 8005b66:	ea03 0501 	and.w	r5, r3, r1
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	f04f 0200 	mov.w	r2, #0
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	014b      	lsls	r3, r1, #5
 8005b78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b7c:	0142      	lsls	r2, r0, #5
 8005b7e:	4610      	mov	r0, r2
 8005b80:	4619      	mov	r1, r3
 8005b82:	1b00      	subs	r0, r0, r4
 8005b84:	eb61 0105 	sbc.w	r1, r1, r5
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	f04f 0300 	mov.w	r3, #0
 8005b90:	018b      	lsls	r3, r1, #6
 8005b92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b96:	0182      	lsls	r2, r0, #6
 8005b98:	1a12      	subs	r2, r2, r0
 8005b9a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b9e:	f04f 0000 	mov.w	r0, #0
 8005ba2:	f04f 0100 	mov.w	r1, #0
 8005ba6:	00d9      	lsls	r1, r3, #3
 8005ba8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bac:	00d0      	lsls	r0, r2, #3
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	1912      	adds	r2, r2, r4
 8005bb4:	eb45 0303 	adc.w	r3, r5, r3
 8005bb8:	f04f 0000 	mov.w	r0, #0
 8005bbc:	f04f 0100 	mov.w	r1, #0
 8005bc0:	0299      	lsls	r1, r3, #10
 8005bc2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005bc6:	0290      	lsls	r0, r2, #10
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4610      	mov	r0, r2
 8005bce:	4619      	mov	r1, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	f7fa faf6 	bl	80001c8 <__aeabi_uldivmod>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	4613      	mov	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005be4:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	0c1b      	lsrs	r3, r3, #16
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	3301      	adds	r3, #1
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfc:	60bb      	str	r3, [r7, #8]
      break;
 8005bfe:	e002      	b.n	8005c06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c00:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c02:	60bb      	str	r3, [r7, #8]
      break;
 8005c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c06:	68bb      	ldr	r3, [r7, #8]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c12:	bf00      	nop
 8005c14:	40023800 	.word	0x40023800
 8005c18:	00f42400 	.word	0x00f42400
 8005c1c:	007a1200 	.word	0x007a1200

08005c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c24:	4b03      	ldr	r3, [pc, #12]	; (8005c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c26:	681b      	ldr	r3, [r3, #0]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	2000000c 	.word	0x2000000c

08005c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c3c:	f7ff fff0 	bl	8005c20 <HAL_RCC_GetHCLKFreq>
 8005c40:	4602      	mov	r2, r0
 8005c42:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	0a9b      	lsrs	r3, r3, #10
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	4903      	ldr	r1, [pc, #12]	; (8005c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c4e:	5ccb      	ldrb	r3, [r1, r3]
 8005c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	0800b050 	.word	0x0800b050

08005c60 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d105      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d035      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c88:	4b62      	ldr	r3, [pc, #392]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c8e:	f7fc fd15 	bl	80026bc <HAL_GetTick>
 8005c92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c94:	e008      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c96:	f7fc fd11 	bl	80026bc <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e0b0      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ca8:	4b5b      	ldr	r3, [pc, #364]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1f0      	bne.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	019a      	lsls	r2, r3, #6
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	071b      	lsls	r3, r3, #28
 8005cc0:	4955      	ldr	r1, [pc, #340]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005cc8:	4b52      	ldr	r3, [pc, #328]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cce:	f7fc fcf5 	bl	80026bc <HAL_GetTick>
 8005cd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cd6:	f7fc fcf1 	bl	80026bc <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e090      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ce8:	4b4b      	ldr	r3, [pc, #300]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0f0      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 8083 	beq.w	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	4b44      	ldr	r3, [pc, #272]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	4a43      	ldr	r2, [pc, #268]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d10:	6413      	str	r3, [r2, #64]	; 0x40
 8005d12:	4b41      	ldr	r3, [pc, #260]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d1e:	4b3f      	ldr	r3, [pc, #252]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a3e      	ldr	r2, [pc, #248]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d28:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d2a:	f7fc fcc7 	bl	80026bc <HAL_GetTick>
 8005d2e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d30:	e008      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d32:	f7fc fcc3 	bl	80026bc <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e062      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d44:	4b35      	ldr	r3, [pc, #212]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0f0      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d50:	4b31      	ldr	r3, [pc, #196]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d58:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d02f      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d028      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d6e:	4b2a      	ldr	r3, [pc, #168]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d76:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d78:	4b29      	ldr	r3, [pc, #164]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d7e:	4b28      	ldr	r3, [pc, #160]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d84:	4a24      	ldr	r2, [pc, #144]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d8a:	4b23      	ldr	r3, [pc, #140]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d114      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d96:	f7fc fc91 	bl	80026bc <HAL_GetTick>
 8005d9a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d9c:	e00a      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d9e:	f7fc fc8d 	bl	80026bc <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e02a      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db4:	4b18      	ldr	r3, [pc, #96]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0ee      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dcc:	d10d      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005dce:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de2:	490d      	ldr	r1, [pc, #52]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	608b      	str	r3, [r1, #8]
 8005de8:	e005      	b.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005dea:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	4a0a      	ldr	r2, [pc, #40]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005df4:	6093      	str	r3, [r2, #8]
 8005df6:	4b08      	ldr	r3, [pc, #32]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e02:	4905      	ldr	r1, [pc, #20]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	42470068 	.word	0x42470068
 8005e18:	40023800 	.word	0x40023800
 8005e1c:	40007000 	.word	0x40007000
 8005e20:	42470e40 	.word	0x42470e40

08005e24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d13e      	bne.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005e42:	4b23      	ldr	r3, [pc, #140]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d12f      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e58:	4b1e      	ldr	r3, [pc, #120]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e5a:	617b      	str	r3, [r7, #20]
          break;
 8005e5c:	e02f      	b.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e5e:	4b1c      	ldr	r3, [pc, #112]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e6a:	d108      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e6c:	4b18      	ldr	r3, [pc, #96]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e74:	4a18      	ldr	r2, [pc, #96]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	e007      	b.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e7e:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e86:	4a15      	ldr	r2, [pc, #84]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005e8e:	4b10      	ldr	r3, [pc, #64]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e94:	099b      	lsrs	r3, r3, #6
 8005e96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ea0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005ea2:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ea8:	0f1b      	lsrs	r3, r3, #28
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb4:	617b      	str	r3, [r7, #20]
          break;
 8005eb6:	e002      	b.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	617b      	str	r3, [r7, #20]
          break;
 8005ebc:	bf00      	nop
        }
      }
      break;
 8005ebe:	bf00      	nop
    }
  }
  return frequency;
 8005ec0:	697b      	ldr	r3, [r7, #20]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	00bb8000 	.word	0x00bb8000
 8005ed8:	007a1200 	.word	0x007a1200
 8005edc:	00f42400 	.word	0x00f42400

08005ee0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e01c      	b.n	8005f2c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	795b      	ldrb	r3, [r3, #5]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d105      	bne.n	8005f08 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fc f92c 	bl	8002160 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0204 	orr.w	r2, r2, #4
 8005f1c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e07b      	b.n	800603e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d108      	bne.n	8005f60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f56:	d009      	beq.n	8005f6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	61da      	str	r2, [r3, #28]
 8005f5e:	e005      	b.n	8005f6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fc f90c 	bl	80021a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fa2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff0:	ea42 0103 	orr.w	r1, r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	0c1b      	lsrs	r3, r3, #16
 800600a:	f003 0104 	and.w	r1, r3, #4
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	f003 0210 	and.w	r2, r3, #16
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69da      	ldr	r2, [r3, #28]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800602c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b088      	sub	sp, #32
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	603b      	str	r3, [r7, #0]
 8006052:	4613      	mov	r3, r2
 8006054:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_SPI_Transmit+0x22>
 8006064:	2302      	movs	r3, #2
 8006066:	e126      	b.n	80062b6 <HAL_SPI_Transmit+0x270>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006070:	f7fc fb24 	bl	80026bc <HAL_GetTick>
 8006074:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006076:	88fb      	ldrh	r3, [r7, #6]
 8006078:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b01      	cmp	r3, #1
 8006084:	d002      	beq.n	800608c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006086:	2302      	movs	r3, #2
 8006088:	77fb      	strb	r3, [r7, #31]
    goto error;
 800608a:	e10b      	b.n	80062a4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <HAL_SPI_Transmit+0x52>
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d102      	bne.n	800609e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800609c:	e102      	b.n	80062a4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2203      	movs	r2, #3
 80060a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	88fa      	ldrh	r2, [r7, #6]
 80060b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	88fa      	ldrh	r2, [r7, #6]
 80060bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e4:	d10f      	bne.n	8006106 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006104:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006110:	2b40      	cmp	r3, #64	; 0x40
 8006112:	d007      	beq.n	8006124 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006122:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800612c:	d14b      	bne.n	80061c6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <HAL_SPI_Transmit+0xf6>
 8006136:	8afb      	ldrh	r3, [r7, #22]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d13e      	bne.n	80061ba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006140:	881a      	ldrh	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614c:	1c9a      	adds	r2, r3, #2
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006156:	b29b      	uxth	r3, r3
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006160:	e02b      	b.n	80061ba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b02      	cmp	r3, #2
 800616e:	d112      	bne.n	8006196 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	881a      	ldrh	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	1c9a      	adds	r2, r3, #2
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800618a:	b29b      	uxth	r3, r3
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	86da      	strh	r2, [r3, #54]	; 0x36
 8006194:	e011      	b.n	80061ba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006196:	f7fc fa91 	bl	80026bc <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d803      	bhi.n	80061ae <HAL_SPI_Transmit+0x168>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061ac:	d102      	bne.n	80061b4 <HAL_SPI_Transmit+0x16e>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d102      	bne.n	80061ba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061b8:	e074      	b.n	80062a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1ce      	bne.n	8006162 <HAL_SPI_Transmit+0x11c>
 80061c4:	e04c      	b.n	8006260 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <HAL_SPI_Transmit+0x18e>
 80061ce:	8afb      	ldrh	r3, [r7, #22]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d140      	bne.n	8006256 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	330c      	adds	r3, #12
 80061de:	7812      	ldrb	r2, [r2, #0]
 80061e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061fa:	e02c      	b.n	8006256 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b02      	cmp	r3, #2
 8006208:	d113      	bne.n	8006232 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	330c      	adds	r3, #12
 8006214:	7812      	ldrb	r2, [r2, #0]
 8006216:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006230:	e011      	b.n	8006256 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006232:	f7fc fa43 	bl	80026bc <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	429a      	cmp	r2, r3
 8006240:	d803      	bhi.n	800624a <HAL_SPI_Transmit+0x204>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006248:	d102      	bne.n	8006250 <HAL_SPI_Transmit+0x20a>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d102      	bne.n	8006256 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006254:	e026      	b.n	80062a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1cd      	bne.n	80061fc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f8b3 	bl	80063d0 <SPI_EndRxTxTransaction>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2220      	movs	r2, #32
 8006274:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800627e:	2300      	movs	r3, #0
 8006280:	613b      	str	r3, [r7, #16]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	613b      	str	r3, [r7, #16]
 8006292:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	77fb      	strb	r3, [r7, #31]
 80062a0:	e000      	b.n	80062a4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80062a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b088      	sub	sp, #32
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	4613      	mov	r3, r2
 80062ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062d0:	f7fc f9f4 	bl	80026bc <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d8:	1a9b      	subs	r3, r3, r2
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	4413      	add	r3, r2
 80062de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062e0:	f7fc f9ec 	bl	80026bc <HAL_GetTick>
 80062e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062e6:	4b39      	ldr	r3, [pc, #228]	; (80063cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	015b      	lsls	r3, r3, #5
 80062ec:	0d1b      	lsrs	r3, r3, #20
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	fb02 f303 	mul.w	r3, r2, r3
 80062f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062f6:	e054      	b.n	80063a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062fe:	d050      	beq.n	80063a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006300:	f7fc f9dc 	bl	80026bc <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	69fa      	ldr	r2, [r7, #28]
 800630c:	429a      	cmp	r2, r3
 800630e:	d902      	bls.n	8006316 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d13d      	bne.n	8006392 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006324:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800632e:	d111      	bne.n	8006354 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006338:	d004      	beq.n	8006344 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006342:	d107      	bne.n	8006354 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006352:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800635c:	d10f      	bne.n	800637e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800637c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e017      	b.n	80063c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	3b01      	subs	r3, #1
 80063a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4013      	ands	r3, r2
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	bf0c      	ite	eq
 80063b2:	2301      	moveq	r3, #1
 80063b4:	2300      	movne	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d19b      	bne.n	80062f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3720      	adds	r7, #32
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	2000000c 	.word	0x2000000c

080063d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063dc:	4b1b      	ldr	r3, [pc, #108]	; (800644c <SPI_EndRxTxTransaction+0x7c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1b      	ldr	r2, [pc, #108]	; (8006450 <SPI_EndRxTxTransaction+0x80>)
 80063e2:	fba2 2303 	umull	r2, r3, r2, r3
 80063e6:	0d5b      	lsrs	r3, r3, #21
 80063e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063ec:	fb02 f303 	mul.w	r3, r2, r3
 80063f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063fa:	d112      	bne.n	8006422 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2200      	movs	r2, #0
 8006404:	2180      	movs	r1, #128	; 0x80
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f7ff ff5a 	bl	80062c0 <SPI_WaitFlagStateUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d016      	beq.n	8006440 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006416:	f043 0220 	orr.w	r2, r3, #32
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e00f      	b.n	8006442 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00a      	beq.n	800643e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	3b01      	subs	r3, #1
 800642c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006438:	2b80      	cmp	r3, #128	; 0x80
 800643a:	d0f2      	beq.n	8006422 <SPI_EndRxTxTransaction+0x52>
 800643c:	e000      	b.n	8006440 <SPI_EndRxTxTransaction+0x70>
        break;
 800643e:	bf00      	nop
  }

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	2000000c 	.word	0x2000000c
 8006450:	165e9f81 	.word	0x165e9f81

08006454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e041      	b.n	80064ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fb ff78 	bl	8002370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3304      	adds	r3, #4
 8006490:	4619      	mov	r1, r3
 8006492:	4610      	mov	r0, r2
 8006494:	f000 fd68 	bl	8006f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b01      	cmp	r3, #1
 8006506:	d001      	beq.n	800650c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e04e      	b.n	80065aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a23      	ldr	r2, [pc, #140]	; (80065b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d022      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006536:	d01d      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a1f      	ldr	r2, [pc, #124]	; (80065bc <HAL_TIM_Base_Start_IT+0xc8>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d018      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a1e      	ldr	r2, [pc, #120]	; (80065c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d013      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a1c      	ldr	r2, [pc, #112]	; (80065c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00e      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a1b      	ldr	r2, [pc, #108]	; (80065c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d009      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a19      	ldr	r2, [pc, #100]	; (80065cc <HAL_TIM_Base_Start_IT+0xd8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d004      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a18      	ldr	r2, [pc, #96]	; (80065d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d111      	bne.n	8006598 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b06      	cmp	r3, #6
 8006584:	d010      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0201 	orr.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006596:	e007      	b.n	80065a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0201 	orr.w	r2, r2, #1
 80065a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40010000 	.word	0x40010000
 80065bc:	40000400 	.word	0x40000400
 80065c0:	40000800 	.word	0x40000800
 80065c4:	40000c00 	.word	0x40000c00
 80065c8:	40010400 	.word	0x40010400
 80065cc:	40014000 	.word	0x40014000
 80065d0:	40001800 	.word	0x40001800

080065d4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d109      	bne.n	80065f8 <HAL_TIM_OC_Start_IT+0x24>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	bf14      	ite	ne
 80065f0:	2301      	movne	r3, #1
 80065f2:	2300      	moveq	r3, #0
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	e022      	b.n	800663e <HAL_TIM_OC_Start_IT+0x6a>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d109      	bne.n	8006612 <HAL_TIM_OC_Start_IT+0x3e>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b01      	cmp	r3, #1
 8006608:	bf14      	ite	ne
 800660a:	2301      	movne	r3, #1
 800660c:	2300      	moveq	r3, #0
 800660e:	b2db      	uxtb	r3, r3
 8006610:	e015      	b.n	800663e <HAL_TIM_OC_Start_IT+0x6a>
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b08      	cmp	r3, #8
 8006616:	d109      	bne.n	800662c <HAL_TIM_OC_Start_IT+0x58>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	bf14      	ite	ne
 8006624:	2301      	movne	r3, #1
 8006626:	2300      	moveq	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	e008      	b.n	800663e <HAL_TIM_OC_Start_IT+0x6a>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b01      	cmp	r3, #1
 8006636:	bf14      	ite	ne
 8006638:	2301      	movne	r3, #1
 800663a:	2300      	moveq	r3, #0
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e0c2      	b.n	80067cc <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d104      	bne.n	8006656 <HAL_TIM_OC_Start_IT+0x82>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006654:	e013      	b.n	800667e <HAL_TIM_OC_Start_IT+0xaa>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b04      	cmp	r3, #4
 800665a:	d104      	bne.n	8006666 <HAL_TIM_OC_Start_IT+0x92>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006664:	e00b      	b.n	800667e <HAL_TIM_OC_Start_IT+0xaa>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b08      	cmp	r3, #8
 800666a:	d104      	bne.n	8006676 <HAL_TIM_OC_Start_IT+0xa2>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006674:	e003      	b.n	800667e <HAL_TIM_OC_Start_IT+0xaa>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2202      	movs	r2, #2
 800667a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b0c      	cmp	r3, #12
 8006682:	d841      	bhi.n	8006708 <HAL_TIM_OC_Start_IT+0x134>
 8006684:	a201      	add	r2, pc, #4	; (adr r2, 800668c <HAL_TIM_OC_Start_IT+0xb8>)
 8006686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668a:	bf00      	nop
 800668c:	080066c1 	.word	0x080066c1
 8006690:	08006709 	.word	0x08006709
 8006694:	08006709 	.word	0x08006709
 8006698:	08006709 	.word	0x08006709
 800669c:	080066d3 	.word	0x080066d3
 80066a0:	08006709 	.word	0x08006709
 80066a4:	08006709 	.word	0x08006709
 80066a8:	08006709 	.word	0x08006709
 80066ac:	080066e5 	.word	0x080066e5
 80066b0:	08006709 	.word	0x08006709
 80066b4:	08006709 	.word	0x08006709
 80066b8:	08006709 	.word	0x08006709
 80066bc:	080066f7 	.word	0x080066f7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0202 	orr.w	r2, r2, #2
 80066ce:	60da      	str	r2, [r3, #12]
      break;
 80066d0:	e01b      	b.n	800670a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0204 	orr.w	r2, r2, #4
 80066e0:	60da      	str	r2, [r3, #12]
      break;
 80066e2:	e012      	b.n	800670a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0208 	orr.w	r2, r2, #8
 80066f2:	60da      	str	r2, [r3, #12]
      break;
 80066f4:	e009      	b.n	800670a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f042 0210 	orr.w	r2, r2, #16
 8006704:	60da      	str	r2, [r3, #12]
      break;
 8006706:	e000      	b.n	800670a <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8006708:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2201      	movs	r2, #1
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	4618      	mov	r0, r3
 8006714:	f000 ff12 	bl	800753c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a2d      	ldr	r2, [pc, #180]	; (80067d4 <HAL_TIM_OC_Start_IT+0x200>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d004      	beq.n	800672c <HAL_TIM_OC_Start_IT+0x158>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a2c      	ldr	r2, [pc, #176]	; (80067d8 <HAL_TIM_OC_Start_IT+0x204>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d101      	bne.n	8006730 <HAL_TIM_OC_Start_IT+0x15c>
 800672c:	2301      	movs	r3, #1
 800672e:	e000      	b.n	8006732 <HAL_TIM_OC_Start_IT+0x15e>
 8006730:	2300      	movs	r3, #0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d007      	beq.n	8006746 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006744:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a22      	ldr	r2, [pc, #136]	; (80067d4 <HAL_TIM_OC_Start_IT+0x200>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d022      	beq.n	8006796 <HAL_TIM_OC_Start_IT+0x1c2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006758:	d01d      	beq.n	8006796 <HAL_TIM_OC_Start_IT+0x1c2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a1f      	ldr	r2, [pc, #124]	; (80067dc <HAL_TIM_OC_Start_IT+0x208>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d018      	beq.n	8006796 <HAL_TIM_OC_Start_IT+0x1c2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1d      	ldr	r2, [pc, #116]	; (80067e0 <HAL_TIM_OC_Start_IT+0x20c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d013      	beq.n	8006796 <HAL_TIM_OC_Start_IT+0x1c2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1c      	ldr	r2, [pc, #112]	; (80067e4 <HAL_TIM_OC_Start_IT+0x210>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00e      	beq.n	8006796 <HAL_TIM_OC_Start_IT+0x1c2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a16      	ldr	r2, [pc, #88]	; (80067d8 <HAL_TIM_OC_Start_IT+0x204>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d009      	beq.n	8006796 <HAL_TIM_OC_Start_IT+0x1c2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a18      	ldr	r2, [pc, #96]	; (80067e8 <HAL_TIM_OC_Start_IT+0x214>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d004      	beq.n	8006796 <HAL_TIM_OC_Start_IT+0x1c2>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a16      	ldr	r2, [pc, #88]	; (80067ec <HAL_TIM_OC_Start_IT+0x218>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d111      	bne.n	80067ba <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f003 0307 	and.w	r3, r3, #7
 80067a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b06      	cmp	r3, #6
 80067a6:	d010      	beq.n	80067ca <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f042 0201 	orr.w	r2, r2, #1
 80067b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067b8:	e007      	b.n	80067ca <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f042 0201 	orr.w	r2, r2, #1
 80067c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	40010000 	.word	0x40010000
 80067d8:	40010400 	.word	0x40010400
 80067dc:	40000400 	.word	0x40000400
 80067e0:	40000800 	.word	0x40000800
 80067e4:	40000c00 	.word	0x40000c00
 80067e8:	40014000 	.word	0x40014000
 80067ec:	40001800 	.word	0x40001800

080067f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e041      	b.n	8006886 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d106      	bne.n	800681c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f839 	bl	800688e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3304      	adds	r3, #4
 800682c:	4619      	mov	r1, r3
 800682e:	4610      	mov	r0, r2
 8006830:	f000 fb9a 	bl	8006f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b086      	sub	sp, #24
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e097      	b.n	80069e6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d106      	bne.n	80068d0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7fb fd08 	bl	80022e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068e6:	f023 0307 	bic.w	r3, r3, #7
 80068ea:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	3304      	adds	r3, #4
 80068f4:	4619      	mov	r1, r3
 80068f6:	4610      	mov	r0, r2
 80068f8:	f000 fb36 	bl	8006f68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	4313      	orrs	r3, r2
 800691c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006924:	f023 0303 	bic.w	r3, r3, #3
 8006928:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	021b      	lsls	r3, r3, #8
 8006934:	4313      	orrs	r3, r2
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006942:	f023 030c 	bic.w	r3, r3, #12
 8006946:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800694e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	021b      	lsls	r3, r3, #8
 800695e:	4313      	orrs	r3, r2
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	4313      	orrs	r3, r2
 8006964:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	011a      	lsls	r2, r3, #4
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	031b      	lsls	r3, r3, #12
 8006972:	4313      	orrs	r3, r2
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	4313      	orrs	r3, r2
 8006978:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006980:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006988:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	4313      	orrs	r3, r2
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b082      	sub	sp, #8
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d122      	bne.n	8006a4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d11b      	bne.n	8006a4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f06f 0202 	mvn.w	r2, #2
 8006a1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fa7b 	bl	8006f2c <HAL_TIM_IC_CaptureCallback>
 8006a36:	e005      	b.n	8006a44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fa6d 	bl	8006f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fa7e 	bl	8006f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d122      	bne.n	8006a9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f003 0304 	and.w	r3, r3, #4
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d11b      	bne.n	8006a9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f06f 0204 	mvn.w	r2, #4
 8006a6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fa51 	bl	8006f2c <HAL_TIM_IC_CaptureCallback>
 8006a8a:	e005      	b.n	8006a98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fa43 	bl	8006f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa54 	bl	8006f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	f003 0308 	and.w	r3, r3, #8
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d122      	bne.n	8006af2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	f003 0308 	and.w	r3, r3, #8
 8006ab6:	2b08      	cmp	r3, #8
 8006ab8:	d11b      	bne.n	8006af2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f06f 0208 	mvn.w	r2, #8
 8006ac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2204      	movs	r2, #4
 8006ac8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	f003 0303 	and.w	r3, r3, #3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d003      	beq.n	8006ae0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fa27 	bl	8006f2c <HAL_TIM_IC_CaptureCallback>
 8006ade:	e005      	b.n	8006aec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fa19 	bl	8006f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fa2a 	bl	8006f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f003 0310 	and.w	r3, r3, #16
 8006afc:	2b10      	cmp	r3, #16
 8006afe:	d122      	bne.n	8006b46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f003 0310 	and.w	r3, r3, #16
 8006b0a:	2b10      	cmp	r3, #16
 8006b0c:	d11b      	bne.n	8006b46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f06f 0210 	mvn.w	r2, #16
 8006b16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2208      	movs	r2, #8
 8006b1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f9fd 	bl	8006f2c <HAL_TIM_IC_CaptureCallback>
 8006b32:	e005      	b.n	8006b40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f9ef 	bl	8006f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fa00 	bl	8006f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d10e      	bne.n	8006b72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d107      	bne.n	8006b72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f06f 0201 	mvn.w	r2, #1
 8006b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f9c9 	bl	8006f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b7c:	2b80      	cmp	r3, #128	; 0x80
 8006b7e:	d10e      	bne.n	8006b9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8a:	2b80      	cmp	r3, #128	; 0x80
 8006b8c:	d107      	bne.n	8006b9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fd7b 	bl	8007694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba8:	2b40      	cmp	r3, #64	; 0x40
 8006baa:	d10e      	bne.n	8006bca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb6:	2b40      	cmp	r3, #64	; 0x40
 8006bb8:	d107      	bne.n	8006bca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f9c5 	bl	8006f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	d10e      	bne.n	8006bf6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f003 0320 	and.w	r3, r3, #32
 8006be2:	2b20      	cmp	r3, #32
 8006be4:	d107      	bne.n	8006bf6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f06f 0220 	mvn.w	r2, #32
 8006bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fd45 	bl	8007680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bf6:	bf00      	nop
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d101      	bne.n	8006c1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e0ac      	b.n	8006d74 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b0c      	cmp	r3, #12
 8006c26:	f200 809f 	bhi.w	8006d68 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006c2a:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c30:	08006c65 	.word	0x08006c65
 8006c34:	08006d69 	.word	0x08006d69
 8006c38:	08006d69 	.word	0x08006d69
 8006c3c:	08006d69 	.word	0x08006d69
 8006c40:	08006ca5 	.word	0x08006ca5
 8006c44:	08006d69 	.word	0x08006d69
 8006c48:	08006d69 	.word	0x08006d69
 8006c4c:	08006d69 	.word	0x08006d69
 8006c50:	08006ce7 	.word	0x08006ce7
 8006c54:	08006d69 	.word	0x08006d69
 8006c58:	08006d69 	.word	0x08006d69
 8006c5c:	08006d69 	.word	0x08006d69
 8006c60:	08006d27 	.word	0x08006d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fa1c 	bl	80070a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699a      	ldr	r2, [r3, #24]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0208 	orr.w	r2, r2, #8
 8006c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	699a      	ldr	r2, [r3, #24]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0204 	bic.w	r2, r2, #4
 8006c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6999      	ldr	r1, [r3, #24]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	691a      	ldr	r2, [r3, #16]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	619a      	str	r2, [r3, #24]
      break;
 8006ca2:	e062      	b.n	8006d6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68b9      	ldr	r1, [r7, #8]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fa6c 	bl	8007188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699a      	ldr	r2, [r3, #24]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699a      	ldr	r2, [r3, #24]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6999      	ldr	r1, [r3, #24]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	021a      	lsls	r2, r3, #8
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	619a      	str	r2, [r3, #24]
      break;
 8006ce4:	e041      	b.n	8006d6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68b9      	ldr	r1, [r7, #8]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 fac1 	bl	8007274 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69da      	ldr	r2, [r3, #28]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f042 0208 	orr.w	r2, r2, #8
 8006d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69da      	ldr	r2, [r3, #28]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0204 	bic.w	r2, r2, #4
 8006d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69d9      	ldr	r1, [r3, #28]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	691a      	ldr	r2, [r3, #16]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	61da      	str	r2, [r3, #28]
      break;
 8006d24:	e021      	b.n	8006d6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68b9      	ldr	r1, [r7, #8]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 fb15 	bl	800735c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69da      	ldr	r2, [r3, #28]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	69da      	ldr	r2, [r3, #28]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69d9      	ldr	r1, [r3, #28]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	021a      	lsls	r2, r3, #8
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	61da      	str	r2, [r3, #28]
      break;
 8006d66:	e000      	b.n	8006d6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006d68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d101      	bne.n	8006d94 <HAL_TIM_ConfigClockSource+0x18>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e0b3      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x180>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006db2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dcc:	d03e      	beq.n	8006e4c <HAL_TIM_ConfigClockSource+0xd0>
 8006dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd2:	f200 8087 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x168>
 8006dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dda:	f000 8085 	beq.w	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8006dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de2:	d87f      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x168>
 8006de4:	2b70      	cmp	r3, #112	; 0x70
 8006de6:	d01a      	beq.n	8006e1e <HAL_TIM_ConfigClockSource+0xa2>
 8006de8:	2b70      	cmp	r3, #112	; 0x70
 8006dea:	d87b      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x168>
 8006dec:	2b60      	cmp	r3, #96	; 0x60
 8006dee:	d050      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0x116>
 8006df0:	2b60      	cmp	r3, #96	; 0x60
 8006df2:	d877      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x168>
 8006df4:	2b50      	cmp	r3, #80	; 0x50
 8006df6:	d03c      	beq.n	8006e72 <HAL_TIM_ConfigClockSource+0xf6>
 8006df8:	2b50      	cmp	r3, #80	; 0x50
 8006dfa:	d873      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x168>
 8006dfc:	2b40      	cmp	r3, #64	; 0x40
 8006dfe:	d058      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x136>
 8006e00:	2b40      	cmp	r3, #64	; 0x40
 8006e02:	d86f      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x168>
 8006e04:	2b30      	cmp	r3, #48	; 0x30
 8006e06:	d064      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x156>
 8006e08:	2b30      	cmp	r3, #48	; 0x30
 8006e0a:	d86b      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x168>
 8006e0c:	2b20      	cmp	r3, #32
 8006e0e:	d060      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x156>
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d867      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x168>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d05c      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x156>
 8006e18:	2b10      	cmp	r3, #16
 8006e1a:	d05a      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006e1c:	e062      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6818      	ldr	r0, [r3, #0]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6899      	ldr	r1, [r3, #8]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f000 fb65 	bl	80074fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	609a      	str	r2, [r3, #8]
      break;
 8006e4a:	e04e      	b.n	8006eea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	6899      	ldr	r1, [r3, #8]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f000 fb4e 	bl	80074fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e6e:	609a      	str	r2, [r3, #8]
      break;
 8006e70:	e03b      	b.n	8006eea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6818      	ldr	r0, [r3, #0]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	6859      	ldr	r1, [r3, #4]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f000 fac2 	bl	8007408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2150      	movs	r1, #80	; 0x50
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fb1b 	bl	80074c6 <TIM_ITRx_SetConfig>
      break;
 8006e90:	e02b      	b.n	8006eea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6818      	ldr	r0, [r3, #0]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6859      	ldr	r1, [r3, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f000 fae1 	bl	8007466 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2160      	movs	r1, #96	; 0x60
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fb0b 	bl	80074c6 <TIM_ITRx_SetConfig>
      break;
 8006eb0:	e01b      	b.n	8006eea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6818      	ldr	r0, [r3, #0]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6859      	ldr	r1, [r3, #4]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f000 faa2 	bl	8007408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2140      	movs	r1, #64	; 0x40
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fafb 	bl	80074c6 <TIM_ITRx_SetConfig>
      break;
 8006ed0:	e00b      	b.n	8006eea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4619      	mov	r1, r3
 8006edc:	4610      	mov	r0, r2
 8006ede:	f000 faf2 	bl	80074c6 <TIM_ITRx_SetConfig>
        break;
 8006ee2:	e002      	b.n	8006eea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006ee4:	bf00      	nop
 8006ee6:	e000      	b.n	8006eea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006ee8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a40      	ldr	r2, [pc, #256]	; (800707c <TIM_Base_SetConfig+0x114>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d013      	beq.n	8006fa8 <TIM_Base_SetConfig+0x40>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f86:	d00f      	beq.n	8006fa8 <TIM_Base_SetConfig+0x40>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a3d      	ldr	r2, [pc, #244]	; (8007080 <TIM_Base_SetConfig+0x118>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00b      	beq.n	8006fa8 <TIM_Base_SetConfig+0x40>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a3c      	ldr	r2, [pc, #240]	; (8007084 <TIM_Base_SetConfig+0x11c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d007      	beq.n	8006fa8 <TIM_Base_SetConfig+0x40>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a3b      	ldr	r2, [pc, #236]	; (8007088 <TIM_Base_SetConfig+0x120>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d003      	beq.n	8006fa8 <TIM_Base_SetConfig+0x40>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a3a      	ldr	r2, [pc, #232]	; (800708c <TIM_Base_SetConfig+0x124>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d108      	bne.n	8006fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a2f      	ldr	r2, [pc, #188]	; (800707c <TIM_Base_SetConfig+0x114>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d02b      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc8:	d027      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a2c      	ldr	r2, [pc, #176]	; (8007080 <TIM_Base_SetConfig+0x118>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d023      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a2b      	ldr	r2, [pc, #172]	; (8007084 <TIM_Base_SetConfig+0x11c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d01f      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a2a      	ldr	r2, [pc, #168]	; (8007088 <TIM_Base_SetConfig+0x120>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d01b      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a29      	ldr	r2, [pc, #164]	; (800708c <TIM_Base_SetConfig+0x124>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d017      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a28      	ldr	r2, [pc, #160]	; (8007090 <TIM_Base_SetConfig+0x128>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d013      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a27      	ldr	r2, [pc, #156]	; (8007094 <TIM_Base_SetConfig+0x12c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00f      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a26      	ldr	r2, [pc, #152]	; (8007098 <TIM_Base_SetConfig+0x130>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d00b      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a25      	ldr	r2, [pc, #148]	; (800709c <TIM_Base_SetConfig+0x134>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d007      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a24      	ldr	r2, [pc, #144]	; (80070a0 <TIM_Base_SetConfig+0x138>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d003      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a23      	ldr	r2, [pc, #140]	; (80070a4 <TIM_Base_SetConfig+0x13c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d108      	bne.n	800702c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	4313      	orrs	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	689a      	ldr	r2, [r3, #8]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a0a      	ldr	r2, [pc, #40]	; (800707c <TIM_Base_SetConfig+0x114>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d003      	beq.n	8007060 <TIM_Base_SetConfig+0xf8>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a0c      	ldr	r2, [pc, #48]	; (800708c <TIM_Base_SetConfig+0x124>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d103      	bne.n	8007068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	691a      	ldr	r2, [r3, #16]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	615a      	str	r2, [r3, #20]
}
 800706e:	bf00      	nop
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	40010000 	.word	0x40010000
 8007080:	40000400 	.word	0x40000400
 8007084:	40000800 	.word	0x40000800
 8007088:	40000c00 	.word	0x40000c00
 800708c:	40010400 	.word	0x40010400
 8007090:	40014000 	.word	0x40014000
 8007094:	40014400 	.word	0x40014400
 8007098:	40014800 	.word	0x40014800
 800709c:	40001800 	.word	0x40001800
 80070a0:	40001c00 	.word	0x40001c00
 80070a4:	40002000 	.word	0x40002000

080070a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	f023 0201 	bic.w	r2, r3, #1
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f023 0303 	bic.w	r3, r3, #3
 80070de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f023 0302 	bic.w	r3, r3, #2
 80070f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a20      	ldr	r2, [pc, #128]	; (8007180 <TIM_OC1_SetConfig+0xd8>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d003      	beq.n	800710c <TIM_OC1_SetConfig+0x64>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a1f      	ldr	r2, [pc, #124]	; (8007184 <TIM_OC1_SetConfig+0xdc>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d10c      	bne.n	8007126 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f023 0308 	bic.w	r3, r3, #8
 8007112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	4313      	orrs	r3, r2
 800711c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f023 0304 	bic.w	r3, r3, #4
 8007124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a15      	ldr	r2, [pc, #84]	; (8007180 <TIM_OC1_SetConfig+0xd8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d003      	beq.n	8007136 <TIM_OC1_SetConfig+0x8e>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a14      	ldr	r2, [pc, #80]	; (8007184 <TIM_OC1_SetConfig+0xdc>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d111      	bne.n	800715a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800713c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4313      	orrs	r3, r2
 800714e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	621a      	str	r2, [r3, #32]
}
 8007174:	bf00      	nop
 8007176:	371c      	adds	r7, #28
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	40010000 	.word	0x40010000
 8007184:	40010400 	.word	0x40010400

08007188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f023 0210 	bic.w	r2, r3, #16
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	021b      	lsls	r3, r3, #8
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f023 0320 	bic.w	r3, r3, #32
 80071d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	4313      	orrs	r3, r2
 80071de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a22      	ldr	r2, [pc, #136]	; (800726c <TIM_OC2_SetConfig+0xe4>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d003      	beq.n	80071f0 <TIM_OC2_SetConfig+0x68>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a21      	ldr	r2, [pc, #132]	; (8007270 <TIM_OC2_SetConfig+0xe8>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d10d      	bne.n	800720c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	011b      	lsls	r3, r3, #4
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800720a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a17      	ldr	r2, [pc, #92]	; (800726c <TIM_OC2_SetConfig+0xe4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d003      	beq.n	800721c <TIM_OC2_SetConfig+0x94>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a16      	ldr	r2, [pc, #88]	; (8007270 <TIM_OC2_SetConfig+0xe8>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d113      	bne.n	8007244 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007222:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800722a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	4313      	orrs	r3, r2
 8007242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	621a      	str	r2, [r3, #32]
}
 800725e:	bf00      	nop
 8007260:	371c      	adds	r7, #28
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	40010000 	.word	0x40010000
 8007270:	40010400 	.word	0x40010400

08007274 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f023 0303 	bic.w	r3, r3, #3
 80072aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	021b      	lsls	r3, r3, #8
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a21      	ldr	r2, [pc, #132]	; (8007354 <TIM_OC3_SetConfig+0xe0>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d003      	beq.n	80072da <TIM_OC3_SetConfig+0x66>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a20      	ldr	r2, [pc, #128]	; (8007358 <TIM_OC3_SetConfig+0xe4>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d10d      	bne.n	80072f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	021b      	lsls	r3, r3, #8
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a16      	ldr	r2, [pc, #88]	; (8007354 <TIM_OC3_SetConfig+0xe0>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d003      	beq.n	8007306 <TIM_OC3_SetConfig+0x92>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a15      	ldr	r2, [pc, #84]	; (8007358 <TIM_OC3_SetConfig+0xe4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d113      	bne.n	800732e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800730c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	4313      	orrs	r3, r2
 8007320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	4313      	orrs	r3, r2
 800732c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	621a      	str	r2, [r3, #32]
}
 8007348:	bf00      	nop
 800734a:	371c      	adds	r7, #28
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	40010000 	.word	0x40010000
 8007358:	40010400 	.word	0x40010400

0800735c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800738a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	021b      	lsls	r3, r3, #8
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4313      	orrs	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	031b      	lsls	r3, r3, #12
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a12      	ldr	r2, [pc, #72]	; (8007400 <TIM_OC4_SetConfig+0xa4>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d003      	beq.n	80073c4 <TIM_OC4_SetConfig+0x68>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a11      	ldr	r2, [pc, #68]	; (8007404 <TIM_OC4_SetConfig+0xa8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d109      	bne.n	80073d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	019b      	lsls	r3, r3, #6
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	621a      	str	r2, [r3, #32]
}
 80073f2:	bf00      	nop
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40010000 	.word	0x40010000
 8007404:	40010400 	.word	0x40010400

08007408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	f023 0201 	bic.w	r2, r3, #1
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	011b      	lsls	r3, r3, #4
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	4313      	orrs	r3, r2
 800743c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f023 030a 	bic.w	r3, r3, #10
 8007444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4313      	orrs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	621a      	str	r2, [r3, #32]
}
 800745a:	bf00      	nop
 800745c:	371c      	adds	r7, #28
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007466:	b480      	push	{r7}
 8007468:	b087      	sub	sp, #28
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f023 0210 	bic.w	r2, r3, #16
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007490:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	031b      	lsls	r3, r3, #12
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	4313      	orrs	r3, r2
 800749a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	693a      	ldr	r2, [r7, #16]
 80074b8:	621a      	str	r2, [r3, #32]
}
 80074ba:	bf00      	nop
 80074bc:	371c      	adds	r7, #28
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b085      	sub	sp, #20
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	f043 0307 	orr.w	r3, r3, #7
 80074e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	609a      	str	r2, [r3, #8]
}
 80074f0:	bf00      	nop
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	021a      	lsls	r2, r3, #8
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	431a      	orrs	r2, r3
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	4313      	orrs	r3, r2
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	609a      	str	r2, [r3, #8]
}
 8007530:	bf00      	nop
 8007532:	371c      	adds	r7, #28
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	f003 031f 	and.w	r3, r3, #31
 800754e:	2201      	movs	r2, #1
 8007550:	fa02 f303 	lsl.w	r3, r2, r3
 8007554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6a1a      	ldr	r2, [r3, #32]
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	43db      	mvns	r3, r3
 800755e:	401a      	ands	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a1a      	ldr	r2, [r3, #32]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f003 031f 	and.w	r3, r3, #31
 800756e:	6879      	ldr	r1, [r7, #4]
 8007570:	fa01 f303 	lsl.w	r3, r1, r3
 8007574:	431a      	orrs	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	621a      	str	r2, [r3, #32]
}
 800757a:	bf00      	nop
 800757c:	371c      	adds	r7, #28
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
	...

08007588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007598:	2b01      	cmp	r3, #1
 800759a:	d101      	bne.n	80075a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800759c:	2302      	movs	r3, #2
 800759e:	e05a      	b.n	8007656 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a21      	ldr	r2, [pc, #132]	; (8007664 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d022      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ec:	d01d      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a1d      	ldr	r2, [pc, #116]	; (8007668 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d018      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a1b      	ldr	r2, [pc, #108]	; (800766c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d013      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a1a      	ldr	r2, [pc, #104]	; (8007670 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d00e      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a18      	ldr	r2, [pc, #96]	; (8007674 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d009      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a17      	ldr	r2, [pc, #92]	; (8007678 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d004      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a15      	ldr	r2, [pc, #84]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d10c      	bne.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	4313      	orrs	r3, r2
 800763a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	40010000 	.word	0x40010000
 8007668:	40000400 	.word	0x40000400
 800766c:	40000800 	.word	0x40000800
 8007670:	40000c00 	.word	0x40000c00
 8007674:	40010400 	.word	0x40010400
 8007678:	40014000 	.word	0x40014000
 800767c:	40001800 	.word	0x40001800

08007680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076a8:	b084      	sub	sp, #16
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	f107 001c 	add.w	r0, r7, #28
 80076b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d122      	bne.n	8007706 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80076d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d105      	bne.n	80076fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f94a 	bl	8007994 <USB_CoreReset>
 8007700:	4603      	mov	r3, r0
 8007702:	73fb      	strb	r3, [r7, #15]
 8007704:	e01a      	b.n	800773c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f93e 	bl	8007994 <USB_CoreReset>
 8007718:	4603      	mov	r3, r0
 800771a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800771c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	639a      	str	r2, [r3, #56]	; 0x38
 800772e:	e005      	b.n	800773c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007734:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773e:	2b01      	cmp	r3, #1
 8007740:	d10b      	bne.n	800775a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f043 0206 	orr.w	r2, r3, #6
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f043 0220 	orr.w	r2, r3, #32
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800775a:	7bfb      	ldrb	r3, [r7, #15]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007766:	b004      	add	sp, #16
 8007768:	4770      	bx	lr

0800776a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f043 0201 	orr.w	r2, r3, #1
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f023 0201 	bic.w	r2, r3, #1
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b082      	sub	sp, #8
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	460b      	mov	r3, r1
 80077b8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077c6:	78fb      	ldrb	r3, [r7, #3]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d106      	bne.n	80077da <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	60da      	str	r2, [r3, #12]
 80077d8:	e00b      	b.n	80077f2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80077da:	78fb      	ldrb	r3, [r7, #3]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d106      	bne.n	80077ee <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	60da      	str	r2, [r3, #12]
 80077ec:	e001      	b.n	80077f2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e003      	b.n	80077fa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80077f2:	2032      	movs	r0, #50	; 0x32
 80077f4:	f7fa ff6e 	bl	80026d4 <HAL_Delay>

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	019b      	lsls	r3, r3, #6
 8007816:	f043 0220 	orr.w	r2, r3, #32
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3301      	adds	r3, #1
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4a09      	ldr	r2, [pc, #36]	; (800784c <USB_FlushTxFifo+0x48>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d901      	bls.n	8007830 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e006      	b.n	800783e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	f003 0320 	and.w	r3, r3, #32
 8007838:	2b20      	cmp	r3, #32
 800783a:	d0f0      	beq.n	800781e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	00030d40 	.word	0x00030d40

08007850 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2210      	movs	r2, #16
 8007860:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3301      	adds	r3, #1
 8007866:	60fb      	str	r3, [r7, #12]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4a09      	ldr	r2, [pc, #36]	; (8007890 <USB_FlushRxFifo+0x40>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d901      	bls.n	8007874 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e006      	b.n	8007882 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	f003 0310 	and.w	r3, r3, #16
 800787c:	2b10      	cmp	r3, #16
 800787e:	d0f0      	beq.n	8007862 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	00030d40 	.word	0x00030d40

08007894 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007894:	b480      	push	{r7}
 8007896:	b089      	sub	sp, #36	; 0x24
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	4611      	mov	r1, r2
 80078a0:	461a      	mov	r2, r3
 80078a2:	460b      	mov	r3, r1
 80078a4:	71fb      	strb	r3, [r7, #7]
 80078a6:	4613      	mov	r3, r2
 80078a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80078b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d11a      	bne.n	80078f0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80078ba:	88bb      	ldrh	r3, [r7, #4]
 80078bc:	3303      	adds	r3, #3
 80078be:	089b      	lsrs	r3, r3, #2
 80078c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80078c2:	2300      	movs	r3, #0
 80078c4:	61bb      	str	r3, [r7, #24]
 80078c6:	e00f      	b.n	80078e8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80078c8:	79fb      	ldrb	r3, [r7, #7]
 80078ca:	031a      	lsls	r2, r3, #12
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078d4:	461a      	mov	r2, r3
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	3304      	adds	r3, #4
 80078e0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	3301      	adds	r3, #1
 80078e6:	61bb      	str	r3, [r7, #24]
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d3eb      	bcc.n	80078c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3724      	adds	r7, #36	; 0x24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80078fe:	b480      	push	{r7}
 8007900:	b089      	sub	sp, #36	; 0x24
 8007902:	af00      	add	r7, sp, #0
 8007904:	60f8      	str	r0, [r7, #12]
 8007906:	60b9      	str	r1, [r7, #8]
 8007908:	4613      	mov	r3, r2
 800790a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007914:	88fb      	ldrh	r3, [r7, #6]
 8007916:	3303      	adds	r3, #3
 8007918:	089b      	lsrs	r3, r3, #2
 800791a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800791c:	2300      	movs	r3, #0
 800791e:	61bb      	str	r3, [r7, #24]
 8007920:	e00b      	b.n	800793a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	601a      	str	r2, [r3, #0]
    pDest++;
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	3304      	adds	r3, #4
 8007932:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	3301      	adds	r3, #1
 8007938:	61bb      	str	r3, [r7, #24]
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	429a      	cmp	r2, r3
 8007940:	d3ef      	bcc.n	8007922 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007942:	69fb      	ldr	r3, [r7, #28]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3724      	adds	r7, #36	; 0x24
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4013      	ands	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007968:	68fb      	ldr	r3, [r7, #12]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007976:	b480      	push	{r7}
 8007978:	b083      	sub	sp, #12
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	f003 0301 	and.w	r3, r3, #1
}
 8007986:	4618      	mov	r0, r3
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
	...

08007994 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3301      	adds	r3, #1
 80079a4:	60fb      	str	r3, [r7, #12]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4a13      	ldr	r2, [pc, #76]	; (80079f8 <USB_CoreReset+0x64>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d901      	bls.n	80079b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e01b      	b.n	80079ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	daf2      	bge.n	80079a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f043 0201 	orr.w	r2, r3, #1
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3301      	adds	r3, #1
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4a09      	ldr	r2, [pc, #36]	; (80079f8 <USB_CoreReset+0x64>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d901      	bls.n	80079dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e006      	b.n	80079ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d0f0      	beq.n	80079ca <USB_CoreReset+0x36>

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3714      	adds	r7, #20
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	00030d40 	.word	0x00030d40

080079fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079fc:	b084      	sub	sp, #16
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	f107 001c 	add.w	r0, r7, #28
 8007a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a18:	461a      	mov	r2, r3
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d018      	beq.n	8007a80 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d10a      	bne.n	8007a6a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a62:	f043 0304 	orr.w	r3, r3, #4
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	e014      	b.n	8007a94 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a78:	f023 0304 	bic.w	r3, r3, #4
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	e009      	b.n	8007a94 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a8e:	f023 0304 	bic.w	r3, r3, #4
 8007a92:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007a94:	2110      	movs	r1, #16
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff feb4 	bl	8007804 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff fed7 	bl	8007850 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]
 8007aa6:	e015      	b.n	8007ad4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007aba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac8:	461a      	mov	r2, r3
 8007aca:	2300      	movs	r3, #0
 8007acc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d3e5      	bcc.n	8007aa8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007adc:	2101      	movs	r1, #1
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f8ac 	bl	8007c3c <USB_DriveVbus>

  HAL_Delay(200U);
 8007ae4:	20c8      	movs	r0, #200	; 0xc8
 8007ae6:	f7fa fdf5 	bl	80026d4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007af6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00b      	beq.n	8007b1c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b0a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a14      	ldr	r2, [pc, #80]	; (8007b60 <USB_HostInit+0x164>)
 8007b10:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a13      	ldr	r2, [pc, #76]	; (8007b64 <USB_HostInit+0x168>)
 8007b16:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007b1a:	e009      	b.n	8007b30 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2280      	movs	r2, #128	; 0x80
 8007b20:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a10      	ldr	r2, [pc, #64]	; (8007b68 <USB_HostInit+0x16c>)
 8007b26:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a10      	ldr	r2, [pc, #64]	; (8007b6c <USB_HostInit+0x170>)
 8007b2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d105      	bne.n	8007b42 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	f043 0210 	orr.w	r2, r3, #16
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699a      	ldr	r2, [r3, #24]
 8007b46:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <USB_HostInit+0x174>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b5a:	b004      	add	sp, #16
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	01000200 	.word	0x01000200
 8007b64:	00e00300 	.word	0x00e00300
 8007b68:	00600080 	.word	0x00600080
 8007b6c:	004000e0 	.word	0x004000e0
 8007b70:	a3200008 	.word	0xa3200008

08007b74 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b92:	f023 0303 	bic.w	r3, r3, #3
 8007b96:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	68f9      	ldr	r1, [r7, #12]
 8007ba8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007bac:	4313      	orrs	r3, r2
 8007bae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d107      	bne.n	8007bc6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007bc2:	6053      	str	r3, [r2, #4]
 8007bc4:	e009      	b.n	8007bda <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007bc6:	78fb      	ldrb	r3, [r7, #3]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d106      	bne.n	8007bda <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	f241 7370 	movw	r3, #6000	; 0x1770
 8007bd8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007c08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c16:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007c18:	2064      	movs	r0, #100	; 0x64
 8007c1a:	f7fa fd5b 	bl	80026d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c2a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007c2c:	200a      	movs	r0, #10
 8007c2e:	f7fa fd51 	bl	80026d4 <HAL_Delay>

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007c60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d109      	bne.n	8007c80 <USB_DriveVbus+0x44>
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d106      	bne.n	8007c80 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c7e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c8a:	d109      	bne.n	8007ca0 <USB_DriveVbus+0x64>
 8007c8c:	78fb      	ldrb	r3, [r7, #3]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d106      	bne.n	8007ca0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c9e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b085      	sub	sp, #20
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	0c5b      	lsrs	r3, r3, #17
 8007ccc:	f003 0303 	and.w	r3, r3, #3
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	b29b      	uxth	r3, r3
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
	...

08007d00 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b088      	sub	sp, #32
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	4608      	mov	r0, r1
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	4603      	mov	r3, r0
 8007d10:	70fb      	strb	r3, [r7, #3]
 8007d12:	460b      	mov	r3, r1
 8007d14:	70bb      	strb	r3, [r7, #2]
 8007d16:	4613      	mov	r3, r2
 8007d18:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007d22:	78fb      	ldrb	r3, [r7, #3]
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d34:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007d36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d87e      	bhi.n	8007e3c <USB_HC_Init+0x13c>
 8007d3e:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <USB_HC_Init+0x44>)
 8007d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d44:	08007d55 	.word	0x08007d55
 8007d48:	08007dff 	.word	0x08007dff
 8007d4c:	08007d55 	.word	0x08007d55
 8007d50:	08007dc1 	.word	0x08007dc1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007d54:	78fb      	ldrb	r3, [r7, #3]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d60:	461a      	mov	r2, r3
 8007d62:	f240 439d 	movw	r3, #1181	; 0x49d
 8007d66:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007d68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	da10      	bge.n	8007d92 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007d70:	78fb      	ldrb	r3, [r7, #3]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	78fa      	ldrb	r2, [r7, #3]
 8007d80:	0151      	lsls	r1, r2, #5
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	440a      	add	r2, r1
 8007d86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d8e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007d90:	e057      	b.n	8007e42 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d051      	beq.n	8007e42 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007d9e:	78fb      	ldrb	r3, [r7, #3]
 8007da0:	015a      	lsls	r2, r3, #5
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	78fa      	ldrb	r2, [r7, #3]
 8007dae:	0151      	lsls	r1, r2, #5
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	440a      	add	r2, r1
 8007db4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007db8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007dbc:	60d3      	str	r3, [r2, #12]
      break;
 8007dbe:	e040      	b.n	8007e42 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007dc0:	78fb      	ldrb	r3, [r7, #3]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dcc:	461a      	mov	r2, r3
 8007dce:	f240 639d 	movw	r3, #1693	; 0x69d
 8007dd2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007dd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	da34      	bge.n	8007e46 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007ddc:	78fb      	ldrb	r3, [r7, #3]
 8007dde:	015a      	lsls	r2, r3, #5
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	4413      	add	r3, r2
 8007de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	78fa      	ldrb	r2, [r7, #3]
 8007dec:	0151      	lsls	r1, r2, #5
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	440a      	add	r2, r1
 8007df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dfa:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007dfc:	e023      	b.n	8007e46 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007dfe:	78fb      	ldrb	r3, [r7, #3]
 8007e00:	015a      	lsls	r2, r3, #5
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	f240 2325 	movw	r3, #549	; 0x225
 8007e10:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007e12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	da17      	bge.n	8007e4a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007e1a:	78fb      	ldrb	r3, [r7, #3]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	78fa      	ldrb	r2, [r7, #3]
 8007e2a:	0151      	lsls	r1, r2, #5
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	440a      	add	r2, r1
 8007e30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e34:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007e38:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007e3a:	e006      	b.n	8007e4a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	77fb      	strb	r3, [r7, #31]
      break;
 8007e40:	e004      	b.n	8007e4c <USB_HC_Init+0x14c>
      break;
 8007e42:	bf00      	nop
 8007e44:	e002      	b.n	8007e4c <USB_HC_Init+0x14c>
      break;
 8007e46:	bf00      	nop
 8007e48:	e000      	b.n	8007e4c <USB_HC_Init+0x14c>
      break;
 8007e4a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e52:	699a      	ldr	r2, [r3, #24]
 8007e54:	78fb      	ldrb	r3, [r7, #3]
 8007e56:	f003 030f 	and.w	r3, r3, #15
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e60:	6939      	ldr	r1, [r7, #16]
 8007e62:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007e66:	4313      	orrs	r3, r2
 8007e68:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007e76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	da03      	bge.n	8007e86 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e82:	61bb      	str	r3, [r7, #24]
 8007e84:	e001      	b.n	8007e8a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7ff ff0f 	bl	8007cae <USB_GetHostSpeed>
 8007e90:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007e92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d106      	bne.n	8007ea8 <USB_HC_Init+0x1a8>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d003      	beq.n	8007ea8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007ea0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ea4:	617b      	str	r3, [r7, #20]
 8007ea6:	e001      	b.n	8007eac <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007eac:	787b      	ldrb	r3, [r7, #1]
 8007eae:	059b      	lsls	r3, r3, #22
 8007eb0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007eb4:	78bb      	ldrb	r3, [r7, #2]
 8007eb6:	02db      	lsls	r3, r3, #11
 8007eb8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007ebc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007ebe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ec2:	049b      	lsls	r3, r3, #18
 8007ec4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007ec8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007eca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007ecc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007ed0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	0159      	lsls	r1, r3, #5
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	440b      	add	r3, r1
 8007ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ee2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007ee8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007eea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	d10f      	bne.n	8007f12 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007ef2:	78fb      	ldrb	r3, [r7, #3]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	78fa      	ldrb	r2, [r7, #3]
 8007f02:	0151      	lsls	r1, r2, #5
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	440a      	add	r2, r1
 8007f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f10:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007f12:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3720      	adds	r7, #32
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b08c      	sub	sp, #48	; 0x30
 8007f20:	af02      	add	r7, sp, #8
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	4613      	mov	r3, r2
 8007f28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	785b      	ldrb	r3, [r3, #1]
 8007f32:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f38:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d02d      	beq.n	8007fa2 <USB_HC_StartXfer+0x86>
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	791b      	ldrb	r3, [r3, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d129      	bne.n	8007fa2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d117      	bne.n	8007f84 <USB_HC_StartXfer+0x68>
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	79db      	ldrb	r3, [r3, #7]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <USB_HC_StartXfer+0x48>
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	79db      	ldrb	r3, [r3, #7]
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d10f      	bne.n	8007f84 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	69fa      	ldr	r2, [r7, #28]
 8007f74:	0151      	lsls	r1, r2, #5
 8007f76:	6a3a      	ldr	r2, [r7, #32]
 8007f78:	440a      	add	r2, r1
 8007f7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f82:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007f84:	79fb      	ldrb	r3, [r7, #7]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10b      	bne.n	8007fa2 <USB_HC_StartXfer+0x86>
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	795b      	ldrb	r3, [r3, #5]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d107      	bne.n	8007fa2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	785b      	ldrb	r3, [r3, #1]
 8007f96:	4619      	mov	r1, r3
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f000 fa2f 	bl	80083fc <USB_DoPing>
      return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	e0f8      	b.n	8008194 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d018      	beq.n	8007fdc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	8912      	ldrh	r2, [r2, #8]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	8912      	ldrh	r2, [r2, #8]
 8007fba:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fbe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007fc0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007fc2:	8b7b      	ldrh	r3, [r7, #26]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d90b      	bls.n	8007fe0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007fc8:	8b7b      	ldrh	r3, [r7, #26]
 8007fca:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007fcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	8912      	ldrh	r2, [r2, #8]
 8007fd2:	fb02 f203 	mul.w	r2, r2, r3
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	611a      	str	r2, [r3, #16]
 8007fda:	e001      	b.n	8007fe0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	78db      	ldrb	r3, [r3, #3]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d007      	beq.n	8007ff8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007fe8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	8912      	ldrh	r2, [r2, #8]
 8007fee:	fb02 f203 	mul.w	r2, r2, r3
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	611a      	str	r2, [r3, #16]
 8007ff6:	e003      	b.n	8008000 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	695a      	ldr	r2, [r3, #20]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008008:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800800a:	04d9      	lsls	r1, r3, #19
 800800c:	4b63      	ldr	r3, [pc, #396]	; (800819c <USB_HC_StartXfer+0x280>)
 800800e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008010:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	7a9b      	ldrb	r3, [r3, #10]
 8008016:	075b      	lsls	r3, r3, #29
 8008018:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800801c:	69f9      	ldr	r1, [r7, #28]
 800801e:	0148      	lsls	r0, r1, #5
 8008020:	6a39      	ldr	r1, [r7, #32]
 8008022:	4401      	add	r1, r0
 8008024:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008028:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800802a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	68d9      	ldr	r1, [r3, #12]
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	4413      	add	r3, r2
 800803e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008042:	460a      	mov	r2, r1
 8008044:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	2b00      	cmp	r3, #0
 8008054:	bf0c      	ite	eq
 8008056:	2301      	moveq	r3, #1
 8008058:	2300      	movne	r3, #0
 800805a:	b2db      	uxtb	r3, r3
 800805c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	6a3b      	ldr	r3, [r7, #32]
 8008064:	4413      	add	r3, r2
 8008066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	69fa      	ldr	r2, [r7, #28]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	6a3a      	ldr	r2, [r7, #32]
 8008072:	440a      	add	r2, r1
 8008074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008078:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800807c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	4413      	add	r3, r2
 8008086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	7e7b      	ldrb	r3, [r7, #25]
 800808e:	075b      	lsls	r3, r3, #29
 8008090:	69f9      	ldr	r1, [r7, #28]
 8008092:	0148      	lsls	r0, r1, #5
 8008094:	6a39      	ldr	r1, [r7, #32]
 8008096:	4401      	add	r1, r0
 8008098:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800809c:	4313      	orrs	r3, r2
 800809e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80080b6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	78db      	ldrb	r3, [r3, #3]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d004      	beq.n	80080ca <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080c6:	613b      	str	r3, [r7, #16]
 80080c8:	e003      	b.n	80080d2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080d0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080d8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	015a      	lsls	r2, r3, #5
 80080de:	6a3b      	ldr	r3, [r7, #32]
 80080e0:	4413      	add	r3, r2
 80080e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080e6:	461a      	mov	r2, r3
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80080ec:	79fb      	ldrb	r3, [r7, #7]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	e04e      	b.n	8008194 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	78db      	ldrb	r3, [r3, #3]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d149      	bne.n	8008192 <USB_HC_StartXfer+0x276>
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d045      	beq.n	8008192 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	79db      	ldrb	r3, [r3, #7]
 800810a:	2b03      	cmp	r3, #3
 800810c:	d830      	bhi.n	8008170 <USB_HC_StartXfer+0x254>
 800810e:	a201      	add	r2, pc, #4	; (adr r2, 8008114 <USB_HC_StartXfer+0x1f8>)
 8008110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008114:	08008125 	.word	0x08008125
 8008118:	08008149 	.word	0x08008149
 800811c:	08008125 	.word	0x08008125
 8008120:	08008149 	.word	0x08008149
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	3303      	adds	r3, #3
 800812a:	089b      	lsrs	r3, r3, #2
 800812c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800812e:	8afa      	ldrh	r2, [r7, #22]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008134:	b29b      	uxth	r3, r3
 8008136:	429a      	cmp	r2, r3
 8008138:	d91c      	bls.n	8008174 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	f043 0220 	orr.w	r2, r3, #32
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	619a      	str	r2, [r3, #24]
        }
        break;
 8008146:	e015      	b.n	8008174 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	3303      	adds	r3, #3
 800814e:	089b      	lsrs	r3, r3, #2
 8008150:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008152:	8afa      	ldrh	r2, [r7, #22]
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	b29b      	uxth	r3, r3
 800815e:	429a      	cmp	r2, r3
 8008160:	d90a      	bls.n	8008178 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	619a      	str	r2, [r3, #24]
        }
        break;
 800816e:	e003      	b.n	8008178 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008170:	bf00      	nop
 8008172:	e002      	b.n	800817a <USB_HC_StartXfer+0x25e>
        break;
 8008174:	bf00      	nop
 8008176:	e000      	b.n	800817a <USB_HC_StartXfer+0x25e>
        break;
 8008178:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	68d9      	ldr	r1, [r3, #12]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	785a      	ldrb	r2, [r3, #1]
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	b29b      	uxth	r3, r3
 8008188:	2000      	movs	r0, #0
 800818a:	9000      	str	r0, [sp, #0]
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f7ff fb81 	bl	8007894 <USB_WritePacket>
  }

  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3728      	adds	r7, #40	; 0x28
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	1ff80000 	.word	0x1ff80000

080081a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	b29b      	uxth	r3, r3
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b089      	sub	sp, #36	; 0x24
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	460b      	mov	r3, r1
 80081cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80081d2:	78fb      	ldrb	r3, [r7, #3]
 80081d4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	0c9b      	lsrs	r3, r3, #18
 80081ea:	f003 0303 	and.w	r3, r3, #3
 80081ee:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	0fdb      	lsrs	r3, r3, #31
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f003 0320 	and.w	r3, r3, #32
 800820e:	2b20      	cmp	r3, #32
 8008210:	d104      	bne.n	800821c <USB_HC_Halt+0x5a>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	e0e8      	b.n	80083ee <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <USB_HC_Halt+0x66>
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	2b02      	cmp	r3, #2
 8008226:	d173      	bne.n	8008310 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	4413      	add	r3, r2
 8008230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	0151      	lsls	r1, r2, #5
 800823a:	69ba      	ldr	r2, [r7, #24]
 800823c:	440a      	add	r2, r1
 800823e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008242:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008246:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f003 0320 	and.w	r3, r3, #32
 8008250:	2b00      	cmp	r3, #0
 8008252:	f040 80cb 	bne.w	80083ec <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d143      	bne.n	80082ea <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	015a      	lsls	r2, r3, #5
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	4413      	add	r3, r2
 800826a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	697a      	ldr	r2, [r7, #20]
 8008272:	0151      	lsls	r1, r2, #5
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	440a      	add	r2, r1
 8008278:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800827c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008280:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	4413      	add	r3, r2
 800828a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	0151      	lsls	r1, r2, #5
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	440a      	add	r2, r1
 8008298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800829c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	0151      	lsls	r1, r2, #5
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	440a      	add	r2, r1
 80082b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082c0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	3301      	adds	r3, #1
 80082c6:	61fb      	str	r3, [r7, #28]
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082ce:	d81d      	bhi.n	800830c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082e6:	d0ec      	beq.n	80082c2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082e8:	e080      	b.n	80083ec <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	015a      	lsls	r2, r3, #5
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	0151      	lsls	r1, r2, #5
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	440a      	add	r2, r1
 8008300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008304:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008308:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800830a:	e06f      	b.n	80083ec <USB_HC_Halt+0x22a>
            break;
 800830c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800830e:	e06d      	b.n	80083ec <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	4413      	add	r3, r2
 8008318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	0151      	lsls	r1, r2, #5
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	440a      	add	r2, r1
 8008326:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800832a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800832e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d143      	bne.n	80083c8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	4413      	add	r3, r2
 8008348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	0151      	lsls	r1, r2, #5
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	440a      	add	r2, r1
 8008356:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800835a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800835e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	4413      	add	r3, r2
 8008368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	0151      	lsls	r1, r2, #5
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	440a      	add	r2, r1
 8008376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800837a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800837e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	015a      	lsls	r2, r3, #5
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	4413      	add	r3, r2
 8008388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	0151      	lsls	r1, r2, #5
 8008392:	69ba      	ldr	r2, [r7, #24]
 8008394:	440a      	add	r2, r1
 8008396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800839a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800839e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	3301      	adds	r3, #1
 80083a4:	61fb      	str	r3, [r7, #28]
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083ac:	d81d      	bhi.n	80083ea <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083c4:	d0ec      	beq.n	80083a0 <USB_HC_Halt+0x1de>
 80083c6:	e011      	b.n	80083ec <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	0151      	lsls	r1, r2, #5
 80083da:	69ba      	ldr	r2, [r7, #24]
 80083dc:	440a      	add	r2, r1
 80083de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	e000      	b.n	80083ec <USB_HC_Halt+0x22a>
          break;
 80083ea:	bf00      	nop
    }
  }

  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3724      	adds	r7, #36	; 0x24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
	...

080083fc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b087      	sub	sp, #28
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800840c:	78fb      	ldrb	r3, [r7, #3]
 800840e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008410:	2301      	movs	r3, #1
 8008412:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	04da      	lsls	r2, r3, #19
 8008418:	4b15      	ldr	r3, [pc, #84]	; (8008470 <USB_DoPing+0x74>)
 800841a:	4013      	ands	r3, r2
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	0151      	lsls	r1, r2, #5
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	440a      	add	r2, r1
 8008424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800842c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	4413      	add	r3, r2
 8008436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008444:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800844c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	015a      	lsls	r2, r3, #5
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	4413      	add	r3, r2
 8008456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800845a:	461a      	mov	r2, r3
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	371c      	adds	r7, #28
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	1ff80000 	.word	0x1ff80000

08008474 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7ff f981 	bl	800778c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800848a:	2110      	movs	r1, #16
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f7ff f9b9 	bl	8007804 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff f9dc 	bl	8007850 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008498:	2300      	movs	r3, #0
 800849a:	613b      	str	r3, [r7, #16]
 800849c:	e01f      	b.n	80084de <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	015a      	lsls	r2, r3, #5
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084c4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d2:	461a      	mov	r2, r3
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	3301      	adds	r3, #1
 80084dc:	613b      	str	r3, [r7, #16]
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	2b0f      	cmp	r3, #15
 80084e2:	d9dc      	bls.n	800849e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80084e4:	2300      	movs	r3, #0
 80084e6:	613b      	str	r3, [r7, #16]
 80084e8:	e034      	b.n	8008554 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008500:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008508:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008510:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4413      	add	r3, r2
 800851a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800851e:	461a      	mov	r2, r3
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	3301      	adds	r3, #1
 8008528:	617b      	str	r3, [r7, #20]
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008530:	d80c      	bhi.n	800854c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4413      	add	r3, r2
 800853a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008544:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008548:	d0ec      	beq.n	8008524 <USB_StopHost+0xb0>
 800854a:	e000      	b.n	800854e <USB_StopHost+0xda>
        break;
 800854c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	3301      	adds	r3, #1
 8008552:	613b      	str	r3, [r7, #16]
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	2b0f      	cmp	r3, #15
 8008558:	d9c7      	bls.n	80084ea <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008560:	461a      	mov	r2, r3
 8008562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008566:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800856e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff f8fa 	bl	800776a <USB_EnableGlobalInt>

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008580:	b590      	push	{r4, r7, lr}
 8008582:	b089      	sub	sp, #36	; 0x24
 8008584:	af04      	add	r7, sp, #16
 8008586:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008588:	2301      	movs	r3, #1
 800858a:	2202      	movs	r2, #2
 800858c:	2102      	movs	r1, #2
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fc66 	bl	8008e60 <USBH_FindInterface>
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	2bff      	cmp	r3, #255	; 0xff
 800859c:	d002      	beq.n	80085a4 <USBH_CDC_InterfaceInit+0x24>
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d901      	bls.n	80085a8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80085a4:	2302      	movs	r3, #2
 80085a6:	e13d      	b.n	8008824 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fc3b 	bl	8008e28 <USBH_SelectInterface>
 80085b2:	4603      	mov	r3, r0
 80085b4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80085bc:	2302      	movs	r3, #2
 80085be:	e131      	b.n	8008824 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80085c6:	2050      	movs	r0, #80	; 0x50
 80085c8:	f002 fa00 	bl	800a9cc <malloc>
 80085cc:	4603      	mov	r3, r0
 80085ce:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085d6:	69db      	ldr	r3, [r3, #28]
 80085d8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80085e0:	2302      	movs	r3, #2
 80085e2:	e11f      	b.n	8008824 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80085e4:	2250      	movs	r2, #80	; 0x50
 80085e6:	2100      	movs	r1, #0
 80085e8:	68b8      	ldr	r0, [r7, #8]
 80085ea:	f002 f9ff 	bl	800a9ec <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	211a      	movs	r1, #26
 80085f4:	fb01 f303 	mul.w	r3, r1, r3
 80085f8:	4413      	add	r3, r2
 80085fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	b25b      	sxtb	r3, r3
 8008602:	2b00      	cmp	r3, #0
 8008604:	da15      	bge.n	8008632 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	211a      	movs	r1, #26
 800860c:	fb01 f303 	mul.w	r3, r1, r3
 8008610:	4413      	add	r3, r2
 8008612:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008616:	781a      	ldrb	r2, [r3, #0]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	211a      	movs	r1, #26
 8008622:	fb01 f303 	mul.w	r3, r1, r3
 8008626:	4413      	add	r3, r2
 8008628:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800862c:	881a      	ldrh	r2, [r3, #0]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	785b      	ldrb	r3, [r3, #1]
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 fe32 	bl	800a2a2 <USBH_AllocPipe>
 800863e:	4603      	mov	r3, r0
 8008640:	461a      	mov	r2, r3
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	7819      	ldrb	r1, [r3, #0]
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	7858      	ldrb	r0, [r3, #1]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	8952      	ldrh	r2, [r2, #10]
 800865e:	9202      	str	r2, [sp, #8]
 8008660:	2203      	movs	r2, #3
 8008662:	9201      	str	r2, [sp, #4]
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	4623      	mov	r3, r4
 8008668:	4602      	mov	r2, r0
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f001 fdea 	bl	800a244 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2200      	movs	r2, #0
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f002 f8f9 	bl	800a870 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800867e:	2300      	movs	r3, #0
 8008680:	2200      	movs	r2, #0
 8008682:	210a      	movs	r1, #10
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fbeb 	bl	8008e60 <USBH_FindInterface>
 800868a:	4603      	mov	r3, r0
 800868c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800868e:	7bfb      	ldrb	r3, [r7, #15]
 8008690:	2bff      	cmp	r3, #255	; 0xff
 8008692:	d002      	beq.n	800869a <USBH_CDC_InterfaceInit+0x11a>
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d901      	bls.n	800869e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800869a:	2302      	movs	r3, #2
 800869c:	e0c2      	b.n	8008824 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800869e:	7bfb      	ldrb	r3, [r7, #15]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	211a      	movs	r1, #26
 80086a4:	fb01 f303 	mul.w	r3, r1, r3
 80086a8:	4413      	add	r3, r2
 80086aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	b25b      	sxtb	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	da16      	bge.n	80086e4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	211a      	movs	r1, #26
 80086bc:	fb01 f303 	mul.w	r3, r1, r3
 80086c0:	4413      	add	r3, r2
 80086c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80086c6:	781a      	ldrb	r2, [r3, #0]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	211a      	movs	r1, #26
 80086d2:	fb01 f303 	mul.w	r3, r1, r3
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80086dc:	881a      	ldrh	r2, [r3, #0]
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	835a      	strh	r2, [r3, #26]
 80086e2:	e015      	b.n	8008710 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	211a      	movs	r1, #26
 80086ea:	fb01 f303 	mul.w	r3, r1, r3
 80086ee:	4413      	add	r3, r2
 80086f0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80086f4:	781a      	ldrb	r2, [r3, #0]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	211a      	movs	r1, #26
 8008700:	fb01 f303 	mul.w	r3, r1, r3
 8008704:	4413      	add	r3, r2
 8008706:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800870a:	881a      	ldrh	r2, [r3, #0]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008710:	7bfb      	ldrb	r3, [r7, #15]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	211a      	movs	r1, #26
 8008716:	fb01 f303 	mul.w	r3, r1, r3
 800871a:	4413      	add	r3, r2
 800871c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	b25b      	sxtb	r3, r3
 8008724:	2b00      	cmp	r3, #0
 8008726:	da16      	bge.n	8008756 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	211a      	movs	r1, #26
 800872e:	fb01 f303 	mul.w	r3, r1, r3
 8008732:	4413      	add	r3, r2
 8008734:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008738:	781a      	ldrb	r2, [r3, #0]
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	211a      	movs	r1, #26
 8008744:	fb01 f303 	mul.w	r3, r1, r3
 8008748:	4413      	add	r3, r2
 800874a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800874e:	881a      	ldrh	r2, [r3, #0]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	835a      	strh	r2, [r3, #26]
 8008754:	e015      	b.n	8008782 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	211a      	movs	r1, #26
 800875c:	fb01 f303 	mul.w	r3, r1, r3
 8008760:	4413      	add	r3, r2
 8008762:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008766:	781a      	ldrb	r2, [r3, #0]
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	211a      	movs	r1, #26
 8008772:	fb01 f303 	mul.w	r3, r1, r3
 8008776:	4413      	add	r3, r2
 8008778:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800877c:	881a      	ldrh	r2, [r3, #0]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	7b9b      	ldrb	r3, [r3, #14]
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f001 fd8a 	bl	800a2a2 <USBH_AllocPipe>
 800878e:	4603      	mov	r3, r0
 8008790:	461a      	mov	r2, r3
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	7bdb      	ldrb	r3, [r3, #15]
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f001 fd80 	bl	800a2a2 <USBH_AllocPipe>
 80087a2:	4603      	mov	r3, r0
 80087a4:	461a      	mov	r2, r3
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	7b59      	ldrb	r1, [r3, #13]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	7b98      	ldrb	r0, [r3, #14]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	8b12      	ldrh	r2, [r2, #24]
 80087c2:	9202      	str	r2, [sp, #8]
 80087c4:	2202      	movs	r2, #2
 80087c6:	9201      	str	r2, [sp, #4]
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	4623      	mov	r3, r4
 80087cc:	4602      	mov	r2, r0
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f001 fd38 	bl	800a244 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	7b19      	ldrb	r1, [r3, #12]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	7bd8      	ldrb	r0, [r3, #15]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	8b52      	ldrh	r2, [r2, #26]
 80087ec:	9202      	str	r2, [sp, #8]
 80087ee:	2202      	movs	r2, #2
 80087f0:	9201      	str	r2, [sp, #4]
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	4623      	mov	r3, r4
 80087f6:	4602      	mov	r2, r0
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f001 fd23 	bl	800a244 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	7b5b      	ldrb	r3, [r3, #13]
 800880a:	2200      	movs	r2, #0
 800880c:	4619      	mov	r1, r3
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f002 f82e 	bl	800a870 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	7b1b      	ldrb	r3, [r3, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f002 f827 	bl	800a870 <USBH_LL_SetToggle>

  return USBH_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3714      	adds	r7, #20
 8008828:	46bd      	mov	sp, r7
 800882a:	bd90      	pop	{r4, r7, pc}

0800882c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00e      	beq.n	8008864 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f001 fd18 	bl	800a282 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f001 fd43 	bl	800a2e4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	7b1b      	ldrb	r3, [r3, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00e      	beq.n	800888a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	7b1b      	ldrb	r3, [r3, #12]
 8008870:	4619      	mov	r1, r3
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f001 fd05 	bl	800a282 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	7b1b      	ldrb	r3, [r3, #12]
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 fd30 	bl	800a2e4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	7b5b      	ldrb	r3, [r3, #13]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00e      	beq.n	80088b0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	7b5b      	ldrb	r3, [r3, #13]
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f001 fcf2 	bl	800a282 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	7b5b      	ldrb	r3, [r3, #13]
 80088a2:	4619      	mov	r1, r3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f001 fd1d 	bl	800a2e4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00b      	beq.n	80088d4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f002 f889 	bl	800a9dc <free>
    phost->pActiveClass->pData = 0U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088d0:	2200      	movs	r2, #0
 80088d2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b084      	sub	sp, #16
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	3340      	adds	r3, #64	; 0x40
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f8b1 	bl	8008a5e <GetLineCoding>
 80088fc:	4603      	mov	r3, r0
 80088fe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008900:	7afb      	ldrb	r3, [r7, #11]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d105      	bne.n	8008912 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800890c:	2102      	movs	r1, #2
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008912:	7afb      	ldrb	r3, [r7, #11]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008924:	2301      	movs	r3, #1
 8008926:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800893c:	2b04      	cmp	r3, #4
 800893e:	d877      	bhi.n	8008a30 <USBH_CDC_Process+0x114>
 8008940:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <USBH_CDC_Process+0x2c>)
 8008942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008946:	bf00      	nop
 8008948:	0800895d 	.word	0x0800895d
 800894c:	08008963 	.word	0x08008963
 8008950:	08008993 	.word	0x08008993
 8008954:	08008a07 	.word	0x08008a07
 8008958:	08008a15 	.word	0x08008a15
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	73fb      	strb	r3, [r7, #15]
      break;
 8008960:	e06d      	b.n	8008a3e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f897 	bl	8008a9c <SetLineCoding>
 800896e:	4603      	mov	r3, r0
 8008970:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d104      	bne.n	8008982 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	2202      	movs	r2, #2
 800897c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008980:	e058      	b.n	8008a34 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d055      	beq.n	8008a34 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2204      	movs	r2, #4
 800898c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008990:	e050      	b.n	8008a34 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	3340      	adds	r3, #64	; 0x40
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f860 	bl	8008a5e <GetLineCoding>
 800899e:	4603      	mov	r3, r0
 80089a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d126      	bne.n	80089f6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ba:	791b      	ldrb	r3, [r3, #4]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d13b      	bne.n	8008a38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d133      	bne.n	8008a38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089da:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80089dc:	429a      	cmp	r2, r3
 80089de:	d12b      	bne.n	8008a38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089e8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d124      	bne.n	8008a38 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f958 	bl	8008ca4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80089f4:	e020      	b.n	8008a38 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d01d      	beq.n	8008a38 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2204      	movs	r2, #4
 8008a00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008a04:	e018      	b.n	8008a38 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f867 	bl	8008ada <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f8da 	bl	8008bc6 <CDC_ProcessReception>
      break;
 8008a12:	e014      	b.n	8008a3e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008a14:	2100      	movs	r1, #0
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 ffe3 	bl	80099e2 <USBH_ClrFeature>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10a      	bne.n	8008a3c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008a2e:	e005      	b.n	8008a3c <USBH_CDC_Process+0x120>

    default:
      break;
 8008a30:	bf00      	nop
 8008a32:	e004      	b.n	8008a3e <USBH_CDC_Process+0x122>
      break;
 8008a34:	bf00      	nop
 8008a36:	e002      	b.n	8008a3e <USBH_CDC_Process+0x122>
      break;
 8008a38:	bf00      	nop
 8008a3a:	e000      	b.n	8008a3e <USBH_CDC_Process+0x122>
      break;
 8008a3c:	bf00      	nop

  }

  return status;
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b082      	sub	sp, #8
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	22a1      	movs	r2, #161	; 0xa1
 8008a6c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2221      	movs	r2, #33	; 0x21
 8008a72:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2207      	movs	r2, #7
 8008a84:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2207      	movs	r2, #7
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f001 f988 	bl	8009da2 <USBH_CtlReq>
 8008a92:	4603      	mov	r3, r0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2221      	movs	r2, #33	; 0x21
 8008aaa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2220      	movs	r2, #32
 8008ab0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2207      	movs	r2, #7
 8008ac2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	2207      	movs	r2, #7
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f001 f969 	bl	8009da2 <USBH_CtlReq>
 8008ad0:	4603      	mov	r3, r0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b086      	sub	sp, #24
 8008ade:	af02      	add	r7, sp, #8
 8008ae0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008aec:	2300      	movs	r3, #0
 8008aee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d002      	beq.n	8008b00 <CDC_ProcessTransmission+0x26>
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d023      	beq.n	8008b46 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008afe:	e05e      	b.n	8008bbe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	8b12      	ldrh	r2, [r2, #24]
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d90b      	bls.n	8008b24 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	69d9      	ldr	r1, [r3, #28]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8b1a      	ldrh	r2, [r3, #24]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	7b5b      	ldrb	r3, [r3, #13]
 8008b18:	2001      	movs	r0, #1
 8008b1a:	9000      	str	r0, [sp, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f001 fb4e 	bl	800a1be <USBH_BulkSendData>
 8008b22:	e00b      	b.n	8008b3c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008b2c:	b29a      	uxth	r2, r3
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	7b5b      	ldrb	r3, [r3, #13]
 8008b32:	2001      	movs	r0, #1
 8008b34:	9000      	str	r0, [sp, #0]
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f001 fb41 	bl	800a1be <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2202      	movs	r2, #2
 8008b40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008b44:	e03b      	b.n	8008bbe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	7b5b      	ldrb	r3, [r3, #13]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f001 fe65 	bl	800a81c <USBH_LL_GetURBState>
 8008b52:	4603      	mov	r3, r0
 8008b54:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008b56:	7afb      	ldrb	r3, [r7, #11]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d128      	bne.n	8008bae <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	8b12      	ldrh	r2, [r2, #24]
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d90e      	bls.n	8008b86 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	8b12      	ldrh	r2, [r2, #24]
 8008b70:	1a9a      	subs	r2, r3, r2
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	8b12      	ldrh	r2, [r2, #24]
 8008b7e:	441a      	add	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	61da      	str	r2, [r3, #28]
 8008b84:	e002      	b.n	8008b8c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d004      	beq.n	8008b9e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008b9c:	e00e      	b.n	8008bbc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f868 	bl	8008c7c <USBH_CDC_TransmitCallback>
      break;
 8008bac:	e006      	b.n	8008bbc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008bae:	7afb      	ldrb	r3, [r7, #11]
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d103      	bne.n	8008bbc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008bbc:	bf00      	nop
  }
}
 8008bbe:	bf00      	nop
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b086      	sub	sp, #24
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bd4:	69db      	ldr	r3, [r3, #28]
 8008bd6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d002      	beq.n	8008bec <CDC_ProcessReception+0x26>
 8008be6:	2b04      	cmp	r3, #4
 8008be8:	d00e      	beq.n	8008c08 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008bea:	e043      	b.n	8008c74 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	6a19      	ldr	r1, [r3, #32]
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	8b5a      	ldrh	r2, [r3, #26]
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	7b1b      	ldrb	r3, [r3, #12]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f001 fb05 	bl	800a208 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	2204      	movs	r2, #4
 8008c02:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008c06:	e035      	b.n	8008c74 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	7b1b      	ldrb	r3, [r3, #12]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f001 fe04 	bl	800a81c <USBH_LL_GetURBState>
 8008c14:	4603      	mov	r3, r0
 8008c16:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008c18:	7cfb      	ldrb	r3, [r7, #19]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d129      	bne.n	8008c72 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	7b1b      	ldrb	r3, [r3, #12]
 8008c22:	4619      	mov	r1, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f001 fd67 	bl	800a6f8 <USBH_LL_GetLastXferSize>
 8008c2a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d016      	beq.n	8008c64 <CDC_ProcessReception+0x9e>
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	8b5b      	ldrh	r3, [r3, #26]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d910      	bls.n	8008c64 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	1ad2      	subs	r2, r2, r3
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	6a1a      	ldr	r2, [r3, #32]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	441a      	add	r2, r3
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	2203      	movs	r2, #3
 8008c5e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008c62:	e006      	b.n	8008c72 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f80f 	bl	8008c90 <USBH_CDC_ReceiveCallback>
      break;
 8008c72:	bf00      	nop
  }
}
 8008c74:	bf00      	nop
 8008c76:	3718      	adds	r7, #24
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d101      	bne.n	8008cd0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e029      	b.n	8008d24 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	79fa      	ldrb	r2, [r7, #7]
 8008cd4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 f81f 	bl	8008d2c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d003      	beq.n	8008d1c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f001 fc37 	bl	800a590 <USBH_LL_Init>

  return USBH_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008d38:	2300      	movs	r3, #0
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	e009      	b.n	8008d52 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	33e0      	adds	r3, #224	; 0xe0
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	2200      	movs	r2, #0
 8008d4a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2b0e      	cmp	r3, #14
 8008d56:	d9f2      	bls.n	8008d3e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008d58:	2300      	movs	r3, #0
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	e009      	b.n	8008d72 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008d68:	2200      	movs	r2, #0
 8008d6a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	60fb      	str	r3, [r7, #12]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d78:	d3f1      	bcc.n	8008d5e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2240      	movs	r2, #64	; 0x40
 8008d9e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d016      	beq.n	8008e16 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10e      	bne.n	8008e10 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008df8:	1c59      	adds	r1, r3, #1
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	33de      	adds	r3, #222	; 0xde
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	73fb      	strb	r3, [r7, #15]
 8008e0e:	e004      	b.n	8008e1a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008e10:	2302      	movs	r3, #2
 8008e12:	73fb      	strb	r3, [r7, #15]
 8008e14:	e001      	b.n	8008e1a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008e16:	2302      	movs	r3, #2
 8008e18:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008e3e:	78fa      	ldrb	r2, [r7, #3]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d204      	bcs.n	8008e4e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	78fa      	ldrb	r2, [r7, #3]
 8008e48:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008e4c:	e001      	b.n	8008e52 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008e4e:	2302      	movs	r3, #2
 8008e50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b087      	sub	sp, #28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	4608      	mov	r0, r1
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	4603      	mov	r3, r0
 8008e70:	70fb      	strb	r3, [r7, #3]
 8008e72:	460b      	mov	r3, r1
 8008e74:	70bb      	strb	r3, [r7, #2]
 8008e76:	4613      	mov	r3, r2
 8008e78:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008e88:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008e8a:	e025      	b.n	8008ed8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008e8c:	7dfb      	ldrb	r3, [r7, #23]
 8008e8e:	221a      	movs	r2, #26
 8008e90:	fb02 f303 	mul.w	r3, r2, r3
 8008e94:	3308      	adds	r3, #8
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	4413      	add	r3, r2
 8008e9a:	3302      	adds	r3, #2
 8008e9c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	795b      	ldrb	r3, [r3, #5]
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d002      	beq.n	8008eae <USBH_FindInterface+0x4e>
 8008ea8:	78fb      	ldrb	r3, [r7, #3]
 8008eaa:	2bff      	cmp	r3, #255	; 0xff
 8008eac:	d111      	bne.n	8008ed2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008eb2:	78ba      	ldrb	r2, [r7, #2]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d002      	beq.n	8008ebe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008eb8:	78bb      	ldrb	r3, [r7, #2]
 8008eba:	2bff      	cmp	r3, #255	; 0xff
 8008ebc:	d109      	bne.n	8008ed2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ec2:	787a      	ldrb	r2, [r7, #1]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d002      	beq.n	8008ece <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008ec8:	787b      	ldrb	r3, [r7, #1]
 8008eca:	2bff      	cmp	r3, #255	; 0xff
 8008ecc:	d101      	bne.n	8008ed2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008ece:	7dfb      	ldrb	r3, [r7, #23]
 8008ed0:	e006      	b.n	8008ee0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008ed2:	7dfb      	ldrb	r3, [r7, #23]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d9d6      	bls.n	8008e8c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008ede:	23ff      	movs	r3, #255	; 0xff
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	371c      	adds	r7, #28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f001 fb87 	bl	800a608 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008efa:	2101      	movs	r1, #1
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f001 fca0 	bl	800a842 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b088      	sub	sp, #32
 8008f10:	af04      	add	r7, sp, #16
 8008f12:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008f14:	2302      	movs	r3, #2
 8008f16:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d102      	bne.n	8008f2e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2203      	movs	r2, #3
 8008f2c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b0b      	cmp	r3, #11
 8008f36:	f200 81b3 	bhi.w	80092a0 <USBH_Process+0x394>
 8008f3a:	a201      	add	r2, pc, #4	; (adr r2, 8008f40 <USBH_Process+0x34>)
 8008f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f40:	08008f71 	.word	0x08008f71
 8008f44:	08008fa3 	.word	0x08008fa3
 8008f48:	0800900b 	.word	0x0800900b
 8008f4c:	0800923b 	.word	0x0800923b
 8008f50:	080092a1 	.word	0x080092a1
 8008f54:	080090af 	.word	0x080090af
 8008f58:	080091e1 	.word	0x080091e1
 8008f5c:	080090e5 	.word	0x080090e5
 8008f60:	08009105 	.word	0x08009105
 8008f64:	08009125 	.word	0x08009125
 8008f68:	08009153 	.word	0x08009153
 8008f6c:	08009223 	.word	0x08009223
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 8193 	beq.w	80092a4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008f84:	20c8      	movs	r0, #200	; 0xc8
 8008f86:	f001 fca3 	bl	800a8d0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f001 fb99 	bl	800a6c2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008fa0:	e180      	b.n	80092a4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d107      	bne.n	8008fbc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008fba:	e182      	b.n	80092c2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008fc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fc6:	d914      	bls.n	8008ff2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008fce:	3301      	adds	r3, #1
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d903      	bls.n	8008fea <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	220d      	movs	r2, #13
 8008fe6:	701a      	strb	r2, [r3, #0]
      break;
 8008fe8:	e16b      	b.n	80092c2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	701a      	strb	r2, [r3, #0]
      break;
 8008ff0:	e167      	b.n	80092c2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008ff8:	f103 020a 	add.w	r2, r3, #10
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009002:	200a      	movs	r0, #10
 8009004:	f001 fc64 	bl	800a8d0 <USBH_Delay>
      break;
 8009008:	e15b      	b.n	80092c2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009010:	2b00      	cmp	r3, #0
 8009012:	d005      	beq.n	8009020 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800901a:	2104      	movs	r1, #4
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009020:	2064      	movs	r0, #100	; 0x64
 8009022:	f001 fc55 	bl	800a8d0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f001 fb24 	bl	800a674 <USBH_LL_GetSpeed>
 800902c:	4603      	mov	r3, r0
 800902e:	461a      	mov	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2205      	movs	r2, #5
 800903a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800903c:	2100      	movs	r1, #0
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f001 f92f 	bl	800a2a2 <USBH_AllocPipe>
 8009044:	4603      	mov	r3, r0
 8009046:	461a      	mov	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800904c:	2180      	movs	r1, #128	; 0x80
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f001 f927 	bl	800a2a2 <USBH_AllocPipe>
 8009054:	4603      	mov	r3, r0
 8009056:	461a      	mov	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	7919      	ldrb	r1, [r3, #4]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009070:	b292      	uxth	r2, r2
 8009072:	9202      	str	r2, [sp, #8]
 8009074:	2200      	movs	r2, #0
 8009076:	9201      	str	r2, [sp, #4]
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	4603      	mov	r3, r0
 800907c:	2280      	movs	r2, #128	; 0x80
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f001 f8e0 	bl	800a244 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	7959      	ldrb	r1, [r3, #5]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009098:	b292      	uxth	r2, r2
 800909a:	9202      	str	r2, [sp, #8]
 800909c:	2200      	movs	r2, #0
 800909e:	9201      	str	r2, [sp, #4]
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	4603      	mov	r3, r0
 80090a4:	2200      	movs	r2, #0
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f001 f8cc 	bl	800a244 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80090ac:	e109      	b.n	80092c2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f90c 	bl	80092cc <USBH_HandleEnum>
 80090b4:	4603      	mov	r3, r0
 80090b6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80090b8:	7bbb      	ldrb	r3, [r7, #14]
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f040 80f3 	bne.w	80092a8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d103      	bne.n	80090dc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2208      	movs	r2, #8
 80090d8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80090da:	e0e5      	b.n	80092a8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2207      	movs	r2, #7
 80090e0:	701a      	strb	r2, [r3, #0]
      break;
 80090e2:	e0e1      	b.n	80092a8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 80de 	beq.w	80092ac <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090f6:	2101      	movs	r1, #1
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2208      	movs	r2, #8
 8009100:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009102:	e0d3      	b.n	80092ac <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800910a:	b29b      	uxth	r3, r3
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fc20 	bl	8009954 <USBH_SetCfg>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	f040 80ca 	bne.w	80092b0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2209      	movs	r2, #9
 8009120:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009122:	e0c5      	b.n	80092b0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800912a:	f003 0320 	and.w	r3, r3, #32
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00b      	beq.n	800914a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009132:	2101      	movs	r1, #1
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fc30 	bl	800999a <USBH_SetFeature>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	f040 80b9 	bne.w	80092b4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	220a      	movs	r2, #10
 8009146:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009148:	e0b4      	b.n	80092b4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	220a      	movs	r2, #10
 800914e:	701a      	strb	r2, [r3, #0]
      break;
 8009150:	e0b0      	b.n	80092b4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 80ad 	beq.w	80092b8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009166:	2300      	movs	r3, #0
 8009168:	73fb      	strb	r3, [r7, #15]
 800916a:	e016      	b.n	800919a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800916c:	7bfa      	ldrb	r2, [r7, #15]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	32de      	adds	r2, #222	; 0xde
 8009172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009176:	791a      	ldrb	r2, [r3, #4]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800917e:	429a      	cmp	r2, r3
 8009180:	d108      	bne.n	8009194 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009182:	7bfa      	ldrb	r2, [r7, #15]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	32de      	adds	r2, #222	; 0xde
 8009188:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009192:	e005      	b.n	80091a0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009194:	7bfb      	ldrb	r3, [r7, #15]
 8009196:	3301      	adds	r3, #1
 8009198:	73fb      	strb	r3, [r7, #15]
 800919a:	7bfb      	ldrb	r3, [r7, #15]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d0e5      	beq.n	800916c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d016      	beq.n	80091d8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	4798      	blx	r3
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d109      	bne.n	80091d0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2206      	movs	r2, #6
 80091c0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80091c8:	2103      	movs	r1, #3
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80091ce:	e073      	b.n	80092b8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	220d      	movs	r2, #13
 80091d4:	701a      	strb	r2, [r3, #0]
      break;
 80091d6:	e06f      	b.n	80092b8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	220d      	movs	r2, #13
 80091dc:	701a      	strb	r2, [r3, #0]
      break;
 80091de:	e06b      	b.n	80092b8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d017      	beq.n	800921a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	4798      	blx	r3
 80091f6:	4603      	mov	r3, r0
 80091f8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80091fa:	7bbb      	ldrb	r3, [r7, #14]
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d103      	bne.n	800920a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	220b      	movs	r2, #11
 8009206:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009208:	e058      	b.n	80092bc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800920a:	7bbb      	ldrb	r3, [r7, #14]
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b02      	cmp	r3, #2
 8009210:	d154      	bne.n	80092bc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	220d      	movs	r2, #13
 8009216:	701a      	strb	r2, [r3, #0]
      break;
 8009218:	e050      	b.n	80092bc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	220d      	movs	r2, #13
 800921e:	701a      	strb	r2, [r3, #0]
      break;
 8009220:	e04c      	b.n	80092bc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009228:	2b00      	cmp	r3, #0
 800922a:	d049      	beq.n	80092c0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	4798      	blx	r3
      }
      break;
 8009238:	e042      	b.n	80092c0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff fd72 	bl	8008d2c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800924e:	2b00      	cmp	r3, #0
 8009250:	d009      	beq.n	8009266 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800926c:	2b00      	cmp	r3, #0
 800926e:	d005      	beq.n	800927c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009276:	2105      	movs	r1, #5
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009282:	b2db      	uxtb	r3, r3
 8009284:	2b01      	cmp	r3, #1
 8009286:	d107      	bne.n	8009298 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7ff fe2b 	bl	8008eec <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009296:	e014      	b.n	80092c2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f001 f9b5 	bl	800a608 <USBH_LL_Start>
      break;
 800929e:	e010      	b.n	80092c2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80092a0:	bf00      	nop
 80092a2:	e00e      	b.n	80092c2 <USBH_Process+0x3b6>
      break;
 80092a4:	bf00      	nop
 80092a6:	e00c      	b.n	80092c2 <USBH_Process+0x3b6>
      break;
 80092a8:	bf00      	nop
 80092aa:	e00a      	b.n	80092c2 <USBH_Process+0x3b6>
    break;
 80092ac:	bf00      	nop
 80092ae:	e008      	b.n	80092c2 <USBH_Process+0x3b6>
      break;
 80092b0:	bf00      	nop
 80092b2:	e006      	b.n	80092c2 <USBH_Process+0x3b6>
      break;
 80092b4:	bf00      	nop
 80092b6:	e004      	b.n	80092c2 <USBH_Process+0x3b6>
      break;
 80092b8:	bf00      	nop
 80092ba:	e002      	b.n	80092c2 <USBH_Process+0x3b6>
      break;
 80092bc:	bf00      	nop
 80092be:	e000      	b.n	80092c2 <USBH_Process+0x3b6>
      break;
 80092c0:	bf00      	nop
  }
  return USBH_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b088      	sub	sp, #32
 80092d0:	af04      	add	r7, sp, #16
 80092d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80092d4:	2301      	movs	r3, #1
 80092d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80092d8:	2301      	movs	r3, #1
 80092da:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	785b      	ldrb	r3, [r3, #1]
 80092e0:	2b07      	cmp	r3, #7
 80092e2:	f200 81c1 	bhi.w	8009668 <USBH_HandleEnum+0x39c>
 80092e6:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <USBH_HandleEnum+0x20>)
 80092e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ec:	0800930d 	.word	0x0800930d
 80092f0:	080093cb 	.word	0x080093cb
 80092f4:	08009435 	.word	0x08009435
 80092f8:	080094c3 	.word	0x080094c3
 80092fc:	0800952d 	.word	0x0800952d
 8009300:	0800959d 	.word	0x0800959d
 8009304:	080095e3 	.word	0x080095e3
 8009308:	08009629 	.word	0x08009629
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800930c:	2108      	movs	r1, #8
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fa50 	bl	80097b4 <USBH_Get_DevDesc>
 8009314:	4603      	mov	r3, r0
 8009316:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009318:	7bbb      	ldrb	r3, [r7, #14]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d130      	bne.n	8009380 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	7919      	ldrb	r1, [r3, #4]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009342:	b292      	uxth	r2, r2
 8009344:	9202      	str	r2, [sp, #8]
 8009346:	2200      	movs	r2, #0
 8009348:	9201      	str	r2, [sp, #4]
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	4603      	mov	r3, r0
 800934e:	2280      	movs	r2, #128	; 0x80
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 ff77 	bl	800a244 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	7959      	ldrb	r1, [r3, #5]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800936a:	b292      	uxth	r2, r2
 800936c:	9202      	str	r2, [sp, #8]
 800936e:	2200      	movs	r2, #0
 8009370:	9201      	str	r2, [sp, #4]
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	4603      	mov	r3, r0
 8009376:	2200      	movs	r2, #0
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 ff63 	bl	800a244 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800937e:	e175      	b.n	800966c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	2b03      	cmp	r3, #3
 8009384:	f040 8172 	bne.w	800966c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800938e:	3301      	adds	r3, #1
 8009390:	b2da      	uxtb	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800939e:	2b03      	cmp	r3, #3
 80093a0:	d903      	bls.n	80093aa <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	220d      	movs	r2, #13
 80093a6:	701a      	strb	r2, [r3, #0]
      break;
 80093a8:	e160      	b.n	800966c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	795b      	ldrb	r3, [r3, #5]
 80093ae:	4619      	mov	r1, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 ff97 	bl	800a2e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	791b      	ldrb	r3, [r3, #4]
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 ff91 	bl	800a2e4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	701a      	strb	r2, [r3, #0]
      break;
 80093c8:	e150      	b.n	800966c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80093ca:	2112      	movs	r1, #18
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f9f1 	bl	80097b4 <USBH_Get_DevDesc>
 80093d2:	4603      	mov	r3, r0
 80093d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093d6:	7bbb      	ldrb	r3, [r7, #14]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d103      	bne.n	80093e4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2202      	movs	r2, #2
 80093e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80093e2:	e145      	b.n	8009670 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	f040 8142 	bne.w	8009670 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093f2:	3301      	adds	r3, #1
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009402:	2b03      	cmp	r3, #3
 8009404:	d903      	bls.n	800940e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	220d      	movs	r2, #13
 800940a:	701a      	strb	r2, [r3, #0]
      break;
 800940c:	e130      	b.n	8009670 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	795b      	ldrb	r3, [r3, #5]
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 ff65 	bl	800a2e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	791b      	ldrb	r3, [r3, #4]
 800941e:	4619      	mov	r1, r3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 ff5f 	bl	800a2e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	701a      	strb	r2, [r3, #0]
      break;
 8009432:	e11d      	b.n	8009670 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009434:	2101      	movs	r1, #1
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fa68 	bl	800990c <USBH_SetAddress>
 800943c:	4603      	mov	r3, r0
 800943e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009440:	7bbb      	ldrb	r3, [r7, #14]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d132      	bne.n	80094ac <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009446:	2002      	movs	r0, #2
 8009448:	f001 fa42 	bl	800a8d0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2203      	movs	r2, #3
 8009458:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	7919      	ldrb	r1, [r3, #4]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800946e:	b292      	uxth	r2, r2
 8009470:	9202      	str	r2, [sp, #8]
 8009472:	2200      	movs	r2, #0
 8009474:	9201      	str	r2, [sp, #4]
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	4603      	mov	r3, r0
 800947a:	2280      	movs	r2, #128	; 0x80
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fee1 	bl	800a244 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	7959      	ldrb	r1, [r3, #5]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009496:	b292      	uxth	r2, r2
 8009498:	9202      	str	r2, [sp, #8]
 800949a:	2200      	movs	r2, #0
 800949c:	9201      	str	r2, [sp, #4]
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	4603      	mov	r3, r0
 80094a2:	2200      	movs	r2, #0
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fecd 	bl	800a244 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80094aa:	e0e3      	b.n	8009674 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	f040 80e0 	bne.w	8009674 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	220d      	movs	r2, #13
 80094b8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	705a      	strb	r2, [r3, #1]
      break;
 80094c0:	e0d8      	b.n	8009674 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80094c2:	2109      	movs	r1, #9
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 f99d 	bl	8009804 <USBH_Get_CfgDesc>
 80094ca:	4603      	mov	r3, r0
 80094cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d103      	bne.n	80094dc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2204      	movs	r2, #4
 80094d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80094da:	e0cd      	b.n	8009678 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094dc:	7bbb      	ldrb	r3, [r7, #14]
 80094de:	2b03      	cmp	r3, #3
 80094e0:	f040 80ca 	bne.w	8009678 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80094ea:	3301      	adds	r3, #1
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d903      	bls.n	8009506 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	220d      	movs	r2, #13
 8009502:	701a      	strb	r2, [r3, #0]
      break;
 8009504:	e0b8      	b.n	8009678 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	795b      	ldrb	r3, [r3, #5]
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fee9 	bl	800a2e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	791b      	ldrb	r3, [r3, #4]
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fee3 	bl	800a2e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	701a      	strb	r2, [r3, #0]
      break;
 800952a:	e0a5      	b.n	8009678 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009532:	4619      	mov	r1, r3
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f965 	bl	8009804 <USBH_Get_CfgDesc>
 800953a:	4603      	mov	r3, r0
 800953c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800953e:	7bbb      	ldrb	r3, [r7, #14]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d103      	bne.n	800954c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2205      	movs	r2, #5
 8009548:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800954a:	e097      	b.n	800967c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	2b03      	cmp	r3, #3
 8009550:	f040 8094 	bne.w	800967c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800955a:	3301      	adds	r3, #1
 800955c:	b2da      	uxtb	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800956a:	2b03      	cmp	r3, #3
 800956c:	d903      	bls.n	8009576 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	220d      	movs	r2, #13
 8009572:	701a      	strb	r2, [r3, #0]
      break;
 8009574:	e082      	b.n	800967c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	795b      	ldrb	r3, [r3, #5]
 800957a:	4619      	mov	r1, r3
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 feb1 	bl	800a2e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	791b      	ldrb	r3, [r3, #4]
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 feab 	bl	800a2e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	701a      	strb	r2, [r3, #0]
      break;
 800959a:	e06f      	b.n	800967c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d019      	beq.n	80095da <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80095b2:	23ff      	movs	r3, #255	; 0xff
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f949 	bl	800984c <USBH_Get_StringDesc>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80095be:	7bbb      	ldrb	r3, [r7, #14]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d103      	bne.n	80095cc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2206      	movs	r2, #6
 80095c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80095ca:	e059      	b.n	8009680 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095cc:	7bbb      	ldrb	r3, [r7, #14]
 80095ce:	2b03      	cmp	r3, #3
 80095d0:	d156      	bne.n	8009680 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2206      	movs	r2, #6
 80095d6:	705a      	strb	r2, [r3, #1]
      break;
 80095d8:	e052      	b.n	8009680 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2206      	movs	r2, #6
 80095de:	705a      	strb	r2, [r3, #1]
      break;
 80095e0:	e04e      	b.n	8009680 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d019      	beq.n	8009620 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80095f8:	23ff      	movs	r3, #255	; 0xff
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f926 	bl	800984c <USBH_Get_StringDesc>
 8009600:	4603      	mov	r3, r0
 8009602:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d103      	bne.n	8009612 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2207      	movs	r2, #7
 800960e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009610:	e038      	b.n	8009684 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009612:	7bbb      	ldrb	r3, [r7, #14]
 8009614:	2b03      	cmp	r3, #3
 8009616:	d135      	bne.n	8009684 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2207      	movs	r2, #7
 800961c:	705a      	strb	r2, [r3, #1]
      break;
 800961e:	e031      	b.n	8009684 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2207      	movs	r2, #7
 8009624:	705a      	strb	r2, [r3, #1]
      break;
 8009626:	e02d      	b.n	8009684 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800962e:	2b00      	cmp	r3, #0
 8009630:	d017      	beq.n	8009662 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800963e:	23ff      	movs	r3, #255	; 0xff
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f903 	bl	800984c <USBH_Get_StringDesc>
 8009646:	4603      	mov	r3, r0
 8009648:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800964a:	7bbb      	ldrb	r3, [r7, #14]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d102      	bne.n	8009656 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009654:	e018      	b.n	8009688 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009656:	7bbb      	ldrb	r3, [r7, #14]
 8009658:	2b03      	cmp	r3, #3
 800965a:	d115      	bne.n	8009688 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	73fb      	strb	r3, [r7, #15]
      break;
 8009660:	e012      	b.n	8009688 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]
      break;
 8009666:	e00f      	b.n	8009688 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009668:	bf00      	nop
 800966a:	e00e      	b.n	800968a <USBH_HandleEnum+0x3be>
      break;
 800966c:	bf00      	nop
 800966e:	e00c      	b.n	800968a <USBH_HandleEnum+0x3be>
      break;
 8009670:	bf00      	nop
 8009672:	e00a      	b.n	800968a <USBH_HandleEnum+0x3be>
      break;
 8009674:	bf00      	nop
 8009676:	e008      	b.n	800968a <USBH_HandleEnum+0x3be>
      break;
 8009678:	bf00      	nop
 800967a:	e006      	b.n	800968a <USBH_HandleEnum+0x3be>
      break;
 800967c:	bf00      	nop
 800967e:	e004      	b.n	800968a <USBH_HandleEnum+0x3be>
      break;
 8009680:	bf00      	nop
 8009682:	e002      	b.n	800968a <USBH_HandleEnum+0x3be>
      break;
 8009684:	bf00      	nop
 8009686:	e000      	b.n	800968a <USBH_HandleEnum+0x3be>
      break;
 8009688:	bf00      	nop
  }
  return Status;
 800968a:	7bfb      	ldrb	r3, [r7, #15]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	683a      	ldr	r2, [r7, #0]
 80096a2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80096a6:	bf00      	nop
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b082      	sub	sp, #8
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 f804 	bl	80096d6 <USBH_HandleSof>
}
 80096ce:	bf00      	nop
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	2b0b      	cmp	r3, #11
 80096e6:	d10a      	bne.n	80096fe <USBH_HandleSof+0x28>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d005      	beq.n	80096fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	4798      	blx	r3
  }
}
 80096fe:	bf00      	nop
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009706:	b480      	push	{r7}
 8009708:	b083      	sub	sp, #12
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009716:	bf00      	nop
}
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr

08009722 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009722:	b480      	push	{r7}
 8009724:	b083      	sub	sp, #12
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009732:	bf00      	nop
}
 8009734:	370c      	adds	r7, #12
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800973e:	b480      	push	{r7}
 8009740:	b083      	sub	sp, #12
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2201      	movs	r2, #1
 800974a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 ff56 	bl	800a63e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	791b      	ldrb	r3, [r3, #4]
 8009796:	4619      	mov	r1, r3
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fda3 	bl	800a2e4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	795b      	ldrb	r3, [r3, #5]
 80097a2:	4619      	mov	r1, r3
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fd9d 	bl	800a2e4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af02      	add	r7, sp, #8
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80097c6:	78fb      	ldrb	r3, [r7, #3]
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	4613      	mov	r3, r2
 80097ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097d2:	2100      	movs	r1, #0
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f864 	bl	80098a2 <USBH_GetDescriptor>
 80097da:	4603      	mov	r3, r0
 80097dc:	73fb      	strb	r3, [r7, #15]
 80097de:	7bfb      	ldrb	r3, [r7, #15]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10a      	bne.n	80097fa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80097f0:	78fa      	ldrb	r2, [r7, #3]
 80097f2:	b292      	uxth	r2, r2
 80097f4:	4619      	mov	r1, r3
 80097f6:	f000 f918 	bl	8009a2a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af02      	add	r7, sp, #8
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	460b      	mov	r3, r1
 800980e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	331c      	adds	r3, #28
 8009814:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009816:	887b      	ldrh	r3, [r7, #2]
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009820:	2100      	movs	r1, #0
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f83d 	bl	80098a2 <USBH_GetDescriptor>
 8009828:	4603      	mov	r3, r0
 800982a:	72fb      	strb	r3, [r7, #11]
 800982c:	7afb      	ldrb	r3, [r7, #11]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d107      	bne.n	8009842 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009838:	887a      	ldrh	r2, [r7, #2]
 800983a:	68f9      	ldr	r1, [r7, #12]
 800983c:	4618      	mov	r0, r3
 800983e:	f000 f964 	bl	8009b0a <USBH_ParseCfgDesc>
  }

  return status;
 8009842:	7afb      	ldrb	r3, [r7, #11]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b088      	sub	sp, #32
 8009850:	af02      	add	r7, sp, #8
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	607a      	str	r2, [r7, #4]
 8009856:	461a      	mov	r2, r3
 8009858:	460b      	mov	r3, r1
 800985a:	72fb      	strb	r3, [r7, #11]
 800985c:	4613      	mov	r3, r2
 800985e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009860:	7afb      	ldrb	r3, [r7, #11]
 8009862:	b29b      	uxth	r3, r3
 8009864:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009868:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009870:	893b      	ldrh	r3, [r7, #8]
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	460b      	mov	r3, r1
 8009876:	2100      	movs	r1, #0
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f000 f812 	bl	80098a2 <USBH_GetDescriptor>
 800987e:	4603      	mov	r3, r0
 8009880:	75fb      	strb	r3, [r7, #23]
 8009882:	7dfb      	ldrb	r3, [r7, #23]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d107      	bne.n	8009898 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800988e:	893a      	ldrh	r2, [r7, #8]
 8009890:	6879      	ldr	r1, [r7, #4]
 8009892:	4618      	mov	r0, r3
 8009894:	f000 fa37 	bl	8009d06 <USBH_ParseStringDesc>
  }

  return status;
 8009898:	7dfb      	ldrb	r3, [r7, #23]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b084      	sub	sp, #16
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	607b      	str	r3, [r7, #4]
 80098ac:	460b      	mov	r3, r1
 80098ae:	72fb      	strb	r3, [r7, #11]
 80098b0:	4613      	mov	r3, r2
 80098b2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	789b      	ldrb	r3, [r3, #2]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d11c      	bne.n	80098f6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80098bc:	7afb      	ldrb	r3, [r7, #11]
 80098be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2206      	movs	r2, #6
 80098cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	893a      	ldrh	r2, [r7, #8]
 80098d2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80098d4:	893b      	ldrh	r3, [r7, #8]
 80098d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80098da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098de:	d104      	bne.n	80098ea <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f240 4209 	movw	r2, #1033	; 0x409
 80098e6:	829a      	strh	r2, [r3, #20]
 80098e8:	e002      	b.n	80098f0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	8b3a      	ldrh	r2, [r7, #24]
 80098f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80098f6:	8b3b      	ldrh	r3, [r7, #24]
 80098f8:	461a      	mov	r2, r3
 80098fa:	6879      	ldr	r1, [r7, #4]
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 fa50 	bl	8009da2 <USBH_CtlReq>
 8009902:	4603      	mov	r3, r0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	460b      	mov	r3, r1
 8009916:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	789b      	ldrb	r3, [r3, #2]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d10f      	bne.n	8009940 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2205      	movs	r2, #5
 800992a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800992c:	78fb      	ldrb	r3, [r7, #3]
 800992e:	b29a      	uxth	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009940:	2200      	movs	r2, #0
 8009942:	2100      	movs	r1, #0
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 fa2c 	bl	8009da2 <USBH_CtlReq>
 800994a:	4603      	mov	r3, r0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	460b      	mov	r3, r1
 800995e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	789b      	ldrb	r3, [r3, #2]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d10e      	bne.n	8009986 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2209      	movs	r2, #9
 8009972:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	887a      	ldrh	r2, [r7, #2]
 8009978:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009986:	2200      	movs	r2, #0
 8009988:	2100      	movs	r1, #0
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fa09 	bl	8009da2 <USBH_CtlReq>
 8009990:	4603      	mov	r3, r0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b082      	sub	sp, #8
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	460b      	mov	r3, r1
 80099a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	789b      	ldrb	r3, [r3, #2]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d10f      	bne.n	80099ce <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2203      	movs	r2, #3
 80099b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80099ba:	78fb      	ldrb	r3, [r7, #3]
 80099bc:	b29a      	uxth	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80099ce:	2200      	movs	r2, #0
 80099d0:	2100      	movs	r1, #0
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f9e5 	bl	8009da2 <USBH_CtlReq>
 80099d8:	4603      	mov	r3, r0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b082      	sub	sp, #8
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	460b      	mov	r3, r1
 80099ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	789b      	ldrb	r3, [r3, #2]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d10f      	bne.n	8009a16 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2202      	movs	r2, #2
 80099fa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009a08:	78fb      	ldrb	r3, [r7, #3]
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009a16:	2200      	movs	r2, #0
 8009a18:	2100      	movs	r1, #0
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f9c1 	bl	8009da2 <USBH_CtlReq>
 8009a20:	4603      	mov	r3, r0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3708      	adds	r7, #8
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009a2a:	b480      	push	{r7}
 8009a2c:	b085      	sub	sp, #20
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	60f8      	str	r0, [r7, #12]
 8009a32:	60b9      	str	r1, [r7, #8]
 8009a34:	4613      	mov	r3, r2
 8009a36:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	781a      	ldrb	r2, [r3, #0]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	785a      	ldrb	r2, [r3, #1]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	3302      	adds	r3, #2
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	3303      	adds	r3, #3
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	021b      	lsls	r3, r3, #8
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	791a      	ldrb	r2, [r3, #4]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	795a      	ldrb	r2, [r3, #5]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	799a      	ldrb	r2, [r3, #6]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	79da      	ldrb	r2, [r3, #7]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009a84:	88fb      	ldrh	r3, [r7, #6]
 8009a86:	2b08      	cmp	r3, #8
 8009a88:	d939      	bls.n	8009afe <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	3308      	adds	r3, #8
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	3309      	adds	r3, #9
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	021b      	lsls	r3, r3, #8
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	330a      	adds	r3, #10
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	330b      	adds	r3, #11
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	021b      	lsls	r3, r3, #8
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	4313      	orrs	r3, r2
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	330c      	adds	r3, #12
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	330d      	adds	r3, #13
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	021b      	lsls	r3, r3, #8
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	7b9a      	ldrb	r2, [r3, #14]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	7bda      	ldrb	r2, [r3, #15]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	7c1a      	ldrb	r2, [r3, #16]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	7c5a      	ldrb	r2, [r3, #17]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	745a      	strb	r2, [r3, #17]
  }
}
 8009afe:	bf00      	nop
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b08a      	sub	sp, #40	; 0x28
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	60f8      	str	r0, [r7, #12]
 8009b12:	60b9      	str	r1, [r7, #8]
 8009b14:	4613      	mov	r3, r2
 8009b16:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009b22:	2300      	movs	r3, #0
 8009b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	781a      	ldrb	r2, [r3, #0]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	785a      	ldrb	r2, [r3, #1]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	3302      	adds	r3, #2
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	3303      	adds	r3, #3
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	021b      	lsls	r3, r3, #8
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	4313      	orrs	r3, r2
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	791a      	ldrb	r2, [r3, #4]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	795a      	ldrb	r2, [r3, #5]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	799a      	ldrb	r2, [r3, #6]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	79da      	ldrb	r2, [r3, #7]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	7a1a      	ldrb	r2, [r3, #8]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009b80:	88fb      	ldrh	r3, [r7, #6]
 8009b82:	2b09      	cmp	r3, #9
 8009b84:	d95f      	bls.n	8009c46 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009b86:	2309      	movs	r3, #9
 8009b88:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009b8e:	e051      	b.n	8009c34 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009b90:	f107 0316 	add.w	r3, r7, #22
 8009b94:	4619      	mov	r1, r3
 8009b96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b98:	f000 f8e8 	bl	8009d6c <USBH_GetNextDesc>
 8009b9c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba0:	785b      	ldrb	r3, [r3, #1]
 8009ba2:	2b04      	cmp	r3, #4
 8009ba4:	d146      	bne.n	8009c34 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009ba6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009baa:	221a      	movs	r2, #26
 8009bac:	fb02 f303 	mul.w	r3, r2, r3
 8009bb0:	3308      	adds	r3, #8
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	3302      	adds	r3, #2
 8009bb8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009bba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bbc:	69f8      	ldr	r0, [r7, #28]
 8009bbe:	f000 f846 	bl	8009c4e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009bcc:	e022      	b.n	8009c14 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009bce:	f107 0316 	add.w	r3, r7, #22
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bd6:	f000 f8c9 	bl	8009d6c <USBH_GetNextDesc>
 8009bda:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bde:	785b      	ldrb	r3, [r3, #1]
 8009be0:	2b05      	cmp	r3, #5
 8009be2:	d117      	bne.n	8009c14 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009be4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009be8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009bec:	3201      	adds	r2, #1
 8009bee:	00d2      	lsls	r2, r2, #3
 8009bf0:	211a      	movs	r1, #26
 8009bf2:	fb01 f303 	mul.w	r3, r1, r3
 8009bf6:	4413      	add	r3, r2
 8009bf8:	3308      	adds	r3, #8
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	3304      	adds	r3, #4
 8009c00:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009c02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c04:	69b8      	ldr	r0, [r7, #24]
 8009c06:	f000 f851 	bl	8009cac <USBH_ParseEPDesc>
            ep_ix++;
 8009c0a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009c0e:	3301      	adds	r3, #1
 8009c10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	791b      	ldrb	r3, [r3, #4]
 8009c18:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d204      	bcs.n	8009c2a <USBH_ParseCfgDesc+0x120>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	885a      	ldrh	r2, [r3, #2]
 8009c24:	8afb      	ldrh	r3, [r7, #22]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d8d1      	bhi.n	8009bce <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009c2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c2e:	3301      	adds	r3, #1
 8009c30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009c34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d804      	bhi.n	8009c46 <USBH_ParseCfgDesc+0x13c>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	885a      	ldrh	r2, [r3, #2]
 8009c40:	8afb      	ldrh	r3, [r7, #22]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d8a4      	bhi.n	8009b90 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009c46:	bf00      	nop
 8009c48:	3728      	adds	r7, #40	; 0x28
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b083      	sub	sp, #12
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	781a      	ldrb	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	785a      	ldrb	r2, [r3, #1]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	789a      	ldrb	r2, [r3, #2]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	78da      	ldrb	r2, [r3, #3]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	791a      	ldrb	r2, [r3, #4]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	795a      	ldrb	r2, [r3, #5]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	799a      	ldrb	r2, [r3, #6]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	79da      	ldrb	r2, [r3, #7]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	7a1a      	ldrb	r2, [r3, #8]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	721a      	strb	r2, [r3, #8]
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	781a      	ldrb	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	785a      	ldrb	r2, [r3, #1]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	789a      	ldrb	r2, [r3, #2]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	78da      	ldrb	r2, [r3, #3]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	3304      	adds	r3, #4
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	3305      	adds	r3, #5
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	021b      	lsls	r3, r3, #8
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	4313      	orrs	r3, r2
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	799a      	ldrb	r2, [r3, #6]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	719a      	strb	r2, [r3, #6]
}
 8009cfa:	bf00      	nop
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b087      	sub	sp, #28
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	60f8      	str	r0, [r7, #12]
 8009d0e:	60b9      	str	r1, [r7, #8]
 8009d10:	4613      	mov	r3, r2
 8009d12:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	3301      	adds	r3, #1
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d120      	bne.n	8009d60 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	1e9a      	subs	r2, r3, #2
 8009d24:	88fb      	ldrh	r3, [r7, #6]
 8009d26:	4293      	cmp	r3, r2
 8009d28:	bf28      	it	cs
 8009d2a:	4613      	movcs	r3, r2
 8009d2c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	3302      	adds	r3, #2
 8009d32:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009d34:	2300      	movs	r3, #0
 8009d36:	82fb      	strh	r3, [r7, #22]
 8009d38:	e00b      	b.n	8009d52 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009d3a:	8afb      	ldrh	r3, [r7, #22]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	4413      	add	r3, r2
 8009d40:	781a      	ldrb	r2, [r3, #0]
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009d4c:	8afb      	ldrh	r3, [r7, #22]
 8009d4e:	3302      	adds	r3, #2
 8009d50:	82fb      	strh	r3, [r7, #22]
 8009d52:	8afa      	ldrh	r2, [r7, #22]
 8009d54:	8abb      	ldrh	r3, [r7, #20]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d3ef      	bcc.n	8009d3a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	701a      	strb	r2, [r3, #0]
  }
}
 8009d60:	bf00      	nop
 8009d62:	371c      	adds	r7, #28
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	881a      	ldrh	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	4413      	add	r3, r2
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4413      	add	r3, r2
 8009d92:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009d94:	68fb      	ldr	r3, [r7, #12]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b086      	sub	sp, #24
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	60f8      	str	r0, [r7, #12]
 8009daa:	60b9      	str	r1, [r7, #8]
 8009dac:	4613      	mov	r3, r2
 8009dae:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009db0:	2301      	movs	r3, #1
 8009db2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	789b      	ldrb	r3, [r3, #2]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d002      	beq.n	8009dc2 <USBH_CtlReq+0x20>
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	d00f      	beq.n	8009de0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009dc0:	e027      	b.n	8009e12 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	88fa      	ldrh	r2, [r7, #6]
 8009dcc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8009dde:	e018      	b.n	8009e12 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f000 f81b 	bl	8009e1c <USBH_HandleControl>
 8009de6:	4603      	mov	r3, r0
 8009de8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <USBH_CtlReq+0x54>
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	d106      	bne.n	8009e04 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	761a      	strb	r2, [r3, #24]
      break;
 8009e02:	e005      	b.n	8009e10 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009e04:	7dfb      	ldrb	r3, [r7, #23]
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d102      	bne.n	8009e10 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	709a      	strb	r2, [r3, #2]
      break;
 8009e10:	bf00      	nop
  }
  return status;
 8009e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3718      	adds	r7, #24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af02      	add	r7, sp, #8
 8009e22:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009e24:	2301      	movs	r3, #1
 8009e26:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	7e1b      	ldrb	r3, [r3, #24]
 8009e30:	3b01      	subs	r3, #1
 8009e32:	2b0a      	cmp	r3, #10
 8009e34:	f200 8156 	bhi.w	800a0e4 <USBH_HandleControl+0x2c8>
 8009e38:	a201      	add	r2, pc, #4	; (adr r2, 8009e40 <USBH_HandleControl+0x24>)
 8009e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3e:	bf00      	nop
 8009e40:	08009e6d 	.word	0x08009e6d
 8009e44:	08009e87 	.word	0x08009e87
 8009e48:	08009ef1 	.word	0x08009ef1
 8009e4c:	08009f17 	.word	0x08009f17
 8009e50:	08009f4f 	.word	0x08009f4f
 8009e54:	08009f79 	.word	0x08009f79
 8009e58:	08009fcb 	.word	0x08009fcb
 8009e5c:	08009fed 	.word	0x08009fed
 8009e60:	0800a029 	.word	0x0800a029
 8009e64:	0800a04f 	.word	0x0800a04f
 8009e68:	0800a08d 	.word	0x0800a08d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f103 0110 	add.w	r1, r3, #16
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	795b      	ldrb	r3, [r3, #5]
 8009e76:	461a      	mov	r2, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 f943 	bl	800a104 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2202      	movs	r2, #2
 8009e82:	761a      	strb	r2, [r3, #24]
      break;
 8009e84:	e139      	b.n	800a0fa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	795b      	ldrb	r3, [r3, #5]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 fcc5 	bl	800a81c <USBH_LL_GetURBState>
 8009e92:	4603      	mov	r3, r0
 8009e94:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e96:	7bbb      	ldrb	r3, [r7, #14]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d11e      	bne.n	8009eda <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	7c1b      	ldrb	r3, [r3, #16]
 8009ea0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ea4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	8adb      	ldrh	r3, [r3, #22]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009eae:	7b7b      	ldrb	r3, [r7, #13]
 8009eb0:	2b80      	cmp	r3, #128	; 0x80
 8009eb2:	d103      	bne.n	8009ebc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2203      	movs	r2, #3
 8009eb8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009eba:	e115      	b.n	800a0e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2205      	movs	r2, #5
 8009ec0:	761a      	strb	r2, [r3, #24]
      break;
 8009ec2:	e111      	b.n	800a0e8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009ec4:	7b7b      	ldrb	r3, [r7, #13]
 8009ec6:	2b80      	cmp	r3, #128	; 0x80
 8009ec8:	d103      	bne.n	8009ed2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2209      	movs	r2, #9
 8009ece:	761a      	strb	r2, [r3, #24]
      break;
 8009ed0:	e10a      	b.n	800a0e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2207      	movs	r2, #7
 8009ed6:	761a      	strb	r2, [r3, #24]
      break;
 8009ed8:	e106      	b.n	800a0e8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009eda:	7bbb      	ldrb	r3, [r7, #14]
 8009edc:	2b04      	cmp	r3, #4
 8009ede:	d003      	beq.n	8009ee8 <USBH_HandleControl+0xcc>
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	f040 8100 	bne.w	800a0e8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	220b      	movs	r2, #11
 8009eec:	761a      	strb	r2, [r3, #24]
      break;
 8009eee:	e0fb      	b.n	800a0e8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6899      	ldr	r1, [r3, #8]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	899a      	ldrh	r2, [r3, #12]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	791b      	ldrb	r3, [r3, #4]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f93a 	bl	800a182 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2204      	movs	r2, #4
 8009f12:	761a      	strb	r2, [r3, #24]
      break;
 8009f14:	e0f1      	b.n	800a0fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	791b      	ldrb	r3, [r3, #4]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 fc7d 	bl	800a81c <USBH_LL_GetURBState>
 8009f22:	4603      	mov	r3, r0
 8009f24:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d102      	bne.n	8009f32 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2209      	movs	r2, #9
 8009f30:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009f32:	7bbb      	ldrb	r3, [r7, #14]
 8009f34:	2b05      	cmp	r3, #5
 8009f36:	d102      	bne.n	8009f3e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009f3c:	e0d6      	b.n	800a0ec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009f3e:	7bbb      	ldrb	r3, [r7, #14]
 8009f40:	2b04      	cmp	r3, #4
 8009f42:	f040 80d3 	bne.w	800a0ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	220b      	movs	r2, #11
 8009f4a:	761a      	strb	r2, [r3, #24]
      break;
 8009f4c:	e0ce      	b.n	800a0ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6899      	ldr	r1, [r3, #8]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	899a      	ldrh	r2, [r3, #12]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	795b      	ldrb	r3, [r3, #5]
 8009f5a:	2001      	movs	r0, #1
 8009f5c:	9000      	str	r0, [sp, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f8ea 	bl	800a138 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2206      	movs	r2, #6
 8009f74:	761a      	strb	r2, [r3, #24]
      break;
 8009f76:	e0c0      	b.n	800a0fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	795b      	ldrb	r3, [r3, #5]
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fc4c 	bl	800a81c <USBH_LL_GetURBState>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f88:	7bbb      	ldrb	r3, [r7, #14]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d103      	bne.n	8009f96 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2207      	movs	r2, #7
 8009f92:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009f94:	e0ac      	b.n	800a0f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009f96:	7bbb      	ldrb	r3, [r7, #14]
 8009f98:	2b05      	cmp	r3, #5
 8009f9a:	d105      	bne.n	8009fa8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	220c      	movs	r2, #12
 8009fa0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8009fa6:	e0a3      	b.n	800a0f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009fa8:	7bbb      	ldrb	r3, [r7, #14]
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d103      	bne.n	8009fb6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2205      	movs	r2, #5
 8009fb2:	761a      	strb	r2, [r3, #24]
      break;
 8009fb4:	e09c      	b.n	800a0f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009fb6:	7bbb      	ldrb	r3, [r7, #14]
 8009fb8:	2b04      	cmp	r3, #4
 8009fba:	f040 8099 	bne.w	800a0f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	220b      	movs	r2, #11
 8009fc2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8009fc8:	e092      	b.n	800a0f0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	791b      	ldrb	r3, [r3, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f8d5 	bl	800a182 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2208      	movs	r2, #8
 8009fe8:	761a      	strb	r2, [r3, #24]

      break;
 8009fea:	e086      	b.n	800a0fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	791b      	ldrb	r3, [r3, #4]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 fc12 	bl	800a81c <USBH_LL_GetURBState>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d105      	bne.n	800a00e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	220d      	movs	r2, #13
 800a006:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a00c:	e072      	b.n	800a0f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a00e:	7bbb      	ldrb	r3, [r7, #14]
 800a010:	2b04      	cmp	r3, #4
 800a012:	d103      	bne.n	800a01c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	220b      	movs	r2, #11
 800a018:	761a      	strb	r2, [r3, #24]
      break;
 800a01a:	e06b      	b.n	800a0f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a01c:	7bbb      	ldrb	r3, [r7, #14]
 800a01e:	2b05      	cmp	r3, #5
 800a020:	d168      	bne.n	800a0f4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a022:	2303      	movs	r3, #3
 800a024:	73fb      	strb	r3, [r7, #15]
      break;
 800a026:	e065      	b.n	800a0f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	795b      	ldrb	r3, [r3, #5]
 800a02c:	2201      	movs	r2, #1
 800a02e:	9200      	str	r2, [sp, #0]
 800a030:	2200      	movs	r2, #0
 800a032:	2100      	movs	r1, #0
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f87f 	bl	800a138 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a040:	b29a      	uxth	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	220a      	movs	r2, #10
 800a04a:	761a      	strb	r2, [r3, #24]
      break;
 800a04c:	e055      	b.n	800a0fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	795b      	ldrb	r3, [r3, #5]
 800a052:	4619      	mov	r1, r3
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fbe1 	bl	800a81c <USBH_LL_GetURBState>
 800a05a:	4603      	mov	r3, r0
 800a05c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a05e:	7bbb      	ldrb	r3, [r7, #14]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d105      	bne.n	800a070 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a064:	2300      	movs	r3, #0
 800a066:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	220d      	movs	r2, #13
 800a06c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a06e:	e043      	b.n	800a0f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a070:	7bbb      	ldrb	r3, [r7, #14]
 800a072:	2b02      	cmp	r3, #2
 800a074:	d103      	bne.n	800a07e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2209      	movs	r2, #9
 800a07a:	761a      	strb	r2, [r3, #24]
      break;
 800a07c:	e03c      	b.n	800a0f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a07e:	7bbb      	ldrb	r3, [r7, #14]
 800a080:	2b04      	cmp	r3, #4
 800a082:	d139      	bne.n	800a0f8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	220b      	movs	r2, #11
 800a088:	761a      	strb	r2, [r3, #24]
      break;
 800a08a:	e035      	b.n	800a0f8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	7e5b      	ldrb	r3, [r3, #25]
 800a090:	3301      	adds	r3, #1
 800a092:	b2da      	uxtb	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	765a      	strb	r2, [r3, #25]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	7e5b      	ldrb	r3, [r3, #25]
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d806      	bhi.n	800a0ae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a0ac:	e025      	b.n	800a0fa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0b4:	2106      	movs	r1, #6
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	795b      	ldrb	r3, [r3, #5]
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 f90c 	bl	800a2e4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	791b      	ldrb	r3, [r3, #4]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f906 	bl	800a2e4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a0de:	2302      	movs	r3, #2
 800a0e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a0e2:	e00a      	b.n	800a0fa <USBH_HandleControl+0x2de>

    default:
      break;
 800a0e4:	bf00      	nop
 800a0e6:	e008      	b.n	800a0fa <USBH_HandleControl+0x2de>
      break;
 800a0e8:	bf00      	nop
 800a0ea:	e006      	b.n	800a0fa <USBH_HandleControl+0x2de>
      break;
 800a0ec:	bf00      	nop
 800a0ee:	e004      	b.n	800a0fa <USBH_HandleControl+0x2de>
      break;
 800a0f0:	bf00      	nop
 800a0f2:	e002      	b.n	800a0fa <USBH_HandleControl+0x2de>
      break;
 800a0f4:	bf00      	nop
 800a0f6:	e000      	b.n	800a0fa <USBH_HandleControl+0x2de>
      break;
 800a0f8:	bf00      	nop
  }

  return status;
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b088      	sub	sp, #32
 800a108:	af04      	add	r7, sp, #16
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	4613      	mov	r3, r2
 800a110:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a112:	79f9      	ldrb	r1, [r7, #7]
 800a114:	2300      	movs	r3, #0
 800a116:	9303      	str	r3, [sp, #12]
 800a118:	2308      	movs	r3, #8
 800a11a:	9302      	str	r3, [sp, #8]
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	9301      	str	r3, [sp, #4]
 800a120:	2300      	movs	r3, #0
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	2300      	movs	r3, #0
 800a126:	2200      	movs	r2, #0
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f000 fb46 	bl	800a7ba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b088      	sub	sp, #32
 800a13c:	af04      	add	r7, sp, #16
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	4611      	mov	r1, r2
 800a144:	461a      	mov	r2, r3
 800a146:	460b      	mov	r3, r1
 800a148:	80fb      	strh	r3, [r7, #6]
 800a14a:	4613      	mov	r3, r2
 800a14c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a154:	2b00      	cmp	r3, #0
 800a156:	d001      	beq.n	800a15c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a158:	2300      	movs	r3, #0
 800a15a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a15c:	7979      	ldrb	r1, [r7, #5]
 800a15e:	7e3b      	ldrb	r3, [r7, #24]
 800a160:	9303      	str	r3, [sp, #12]
 800a162:	88fb      	ldrh	r3, [r7, #6]
 800a164:	9302      	str	r3, [sp, #8]
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	9301      	str	r3, [sp, #4]
 800a16a:	2301      	movs	r3, #1
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	2300      	movs	r3, #0
 800a170:	2200      	movs	r2, #0
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f000 fb21 	bl	800a7ba <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b088      	sub	sp, #32
 800a186:	af04      	add	r7, sp, #16
 800a188:	60f8      	str	r0, [r7, #12]
 800a18a:	60b9      	str	r1, [r7, #8]
 800a18c:	4611      	mov	r1, r2
 800a18e:	461a      	mov	r2, r3
 800a190:	460b      	mov	r3, r1
 800a192:	80fb      	strh	r3, [r7, #6]
 800a194:	4613      	mov	r3, r2
 800a196:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a198:	7979      	ldrb	r1, [r7, #5]
 800a19a:	2300      	movs	r3, #0
 800a19c:	9303      	str	r3, [sp, #12]
 800a19e:	88fb      	ldrh	r3, [r7, #6]
 800a1a0:	9302      	str	r3, [sp, #8]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	9301      	str	r3, [sp, #4]
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f000 fb03 	bl	800a7ba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a1b4:	2300      	movs	r3, #0

}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b088      	sub	sp, #32
 800a1c2:	af04      	add	r7, sp, #16
 800a1c4:	60f8      	str	r0, [r7, #12]
 800a1c6:	60b9      	str	r1, [r7, #8]
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	80fb      	strh	r3, [r7, #6]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a1e2:	7979      	ldrb	r1, [r7, #5]
 800a1e4:	7e3b      	ldrb	r3, [r7, #24]
 800a1e6:	9303      	str	r3, [sp, #12]
 800a1e8:	88fb      	ldrh	r3, [r7, #6]
 800a1ea:	9302      	str	r3, [sp, #8]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 fade 	bl	800a7ba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b088      	sub	sp, #32
 800a20c:	af04      	add	r7, sp, #16
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	4611      	mov	r1, r2
 800a214:	461a      	mov	r2, r3
 800a216:	460b      	mov	r3, r1
 800a218:	80fb      	strh	r3, [r7, #6]
 800a21a:	4613      	mov	r3, r2
 800a21c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a21e:	7979      	ldrb	r1, [r7, #5]
 800a220:	2300      	movs	r3, #0
 800a222:	9303      	str	r3, [sp, #12]
 800a224:	88fb      	ldrh	r3, [r7, #6]
 800a226:	9302      	str	r3, [sp, #8]
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	9301      	str	r3, [sp, #4]
 800a22c:	2301      	movs	r3, #1
 800a22e:	9300      	str	r3, [sp, #0]
 800a230:	2302      	movs	r3, #2
 800a232:	2201      	movs	r2, #1
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 fac0 	bl	800a7ba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af04      	add	r7, sp, #16
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	4608      	mov	r0, r1
 800a24e:	4611      	mov	r1, r2
 800a250:	461a      	mov	r2, r3
 800a252:	4603      	mov	r3, r0
 800a254:	70fb      	strb	r3, [r7, #3]
 800a256:	460b      	mov	r3, r1
 800a258:	70bb      	strb	r3, [r7, #2]
 800a25a:	4613      	mov	r3, r2
 800a25c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a25e:	7878      	ldrb	r0, [r7, #1]
 800a260:	78ba      	ldrb	r2, [r7, #2]
 800a262:	78f9      	ldrb	r1, [r7, #3]
 800a264:	8b3b      	ldrh	r3, [r7, #24]
 800a266:	9302      	str	r3, [sp, #8]
 800a268:	7d3b      	ldrb	r3, [r7, #20]
 800a26a:	9301      	str	r3, [sp, #4]
 800a26c:	7c3b      	ldrb	r3, [r7, #16]
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	4603      	mov	r3, r0
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fa53 	bl	800a71e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3708      	adds	r7, #8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b082      	sub	sp, #8
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
 800a28a:	460b      	mov	r3, r1
 800a28c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a28e:	78fb      	ldrb	r3, [r7, #3]
 800a290:	4619      	mov	r1, r3
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fa72 	bl	800a77c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f836 	bl	800a320 <USBH_GetFreePipe>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a2b8:	89fb      	ldrh	r3, [r7, #14]
 800a2ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d00a      	beq.n	800a2d8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a2c2:	78fa      	ldrb	r2, [r7, #3]
 800a2c4:	89fb      	ldrh	r3, [r7, #14]
 800a2c6:	f003 030f 	and.w	r3, r3, #15
 800a2ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2ce:	6879      	ldr	r1, [r7, #4]
 800a2d0:	33e0      	adds	r3, #224	; 0xe0
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	440b      	add	r3, r1
 800a2d6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a2d8:	89fb      	ldrh	r3, [r7, #14]
 800a2da:	b2db      	uxtb	r3, r3
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a2f0:	78fb      	ldrb	r3, [r7, #3]
 800a2f2:	2b0a      	cmp	r3, #10
 800a2f4:	d80d      	bhi.n	800a312 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a2f6:	78fb      	ldrb	r3, [r7, #3]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	33e0      	adds	r3, #224	; 0xe0
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	4413      	add	r3, r2
 800a300:	685a      	ldr	r2, [r3, #4]
 800a302:	78fb      	ldrb	r3, [r7, #3]
 800a304:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a308:	6879      	ldr	r1, [r7, #4]
 800a30a:	33e0      	adds	r3, #224	; 0xe0
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	440b      	add	r3, r1
 800a310:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a328:	2300      	movs	r3, #0
 800a32a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a32c:	2300      	movs	r3, #0
 800a32e:	73fb      	strb	r3, [r7, #15]
 800a330:	e00f      	b.n	800a352 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a332:	7bfb      	ldrb	r3, [r7, #15]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	33e0      	adds	r3, #224	; 0xe0
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a342:	2b00      	cmp	r3, #0
 800a344:	d102      	bne.n	800a34c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a346:	7bfb      	ldrb	r3, [r7, #15]
 800a348:	b29b      	uxth	r3, r3
 800a34a:	e007      	b.n	800a35c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
 800a34e:	3301      	adds	r3, #1
 800a350:	73fb      	strb	r3, [r7, #15]
 800a352:	7bfb      	ldrb	r3, [r7, #15]
 800a354:	2b0a      	cmp	r3, #10
 800a356:	d9ec      	bls.n	800a332 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a358:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3714      	adds	r7, #20
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a36c:	2201      	movs	r2, #1
 800a36e:	490e      	ldr	r1, [pc, #56]	; (800a3a8 <MX_USB_HOST_Init+0x40>)
 800a370:	480e      	ldr	r0, [pc, #56]	; (800a3ac <MX_USB_HOST_Init+0x44>)
 800a372:	f7fe fca1 	bl	8008cb8 <USBH_Init>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d001      	beq.n	800a380 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a37c:	f7f7 fde8 	bl	8001f50 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a380:	490b      	ldr	r1, [pc, #44]	; (800a3b0 <MX_USB_HOST_Init+0x48>)
 800a382:	480a      	ldr	r0, [pc, #40]	; (800a3ac <MX_USB_HOST_Init+0x44>)
 800a384:	f7fe fd26 	bl	8008dd4 <USBH_RegisterClass>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a38e:	f7f7 fddf 	bl	8001f50 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a392:	4806      	ldr	r0, [pc, #24]	; (800a3ac <MX_USB_HOST_Init+0x44>)
 800a394:	f7fe fdaa 	bl	8008eec <USBH_Start>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d001      	beq.n	800a3a2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a39e:	f7f7 fdd7 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a3a2:	bf00      	nop
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	0800a3c9 	.word	0x0800a3c9
 800a3ac:	20000334 	.word	0x20000334
 800a3b0:	20000018 	.word	0x20000018

0800a3b4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a3b8:	4802      	ldr	r0, [pc, #8]	; (800a3c4 <MX_USB_HOST_Process+0x10>)
 800a3ba:	f7fe fda7 	bl	8008f0c <USBH_Process>
}
 800a3be:	bf00      	nop
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	20000334 	.word	0x20000334

0800a3c8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a3d4:	78fb      	ldrb	r3, [r7, #3]
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	2b04      	cmp	r3, #4
 800a3da:	d819      	bhi.n	800a410 <USBH_UserProcess+0x48>
 800a3dc:	a201      	add	r2, pc, #4	; (adr r2, 800a3e4 <USBH_UserProcess+0x1c>)
 800a3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e2:	bf00      	nop
 800a3e4:	0800a411 	.word	0x0800a411
 800a3e8:	0800a401 	.word	0x0800a401
 800a3ec:	0800a411 	.word	0x0800a411
 800a3f0:	0800a409 	.word	0x0800a409
 800a3f4:	0800a3f9 	.word	0x0800a3f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a3f8:	4b09      	ldr	r3, [pc, #36]	; (800a420 <USBH_UserProcess+0x58>)
 800a3fa:	2203      	movs	r2, #3
 800a3fc:	701a      	strb	r2, [r3, #0]
  break;
 800a3fe:	e008      	b.n	800a412 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a400:	4b07      	ldr	r3, [pc, #28]	; (800a420 <USBH_UserProcess+0x58>)
 800a402:	2202      	movs	r2, #2
 800a404:	701a      	strb	r2, [r3, #0]
  break;
 800a406:	e004      	b.n	800a412 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a408:	4b05      	ldr	r3, [pc, #20]	; (800a420 <USBH_UserProcess+0x58>)
 800a40a:	2201      	movs	r2, #1
 800a40c:	701a      	strb	r2, [r3, #0]
  break;
 800a40e:	e000      	b.n	800a412 <USBH_UserProcess+0x4a>

  default:
  break;
 800a410:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a412:	bf00      	nop
 800a414:	370c      	adds	r7, #12
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	200000c8 	.word	0x200000c8

0800a424 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b08a      	sub	sp, #40	; 0x28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a42c:	f107 0314 	add.w	r3, r7, #20
 800a430:	2200      	movs	r2, #0
 800a432:	601a      	str	r2, [r3, #0]
 800a434:	605a      	str	r2, [r3, #4]
 800a436:	609a      	str	r2, [r3, #8]
 800a438:	60da      	str	r2, [r3, #12]
 800a43a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a444:	d147      	bne.n	800a4d6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a446:	2300      	movs	r3, #0
 800a448:	613b      	str	r3, [r7, #16]
 800a44a:	4b25      	ldr	r3, [pc, #148]	; (800a4e0 <HAL_HCD_MspInit+0xbc>)
 800a44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44e:	4a24      	ldr	r2, [pc, #144]	; (800a4e0 <HAL_HCD_MspInit+0xbc>)
 800a450:	f043 0301 	orr.w	r3, r3, #1
 800a454:	6313      	str	r3, [r2, #48]	; 0x30
 800a456:	4b22      	ldr	r3, [pc, #136]	; (800a4e0 <HAL_HCD_MspInit+0xbc>)
 800a458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45a:	f003 0301 	and.w	r3, r3, #1
 800a45e:	613b      	str	r3, [r7, #16]
 800a460:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a462:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a468:	2300      	movs	r3, #0
 800a46a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a46c:	2300      	movs	r3, #0
 800a46e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a470:	f107 0314 	add.w	r3, r7, #20
 800a474:	4619      	mov	r1, r3
 800a476:	481b      	ldr	r0, [pc, #108]	; (800a4e4 <HAL_HCD_MspInit+0xc0>)
 800a478:	f7f8 fa62 	bl	8002940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a47c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a482:	2302      	movs	r3, #2
 800a484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a486:	2300      	movs	r3, #0
 800a488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a48a:	2300      	movs	r3, #0
 800a48c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a48e:	230a      	movs	r3, #10
 800a490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a492:	f107 0314 	add.w	r3, r7, #20
 800a496:	4619      	mov	r1, r3
 800a498:	4812      	ldr	r0, [pc, #72]	; (800a4e4 <HAL_HCD_MspInit+0xc0>)
 800a49a:	f7f8 fa51 	bl	8002940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a49e:	4b10      	ldr	r3, [pc, #64]	; (800a4e0 <HAL_HCD_MspInit+0xbc>)
 800a4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a2:	4a0f      	ldr	r2, [pc, #60]	; (800a4e0 <HAL_HCD_MspInit+0xbc>)
 800a4a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4a8:	6353      	str	r3, [r2, #52]	; 0x34
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	60fb      	str	r3, [r7, #12]
 800a4ae:	4b0c      	ldr	r3, [pc, #48]	; (800a4e0 <HAL_HCD_MspInit+0xbc>)
 800a4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b2:	4a0b      	ldr	r2, [pc, #44]	; (800a4e0 <HAL_HCD_MspInit+0xbc>)
 800a4b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4b8:	6453      	str	r3, [r2, #68]	; 0x44
 800a4ba:	4b09      	ldr	r3, [pc, #36]	; (800a4e0 <HAL_HCD_MspInit+0xbc>)
 800a4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4c2:	60fb      	str	r3, [r7, #12]
 800a4c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	2043      	movs	r0, #67	; 0x43
 800a4cc:	f7f8 fa01 	bl	80028d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a4d0:	2043      	movs	r0, #67	; 0x43
 800a4d2:	f7f8 fa1a 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a4d6:	bf00      	nop
 800a4d8:	3728      	adds	r7, #40	; 0x28
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	40023800 	.word	0x40023800
 800a4e4:	40020000 	.word	0x40020000

0800a4e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7ff f8db 	bl	80096b2 <USBH_LL_IncTimer>
}
 800a4fc:	bf00      	nop
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff f913 	bl	800973e <USBH_LL_Connect>
}
 800a518:	bf00      	nop
 800a51a:	3708      	adds	r7, #8
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a52e:	4618      	mov	r0, r3
 800a530:	f7ff f91c 	bl	800976c <USBH_LL_Disconnect>
}
 800a534:	bf00      	nop
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	460b      	mov	r3, r1
 800a546:	70fb      	strb	r3, [r7, #3]
 800a548:	4613      	mov	r3, r2
 800a54a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a54c:	bf00      	nop
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a566:	4618      	mov	r0, r3
 800a568:	f7ff f8cd 	bl	8009706 <USBH_LL_PortEnabled>
}
 800a56c:	bf00      	nop
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a582:	4618      	mov	r0, r3
 800a584:	f7ff f8cd 	bl	8009722 <USBH_LL_PortDisabled>
}
 800a588:	bf00      	nop
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d12a      	bne.n	800a5f8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a5a2:	4a18      	ldr	r2, [pc, #96]	; (800a604 <USBH_LL_Init+0x74>)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4a15      	ldr	r2, [pc, #84]	; (800a604 <USBH_LL_Init+0x74>)
 800a5ae:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a5b2:	4b14      	ldr	r3, [pc, #80]	; (800a604 <USBH_LL_Init+0x74>)
 800a5b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a5b8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a5ba:	4b12      	ldr	r3, [pc, #72]	; (800a604 <USBH_LL_Init+0x74>)
 800a5bc:	2208      	movs	r2, #8
 800a5be:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a5c0:	4b10      	ldr	r3, [pc, #64]	; (800a604 <USBH_LL_Init+0x74>)
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a5c6:	4b0f      	ldr	r3, [pc, #60]	; (800a604 <USBH_LL_Init+0x74>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a5cc:	4b0d      	ldr	r3, [pc, #52]	; (800a604 <USBH_LL_Init+0x74>)
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a5d2:	4b0c      	ldr	r3, [pc, #48]	; (800a604 <USBH_LL_Init+0x74>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a5d8:	480a      	ldr	r0, [pc, #40]	; (800a604 <USBH_LL_Init+0x74>)
 800a5da:	f7f8 fb98 	bl	8002d0e <HAL_HCD_Init>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d001      	beq.n	800a5e8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a5e4:	f7f7 fcb4 	bl	8001f50 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a5e8:	4806      	ldr	r0, [pc, #24]	; (800a604 <USBH_LL_Init+0x74>)
 800a5ea:	f7f8 ff75 	bl	80034d8 <HAL_HCD_GetCurrentFrame>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7ff f84e 	bl	8009694 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3708      	adds	r7, #8
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	2000070c 	.word	0x2000070c

0800a608 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a610:	2300      	movs	r3, #0
 800a612:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a61e:	4618      	mov	r0, r3
 800a620:	f7f8 fee4 	bl	80033ec <HAL_HCD_Start>
 800a624:	4603      	mov	r3, r0
 800a626:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a628:	7bfb      	ldrb	r3, [r7, #15]
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 f95c 	bl	800a8e8 <USBH_Get_USB_Status>
 800a630:	4603      	mov	r3, r0
 800a632:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a634:	7bbb      	ldrb	r3, [r7, #14]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b084      	sub	sp, #16
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a646:	2300      	movs	r3, #0
 800a648:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a654:	4618      	mov	r0, r3
 800a656:	f7f8 feec 	bl	8003432 <HAL_HCD_Stop>
 800a65a:	4603      	mov	r3, r0
 800a65c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
 800a660:	4618      	mov	r0, r3
 800a662:	f000 f941 	bl	800a8e8 <USBH_Get_USB_Status>
 800a666:	4603      	mov	r3, r0
 800a668:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a67c:	2301      	movs	r3, #1
 800a67e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a686:	4618      	mov	r0, r3
 800a688:	f7f8 ff34 	bl	80034f4 <HAL_HCD_GetCurrentSpeed>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d00c      	beq.n	800a6ac <USBH_LL_GetSpeed+0x38>
 800a692:	2b02      	cmp	r3, #2
 800a694:	d80d      	bhi.n	800a6b2 <USBH_LL_GetSpeed+0x3e>
 800a696:	2b00      	cmp	r3, #0
 800a698:	d002      	beq.n	800a6a0 <USBH_LL_GetSpeed+0x2c>
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d003      	beq.n	800a6a6 <USBH_LL_GetSpeed+0x32>
 800a69e:	e008      	b.n	800a6b2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a6a4:	e008      	b.n	800a6b8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a6aa:	e005      	b.n	800a6b8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a6b0:	e002      	b.n	800a6b8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a6b6:	bf00      	nop
  }
  return  speed;
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7f8 fec7 	bl	800346c <HAL_HCD_ResetPort>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a6e2:	7bfb      	ldrb	r3, [r7, #15]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 f8ff 	bl	800a8e8 <USBH_Get_USB_Status>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	460b      	mov	r3, r1
 800a702:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a70a:	78fa      	ldrb	r2, [r7, #3]
 800a70c:	4611      	mov	r1, r2
 800a70e:	4618      	mov	r0, r3
 800a710:	f7f8 fece 	bl	80034b0 <HAL_HCD_HC_GetXferCount>
 800a714:	4603      	mov	r3, r0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a71e:	b590      	push	{r4, r7, lr}
 800a720:	b089      	sub	sp, #36	; 0x24
 800a722:	af04      	add	r7, sp, #16
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	4608      	mov	r0, r1
 800a728:	4611      	mov	r1, r2
 800a72a:	461a      	mov	r2, r3
 800a72c:	4603      	mov	r3, r0
 800a72e:	70fb      	strb	r3, [r7, #3]
 800a730:	460b      	mov	r3, r1
 800a732:	70bb      	strb	r3, [r7, #2]
 800a734:	4613      	mov	r3, r2
 800a736:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a738:	2300      	movs	r3, #0
 800a73a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a746:	787c      	ldrb	r4, [r7, #1]
 800a748:	78ba      	ldrb	r2, [r7, #2]
 800a74a:	78f9      	ldrb	r1, [r7, #3]
 800a74c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a74e:	9302      	str	r3, [sp, #8]
 800a750:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a754:	9301      	str	r3, [sp, #4]
 800a756:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	4623      	mov	r3, r4
 800a75e:	f7f8 fb38 	bl	8002dd2 <HAL_HCD_HC_Init>
 800a762:	4603      	mov	r3, r0
 800a764:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a766:	7bfb      	ldrb	r3, [r7, #15]
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 f8bd 	bl	800a8e8 <USBH_Get_USB_Status>
 800a76e:	4603      	mov	r3, r0
 800a770:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a772:	7bbb      	ldrb	r3, [r7, #14]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3714      	adds	r7, #20
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd90      	pop	{r4, r7, pc}

0800a77c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	460b      	mov	r3, r1
 800a786:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a796:	78fa      	ldrb	r2, [r7, #3]
 800a798:	4611      	mov	r1, r2
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7f8 fba8 	bl	8002ef0 <HAL_HCD_HC_Halt>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 f89e 	bl	800a8e8 <USBH_Get_USB_Status>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a7ba:	b590      	push	{r4, r7, lr}
 800a7bc:	b089      	sub	sp, #36	; 0x24
 800a7be:	af04      	add	r7, sp, #16
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	4608      	mov	r0, r1
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	70fb      	strb	r3, [r7, #3]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	70bb      	strb	r3, [r7, #2]
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a7e2:	787c      	ldrb	r4, [r7, #1]
 800a7e4:	78ba      	ldrb	r2, [r7, #2]
 800a7e6:	78f9      	ldrb	r1, [r7, #3]
 800a7e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a7ec:	9303      	str	r3, [sp, #12]
 800a7ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a7f0:	9302      	str	r3, [sp, #8]
 800a7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f4:	9301      	str	r3, [sp, #4]
 800a7f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a7fa:	9300      	str	r3, [sp, #0]
 800a7fc:	4623      	mov	r3, r4
 800a7fe:	f7f8 fb9b 	bl	8002f38 <HAL_HCD_HC_SubmitRequest>
 800a802:	4603      	mov	r3, r0
 800a804:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a806:	7bfb      	ldrb	r3, [r7, #15]
 800a808:	4618      	mov	r0, r3
 800a80a:	f000 f86d 	bl	800a8e8 <USBH_Get_USB_Status>
 800a80e:	4603      	mov	r3, r0
 800a810:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a812:	7bbb      	ldrb	r3, [r7, #14]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd90      	pop	{r4, r7, pc}

0800a81c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	460b      	mov	r3, r1
 800a826:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a82e:	78fa      	ldrb	r2, [r7, #3]
 800a830:	4611      	mov	r1, r2
 800a832:	4618      	mov	r0, r3
 800a834:	f7f8 fe28 	bl	8003488 <HAL_HCD_HC_GetURBState>
 800a838:	4603      	mov	r3, r0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b082      	sub	sp, #8
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	460b      	mov	r3, r1
 800a84c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a854:	2b01      	cmp	r3, #1
 800a856:	d103      	bne.n	800a860 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a858:	78fb      	ldrb	r3, [r7, #3]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 f870 	bl	800a940 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a860:	20c8      	movs	r0, #200	; 0xc8
 800a862:	f7f7 ff37 	bl	80026d4 <HAL_Delay>
  return USBH_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	460b      	mov	r3, r1
 800a87a:	70fb      	strb	r3, [r7, #3]
 800a87c:	4613      	mov	r3, r2
 800a87e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a886:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a888:	78fb      	ldrb	r3, [r7, #3]
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	212c      	movs	r1, #44	; 0x2c
 800a88e:	fb01 f303 	mul.w	r3, r1, r3
 800a892:	4413      	add	r3, r2
 800a894:	333b      	adds	r3, #59	; 0x3b
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d009      	beq.n	800a8b0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a89c:	78fb      	ldrb	r3, [r7, #3]
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	212c      	movs	r1, #44	; 0x2c
 800a8a2:	fb01 f303 	mul.w	r3, r1, r3
 800a8a6:	4413      	add	r3, r2
 800a8a8:	3354      	adds	r3, #84	; 0x54
 800a8aa:	78ba      	ldrb	r2, [r7, #2]
 800a8ac:	701a      	strb	r2, [r3, #0]
 800a8ae:	e008      	b.n	800a8c2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a8b0:	78fb      	ldrb	r3, [r7, #3]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	212c      	movs	r1, #44	; 0x2c
 800a8b6:	fb01 f303 	mul.w	r3, r1, r3
 800a8ba:	4413      	add	r3, r2
 800a8bc:	3355      	adds	r3, #85	; 0x55
 800a8be:	78ba      	ldrb	r2, [r7, #2]
 800a8c0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f7f7 fefb 	bl	80026d4 <HAL_Delay>
}
 800a8de:	bf00      	nop
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
	...

0800a8e8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a8f6:	79fb      	ldrb	r3, [r7, #7]
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	d817      	bhi.n	800a92c <USBH_Get_USB_Status+0x44>
 800a8fc:	a201      	add	r2, pc, #4	; (adr r2, 800a904 <USBH_Get_USB_Status+0x1c>)
 800a8fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a902:	bf00      	nop
 800a904:	0800a915 	.word	0x0800a915
 800a908:	0800a91b 	.word	0x0800a91b
 800a90c:	0800a921 	.word	0x0800a921
 800a910:	0800a927 	.word	0x0800a927
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	73fb      	strb	r3, [r7, #15]
    break;
 800a918:	e00b      	b.n	800a932 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a91a:	2302      	movs	r3, #2
 800a91c:	73fb      	strb	r3, [r7, #15]
    break;
 800a91e:	e008      	b.n	800a932 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a920:	2301      	movs	r3, #1
 800a922:	73fb      	strb	r3, [r7, #15]
    break;
 800a924:	e005      	b.n	800a932 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a926:	2302      	movs	r3, #2
 800a928:	73fb      	strb	r3, [r7, #15]
    break;
 800a92a:	e002      	b.n	800a932 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a92c:	2302      	movs	r3, #2
 800a92e:	73fb      	strb	r3, [r7, #15]
    break;
 800a930:	bf00      	nop
  }
  return usb_status;
 800a932:	7bfb      	ldrb	r3, [r7, #15]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3714      	adds	r7, #20
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	4603      	mov	r3, r0
 800a948:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a94a:	79fb      	ldrb	r3, [r7, #7]
 800a94c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a94e:	79fb      	ldrb	r3, [r7, #7]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d102      	bne.n	800a95a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a954:	2301      	movs	r3, #1
 800a956:	73fb      	strb	r3, [r7, #15]
 800a958:	e001      	b.n	800a95e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a95a:	2300      	movs	r3, #0
 800a95c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a95e:	7bfb      	ldrb	r3, [r7, #15]
 800a960:	461a      	mov	r2, r3
 800a962:	2101      	movs	r1, #1
 800a964:	4803      	ldr	r0, [pc, #12]	; (800a974 <MX_DriverVbusFS+0x34>)
 800a966:	f7f8 f99f 	bl	8002ca8 <HAL_GPIO_WritePin>
}
 800a96a:	bf00      	nop
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	40020800 	.word	0x40020800

0800a978 <__errno>:
 800a978:	4b01      	ldr	r3, [pc, #4]	; (800a980 <__errno+0x8>)
 800a97a:	6818      	ldr	r0, [r3, #0]
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	20000038 	.word	0x20000038

0800a984 <__libc_init_array>:
 800a984:	b570      	push	{r4, r5, r6, lr}
 800a986:	4d0d      	ldr	r5, [pc, #52]	; (800a9bc <__libc_init_array+0x38>)
 800a988:	4c0d      	ldr	r4, [pc, #52]	; (800a9c0 <__libc_init_array+0x3c>)
 800a98a:	1b64      	subs	r4, r4, r5
 800a98c:	10a4      	asrs	r4, r4, #2
 800a98e:	2600      	movs	r6, #0
 800a990:	42a6      	cmp	r6, r4
 800a992:	d109      	bne.n	800a9a8 <__libc_init_array+0x24>
 800a994:	4d0b      	ldr	r5, [pc, #44]	; (800a9c4 <__libc_init_array+0x40>)
 800a996:	4c0c      	ldr	r4, [pc, #48]	; (800a9c8 <__libc_init_array+0x44>)
 800a998:	f000 f90c 	bl	800abb4 <_init>
 800a99c:	1b64      	subs	r4, r4, r5
 800a99e:	10a4      	asrs	r4, r4, #2
 800a9a0:	2600      	movs	r6, #0
 800a9a2:	42a6      	cmp	r6, r4
 800a9a4:	d105      	bne.n	800a9b2 <__libc_init_array+0x2e>
 800a9a6:	bd70      	pop	{r4, r5, r6, pc}
 800a9a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ac:	4798      	blx	r3
 800a9ae:	3601      	adds	r6, #1
 800a9b0:	e7ee      	b.n	800a990 <__libc_init_array+0xc>
 800a9b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b6:	4798      	blx	r3
 800a9b8:	3601      	adds	r6, #1
 800a9ba:	e7f2      	b.n	800a9a2 <__libc_init_array+0x1e>
 800a9bc:	0800b060 	.word	0x0800b060
 800a9c0:	0800b060 	.word	0x0800b060
 800a9c4:	0800b060 	.word	0x0800b060
 800a9c8:	0800b064 	.word	0x0800b064

0800a9cc <malloc>:
 800a9cc:	4b02      	ldr	r3, [pc, #8]	; (800a9d8 <malloc+0xc>)
 800a9ce:	4601      	mov	r1, r0
 800a9d0:	6818      	ldr	r0, [r3, #0]
 800a9d2:	f000 b863 	b.w	800aa9c <_malloc_r>
 800a9d6:	bf00      	nop
 800a9d8:	20000038 	.word	0x20000038

0800a9dc <free>:
 800a9dc:	4b02      	ldr	r3, [pc, #8]	; (800a9e8 <free+0xc>)
 800a9de:	4601      	mov	r1, r0
 800a9e0:	6818      	ldr	r0, [r3, #0]
 800a9e2:	f000 b80b 	b.w	800a9fc <_free_r>
 800a9e6:	bf00      	nop
 800a9e8:	20000038 	.word	0x20000038

0800a9ec <memset>:
 800a9ec:	4402      	add	r2, r0
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d100      	bne.n	800a9f6 <memset+0xa>
 800a9f4:	4770      	bx	lr
 800a9f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a9fa:	e7f9      	b.n	800a9f0 <memset+0x4>

0800a9fc <_free_r>:
 800a9fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9fe:	2900      	cmp	r1, #0
 800aa00:	d048      	beq.n	800aa94 <_free_r+0x98>
 800aa02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa06:	9001      	str	r0, [sp, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f1a1 0404 	sub.w	r4, r1, #4
 800aa0e:	bfb8      	it	lt
 800aa10:	18e4      	addlt	r4, r4, r3
 800aa12:	f000 f8c1 	bl	800ab98 <__malloc_lock>
 800aa16:	4a20      	ldr	r2, [pc, #128]	; (800aa98 <_free_r+0x9c>)
 800aa18:	9801      	ldr	r0, [sp, #4]
 800aa1a:	6813      	ldr	r3, [r2, #0]
 800aa1c:	4615      	mov	r5, r2
 800aa1e:	b933      	cbnz	r3, 800aa2e <_free_r+0x32>
 800aa20:	6063      	str	r3, [r4, #4]
 800aa22:	6014      	str	r4, [r2, #0]
 800aa24:	b003      	add	sp, #12
 800aa26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa2a:	f000 b8bb 	b.w	800aba4 <__malloc_unlock>
 800aa2e:	42a3      	cmp	r3, r4
 800aa30:	d90b      	bls.n	800aa4a <_free_r+0x4e>
 800aa32:	6821      	ldr	r1, [r4, #0]
 800aa34:	1862      	adds	r2, r4, r1
 800aa36:	4293      	cmp	r3, r2
 800aa38:	bf04      	itt	eq
 800aa3a:	681a      	ldreq	r2, [r3, #0]
 800aa3c:	685b      	ldreq	r3, [r3, #4]
 800aa3e:	6063      	str	r3, [r4, #4]
 800aa40:	bf04      	itt	eq
 800aa42:	1852      	addeq	r2, r2, r1
 800aa44:	6022      	streq	r2, [r4, #0]
 800aa46:	602c      	str	r4, [r5, #0]
 800aa48:	e7ec      	b.n	800aa24 <_free_r+0x28>
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	b10b      	cbz	r3, 800aa54 <_free_r+0x58>
 800aa50:	42a3      	cmp	r3, r4
 800aa52:	d9fa      	bls.n	800aa4a <_free_r+0x4e>
 800aa54:	6811      	ldr	r1, [r2, #0]
 800aa56:	1855      	adds	r5, r2, r1
 800aa58:	42a5      	cmp	r5, r4
 800aa5a:	d10b      	bne.n	800aa74 <_free_r+0x78>
 800aa5c:	6824      	ldr	r4, [r4, #0]
 800aa5e:	4421      	add	r1, r4
 800aa60:	1854      	adds	r4, r2, r1
 800aa62:	42a3      	cmp	r3, r4
 800aa64:	6011      	str	r1, [r2, #0]
 800aa66:	d1dd      	bne.n	800aa24 <_free_r+0x28>
 800aa68:	681c      	ldr	r4, [r3, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	6053      	str	r3, [r2, #4]
 800aa6e:	4421      	add	r1, r4
 800aa70:	6011      	str	r1, [r2, #0]
 800aa72:	e7d7      	b.n	800aa24 <_free_r+0x28>
 800aa74:	d902      	bls.n	800aa7c <_free_r+0x80>
 800aa76:	230c      	movs	r3, #12
 800aa78:	6003      	str	r3, [r0, #0]
 800aa7a:	e7d3      	b.n	800aa24 <_free_r+0x28>
 800aa7c:	6825      	ldr	r5, [r4, #0]
 800aa7e:	1961      	adds	r1, r4, r5
 800aa80:	428b      	cmp	r3, r1
 800aa82:	bf04      	itt	eq
 800aa84:	6819      	ldreq	r1, [r3, #0]
 800aa86:	685b      	ldreq	r3, [r3, #4]
 800aa88:	6063      	str	r3, [r4, #4]
 800aa8a:	bf04      	itt	eq
 800aa8c:	1949      	addeq	r1, r1, r5
 800aa8e:	6021      	streq	r1, [r4, #0]
 800aa90:	6054      	str	r4, [r2, #4]
 800aa92:	e7c7      	b.n	800aa24 <_free_r+0x28>
 800aa94:	b003      	add	sp, #12
 800aa96:	bd30      	pop	{r4, r5, pc}
 800aa98:	200000cc 	.word	0x200000cc

0800aa9c <_malloc_r>:
 800aa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa9e:	1ccd      	adds	r5, r1, #3
 800aaa0:	f025 0503 	bic.w	r5, r5, #3
 800aaa4:	3508      	adds	r5, #8
 800aaa6:	2d0c      	cmp	r5, #12
 800aaa8:	bf38      	it	cc
 800aaaa:	250c      	movcc	r5, #12
 800aaac:	2d00      	cmp	r5, #0
 800aaae:	4606      	mov	r6, r0
 800aab0:	db01      	blt.n	800aab6 <_malloc_r+0x1a>
 800aab2:	42a9      	cmp	r1, r5
 800aab4:	d903      	bls.n	800aabe <_malloc_r+0x22>
 800aab6:	230c      	movs	r3, #12
 800aab8:	6033      	str	r3, [r6, #0]
 800aaba:	2000      	movs	r0, #0
 800aabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aabe:	f000 f86b 	bl	800ab98 <__malloc_lock>
 800aac2:	4921      	ldr	r1, [pc, #132]	; (800ab48 <_malloc_r+0xac>)
 800aac4:	680a      	ldr	r2, [r1, #0]
 800aac6:	4614      	mov	r4, r2
 800aac8:	b99c      	cbnz	r4, 800aaf2 <_malloc_r+0x56>
 800aaca:	4f20      	ldr	r7, [pc, #128]	; (800ab4c <_malloc_r+0xb0>)
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	b923      	cbnz	r3, 800aada <_malloc_r+0x3e>
 800aad0:	4621      	mov	r1, r4
 800aad2:	4630      	mov	r0, r6
 800aad4:	f000 f83c 	bl	800ab50 <_sbrk_r>
 800aad8:	6038      	str	r0, [r7, #0]
 800aada:	4629      	mov	r1, r5
 800aadc:	4630      	mov	r0, r6
 800aade:	f000 f837 	bl	800ab50 <_sbrk_r>
 800aae2:	1c43      	adds	r3, r0, #1
 800aae4:	d123      	bne.n	800ab2e <_malloc_r+0x92>
 800aae6:	230c      	movs	r3, #12
 800aae8:	6033      	str	r3, [r6, #0]
 800aaea:	4630      	mov	r0, r6
 800aaec:	f000 f85a 	bl	800aba4 <__malloc_unlock>
 800aaf0:	e7e3      	b.n	800aaba <_malloc_r+0x1e>
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	1b5b      	subs	r3, r3, r5
 800aaf6:	d417      	bmi.n	800ab28 <_malloc_r+0x8c>
 800aaf8:	2b0b      	cmp	r3, #11
 800aafa:	d903      	bls.n	800ab04 <_malloc_r+0x68>
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	441c      	add	r4, r3
 800ab00:	6025      	str	r5, [r4, #0]
 800ab02:	e004      	b.n	800ab0e <_malloc_r+0x72>
 800ab04:	6863      	ldr	r3, [r4, #4]
 800ab06:	42a2      	cmp	r2, r4
 800ab08:	bf0c      	ite	eq
 800ab0a:	600b      	streq	r3, [r1, #0]
 800ab0c:	6053      	strne	r3, [r2, #4]
 800ab0e:	4630      	mov	r0, r6
 800ab10:	f000 f848 	bl	800aba4 <__malloc_unlock>
 800ab14:	f104 000b 	add.w	r0, r4, #11
 800ab18:	1d23      	adds	r3, r4, #4
 800ab1a:	f020 0007 	bic.w	r0, r0, #7
 800ab1e:	1ac2      	subs	r2, r0, r3
 800ab20:	d0cc      	beq.n	800aabc <_malloc_r+0x20>
 800ab22:	1a1b      	subs	r3, r3, r0
 800ab24:	50a3      	str	r3, [r4, r2]
 800ab26:	e7c9      	b.n	800aabc <_malloc_r+0x20>
 800ab28:	4622      	mov	r2, r4
 800ab2a:	6864      	ldr	r4, [r4, #4]
 800ab2c:	e7cc      	b.n	800aac8 <_malloc_r+0x2c>
 800ab2e:	1cc4      	adds	r4, r0, #3
 800ab30:	f024 0403 	bic.w	r4, r4, #3
 800ab34:	42a0      	cmp	r0, r4
 800ab36:	d0e3      	beq.n	800ab00 <_malloc_r+0x64>
 800ab38:	1a21      	subs	r1, r4, r0
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	f000 f808 	bl	800ab50 <_sbrk_r>
 800ab40:	3001      	adds	r0, #1
 800ab42:	d1dd      	bne.n	800ab00 <_malloc_r+0x64>
 800ab44:	e7cf      	b.n	800aae6 <_malloc_r+0x4a>
 800ab46:	bf00      	nop
 800ab48:	200000cc 	.word	0x200000cc
 800ab4c:	200000d0 	.word	0x200000d0

0800ab50 <_sbrk_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4d06      	ldr	r5, [pc, #24]	; (800ab6c <_sbrk_r+0x1c>)
 800ab54:	2300      	movs	r3, #0
 800ab56:	4604      	mov	r4, r0
 800ab58:	4608      	mov	r0, r1
 800ab5a:	602b      	str	r3, [r5, #0]
 800ab5c:	f7f7 fcd6 	bl	800250c <_sbrk>
 800ab60:	1c43      	adds	r3, r0, #1
 800ab62:	d102      	bne.n	800ab6a <_sbrk_r+0x1a>
 800ab64:	682b      	ldr	r3, [r5, #0]
 800ab66:	b103      	cbz	r3, 800ab6a <_sbrk_r+0x1a>
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	bd38      	pop	{r3, r4, r5, pc}
 800ab6c:	20000a10 	.word	0x20000a10

0800ab70 <strncat>:
 800ab70:	b530      	push	{r4, r5, lr}
 800ab72:	4604      	mov	r4, r0
 800ab74:	7825      	ldrb	r5, [r4, #0]
 800ab76:	4623      	mov	r3, r4
 800ab78:	3401      	adds	r4, #1
 800ab7a:	2d00      	cmp	r5, #0
 800ab7c:	d1fa      	bne.n	800ab74 <strncat+0x4>
 800ab7e:	3a01      	subs	r2, #1
 800ab80:	d304      	bcc.n	800ab8c <strncat+0x1c>
 800ab82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab86:	f803 4b01 	strb.w	r4, [r3], #1
 800ab8a:	b904      	cbnz	r4, 800ab8e <strncat+0x1e>
 800ab8c:	bd30      	pop	{r4, r5, pc}
 800ab8e:	2a00      	cmp	r2, #0
 800ab90:	d1f5      	bne.n	800ab7e <strncat+0xe>
 800ab92:	701a      	strb	r2, [r3, #0]
 800ab94:	e7f3      	b.n	800ab7e <strncat+0xe>
	...

0800ab98 <__malloc_lock>:
 800ab98:	4801      	ldr	r0, [pc, #4]	; (800aba0 <__malloc_lock+0x8>)
 800ab9a:	f000 b809 	b.w	800abb0 <__retarget_lock_acquire_recursive>
 800ab9e:	bf00      	nop
 800aba0:	20000a18 	.word	0x20000a18

0800aba4 <__malloc_unlock>:
 800aba4:	4801      	ldr	r0, [pc, #4]	; (800abac <__malloc_unlock+0x8>)
 800aba6:	f000 b804 	b.w	800abb2 <__retarget_lock_release_recursive>
 800abaa:	bf00      	nop
 800abac:	20000a18 	.word	0x20000a18

0800abb0 <__retarget_lock_acquire_recursive>:
 800abb0:	4770      	bx	lr

0800abb2 <__retarget_lock_release_recursive>:
 800abb2:	4770      	bx	lr

0800abb4 <_init>:
 800abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb6:	bf00      	nop
 800abb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abba:	bc08      	pop	{r3}
 800abbc:	469e      	mov	lr, r3
 800abbe:	4770      	bx	lr

0800abc0 <_fini>:
 800abc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc2:	bf00      	nop
 800abc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abc6:	bc08      	pop	{r3}
 800abc8:	469e      	mov	lr, r3
 800abca:	4770      	bx	lr
