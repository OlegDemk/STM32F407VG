
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fa4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  0800a12c  0800a12c  0001a12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a380  0800a380  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800a380  0800a380  0001a380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a388  0800a388  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a388  0800a388  0001a388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a38c  0800a38c  0001a38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e0  20000098  0800a428  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000978  0800a428  00020978  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020079  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000480d  00000000  00000000  00040141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  00044950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c8  00000000  00000000  00045f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002501e  00000000  00000000  000472c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e61b  00000000  00000000  0006c2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d249e  00000000  00000000  0008a901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015cd9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bb0  00000000  00000000  0015cdf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a114 	.word	0x0800a114

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	0800a114 	.word	0x0800a114

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b08b      	sub	sp, #44	; 0x2c
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4604      	mov	r4, r0
 80004c8:	4608      	mov	r0, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	461a      	mov	r2, r3
 80004ce:	4623      	mov	r3, r4
 80004d0:	80fb      	strh	r3, [r7, #6]
 80004d2:	4603      	mov	r3, r0
 80004d4:	80bb      	strh	r3, [r7, #4]
 80004d6:	460b      	mov	r3, r1
 80004d8:	807b      	strh	r3, [r7, #2]
 80004da:	4613      	mov	r3, r2
 80004dc:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80004de:	887b      	ldrh	r3, [r7, #2]
 80004e0:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80004e6:	887b      	ldrh	r3, [r7, #2]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	f1c3 0301 	rsb	r3, r3, #1
 80004ee:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80004f8:	e061      	b.n	80005be <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80004fa:	88fa      	ldrh	r2, [r7, #6]
 80004fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	613b      	str	r3, [r7, #16]
 8000502:	e018      	b.n	8000536 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	b298      	uxth	r0, r3
 8000508:	6a3b      	ldr	r3, [r7, #32]
 800050a:	b29a      	uxth	r2, r3
 800050c:	88bb      	ldrh	r3, [r7, #4]
 800050e:	4413      	add	r3, r2
 8000510:	b29b      	uxth	r3, r3
 8000512:	883a      	ldrh	r2, [r7, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	f000 fc0b 	bl	8000d30 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	b298      	uxth	r0, r3
 800051e:	6a3b      	ldr	r3, [r7, #32]
 8000520:	b29b      	uxth	r3, r3
 8000522:	88ba      	ldrh	r2, [r7, #4]
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	b29b      	uxth	r3, r3
 8000528:	883a      	ldrh	r2, [r7, #0]
 800052a:	4619      	mov	r1, r3
 800052c:	f000 fc00 	bl	8000d30 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	3301      	adds	r3, #1
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	88fa      	ldrh	r2, [r7, #6]
 8000538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053a:	4413      	add	r3, r2
 800053c:	693a      	ldr	r2, [r7, #16]
 800053e:	429a      	cmp	r2, r3
 8000540:	dde0      	ble.n	8000504 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8000542:	88fa      	ldrh	r2, [r7, #6]
 8000544:	6a3b      	ldr	r3, [r7, #32]
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e018      	b.n	800057e <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	b298      	uxth	r0, r3
 8000550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000552:	b29a      	uxth	r2, r3
 8000554:	88bb      	ldrh	r3, [r7, #4]
 8000556:	4413      	add	r3, r2
 8000558:	b29b      	uxth	r3, r3
 800055a:	883a      	ldrh	r2, [r7, #0]
 800055c:	4619      	mov	r1, r3
 800055e:	f000 fbe7 	bl	8000d30 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	b298      	uxth	r0, r3
 8000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000568:	b29b      	uxth	r3, r3
 800056a:	88ba      	ldrh	r2, [r7, #4]
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	b29b      	uxth	r3, r3
 8000570:	883a      	ldrh	r2, [r7, #0]
 8000572:	4619      	mov	r1, r3
 8000574:	f000 fbdc 	bl	8000d30 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3301      	adds	r3, #1
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	88fa      	ldrh	r2, [r7, #6]
 8000580:	6a3b      	ldr	r3, [r7, #32]
 8000582:	4413      	add	r3, r2
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	429a      	cmp	r2, r3
 8000588:	dde0      	ble.n	800054c <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800058a:	6a3b      	ldr	r3, [r7, #32]
 800058c:	3301      	adds	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8000590:	697a      	ldr	r2, [r7, #20]
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	4413      	add	r3, r2
 8000596:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	3302      	adds	r3, #2
 800059c:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	005a      	lsls	r2, r3, #1
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	4413      	add	r3, r2
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	dd09      	ble.n	80005be <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80005aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ac:	3b01      	subs	r3, #1
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	4413      	add	r3, r2
 80005b6:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	3302      	adds	r3, #2
 80005bc:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80005be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005c0:	6a3b      	ldr	r3, [r7, #32]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	da99      	bge.n	80004fa <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80005c6:	bf00      	nop
 80005c8:	bf00      	nop
 80005ca:	372c      	adds	r7, #44	; 0x2c
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd90      	pop	{r4, r7, pc}

080005d0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	4604      	mov	r4, r0
 80005d8:	4608      	mov	r0, r1
 80005da:	4611      	mov	r1, r2
 80005dc:	461a      	mov	r2, r3
 80005de:	4623      	mov	r3, r4
 80005e0:	71fb      	strb	r3, [r7, #7]
 80005e2:	4603      	mov	r3, r0
 80005e4:	80bb      	strh	r3, [r7, #4]
 80005e6:	460b      	mov	r3, r1
 80005e8:	71bb      	strb	r3, [r7, #6]
 80005ea:	4613      	mov	r3, r2
 80005ec:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	2b1f      	cmp	r3, #31
 80005f6:	d902      	bls.n	80005fe <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	3b20      	subs	r3, #32
 80005fc:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80005fe:	2300      	movs	r3, #0
 8000600:	753b      	strb	r3, [r7, #20]
 8000602:	e012      	b.n	800062a <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 8000604:	7dfa      	ldrb	r2, [r7, #23]
 8000606:	7d38      	ldrb	r0, [r7, #20]
 8000608:	7d39      	ldrb	r1, [r7, #20]
 800060a:	4c3b      	ldr	r4, [pc, #236]	; (80006f8 <ILI9341_Draw_Char+0x128>)
 800060c:	4613      	mov	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	4413      	add	r3, r2
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	4423      	add	r3, r4
 8000616:	4403      	add	r3, r0
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	440b      	add	r3, r1
 8000620:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000624:	7d3b      	ldrb	r3, [r7, #20]
 8000626:	3301      	adds	r3, #1
 8000628:	753b      	strb	r3, [r7, #20]
 800062a:	7d3b      	ldrb	r3, [r7, #20]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d9e9      	bls.n	8000604 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	b299      	uxth	r1, r3
 8000634:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000636:	461a      	mov	r2, r3
 8000638:	0052      	lsls	r2, r2, #1
 800063a:	4413      	add	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	b29a      	uxth	r2, r3
 8000640:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	b29c      	uxth	r4, r3
 8000646:	88b8      	ldrh	r0, [r7, #4]
 8000648:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	4623      	mov	r3, r4
 800064e:	f000 fc37 	bl	8000ec0 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000652:	2300      	movs	r3, #0
 8000654:	757b      	strb	r3, [r7, #21]
 8000656:	e046      	b.n	80006e6 <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000658:	2300      	movs	r3, #0
 800065a:	75bb      	strb	r3, [r7, #22]
 800065c:	e03d      	b.n	80006da <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 800065e:	7d7b      	ldrb	r3, [r7, #21]
 8000660:	f107 0218 	add.w	r2, r7, #24
 8000664:	4413      	add	r3, r2
 8000666:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800066a:	461a      	mov	r2, r3
 800066c:	7dbb      	ldrb	r3, [r7, #22]
 800066e:	fa42 f303 	asr.w	r3, r2, r3
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	2b00      	cmp	r3, #0
 8000678:	d02c      	beq.n	80006d4 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 800067a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800067c:	2b01      	cmp	r3, #1
 800067e:	d10f      	bne.n	80006a0 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000680:	7d7b      	ldrb	r3, [r7, #21]
 8000682:	b29a      	uxth	r2, r3
 8000684:	88bb      	ldrh	r3, [r7, #4]
 8000686:	4413      	add	r3, r2
 8000688:	b298      	uxth	r0, r3
 800068a:	79bb      	ldrb	r3, [r7, #6]
 800068c:	b29a      	uxth	r2, r3
 800068e:	7dbb      	ldrb	r3, [r7, #22]
 8000690:	b29b      	uxth	r3, r3
 8000692:	4413      	add	r3, r2
 8000694:	b29b      	uxth	r3, r3
 8000696:	887a      	ldrh	r2, [r7, #2]
 8000698:	4619      	mov	r1, r3
 800069a:	f000 fb49 	bl	8000d30 <ILI9341_Draw_Pixel>
 800069e:	e019      	b.n	80006d4 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80006a0:	7d7b      	ldrb	r3, [r7, #21]
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80006a6:	fb12 f303 	smulbb	r3, r2, r3
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	88bb      	ldrh	r3, [r7, #4]
 80006ae:	4413      	add	r3, r2
 80006b0:	b298      	uxth	r0, r3
 80006b2:	79bb      	ldrb	r3, [r7, #6]
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	7dbb      	ldrb	r3, [r7, #22]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80006bc:	fb11 f303 	smulbb	r3, r1, r3
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	4413      	add	r3, r2
 80006c4:	b299      	uxth	r1, r3
 80006c6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80006c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80006ca:	887b      	ldrh	r3, [r7, #2]
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	4623      	mov	r3, r4
 80006d0:	f000 fbf6 	bl	8000ec0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80006d4:	7dbb      	ldrb	r3, [r7, #22]
 80006d6:	3301      	adds	r3, #1
 80006d8:	75bb      	strb	r3, [r7, #22]
 80006da:	7dbb      	ldrb	r3, [r7, #22]
 80006dc:	2b07      	cmp	r3, #7
 80006de:	d9be      	bls.n	800065e <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 80006e0:	7d7b      	ldrb	r3, [r7, #21]
 80006e2:	3301      	adds	r3, #1
 80006e4:	757b      	strb	r3, [r7, #21]
 80006e6:	7d7b      	ldrb	r3, [r7, #21]
 80006e8:	2b05      	cmp	r3, #5
 80006ea:	d9b5      	bls.n	8000658 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	371c      	adds	r7, #28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd90      	pop	{r4, r7, pc}
 80006f6:	bf00      	nop
 80006f8:	0800a130 	.word	0x0800a130

080006fc <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b087      	sub	sp, #28
 8000700:	af02      	add	r7, sp, #8
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	4608      	mov	r0, r1
 8000706:	4611      	mov	r1, r2
 8000708:	461a      	mov	r2, r3
 800070a:	4603      	mov	r3, r0
 800070c:	817b      	strh	r3, [r7, #10]
 800070e:	460b      	mov	r3, r1
 8000710:	727b      	strb	r3, [r7, #9]
 8000712:	4613      	mov	r3, r2
 8000714:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8000716:	e016      	b.n	8000746 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	60fa      	str	r2, [r7, #12]
 800071e:	7818      	ldrb	r0, [r3, #0]
 8000720:	88fc      	ldrh	r4, [r7, #6]
 8000722:	7a7a      	ldrb	r2, [r7, #9]
 8000724:	8979      	ldrh	r1, [r7, #10]
 8000726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000728:	9301      	str	r3, [sp, #4]
 800072a:	8c3b      	ldrh	r3, [r7, #32]
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	4623      	mov	r3, r4
 8000730:	f7ff ff4e 	bl	80005d0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000734:	8c3b      	ldrh	r3, [r7, #32]
 8000736:	461a      	mov	r2, r3
 8000738:	0052      	lsls	r2, r2, #1
 800073a:	4413      	add	r3, r2
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	b29a      	uxth	r2, r3
 8000740:	897b      	ldrh	r3, [r7, #10]
 8000742:	4413      	add	r3, r2
 8000744:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1e4      	bne.n	8000718 <ILI9341_Draw_Text+0x1c>
    }
}
 800074e:	bf00      	nop
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	bd90      	pop	{r4, r7, pc}

08000758 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800075c:	2200      	movs	r2, #0
 800075e:	2110      	movs	r1, #16
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <ILI9341_SPI_Init+0x14>)
 8000762:	f002 f83f 	bl	80027e4 <HAL_GPIO_WritePin>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000

08000770 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800077a:	1df9      	adds	r1, r7, #7
 800077c:	2301      	movs	r3, #1
 800077e:	2201      	movs	r2, #1
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <ILI9341_SPI_Send+0x20>)
 8000782:	f005 f8fe 	bl	8005982 <HAL_SPI_Transmit>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000f0 	.word	0x200000f0

08000794 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2110      	movs	r1, #16
 80007a2:	480a      	ldr	r0, [pc, #40]	; (80007cc <ILI9341_Write_Command+0x38>)
 80007a4:	f002 f81e 	bl	80027e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80007a8:	2200      	movs	r2, #0
 80007aa:	2140      	movs	r1, #64	; 0x40
 80007ac:	4807      	ldr	r0, [pc, #28]	; (80007cc <ILI9341_Write_Command+0x38>)
 80007ae:	f002 f819 	bl	80027e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ffdb 	bl	8000770 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80007ba:	2201      	movs	r2, #1
 80007bc:	2110      	movs	r1, #16
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <ILI9341_Write_Command+0x38>)
 80007c0:	f002 f810 	bl	80027e4 <HAL_GPIO_WritePin>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000

080007d0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80007da:	2201      	movs	r2, #1
 80007dc:	2140      	movs	r1, #64	; 0x40
 80007de:	480a      	ldr	r0, [pc, #40]	; (8000808 <ILI9341_Write_Data+0x38>)
 80007e0:	f002 f800 	bl	80027e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2110      	movs	r1, #16
 80007e8:	4807      	ldr	r0, [pc, #28]	; (8000808 <ILI9341_Write_Data+0x38>)
 80007ea:	f001 fffb 	bl	80027e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ffbd 	bl	8000770 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2110      	movs	r1, #16
 80007fa:	4803      	ldr	r0, [pc, #12]	; (8000808 <ILI9341_Write_Data+0x38>)
 80007fc:	f001 fff2 	bl	80027e4 <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000

0800080c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4604      	mov	r4, r0
 8000814:	4608      	mov	r0, r1
 8000816:	4611      	mov	r1, r2
 8000818:	461a      	mov	r2, r3
 800081a:	4623      	mov	r3, r4
 800081c:	80fb      	strh	r3, [r7, #6]
 800081e:	4603      	mov	r3, r0
 8000820:	80bb      	strh	r3, [r7, #4]
 8000822:	460b      	mov	r3, r1
 8000824:	807b      	strh	r3, [r7, #2]
 8000826:	4613      	mov	r3, r2
 8000828:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800082a:	202a      	movs	r0, #42	; 0x2a
 800082c:	f7ff ffb2 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	0a1b      	lsrs	r3, r3, #8
 8000834:	b29b      	uxth	r3, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ffc9 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ffc4 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	0a1b      	lsrs	r3, r3, #8
 800084c:	b29b      	uxth	r3, r3
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ffbd 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000856:	887b      	ldrh	r3, [r7, #2]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ffb8 	bl	80007d0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000860:	202b      	movs	r0, #43	; 0x2b
 8000862:	f7ff ff97 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000866:	88bb      	ldrh	r3, [r7, #4]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	b29b      	uxth	r3, r3
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ffae 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000874:	88bb      	ldrh	r3, [r7, #4]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ffa9 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800087e:	883b      	ldrh	r3, [r7, #0]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	b29b      	uxth	r3, r3
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ffa2 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800088c:	883b      	ldrh	r3, [r7, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff9d 	bl	80007d0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000896:	202c      	movs	r0, #44	; 0x2c
 8000898:	f7ff ff7c 	bl	8000794 <ILI9341_Write_Command>
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd90      	pop	{r4, r7, pc}

080008a4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2120      	movs	r1, #32
 80008ac:	480a      	ldr	r0, [pc, #40]	; (80008d8 <ILI9341_Reset+0x34>)
 80008ae:	f001 ff99 	bl	80027e4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80008b2:	20c8      	movs	r0, #200	; 0xc8
 80008b4:	f001 fcac 	bl	8002210 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2110      	movs	r1, #16
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <ILI9341_Reset+0x34>)
 80008be:	f001 ff91 	bl	80027e4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80008c2:	20c8      	movs	r0, #200	; 0xc8
 80008c4:	f001 fca4 	bl	8002210 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80008c8:	2201      	movs	r2, #1
 80008ca:	2120      	movs	r1, #32
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <ILI9341_Reset+0x34>)
 80008ce:	f001 ff89 	bl	80027e4 <HAL_GPIO_WritePin>
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80008ea:	2036      	movs	r0, #54	; 0x36
 80008ec:	f7ff ff52 	bl	8000794 <ILI9341_Write_Command>
HAL_Delay(1);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f001 fc8d 	bl	8002210 <HAL_Delay>
	
switch(screen_rotation) 
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d837      	bhi.n	800096c <ILI9341_Set_Rotation+0x90>
 80008fc:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <ILI9341_Set_Rotation+0x28>)
 80008fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000902:	bf00      	nop
 8000904:	08000915 	.word	0x08000915
 8000908:	0800092b 	.word	0x0800092b
 800090c:	08000941 	.word	0x08000941
 8000910:	08000957 	.word	0x08000957
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000914:	2048      	movs	r0, #72	; 0x48
 8000916:	f7ff ff5b 	bl	80007d0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <ILI9341_Set_Rotation+0x9c>)
 800091c:	22f0      	movs	r2, #240	; 0xf0
 800091e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <ILI9341_Set_Rotation+0xa0>)
 8000922:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000926:	801a      	strh	r2, [r3, #0]
			break;
 8000928:	e021      	b.n	800096e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800092a:	2028      	movs	r0, #40	; 0x28
 800092c:	f7ff ff50 	bl	80007d0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <ILI9341_Set_Rotation+0x9c>)
 8000932:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000936:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <ILI9341_Set_Rotation+0xa0>)
 800093a:	22f0      	movs	r2, #240	; 0xf0
 800093c:	801a      	strh	r2, [r3, #0]
			break;
 800093e:	e016      	b.n	800096e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000940:	2088      	movs	r0, #136	; 0x88
 8000942:	f7ff ff45 	bl	80007d0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <ILI9341_Set_Rotation+0x9c>)
 8000948:	22f0      	movs	r2, #240	; 0xf0
 800094a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <ILI9341_Set_Rotation+0xa0>)
 800094e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000952:	801a      	strh	r2, [r3, #0]
			break;
 8000954:	e00b      	b.n	800096e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000956:	20e8      	movs	r0, #232	; 0xe8
 8000958:	f7ff ff3a 	bl	80007d0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <ILI9341_Set_Rotation+0x9c>)
 800095e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000962:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <ILI9341_Set_Rotation+0xa0>)
 8000966:	22f0      	movs	r2, #240	; 0xf0
 8000968:	801a      	strh	r2, [r3, #0]
			break;
 800096a:	e000      	b.n	800096e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800096c:	bf00      	nop
	}
}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000002 	.word	0x20000002
 800097c:	20000000 	.word	0x20000000

08000980 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2120      	movs	r1, #32
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <ILI9341_Enable+0x14>)
 800098a:	f001 ff2b 	bl	80027e4 <HAL_GPIO_WritePin>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800099c:	f7ff fff0 	bl	8000980 <ILI9341_Enable>
ILI9341_SPI_Init();
 80009a0:	f7ff feda 	bl	8000758 <ILI9341_SPI_Init>
ILI9341_Reset();
 80009a4:	f7ff ff7e 	bl	80008a4 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff fef3 	bl	8000794 <ILI9341_Write_Command>
HAL_Delay(1000);
 80009ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b2:	f001 fc2d 	bl	8002210 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80009b6:	20cb      	movs	r0, #203	; 0xcb
 80009b8:	f7ff feec 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80009bc:	2039      	movs	r0, #57	; 0x39
 80009be:	f7ff ff07 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80009c2:	202c      	movs	r0, #44	; 0x2c
 80009c4:	f7ff ff04 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ff01 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80009ce:	2034      	movs	r0, #52	; 0x34
 80009d0:	f7ff fefe 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80009d4:	2002      	movs	r0, #2
 80009d6:	f7ff fefb 	bl	80007d0 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80009da:	20cf      	movs	r0, #207	; 0xcf
 80009dc:	f7ff feda 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff fef5 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80009e6:	20c1      	movs	r0, #193	; 0xc1
 80009e8:	f7ff fef2 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80009ec:	2030      	movs	r0, #48	; 0x30
 80009ee:	f7ff feef 	bl	80007d0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80009f2:	20e8      	movs	r0, #232	; 0xe8
 80009f4:	f7ff fece 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80009f8:	2085      	movs	r0, #133	; 0x85
 80009fa:	f7ff fee9 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff fee6 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000a04:	2078      	movs	r0, #120	; 0x78
 8000a06:	f7ff fee3 	bl	80007d0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000a0a:	20ea      	movs	r0, #234	; 0xea
 8000a0c:	f7ff fec2 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fedd 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff feda 	bl	80007d0 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000a1c:	20ed      	movs	r0, #237	; 0xed
 8000a1e:	f7ff feb9 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000a22:	2064      	movs	r0, #100	; 0x64
 8000a24:	f7ff fed4 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f7ff fed1 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000a2e:	2012      	movs	r0, #18
 8000a30:	f7ff fece 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000a34:	2081      	movs	r0, #129	; 0x81
 8000a36:	f7ff fecb 	bl	80007d0 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000a3a:	20f7      	movs	r0, #247	; 0xf7
 8000a3c:	f7ff feaa 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000a40:	2020      	movs	r0, #32
 8000a42:	f7ff fec5 	bl	80007d0 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000a46:	20c0      	movs	r0, #192	; 0xc0
 8000a48:	f7ff fea4 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000a4c:	2023      	movs	r0, #35	; 0x23
 8000a4e:	f7ff febf 	bl	80007d0 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000a52:	20c1      	movs	r0, #193	; 0xc1
 8000a54:	f7ff fe9e 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000a58:	2010      	movs	r0, #16
 8000a5a:	f7ff feb9 	bl	80007d0 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000a5e:	20c5      	movs	r0, #197	; 0xc5
 8000a60:	f7ff fe98 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000a64:	203e      	movs	r0, #62	; 0x3e
 8000a66:	f7ff feb3 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000a6a:	2028      	movs	r0, #40	; 0x28
 8000a6c:	f7ff feb0 	bl	80007d0 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000a70:	20c7      	movs	r0, #199	; 0xc7
 8000a72:	f7ff fe8f 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000a76:	2086      	movs	r0, #134	; 0x86
 8000a78:	f7ff feaa 	bl	80007d0 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000a7c:	2036      	movs	r0, #54	; 0x36
 8000a7e:	f7ff fe89 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000a82:	2048      	movs	r0, #72	; 0x48
 8000a84:	f7ff fea4 	bl	80007d0 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000a88:	203a      	movs	r0, #58	; 0x3a
 8000a8a:	f7ff fe83 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000a8e:	2055      	movs	r0, #85	; 0x55
 8000a90:	f7ff fe9e 	bl	80007d0 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000a94:	20b1      	movs	r0, #177	; 0xb1
 8000a96:	f7ff fe7d 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fe98 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000aa0:	2018      	movs	r0, #24
 8000aa2:	f7ff fe95 	bl	80007d0 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000aa6:	20b6      	movs	r0, #182	; 0xb6
 8000aa8:	f7ff fe74 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000aac:	2008      	movs	r0, #8
 8000aae:	f7ff fe8f 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000ab2:	2082      	movs	r0, #130	; 0x82
 8000ab4:	f7ff fe8c 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000ab8:	2027      	movs	r0, #39	; 0x27
 8000aba:	f7ff fe89 	bl	80007d0 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000abe:	20f2      	movs	r0, #242	; 0xf2
 8000ac0:	f7ff fe68 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff fe83 	bl	80007d0 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000aca:	2026      	movs	r0, #38	; 0x26
 8000acc:	f7ff fe62 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff fe7d 	bl	80007d0 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000ad6:	20e0      	movs	r0, #224	; 0xe0
 8000ad8:	f7ff fe5c 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000adc:	200f      	movs	r0, #15
 8000ade:	f7ff fe77 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000ae2:	2031      	movs	r0, #49	; 0x31
 8000ae4:	f7ff fe74 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000ae8:	202b      	movs	r0, #43	; 0x2b
 8000aea:	f7ff fe71 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000aee:	200c      	movs	r0, #12
 8000af0:	f7ff fe6e 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000af4:	200e      	movs	r0, #14
 8000af6:	f7ff fe6b 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000afa:	2008      	movs	r0, #8
 8000afc:	f7ff fe68 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000b00:	204e      	movs	r0, #78	; 0x4e
 8000b02:	f7ff fe65 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000b06:	20f1      	movs	r0, #241	; 0xf1
 8000b08:	f7ff fe62 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000b0c:	2037      	movs	r0, #55	; 0x37
 8000b0e:	f7ff fe5f 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000b12:	2007      	movs	r0, #7
 8000b14:	f7ff fe5c 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000b18:	2010      	movs	r0, #16
 8000b1a:	f7ff fe59 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000b1e:	2003      	movs	r0, #3
 8000b20:	f7ff fe56 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000b24:	200e      	movs	r0, #14
 8000b26:	f7ff fe53 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000b2a:	2009      	movs	r0, #9
 8000b2c:	f7ff fe50 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000b30:	2000      	movs	r0, #0
 8000b32:	f7ff fe4d 	bl	80007d0 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000b36:	20e1      	movs	r0, #225	; 0xe1
 8000b38:	f7ff fe2c 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff fe47 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff fe44 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000b48:	2014      	movs	r0, #20
 8000b4a:	f7ff fe41 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f7ff fe3e 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000b54:	2011      	movs	r0, #17
 8000b56:	f7ff fe3b 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000b5a:	2007      	movs	r0, #7
 8000b5c:	f7ff fe38 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000b60:	2031      	movs	r0, #49	; 0x31
 8000b62:	f7ff fe35 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000b66:	20c1      	movs	r0, #193	; 0xc1
 8000b68:	f7ff fe32 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000b6c:	2048      	movs	r0, #72	; 0x48
 8000b6e:	f7ff fe2f 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000b72:	2008      	movs	r0, #8
 8000b74:	f7ff fe2c 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000b78:	200f      	movs	r0, #15
 8000b7a:	f7ff fe29 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000b7e:	200c      	movs	r0, #12
 8000b80:	f7ff fe26 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000b84:	2031      	movs	r0, #49	; 0x31
 8000b86:	f7ff fe23 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000b8a:	2036      	movs	r0, #54	; 0x36
 8000b8c:	f7ff fe20 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000b90:	200f      	movs	r0, #15
 8000b92:	f7ff fe1d 	bl	80007d0 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000b96:	2011      	movs	r0, #17
 8000b98:	f7ff fdfc 	bl	8000794 <ILI9341_Write_Command>
HAL_Delay(120);
 8000b9c:	2078      	movs	r0, #120	; 0x78
 8000b9e:	f001 fb37 	bl	8002210 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000ba2:	2029      	movs	r0, #41	; 0x29
 8000ba4:	f7ff fdf6 	bl	8000794 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f7ff fe97 	bl	80008dc <ILI9341_Set_Rotation>

HAL_Delay(10);
 8000bae:	200a      	movs	r0, #10
 8000bb0:	f001 fb2e 	bl	8002210 <HAL_Delay>
//
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	80fb      	strh	r3, [r7, #6]
 8000bc4:	466b      	mov	r3, sp
 8000bc6:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bd4:	d202      	bcs.n	8000bdc <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bda:	e002      	b.n	8000be2 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000bdc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000be2:	2201      	movs	r2, #1
 8000be4:	2140      	movs	r1, #64	; 0x40
 8000be6:	483d      	ldr	r0, [pc, #244]	; (8000cdc <ILI9341_Draw_Colour_Burst+0x124>)
 8000be8:	f001 fdfc 	bl	80027e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2110      	movs	r1, #16
 8000bf0:	483a      	ldr	r0, [pc, #232]	; (8000cdc <ILI9341_Draw_Colour_Burst+0x124>)
 8000bf2:	f001 fdf7 	bl	80027e4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000c00:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000c02:	4623      	mov	r3, r4
 8000c04:	3b01      	subs	r3, #1
 8000c06:	61fb      	str	r3, [r7, #28]
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f04f 0100 	mov.w	r1, #0
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	f04f 0300 	mov.w	r3, #0
 8000c16:	00cb      	lsls	r3, r1, #3
 8000c18:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c1c:	00c2      	lsls	r2, r0, #3
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f04f 0100 	mov.w	r1, #0
 8000c24:	f04f 0200 	mov.w	r2, #0
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	00cb      	lsls	r3, r1, #3
 8000c2e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c32:	00c2      	lsls	r2, r0, #3
 8000c34:	1de3      	adds	r3, r4, #7
 8000c36:	08db      	lsrs	r3, r3, #3
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	ebad 0d03 	sub.w	sp, sp, r3
 8000c3e:	466b      	mov	r3, sp
 8000c40:	3300      	adds	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c48:	e00e      	b.n	8000c68 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c4e:	4413      	add	r3, r2
 8000c50:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c54:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c58:	3301      	adds	r3, #1
 8000c5a:	88fa      	ldrh	r2, [r7, #6]
 8000c5c:	b2d1      	uxtb	r1, r2
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c64:	3302      	adds	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d3ec      	bcc.n	8000c4a <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c84:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c8a:	fb01 f202 	mul.w	r2, r1, r2
 8000c8e:	1a9b      	subs	r3, r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d010      	beq.n	8000cba <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c9c:	e009      	b.n	8000cb2 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000c9e:	69b9      	ldr	r1, [r7, #24]
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	230a      	movs	r3, #10
 8000ca6:	480e      	ldr	r0, [pc, #56]	; (8000ce0 <ILI9341_Draw_Colour_Burst+0x128>)
 8000ca8:	f004 fe6b 	bl	8005982 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cae:	3301      	adds	r3, #1
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d3f1      	bcc.n	8000c9e <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000cba:	69b9      	ldr	r1, [r7, #24]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	230a      	movs	r3, #10
 8000cc2:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <ILI9341_Draw_Colour_Burst+0x128>)
 8000cc4:	f004 fe5d 	bl	8005982 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2110      	movs	r1, #16
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <ILI9341_Draw_Colour_Burst+0x124>)
 8000cce:	f001 fd89 	bl	80027e4 <HAL_GPIO_WritePin>
 8000cd2:	46ad      	mov	sp, r5
}
 8000cd4:	bf00      	nop
 8000cd6:	3730      	adds	r7, #48	; 0x30
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bdb0      	pop	{r4, r5, r7, pc}
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	200000f0 	.word	0x200000f0

08000ce4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <ILI9341_Fill_Screen+0x44>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <ILI9341_Fill_Screen+0x48>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff fd85 	bl	800080c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <ILI9341_Fill_Screen+0x44>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <ILI9341_Fill_Screen+0x48>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	fb03 f302 	mul.w	r3, r3, r2
 8000d14:	461a      	mov	r2, r3
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff4c 	bl	8000bb8 <ILI9341_Draw_Colour_Burst>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000002 	.word	0x20000002
 8000d2c:	20000000 	.word	0x20000000

08000d30 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	80bb      	strh	r3, [r7, #4]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000d42:	4b5b      	ldr	r3, [pc, #364]	; (8000eb0 <ILI9341_Draw_Pixel+0x180>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	88fa      	ldrh	r2, [r7, #6]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	f080 80ac 	bcs.w	8000ea8 <ILI9341_Draw_Pixel+0x178>
 8000d50:	4b58      	ldr	r3, [pc, #352]	; (8000eb4 <ILI9341_Draw_Pixel+0x184>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	88ba      	ldrh	r2, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	f080 80a5 	bcs.w	8000ea8 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2140      	movs	r1, #64	; 0x40
 8000d62:	4855      	ldr	r0, [pc, #340]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000d64:	f001 fd3e 	bl	80027e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	4852      	ldr	r0, [pc, #328]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000d6e:	f001 fd39 	bl	80027e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000d72:	202a      	movs	r0, #42	; 0x2a
 8000d74:	f7ff fcfc 	bl	8000770 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2140      	movs	r1, #64	; 0x40
 8000d7c:	484e      	ldr	r0, [pc, #312]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000d7e:	f001 fd31 	bl	80027e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000d82:	2201      	movs	r2, #1
 8000d84:	2110      	movs	r1, #16
 8000d86:	484c      	ldr	r0, [pc, #304]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000d88:	f001 fd2c 	bl	80027e4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4849      	ldr	r0, [pc, #292]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000d92:	f001 fd27 	bl	80027e4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	753b      	strb	r3, [r7, #20]
 8000da0:	88fb      	ldrh	r3, [r7, #6]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	757b      	strb	r3, [r7, #21]
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	3301      	adds	r3, #1
 8000daa:	121b      	asrs	r3, r3, #8
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	75bb      	strb	r3, [r7, #22]
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	3301      	adds	r3, #1
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000dba:	f107 0114 	add.w	r1, r7, #20
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	483e      	ldr	r0, [pc, #248]	; (8000ebc <ILI9341_Draw_Pixel+0x18c>)
 8000dc4:	f004 fddd 	bl	8005982 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2110      	movs	r1, #16
 8000dcc:	483a      	ldr	r0, [pc, #232]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000dce:	f001 fd09 	bl	80027e4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2140      	movs	r1, #64	; 0x40
 8000dd6:	4838      	ldr	r0, [pc, #224]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000dd8:	f001 fd04 	bl	80027e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2110      	movs	r1, #16
 8000de0:	4835      	ldr	r0, [pc, #212]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000de2:	f001 fcff 	bl	80027e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000de6:	202b      	movs	r0, #43	; 0x2b
 8000de8:	f7ff fcc2 	bl	8000770 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000dec:	2201      	movs	r2, #1
 8000dee:	2140      	movs	r1, #64	; 0x40
 8000df0:	4831      	ldr	r0, [pc, #196]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000df2:	f001 fcf7 	bl	80027e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000df6:	2201      	movs	r2, #1
 8000df8:	2110      	movs	r1, #16
 8000dfa:	482f      	ldr	r0, [pc, #188]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000dfc:	f001 fcf2 	bl	80027e4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2110      	movs	r1, #16
 8000e04:	482c      	ldr	r0, [pc, #176]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e06:	f001 fced 	bl	80027e4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000e0a:	88bb      	ldrh	r3, [r7, #4]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	743b      	strb	r3, [r7, #16]
 8000e14:	88bb      	ldrh	r3, [r7, #4]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	747b      	strb	r3, [r7, #17]
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	121b      	asrs	r3, r3, #8
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	74bb      	strb	r3, [r7, #18]
 8000e24:	88bb      	ldrh	r3, [r7, #4]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	3301      	adds	r3, #1
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000e2e:	f107 0110 	add.w	r1, r7, #16
 8000e32:	2301      	movs	r3, #1
 8000e34:	2204      	movs	r2, #4
 8000e36:	4821      	ldr	r0, [pc, #132]	; (8000ebc <ILI9341_Draw_Pixel+0x18c>)
 8000e38:	f004 fda3 	bl	8005982 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2110      	movs	r1, #16
 8000e40:	481d      	ldr	r0, [pc, #116]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e42:	f001 fccf 	bl	80027e4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000e46:	2200      	movs	r2, #0
 8000e48:	2140      	movs	r1, #64	; 0x40
 8000e4a:	481b      	ldr	r0, [pc, #108]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e4c:	f001 fcca 	bl	80027e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000e50:	2200      	movs	r2, #0
 8000e52:	2110      	movs	r1, #16
 8000e54:	4818      	ldr	r0, [pc, #96]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e56:	f001 fcc5 	bl	80027e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000e5a:	202c      	movs	r0, #44	; 0x2c
 8000e5c:	f7ff fc88 	bl	8000770 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000e60:	2201      	movs	r2, #1
 8000e62:	2140      	movs	r1, #64	; 0x40
 8000e64:	4814      	ldr	r0, [pc, #80]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e66:	f001 fcbd 	bl	80027e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	4812      	ldr	r0, [pc, #72]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e70:	f001 fcb8 	bl	80027e4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2110      	movs	r1, #16
 8000e78:	480f      	ldr	r0, [pc, #60]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e7a:	f001 fcb3 	bl	80027e4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	733b      	strb	r3, [r7, #12]
 8000e88:	887b      	ldrh	r3, [r7, #2]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000e8e:	f107 010c 	add.w	r1, r7, #12
 8000e92:	2301      	movs	r3, #1
 8000e94:	2202      	movs	r2, #2
 8000e96:	4809      	ldr	r0, [pc, #36]	; (8000ebc <ILI9341_Draw_Pixel+0x18c>)
 8000e98:	f004 fd73 	bl	8005982 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000ea2:	f001 fc9f 	bl	80027e4 <HAL_GPIO_WritePin>
 8000ea6:	e000      	b.n	8000eaa <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000ea8:	bf00      	nop
	
}
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000002 	.word	0x20000002
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	200000f0 	.word	0x200000f0

08000ec0 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	4608      	mov	r0, r1
 8000eca:	4611      	mov	r1, r2
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4623      	mov	r3, r4
 8000ed0:	80fb      	strh	r3, [r7, #6]
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80bb      	strh	r3, [r7, #4]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	807b      	strh	r3, [r7, #2]
 8000eda:	4613      	mov	r3, r2
 8000edc:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000ede:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <ILI9341_Draw_Rectangle+0xb0>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	88fa      	ldrh	r2, [r7, #6]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d23d      	bcs.n	8000f66 <ILI9341_Draw_Rectangle+0xa6>
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <ILI9341_Draw_Rectangle+0xb4>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	88ba      	ldrh	r2, [r7, #4]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d237      	bcs.n	8000f66 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8000ef6:	88fa      	ldrh	r2, [r7, #6]
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a1c      	ldr	r2, [pc, #112]	; (8000f70 <ILI9341_Draw_Rectangle+0xb0>)
 8000efe:	8812      	ldrh	r2, [r2, #0]
 8000f00:	b292      	uxth	r2, r2
 8000f02:	4293      	cmp	r3, r2
 8000f04:	dd05      	ble.n	8000f12 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <ILI9341_Draw_Rectangle+0xb0>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8000f12:	88ba      	ldrh	r2, [r7, #4]
 8000f14:	883b      	ldrh	r3, [r7, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <ILI9341_Draw_Rectangle+0xb4>)
 8000f1a:	8812      	ldrh	r2, [r2, #0]
 8000f1c:	b292      	uxth	r2, r2
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	dd05      	ble.n	8000f2e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <ILI9341_Draw_Rectangle+0xb4>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	88bb      	ldrh	r3, [r7, #4]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8000f2e:	88fa      	ldrh	r2, [r7, #6]
 8000f30:	887b      	ldrh	r3, [r7, #2]
 8000f32:	4413      	add	r3, r2
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	3b01      	subs	r3, #1
 8000f38:	b29c      	uxth	r4, r3
 8000f3a:	88ba      	ldrh	r2, [r7, #4]
 8000f3c:	883b      	ldrh	r3, [r7, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	3b01      	subs	r3, #1
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	88b9      	ldrh	r1, [r7, #4]
 8000f48:	88f8      	ldrh	r0, [r7, #6]
 8000f4a:	4622      	mov	r2, r4
 8000f4c:	f7ff fc5e 	bl	800080c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8000f50:	883b      	ldrh	r3, [r7, #0]
 8000f52:	887a      	ldrh	r2, [r7, #2]
 8000f54:	fb02 f303 	mul.w	r3, r2, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	8b3b      	ldrh	r3, [r7, #24]
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fe2a 	bl	8000bb8 <ILI9341_Draw_Colour_Burst>
 8000f64:	e000      	b.n	8000f68 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000f66:	bf00      	nop
}
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd90      	pop	{r4, r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000002 	.word	0x20000002
 8000f74:	20000000 	.word	0x20000000

08000f78 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	int i =0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 8000f84:	e036      	b.n	8000ff4 <speed_test_LCD+0x7c>
	{
		i ++;
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000fa0:	4819      	ldr	r0, [pc, #100]	; (8001008 <speed_test_LCD+0x90>)
 8000fa2:	f004 fc50 	bl	8005846 <HAL_RNG_GetRandomNumber>
 8000fa6:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000fac:	4816      	ldr	r0, [pc, #88]	; (8001008 <speed_test_LCD+0x90>)
 8000fae:	f004 fc4a 	bl	8005846 <HAL_RNG_GetRandomNumber>
 8000fb2:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000fb8:	4813      	ldr	r0, [pc, #76]	; (8001008 <speed_test_LCD+0x90>)
 8000fba:	f004 fc44 	bl	8005846 <HAL_RNG_GetRandomNumber>
 8000fbe:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000fc4:	4810      	ldr	r0, [pc, #64]	; (8001008 <speed_test_LCD+0x90>)
 8000fc6:	f004 fc3e 	bl	8005846 <HAL_RNG_GetRandomNumber>
 8000fca:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8000fd0:	89fb      	ldrh	r3, [r7, #14]
 8000fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fd6:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8000fd8:	89bb      	ldrh	r3, [r7, #12]
 8000fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fde:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8000fe0:	897b      	ldrh	r3, [r7, #10]
 8000fe2:	f003 031f 	and.w	r3, r3, #31
 8000fe6:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8000fe8:	893b      	ldrh	r3, [r7, #8]
 8000fea:	897a      	ldrh	r2, [r7, #10]
 8000fec:	89b9      	ldrh	r1, [r7, #12]
 8000fee:	89f8      	ldrh	r0, [r7, #14]
 8000ff0:	f7ff fa66 	bl	80004c0 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	ddc4      	ble.n	8000f86 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000190 	.word	0x20000190

0800100c <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	char digith = 0;;
 8001012:	2300      	movs	r3, #0
 8001014:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 8001016:	f000 f853 	bl	80010c0 <read_one_digit_from_keyboard>
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b23      	cmp	r3, #35	; 0x23
 8001022:	d10a      	bne.n	800103a <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 8001024:	221e      	movs	r2, #30
 8001026:	2100      	movs	r1, #0
 8001028:	4824      	ldr	r0, [pc, #144]	; (80010bc <read_digits+0xb0>)
 800102a:	f008 ffa3 	bl	8009f74 <memset>
		keyboard.read_digits_position = 0;
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <read_digits+0xb0>)
 8001030:	2200      	movs	r2, #0
 8001032:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <read_digits+0xb0>)
 8001036:	2200      	movs	r2, #0
 8001038:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b2a      	cmp	r3, #42	; 0x2a
 800103e:	d109      	bne.n	8001054 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <read_digits+0xb0>)
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <read_digits+0xb0>)
 800104a:	2200      	movs	r2, #0
 800104c:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <read_digits+0xb0>)
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d028      	beq.n	80010ac <read_digits+0xa0>
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b23      	cmp	r3, #35	; 0x23
 800105e:	d025      	beq.n	80010ac <read_digits+0xa0>
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b2a      	cmp	r3, #42	; 0x2a
 8001064:	d022      	beq.n	80010ac <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <read_digits+0xb0>)
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	4a14      	ldr	r2, [pc, #80]	; (80010bc <read_digits+0xb0>)
 800106c:	7f92      	ldrb	r2, [r2, #30]
 800106e:	4293      	cmp	r3, r2
 8001070:	dc11      	bgt.n	8001096 <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <read_digits+0xb0>)
 8001074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001076:	4911      	ldr	r1, [pc, #68]	; (80010bc <read_digits+0xb0>)
 8001078:	79fa      	ldrb	r2, [r7, #7]
 800107a:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <read_digits+0xb0>)
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	3301      	adds	r3, #1
 8001082:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <read_digits+0xb0>)
 8001084:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <read_digits+0xb0>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <read_digits+0xb0>)
 8001090:	2201      	movs	r2, #1
 8001092:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8001094:	e00e      	b.n	80010b4 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <read_digits+0xb0>)
 8001098:	2201      	movs	r2, #1
 800109a:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <read_digits+0xb0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <read_digits+0xb0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 80010aa:	e003      	b.n	80010b4 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <read_digits+0xb0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	77da      	strb	r2, [r3, #31]
//		//return false;		// Кнопка була не нажата
//	}
///////////////////////////////////////////////////////////////
	//LI9341_Draw_Text(digits_buff, k, 10, RED, 3, BLACK);
	//k = k +15;
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200000c8 	.word	0x200000c8

080010c0 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
	char digit = '\0';
 80010c6:	2300      	movs	r3, #0
 80010c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d0:	48cf      	ldr	r0, [pc, #828]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80010d2:	f001 fb87 	bl	80027e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010dc:	48cc      	ldr	r0, [pc, #816]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80010de:	f001 fb81 	bl	80027e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e8:	48c9      	ldr	r0, [pc, #804]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80010ea:	f001 fb7b 	bl	80027e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	48c6      	ldr	r0, [pc, #792]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80010f6:	f001 fb75 	bl	80027e4 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80010fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010fe:	48c5      	ldr	r0, [pc, #788]	; (8001414 <read_one_digit_from_keyboard+0x354>)
 8001100:	f001 fb58 	bl	80027b4 <HAL_GPIO_ReadPin>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d169      	bne.n	80011de <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001110:	48bf      	ldr	r0, [pc, #764]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 8001112:	f001 fb67 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111c:	48bc      	ldr	r0, [pc, #752]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 800111e:	f001 fb61 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001128:	48b9      	ldr	r0, [pc, #740]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 800112a:	f001 fb5b 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001134:	48b6      	ldr	r0, [pc, #728]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 8001136:	f001 fb55 	bl	80027e4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800113a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113e:	48b5      	ldr	r0, [pc, #724]	; (8001414 <read_one_digit_from_keyboard+0x354>)
 8001140:	f001 fb38 	bl	80027b4 <HAL_GPIO_ReadPin>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 800114a:	2331      	movs	r3, #49	; 0x31
 800114c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001154:	48ae      	ldr	r0, [pc, #696]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 8001156:	f001 fb45 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001160:	48ab      	ldr	r0, [pc, #684]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 8001162:	f001 fb3f 	bl	80027e4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8001166:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800116a:	48aa      	ldr	r0, [pc, #680]	; (8001414 <read_one_digit_from_keyboard+0x354>)
 800116c:	f001 fb22 	bl	80027b4 <HAL_GPIO_ReadPin>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 8001176:	2334      	movs	r3, #52	; 0x34
 8001178:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001180:	48a3      	ldr	r0, [pc, #652]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 8001182:	f001 fb2f 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118c:	48a0      	ldr	r0, [pc, #640]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 800118e:	f001 fb29 	bl	80027e4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8001192:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001196:	489f      	ldr	r0, [pc, #636]	; (8001414 <read_one_digit_from_keyboard+0x354>)
 8001198:	f001 fb0c 	bl	80027b4 <HAL_GPIO_ReadPin>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 80011a2:	2337      	movs	r3, #55	; 0x37
 80011a4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ac:	4898      	ldr	r0, [pc, #608]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80011ae:	f001 fb19 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b8:	4895      	ldr	r0, [pc, #596]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80011ba:	f001 fb13 	bl	80027e4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80011be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011c2:	4894      	ldr	r0, [pc, #592]	; (8001414 <read_one_digit_from_keyboard+0x354>)
 80011c4:	f001 faf6 	bl	80027b4 <HAL_GPIO_ReadPin>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 80011ce:	232a      	movs	r3, #42	; 0x2a
 80011d0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d8:	488d      	ldr	r0, [pc, #564]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80011da:	f001 fb03 	bl	80027e4 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e4:	488a      	ldr	r0, [pc, #552]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80011e6:	f001 fafd 	bl	80027e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f0:	4887      	ldr	r0, [pc, #540]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80011f2:	f001 faf7 	bl	80027e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fc:	4884      	ldr	r0, [pc, #528]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80011fe:	f001 faf1 	bl	80027e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001208:	4881      	ldr	r0, [pc, #516]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 800120a:	f001 faeb 	bl	80027e4 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 800120e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001212:	4880      	ldr	r0, [pc, #512]	; (8001414 <read_one_digit_from_keyboard+0x354>)
 8001214:	f001 face 	bl	80027b4 <HAL_GPIO_ReadPin>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d169      	bne.n	80012f2 <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001224:	487a      	ldr	r0, [pc, #488]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 8001226:	f001 fadd 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001230:	4877      	ldr	r0, [pc, #476]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 8001232:	f001 fad7 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800123c:	4874      	ldr	r0, [pc, #464]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 800123e:	f001 fad1 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001242:	2201      	movs	r2, #1
 8001244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001248:	4871      	ldr	r0, [pc, #452]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 800124a:	f001 facb 	bl	80027e4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800124e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001252:	4870      	ldr	r0, [pc, #448]	; (8001414 <read_one_digit_from_keyboard+0x354>)
 8001254:	f001 faae 	bl	80027b4 <HAL_GPIO_ReadPin>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 800125e:	2332      	movs	r3, #50	; 0x32
 8001260:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001268:	4869      	ldr	r0, [pc, #420]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 800126a:	f001 fabb 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001274:	4866      	ldr	r0, [pc, #408]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 8001276:	f001 fab5 	bl	80027e4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800127a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800127e:	4865      	ldr	r0, [pc, #404]	; (8001414 <read_one_digit_from_keyboard+0x354>)
 8001280:	f001 fa98 	bl	80027b4 <HAL_GPIO_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 800128a:	2335      	movs	r3, #53	; 0x35
 800128c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001294:	485e      	ldr	r0, [pc, #376]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 8001296:	f001 faa5 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a0:	485b      	ldr	r0, [pc, #364]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80012a2:	f001 fa9f 	bl	80027e4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80012a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012aa:	485a      	ldr	r0, [pc, #360]	; (8001414 <read_one_digit_from_keyboard+0x354>)
 80012ac:	f001 fa82 	bl	80027b4 <HAL_GPIO_ReadPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 80012b6:	2338      	movs	r3, #56	; 0x38
 80012b8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c0:	4853      	ldr	r0, [pc, #332]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80012c2:	f001 fa8f 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012cc:	4850      	ldr	r0, [pc, #320]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80012ce:	f001 fa89 	bl	80027e4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80012d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d6:	484f      	ldr	r0, [pc, #316]	; (8001414 <read_one_digit_from_keyboard+0x354>)
 80012d8:	f001 fa6c 	bl	80027b4 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 80012e2:	2330      	movs	r3, #48	; 0x30
 80012e4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ec:	4848      	ldr	r0, [pc, #288]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80012ee:	f001 fa79 	bl	80027e4 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f8:	4845      	ldr	r0, [pc, #276]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80012fa:	f001 fa73 	bl	80027e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001304:	4842      	ldr	r0, [pc, #264]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 8001306:	f001 fa6d 	bl	80027e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001310:	483f      	ldr	r0, [pc, #252]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 8001312:	f001 fa67 	bl	80027e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800131c:	483c      	ldr	r0, [pc, #240]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 800131e:	f001 fa61 	bl	80027e4 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №
 8001322:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001326:	483b      	ldr	r0, [pc, #236]	; (8001414 <read_one_digit_from_keyboard+0x354>)
 8001328:	f001 fa44 	bl	80027b4 <HAL_GPIO_ReadPin>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d169      	bne.n	8001406 <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001338:	4835      	ldr	r0, [pc, #212]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 800133a:	f001 fa53 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001344:	4832      	ldr	r0, [pc, #200]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 8001346:	f001 fa4d 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001350:	482f      	ldr	r0, [pc, #188]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 8001352:	f001 fa47 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	f44f 7180 	mov.w	r1, #256	; 0x100
 800135c:	482c      	ldr	r0, [pc, #176]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 800135e:	f001 fa41 	bl	80027e4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001362:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001366:	482b      	ldr	r0, [pc, #172]	; (8001414 <read_one_digit_from_keyboard+0x354>)
 8001368:	f001 fa24 	bl	80027b4 <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 8001372:	2333      	movs	r3, #51	; 0x33
 8001374:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800137c:	4824      	ldr	r0, [pc, #144]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 800137e:	f001 fa31 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001388:	4821      	ldr	r0, [pc, #132]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 800138a:	f001 fa2b 	bl	80027e4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800138e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001392:	4820      	ldr	r0, [pc, #128]	; (8001414 <read_one_digit_from_keyboard+0x354>)
 8001394:	f001 fa0e 	bl	80027b4 <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 800139e:	2336      	movs	r3, #54	; 0x36
 80013a0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80013a2:	2201      	movs	r2, #1
 80013a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a8:	4819      	ldr	r0, [pc, #100]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80013aa:	f001 fa1b 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b4:	4816      	ldr	r0, [pc, #88]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80013b6:	f001 fa15 	bl	80027e4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80013ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013be:	4815      	ldr	r0, [pc, #84]	; (8001414 <read_one_digit_from_keyboard+0x354>)
 80013c0:	f001 f9f8 	bl	80027b4 <HAL_GPIO_ReadPin>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 80013ca:	2339      	movs	r3, #57	; 0x39
 80013cc:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d4:	480e      	ldr	r0, [pc, #56]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80013d6:	f001 fa05 	bl	80027e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 80013e2:	f001 f9ff 	bl	80027e4 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80013e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ea:	480a      	ldr	r0, [pc, #40]	; (8001414 <read_one_digit_from_keyboard+0x354>)
 80013ec:	f001 f9e2 	bl	80027b4 <HAL_GPIO_ReadPin>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 80013f6:	2323      	movs	r3, #35	; 0x23
 80013f8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <read_one_digit_from_keyboard+0x350>)
 8001402:	f001 f9ef 	bl	80027e4 <HAL_GPIO_WritePin>
	}
	return digit;
 8001406:	79fb      	ldrb	r3, [r7, #7]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40020c00 	.word	0x40020c00
 8001414:	40020400 	.word	0x40020400

08001418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800141e:	f000 fe85 	bl	800212c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001422:	f000 f845 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001426:	f000 fa45 	bl	80018b4 <MX_GPIO_Init>
  MX_I2S3_Init();
 800142a:	f000 f8cf 	bl	80015cc <MX_I2S3_Init>
  MX_SPI1_Init();
 800142e:	f000 f911 	bl	8001654 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001432:	f008 fa5d 	bl	80098f0 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8001436:	f000 f979 	bl	800172c <MX_TIM2_Init>
  MX_SPI2_Init();
 800143a:	f000 f941 	bl	80016c0 <MX_SPI2_Init>
  MX_RNG_Init();
 800143e:	f000 f8f5 	bl	800162c <MX_RNG_Init>
  MX_TIM3_Init();
 8001442:	f000 f9e9 	bl	8001818 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001446:	f000 f8b5 	bl	80015b4 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 800144a:	f7ff faa5 	bl	8000998 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 800144e:	2000      	movs	r0, #0
 8001450:	f7ff fc48 	bl	8000ce4 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 8001454:	2003      	movs	r0, #3
 8001456:	f7ff fa41 	bl	80008dc <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 800145a:	2000      	movs	r0, #0
 800145c:	f7ff fc42 	bl	8000ce4 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 8001460:	2364      	movs	r3, #100	; 0x64
 8001462:	60fb      	str	r3, [r7, #12]
  speed_test_LCD(number_of_tests);
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f7ff fd87 	bl	8000f78 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fc3a 	bl	8000ce4 <ILI9341_Fill_Screen>

  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <main+0x90>)
 8001472:	f004 fcdd 	bl	8005e30 <HAL_TIM_Base_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <main+0x94>)
 8001478:	220a      	movs	r2, #10
 800147a:	779a      	strb	r2, [r3, #30]

  int i = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  while (1)
  {
	  if(keyboard.read_one_digit_status == true)
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <main+0x94>)
 8001482:	7fdb      	ldrb	r3, [r3, #31]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00a      	beq.n	800149e <main+0x86>
	  {
		  ILI9341_Draw_Text( keyboard.keyboard_digits_buffer, 10, 10, WHITE, 3, BLACK);
 8001488:	2300      	movs	r3, #0
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	2303      	movs	r3, #3
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001494:	220a      	movs	r2, #10
 8001496:	210a      	movs	r1, #10
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <main+0x94>)
 800149a:	f7ff f92f 	bl	80006fc <ILI9341_Draw_Text>

	  */

	  //test_touchsreen();
	  char number;
	  int ARR_REG =0;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80014a2:	f008 fa4b 	bl	800993c <MX_USB_HOST_Process>
  {
 80014a6:	e7eb      	b.n	8001480 <main+0x68>
 80014a8:	20000148 	.word	0x20000148
 80014ac:	200000c8 	.word	0x200000c8

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b098      	sub	sp, #96	; 0x60
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ba:	2230      	movs	r2, #48	; 0x30
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f008 fd58 	bl	8009f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	4b31      	ldr	r3, [pc, #196]	; (80015ac <SystemClock_Config+0xfc>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a30      	ldr	r2, [pc, #192]	; (80015ac <SystemClock_Config+0xfc>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <SystemClock_Config+0xfc>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <SystemClock_Config+0x100>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a2a      	ldr	r2, [pc, #168]	; (80015b0 <SystemClock_Config+0x100>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <SystemClock_Config+0x100>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800151a:	2301      	movs	r3, #1
 800151c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800151e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001524:	2302      	movs	r3, #2
 8001526:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001528:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800152c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800152e:	2308      	movs	r3, #8
 8001530:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001532:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001536:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001538:	2302      	movs	r3, #2
 800153a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800153c:	2307      	movs	r3, #7
 800153e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001540:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001544:	4618      	mov	r0, r3
 8001546:	f003 fb85 	bl	8004c54 <HAL_RCC_OscConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001550:	f000 fb16 	bl	8001b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001554:	230f      	movs	r3, #15
 8001556:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001558:	2302      	movs	r3, #2
 800155a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001560:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	2105      	movs	r1, #5
 8001572:	4618      	mov	r0, r3
 8001574:	f003 fde6 	bl	8005144 <HAL_RCC_ClockConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800157e:	f000 faff 	bl	8001b80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001582:	2301      	movs	r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001586:	23c0      	movs	r3, #192	; 0xc0
 8001588:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800158a:	2302      	movs	r3, #2
 800158c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	4618      	mov	r0, r3
 8001594:	f003 ff9e 	bl	80054d4 <HAL_RCCEx_PeriphCLKConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800159e:	f000 faef 	bl	8001b80 <Error_Handler>
  }
}
 80015a2:	bf00      	nop
 80015a4:	3760      	adds	r7, #96	; 0x60
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40007000 	.word	0x40007000

080015b4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	201c      	movs	r0, #28
 80015be:	f000 ff26 	bl	800240e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015c2:	201c      	movs	r0, #28
 80015c4:	f000 ff3f 	bl	8002446 <HAL_NVIC_EnableIRQ>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <MX_I2S3_Init+0x54>)
 80015d2:	4a14      	ldr	r2, [pc, #80]	; (8001624 <MX_I2S3_Init+0x58>)
 80015d4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <MX_I2S3_Init+0x54>)
 80015d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015dc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <MX_I2S3_Init+0x54>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_I2S3_Init+0x54>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <MX_I2S3_Init+0x54>)
 80015ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <MX_I2S3_Init+0x54>)
 80015f4:	4a0c      	ldr	r2, [pc, #48]	; (8001628 <MX_I2S3_Init+0x5c>)
 80015f6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_I2S3_Init+0x54>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <MX_I2S3_Init+0x54>)
 8001600:	2200      	movs	r2, #0
 8001602:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_I2S3_Init+0x54>)
 8001606:	2200      	movs	r2, #0
 8001608:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_I2S3_Init+0x54>)
 800160c:	f002 fe82 	bl	8004314 <HAL_I2S_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001616:	f000 fab3 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000240 	.word	0x20000240
 8001624:	40003c00 	.word	0x40003c00
 8001628:	00017700 	.word	0x00017700

0800162c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_RNG_Init+0x20>)
 8001632:	4a07      	ldr	r2, [pc, #28]	; (8001650 <MX_RNG_Init+0x24>)
 8001634:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_RNG_Init+0x20>)
 8001638:	f004 f88c 	bl	8005754 <HAL_RNG_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001642:	f000 fa9d 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000190 	.word	0x20000190
 8001650:	50060800 	.word	0x50060800

08001654 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_SPI1_Init+0x64>)
 800165a:	4a18      	ldr	r2, [pc, #96]	; (80016bc <MX_SPI1_Init+0x68>)
 800165c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001660:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001664:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_SPI1_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_SPI1_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001684:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MX_SPI1_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_SPI1_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_SPI1_Init+0x64>)
 80016a0:	220a      	movs	r2, #10
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_SPI1_Init+0x64>)
 80016a6:	f004 f8e3 	bl	8005870 <HAL_SPI_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016b0:	f000 fa66 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200001a0 	.word	0x200001a0
 80016bc:	40013000 	.word	0x40013000

080016c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <MX_SPI2_Init+0x64>)
 80016c6:	4a18      	ldr	r2, [pc, #96]	; (8001728 <MX_SPI2_Init+0x68>)
 80016c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <MX_SPI2_Init+0x64>)
 80016cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <MX_SPI2_Init+0x64>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <MX_SPI2_Init+0x64>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_SPI2_Init+0x64>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <MX_SPI2_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_SPI2_Init+0x64>)
 80016ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_SPI2_Init+0x64>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <MX_SPI2_Init+0x64>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_SPI2_Init+0x64>)
 8001700:	2200      	movs	r2, #0
 8001702:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <MX_SPI2_Init+0x64>)
 8001706:	2200      	movs	r2, #0
 8001708:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_SPI2_Init+0x64>)
 800170c:	220a      	movs	r2, #10
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	; (8001724 <MX_SPI2_Init+0x64>)
 8001712:	f004 f8ad 	bl	8005870 <HAL_SPI_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800171c:	f000 fa30 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200000f0 	.word	0x200000f0
 8001728:	40003800 	.word	0x40003800

0800172c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08e      	sub	sp, #56	; 0x38
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001740:	f107 0320 	add.w	r3, r7, #32
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
 8001758:	615a      	str	r2, [r3, #20]
 800175a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800175c:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <MX_TIM2_Init+0xe8>)
 800175e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001762:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <MX_TIM2_Init+0xe8>)
 8001766:	f240 3247 	movw	r2, #839	; 0x347
 800176a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176c:	4b29      	ldr	r3, [pc, #164]	; (8001814 <MX_TIM2_Init+0xe8>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001772:	4b28      	ldr	r3, [pc, #160]	; (8001814 <MX_TIM2_Init+0xe8>)
 8001774:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001778:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <MX_TIM2_Init+0xe8>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <MX_TIM2_Init+0xe8>)
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001786:	4823      	ldr	r0, [pc, #140]	; (8001814 <MX_TIM2_Init+0xe8>)
 8001788:	f004 fb02 	bl	8005d90 <HAL_TIM_Base_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001792:	f000 f9f5 	bl	8001b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800179c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a0:	4619      	mov	r1, r3
 80017a2:	481c      	ldr	r0, [pc, #112]	; (8001814 <MX_TIM2_Init+0xe8>)
 80017a4:	f004 fdd4 	bl	8006350 <HAL_TIM_ConfigClockSource>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80017ae:	f000 f9e7 	bl	8001b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017b2:	4818      	ldr	r0, [pc, #96]	; (8001814 <MX_TIM2_Init+0xe8>)
 80017b4:	f004 fbac 	bl	8005f10 <HAL_TIM_PWM_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80017be:	f000 f9df 	bl	8001b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80017c2:	2310      	movs	r3, #16
 80017c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ca:	f107 0320 	add.w	r3, r7, #32
 80017ce:	4619      	mov	r1, r3
 80017d0:	4810      	ldr	r0, [pc, #64]	; (8001814 <MX_TIM2_Init+0xe8>)
 80017d2:	f005 f99d 	bl	8006b10 <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80017dc:	f000 f9d0 	bl	8001b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e0:	2360      	movs	r3, #96	; 0x60
 80017e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80017e4:	2364      	movs	r3, #100	; 0x64
 80017e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2200      	movs	r2, #0
 80017f4:	4619      	mov	r1, r3
 80017f6:	4807      	ldr	r0, [pc, #28]	; (8001814 <MX_TIM2_Init+0xe8>)
 80017f8:	f004 fcec 	bl	80061d4 <HAL_TIM_PWM_ConfigChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001802:	f000 f9bd 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001806:	4803      	ldr	r0, [pc, #12]	; (8001814 <MX_TIM2_Init+0xe8>)
 8001808:	f000 fb54 	bl	8001eb4 <HAL_TIM_MspPostInit>

}
 800180c:	bf00      	nop
 800180e:	3738      	adds	r7, #56	; 0x38
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200001f8 	.word	0x200001f8

08001818 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800181e:	f107 0308 	add.w	r3, r7, #8
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182c:	463b      	mov	r3, r7
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001834:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <MX_TIM3_Init+0x94>)
 8001836:	4a1e      	ldr	r2, [pc, #120]	; (80018b0 <MX_TIM3_Init+0x98>)
 8001838:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4200;
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <MX_TIM3_Init+0x94>)
 800183c:	f241 0268 	movw	r2, #4200	; 0x1068
 8001840:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001842:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <MX_TIM3_Init+0x94>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001848:	4b18      	ldr	r3, [pc, #96]	; (80018ac <MX_TIM3_Init+0x94>)
 800184a:	f242 7210 	movw	r2, #10000	; 0x2710
 800184e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001850:	4b16      	ldr	r3, [pc, #88]	; (80018ac <MX_TIM3_Init+0x94>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <MX_TIM3_Init+0x94>)
 8001858:	2280      	movs	r2, #128	; 0x80
 800185a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800185c:	4813      	ldr	r0, [pc, #76]	; (80018ac <MX_TIM3_Init+0x94>)
 800185e:	f004 fa97 	bl	8005d90 <HAL_TIM_Base_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001868:	f000 f98a 	bl	8001b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800186c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001870:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	4619      	mov	r1, r3
 8001878:	480c      	ldr	r0, [pc, #48]	; (80018ac <MX_TIM3_Init+0x94>)
 800187a:	f004 fd69 	bl	8006350 <HAL_TIM_ConfigClockSource>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001884:	f000 f97c 	bl	8001b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001890:	463b      	mov	r3, r7
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_TIM3_Init+0x94>)
 8001896:	f005 f93b 	bl	8006b10 <HAL_TIMEx_MasterConfigSynchronization>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80018a0:	f000 f96e 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018a4:	bf00      	nop
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000148 	.word	0x20000148
 80018b0:	40000400 	.word	0x40000400

080018b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	; 0x30
 80018b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	4ba5      	ldr	r3, [pc, #660]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4aa4      	ldr	r2, [pc, #656]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 80018d4:	f043 0310 	orr.w	r3, r3, #16
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4ba2      	ldr	r3, [pc, #648]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	4b9e      	ldr	r3, [pc, #632]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a9d      	ldr	r2, [pc, #628]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b9b      	ldr	r3, [pc, #620]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b97      	ldr	r3, [pc, #604]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a96      	ldr	r2, [pc, #600]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 800190c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b94      	ldr	r3, [pc, #592]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b90      	ldr	r3, [pc, #576]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a8f      	ldr	r2, [pc, #572]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b8d      	ldr	r3, [pc, #564]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	4b89      	ldr	r3, [pc, #548]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a88      	ldr	r2, [pc, #544]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b86      	ldr	r3, [pc, #536]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	4b82      	ldr	r3, [pc, #520]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a81      	ldr	r2, [pc, #516]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b7f      	ldr	r3, [pc, #508]	; (8001b64 <MX_GPIO_Init+0x2b0>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8001972:	2200      	movs	r2, #0
 8001974:	217c      	movs	r1, #124	; 0x7c
 8001976:	487c      	ldr	r0, [pc, #496]	; (8001b68 <MX_GPIO_Init+0x2b4>)
 8001978:	f000 ff34 	bl	80027e4 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800197c:	2201      	movs	r2, #1
 800197e:	2101      	movs	r1, #1
 8001980:	487a      	ldr	r0, [pc, #488]	; (8001b6c <MX_GPIO_Init+0x2b8>)
 8001982:	f000 ff2f 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001986:	2200      	movs	r2, #0
 8001988:	f64f 7110 	movw	r1, #65296	; 0xff10
 800198c:	4878      	ldr	r0, [pc, #480]	; (8001b70 <MX_GPIO_Init+0x2bc>)
 800198e:	f000 ff29 	bl	80027e4 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001998:	4876      	ldr	r0, [pc, #472]	; (8001b74 <MX_GPIO_Init+0x2c0>)
 800199a:	f000 ff23 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 800199e:	2374      	movs	r3, #116	; 0x74
 80019a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	486c      	ldr	r0, [pc, #432]	; (8001b68 <MX_GPIO_Init+0x2b4>)
 80019b6:	f000 fd61 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80019ba:	2308      	movs	r3, #8
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019be:	2301      	movs	r3, #1
 80019c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	4865      	ldr	r0, [pc, #404]	; (8001b68 <MX_GPIO_Init+0x2b4>)
 80019d2:	f000 fd53 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 80019d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	4860      	ldr	r0, [pc, #384]	; (8001b6c <MX_GPIO_Init+0x2b8>)
 80019ec:	f000 fd46 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80019f0:	2301      	movs	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	4859      	ldr	r0, [pc, #356]	; (8001b6c <MX_GPIO_Init+0x2b8>)
 8001a08:	f000 fd38 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a1c:	2305      	movs	r3, #5
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	4619      	mov	r1, r3
 8001a26:	4851      	ldr	r0, [pc, #324]	; (8001b6c <MX_GPIO_Init+0x2b8>)
 8001a28:	f000 fd28 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a30:	4b51      	ldr	r3, [pc, #324]	; (8001b78 <MX_GPIO_Init+0x2c4>)
 8001a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	484f      	ldr	r0, [pc, #316]	; (8001b7c <MX_GPIO_Init+0x2c8>)
 8001a40:	f000 fd1c 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a44:	2304      	movs	r3, #4
 8001a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	4847      	ldr	r0, [pc, #284]	; (8001b74 <MX_GPIO_Init+0x2c0>)
 8001a58:	f000 fd10 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a6e:	2305      	movs	r3, #5
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	483e      	ldr	r0, [pc, #248]	; (8001b74 <MX_GPIO_Init+0x2c0>)
 8001a7a:	f000 fcff 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001a7e:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8001a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	4838      	ldr	r0, [pc, #224]	; (8001b74 <MX_GPIO_Init+0x2c0>)
 8001a94:	f000 fcf2 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001a98:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001a9c:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	482f      	ldr	r0, [pc, #188]	; (8001b70 <MX_GPIO_Init+0x2bc>)
 8001ab2:	f000 fce3 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aba:	2300      	movs	r3, #0
 8001abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4829      	ldr	r0, [pc, #164]	; (8001b70 <MX_GPIO_Init+0x2bc>)
 8001aca:	f000 fcd7 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ace:	2340      	movs	r3, #64	; 0x40
 8001ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4823      	ldr	r0, [pc, #140]	; (8001b74 <MX_GPIO_Init+0x2c0>)
 8001ae6:	f000 fcc9 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001aea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	4619      	mov	r1, r3
 8001b02:	481c      	ldr	r0, [pc, #112]	; (8001b74 <MX_GPIO_Init+0x2c0>)
 8001b04:	f000 fcba 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0e:	2312      	movs	r3, #18
 8001b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	4619      	mov	r1, r3
 8001b24:	4813      	ldr	r0, [pc, #76]	; (8001b74 <MX_GPIO_Init+0x2c0>)
 8001b26:	f000 fca9 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480a      	ldr	r0, [pc, #40]	; (8001b68 <MX_GPIO_Init+0x2b4>)
 8001b3e:	f000 fc9d 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_GPIO_Init+0x2c4>)
 8001b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	4804      	ldr	r0, [pc, #16]	; (8001b68 <MX_GPIO_Init+0x2b4>)
 8001b56:	f000 fc91 	bl	800247c <HAL_GPIO_Init>

}
 8001b5a:	bf00      	nop
 8001b5c:	3730      	adds	r7, #48	; 0x30
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	40020c00 	.word	0x40020c00
 8001b74:	40020400 	.word	0x40020400
 8001b78:	10120000 	.word	0x10120000
 8001b7c:	40020000 	.word	0x40020000

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <Error_Handler+0x8>
	...

08001b8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <HAL_MspInit+0x5c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a13      	ldr	r2, [pc, #76]	; (8001be8 <HAL_MspInit+0x5c>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_MspInit+0x5c>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <HAL_MspInit+0x5c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <HAL_MspInit+0x5c>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_MspInit+0x5c>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bca:	2007      	movs	r0, #7
 8001bcc:	f000 fc14 	bl	80023f8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2005      	movs	r0, #5
 8001bd6:	f000 fc1a 	bl	800240e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001bda:	2005      	movs	r0, #5
 8001bdc:	f000 fc33 	bl	8002446 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800

08001bec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a28      	ldr	r2, [pc, #160]	; (8001cac <HAL_I2S_MspInit+0xc0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d14a      	bne.n	8001ca4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <HAL_I2S_MspInit+0xc4>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a26      	ldr	r2, [pc, #152]	; (8001cb0 <HAL_I2S_MspInit+0xc4>)
 8001c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1e:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_I2S_MspInit+0xc4>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_I2S_MspInit+0xc4>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <HAL_I2S_MspInit+0xc4>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_I2S_MspInit+0xc4>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_I2S_MspInit+0xc4>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a18      	ldr	r2, [pc, #96]	; (8001cb0 <HAL_I2S_MspInit+0xc4>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_I2S_MspInit+0xc4>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001c62:	2310      	movs	r3, #16
 8001c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c72:	2306      	movs	r3, #6
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <HAL_I2S_MspInit+0xc8>)
 8001c7e:	f000 fbfd 	bl	800247c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001c82:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c94:	2306      	movs	r3, #6
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <HAL_I2S_MspInit+0xcc>)
 8001ca0:	f000 fbec 	bl	800247c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	3728      	adds	r7, #40	; 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40003c00 	.word	0x40003c00
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	40020800 	.word	0x40020800

08001cbc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <HAL_RNG_MspInit+0x3c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d10d      	bne.n	8001cea <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_RNG_MspInit+0x40>)
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd6:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <HAL_RNG_MspInit+0x40>)
 8001cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cdc:	6353      	str	r3, [r2, #52]	; 0x34
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <HAL_RNG_MspInit+0x40>)
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	50060800 	.word	0x50060800
 8001cfc:	40023800 	.word	0x40023800

08001d00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	; 0x30
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a41      	ldr	r2, [pc, #260]	; (8001e24 <HAL_SPI_MspInit+0x124>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d12c      	bne.n	8001d7c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	4b40      	ldr	r3, [pc, #256]	; (8001e28 <HAL_SPI_MspInit+0x128>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a3f      	ldr	r2, [pc, #252]	; (8001e28 <HAL_SPI_MspInit+0x128>)
 8001d2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <HAL_SPI_MspInit+0x128>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <HAL_SPI_MspInit+0x128>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a38      	ldr	r2, [pc, #224]	; (8001e28 <HAL_SPI_MspInit+0x128>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <HAL_SPI_MspInit+0x128>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001d5a:	23e0      	movs	r3, #224	; 0xe0
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d6a:	2305      	movs	r3, #5
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6e:	f107 031c 	add.w	r3, r7, #28
 8001d72:	4619      	mov	r1, r3
 8001d74:	482d      	ldr	r0, [pc, #180]	; (8001e2c <HAL_SPI_MspInit+0x12c>)
 8001d76:	f000 fb81 	bl	800247c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d7a:	e04f      	b.n	8001e1c <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2b      	ldr	r2, [pc, #172]	; (8001e30 <HAL_SPI_MspInit+0x130>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d14a      	bne.n	8001e1c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <HAL_SPI_MspInit+0x128>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a26      	ldr	r2, [pc, #152]	; (8001e28 <HAL_SPI_MspInit+0x128>)
 8001d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_SPI_MspInit+0x128>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_SPI_MspInit+0x128>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a1f      	ldr	r2, [pc, #124]	; (8001e28 <HAL_SPI_MspInit+0x128>)
 8001dac:	f043 0304 	orr.w	r3, r3, #4
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_SPI_MspInit+0x128>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_SPI_MspInit+0x128>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <HAL_SPI_MspInit+0x128>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_SPI_MspInit+0x128>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dea:	2305      	movs	r3, #5
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	4619      	mov	r1, r3
 8001df4:	480f      	ldr	r0, [pc, #60]	; (8001e34 <HAL_SPI_MspInit+0x134>)
 8001df6:	f000 fb41 	bl	800247c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001dfa:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e0c:	2305      	movs	r3, #5
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	4619      	mov	r1, r3
 8001e16:	4808      	ldr	r0, [pc, #32]	; (8001e38 <HAL_SPI_MspInit+0x138>)
 8001e18:	f000 fb30 	bl	800247c <HAL_GPIO_Init>
}
 8001e1c:	bf00      	nop
 8001e1e:	3730      	adds	r7, #48	; 0x30
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40013000 	.word	0x40013000
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020000 	.word	0x40020000
 8001e30:	40003800 	.word	0x40003800
 8001e34:	40020800 	.word	0x40020800
 8001e38:	40020400 	.word	0x40020400

08001e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4c:	d10e      	bne.n	8001e6c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b16      	ldr	r3, [pc, #88]	; (8001eac <HAL_TIM_Base_MspInit+0x70>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	4a15      	ldr	r2, [pc, #84]	; (8001eac <HAL_TIM_Base_MspInit+0x70>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <HAL_TIM_Base_MspInit+0x70>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e6a:	e01a      	b.n	8001ea2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0f      	ldr	r2, [pc, #60]	; (8001eb0 <HAL_TIM_Base_MspInit+0x74>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d115      	bne.n	8001ea2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_TIM_Base_MspInit+0x70>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <HAL_TIM_Base_MspInit+0x70>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_TIM_Base_MspInit+0x70>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	201d      	movs	r0, #29
 8001e98:	f000 fab9 	bl	800240e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e9c:	201d      	movs	r0, #29
 8001e9e:	f000 fad2 	bl	8002446 <HAL_NVIC_EnableIRQ>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40000400 	.word	0x40000400

08001eb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 030c 	add.w	r3, r7, #12
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed4:	d11e      	bne.n	8001f14 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_TIM_MspPostInit+0x68>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <HAL_TIM_MspPostInit+0x68>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_TIM_MspPostInit+0x68>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ef6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f04:	2301      	movs	r3, #1
 8001f06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4804      	ldr	r0, [pc, #16]	; (8001f20 <HAL_TIM_MspPostInit+0x6c>)
 8001f10:	f000 fab4 	bl	800247c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f14:	bf00      	nop
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020000 	.word	0x40020000

08001f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <NMI_Handler+0x4>

08001f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <HardFault_Handler+0x4>

08001f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <MemManage_Handler+0x4>

08001f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <BusFault_Handler+0x4>

08001f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <UsageFault_Handler+0x4>

08001f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f70:	f000 f92e 	bl	80021d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 8001f8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f90:	481b      	ldr	r0, [pc, #108]	; (8002000 <TIM2_IRQHandler+0x78>)
 8001f92:	f000 fc40 	bl	8002816 <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <TIM2_IRQHandler+0x7c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d111      	bne.n	8001fc2 <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <TIM2_IRQHandler+0x80>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2bc8      	cmp	r3, #200	; 0xc8
 8001fa4:	dc0a      	bgt.n	8001fbc <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <TIM2_IRQHandler+0x80>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4b18      	ldr	r3, [pc, #96]	; (800200c <TIM2_IRQHandler+0x84>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 8001fb0:	4b15      	ldr	r3, [pc, #84]	; (8002008 <TIM2_IRQHandler+0x80>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4a14      	ldr	r2, [pc, #80]	; (8002008 <TIM2_IRQHandler+0x80>)
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	e002      	b.n	8001fc2 <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <TIM2_IRQHandler+0x7c>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <TIM2_IRQHandler+0x7c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d114      	bne.n	8001ff4 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <TIM2_IRQHandler+0x80>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b63      	cmp	r3, #99	; 0x63
 8001fd0:	dd0a      	ble.n	8001fe8 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <TIM2_IRQHandler+0x80>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	; (800200c <TIM2_IRQHandler+0x84>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <TIM2_IRQHandler+0x80>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	4a09      	ldr	r2, [pc, #36]	; (8002008 <TIM2_IRQHandler+0x80>)
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e005      	b.n	8001ff4 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <TIM2_IRQHandler+0x7c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
		  i = 100;
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <TIM2_IRQHandler+0x80>)
 8001ff0:	2264      	movs	r2, #100	; 0x64
 8001ff2:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ff4:	4805      	ldr	r0, [pc, #20]	; (800200c <TIM2_IRQHandler+0x84>)
 8001ff6:	f003 ffe4 	bl	8005fc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40020c00 	.word	0x40020c00
 8002004:	200000b4 	.word	0x200000b4
 8002008:	20000004 	.word	0x20000004
 800200c:	200001f8 	.word	0x200001f8

08002010 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002018:	4804      	ldr	r0, [pc, #16]	; (800202c <TIM3_IRQHandler+0x1c>)
 800201a:	f000 fbfc 	bl	8002816 <HAL_GPIO_TogglePin>
  read_digits();
 800201e:	f7fe fff5 	bl	800100c <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002022:	4803      	ldr	r0, [pc, #12]	; (8002030 <TIM3_IRQHandler+0x20>)
 8002024:	f003 ffcd 	bl	8005fc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40020c00 	.word	0x40020c00
 8002030:	20000148 	.word	0x20000148

08002034 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <OTG_FS_IRQHandler+0x10>)
 800203a:	f000 fe71 	bl	8002d20 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000664 	.word	0x20000664

08002048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <_sbrk+0x5c>)
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <_sbrk+0x60>)
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800205c:	4b13      	ldr	r3, [pc, #76]	; (80020ac <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <_sbrk+0x64>)
 8002066:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <_sbrk+0x68>)
 8002068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <_sbrk+0x64>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	429a      	cmp	r2, r3
 8002076:	d207      	bcs.n	8002088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002078:	f007 ff42 	bl	8009f00 <__errno>
 800207c:	4603      	mov	r3, r0
 800207e:	220c      	movs	r2, #12
 8002080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002086:	e009      	b.n	800209c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	4a05      	ldr	r2, [pc, #20]	; (80020ac <_sbrk+0x64>)
 8002098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20020000 	.word	0x20020000
 80020a8:	00000400 	.word	0x00000400
 80020ac:	200000b8 	.word	0x200000b8
 80020b0:	20000978 	.word	0x20000978

080020b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <SystemInit+0x20>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <SystemInit+0x20>)
 80020c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002110 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020dc:	480d      	ldr	r0, [pc, #52]	; (8002114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020de:	490e      	ldr	r1, [pc, #56]	; (8002118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020e0:	4a0e      	ldr	r2, [pc, #56]	; (800211c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e4:	e002      	b.n	80020ec <LoopCopyDataInit>

080020e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ea:	3304      	adds	r3, #4

080020ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f0:	d3f9      	bcc.n	80020e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f2:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020f4:	4c0b      	ldr	r4, [pc, #44]	; (8002124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f8:	e001      	b.n	80020fe <LoopFillZerobss>

080020fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020fc:	3204      	adds	r2, #4

080020fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002100:	d3fb      	bcc.n	80020fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002102:	f7ff ffd7 	bl	80020b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002106:	f007 ff01 	bl	8009f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210a:	f7ff f985 	bl	8001418 <main>
  bx  lr    
 800210e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002118:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800211c:	0800a390 	.word	0x0800a390
  ldr r2, =_sbss
 8002120:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002124:	20000978 	.word	0x20000978

08002128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002128:	e7fe      	b.n	8002128 <ADC_IRQHandler>
	...

0800212c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002130:	4b0e      	ldr	r3, [pc, #56]	; (800216c <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0d      	ldr	r2, [pc, #52]	; (800216c <HAL_Init+0x40>)
 8002136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800213a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0a      	ldr	r2, [pc, #40]	; (800216c <HAL_Init+0x40>)
 8002142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a07      	ldr	r2, [pc, #28]	; (800216c <HAL_Init+0x40>)
 800214e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002154:	2003      	movs	r0, #3
 8002156:	f000 f94f 	bl	80023f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215a:	2000      	movs	r0, #0
 800215c:	f000 f808 	bl	8002170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002160:	f7ff fd14 	bl	8001b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023c00 	.word	0x40023c00

08002170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_InitTick+0x54>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_InitTick+0x58>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002186:	fbb3 f3f1 	udiv	r3, r3, r1
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f967 	bl	8002462 <HAL_SYSTICK_Config>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e00e      	b.n	80021bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	d80a      	bhi.n	80021ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a4:	2200      	movs	r2, #0
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ac:	f000 f92f 	bl	800240e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b0:	4a06      	ldr	r2, [pc, #24]	; (80021cc <HAL_InitTick+0x5c>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000008 	.word	0x20000008
 80021c8:	20000010 	.word	0x20000010
 80021cc:	2000000c 	.word	0x2000000c

080021d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_IncTick+0x20>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_IncTick+0x24>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <HAL_IncTick+0x24>)
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000010 	.word	0x20000010
 80021f4:	20000288 	.word	0x20000288

080021f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return uwTick;
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <HAL_GetTick+0x14>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000288 	.word	0x20000288

08002210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002218:	f7ff ffee 	bl	80021f8 <HAL_GetTick>
 800221c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002228:	d005      	beq.n	8002236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_Delay+0x44>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002236:	bf00      	nop
 8002238:	f7ff ffde 	bl	80021f8 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	429a      	cmp	r2, r3
 8002246:	d8f7      	bhi.n	8002238 <HAL_Delay+0x28>
  {
  }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000010 	.word	0x20000010

08002258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002274:	4013      	ands	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228a:	4a04      	ldr	r2, [pc, #16]	; (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	60d3      	str	r3, [r2, #12]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <__NVIC_GetPriorityGrouping+0x18>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	0a1b      	lsrs	r3, r3, #8
 80022aa:	f003 0307 	and.w	r3, r3, #7
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	db0b      	blt.n	80022e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	f003 021f 	and.w	r2, r3, #31
 80022d4:	4907      	ldr	r1, [pc, #28]	; (80022f4 <__NVIC_EnableIRQ+0x38>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	2001      	movs	r0, #1
 80022de:	fa00 f202 	lsl.w	r2, r0, r2
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000e100 	.word	0xe000e100

080022f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	6039      	str	r1, [r7, #0]
 8002302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002308:	2b00      	cmp	r3, #0
 800230a:	db0a      	blt.n	8002322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	490c      	ldr	r1, [pc, #48]	; (8002344 <__NVIC_SetPriority+0x4c>)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	0112      	lsls	r2, r2, #4
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	440b      	add	r3, r1
 800231c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002320:	e00a      	b.n	8002338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	b2da      	uxtb	r2, r3
 8002326:	4908      	ldr	r1, [pc, #32]	; (8002348 <__NVIC_SetPriority+0x50>)
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	3b04      	subs	r3, #4
 8002330:	0112      	lsls	r2, r2, #4
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	440b      	add	r3, r1
 8002336:	761a      	strb	r2, [r3, #24]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000e100 	.word	0xe000e100
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800234c:	b480      	push	{r7}
 800234e:	b089      	sub	sp, #36	; 0x24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f1c3 0307 	rsb	r3, r3, #7
 8002366:	2b04      	cmp	r3, #4
 8002368:	bf28      	it	cs
 800236a:	2304      	movcs	r3, #4
 800236c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3304      	adds	r3, #4
 8002372:	2b06      	cmp	r3, #6
 8002374:	d902      	bls.n	800237c <NVIC_EncodePriority+0x30>
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3b03      	subs	r3, #3
 800237a:	e000      	b.n	800237e <NVIC_EncodePriority+0x32>
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43da      	mvns	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	401a      	ands	r2, r3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002394:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	fa01 f303 	lsl.w	r3, r1, r3
 800239e:	43d9      	mvns	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	4313      	orrs	r3, r2
         );
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3724      	adds	r7, #36	; 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c4:	d301      	bcc.n	80023ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00f      	b.n	80023ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ca:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <SysTick_Config+0x40>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023d2:	210f      	movs	r1, #15
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023d8:	f7ff ff8e 	bl	80022f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <SysTick_Config+0x40>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e2:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <SysTick_Config+0x40>)
 80023e4:	2207      	movs	r2, #7
 80023e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	e000e010 	.word	0xe000e010

080023f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff ff29 	bl	8002258 <__NVIC_SetPriorityGrouping>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800240e:	b580      	push	{r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af00      	add	r7, sp, #0
 8002414:	4603      	mov	r3, r0
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002420:	f7ff ff3e 	bl	80022a0 <__NVIC_GetPriorityGrouping>
 8002424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	6978      	ldr	r0, [r7, #20]
 800242c:	f7ff ff8e 	bl	800234c <NVIC_EncodePriority>
 8002430:	4602      	mov	r2, r0
 8002432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff5d 	bl	80022f8 <__NVIC_SetPriority>
}
 800243e:	bf00      	nop
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	4603      	mov	r3, r0
 800244e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff31 	bl	80022bc <__NVIC_EnableIRQ>
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ffa2 	bl	80023b4 <SysTick_Config>
 8002470:	4603      	mov	r3, r0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e16b      	b.n	8002770 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	f040 815a 	bne.w	800276a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d005      	beq.n	80024ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d130      	bne.n	8002530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 0201 	and.w	r2, r3, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b03      	cmp	r3, #3
 800253a:	d017      	beq.n	800256c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d123      	bne.n	80025c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	08da      	lsrs	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3208      	adds	r2, #8
 8002580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	220f      	movs	r2, #15
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	08da      	lsrs	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3208      	adds	r2, #8
 80025ba:	69b9      	ldr	r1, [r7, #24]
 80025bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0203 	and.w	r2, r3, #3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80b4 	beq.w	800276a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b60      	ldr	r3, [pc, #384]	; (8002788 <HAL_GPIO_Init+0x30c>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a5f      	ldr	r2, [pc, #380]	; (8002788 <HAL_GPIO_Init+0x30c>)
 800260c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b5d      	ldr	r3, [pc, #372]	; (8002788 <HAL_GPIO_Init+0x30c>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261e:	4a5b      	ldr	r2, [pc, #364]	; (800278c <HAL_GPIO_Init+0x310>)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3302      	adds	r3, #2
 8002626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	220f      	movs	r2, #15
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a52      	ldr	r2, [pc, #328]	; (8002790 <HAL_GPIO_Init+0x314>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d02b      	beq.n	80026a2 <HAL_GPIO_Init+0x226>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a51      	ldr	r2, [pc, #324]	; (8002794 <HAL_GPIO_Init+0x318>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d025      	beq.n	800269e <HAL_GPIO_Init+0x222>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a50      	ldr	r2, [pc, #320]	; (8002798 <HAL_GPIO_Init+0x31c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01f      	beq.n	800269a <HAL_GPIO_Init+0x21e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4f      	ldr	r2, [pc, #316]	; (800279c <HAL_GPIO_Init+0x320>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d019      	beq.n	8002696 <HAL_GPIO_Init+0x21a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4e      	ldr	r2, [pc, #312]	; (80027a0 <HAL_GPIO_Init+0x324>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0x216>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4d      	ldr	r2, [pc, #308]	; (80027a4 <HAL_GPIO_Init+0x328>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00d      	beq.n	800268e <HAL_GPIO_Init+0x212>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4c      	ldr	r2, [pc, #304]	; (80027a8 <HAL_GPIO_Init+0x32c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d007      	beq.n	800268a <HAL_GPIO_Init+0x20e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4b      	ldr	r2, [pc, #300]	; (80027ac <HAL_GPIO_Init+0x330>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <HAL_GPIO_Init+0x20a>
 8002682:	2307      	movs	r3, #7
 8002684:	e00e      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 8002686:	2308      	movs	r3, #8
 8002688:	e00c      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 800268a:	2306      	movs	r3, #6
 800268c:	e00a      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 800268e:	2305      	movs	r3, #5
 8002690:	e008      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 8002692:	2304      	movs	r3, #4
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 8002696:	2303      	movs	r3, #3
 8002698:	e004      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 800269a:	2302      	movs	r3, #2
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 80026a2:	2300      	movs	r3, #0
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	f002 0203 	and.w	r2, r2, #3
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	4093      	lsls	r3, r2
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b4:	4935      	ldr	r1, [pc, #212]	; (800278c <HAL_GPIO_Init+0x310>)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	3302      	adds	r3, #2
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c2:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <HAL_GPIO_Init+0x334>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e6:	4a32      	ldr	r2, [pc, #200]	; (80027b0 <HAL_GPIO_Init+0x334>)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026ec:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <HAL_GPIO_Init+0x334>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002710:	4a27      	ldr	r2, [pc, #156]	; (80027b0 <HAL_GPIO_Init+0x334>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <HAL_GPIO_Init+0x334>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800273a:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <HAL_GPIO_Init+0x334>)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_GPIO_Init+0x334>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002764:	4a12      	ldr	r2, [pc, #72]	; (80027b0 <HAL_GPIO_Init+0x334>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3301      	adds	r3, #1
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	2b0f      	cmp	r3, #15
 8002774:	f67f ae90 	bls.w	8002498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3724      	adds	r7, #36	; 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	40013800 	.word	0x40013800
 8002790:	40020000 	.word	0x40020000
 8002794:	40020400 	.word	0x40020400
 8002798:	40020800 	.word	0x40020800
 800279c:	40020c00 	.word	0x40020c00
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40021400 	.word	0x40021400
 80027a8:	40021800 	.word	0x40021800
 80027ac:	40021c00 	.word	0x40021c00
 80027b0:	40013c00 	.word	0x40013c00

080027b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	887b      	ldrh	r3, [r7, #2]
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e001      	b.n	80027d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
 80027f0:	4613      	mov	r3, r2
 80027f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f4:	787b      	ldrb	r3, [r7, #1]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002800:	e003      	b.n	800280a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002802:	887b      	ldrh	r3, [r7, #2]
 8002804:	041a      	lsls	r2, r3, #16
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	619a      	str	r2, [r3, #24]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002816:	b480      	push	{r7}
 8002818:	b085      	sub	sp, #20
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	460b      	mov	r3, r1
 8002820:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002828:	887a      	ldrh	r2, [r7, #2]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4013      	ands	r3, r2
 800282e:	041a      	lsls	r2, r3, #16
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	43d9      	mvns	r1, r3
 8002834:	887b      	ldrh	r3, [r7, #2]
 8002836:	400b      	ands	r3, r1
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	619a      	str	r2, [r3, #24]
}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800284a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284c:	b08f      	sub	sp, #60	; 0x3c
 800284e:	af0a      	add	r7, sp, #40	; 0x28
 8002850:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e054      	b.n	8002906 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f007 f898 	bl	80099ac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2203      	movs	r2, #3
 8002880:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f004 fa3a 	bl	8006d14 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	687e      	ldr	r6, [r7, #4]
 80028a8:	466d      	mov	r5, sp
 80028aa:	f106 0410 	add.w	r4, r6, #16
 80028ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80028be:	1d33      	adds	r3, r6, #4
 80028c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028c2:	6838      	ldr	r0, [r7, #0]
 80028c4:	f004 f9b4 	bl	8006c30 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2101      	movs	r1, #1
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 fa31 	bl	8006d36 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	687e      	ldr	r6, [r7, #4]
 80028dc:	466d      	mov	r5, sp
 80028de:	f106 0410 	add.w	r4, r6, #16
 80028e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80028f2:	1d33      	adds	r3, r6, #4
 80028f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f6:	6838      	ldr	r0, [r7, #0]
 80028f8:	f004 fb44 	bl	8006f84 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800290e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800290e:	b590      	push	{r4, r7, lr}
 8002910:	b089      	sub	sp, #36	; 0x24
 8002912:	af04      	add	r7, sp, #16
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	4608      	mov	r0, r1
 8002918:	4611      	mov	r1, r2
 800291a:	461a      	mov	r2, r3
 800291c:	4603      	mov	r3, r0
 800291e:	70fb      	strb	r3, [r7, #3]
 8002920:	460b      	mov	r3, r1
 8002922:	70bb      	strb	r3, [r7, #2]
 8002924:	4613      	mov	r3, r2
 8002926:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_HCD_HC_Init+0x28>
 8002932:	2302      	movs	r3, #2
 8002934:	e076      	b.n	8002a24 <HAL_HCD_HC_Init+0x116>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	4413      	add	r3, r2
 800294a:	333d      	adds	r3, #61	; 0x3d
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	3338      	adds	r3, #56	; 0x38
 800295e:	787a      	ldrb	r2, [r7, #1]
 8002960:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	3340      	adds	r3, #64	; 0x40
 8002970:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002972:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	3339      	adds	r3, #57	; 0x39
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	333f      	adds	r3, #63	; 0x3f
 8002994:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002998:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	78ba      	ldrb	r2, [r7, #2]
 800299e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029a2:	b2d0      	uxtb	r0, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	333a      	adds	r3, #58	; 0x3a
 80029b0:	4602      	mov	r2, r0
 80029b2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80029b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	da09      	bge.n	80029d0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	212c      	movs	r1, #44	; 0x2c
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	333b      	adds	r3, #59	; 0x3b
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	e008      	b.n	80029e2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	333b      	adds	r3, #59	; 0x3b
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	333c      	adds	r3, #60	; 0x3c
 80029f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80029f4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	787c      	ldrb	r4, [r7, #1]
 80029fc:	78ba      	ldrb	r2, [r7, #2]
 80029fe:	78f9      	ldrb	r1, [r7, #3]
 8002a00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a02:	9302      	str	r3, [sp, #8]
 8002a04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	4623      	mov	r3, r4
 8002a12:	f004 fc39 	bl	8007288 <USB_HC_Init>
 8002a16:	4603      	mov	r3, r0
 8002a18:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd90      	pop	{r4, r7, pc}

08002a2c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_HCD_HC_Halt+0x1e>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e00f      	b.n	8002a6a <HAL_HCD_HC_Halt+0x3e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f004 fe75 	bl	800774a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	4608      	mov	r0, r1
 8002a7e:	4611      	mov	r1, r2
 8002a80:	461a      	mov	r2, r3
 8002a82:	4603      	mov	r3, r0
 8002a84:	70fb      	strb	r3, [r7, #3]
 8002a86:	460b      	mov	r3, r1
 8002a88:	70bb      	strb	r3, [r7, #2]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	333b      	adds	r3, #59	; 0x3b
 8002a9c:	78ba      	ldrb	r2, [r7, #2]
 8002a9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	333f      	adds	r3, #63	; 0x3f
 8002aae:	787a      	ldrb	r2, [r7, #1]
 8002ab0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002ab2:	7c3b      	ldrb	r3, [r7, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d112      	bne.n	8002ade <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3342      	adds	r3, #66	; 0x42
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	333d      	adds	r3, #61	; 0x3d
 8002ad8:	7f3a      	ldrb	r2, [r7, #28]
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e008      	b.n	8002af0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	3342      	adds	r3, #66	; 0x42
 8002aec:	2202      	movs	r2, #2
 8002aee:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002af0:	787b      	ldrb	r3, [r7, #1]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	f200 80c6 	bhi.w	8002c84 <HAL_HCD_HC_SubmitRequest+0x210>
 8002af8:	a201      	add	r2, pc, #4	; (adr r2, 8002b00 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afe:	bf00      	nop
 8002b00:	08002b11 	.word	0x08002b11
 8002b04:	08002c71 	.word	0x08002c71
 8002b08:	08002b75 	.word	0x08002b75
 8002b0c:	08002bf3 	.word	0x08002bf3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002b10:	7c3b      	ldrb	r3, [r7, #16]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	f040 80b8 	bne.w	8002c88 <HAL_HCD_HC_SubmitRequest+0x214>
 8002b18:	78bb      	ldrb	r3, [r7, #2]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f040 80b4 	bne.w	8002c88 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002b20:	8b3b      	ldrh	r3, [r7, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d108      	bne.n	8002b38 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3355      	adds	r3, #85	; 0x55
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b38:	78fb      	ldrb	r3, [r7, #3]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	212c      	movs	r1, #44	; 0x2c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	3355      	adds	r3, #85	; 0x55
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	212c      	movs	r1, #44	; 0x2c
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	3342      	adds	r3, #66	; 0x42
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b5e:	e093      	b.n	8002c88 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3342      	adds	r3, #66	; 0x42
 8002b6e:	2202      	movs	r2, #2
 8002b70:	701a      	strb	r2, [r3, #0]
      break;
 8002b72:	e089      	b.n	8002c88 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002b74:	78bb      	ldrb	r3, [r7, #2]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d11d      	bne.n	8002bb6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	212c      	movs	r1, #44	; 0x2c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	3355      	adds	r3, #85	; 0x55
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3342      	adds	r3, #66	; 0x42
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002ba0:	e073      	b.n	8002c8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	3342      	adds	r3, #66	; 0x42
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	701a      	strb	r2, [r3, #0]
      break;
 8002bb4:	e069      	b.n	8002c8a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3354      	adds	r3, #84	; 0x54
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	212c      	movs	r1, #44	; 0x2c
 8002bd0:	fb01 f303 	mul.w	r3, r1, r3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3342      	adds	r3, #66	; 0x42
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
      break;
 8002bdc:	e055      	b.n	8002c8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3342      	adds	r3, #66	; 0x42
 8002bec:	2202      	movs	r2, #2
 8002bee:	701a      	strb	r2, [r3, #0]
      break;
 8002bf0:	e04b      	b.n	8002c8a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002bf2:	78bb      	ldrb	r3, [r7, #2]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d11d      	bne.n	8002c34 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3355      	adds	r3, #85	; 0x55
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d109      	bne.n	8002c20 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	212c      	movs	r1, #44	; 0x2c
 8002c12:	fb01 f303 	mul.w	r3, r1, r3
 8002c16:	4413      	add	r3, r2
 8002c18:	3342      	adds	r3, #66	; 0x42
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c1e:	e034      	b.n	8002c8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	212c      	movs	r1, #44	; 0x2c
 8002c26:	fb01 f303 	mul.w	r3, r1, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3342      	adds	r3, #66	; 0x42
 8002c2e:	2202      	movs	r2, #2
 8002c30:	701a      	strb	r2, [r3, #0]
      break;
 8002c32:	e02a      	b.n	8002c8a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	212c      	movs	r1, #44	; 0x2c
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	3354      	adds	r3, #84	; 0x54
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	3342      	adds	r3, #66	; 0x42
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
      break;
 8002c5a:	e016      	b.n	8002c8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	3342      	adds	r3, #66	; 0x42
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	701a      	strb	r2, [r3, #0]
      break;
 8002c6e:	e00c      	b.n	8002c8a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3342      	adds	r3, #66	; 0x42
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
      break;
 8002c82:	e002      	b.n	8002c8a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002c84:	bf00      	nop
 8002c86:	e000      	b.n	8002c8a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002c88:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	3344      	adds	r3, #68	; 0x44
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	8b3a      	ldrh	r2, [r7, #24]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	202c      	movs	r0, #44	; 0x2c
 8002ca4:	fb00 f303 	mul.w	r3, r0, r3
 8002ca8:	440b      	add	r3, r1
 8002caa:	334c      	adds	r3, #76	; 0x4c
 8002cac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3360      	adds	r3, #96	; 0x60
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3350      	adds	r3, #80	; 0x50
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	3339      	adds	r3, #57	; 0x39
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3361      	adds	r3, #97	; 0x61
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	222c      	movs	r2, #44	; 0x2c
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	3338      	adds	r3, #56	; 0x38
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	18d1      	adds	r1, r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f004 fbc8 	bl	80074a4 <USB_HC_StartXfer>
 8002d14:	4603      	mov	r3, r0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop

08002d20 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f004 f8e1 	bl	8006efe <USB_GetMode>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	f040 80ef 	bne.w	8002f22 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f004 f8c5 	bl	8006ed8 <USB_ReadInterrupts>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80e5 	beq.w	8002f20 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f004 f8bc 	bl	8006ed8 <USB_ReadInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d6a:	d104      	bne.n	8002d76 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f004 f8ac 	bl	8006ed8 <USB_ReadInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d8a:	d104      	bne.n	8002d96 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f004 f89c 	bl	8006ed8 <USB_ReadInterrupts>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002daa:	d104      	bne.n	8002db6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002db4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f004 f88c 	bl	8006ed8 <USB_ReadInterrupts>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d103      	bne.n	8002dd2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f004 f87e 	bl	8006ed8 <USB_ReadInterrupts>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de6:	d115      	bne.n	8002e14 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002df0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d108      	bne.n	8002e14 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f006 fe50 	bl	8009aa8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f004 f974 	bl	80070fc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f004 f85d 	bl	8006ed8 <USB_ReadInterrupts>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e28:	d102      	bne.n	8002e30 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f001 f9ff 	bl	800422e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f004 f84f 	bl	8006ed8 <USB_ReadInterrupts>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d106      	bne.n	8002e52 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f006 fe13 	bl	8009a70 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2208      	movs	r2, #8
 8002e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f004 f83e 	bl	8006ed8 <USB_ReadInterrupts>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d101      	bne.n	8002e6a <HAL_HCD_IRQHandler+0x14a>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <HAL_HCD_IRQHandler+0x14c>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d012      	beq.n	8002e96 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0210 	bic.w	r2, r2, #16
 8002e7e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f001 f902 	bl	800408a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0210 	orr.w	r2, r2, #16
 8002e94:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f004 f81c 	bl	8006ed8 <USB_ReadInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eaa:	d13a      	bne.n	8002f22 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f004 fc39 	bl	8007728 <USB_HC_ReadInterrupt>
 8002eb6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	e025      	b.n	8002f0a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d018      	beq.n	8002f04 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee8:	d106      	bne.n	8002ef8 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f8ab 	bl	800304c <HCD_HC_IN_IRQHandler>
 8002ef6:	e005      	b.n	8002f04 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	4619      	mov	r1, r3
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fcc6 	bl	8003890 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3301      	adds	r3, #1
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d3d4      	bcc.n	8002ebe <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f1c:	615a      	str	r2, [r3, #20]
 8002f1e:	e000      	b.n	8002f22 <HAL_HCD_IRQHandler+0x202>
      return;
 8002f20:	bf00      	nop
    }
  }
}
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_HCD_Start+0x16>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e013      	b.n	8002f66 <HAL_HCD_Start+0x3e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f003 fed1 	bl	8006cf2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2101      	movs	r1, #1
 8002f56:	4618      	mov	r0, r3
 8002f58:	f004 f934 	bl	80071c4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_HCD_Stop+0x16>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e00d      	b.n	8002fa0 <HAL_HCD_Stop+0x32>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f004 fd33 	bl	80079fc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f004 f8db 	bl	8007170 <USB_ResetPort>
 8002fba:	4603      	mov	r3, r0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	3360      	adds	r3, #96	; 0x60
 8002fde:	781b      	ldrb	r3, [r3, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	212c      	movs	r1, #44	; 0x2c
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	3350      	adds	r3, #80	; 0x50
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f004 f91f 	bl	8007264 <USB_GetCurrentFrame>
 8003026:	4603      	mov	r3, r0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f004 f8fa 	bl	8007236 <USB_GetHostSpeed>
 8003042:	4603      	mov	r3, r0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b04      	cmp	r3, #4
 800307a:	d119      	bne.n	80030b0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4413      	add	r3, r2
 8003084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003088:	461a      	mov	r2, r3
 800308a:	2304      	movs	r3, #4
 800308c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4413      	add	r3, r2
 8003096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	0151      	lsls	r1, r2, #5
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	440a      	add	r2, r1
 80030a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030a8:	f043 0302 	orr.w	r3, r3, #2
 80030ac:	60d3      	str	r3, [r2, #12]
 80030ae:	e101      	b.n	80032b4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c6:	d12b      	bne.n	8003120 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d4:	461a      	mov	r2, r3
 80030d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	212c      	movs	r1, #44	; 0x2c
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	3361      	adds	r3, #97	; 0x61
 80030ea:	2207      	movs	r2, #7
 80030ec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	0151      	lsls	r1, r2, #5
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	440a      	add	r2, r1
 8003104:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003108:	f043 0302 	orr.w	r3, r3, #2
 800310c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	4611      	mov	r1, r2
 8003118:	4618      	mov	r0, r3
 800311a:	f004 fb16 	bl	800774a <USB_HC_Halt>
 800311e:	e0c9      	b.n	80032b4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b20      	cmp	r3, #32
 8003134:	d109      	bne.n	800314a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4413      	add	r3, r2
 800313e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003142:	461a      	mov	r2, r3
 8003144:	2320      	movs	r3, #32
 8003146:	6093      	str	r3, [r2, #8]
 8003148:	e0b4      	b.n	80032b4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4413      	add	r3, r2
 8003152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b08      	cmp	r3, #8
 800315e:	d133      	bne.n	80031c8 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4413      	add	r3, r2
 8003168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	0151      	lsls	r1, r2, #5
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	440a      	add	r2, r1
 8003176:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800317a:	f043 0302 	orr.w	r3, r3, #2
 800317e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	3361      	adds	r3, #97	; 0x61
 800318e:	2205      	movs	r2, #5
 8003190:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4413      	add	r3, r2
 800319a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319e:	461a      	mov	r2, r3
 80031a0:	2310      	movs	r3, #16
 80031a2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b0:	461a      	mov	r2, r3
 80031b2:	2308      	movs	r3, #8
 80031b4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f004 fac2 	bl	800774a <USB_HC_Halt>
 80031c6:	e075      	b.n	80032b4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031de:	d134      	bne.n	800324a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	0151      	lsls	r1, r2, #5
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	440a      	add	r2, r1
 80031f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031fa:	f043 0302 	orr.w	r3, r3, #2
 80031fe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	212c      	movs	r1, #44	; 0x2c
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4413      	add	r3, r2
 800320c:	3361      	adds	r3, #97	; 0x61
 800320e:	2208      	movs	r2, #8
 8003210:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	461a      	mov	r2, r3
 8003220:	2310      	movs	r3, #16
 8003222:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4413      	add	r3, r2
 800322c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003230:	461a      	mov	r2, r3
 8003232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003236:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f004 fa81 	bl	800774a <USB_HC_Halt>
 8003248:	e034      	b.n	80032b4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325c:	2b80      	cmp	r3, #128	; 0x80
 800325e:	d129      	bne.n	80032b4 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	0151      	lsls	r1, r2, #5
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	440a      	add	r2, r1
 8003276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800327a:	f043 0302 	orr.w	r3, r3, #2
 800327e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	3361      	adds	r3, #97	; 0x61
 800328e:	2206      	movs	r2, #6
 8003290:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f004 fa54 	bl	800774a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ae:	461a      	mov	r2, r3
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ca:	d122      	bne.n	8003312 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	0151      	lsls	r1, r2, #5
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	440a      	add	r2, r1
 80032e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032e6:	f043 0302 	orr.w	r3, r3, #2
 80032ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f004 fa27 	bl	800774a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4413      	add	r3, r2
 8003304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003308:	461a      	mov	r2, r3
 800330a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800330e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003310:	e2ba      	b.n	8003888 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b01      	cmp	r3, #1
 8003326:	f040 811b 	bne.w	8003560 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d019      	beq.n	8003366 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	212c      	movs	r1, #44	; 0x2c
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	4413      	add	r3, r2
 800333e:	3348      	adds	r3, #72	; 0x48
 8003340:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	0159      	lsls	r1, r3, #5
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	440b      	add	r3, r1
 800334a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003354:	1ad2      	subs	r2, r2, r3
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	202c      	movs	r0, #44	; 0x2c
 800335c:	fb00 f303 	mul.w	r3, r0, r3
 8003360:	440b      	add	r3, r1
 8003362:	3350      	adds	r3, #80	; 0x50
 8003364:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	3361      	adds	r3, #97	; 0x61
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	212c      	movs	r1, #44	; 0x2c
 800337e:	fb01 f303 	mul.w	r3, r1, r3
 8003382:	4413      	add	r3, r2
 8003384:	335c      	adds	r3, #92	; 0x5c
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003396:	461a      	mov	r2, r3
 8003398:	2301      	movs	r3, #1
 800339a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	333f      	adds	r3, #63	; 0x3f
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d009      	beq.n	80033c4 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	333f      	adds	r3, #63	; 0x3f
 80033be:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d121      	bne.n	8003408 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	0151      	lsls	r1, r2, #5
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	440a      	add	r2, r1
 80033da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033de:	f043 0302 	orr.w	r3, r3, #2
 80033e2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f004 f9ab 	bl	800774a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003400:	461a      	mov	r2, r3
 8003402:	2310      	movs	r3, #16
 8003404:	6093      	str	r3, [r2, #8]
 8003406:	e066      	b.n	80034d6 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	212c      	movs	r1, #44	; 0x2c
 800340e:	fb01 f303 	mul.w	r3, r1, r3
 8003412:	4413      	add	r3, r2
 8003414:	333f      	adds	r3, #63	; 0x3f
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d127      	bne.n	800346c <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	0151      	lsls	r1, r2, #5
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	440a      	add	r2, r1
 8003432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003436:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800343a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	3360      	adds	r3, #96	; 0x60
 800344a:	2201      	movs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	b2d9      	uxtb	r1, r3
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	202c      	movs	r0, #44	; 0x2c
 8003458:	fb00 f303 	mul.w	r3, r0, r3
 800345c:	4413      	add	r3, r2
 800345e:	3360      	adds	r3, #96	; 0x60
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f006 fb2d 	bl	8009ac4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800346a:	e034      	b.n	80034d6 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	212c      	movs	r1, #44	; 0x2c
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	4413      	add	r3, r2
 8003478:	333f      	adds	r3, #63	; 0x3f
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d12a      	bne.n	80034d6 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	212c      	movs	r1, #44	; 0x2c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	3360      	adds	r3, #96	; 0x60
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	212c      	movs	r1, #44	; 0x2c
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	4413      	add	r3, r2
 800349e:	3354      	adds	r3, #84	; 0x54
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	f083 0301 	eor.w	r3, r3, #1
 80034a6:	b2d8      	uxtb	r0, r3
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	212c      	movs	r1, #44	; 0x2c
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	3354      	adds	r3, #84	; 0x54
 80034b6:	4602      	mov	r2, r0
 80034b8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	b2d9      	uxtb	r1, r3
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	202c      	movs	r0, #44	; 0x2c
 80034c4:	fb00 f303 	mul.w	r3, r0, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	3360      	adds	r3, #96	; 0x60
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f006 faf7 	bl	8009ac4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d12b      	bne.n	8003536 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	212c      	movs	r1, #44	; 0x2c
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	3348      	adds	r3, #72	; 0x48
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	202c      	movs	r0, #44	; 0x2c
 80034f4:	fb00 f202 	mul.w	r2, r0, r2
 80034f8:	440a      	add	r2, r1
 80034fa:	3240      	adds	r2, #64	; 0x40
 80034fc:	8812      	ldrh	r2, [r2, #0]
 80034fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 81be 	beq.w	8003888 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	3354      	adds	r3, #84	; 0x54
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	f083 0301 	eor.w	r3, r3, #1
 8003520:	b2d8      	uxtb	r0, r3
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	212c      	movs	r1, #44	; 0x2c
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	4413      	add	r3, r2
 800352e:	3354      	adds	r3, #84	; 0x54
 8003530:	4602      	mov	r2, r0
 8003532:	701a      	strb	r2, [r3, #0]
}
 8003534:	e1a8      	b.n	8003888 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	212c      	movs	r1, #44	; 0x2c
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	4413      	add	r3, r2
 8003542:	3354      	adds	r3, #84	; 0x54
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	f083 0301 	eor.w	r3, r3, #1
 800354a:	b2d8      	uxtb	r0, r3
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	212c      	movs	r1, #44	; 0x2c
 8003552:	fb01 f303 	mul.w	r3, r1, r3
 8003556:	4413      	add	r3, r2
 8003558:	3354      	adds	r3, #84	; 0x54
 800355a:	4602      	mov	r2, r0
 800355c:	701a      	strb	r2, [r3, #0]
}
 800355e:	e193      	b.n	8003888 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b02      	cmp	r3, #2
 8003574:	f040 8106 	bne.w	8003784 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	0151      	lsls	r1, r2, #5
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	440a      	add	r2, r1
 800358e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003592:	f023 0302 	bic.w	r3, r3, #2
 8003596:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	3361      	adds	r3, #97	; 0x61
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d109      	bne.n	80035c0 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	3360      	adds	r3, #96	; 0x60
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e0c9      	b.n	8003754 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	212c      	movs	r1, #44	; 0x2c
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	3361      	adds	r3, #97	; 0x61
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b05      	cmp	r3, #5
 80035d2:	d109      	bne.n	80035e8 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	3360      	adds	r3, #96	; 0x60
 80035e2:	2205      	movs	r2, #5
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e0b5      	b.n	8003754 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	212c      	movs	r1, #44	; 0x2c
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	3361      	adds	r3, #97	; 0x61
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b06      	cmp	r3, #6
 80035fa:	d009      	beq.n	8003610 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	212c      	movs	r1, #44	; 0x2c
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	4413      	add	r3, r2
 8003608:	3361      	adds	r3, #97	; 0x61
 800360a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800360c:	2b08      	cmp	r3, #8
 800360e:	d150      	bne.n	80036b2 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	212c      	movs	r1, #44	; 0x2c
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	4413      	add	r3, r2
 800361c:	335c      	adds	r3, #92	; 0x5c
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	202c      	movs	r0, #44	; 0x2c
 8003628:	fb00 f303 	mul.w	r3, r0, r3
 800362c:	440b      	add	r3, r1
 800362e:	335c      	adds	r3, #92	; 0x5c
 8003630:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	212c      	movs	r1, #44	; 0x2c
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	4413      	add	r3, r2
 800363e:	335c      	adds	r3, #92	; 0x5c
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d912      	bls.n	800366c <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	212c      	movs	r1, #44	; 0x2c
 800364c:	fb01 f303 	mul.w	r3, r1, r3
 8003650:	4413      	add	r3, r2
 8003652:	335c      	adds	r3, #92	; 0x5c
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	3360      	adds	r3, #96	; 0x60
 8003666:	2204      	movs	r2, #4
 8003668:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800366a:	e073      	b.n	8003754 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	212c      	movs	r1, #44	; 0x2c
 8003672:	fb01 f303 	mul.w	r3, r1, r3
 8003676:	4413      	add	r3, r2
 8003678:	3360      	adds	r3, #96	; 0x60
 800367a:	2202      	movs	r2, #2
 800367c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4413      	add	r3, r2
 8003686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003694:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800369c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036aa:	461a      	mov	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036b0:	e050      	b.n	8003754 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	212c      	movs	r1, #44	; 0x2c
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
 80036be:	3361      	adds	r3, #97	; 0x61
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d122      	bne.n	800370c <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	212c      	movs	r1, #44	; 0x2c
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	4413      	add	r3, r2
 80036d2:	3360      	adds	r3, #96	; 0x60
 80036d4:	2202      	movs	r2, #2
 80036d6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036ee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036f6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003704:	461a      	mov	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	e023      	b.n	8003754 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	3361      	adds	r3, #97	; 0x61
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b07      	cmp	r3, #7
 800371e:	d119      	bne.n	8003754 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	212c      	movs	r1, #44	; 0x2c
 8003726:	fb01 f303 	mul.w	r3, r1, r3
 800372a:	4413      	add	r3, r2
 800372c:	335c      	adds	r3, #92	; 0x5c
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	202c      	movs	r0, #44	; 0x2c
 8003738:	fb00 f303 	mul.w	r3, r0, r3
 800373c:	440b      	add	r3, r1
 800373e:	335c      	adds	r3, #92	; 0x5c
 8003740:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	212c      	movs	r1, #44	; 0x2c
 8003748:	fb01 f303 	mul.w	r3, r1, r3
 800374c:	4413      	add	r3, r2
 800374e:	3360      	adds	r3, #96	; 0x60
 8003750:	2204      	movs	r2, #4
 8003752:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4413      	add	r3, r2
 800375c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003760:	461a      	mov	r2, r3
 8003762:	2302      	movs	r3, #2
 8003764:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	b2d9      	uxtb	r1, r3
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	202c      	movs	r0, #44	; 0x2c
 8003770:	fb00 f303 	mul.w	r3, r0, r3
 8003774:	4413      	add	r3, r2
 8003776:	3360      	adds	r3, #96	; 0x60
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f006 f9a1 	bl	8009ac4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003782:	e081      	b.n	8003888 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4413      	add	r3, r2
 800378c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b10      	cmp	r3, #16
 8003798:	d176      	bne.n	8003888 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	212c      	movs	r1, #44	; 0x2c
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	4413      	add	r3, r2
 80037a6:	333f      	adds	r3, #63	; 0x3f
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d121      	bne.n	80037f2 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	212c      	movs	r1, #44	; 0x2c
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	335c      	adds	r3, #92	; 0x5c
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	0151      	lsls	r1, r2, #5
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	440a      	add	r2, r1
 80037d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037da:	f043 0302 	orr.w	r3, r3, #2
 80037de:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	4611      	mov	r1, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f003 ffad 	bl	800774a <USB_HC_Halt>
 80037f0:	e041      	b.n	8003876 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	212c      	movs	r1, #44	; 0x2c
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	333f      	adds	r3, #63	; 0x3f
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	212c      	movs	r1, #44	; 0x2c
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	4413      	add	r3, r2
 8003812:	333f      	adds	r3, #63	; 0x3f
 8003814:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003816:	2b02      	cmp	r3, #2
 8003818:	d12d      	bne.n	8003876 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	335c      	adds	r3, #92	; 0x5c
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d120      	bne.n	8003876 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	212c      	movs	r1, #44	; 0x2c
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	4413      	add	r3, r2
 8003840:	3361      	adds	r3, #97	; 0x61
 8003842:	2203      	movs	r2, #3
 8003844:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4413      	add	r3, r2
 800384e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	0151      	lsls	r1, r2, #5
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	440a      	add	r2, r1
 800385c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003860:	f043 0302 	orr.w	r3, r3, #2
 8003864:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	4611      	mov	r1, r2
 8003870:	4618      	mov	r0, r3
 8003872:	f003 ff6a 	bl	800774a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4413      	add	r3, r2
 800387e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003882:	461a      	mov	r2, r3
 8003884:	2310      	movs	r3, #16
 8003886:	6093      	str	r3, [r2, #8]
}
 8003888:	bf00      	nop
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d119      	bne.n	80038f4 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038cc:	461a      	mov	r2, r3
 80038ce:	2304      	movs	r3, #4
 80038d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	0151      	lsls	r1, r2, #5
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	440a      	add	r2, r1
 80038e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038ec:	f043 0302 	orr.w	r3, r3, #2
 80038f0:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80038f2:	e3c6      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b20      	cmp	r3, #32
 8003908:	d13e      	bne.n	8003988 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	4413      	add	r3, r2
 8003912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003916:	461a      	mov	r2, r3
 8003918:	2320      	movs	r3, #32
 800391a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	212c      	movs	r1, #44	; 0x2c
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	4413      	add	r3, r2
 8003928:	333d      	adds	r3, #61	; 0x3d
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	f040 83a8 	bne.w	8004082 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	212c      	movs	r1, #44	; 0x2c
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	333d      	adds	r3, #61	; 0x3d
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	212c      	movs	r1, #44	; 0x2c
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	4413      	add	r3, r2
 8003950:	3360      	adds	r3, #96	; 0x60
 8003952:	2202      	movs	r2, #2
 8003954:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	4413      	add	r3, r2
 800395e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	0151      	lsls	r1, r2, #5
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	440a      	add	r2, r1
 800396c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003970:	f043 0302 	orr.w	r3, r3, #2
 8003974:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f003 fee2 	bl	800774a <USB_HC_Halt>
}
 8003986:	e37c      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	4413      	add	r3, r2
 8003990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800399a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800399e:	d122      	bne.n	80039e6 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	0151      	lsls	r1, r2, #5
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	440a      	add	r2, r1
 80039b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039ba:	f043 0302 	orr.w	r3, r3, #2
 80039be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f003 febd 	bl	800774a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039dc:	461a      	mov	r2, r3
 80039de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039e2:	6093      	str	r3, [r2, #8]
}
 80039e4:	e34d      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d150      	bne.n	8003a9e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	212c      	movs	r1, #44	; 0x2c
 8003a02:	fb01 f303 	mul.w	r3, r1, r3
 8003a06:	4413      	add	r3, r2
 8003a08:	335c      	adds	r3, #92	; 0x5c
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a20:	2b40      	cmp	r3, #64	; 0x40
 8003a22:	d111      	bne.n	8003a48 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	212c      	movs	r1, #44	; 0x2c
 8003a2a:	fb01 f303 	mul.w	r3, r1, r3
 8003a2e:	4413      	add	r3, r2
 8003a30:	333d      	adds	r3, #61	; 0x3d
 8003a32:	2201      	movs	r2, #1
 8003a34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a42:	461a      	mov	r2, r3
 8003a44:	2340      	movs	r3, #64	; 0x40
 8003a46:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	0151      	lsls	r1, r2, #5
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	440a      	add	r2, r1
 8003a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a62:	f043 0302 	orr.w	r3, r3, #2
 8003a66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	4611      	mov	r1, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f003 fe69 	bl	800774a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a84:	461a      	mov	r2, r3
 8003a86:	2301      	movs	r3, #1
 8003a88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	212c      	movs	r1, #44	; 0x2c
 8003a90:	fb01 f303 	mul.w	r3, r1, r3
 8003a94:	4413      	add	r3, r2
 8003a96:	3361      	adds	r3, #97	; 0x61
 8003a98:	2201      	movs	r2, #1
 8003a9a:	701a      	strb	r2, [r3, #0]
}
 8003a9c:	e2f1      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d13c      	bne.n	8003b2e <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	212c      	movs	r1, #44	; 0x2c
 8003aba:	fb01 f303 	mul.w	r3, r1, r3
 8003abe:	4413      	add	r3, r2
 8003ac0:	3361      	adds	r3, #97	; 0x61
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	212c      	movs	r1, #44	; 0x2c
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	333d      	adds	r3, #61	; 0x3d
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	212c      	movs	r1, #44	; 0x2c
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	335c      	adds	r3, #92	; 0x5c
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	0151      	lsls	r1, r2, #5
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	440a      	add	r2, r1
 8003b00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b04:	f043 0302 	orr.w	r3, r3, #2
 8003b08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f003 fe18 	bl	800774a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b26:	461a      	mov	r2, r3
 8003b28:	2340      	movs	r3, #64	; 0x40
 8003b2a:	6093      	str	r3, [r2, #8]
}
 8003b2c:	e2a9      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d12a      	bne.n	8003b9a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b50:	461a      	mov	r2, r3
 8003b52:	2308      	movs	r3, #8
 8003b54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	0151      	lsls	r1, r2, #5
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	440a      	add	r2, r1
 8003b6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b70:	f043 0302 	orr.w	r3, r3, #2
 8003b74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f003 fde2 	bl	800774a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	212c      	movs	r1, #44	; 0x2c
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	4413      	add	r3, r2
 8003b92:	3361      	adds	r3, #97	; 0x61
 8003b94:	2205      	movs	r2, #5
 8003b96:	701a      	strb	r2, [r3, #0]
}
 8003b98:	e273      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d150      	bne.n	8003c52 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	212c      	movs	r1, #44	; 0x2c
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	335c      	adds	r3, #92	; 0x5c
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	212c      	movs	r1, #44	; 0x2c
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	4413      	add	r3, r2
 8003bce:	3361      	adds	r3, #97	; 0x61
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	212c      	movs	r1, #44	; 0x2c
 8003bda:	fb01 f303 	mul.w	r3, r1, r3
 8003bde:	4413      	add	r3, r2
 8003be0:	333d      	adds	r3, #61	; 0x3d
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d112      	bne.n	8003c0e <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	212c      	movs	r1, #44	; 0x2c
 8003bee:	fb01 f303 	mul.w	r3, r1, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	333c      	adds	r3, #60	; 0x3c
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d108      	bne.n	8003c0e <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	212c      	movs	r1, #44	; 0x2c
 8003c02:	fb01 f303 	mul.w	r3, r1, r3
 8003c06:	4413      	add	r3, r2
 8003c08:	333d      	adds	r3, #61	; 0x3d
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	0151      	lsls	r1, r2, #5
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	440a      	add	r2, r1
 8003c24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c28:	f043 0302 	orr.w	r3, r3, #2
 8003c2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	4611      	mov	r1, r2
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f003 fd86 	bl	800774a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	6093      	str	r3, [r2, #8]
}
 8003c50:	e217      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c64:	2b80      	cmp	r3, #128	; 0x80
 8003c66:	d174      	bne.n	8003d52 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d121      	bne.n	8003cb4 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	212c      	movs	r1, #44	; 0x2c
 8003c76:	fb01 f303 	mul.w	r3, r1, r3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3361      	adds	r3, #97	; 0x61
 8003c7e:	2206      	movs	r2, #6
 8003c80:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	0151      	lsls	r1, r2, #5
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	440a      	add	r2, r1
 8003c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c9c:	f043 0302 	orr.w	r3, r3, #2
 8003ca0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	4611      	mov	r1, r2
 8003cac:	4618      	mov	r0, r3
 8003cae:	f003 fd4c 	bl	800774a <USB_HC_Halt>
 8003cb2:	e044      	b.n	8003d3e <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	212c      	movs	r1, #44	; 0x2c
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	335c      	adds	r3, #92	; 0x5c
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	202c      	movs	r0, #44	; 0x2c
 8003ccc:	fb00 f303 	mul.w	r3, r0, r3
 8003cd0:	440b      	add	r3, r1
 8003cd2:	335c      	adds	r3, #92	; 0x5c
 8003cd4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	212c      	movs	r1, #44	; 0x2c
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	335c      	adds	r3, #92	; 0x5c
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d920      	bls.n	8003d2c <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	335c      	adds	r3, #92	; 0x5c
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	212c      	movs	r1, #44	; 0x2c
 8003d02:	fb01 f303 	mul.w	r3, r1, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	3360      	adds	r3, #96	; 0x60
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	b2d9      	uxtb	r1, r3
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	202c      	movs	r0, #44	; 0x2c
 8003d18:	fb00 f303 	mul.w	r3, r0, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3360      	adds	r3, #96	; 0x60
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f005 fecd 	bl	8009ac4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d2a:	e008      	b.n	8003d3e <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	212c      	movs	r1, #44	; 0x2c
 8003d32:	fb01 f303 	mul.w	r3, r1, r3
 8003d36:	4413      	add	r3, r2
 8003d38:	3360      	adds	r3, #96	; 0x60
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2380      	movs	r3, #128	; 0x80
 8003d4e:	6093      	str	r3, [r2, #8]
}
 8003d50:	e197      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d68:	d134      	bne.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	0151      	lsls	r1, r2, #5
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	440a      	add	r2, r1
 8003d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d84:	f043 0302 	orr.w	r3, r3, #2
 8003d88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f003 fcd8 	bl	800774a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da6:	461a      	mov	r2, r3
 8003da8:	2310      	movs	r3, #16
 8003daa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db8:	461a      	mov	r2, r3
 8003dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	212c      	movs	r1, #44	; 0x2c
 8003dc6:	fb01 f303 	mul.w	r3, r1, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	3361      	adds	r3, #97	; 0x61
 8003dce:	2208      	movs	r2, #8
 8003dd0:	701a      	strb	r2, [r3, #0]
}
 8003dd2:	e156      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	f040 814b 	bne.w	8004082 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	0151      	lsls	r1, r2, #5
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	440a      	add	r2, r1
 8003e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e06:	f023 0302 	bic.w	r3, r3, #2
 8003e0a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	212c      	movs	r1, #44	; 0x2c
 8003e12:	fb01 f303 	mul.w	r3, r1, r3
 8003e16:	4413      	add	r3, r2
 8003e18:	3361      	adds	r3, #97	; 0x61
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d179      	bne.n	8003f14 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	212c      	movs	r1, #44	; 0x2c
 8003e26:	fb01 f303 	mul.w	r3, r1, r3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3360      	adds	r3, #96	; 0x60
 8003e2e:	2201      	movs	r2, #1
 8003e30:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	212c      	movs	r1, #44	; 0x2c
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	333f      	adds	r3, #63	; 0x3f
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d00a      	beq.n	8003e5c <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	212c      	movs	r1, #44	; 0x2c
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	333f      	adds	r3, #63	; 0x3f
 8003e54:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	f040 80fc 	bne.w	8004054 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d142      	bne.n	8003eea <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	212c      	movs	r1, #44	; 0x2c
 8003e6a:	fb01 f303 	mul.w	r3, r1, r3
 8003e6e:	4413      	add	r3, r2
 8003e70:	334c      	adds	r3, #76	; 0x4c
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 80ed 	beq.w	8004054 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	212c      	movs	r1, #44	; 0x2c
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	4413      	add	r3, r2
 8003e86:	334c      	adds	r3, #76	; 0x4c
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	202c      	movs	r0, #44	; 0x2c
 8003e90:	fb00 f202 	mul.w	r2, r0, r2
 8003e94:	440a      	add	r2, r1
 8003e96:	3240      	adds	r2, #64	; 0x40
 8003e98:	8812      	ldrh	r2, [r2, #0]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	202c      	movs	r0, #44	; 0x2c
 8003ea4:	fb00 f202 	mul.w	r2, r0, r2
 8003ea8:	440a      	add	r2, r1
 8003eaa:	3240      	adds	r2, #64	; 0x40
 8003eac:	8812      	ldrh	r2, [r2, #0]
 8003eae:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80ca 	beq.w	8004054 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	212c      	movs	r1, #44	; 0x2c
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	3355      	adds	r3, #85	; 0x55
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	f083 0301 	eor.w	r3, r3, #1
 8003ed4:	b2d8      	uxtb	r0, r3
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	212c      	movs	r1, #44	; 0x2c
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	3355      	adds	r3, #85	; 0x55
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	701a      	strb	r2, [r3, #0]
 8003ee8:	e0b4      	b.n	8004054 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	212c      	movs	r1, #44	; 0x2c
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3355      	adds	r3, #85	; 0x55
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	f083 0301 	eor.w	r3, r3, #1
 8003efe:	b2d8      	uxtb	r0, r3
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	212c      	movs	r1, #44	; 0x2c
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3355      	adds	r3, #85	; 0x55
 8003f0e:	4602      	mov	r2, r0
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	e09f      	b.n	8004054 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	212c      	movs	r1, #44	; 0x2c
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	3361      	adds	r3, #97	; 0x61
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d109      	bne.n	8003f3c <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	212c      	movs	r1, #44	; 0x2c
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	4413      	add	r3, r2
 8003f34:	3360      	adds	r3, #96	; 0x60
 8003f36:	2202      	movs	r2, #2
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	e08b      	b.n	8004054 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	212c      	movs	r1, #44	; 0x2c
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	3361      	adds	r3, #97	; 0x61
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d109      	bne.n	8003f64 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	212c      	movs	r1, #44	; 0x2c
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3360      	adds	r3, #96	; 0x60
 8003f5e:	2202      	movs	r2, #2
 8003f60:	701a      	strb	r2, [r3, #0]
 8003f62:	e077      	b.n	8004054 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	212c      	movs	r1, #44	; 0x2c
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	4413      	add	r3, r2
 8003f70:	3361      	adds	r3, #97	; 0x61
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b05      	cmp	r3, #5
 8003f76:	d109      	bne.n	8003f8c <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	212c      	movs	r1, #44	; 0x2c
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	4413      	add	r3, r2
 8003f84:	3360      	adds	r3, #96	; 0x60
 8003f86:	2205      	movs	r2, #5
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e063      	b.n	8004054 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	212c      	movs	r1, #44	; 0x2c
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	4413      	add	r3, r2
 8003f98:	3361      	adds	r3, #97	; 0x61
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b06      	cmp	r3, #6
 8003f9e:	d009      	beq.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	212c      	movs	r1, #44	; 0x2c
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	4413      	add	r3, r2
 8003fac:	3361      	adds	r3, #97	; 0x61
 8003fae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d14f      	bne.n	8004054 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	212c      	movs	r1, #44	; 0x2c
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	335c      	adds	r3, #92	; 0x5c
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	202c      	movs	r0, #44	; 0x2c
 8003fcc:	fb00 f303 	mul.w	r3, r0, r3
 8003fd0:	440b      	add	r3, r1
 8003fd2:	335c      	adds	r3, #92	; 0x5c
 8003fd4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	212c      	movs	r1, #44	; 0x2c
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	335c      	adds	r3, #92	; 0x5c
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d912      	bls.n	8004010 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	212c      	movs	r1, #44	; 0x2c
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	335c      	adds	r3, #92	; 0x5c
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	212c      	movs	r1, #44	; 0x2c
 8004002:	fb01 f303 	mul.w	r3, r1, r3
 8004006:	4413      	add	r3, r2
 8004008:	3360      	adds	r3, #96	; 0x60
 800400a:	2204      	movs	r2, #4
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e021      	b.n	8004054 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	212c      	movs	r1, #44	; 0x2c
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	3360      	adds	r3, #96	; 0x60
 800401e:	2202      	movs	r2, #2
 8004020:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	4413      	add	r3, r2
 800402a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004038:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004040:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	4413      	add	r3, r2
 800404a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404e:	461a      	mov	r2, r3
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	4413      	add	r3, r2
 800405c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004060:	461a      	mov	r2, r3
 8004062:	2302      	movs	r3, #2
 8004064:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	b2d9      	uxtb	r1, r3
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	202c      	movs	r0, #44	; 0x2c
 8004070:	fb00 f303 	mul.w	r3, r0, r3
 8004074:	4413      	add	r3, r2
 8004076:	3360      	adds	r3, #96	; 0x60
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f005 fd21 	bl	8009ac4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004082:	bf00      	nop
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b08a      	sub	sp, #40	; 0x28
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	0c5b      	lsrs	r3, r3, #17
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	091b      	lsrs	r3, r3, #4
 80040ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040be:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d004      	beq.n	80040d0 <HCD_RXQLVL_IRQHandler+0x46>
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b05      	cmp	r3, #5
 80040ca:	f000 80a9 	beq.w	8004220 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80040ce:	e0aa      	b.n	8004226 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 80a6 	beq.w	8004224 <HCD_RXQLVL_IRQHandler+0x19a>
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	212c      	movs	r1, #44	; 0x2c
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	3344      	adds	r3, #68	; 0x44
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 809b 	beq.w	8004224 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	212c      	movs	r1, #44	; 0x2c
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	4413      	add	r3, r2
 80040fa:	3350      	adds	r3, #80	; 0x50
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	441a      	add	r2, r3
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	202c      	movs	r0, #44	; 0x2c
 8004108:	fb00 f303 	mul.w	r3, r0, r3
 800410c:	440b      	add	r3, r1
 800410e:	334c      	adds	r3, #76	; 0x4c
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d87a      	bhi.n	800420c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	212c      	movs	r1, #44	; 0x2c
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	4413      	add	r3, r2
 8004126:	3344      	adds	r3, #68	; 0x44
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	b292      	uxth	r2, r2
 800412e:	4619      	mov	r1, r3
 8004130:	f002 fea9 	bl	8006e86 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	212c      	movs	r1, #44	; 0x2c
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	4413      	add	r3, r2
 8004140:	3344      	adds	r3, #68	; 0x44
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	441a      	add	r2, r3
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	202c      	movs	r0, #44	; 0x2c
 800414e:	fb00 f303 	mul.w	r3, r0, r3
 8004152:	440b      	add	r3, r1
 8004154:	3344      	adds	r3, #68	; 0x44
 8004156:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	212c      	movs	r1, #44	; 0x2c
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	3350      	adds	r3, #80	; 0x50
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	441a      	add	r2, r3
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	202c      	movs	r0, #44	; 0x2c
 8004172:	fb00 f303 	mul.w	r3, r0, r3
 8004176:	440b      	add	r3, r1
 8004178:	3350      	adds	r3, #80	; 0x50
 800417a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	4413      	add	r3, r2
 8004184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	0cdb      	lsrs	r3, r3, #19
 800418c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004190:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	212c      	movs	r1, #44	; 0x2c
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	4413      	add	r3, r2
 800419e:	3340      	adds	r3, #64	; 0x40
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d13c      	bne.n	8004224 <HCD_RXQLVL_IRQHandler+0x19a>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d039      	beq.n	8004224 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041c6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041ce:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041dc:	461a      	mov	r2, r3
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	212c      	movs	r1, #44	; 0x2c
 80041e8:	fb01 f303 	mul.w	r3, r1, r3
 80041ec:	4413      	add	r3, r2
 80041ee:	3354      	adds	r3, #84	; 0x54
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	f083 0301 	eor.w	r3, r3, #1
 80041f6:	b2d8      	uxtb	r0, r3
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	212c      	movs	r1, #44	; 0x2c
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	3354      	adds	r3, #84	; 0x54
 8004206:	4602      	mov	r2, r0
 8004208:	701a      	strb	r2, [r3, #0]
      break;
 800420a:	e00b      	b.n	8004224 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	212c      	movs	r1, #44	; 0x2c
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	4413      	add	r3, r2
 8004218:	3360      	adds	r3, #96	; 0x60
 800421a:	2204      	movs	r2, #4
 800421c:	701a      	strb	r2, [r3, #0]
      break;
 800421e:	e001      	b.n	8004224 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004220:	bf00      	nop
 8004222:	e000      	b.n	8004226 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004224:	bf00      	nop
  }
}
 8004226:	bf00      	nop
 8004228:	3728      	adds	r7, #40	; 0x28
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b086      	sub	sp, #24
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800425a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b02      	cmp	r3, #2
 8004264:	d10b      	bne.n	800427e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b01      	cmp	r3, #1
 800426e:	d102      	bne.n	8004276 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f005 fc0b 	bl	8009a8c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f043 0302 	orr.w	r3, r3, #2
 800427c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b08      	cmp	r3, #8
 8004286:	d132      	bne.n	80042ee <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f043 0308 	orr.w	r3, r3, #8
 800428e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b04      	cmp	r3, #4
 8004298:	d126      	bne.n	80042e8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d113      	bne.n	80042ca <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80042a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042ac:	d106      	bne.n	80042bc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2102      	movs	r1, #2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f002 ff21 	bl	80070fc <USB_InitFSLSPClkSel>
 80042ba:	e011      	b.n	80042e0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2101      	movs	r1, #1
 80042c2:	4618      	mov	r0, r3
 80042c4:	f002 ff1a 	bl	80070fc <USB_InitFSLSPClkSel>
 80042c8:	e00a      	b.n	80042e0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d106      	bne.n	80042e0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042d8:	461a      	mov	r2, r3
 80042da:	f64e 2360 	movw	r3, #60000	; 0xea60
 80042de:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f005 fbfd 	bl	8009ae0 <HAL_HCD_PortEnabled_Callback>
 80042e6:	e002      	b.n	80042ee <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f005 fc07 	bl	8009afc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d103      	bne.n	8004300 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f043 0320 	orr.w	r3, r3, #32
 80042fe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004306:	461a      	mov	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	6013      	str	r3, [r2, #0]
}
 800430c:	bf00      	nop
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e128      	b.n	8004578 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a90      	ldr	r2, [pc, #576]	; (8004580 <HAL_I2S_Init+0x26c>)
 800433e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7fd fc53 	bl	8001bec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2202      	movs	r2, #2
 800434a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800435c:	f023 030f 	bic.w	r3, r3, #15
 8004360:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2202      	movs	r2, #2
 8004368:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	2b02      	cmp	r3, #2
 8004370:	d060      	beq.n	8004434 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d102      	bne.n	8004380 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800437a:	2310      	movs	r3, #16
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e001      	b.n	8004384 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004380:	2320      	movs	r3, #32
 8004382:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b20      	cmp	r3, #32
 800438a:	d802      	bhi.n	8004392 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004392:	2001      	movs	r0, #1
 8004394:	f001 f980 	bl	8005698 <HAL_RCCEx_GetPeriphCLKFreq>
 8004398:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a2:	d125      	bne.n	80043f0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d010      	beq.n	80043ce <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	461a      	mov	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	3305      	adds	r3, #5
 80043ca:	613b      	str	r3, [r7, #16]
 80043cc:	e01f      	b.n	800440e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	461a      	mov	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ea:	3305      	adds	r3, #5
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	e00e      	b.n	800440e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	461a      	mov	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	fbb2 f3f3 	udiv	r3, r2, r3
 800440a:	3305      	adds	r3, #5
 800440c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	4a5c      	ldr	r2, [pc, #368]	; (8004584 <HAL_I2S_Init+0x270>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	08db      	lsrs	r3, r3, #3
 8004418:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	e003      	b.n	800443c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004434:	2302      	movs	r3, #2
 8004436:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d902      	bls.n	8004448 <HAL_I2S_Init+0x134>
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	2bff      	cmp	r3, #255	; 0xff
 8004446:	d907      	bls.n	8004458 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444c:	f043 0210 	orr.w	r2, r3, #16
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e08f      	b.n	8004578 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	ea42 0103 	orr.w	r1, r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69fa      	ldr	r2, [r7, #28]
 8004468:	430a      	orrs	r2, r1
 800446a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004476:	f023 030f 	bic.w	r3, r3, #15
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6851      	ldr	r1, [r2, #4]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6892      	ldr	r2, [r2, #8]
 8004482:	4311      	orrs	r1, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	68d2      	ldr	r2, [r2, #12]
 8004488:	4311      	orrs	r1, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6992      	ldr	r2, [r2, #24]
 800448e:	430a      	orrs	r2, r1
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800449a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d161      	bne.n	8004568 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a38      	ldr	r2, [pc, #224]	; (8004588 <HAL_I2S_Init+0x274>)
 80044a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a37      	ldr	r2, [pc, #220]	; (800458c <HAL_I2S_Init+0x278>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d101      	bne.n	80044b8 <HAL_I2S_Init+0x1a4>
 80044b4:	4b36      	ldr	r3, [pc, #216]	; (8004590 <HAL_I2S_Init+0x27c>)
 80044b6:	e001      	b.n	80044bc <HAL_I2S_Init+0x1a8>
 80044b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	4932      	ldr	r1, [pc, #200]	; (800458c <HAL_I2S_Init+0x278>)
 80044c4:	428a      	cmp	r2, r1
 80044c6:	d101      	bne.n	80044cc <HAL_I2S_Init+0x1b8>
 80044c8:	4a31      	ldr	r2, [pc, #196]	; (8004590 <HAL_I2S_Init+0x27c>)
 80044ca:	e001      	b.n	80044d0 <HAL_I2S_Init+0x1bc>
 80044cc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80044d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80044d4:	f023 030f 	bic.w	r3, r3, #15
 80044d8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a2b      	ldr	r2, [pc, #172]	; (800458c <HAL_I2S_Init+0x278>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d101      	bne.n	80044e8 <HAL_I2S_Init+0x1d4>
 80044e4:	4b2a      	ldr	r3, [pc, #168]	; (8004590 <HAL_I2S_Init+0x27c>)
 80044e6:	e001      	b.n	80044ec <HAL_I2S_Init+0x1d8>
 80044e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ec:	2202      	movs	r2, #2
 80044ee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a25      	ldr	r2, [pc, #148]	; (800458c <HAL_I2S_Init+0x278>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d101      	bne.n	80044fe <HAL_I2S_Init+0x1ea>
 80044fa:	4b25      	ldr	r3, [pc, #148]	; (8004590 <HAL_I2S_Init+0x27c>)
 80044fc:	e001      	b.n	8004502 <HAL_I2S_Init+0x1ee>
 80044fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800450e:	d003      	beq.n	8004518 <HAL_I2S_Init+0x204>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d103      	bne.n	8004520 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	e001      	b.n	8004524 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004520:	2300      	movs	r3, #0
 8004522:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800452e:	4313      	orrs	r3, r2
 8004530:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004538:	4313      	orrs	r3, r2
 800453a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004542:	4313      	orrs	r3, r2
 8004544:	b29a      	uxth	r2, r3
 8004546:	897b      	ldrh	r3, [r7, #10]
 8004548:	4313      	orrs	r3, r2
 800454a:	b29b      	uxth	r3, r3
 800454c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004550:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a0d      	ldr	r2, [pc, #52]	; (800458c <HAL_I2S_Init+0x278>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d101      	bne.n	8004560 <HAL_I2S_Init+0x24c>
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <HAL_I2S_Init+0x27c>)
 800455e:	e001      	b.n	8004564 <HAL_I2S_Init+0x250>
 8004560:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004564:	897a      	ldrh	r2, [r7, #10]
 8004566:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3720      	adds	r7, #32
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	0800468b 	.word	0x0800468b
 8004584:	cccccccd 	.word	0xcccccccd
 8004588:	080047a1 	.word	0x080047a1
 800458c:	40003800 	.word	0x40003800
 8004590:	40003400 	.word	0x40003400

08004594 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	881a      	ldrh	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	1c9a      	adds	r2, r3, #2
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10e      	bne.n	8004624 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004614:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff ffb8 	bl	8004594 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	b292      	uxth	r2, r2
 8004640:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	1c9a      	adds	r2, r3, #2
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10e      	bne.n	8004682 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004672:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff ff93 	bl	80045a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b086      	sub	sp, #24
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d13a      	bne.n	800471c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d109      	bne.n	80046c4 <I2S_IRQHandler+0x3a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	2b40      	cmp	r3, #64	; 0x40
 80046bc:	d102      	bne.n	80046c4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff ffb4 	bl	800462c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b40      	cmp	r3, #64	; 0x40
 80046cc:	d126      	bne.n	800471c <I2S_IRQHandler+0x92>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d11f      	bne.n	800471c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	f043 0202 	orr.w	r2, r3, #2
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff ff50 	bl	80045bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b03      	cmp	r3, #3
 8004726:	d136      	bne.n	8004796 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b02      	cmp	r3, #2
 8004730:	d109      	bne.n	8004746 <I2S_IRQHandler+0xbc>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473c:	2b80      	cmp	r3, #128	; 0x80
 800473e:	d102      	bne.n	8004746 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff ff45 	bl	80045d0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b08      	cmp	r3, #8
 800474e:	d122      	bne.n	8004796 <I2S_IRQHandler+0x10c>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b20      	cmp	r3, #32
 800475c:	d11b      	bne.n	8004796 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800476c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004788:	f043 0204 	orr.w	r2, r3, #4
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ff13 	bl	80045bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004796:	bf00      	nop
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4aa2      	ldr	r2, [pc, #648]	; (8004a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d101      	bne.n	80047be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80047ba:	4ba2      	ldr	r3, [pc, #648]	; (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047bc:	e001      	b.n	80047c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80047be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a9b      	ldr	r2, [pc, #620]	; (8004a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d101      	bne.n	80047dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80047d8:	4b9a      	ldr	r3, [pc, #616]	; (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047da:	e001      	b.n	80047e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80047dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ec:	d004      	beq.n	80047f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f040 8099 	bne.w	800492a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d107      	bne.n	8004812 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f925 	bl	8004a5c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b01      	cmp	r3, #1
 800481a:	d107      	bne.n	800482c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f9c8 	bl	8004bbc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004832:	2b40      	cmp	r3, #64	; 0x40
 8004834:	d13a      	bne.n	80048ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d035      	beq.n	80048ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a7e      	ldr	r2, [pc, #504]	; (8004a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d101      	bne.n	800484e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800484a:	4b7e      	ldr	r3, [pc, #504]	; (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800484c:	e001      	b.n	8004852 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800484e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4979      	ldr	r1, [pc, #484]	; (8004a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800485a:	428b      	cmp	r3, r1
 800485c:	d101      	bne.n	8004862 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800485e:	4b79      	ldr	r3, [pc, #484]	; (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004860:	e001      	b.n	8004866 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004862:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004866:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800486a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800487a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489e:	f043 0202 	orr.w	r2, r3, #2
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff fe88 	bl	80045bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	f040 80be 	bne.w	8004a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80b8 	beq.w	8004a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a59      	ldr	r2, [pc, #356]	; (8004a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d101      	bne.n	80048e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80048de:	4b59      	ldr	r3, [pc, #356]	; (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80048e0:	e001      	b.n	80048e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80048e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4954      	ldr	r1, [pc, #336]	; (8004a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80048ee:	428b      	cmp	r3, r1
 80048f0:	d101      	bne.n	80048f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80048f2:	4b54      	ldr	r3, [pc, #336]	; (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80048f4:	e001      	b.n	80048fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80048f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004900:	2300      	movs	r3, #0
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	f043 0204 	orr.w	r2, r3, #4
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff fe4a 	bl	80045bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004928:	e084      	b.n	8004a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b02      	cmp	r3, #2
 8004932:	d107      	bne.n	8004944 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f8be 	bl	8004ac0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b01      	cmp	r3, #1
 800494c:	d107      	bne.n	800495e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f8fd 	bl	8004b58 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d12f      	bne.n	80049c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	d02a      	beq.n	80049c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004980:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a2e      	ldr	r2, [pc, #184]	; (8004a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d101      	bne.n	8004990 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800498c:	4b2d      	ldr	r3, [pc, #180]	; (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800498e:	e001      	b.n	8004994 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004990:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4929      	ldr	r1, [pc, #164]	; (8004a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800499c:	428b      	cmp	r3, r1
 800499e:	d101      	bne.n	80049a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80049a0:	4b28      	ldr	r3, [pc, #160]	; (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80049a2:	e001      	b.n	80049a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80049a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ba:	f043 0202 	orr.w	r2, r3, #2
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff fdfa 	bl	80045bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d131      	bne.n	8004a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d02c      	beq.n	8004a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a17      	ldr	r2, [pc, #92]	; (8004a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d101      	bne.n	80049ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80049e6:	4b17      	ldr	r3, [pc, #92]	; (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80049e8:	e001      	b.n	80049ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80049ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4912      	ldr	r1, [pc, #72]	; (8004a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80049f6:	428b      	cmp	r3, r1
 80049f8:	d101      	bne.n	80049fe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80049fa:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80049fc:	e001      	b.n	8004a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80049fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a06:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a16:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a24:	f043 0204 	orr.w	r2, r3, #4
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff fdc5 	bl	80045bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a32:	e000      	b.n	8004a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a34:	bf00      	nop
}
 8004a36:	bf00      	nop
 8004a38:	3720      	adds	r7, #32
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40003800 	.word	0x40003800
 8004a44:	40003400 	.word	0x40003400

08004a48 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	1c99      	adds	r1, r3, #2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6251      	str	r1, [r2, #36]	; 0x24
 8004a6e:	881a      	ldrh	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d113      	bne.n	8004ab6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d106      	bne.n	8004ab6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff ffc9 	bl	8004a48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ab6:	bf00      	nop
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	1c99      	adds	r1, r3, #2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6251      	str	r1, [r2, #36]	; 0x24
 8004ad2:	8819      	ldrh	r1, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1d      	ldr	r2, [pc, #116]	; (8004b50 <I2SEx_TxISR_I2SExt+0x90>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d101      	bne.n	8004ae2 <I2SEx_TxISR_I2SExt+0x22>
 8004ade:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <I2SEx_TxISR_I2SExt+0x94>)
 8004ae0:	e001      	b.n	8004ae6 <I2SEx_TxISR_I2SExt+0x26>
 8004ae2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ae6:	460a      	mov	r2, r1
 8004ae8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d121      	bne.n	8004b46 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a12      	ldr	r2, [pc, #72]	; (8004b50 <I2SEx_TxISR_I2SExt+0x90>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d101      	bne.n	8004b10 <I2SEx_TxISR_I2SExt+0x50>
 8004b0c:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <I2SEx_TxISR_I2SExt+0x94>)
 8004b0e:	e001      	b.n	8004b14 <I2SEx_TxISR_I2SExt+0x54>
 8004b10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	490d      	ldr	r1, [pc, #52]	; (8004b50 <I2SEx_TxISR_I2SExt+0x90>)
 8004b1c:	428b      	cmp	r3, r1
 8004b1e:	d101      	bne.n	8004b24 <I2SEx_TxISR_I2SExt+0x64>
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <I2SEx_TxISR_I2SExt+0x94>)
 8004b22:	e001      	b.n	8004b28 <I2SEx_TxISR_I2SExt+0x68>
 8004b24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b2c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ff81 	bl	8004a48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40003800 	.word	0x40003800
 8004b54:	40003400 	.word	0x40003400

08004b58 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68d8      	ldr	r0, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	1c99      	adds	r1, r3, #2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004b70:	b282      	uxth	r2, r0
 8004b72:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d113      	bne.n	8004bb4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b9a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff ff4a 	bl	8004a48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a20      	ldr	r2, [pc, #128]	; (8004c4c <I2SEx_RxISR_I2SExt+0x90>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d101      	bne.n	8004bd2 <I2SEx_RxISR_I2SExt+0x16>
 8004bce:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <I2SEx_RxISR_I2SExt+0x94>)
 8004bd0:	e001      	b.n	8004bd6 <I2SEx_RxISR_I2SExt+0x1a>
 8004bd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd6:	68d8      	ldr	r0, [r3, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	1c99      	adds	r1, r3, #2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004be2:	b282      	uxth	r2, r0
 8004be4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d121      	bne.n	8004c42 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a12      	ldr	r2, [pc, #72]	; (8004c4c <I2SEx_RxISR_I2SExt+0x90>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d101      	bne.n	8004c0c <I2SEx_RxISR_I2SExt+0x50>
 8004c08:	4b11      	ldr	r3, [pc, #68]	; (8004c50 <I2SEx_RxISR_I2SExt+0x94>)
 8004c0a:	e001      	b.n	8004c10 <I2SEx_RxISR_I2SExt+0x54>
 8004c0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	490d      	ldr	r1, [pc, #52]	; (8004c4c <I2SEx_RxISR_I2SExt+0x90>)
 8004c18:	428b      	cmp	r3, r1
 8004c1a:	d101      	bne.n	8004c20 <I2SEx_RxISR_I2SExt+0x64>
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <I2SEx_RxISR_I2SExt+0x94>)
 8004c1e:	e001      	b.n	8004c24 <I2SEx_RxISR_I2SExt+0x68>
 8004c20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c28:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d106      	bne.n	8004c42 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff ff03 	bl	8004a48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40003800 	.word	0x40003800
 8004c50:	40003400 	.word	0x40003400

08004c54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e264      	b.n	8005130 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d075      	beq.n	8004d5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c72:	4ba3      	ldr	r3, [pc, #652]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 030c 	and.w	r3, r3, #12
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d00c      	beq.n	8004c98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c7e:	4ba0      	ldr	r3, [pc, #640]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d112      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c8a:	4b9d      	ldr	r3, [pc, #628]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c96:	d10b      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c98:	4b99      	ldr	r3, [pc, #612]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d05b      	beq.n	8004d5c <HAL_RCC_OscConfig+0x108>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d157      	bne.n	8004d5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e23f      	b.n	8005130 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb8:	d106      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x74>
 8004cba:	4b91      	ldr	r3, [pc, #580]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a90      	ldr	r2, [pc, #576]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e01d      	b.n	8004d04 <HAL_RCC_OscConfig+0xb0>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd0:	d10c      	bne.n	8004cec <HAL_RCC_OscConfig+0x98>
 8004cd2:	4b8b      	ldr	r3, [pc, #556]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a8a      	ldr	r2, [pc, #552]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	4b88      	ldr	r3, [pc, #544]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a87      	ldr	r2, [pc, #540]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e00b      	b.n	8004d04 <HAL_RCC_OscConfig+0xb0>
 8004cec:	4b84      	ldr	r3, [pc, #528]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a83      	ldr	r2, [pc, #524]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	4b81      	ldr	r3, [pc, #516]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a80      	ldr	r2, [pc, #512]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d013      	beq.n	8004d34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0c:	f7fd fa74 	bl	80021f8 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d14:	f7fd fa70 	bl	80021f8 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b64      	cmp	r3, #100	; 0x64
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e204      	b.n	8005130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d26:	4b76      	ldr	r3, [pc, #472]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f0      	beq.n	8004d14 <HAL_RCC_OscConfig+0xc0>
 8004d32:	e014      	b.n	8004d5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d34:	f7fd fa60 	bl	80021f8 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d3c:	f7fd fa5c 	bl	80021f8 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b64      	cmp	r3, #100	; 0x64
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e1f0      	b.n	8005130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4e:	4b6c      	ldr	r3, [pc, #432]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0xe8>
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d063      	beq.n	8004e32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d6a:	4b65      	ldr	r3, [pc, #404]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d76:	4b62      	ldr	r3, [pc, #392]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d11c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d82:	4b5f      	ldr	r3, [pc, #380]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d116      	bne.n	8004dbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8e:	4b5c      	ldr	r3, [pc, #368]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_RCC_OscConfig+0x152>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d001      	beq.n	8004da6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e1c4      	b.n	8005130 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da6:	4b56      	ldr	r3, [pc, #344]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	4952      	ldr	r1, [pc, #328]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dba:	e03a      	b.n	8004e32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d020      	beq.n	8004e06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc4:	4b4f      	ldr	r3, [pc, #316]	; (8004f04 <HAL_RCC_OscConfig+0x2b0>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dca:	f7fd fa15 	bl	80021f8 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dd2:	f7fd fa11 	bl	80021f8 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e1a5      	b.n	8005130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de4:	4b46      	ldr	r3, [pc, #280]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df0:	4b43      	ldr	r3, [pc, #268]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4940      	ldr	r1, [pc, #256]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	600b      	str	r3, [r1, #0]
 8004e04:	e015      	b.n	8004e32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e06:	4b3f      	ldr	r3, [pc, #252]	; (8004f04 <HAL_RCC_OscConfig+0x2b0>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0c:	f7fd f9f4 	bl	80021f8 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e14:	f7fd f9f0 	bl	80021f8 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e184      	b.n	8005130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e26:	4b36      	ldr	r3, [pc, #216]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d030      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d016      	beq.n	8004e74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e46:	4b30      	ldr	r3, [pc, #192]	; (8004f08 <HAL_RCC_OscConfig+0x2b4>)
 8004e48:	2201      	movs	r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4c:	f7fd f9d4 	bl	80021f8 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e54:	f7fd f9d0 	bl	80021f8 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e164      	b.n	8005130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e66:	4b26      	ldr	r3, [pc, #152]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0x200>
 8004e72:	e015      	b.n	8004ea0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e74:	4b24      	ldr	r3, [pc, #144]	; (8004f08 <HAL_RCC_OscConfig+0x2b4>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e7a:	f7fd f9bd 	bl	80021f8 <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e82:	f7fd f9b9 	bl	80021f8 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e14d      	b.n	8005130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e94:	4b1a      	ldr	r3, [pc, #104]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f0      	bne.n	8004e82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 80a0 	beq.w	8004fee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eb2:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10f      	bne.n	8004ede <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60bb      	str	r3, [r7, #8]
 8004ec2:	4b0f      	ldr	r3, [pc, #60]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	4a0e      	ldr	r2, [pc, #56]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ece:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <HAL_RCC_OscConfig+0x2ac>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	60bb      	str	r3, [r7, #8]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eda:	2301      	movs	r3, #1
 8004edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ede:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <HAL_RCC_OscConfig+0x2b8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d121      	bne.n	8004f2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eea:	4b08      	ldr	r3, [pc, #32]	; (8004f0c <HAL_RCC_OscConfig+0x2b8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a07      	ldr	r2, [pc, #28]	; (8004f0c <HAL_RCC_OscConfig+0x2b8>)
 8004ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ef6:	f7fd f97f 	bl	80021f8 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efc:	e011      	b.n	8004f22 <HAL_RCC_OscConfig+0x2ce>
 8004efe:	bf00      	nop
 8004f00:	40023800 	.word	0x40023800
 8004f04:	42470000 	.word	0x42470000
 8004f08:	42470e80 	.word	0x42470e80
 8004f0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f10:	f7fd f972 	bl	80021f8 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e106      	b.n	8005130 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f22:	4b85      	ldr	r3, [pc, #532]	; (8005138 <HAL_RCC_OscConfig+0x4e4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0f0      	beq.n	8004f10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d106      	bne.n	8004f44 <HAL_RCC_OscConfig+0x2f0>
 8004f36:	4b81      	ldr	r3, [pc, #516]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3a:	4a80      	ldr	r2, [pc, #512]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	6713      	str	r3, [r2, #112]	; 0x70
 8004f42:	e01c      	b.n	8004f7e <HAL_RCC_OscConfig+0x32a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2b05      	cmp	r3, #5
 8004f4a:	d10c      	bne.n	8004f66 <HAL_RCC_OscConfig+0x312>
 8004f4c:	4b7b      	ldr	r3, [pc, #492]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 8004f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f50:	4a7a      	ldr	r2, [pc, #488]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 8004f52:	f043 0304 	orr.w	r3, r3, #4
 8004f56:	6713      	str	r3, [r2, #112]	; 0x70
 8004f58:	4b78      	ldr	r3, [pc, #480]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5c:	4a77      	ldr	r2, [pc, #476]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	6713      	str	r3, [r2, #112]	; 0x70
 8004f64:	e00b      	b.n	8004f7e <HAL_RCC_OscConfig+0x32a>
 8004f66:	4b75      	ldr	r3, [pc, #468]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 8004f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6a:	4a74      	ldr	r2, [pc, #464]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 8004f6c:	f023 0301 	bic.w	r3, r3, #1
 8004f70:	6713      	str	r3, [r2, #112]	; 0x70
 8004f72:	4b72      	ldr	r3, [pc, #456]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 8004f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f76:	4a71      	ldr	r2, [pc, #452]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 8004f78:	f023 0304 	bic.w	r3, r3, #4
 8004f7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d015      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f86:	f7fd f937 	bl	80021f8 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f8c:	e00a      	b.n	8004fa4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f8e:	f7fd f933 	bl	80021f8 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e0c5      	b.n	8005130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa4:	4b65      	ldr	r3, [pc, #404]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0ee      	beq.n	8004f8e <HAL_RCC_OscConfig+0x33a>
 8004fb0:	e014      	b.n	8004fdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb2:	f7fd f921 	bl	80021f8 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fb8:	e00a      	b.n	8004fd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fba:	f7fd f91d 	bl	80021f8 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e0af      	b.n	8005130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd0:	4b5a      	ldr	r3, [pc, #360]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 8004fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1ee      	bne.n	8004fba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fdc:	7dfb      	ldrb	r3, [r7, #23]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d105      	bne.n	8004fee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe2:	4b56      	ldr	r3, [pc, #344]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	4a55      	ldr	r2, [pc, #340]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 8004fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 809b 	beq.w	800512e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ff8:	4b50      	ldr	r3, [pc, #320]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 030c 	and.w	r3, r3, #12
 8005000:	2b08      	cmp	r3, #8
 8005002:	d05c      	beq.n	80050be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	2b02      	cmp	r3, #2
 800500a:	d141      	bne.n	8005090 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500c:	4b4c      	ldr	r3, [pc, #304]	; (8005140 <HAL_RCC_OscConfig+0x4ec>)
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005012:	f7fd f8f1 	bl	80021f8 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800501a:	f7fd f8ed 	bl	80021f8 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e081      	b.n	8005130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502c:	4b43      	ldr	r3, [pc, #268]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1f0      	bne.n	800501a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	019b      	lsls	r3, r3, #6
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	3b01      	subs	r3, #1
 8005052:	041b      	lsls	r3, r3, #16
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	061b      	lsls	r3, r3, #24
 800505c:	4937      	ldr	r1, [pc, #220]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 800505e:	4313      	orrs	r3, r2
 8005060:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005062:	4b37      	ldr	r3, [pc, #220]	; (8005140 <HAL_RCC_OscConfig+0x4ec>)
 8005064:	2201      	movs	r2, #1
 8005066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005068:	f7fd f8c6 	bl	80021f8 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005070:	f7fd f8c2 	bl	80021f8 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e056      	b.n	8005130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005082:	4b2e      	ldr	r3, [pc, #184]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0x41c>
 800508e:	e04e      	b.n	800512e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005090:	4b2b      	ldr	r3, [pc, #172]	; (8005140 <HAL_RCC_OscConfig+0x4ec>)
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005096:	f7fd f8af 	bl	80021f8 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800509e:	f7fd f8ab 	bl	80021f8 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e03f      	b.n	8005130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b0:	4b22      	ldr	r3, [pc, #136]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1f0      	bne.n	800509e <HAL_RCC_OscConfig+0x44a>
 80050bc:	e037      	b.n	800512e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e032      	b.n	8005130 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050ca:	4b1c      	ldr	r3, [pc, #112]	; (800513c <HAL_RCC_OscConfig+0x4e8>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d028      	beq.n	800512a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d121      	bne.n	800512a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d11a      	bne.n	800512a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050fa:	4013      	ands	r3, r2
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005100:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005102:	4293      	cmp	r3, r2
 8005104:	d111      	bne.n	800512a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	085b      	lsrs	r3, r3, #1
 8005112:	3b01      	subs	r3, #1
 8005114:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005116:	429a      	cmp	r2, r3
 8005118:	d107      	bne.n	800512a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005126:	429a      	cmp	r2, r3
 8005128:	d001      	beq.n	800512e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	40007000 	.word	0x40007000
 800513c:	40023800 	.word	0x40023800
 8005140:	42470060 	.word	0x42470060

08005144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0cc      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005158:	4b68      	ldr	r3, [pc, #416]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d90c      	bls.n	8005180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005166:	4b65      	ldr	r3, [pc, #404]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800516e:	4b63      	ldr	r3, [pc, #396]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d001      	beq.n	8005180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e0b8      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d020      	beq.n	80051ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005198:	4b59      	ldr	r3, [pc, #356]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	4a58      	ldr	r2, [pc, #352]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051b0:	4b53      	ldr	r3, [pc, #332]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	4a52      	ldr	r2, [pc, #328]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80051b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051bc:	4b50      	ldr	r3, [pc, #320]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	494d      	ldr	r1, [pc, #308]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d044      	beq.n	8005264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d107      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e2:	4b47      	ldr	r3, [pc, #284]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d119      	bne.n	8005222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e07f      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d003      	beq.n	8005202 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d107      	bne.n	8005212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005202:	4b3f      	ldr	r3, [pc, #252]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e06f      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005212:	4b3b      	ldr	r3, [pc, #236]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e067      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005222:	4b37      	ldr	r3, [pc, #220]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f023 0203 	bic.w	r2, r3, #3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	4934      	ldr	r1, [pc, #208]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 8005230:	4313      	orrs	r3, r2
 8005232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005234:	f7fc ffe0 	bl	80021f8 <HAL_GetTick>
 8005238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523a:	e00a      	b.n	8005252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800523c:	f7fc ffdc 	bl	80021f8 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	; 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e04f      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005252:	4b2b      	ldr	r3, [pc, #172]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 020c 	and.w	r2, r3, #12
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	429a      	cmp	r2, r3
 8005262:	d1eb      	bne.n	800523c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005264:	4b25      	ldr	r3, [pc, #148]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d20c      	bcs.n	800528c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005272:	4b22      	ldr	r3, [pc, #136]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800527a:	4b20      	ldr	r3, [pc, #128]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d001      	beq.n	800528c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e032      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	d008      	beq.n	80052aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005298:	4b19      	ldr	r3, [pc, #100]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4916      	ldr	r1, [pc, #88]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d009      	beq.n	80052ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052b6:	4b12      	ldr	r3, [pc, #72]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	490e      	ldr	r1, [pc, #56]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052ca:	f000 f821 	bl	8005310 <HAL_RCC_GetSysClockFreq>
 80052ce:	4602      	mov	r2, r0
 80052d0:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	490a      	ldr	r1, [pc, #40]	; (8005304 <HAL_RCC_ClockConfig+0x1c0>)
 80052dc:	5ccb      	ldrb	r3, [r1, r3]
 80052de:	fa22 f303 	lsr.w	r3, r2, r3
 80052e2:	4a09      	ldr	r2, [pc, #36]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 80052e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052e6:	4b09      	ldr	r3, [pc, #36]	; (800530c <HAL_RCC_ClockConfig+0x1c8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fc ff40 	bl	8002170 <HAL_InitTick>

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40023c00 	.word	0x40023c00
 8005300:	40023800 	.word	0x40023800
 8005304:	0800a370 	.word	0x0800a370
 8005308:	20000008 	.word	0x20000008
 800530c:	2000000c 	.word	0x2000000c

08005310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005310:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	607b      	str	r3, [r7, #4]
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	2300      	movs	r3, #0
 8005322:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005328:	4b67      	ldr	r3, [pc, #412]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 030c 	and.w	r3, r3, #12
 8005330:	2b08      	cmp	r3, #8
 8005332:	d00d      	beq.n	8005350 <HAL_RCC_GetSysClockFreq+0x40>
 8005334:	2b08      	cmp	r3, #8
 8005336:	f200 80bd 	bhi.w	80054b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <HAL_RCC_GetSysClockFreq+0x34>
 800533e:	2b04      	cmp	r3, #4
 8005340:	d003      	beq.n	800534a <HAL_RCC_GetSysClockFreq+0x3a>
 8005342:	e0b7      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005344:	4b61      	ldr	r3, [pc, #388]	; (80054cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005346:	60bb      	str	r3, [r7, #8]
       break;
 8005348:	e0b7      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800534a:	4b61      	ldr	r3, [pc, #388]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800534c:	60bb      	str	r3, [r7, #8]
      break;
 800534e:	e0b4      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005350:	4b5d      	ldr	r3, [pc, #372]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005358:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800535a:	4b5b      	ldr	r3, [pc, #364]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d04d      	beq.n	8005402 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005366:	4b58      	ldr	r3, [pc, #352]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	099b      	lsrs	r3, r3, #6
 800536c:	461a      	mov	r2, r3
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005376:	f04f 0100 	mov.w	r1, #0
 800537a:	ea02 0800 	and.w	r8, r2, r0
 800537e:	ea03 0901 	and.w	r9, r3, r1
 8005382:	4640      	mov	r0, r8
 8005384:	4649      	mov	r1, r9
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	014b      	lsls	r3, r1, #5
 8005390:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005394:	0142      	lsls	r2, r0, #5
 8005396:	4610      	mov	r0, r2
 8005398:	4619      	mov	r1, r3
 800539a:	ebb0 0008 	subs.w	r0, r0, r8
 800539e:	eb61 0109 	sbc.w	r1, r1, r9
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	018b      	lsls	r3, r1, #6
 80053ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053b0:	0182      	lsls	r2, r0, #6
 80053b2:	1a12      	subs	r2, r2, r0
 80053b4:	eb63 0301 	sbc.w	r3, r3, r1
 80053b8:	f04f 0000 	mov.w	r0, #0
 80053bc:	f04f 0100 	mov.w	r1, #0
 80053c0:	00d9      	lsls	r1, r3, #3
 80053c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053c6:	00d0      	lsls	r0, r2, #3
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	eb12 0208 	adds.w	r2, r2, r8
 80053d0:	eb43 0309 	adc.w	r3, r3, r9
 80053d4:	f04f 0000 	mov.w	r0, #0
 80053d8:	f04f 0100 	mov.w	r1, #0
 80053dc:	0259      	lsls	r1, r3, #9
 80053de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80053e2:	0250      	lsls	r0, r2, #9
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4610      	mov	r0, r2
 80053ea:	4619      	mov	r1, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	f7fa fee8 	bl	80001c8 <__aeabi_uldivmod>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4613      	mov	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	e04a      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005402:	4b31      	ldr	r3, [pc, #196]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	099b      	lsrs	r3, r3, #6
 8005408:	461a      	mov	r2, r3
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005412:	f04f 0100 	mov.w	r1, #0
 8005416:	ea02 0400 	and.w	r4, r2, r0
 800541a:	ea03 0501 	and.w	r5, r3, r1
 800541e:	4620      	mov	r0, r4
 8005420:	4629      	mov	r1, r5
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	014b      	lsls	r3, r1, #5
 800542c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005430:	0142      	lsls	r2, r0, #5
 8005432:	4610      	mov	r0, r2
 8005434:	4619      	mov	r1, r3
 8005436:	1b00      	subs	r0, r0, r4
 8005438:	eb61 0105 	sbc.w	r1, r1, r5
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	018b      	lsls	r3, r1, #6
 8005446:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800544a:	0182      	lsls	r2, r0, #6
 800544c:	1a12      	subs	r2, r2, r0
 800544e:	eb63 0301 	sbc.w	r3, r3, r1
 8005452:	f04f 0000 	mov.w	r0, #0
 8005456:	f04f 0100 	mov.w	r1, #0
 800545a:	00d9      	lsls	r1, r3, #3
 800545c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005460:	00d0      	lsls	r0, r2, #3
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	1912      	adds	r2, r2, r4
 8005468:	eb45 0303 	adc.w	r3, r5, r3
 800546c:	f04f 0000 	mov.w	r0, #0
 8005470:	f04f 0100 	mov.w	r1, #0
 8005474:	0299      	lsls	r1, r3, #10
 8005476:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800547a:	0290      	lsls	r0, r2, #10
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4610      	mov	r0, r2
 8005482:	4619      	mov	r1, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	461a      	mov	r2, r3
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	f7fa fe9c 	bl	80001c8 <__aeabi_uldivmod>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4613      	mov	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005498:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	0c1b      	lsrs	r3, r3, #16
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	3301      	adds	r3, #1
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b0:	60bb      	str	r3, [r7, #8]
      break;
 80054b2:	e002      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054b4:	4b05      	ldr	r3, [pc, #20]	; (80054cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80054b6:	60bb      	str	r3, [r7, #8]
      break;
 80054b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ba:	68bb      	ldr	r3, [r7, #8]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80054c6:	bf00      	nop
 80054c8:	40023800 	.word	0x40023800
 80054cc:	00f42400 	.word	0x00f42400
 80054d0:	007a1200 	.word	0x007a1200

080054d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d105      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d035      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054fc:	4b62      	ldr	r3, [pc, #392]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005502:	f7fc fe79 	bl	80021f8 <HAL_GetTick>
 8005506:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005508:	e008      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800550a:	f7fc fe75 	bl	80021f8 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e0b0      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800551c:	4b5b      	ldr	r3, [pc, #364]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1f0      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	019a      	lsls	r2, r3, #6
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	071b      	lsls	r3, r3, #28
 8005534:	4955      	ldr	r1, [pc, #340]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800553c:	4b52      	ldr	r3, [pc, #328]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005542:	f7fc fe59 	bl	80021f8 <HAL_GetTick>
 8005546:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005548:	e008      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800554a:	f7fc fe55 	bl	80021f8 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e090      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800555c:	4b4b      	ldr	r3, [pc, #300]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0f0      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 8083 	beq.w	800567c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	4b44      	ldr	r3, [pc, #272]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	4a43      	ldr	r2, [pc, #268]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005584:	6413      	str	r3, [r2, #64]	; 0x40
 8005586:	4b41      	ldr	r3, [pc, #260]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005592:	4b3f      	ldr	r3, [pc, #252]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a3e      	ldr	r2, [pc, #248]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800559e:	f7fc fe2b 	bl	80021f8 <HAL_GetTick>
 80055a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055a4:	e008      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055a6:	f7fc fe27 	bl	80021f8 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e062      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055b8:	4b35      	ldr	r3, [pc, #212]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0f0      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055c4:	4b31      	ldr	r3, [pc, #196]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d02f      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d028      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055e2:	4b2a      	ldr	r3, [pc, #168]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055ec:	4b29      	ldr	r3, [pc, #164]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055f2:	4b28      	ldr	r3, [pc, #160]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80055f8:	4a24      	ldr	r2, [pc, #144]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055fe:	4b23      	ldr	r3, [pc, #140]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b01      	cmp	r3, #1
 8005608:	d114      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800560a:	f7fc fdf5 	bl	80021f8 <HAL_GetTick>
 800560e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005610:	e00a      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005612:	f7fc fdf1 	bl	80021f8 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005620:	4293      	cmp	r3, r2
 8005622:	d901      	bls.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e02a      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005628:	4b18      	ldr	r3, [pc, #96]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800562a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0ee      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800563c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005640:	d10d      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005642:	4b12      	ldr	r3, [pc, #72]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005656:	490d      	ldr	r1, [pc, #52]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005658:	4313      	orrs	r3, r2
 800565a:	608b      	str	r3, [r1, #8]
 800565c:	e005      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800565e:	4b0b      	ldr	r3, [pc, #44]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	4a0a      	ldr	r2, [pc, #40]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005664:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005668:	6093      	str	r3, [r2, #8]
 800566a:	4b08      	ldr	r3, [pc, #32]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800566c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005676:	4905      	ldr	r1, [pc, #20]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005678:	4313      	orrs	r3, r2
 800567a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	42470068 	.word	0x42470068
 800568c:	40023800 	.word	0x40023800
 8005690:	40007000 	.word	0x40007000
 8005694:	42470e40 	.word	0x42470e40

08005698 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d13e      	bne.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80056b6:	4b23      	ldr	r3, [pc, #140]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d12f      	bne.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80056cc:	4b1e      	ldr	r3, [pc, #120]	; (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056ce:	617b      	str	r3, [r7, #20]
          break;
 80056d0:	e02f      	b.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80056d2:	4b1c      	ldr	r3, [pc, #112]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056de:	d108      	bne.n	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056e0:	4b18      	ldr	r3, [pc, #96]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056e8:	4a18      	ldr	r2, [pc, #96]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80056ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	e007      	b.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056f2:	4b14      	ldr	r3, [pc, #80]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056fa:	4a15      	ldr	r2, [pc, #84]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80056fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005700:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005702:	4b10      	ldr	r3, [pc, #64]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005708:	099b      	lsrs	r3, r3, #6
 800570a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	fb02 f303 	mul.w	r3, r2, r3
 8005714:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005716:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800571c:	0f1b      	lsrs	r3, r3, #28
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	617b      	str	r3, [r7, #20]
          break;
 800572a:	e002      	b.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]
          break;
 8005730:	bf00      	nop
        }
      }
      break;
 8005732:	bf00      	nop
    }
  }
  return frequency;
 8005734:	697b      	ldr	r3, [r7, #20]
}
 8005736:	4618      	mov	r0, r3
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40023800 	.word	0x40023800
 8005748:	00bb8000 	.word	0x00bb8000
 800574c:	007a1200 	.word	0x007a1200
 8005750:	00f42400 	.word	0x00f42400

08005754 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e01c      	b.n	80057a0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	795b      	ldrb	r3, [r3, #5]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d105      	bne.n	800577c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fc faa0 	bl	8001cbc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 0204 	orr.w	r2, r2, #4
 8005790:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	791b      	ldrb	r3, [r3, #4]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d101      	bne.n	80057c2 <HAL_RNG_GenerateRandomNumber+0x1a>
 80057be:	2302      	movs	r3, #2
 80057c0:	e03d      	b.n	800583e <HAL_RNG_GenerateRandomNumber+0x96>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	795b      	ldrb	r3, [r3, #5]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d12c      	bne.n	800582c <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057d8:	f7fc fd0e 	bl	80021f8 <HAL_GetTick>
 80057dc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80057de:	e011      	b.n	8005804 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80057e0:	f7fc fd0a 	bl	80021f8 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d90a      	bls.n	8005804 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e01c      	b.n	800583e <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b01      	cmp	r3, #1
 8005810:	d1e6      	bne.n	80057e0 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	715a      	strb	r2, [r3, #5]
 800582a:	e004      	b.n	8005836 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2204      	movs	r2, #4
 8005830:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	711a      	strb	r2, [r3, #4]

  return status;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b082      	sub	sp, #8
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	330c      	adds	r3, #12
 8005852:	4619      	mov	r1, r3
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff ffa7 	bl	80057a8 <HAL_RNG_GenerateRandomNumber>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d102      	bne.n	8005866 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	e000      	b.n	8005868 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8005866:	2300      	movs	r3, #0
  }
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e07b      	b.n	800597a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	2b00      	cmp	r3, #0
 8005888:	d108      	bne.n	800589c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005892:	d009      	beq.n	80058a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	61da      	str	r2, [r3, #28]
 800589a:	e005      	b.n	80058a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fc fa1c 	bl	8001d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592c:	ea42 0103 	orr.w	r1, r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	0c1b      	lsrs	r3, r3, #16
 8005946:	f003 0104 	and.w	r1, r3, #4
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	f003 0210 	and.w	r2, r3, #16
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69da      	ldr	r2, [r3, #28]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005968:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b088      	sub	sp, #32
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	603b      	str	r3, [r7, #0]
 800598e:	4613      	mov	r3, r2
 8005990:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800599c:	2b01      	cmp	r3, #1
 800599e:	d101      	bne.n	80059a4 <HAL_SPI_Transmit+0x22>
 80059a0:	2302      	movs	r3, #2
 80059a2:	e126      	b.n	8005bf2 <HAL_SPI_Transmit+0x270>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059ac:	f7fc fc24 	bl	80021f8 <HAL_GetTick>
 80059b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059b2:	88fb      	ldrh	r3, [r7, #6]
 80059b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d002      	beq.n	80059c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80059c2:	2302      	movs	r3, #2
 80059c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059c6:	e10b      	b.n	8005be0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <HAL_SPI_Transmit+0x52>
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d102      	bne.n	80059da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059d8:	e102      	b.n	8005be0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2203      	movs	r2, #3
 80059de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	88fa      	ldrh	r2, [r7, #6]
 80059f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	88fa      	ldrh	r2, [r7, #6]
 80059f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a20:	d10f      	bne.n	8005a42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4c:	2b40      	cmp	r3, #64	; 0x40
 8005a4e:	d007      	beq.n	8005a60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a68:	d14b      	bne.n	8005b02 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <HAL_SPI_Transmit+0xf6>
 8005a72:	8afb      	ldrh	r3, [r7, #22]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d13e      	bne.n	8005af6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7c:	881a      	ldrh	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a88:	1c9a      	adds	r2, r3, #2
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a9c:	e02b      	b.n	8005af6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d112      	bne.n	8005ad2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab0:	881a      	ldrh	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	1c9a      	adds	r2, r3, #2
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ad0:	e011      	b.n	8005af6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ad2:	f7fc fb91 	bl	80021f8 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d803      	bhi.n	8005aea <HAL_SPI_Transmit+0x168>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ae8:	d102      	bne.n	8005af0 <HAL_SPI_Transmit+0x16e>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d102      	bne.n	8005af6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005af4:	e074      	b.n	8005be0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1ce      	bne.n	8005a9e <HAL_SPI_Transmit+0x11c>
 8005b00:	e04c      	b.n	8005b9c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <HAL_SPI_Transmit+0x18e>
 8005b0a:	8afb      	ldrh	r3, [r7, #22]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d140      	bne.n	8005b92 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	330c      	adds	r3, #12
 8005b1a:	7812      	ldrb	r2, [r2, #0]
 8005b1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b36:	e02c      	b.n	8005b92 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d113      	bne.n	8005b6e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	330c      	adds	r3, #12
 8005b50:	7812      	ldrb	r2, [r2, #0]
 8005b52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b6c:	e011      	b.n	8005b92 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b6e:	f7fc fb43 	bl	80021f8 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d803      	bhi.n	8005b86 <HAL_SPI_Transmit+0x204>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b84:	d102      	bne.n	8005b8c <HAL_SPI_Transmit+0x20a>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b90:	e026      	b.n	8005be0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1cd      	bne.n	8005b38 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	6839      	ldr	r1, [r7, #0]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f8b3 	bl	8005d0c <SPI_EndRxTxTransaction>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10a      	bne.n	8005bd0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bba:	2300      	movs	r3, #0
 8005bbc:	613b      	str	r3, [r7, #16]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	613b      	str	r3, [r7, #16]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	77fb      	strb	r3, [r7, #31]
 8005bdc:	e000      	b.n	8005be0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005bde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3720      	adds	r7, #32
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b088      	sub	sp, #32
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c0c:	f7fc faf4 	bl	80021f8 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	1a9b      	subs	r3, r3, r2
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	4413      	add	r3, r2
 8005c1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c1c:	f7fc faec 	bl	80021f8 <HAL_GetTick>
 8005c20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c22:	4b39      	ldr	r3, [pc, #228]	; (8005d08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	015b      	lsls	r3, r3, #5
 8005c28:	0d1b      	lsrs	r3, r3, #20
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	fb02 f303 	mul.w	r3, r2, r3
 8005c30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c32:	e054      	b.n	8005cde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c3a:	d050      	beq.n	8005cde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c3c:	f7fc fadc 	bl	80021f8 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d902      	bls.n	8005c52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d13d      	bne.n	8005cce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c6a:	d111      	bne.n	8005c90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c74:	d004      	beq.n	8005c80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c7e:	d107      	bne.n	8005c90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c98:	d10f      	bne.n	8005cba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e017      	b.n	8005cfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	bf0c      	ite	eq
 8005cee:	2301      	moveq	r3, #1
 8005cf0:	2300      	movne	r3, #0
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d19b      	bne.n	8005c34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3720      	adds	r7, #32
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20000008 	.word	0x20000008

08005d0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af02      	add	r7, sp, #8
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d18:	4b1b      	ldr	r3, [pc, #108]	; (8005d88 <SPI_EndRxTxTransaction+0x7c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1b      	ldr	r2, [pc, #108]	; (8005d8c <SPI_EndRxTxTransaction+0x80>)
 8005d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d22:	0d5b      	lsrs	r3, r3, #21
 8005d24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d28:	fb02 f303 	mul.w	r3, r2, r3
 8005d2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d36:	d112      	bne.n	8005d5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2180      	movs	r1, #128	; 0x80
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f7ff ff5a 	bl	8005bfc <SPI_WaitFlagStateUntilTimeout>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d016      	beq.n	8005d7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	f043 0220 	orr.w	r2, r3, #32
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e00f      	b.n	8005d7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00a      	beq.n	8005d7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d74:	2b80      	cmp	r3, #128	; 0x80
 8005d76:	d0f2      	beq.n	8005d5e <SPI_EndRxTxTransaction+0x52>
 8005d78:	e000      	b.n	8005d7c <SPI_EndRxTxTransaction+0x70>
        break;
 8005d7a:	bf00      	nop
  }

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20000008 	.word	0x20000008
 8005d8c:	165e9f81 	.word	0x165e9f81

08005d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e041      	b.n	8005e26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fc f840 	bl	8001e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	f000 fbb4 	bl	800653c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
	...

08005e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d001      	beq.n	8005e48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e04e      	b.n	8005ee6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a23      	ldr	r2, [pc, #140]	; (8005ef4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d022      	beq.n	8005eb0 <HAL_TIM_Base_Start_IT+0x80>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e72:	d01d      	beq.n	8005eb0 <HAL_TIM_Base_Start_IT+0x80>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1f      	ldr	r2, [pc, #124]	; (8005ef8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d018      	beq.n	8005eb0 <HAL_TIM_Base_Start_IT+0x80>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a1e      	ldr	r2, [pc, #120]	; (8005efc <HAL_TIM_Base_Start_IT+0xcc>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d013      	beq.n	8005eb0 <HAL_TIM_Base_Start_IT+0x80>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1c      	ldr	r2, [pc, #112]	; (8005f00 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00e      	beq.n	8005eb0 <HAL_TIM_Base_Start_IT+0x80>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1b      	ldr	r2, [pc, #108]	; (8005f04 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d009      	beq.n	8005eb0 <HAL_TIM_Base_Start_IT+0x80>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a19      	ldr	r2, [pc, #100]	; (8005f08 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d004      	beq.n	8005eb0 <HAL_TIM_Base_Start_IT+0x80>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a18      	ldr	r2, [pc, #96]	; (8005f0c <HAL_TIM_Base_Start_IT+0xdc>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d111      	bne.n	8005ed4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b06      	cmp	r3, #6
 8005ec0:	d010      	beq.n	8005ee4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f042 0201 	orr.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed2:	e007      	b.n	8005ee4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	40010000 	.word	0x40010000
 8005ef8:	40000400 	.word	0x40000400
 8005efc:	40000800 	.word	0x40000800
 8005f00:	40000c00 	.word	0x40000c00
 8005f04:	40010400 	.word	0x40010400
 8005f08:	40014000 	.word	0x40014000
 8005f0c:	40001800 	.word	0x40001800

08005f10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e041      	b.n	8005fa6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f839 	bl	8005fae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f000 faf4 	bl	800653c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b082      	sub	sp, #8
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d122      	bne.n	800601e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d11b      	bne.n	800601e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f06f 0202 	mvn.w	r2, #2
 8005fee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	f003 0303 	and.w	r3, r3, #3
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fa7b 	bl	8006500 <HAL_TIM_IC_CaptureCallback>
 800600a:	e005      	b.n	8006018 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fa6d 	bl	80064ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fa7e 	bl	8006514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b04      	cmp	r3, #4
 800602a:	d122      	bne.n	8006072 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f003 0304 	and.w	r3, r3, #4
 8006036:	2b04      	cmp	r3, #4
 8006038:	d11b      	bne.n	8006072 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f06f 0204 	mvn.w	r2, #4
 8006042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fa51 	bl	8006500 <HAL_TIM_IC_CaptureCallback>
 800605e:	e005      	b.n	800606c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fa43 	bl	80064ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fa54 	bl	8006514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b08      	cmp	r3, #8
 800607e:	d122      	bne.n	80060c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b08      	cmp	r3, #8
 800608c:	d11b      	bne.n	80060c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f06f 0208 	mvn.w	r2, #8
 8006096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2204      	movs	r2, #4
 800609c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	f003 0303 	and.w	r3, r3, #3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fa27 	bl	8006500 <HAL_TIM_IC_CaptureCallback>
 80060b2:	e005      	b.n	80060c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fa19 	bl	80064ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fa2a 	bl	8006514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	d122      	bne.n	800611a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2b10      	cmp	r3, #16
 80060e0:	d11b      	bne.n	800611a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f06f 0210 	mvn.w	r2, #16
 80060ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2208      	movs	r2, #8
 80060f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f9fd 	bl	8006500 <HAL_TIM_IC_CaptureCallback>
 8006106:	e005      	b.n	8006114 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f9ef 	bl	80064ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fa00 	bl	8006514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b01      	cmp	r3, #1
 8006126:	d10e      	bne.n	8006146 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b01      	cmp	r3, #1
 8006134:	d107      	bne.n	8006146 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f06f 0201 	mvn.w	r2, #1
 800613e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f9c9 	bl	80064d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006150:	2b80      	cmp	r3, #128	; 0x80
 8006152:	d10e      	bne.n	8006172 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615e:	2b80      	cmp	r3, #128	; 0x80
 8006160:	d107      	bne.n	8006172 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800616a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fd55 	bl	8006c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617c:	2b40      	cmp	r3, #64	; 0x40
 800617e:	d10e      	bne.n	800619e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d107      	bne.n	800619e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f9c5 	bl	8006528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	f003 0320 	and.w	r3, r3, #32
 80061a8:	2b20      	cmp	r3, #32
 80061aa:	d10e      	bne.n	80061ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	d107      	bne.n	80061ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f06f 0220 	mvn.w	r2, #32
 80061c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fd1f 	bl	8006c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d101      	bne.n	80061ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80061ea:	2302      	movs	r3, #2
 80061ec:	e0ac      	b.n	8006348 <HAL_TIM_PWM_ConfigChannel+0x174>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b0c      	cmp	r3, #12
 80061fa:	f200 809f 	bhi.w	800633c <HAL_TIM_PWM_ConfigChannel+0x168>
 80061fe:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006204:	08006239 	.word	0x08006239
 8006208:	0800633d 	.word	0x0800633d
 800620c:	0800633d 	.word	0x0800633d
 8006210:	0800633d 	.word	0x0800633d
 8006214:	08006279 	.word	0x08006279
 8006218:	0800633d 	.word	0x0800633d
 800621c:	0800633d 	.word	0x0800633d
 8006220:	0800633d 	.word	0x0800633d
 8006224:	080062bb 	.word	0x080062bb
 8006228:	0800633d 	.word	0x0800633d
 800622c:	0800633d 	.word	0x0800633d
 8006230:	0800633d 	.word	0x0800633d
 8006234:	080062fb 	.word	0x080062fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	4618      	mov	r0, r3
 8006240:	f000 fa1c 	bl	800667c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699a      	ldr	r2, [r3, #24]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0208 	orr.w	r2, r2, #8
 8006252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699a      	ldr	r2, [r3, #24]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0204 	bic.w	r2, r2, #4
 8006262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6999      	ldr	r1, [r3, #24]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	691a      	ldr	r2, [r3, #16]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	619a      	str	r2, [r3, #24]
      break;
 8006276:	e062      	b.n	800633e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68b9      	ldr	r1, [r7, #8]
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fa6c 	bl	800675c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699a      	ldr	r2, [r3, #24]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6999      	ldr	r1, [r3, #24]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	021a      	lsls	r2, r3, #8
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	619a      	str	r2, [r3, #24]
      break;
 80062b8:	e041      	b.n	800633e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68b9      	ldr	r1, [r7, #8]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 fac1 	bl	8006848 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69da      	ldr	r2, [r3, #28]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 0208 	orr.w	r2, r2, #8
 80062d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69da      	ldr	r2, [r3, #28]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0204 	bic.w	r2, r2, #4
 80062e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69d9      	ldr	r1, [r3, #28]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	61da      	str	r2, [r3, #28]
      break;
 80062f8:	e021      	b.n	800633e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fb15 	bl	8006930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69da      	ldr	r2, [r3, #28]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69da      	ldr	r2, [r3, #28]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69d9      	ldr	r1, [r3, #28]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	021a      	lsls	r2, r3, #8
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	61da      	str	r2, [r3, #28]
      break;
 800633a:	e000      	b.n	800633e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800633c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_TIM_ConfigClockSource+0x18>
 8006364:	2302      	movs	r3, #2
 8006366:	e0b3      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x180>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006386:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800638e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a0:	d03e      	beq.n	8006420 <HAL_TIM_ConfigClockSource+0xd0>
 80063a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a6:	f200 8087 	bhi.w	80064b8 <HAL_TIM_ConfigClockSource+0x168>
 80063aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ae:	f000 8085 	beq.w	80064bc <HAL_TIM_ConfigClockSource+0x16c>
 80063b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b6:	d87f      	bhi.n	80064b8 <HAL_TIM_ConfigClockSource+0x168>
 80063b8:	2b70      	cmp	r3, #112	; 0x70
 80063ba:	d01a      	beq.n	80063f2 <HAL_TIM_ConfigClockSource+0xa2>
 80063bc:	2b70      	cmp	r3, #112	; 0x70
 80063be:	d87b      	bhi.n	80064b8 <HAL_TIM_ConfigClockSource+0x168>
 80063c0:	2b60      	cmp	r3, #96	; 0x60
 80063c2:	d050      	beq.n	8006466 <HAL_TIM_ConfigClockSource+0x116>
 80063c4:	2b60      	cmp	r3, #96	; 0x60
 80063c6:	d877      	bhi.n	80064b8 <HAL_TIM_ConfigClockSource+0x168>
 80063c8:	2b50      	cmp	r3, #80	; 0x50
 80063ca:	d03c      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0xf6>
 80063cc:	2b50      	cmp	r3, #80	; 0x50
 80063ce:	d873      	bhi.n	80064b8 <HAL_TIM_ConfigClockSource+0x168>
 80063d0:	2b40      	cmp	r3, #64	; 0x40
 80063d2:	d058      	beq.n	8006486 <HAL_TIM_ConfigClockSource+0x136>
 80063d4:	2b40      	cmp	r3, #64	; 0x40
 80063d6:	d86f      	bhi.n	80064b8 <HAL_TIM_ConfigClockSource+0x168>
 80063d8:	2b30      	cmp	r3, #48	; 0x30
 80063da:	d064      	beq.n	80064a6 <HAL_TIM_ConfigClockSource+0x156>
 80063dc:	2b30      	cmp	r3, #48	; 0x30
 80063de:	d86b      	bhi.n	80064b8 <HAL_TIM_ConfigClockSource+0x168>
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	d060      	beq.n	80064a6 <HAL_TIM_ConfigClockSource+0x156>
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	d867      	bhi.n	80064b8 <HAL_TIM_ConfigClockSource+0x168>
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d05c      	beq.n	80064a6 <HAL_TIM_ConfigClockSource+0x156>
 80063ec:	2b10      	cmp	r3, #16
 80063ee:	d05a      	beq.n	80064a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80063f0:	e062      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6899      	ldr	r1, [r3, #8]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f000 fb65 	bl	8006ad0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006414:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	609a      	str	r2, [r3, #8]
      break;
 800641e:	e04e      	b.n	80064be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6818      	ldr	r0, [r3, #0]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	6899      	ldr	r1, [r3, #8]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f000 fb4e 	bl	8006ad0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006442:	609a      	str	r2, [r3, #8]
      break;
 8006444:	e03b      	b.n	80064be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	6859      	ldr	r1, [r3, #4]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	461a      	mov	r2, r3
 8006454:	f000 fac2 	bl	80069dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2150      	movs	r1, #80	; 0x50
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fb1b 	bl	8006a9a <TIM_ITRx_SetConfig>
      break;
 8006464:	e02b      	b.n	80064be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	6859      	ldr	r1, [r3, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	461a      	mov	r2, r3
 8006474:	f000 fae1 	bl	8006a3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2160      	movs	r1, #96	; 0x60
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fb0b 	bl	8006a9a <TIM_ITRx_SetConfig>
      break;
 8006484:	e01b      	b.n	80064be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6818      	ldr	r0, [r3, #0]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	6859      	ldr	r1, [r3, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	461a      	mov	r2, r3
 8006494:	f000 faa2 	bl	80069dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2140      	movs	r1, #64	; 0x40
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 fafb 	bl	8006a9a <TIM_ITRx_SetConfig>
      break;
 80064a4:	e00b      	b.n	80064be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4619      	mov	r1, r3
 80064b0:	4610      	mov	r0, r2
 80064b2:	f000 faf2 	bl	8006a9a <TIM_ITRx_SetConfig>
        break;
 80064b6:	e002      	b.n	80064be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064b8:	bf00      	nop
 80064ba:	e000      	b.n	80064be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a40      	ldr	r2, [pc, #256]	; (8006650 <TIM_Base_SetConfig+0x114>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d013      	beq.n	800657c <TIM_Base_SetConfig+0x40>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800655a:	d00f      	beq.n	800657c <TIM_Base_SetConfig+0x40>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a3d      	ldr	r2, [pc, #244]	; (8006654 <TIM_Base_SetConfig+0x118>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00b      	beq.n	800657c <TIM_Base_SetConfig+0x40>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a3c      	ldr	r2, [pc, #240]	; (8006658 <TIM_Base_SetConfig+0x11c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d007      	beq.n	800657c <TIM_Base_SetConfig+0x40>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a3b      	ldr	r2, [pc, #236]	; (800665c <TIM_Base_SetConfig+0x120>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <TIM_Base_SetConfig+0x40>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a3a      	ldr	r2, [pc, #232]	; (8006660 <TIM_Base_SetConfig+0x124>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d108      	bne.n	800658e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	4313      	orrs	r3, r2
 800658c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a2f      	ldr	r2, [pc, #188]	; (8006650 <TIM_Base_SetConfig+0x114>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d02b      	beq.n	80065ee <TIM_Base_SetConfig+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800659c:	d027      	beq.n	80065ee <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a2c      	ldr	r2, [pc, #176]	; (8006654 <TIM_Base_SetConfig+0x118>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d023      	beq.n	80065ee <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a2b      	ldr	r2, [pc, #172]	; (8006658 <TIM_Base_SetConfig+0x11c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d01f      	beq.n	80065ee <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a2a      	ldr	r2, [pc, #168]	; (800665c <TIM_Base_SetConfig+0x120>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d01b      	beq.n	80065ee <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a29      	ldr	r2, [pc, #164]	; (8006660 <TIM_Base_SetConfig+0x124>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d017      	beq.n	80065ee <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a28      	ldr	r2, [pc, #160]	; (8006664 <TIM_Base_SetConfig+0x128>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d013      	beq.n	80065ee <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a27      	ldr	r2, [pc, #156]	; (8006668 <TIM_Base_SetConfig+0x12c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00f      	beq.n	80065ee <TIM_Base_SetConfig+0xb2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a26      	ldr	r2, [pc, #152]	; (800666c <TIM_Base_SetConfig+0x130>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00b      	beq.n	80065ee <TIM_Base_SetConfig+0xb2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a25      	ldr	r2, [pc, #148]	; (8006670 <TIM_Base_SetConfig+0x134>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d007      	beq.n	80065ee <TIM_Base_SetConfig+0xb2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a24      	ldr	r2, [pc, #144]	; (8006674 <TIM_Base_SetConfig+0x138>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d003      	beq.n	80065ee <TIM_Base_SetConfig+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a23      	ldr	r2, [pc, #140]	; (8006678 <TIM_Base_SetConfig+0x13c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d108      	bne.n	8006600 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a0a      	ldr	r2, [pc, #40]	; (8006650 <TIM_Base_SetConfig+0x114>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d003      	beq.n	8006634 <TIM_Base_SetConfig+0xf8>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a0c      	ldr	r2, [pc, #48]	; (8006660 <TIM_Base_SetConfig+0x124>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d103      	bne.n	800663c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	615a      	str	r2, [r3, #20]
}
 8006642:	bf00      	nop
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	40010000 	.word	0x40010000
 8006654:	40000400 	.word	0x40000400
 8006658:	40000800 	.word	0x40000800
 800665c:	40000c00 	.word	0x40000c00
 8006660:	40010400 	.word	0x40010400
 8006664:	40014000 	.word	0x40014000
 8006668:	40014400 	.word	0x40014400
 800666c:	40014800 	.word	0x40014800
 8006670:	40001800 	.word	0x40001800
 8006674:	40001c00 	.word	0x40001c00
 8006678:	40002000 	.word	0x40002000

0800667c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	f023 0201 	bic.w	r2, r3, #1
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 0303 	bic.w	r3, r3, #3
 80066b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f023 0302 	bic.w	r3, r3, #2
 80066c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a20      	ldr	r2, [pc, #128]	; (8006754 <TIM_OC1_SetConfig+0xd8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_OC1_SetConfig+0x64>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a1f      	ldr	r2, [pc, #124]	; (8006758 <TIM_OC1_SetConfig+0xdc>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10c      	bne.n	80066fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f023 0308 	bic.w	r3, r3, #8
 80066e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f023 0304 	bic.w	r3, r3, #4
 80066f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a15      	ldr	r2, [pc, #84]	; (8006754 <TIM_OC1_SetConfig+0xd8>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d003      	beq.n	800670a <TIM_OC1_SetConfig+0x8e>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a14      	ldr	r2, [pc, #80]	; (8006758 <TIM_OC1_SetConfig+0xdc>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d111      	bne.n	800672e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	4313      	orrs	r3, r2
 8006722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	621a      	str	r2, [r3, #32]
}
 8006748:	bf00      	nop
 800674a:	371c      	adds	r7, #28
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	40010000 	.word	0x40010000
 8006758:	40010400 	.word	0x40010400

0800675c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	f023 0210 	bic.w	r2, r3, #16
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800678a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	4313      	orrs	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f023 0320 	bic.w	r3, r3, #32
 80067a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	011b      	lsls	r3, r3, #4
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a22      	ldr	r2, [pc, #136]	; (8006840 <TIM_OC2_SetConfig+0xe4>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d003      	beq.n	80067c4 <TIM_OC2_SetConfig+0x68>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a21      	ldr	r2, [pc, #132]	; (8006844 <TIM_OC2_SetConfig+0xe8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d10d      	bne.n	80067e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a17      	ldr	r2, [pc, #92]	; (8006840 <TIM_OC2_SetConfig+0xe4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <TIM_OC2_SetConfig+0x94>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a16      	ldr	r2, [pc, #88]	; (8006844 <TIM_OC2_SetConfig+0xe8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d113      	bne.n	8006818 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	621a      	str	r2, [r3, #32]
}
 8006832:	bf00      	nop
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	40010000 	.word	0x40010000
 8006844:	40010400 	.word	0x40010400

08006848 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0303 	bic.w	r3, r3, #3
 800687e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	021b      	lsls	r3, r3, #8
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a21      	ldr	r2, [pc, #132]	; (8006928 <TIM_OC3_SetConfig+0xe0>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d003      	beq.n	80068ae <TIM_OC3_SetConfig+0x66>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a20      	ldr	r2, [pc, #128]	; (800692c <TIM_OC3_SetConfig+0xe4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d10d      	bne.n	80068ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	021b      	lsls	r3, r3, #8
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	4313      	orrs	r3, r2
 80068c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a16      	ldr	r2, [pc, #88]	; (8006928 <TIM_OC3_SetConfig+0xe0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d003      	beq.n	80068da <TIM_OC3_SetConfig+0x92>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a15      	ldr	r2, [pc, #84]	; (800692c <TIM_OC3_SetConfig+0xe4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d113      	bne.n	8006902 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	011b      	lsls	r3, r3, #4
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	4313      	orrs	r3, r2
 8006900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	621a      	str	r2, [r3, #32]
}
 800691c:	bf00      	nop
 800691e:	371c      	adds	r7, #28
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	40010000 	.word	0x40010000
 800692c:	40010400 	.word	0x40010400

08006930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	021b      	lsls	r3, r3, #8
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4313      	orrs	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800697a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	031b      	lsls	r3, r3, #12
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a12      	ldr	r2, [pc, #72]	; (80069d4 <TIM_OC4_SetConfig+0xa4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d003      	beq.n	8006998 <TIM_OC4_SetConfig+0x68>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a11      	ldr	r2, [pc, #68]	; (80069d8 <TIM_OC4_SetConfig+0xa8>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d109      	bne.n	80069ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800699e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	019b      	lsls	r3, r3, #6
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	621a      	str	r2, [r3, #32]
}
 80069c6:	bf00      	nop
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40010400 	.word	0x40010400

080069dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	f023 0201 	bic.w	r2, r3, #1
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f023 030a 	bic.w	r3, r3, #10
 8006a18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	621a      	str	r2, [r3, #32]
}
 8006a2e:	bf00      	nop
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b087      	sub	sp, #28
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f023 0210 	bic.w	r2, r3, #16
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	031b      	lsls	r3, r3, #12
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	621a      	str	r2, [r3, #32]
}
 8006a8e:	bf00      	nop
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	f043 0307 	orr.w	r3, r3, #7
 8006abc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	609a      	str	r2, [r3, #8]
}
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	021a      	lsls	r2, r3, #8
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	431a      	orrs	r2, r3
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	609a      	str	r2, [r3, #8]
}
 8006b04:	bf00      	nop
 8006b06:	371c      	adds	r7, #28
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d101      	bne.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b24:	2302      	movs	r3, #2
 8006b26:	e05a      	b.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a21      	ldr	r2, [pc, #132]	; (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d022      	beq.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b74:	d01d      	beq.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a1d      	ldr	r2, [pc, #116]	; (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d018      	beq.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a1b      	ldr	r2, [pc, #108]	; (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d013      	beq.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a1a      	ldr	r2, [pc, #104]	; (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00e      	beq.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a18      	ldr	r2, [pc, #96]	; (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d009      	beq.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a17      	ldr	r2, [pc, #92]	; (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d004      	beq.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a15      	ldr	r2, [pc, #84]	; (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d10c      	bne.n	8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40010000 	.word	0x40010000
 8006bf0:	40000400 	.word	0x40000400
 8006bf4:	40000800 	.word	0x40000800
 8006bf8:	40000c00 	.word	0x40000c00
 8006bfc:	40010400 	.word	0x40010400
 8006c00:	40014000 	.word	0x40014000
 8006c04:	40001800 	.word	0x40001800

08006c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c30:	b084      	sub	sp, #16
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	f107 001c 	add.w	r0, r7, #28
 8006c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d122      	bne.n	8006c8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d105      	bne.n	8006c82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f94a 	bl	8006f1c <USB_CoreReset>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	73fb      	strb	r3, [r7, #15]
 8006c8c:	e01a      	b.n	8006cc4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f93e 	bl	8006f1c <USB_CoreReset>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d106      	bne.n	8006cb8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	639a      	str	r2, [r3, #56]	; 0x38
 8006cb6:	e005      	b.n	8006cc4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d10b      	bne.n	8006ce2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f043 0206 	orr.w	r2, r3, #6
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f043 0220 	orr.w	r2, r3, #32
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cee:	b004      	add	sp, #16
 8006cf0:	4770      	bx	lr

08006cf2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f043 0201 	orr.w	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f023 0201 	bic.w	r2, r3, #1
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b082      	sub	sp, #8
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d4e:	78fb      	ldrb	r3, [r7, #3]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d106      	bne.n	8006d62 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	60da      	str	r2, [r3, #12]
 8006d60:	e00b      	b.n	8006d7a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d106      	bne.n	8006d76 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	60da      	str	r2, [r3, #12]
 8006d74:	e001      	b.n	8006d7a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e003      	b.n	8006d82 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006d7a:	2032      	movs	r0, #50	; 0x32
 8006d7c:	f7fb fa48 	bl	8002210 <HAL_Delay>

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	019b      	lsls	r3, r3, #6
 8006d9e:	f043 0220 	orr.w	r2, r3, #32
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3301      	adds	r3, #1
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4a09      	ldr	r2, [pc, #36]	; (8006dd4 <USB_FlushTxFifo+0x48>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d901      	bls.n	8006db8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e006      	b.n	8006dc6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	f003 0320 	and.w	r3, r3, #32
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d0f0      	beq.n	8006da6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	00030d40 	.word	0x00030d40

08006dd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2210      	movs	r2, #16
 8006de8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	3301      	adds	r3, #1
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4a09      	ldr	r2, [pc, #36]	; (8006e18 <USB_FlushRxFifo+0x40>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d901      	bls.n	8006dfc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e006      	b.n	8006e0a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	f003 0310 	and.w	r3, r3, #16
 8006e04:	2b10      	cmp	r3, #16
 8006e06:	d0f0      	beq.n	8006dea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	00030d40 	.word	0x00030d40

08006e1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b089      	sub	sp, #36	; 0x24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	4611      	mov	r1, r2
 8006e28:	461a      	mov	r2, r3
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	71fb      	strb	r3, [r7, #7]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006e3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d11a      	bne.n	8006e78 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e42:	88bb      	ldrh	r3, [r7, #4]
 8006e44:	3303      	adds	r3, #3
 8006e46:	089b      	lsrs	r3, r3, #2
 8006e48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61bb      	str	r3, [r7, #24]
 8006e4e:	e00f      	b.n	8006e70 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e50:	79fb      	ldrb	r3, [r7, #7]
 8006e52:	031a      	lsls	r2, r3, #12
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	3304      	adds	r3, #4
 8006e68:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	61bb      	str	r3, [r7, #24]
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d3eb      	bcc.n	8006e50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3724      	adds	r7, #36	; 0x24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b089      	sub	sp, #36	; 0x24
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	4613      	mov	r3, r2
 8006e92:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006e9c:	88fb      	ldrh	r3, [r7, #6]
 8006e9e:	3303      	adds	r3, #3
 8006ea0:	089b      	lsrs	r3, r3, #2
 8006ea2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	61bb      	str	r3, [r7, #24]
 8006ea8:	e00b      	b.n	8006ec2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	601a      	str	r2, [r3, #0]
    pDest++;
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	61bb      	str	r3, [r7, #24]
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d3ef      	bcc.n	8006eaa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006eca:	69fb      	ldr	r3, [r7, #28]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3724      	adds	r7, #36	; 0x24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	4013      	ands	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
	...

08006f1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4a13      	ldr	r2, [pc, #76]	; (8006f80 <USB_CoreReset+0x64>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d901      	bls.n	8006f3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e01b      	b.n	8006f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	daf2      	bge.n	8006f28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	f043 0201 	orr.w	r2, r3, #1
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3301      	adds	r3, #1
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4a09      	ldr	r2, [pc, #36]	; (8006f80 <USB_CoreReset+0x64>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d901      	bls.n	8006f64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e006      	b.n	8006f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d0f0      	beq.n	8006f52 <USB_CoreReset+0x36>

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	00030d40 	.word	0x00030d40

08006f84 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f84:	b084      	sub	sp, #16
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	f107 001c 	add.w	r0, r7, #28
 8006f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006faa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d018      	beq.n	8007008 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d10a      	bne.n	8006ff2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fea:	f043 0304 	orr.w	r3, r3, #4
 8006fee:	6013      	str	r3, [r2, #0]
 8006ff0:	e014      	b.n	800701c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007000:	f023 0304 	bic.w	r3, r3, #4
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	e009      	b.n	800701c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007016:	f023 0304 	bic.w	r3, r3, #4
 800701a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800701c:	2110      	movs	r1, #16
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff feb4 	bl	8006d8c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff fed7 	bl	8006dd8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800702a:	2300      	movs	r3, #0
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	e015      	b.n	800705c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	4413      	add	r3, r2
 8007038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800703c:	461a      	mov	r2, r3
 800703e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007042:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	4413      	add	r3, r2
 800704c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007050:	461a      	mov	r2, r3
 8007052:	2300      	movs	r3, #0
 8007054:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3301      	adds	r3, #1
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	429a      	cmp	r2, r3
 8007062:	d3e5      	bcc.n	8007030 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007064:	2101      	movs	r1, #1
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f8ac 	bl	80071c4 <USB_DriveVbus>

  HAL_Delay(200U);
 800706c:	20c8      	movs	r0, #200	; 0xc8
 800706e:	f7fb f8cf 	bl	8002210 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800707e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00b      	beq.n	80070a4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007092:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a14      	ldr	r2, [pc, #80]	; (80070e8 <USB_HostInit+0x164>)
 8007098:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a13      	ldr	r2, [pc, #76]	; (80070ec <USB_HostInit+0x168>)
 800709e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80070a2:	e009      	b.n	80070b8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2280      	movs	r2, #128	; 0x80
 80070a8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a10      	ldr	r2, [pc, #64]	; (80070f0 <USB_HostInit+0x16c>)
 80070ae:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a10      	ldr	r2, [pc, #64]	; (80070f4 <USB_HostInit+0x170>)
 80070b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d105      	bne.n	80070ca <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	f043 0210 	orr.w	r2, r3, #16
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699a      	ldr	r2, [r3, #24]
 80070ce:	4b0a      	ldr	r3, [pc, #40]	; (80070f8 <USB_HostInit+0x174>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070e2:	b004      	add	sp, #16
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	01000200 	.word	0x01000200
 80070ec:	00e00300 	.word	0x00e00300
 80070f0:	00600080 	.word	0x00600080
 80070f4:	004000e0 	.word	0x004000e0
 80070f8:	a3200008 	.word	0xa3200008

080070fc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800711a:	f023 0303 	bic.w	r3, r3, #3
 800711e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	f003 0303 	and.w	r3, r3, #3
 800712e:	68f9      	ldr	r1, [r7, #12]
 8007130:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007134:	4313      	orrs	r3, r2
 8007136:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d107      	bne.n	800714e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007144:	461a      	mov	r2, r3
 8007146:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800714a:	6053      	str	r3, [r2, #4]
 800714c:	e009      	b.n	8007162 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800714e:	78fb      	ldrb	r3, [r7, #3]
 8007150:	2b02      	cmp	r3, #2
 8007152:	d106      	bne.n	8007162 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800715a:	461a      	mov	r2, r3
 800715c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007160:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007190:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800719a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800719e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80071a0:	2064      	movs	r0, #100	; 0x64
 80071a2:	f7fb f835 	bl	8002210 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80071ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80071b4:	200a      	movs	r0, #10
 80071b6:	f7fb f82b 	bl	8002210 <HAL_Delay>

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	460b      	mov	r3, r1
 80071ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80071e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d109      	bne.n	8007208 <USB_DriveVbus+0x44>
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d106      	bne.n	8007208 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007202:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007206:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800720e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007212:	d109      	bne.n	8007228 <USB_DriveVbus+0x64>
 8007214:	78fb      	ldrb	r3, [r7, #3]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d106      	bne.n	8007228 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007226:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007236:	b480      	push	{r7}
 8007238:	b085      	sub	sp, #20
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	0c5b      	lsrs	r3, r3, #17
 8007254:	f003 0303 	and.w	r3, r3, #3
}
 8007258:	4618      	mov	r0, r3
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	b29b      	uxth	r3, r3
}
 800727a:	4618      	mov	r0, r3
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
	...

08007288 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	4608      	mov	r0, r1
 8007292:	4611      	mov	r1, r2
 8007294:	461a      	mov	r2, r3
 8007296:	4603      	mov	r3, r0
 8007298:	70fb      	strb	r3, [r7, #3]
 800729a:	460b      	mov	r3, r1
 800729c:	70bb      	strb	r3, [r7, #2]
 800729e:	4613      	mov	r3, r2
 80072a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80072aa:	78fb      	ldrb	r3, [r7, #3]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b6:	461a      	mov	r2, r3
 80072b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072bc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80072be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d87e      	bhi.n	80073c4 <USB_HC_Init+0x13c>
 80072c6:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <USB_HC_Init+0x44>)
 80072c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072cc:	080072dd 	.word	0x080072dd
 80072d0:	08007387 	.word	0x08007387
 80072d4:	080072dd 	.word	0x080072dd
 80072d8:	08007349 	.word	0x08007349
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80072dc:	78fb      	ldrb	r3, [r7, #3]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e8:	461a      	mov	r2, r3
 80072ea:	f240 439d 	movw	r3, #1181	; 0x49d
 80072ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80072f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	da10      	bge.n	800731a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80072f8:	78fb      	ldrb	r3, [r7, #3]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	78fa      	ldrb	r2, [r7, #3]
 8007308:	0151      	lsls	r1, r2, #5
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	440a      	add	r2, r1
 800730e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007316:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007318:	e057      	b.n	80073ca <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007322:	2b00      	cmp	r3, #0
 8007324:	d051      	beq.n	80073ca <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007326:	78fb      	ldrb	r3, [r7, #3]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	4413      	add	r3, r2
 800732e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	78fa      	ldrb	r2, [r7, #3]
 8007336:	0151      	lsls	r1, r2, #5
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	440a      	add	r2, r1
 800733c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007340:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007344:	60d3      	str	r3, [r2, #12]
      break;
 8007346:	e040      	b.n	80073ca <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007348:	78fb      	ldrb	r3, [r7, #3]
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	4413      	add	r3, r2
 8007350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007354:	461a      	mov	r2, r3
 8007356:	f240 639d 	movw	r3, #1693	; 0x69d
 800735a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800735c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007360:	2b00      	cmp	r3, #0
 8007362:	da34      	bge.n	80073ce <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	4413      	add	r3, r2
 800736c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	78fa      	ldrb	r2, [r7, #3]
 8007374:	0151      	lsls	r1, r2, #5
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	440a      	add	r2, r1
 800737a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800737e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007382:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007384:	e023      	b.n	80073ce <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007386:	78fb      	ldrb	r3, [r7, #3]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	4413      	add	r3, r2
 800738e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007392:	461a      	mov	r2, r3
 8007394:	f240 2325 	movw	r3, #549	; 0x225
 8007398:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800739a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	da17      	bge.n	80073d2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80073a2:	78fb      	ldrb	r3, [r7, #3]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	78fa      	ldrb	r2, [r7, #3]
 80073b2:	0151      	lsls	r1, r2, #5
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	440a      	add	r2, r1
 80073b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073bc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80073c0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80073c2:	e006      	b.n	80073d2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	77fb      	strb	r3, [r7, #31]
      break;
 80073c8:	e004      	b.n	80073d4 <USB_HC_Init+0x14c>
      break;
 80073ca:	bf00      	nop
 80073cc:	e002      	b.n	80073d4 <USB_HC_Init+0x14c>
      break;
 80073ce:	bf00      	nop
 80073d0:	e000      	b.n	80073d4 <USB_HC_Init+0x14c>
      break;
 80073d2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073da:	699a      	ldr	r2, [r3, #24]
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	f003 030f 	and.w	r3, r3, #15
 80073e2:	2101      	movs	r1, #1
 80073e4:	fa01 f303 	lsl.w	r3, r1, r3
 80073e8:	6939      	ldr	r1, [r7, #16]
 80073ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80073ee:	4313      	orrs	r3, r2
 80073f0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80073fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007402:	2b00      	cmp	r3, #0
 8007404:	da03      	bge.n	800740e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800740a:	61bb      	str	r3, [r7, #24]
 800740c:	e001      	b.n	8007412 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7ff ff0f 	bl	8007236 <USB_GetHostSpeed>
 8007418:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800741a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800741e:	2b02      	cmp	r3, #2
 8007420:	d106      	bne.n	8007430 <USB_HC_Init+0x1a8>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b02      	cmp	r3, #2
 8007426:	d003      	beq.n	8007430 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800742c:	617b      	str	r3, [r7, #20]
 800742e:	e001      	b.n	8007434 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007430:	2300      	movs	r3, #0
 8007432:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007434:	787b      	ldrb	r3, [r7, #1]
 8007436:	059b      	lsls	r3, r3, #22
 8007438:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800743c:	78bb      	ldrb	r3, [r7, #2]
 800743e:	02db      	lsls	r3, r3, #11
 8007440:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007444:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007446:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800744a:	049b      	lsls	r3, r3, #18
 800744c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007450:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007452:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007454:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007458:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800745e:	78fb      	ldrb	r3, [r7, #3]
 8007460:	0159      	lsls	r1, r3, #5
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	440b      	add	r3, r1
 8007466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800746a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007470:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007472:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007476:	2b03      	cmp	r3, #3
 8007478:	d10f      	bne.n	800749a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	4413      	add	r3, r2
 8007482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	78fa      	ldrb	r2, [r7, #3]
 800748a:	0151      	lsls	r1, r2, #5
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	440a      	add	r2, r1
 8007490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007494:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007498:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800749a:	7ffb      	ldrb	r3, [r7, #31]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3720      	adds	r7, #32
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08c      	sub	sp, #48	; 0x30
 80074a8:	af02      	add	r7, sp, #8
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	4613      	mov	r3, r2
 80074b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	785b      	ldrb	r3, [r3, #1]
 80074ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80074bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074c0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d02d      	beq.n	800752a <USB_HC_StartXfer+0x86>
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	791b      	ldrb	r3, [r3, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d129      	bne.n	800752a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d117      	bne.n	800750c <USB_HC_StartXfer+0x68>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	79db      	ldrb	r3, [r3, #7]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <USB_HC_StartXfer+0x48>
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	79db      	ldrb	r3, [r3, #7]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d10f      	bne.n	800750c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	0151      	lsls	r1, r2, #5
 80074fe:	6a3a      	ldr	r2, [r7, #32]
 8007500:	440a      	add	r2, r1
 8007502:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10b      	bne.n	800752a <USB_HC_StartXfer+0x86>
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	795b      	ldrb	r3, [r3, #5]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d107      	bne.n	800752a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	785b      	ldrb	r3, [r3, #1]
 800751e:	4619      	mov	r1, r3
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 fa2f 	bl	8007984 <USB_DoPing>
      return HAL_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	e0f8      	b.n	800771c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d018      	beq.n	8007564 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	8912      	ldrh	r2, [r2, #8]
 800753a:	4413      	add	r3, r2
 800753c:	3b01      	subs	r3, #1
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	8912      	ldrh	r2, [r2, #8]
 8007542:	fbb3 f3f2 	udiv	r3, r3, r2
 8007546:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007548:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800754a:	8b7b      	ldrh	r3, [r7, #26]
 800754c:	429a      	cmp	r2, r3
 800754e:	d90b      	bls.n	8007568 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007550:	8b7b      	ldrh	r3, [r7, #26]
 8007552:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007554:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	8912      	ldrh	r2, [r2, #8]
 800755a:	fb02 f203 	mul.w	r2, r2, r3
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	611a      	str	r2, [r3, #16]
 8007562:	e001      	b.n	8007568 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007564:	2301      	movs	r3, #1
 8007566:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	78db      	ldrb	r3, [r3, #3]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d007      	beq.n	8007580 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007570:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	8912      	ldrh	r2, [r2, #8]
 8007576:	fb02 f203 	mul.w	r2, r2, r3
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	611a      	str	r2, [r3, #16]
 800757e:	e003      	b.n	8007588 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	695a      	ldr	r2, [r3, #20]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007590:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007592:	04d9      	lsls	r1, r3, #19
 8007594:	4b63      	ldr	r3, [pc, #396]	; (8007724 <USB_HC_StartXfer+0x280>)
 8007596:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007598:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	7a9b      	ldrb	r3, [r3, #10]
 800759e:	075b      	lsls	r3, r3, #29
 80075a0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075a4:	69f9      	ldr	r1, [r7, #28]
 80075a6:	0148      	lsls	r0, r1, #5
 80075a8:	6a39      	ldr	r1, [r7, #32]
 80075aa:	4401      	add	r1, r0
 80075ac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80075b0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075b2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d009      	beq.n	80075ce <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	68d9      	ldr	r1, [r3, #12]
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ca:	460a      	mov	r2, r1
 80075cc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	bf0c      	ite	eq
 80075de:	2301      	moveq	r3, #1
 80075e0:	2300      	movne	r3, #0
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69fa      	ldr	r2, [r7, #28]
 80075f6:	0151      	lsls	r1, r2, #5
 80075f8:	6a3a      	ldr	r2, [r7, #32]
 80075fa:	440a      	add	r2, r1
 80075fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007600:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007604:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	4413      	add	r3, r2
 800760e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	7e7b      	ldrb	r3, [r7, #25]
 8007616:	075b      	lsls	r3, r3, #29
 8007618:	69f9      	ldr	r1, [r7, #28]
 800761a:	0148      	lsls	r0, r1, #5
 800761c:	6a39      	ldr	r1, [r7, #32]
 800761e:	4401      	add	r1, r0
 8007620:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007624:	4313      	orrs	r3, r2
 8007626:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	6a3b      	ldr	r3, [r7, #32]
 800762e:	4413      	add	r3, r2
 8007630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800763e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	78db      	ldrb	r3, [r3, #3]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d004      	beq.n	8007652 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	e003      	b.n	800765a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007658:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007660:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	4413      	add	r3, r2
 800766a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800766e:	461a      	mov	r2, r3
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007674:	79fb      	ldrb	r3, [r7, #7]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d001      	beq.n	800767e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	e04e      	b.n	800771c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	78db      	ldrb	r3, [r3, #3]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d149      	bne.n	800771a <USB_HC_StartXfer+0x276>
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d045      	beq.n	800771a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	79db      	ldrb	r3, [r3, #7]
 8007692:	2b03      	cmp	r3, #3
 8007694:	d830      	bhi.n	80076f8 <USB_HC_StartXfer+0x254>
 8007696:	a201      	add	r2, pc, #4	; (adr r2, 800769c <USB_HC_StartXfer+0x1f8>)
 8007698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769c:	080076ad 	.word	0x080076ad
 80076a0:	080076d1 	.word	0x080076d1
 80076a4:	080076ad 	.word	0x080076ad
 80076a8:	080076d1 	.word	0x080076d1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	3303      	adds	r3, #3
 80076b2:	089b      	lsrs	r3, r3, #2
 80076b4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80076b6:	8afa      	ldrh	r2, [r7, #22]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	b29b      	uxth	r3, r3
 80076be:	429a      	cmp	r2, r3
 80076c0:	d91c      	bls.n	80076fc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	f043 0220 	orr.w	r2, r3, #32
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	619a      	str	r2, [r3, #24]
        }
        break;
 80076ce:	e015      	b.n	80076fc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	695b      	ldr	r3, [r3, #20]
 80076d4:	3303      	adds	r3, #3
 80076d6:	089b      	lsrs	r3, r3, #2
 80076d8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80076da:	8afa      	ldrh	r2, [r7, #22]
 80076dc:	6a3b      	ldr	r3, [r7, #32]
 80076de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d90a      	bls.n	8007700 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	619a      	str	r2, [r3, #24]
        }
        break;
 80076f6:	e003      	b.n	8007700 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80076f8:	bf00      	nop
 80076fa:	e002      	b.n	8007702 <USB_HC_StartXfer+0x25e>
        break;
 80076fc:	bf00      	nop
 80076fe:	e000      	b.n	8007702 <USB_HC_StartXfer+0x25e>
        break;
 8007700:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	68d9      	ldr	r1, [r3, #12]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	785a      	ldrb	r2, [r3, #1]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	b29b      	uxth	r3, r3
 8007710:	2000      	movs	r0, #0
 8007712:	9000      	str	r0, [sp, #0]
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f7ff fb81 	bl	8006e1c <USB_WritePacket>
  }

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3728      	adds	r7, #40	; 0x28
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	1ff80000 	.word	0x1ff80000

08007728 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	b29b      	uxth	r3, r3
}
 800773e:	4618      	mov	r0, r3
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800774a:	b480      	push	{r7}
 800774c:	b089      	sub	sp, #36	; 0x24
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	460b      	mov	r3, r1
 8007754:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800775a:	78fb      	ldrb	r3, [r7, #3]
 800775c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800775e:	2300      	movs	r3, #0
 8007760:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	4413      	add	r3, r2
 800776a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	0c9b      	lsrs	r3, r3, #18
 8007772:	f003 0303 	and.w	r3, r3, #3
 8007776:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	4413      	add	r3, r2
 8007780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	0fdb      	lsrs	r3, r3, #31
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b20      	cmp	r3, #32
 8007798:	d104      	bne.n	80077a4 <USB_HC_Halt+0x5a>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	e0e8      	b.n	8007976 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <USB_HC_Halt+0x66>
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d173      	bne.n	8007898 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	0151      	lsls	r1, r2, #5
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	440a      	add	r2, r1
 80077c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077ce:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f003 0320 	and.w	r3, r3, #32
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f040 80cb 	bne.w	8007974 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d143      	bne.n	8007872 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	0151      	lsls	r1, r2, #5
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	440a      	add	r2, r1
 8007800:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007804:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007808:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	4413      	add	r3, r2
 8007812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	0151      	lsls	r1, r2, #5
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	440a      	add	r2, r1
 8007820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007824:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007828:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	4413      	add	r3, r2
 8007832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	0151      	lsls	r1, r2, #5
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	440a      	add	r2, r1
 8007840:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007844:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007848:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	3301      	adds	r3, #1
 800784e:	61fb      	str	r3, [r7, #28]
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007856:	d81d      	bhi.n	8007894 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	4413      	add	r3, r2
 8007860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800786a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800786e:	d0ec      	beq.n	800784a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007870:	e080      	b.n	8007974 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	4413      	add	r3, r2
 800787a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	0151      	lsls	r1, r2, #5
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	440a      	add	r2, r1
 8007888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800788c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007890:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007892:	e06f      	b.n	8007974 <USB_HC_Halt+0x22a>
            break;
 8007894:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007896:	e06d      	b.n	8007974 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	0151      	lsls	r1, r2, #5
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	440a      	add	r2, r1
 80078ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078b6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d143      	bne.n	8007950 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	0151      	lsls	r1, r2, #5
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	440a      	add	r2, r1
 80078de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	0151      	lsls	r1, r2, #5
 80078fa:	69ba      	ldr	r2, [r7, #24]
 80078fc:	440a      	add	r2, r1
 80078fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007906:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	4413      	add	r3, r2
 8007910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	0151      	lsls	r1, r2, #5
 800791a:	69ba      	ldr	r2, [r7, #24]
 800791c:	440a      	add	r2, r1
 800791e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007922:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007926:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	3301      	adds	r3, #1
 800792c:	61fb      	str	r3, [r7, #28]
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007934:	d81d      	bhi.n	8007972 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	4413      	add	r3, r2
 800793e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800794c:	d0ec      	beq.n	8007928 <USB_HC_Halt+0x1de>
 800794e:	e011      	b.n	8007974 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	4413      	add	r3, r2
 8007958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	0151      	lsls	r1, r2, #5
 8007962:	69ba      	ldr	r2, [r7, #24]
 8007964:	440a      	add	r2, r1
 8007966:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800796a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	e000      	b.n	8007974 <USB_HC_Halt+0x22a>
          break;
 8007972:	bf00      	nop
    }
  }

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3724      	adds	r7, #36	; 0x24
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
	...

08007984 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007984:	b480      	push	{r7}
 8007986:	b087      	sub	sp, #28
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	460b      	mov	r3, r1
 800798e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007998:	2301      	movs	r3, #1
 800799a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	04da      	lsls	r2, r3, #19
 80079a0:	4b15      	ldr	r3, [pc, #84]	; (80079f8 <USB_DoPing+0x74>)
 80079a2:	4013      	ands	r3, r2
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	0151      	lsls	r1, r2, #5
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	440a      	add	r2, r1
 80079ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079b4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079cc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079d4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079e2:	461a      	mov	r2, r3
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	371c      	adds	r7, #28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	1ff80000 	.word	0x1ff80000

080079fc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7ff f981 	bl	8006d14 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007a12:	2110      	movs	r1, #16
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff f9b9 	bl	8006d8c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7ff f9dc 	bl	8006dd8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007a20:	2300      	movs	r3, #0
 8007a22:	613b      	str	r3, [r7, #16]
 8007a24:	e01f      	b.n	8007a66 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a3c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a44:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a4c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	3301      	adds	r3, #1
 8007a64:	613b      	str	r3, [r7, #16]
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	2b0f      	cmp	r3, #15
 8007a6a:	d9dc      	bls.n	8007a26 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	613b      	str	r3, [r7, #16]
 8007a70:	e034      	b.n	8007adc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a88:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a90:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a98:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	617b      	str	r3, [r7, #20]
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ab8:	d80c      	bhi.n	8007ad4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ad0:	d0ec      	beq.n	8007aac <USB_StopHost+0xb0>
 8007ad2:	e000      	b.n	8007ad6 <USB_StopHost+0xda>
        break;
 8007ad4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	613b      	str	r3, [r7, #16]
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	2b0f      	cmp	r3, #15
 8007ae0:	d9c7      	bls.n	8007a72 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ae8:	461a      	mov	r2, r3
 8007aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007aee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007af6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff f8fa 	bl	8006cf2 <USB_EnableGlobalInt>

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3718      	adds	r7, #24
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007b08:	b590      	push	{r4, r7, lr}
 8007b0a:	b089      	sub	sp, #36	; 0x24
 8007b0c:	af04      	add	r7, sp, #16
 8007b0e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007b10:	2301      	movs	r3, #1
 8007b12:	2202      	movs	r2, #2
 8007b14:	2102      	movs	r1, #2
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fc66 	bl	80083e8 <USBH_FindInterface>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	2bff      	cmp	r3, #255	; 0xff
 8007b24:	d002      	beq.n	8007b2c <USBH_CDC_InterfaceInit+0x24>
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d901      	bls.n	8007b30 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	e13d      	b.n	8007dac <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fc3b 	bl	80083b0 <USBH_SelectInterface>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007b44:	2302      	movs	r3, #2
 8007b46:	e131      	b.n	8007dac <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007b4e:	2050      	movs	r0, #80	; 0x50
 8007b50:	f002 fa00 	bl	8009f54 <malloc>
 8007b54:	4603      	mov	r3, r0
 8007b56:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007b68:	2302      	movs	r3, #2
 8007b6a:	e11f      	b.n	8007dac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007b6c:	2250      	movs	r2, #80	; 0x50
 8007b6e:	2100      	movs	r1, #0
 8007b70:	68b8      	ldr	r0, [r7, #8]
 8007b72:	f002 f9ff 	bl	8009f74 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	211a      	movs	r1, #26
 8007b7c:	fb01 f303 	mul.w	r3, r1, r3
 8007b80:	4413      	add	r3, r2
 8007b82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	b25b      	sxtb	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	da15      	bge.n	8007bba <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	211a      	movs	r1, #26
 8007b94:	fb01 f303 	mul.w	r3, r1, r3
 8007b98:	4413      	add	r3, r2
 8007b9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007b9e:	781a      	ldrb	r2, [r3, #0]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	211a      	movs	r1, #26
 8007baa:	fb01 f303 	mul.w	r3, r1, r3
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007bb4:	881a      	ldrh	r2, [r3, #0]
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	785b      	ldrb	r3, [r3, #1]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f001 fe32 	bl	800982a <USBH_AllocPipe>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	461a      	mov	r2, r3
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	7819      	ldrb	r1, [r3, #0]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	7858      	ldrb	r0, [r3, #1]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	8952      	ldrh	r2, [r2, #10]
 8007be6:	9202      	str	r2, [sp, #8]
 8007be8:	2203      	movs	r2, #3
 8007bea:	9201      	str	r2, [sp, #4]
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	4623      	mov	r3, r4
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 fdea 	bl	80097cc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f002 f8f9 	bl	8009df8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007c06:	2300      	movs	r3, #0
 8007c08:	2200      	movs	r2, #0
 8007c0a:	210a      	movs	r1, #10
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fbeb 	bl	80083e8 <USBH_FindInterface>
 8007c12:	4603      	mov	r3, r0
 8007c14:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
 8007c18:	2bff      	cmp	r3, #255	; 0xff
 8007c1a:	d002      	beq.n	8007c22 <USBH_CDC_InterfaceInit+0x11a>
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d901      	bls.n	8007c26 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007c22:	2302      	movs	r3, #2
 8007c24:	e0c2      	b.n	8007dac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	211a      	movs	r1, #26
 8007c2c:	fb01 f303 	mul.w	r3, r1, r3
 8007c30:	4413      	add	r3, r2
 8007c32:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	b25b      	sxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	da16      	bge.n	8007c6c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	211a      	movs	r1, #26
 8007c44:	fb01 f303 	mul.w	r3, r1, r3
 8007c48:	4413      	add	r3, r2
 8007c4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c4e:	781a      	ldrb	r2, [r3, #0]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	211a      	movs	r1, #26
 8007c5a:	fb01 f303 	mul.w	r3, r1, r3
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007c64:	881a      	ldrh	r2, [r3, #0]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	835a      	strh	r2, [r3, #26]
 8007c6a:	e015      	b.n	8007c98 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	211a      	movs	r1, #26
 8007c72:	fb01 f303 	mul.w	r3, r1, r3
 8007c76:	4413      	add	r3, r2
 8007c78:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c7c:	781a      	ldrb	r2, [r3, #0]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	211a      	movs	r1, #26
 8007c88:	fb01 f303 	mul.w	r3, r1, r3
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007c92:	881a      	ldrh	r2, [r3, #0]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	211a      	movs	r1, #26
 8007c9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	b25b      	sxtb	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	da16      	bge.n	8007cde <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	211a      	movs	r1, #26
 8007cb6:	fb01 f303 	mul.w	r3, r1, r3
 8007cba:	4413      	add	r3, r2
 8007cbc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007cc0:	781a      	ldrb	r2, [r3, #0]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	211a      	movs	r1, #26
 8007ccc:	fb01 f303 	mul.w	r3, r1, r3
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007cd6:	881a      	ldrh	r2, [r3, #0]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	835a      	strh	r2, [r3, #26]
 8007cdc:	e015      	b.n	8007d0a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	211a      	movs	r1, #26
 8007ce4:	fb01 f303 	mul.w	r3, r1, r3
 8007ce8:	4413      	add	r3, r2
 8007cea:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007cee:	781a      	ldrb	r2, [r3, #0]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	211a      	movs	r1, #26
 8007cfa:	fb01 f303 	mul.w	r3, r1, r3
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007d04:	881a      	ldrh	r2, [r3, #0]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	7b9b      	ldrb	r3, [r3, #14]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 fd8a 	bl	800982a <USBH_AllocPipe>
 8007d16:	4603      	mov	r3, r0
 8007d18:	461a      	mov	r2, r3
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	7bdb      	ldrb	r3, [r3, #15]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f001 fd80 	bl	800982a <USBH_AllocPipe>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	7b59      	ldrb	r1, [r3, #13]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	7b98      	ldrb	r0, [r3, #14]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	8b12      	ldrh	r2, [r2, #24]
 8007d4a:	9202      	str	r2, [sp, #8]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	9201      	str	r2, [sp, #4]
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	4623      	mov	r3, r4
 8007d54:	4602      	mov	r2, r0
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f001 fd38 	bl	80097cc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	7b19      	ldrb	r1, [r3, #12]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	7bd8      	ldrb	r0, [r3, #15]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	8b52      	ldrh	r2, [r2, #26]
 8007d74:	9202      	str	r2, [sp, #8]
 8007d76:	2202      	movs	r2, #2
 8007d78:	9201      	str	r2, [sp, #4]
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	4623      	mov	r3, r4
 8007d7e:	4602      	mov	r2, r0
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f001 fd23 	bl	80097cc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	7b5b      	ldrb	r3, [r3, #13]
 8007d92:	2200      	movs	r2, #0
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f002 f82e 	bl	8009df8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	7b1b      	ldrb	r3, [r3, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f002 f827 	bl	8009df8 <USBH_LL_SetToggle>

  return USBH_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd90      	pop	{r4, r7, pc}

08007db4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dc2:	69db      	ldr	r3, [r3, #28]
 8007dc4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00e      	beq.n	8007dec <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 fd18 	bl	800980a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	4619      	mov	r1, r3
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f001 fd43 	bl	800986c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	7b1b      	ldrb	r3, [r3, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00e      	beq.n	8007e12 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	7b1b      	ldrb	r3, [r3, #12]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 fd05 	bl	800980a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	7b1b      	ldrb	r3, [r3, #12]
 8007e04:	4619      	mov	r1, r3
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fd30 	bl	800986c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	7b5b      	ldrb	r3, [r3, #13]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00e      	beq.n	8007e38 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	7b5b      	ldrb	r3, [r3, #13]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f001 fcf2 	bl	800980a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	7b5b      	ldrb	r3, [r3, #13]
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f001 fd1d 	bl	800986c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00b      	beq.n	8007e5c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f002 f889 	bl	8009f64 <free>
    phost->pActiveClass->pData = 0U;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e58:	2200      	movs	r2, #0
 8007e5a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b084      	sub	sp, #16
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	3340      	adds	r3, #64	; 0x40
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f8b1 	bl	8007fe6 <GetLineCoding>
 8007e84:	4603      	mov	r3, r0
 8007e86:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007e88:	7afb      	ldrb	r3, [r7, #11]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d105      	bne.n	8007e9a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e94:	2102      	movs	r1, #2
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007e9a:	7afb      	ldrb	r3, [r7, #11]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007eac:	2301      	movs	r3, #1
 8007eae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	d877      	bhi.n	8007fb8 <USBH_CDC_Process+0x114>
 8007ec8:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <USBH_CDC_Process+0x2c>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	08007ee5 	.word	0x08007ee5
 8007ed4:	08007eeb 	.word	0x08007eeb
 8007ed8:	08007f1b 	.word	0x08007f1b
 8007edc:	08007f8f 	.word	0x08007f8f
 8007ee0:	08007f9d 	.word	0x08007f9d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ee8:	e06d      	b.n	8007fc6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f897 	bl	8008024 <SetLineCoding>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d104      	bne.n	8007f0a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007f08:	e058      	b.n	8007fbc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d055      	beq.n	8007fbc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2204      	movs	r2, #4
 8007f14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007f18:	e050      	b.n	8007fbc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	3340      	adds	r3, #64	; 0x40
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f860 	bl	8007fe6 <GetLineCoding>
 8007f26:	4603      	mov	r3, r0
 8007f28:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d126      	bne.n	8007f7e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f42:	791b      	ldrb	r3, [r3, #4]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d13b      	bne.n	8007fc0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f52:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d133      	bne.n	8007fc0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f62:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d12b      	bne.n	8007fc0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f70:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d124      	bne.n	8007fc0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f958 	bl	800822c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007f7c:	e020      	b.n	8007fc0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007f7e:	7bbb      	ldrb	r3, [r7, #14]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d01d      	beq.n	8007fc0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2204      	movs	r2, #4
 8007f88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007f8c:	e018      	b.n	8007fc0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f867 	bl	8008062 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f8da 	bl	800814e <CDC_ProcessReception>
      break;
 8007f9a:	e014      	b.n	8007fc6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 ffe3 	bl	8008f6a <USBH_ClrFeature>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10a      	bne.n	8007fc4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007fb6:	e005      	b.n	8007fc4 <USBH_CDC_Process+0x120>

    default:
      break;
 8007fb8:	bf00      	nop
 8007fba:	e004      	b.n	8007fc6 <USBH_CDC_Process+0x122>
      break;
 8007fbc:	bf00      	nop
 8007fbe:	e002      	b.n	8007fc6 <USBH_CDC_Process+0x122>
      break;
 8007fc0:	bf00      	nop
 8007fc2:	e000      	b.n	8007fc6 <USBH_CDC_Process+0x122>
      break;
 8007fc4:	bf00      	nop

  }

  return status;
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	22a1      	movs	r2, #161	; 0xa1
 8007ff4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2221      	movs	r2, #33	; 0x21
 8007ffa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2207      	movs	r2, #7
 800800c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2207      	movs	r2, #7
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 f988 	bl	800932a <USBH_CtlReq>
 800801a:	4603      	mov	r3, r0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2221      	movs	r2, #33	; 0x21
 8008032:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2220      	movs	r2, #32
 8008038:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2207      	movs	r2, #7
 800804a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	2207      	movs	r2, #7
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 f969 	bl	800932a <USBH_CtlReq>
 8008058:	4603      	mov	r3, r0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b086      	sub	sp, #24
 8008066:	af02      	add	r7, sp, #8
 8008068:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008074:	2300      	movs	r3, #0
 8008076:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800807e:	2b01      	cmp	r3, #1
 8008080:	d002      	beq.n	8008088 <CDC_ProcessTransmission+0x26>
 8008082:	2b02      	cmp	r3, #2
 8008084:	d023      	beq.n	80080ce <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008086:	e05e      	b.n	8008146 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	8b12      	ldrh	r2, [r2, #24]
 8008090:	4293      	cmp	r3, r2
 8008092:	d90b      	bls.n	80080ac <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	69d9      	ldr	r1, [r3, #28]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	8b1a      	ldrh	r2, [r3, #24]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	7b5b      	ldrb	r3, [r3, #13]
 80080a0:	2001      	movs	r0, #1
 80080a2:	9000      	str	r0, [sp, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 fb4e 	bl	8009746 <USBH_BulkSendData>
 80080aa:	e00b      	b.n	80080c4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	7b5b      	ldrb	r3, [r3, #13]
 80080ba:	2001      	movs	r0, #1
 80080bc:	9000      	str	r0, [sp, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f001 fb41 	bl	8009746 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2202      	movs	r2, #2
 80080c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80080cc:	e03b      	b.n	8008146 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	7b5b      	ldrb	r3, [r3, #13]
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f001 fe65 	bl	8009da4 <USBH_LL_GetURBState>
 80080da:	4603      	mov	r3, r0
 80080dc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80080de:	7afb      	ldrb	r3, [r7, #11]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d128      	bne.n	8008136 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	8b12      	ldrh	r2, [r2, #24]
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d90e      	bls.n	800810e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	8b12      	ldrh	r2, [r2, #24]
 80080f8:	1a9a      	subs	r2, r3, r2
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	8b12      	ldrh	r2, [r2, #24]
 8008106:	441a      	add	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	61da      	str	r2, [r3, #28]
 800810c:	e002      	b.n	8008114 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	2b00      	cmp	r3, #0
 800811a:	d004      	beq.n	8008126 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008124:	e00e      	b.n	8008144 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f868 	bl	8008204 <USBH_CDC_TransmitCallback>
      break;
 8008134:	e006      	b.n	8008144 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008136:	7afb      	ldrb	r3, [r7, #11]
 8008138:	2b02      	cmp	r3, #2
 800813a:	d103      	bne.n	8008144 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008144:	bf00      	nop
  }
}
 8008146:	bf00      	nop
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b086      	sub	sp, #24
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008160:	2300      	movs	r3, #0
 8008162:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800816a:	2b03      	cmp	r3, #3
 800816c:	d002      	beq.n	8008174 <CDC_ProcessReception+0x26>
 800816e:	2b04      	cmp	r3, #4
 8008170:	d00e      	beq.n	8008190 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008172:	e043      	b.n	80081fc <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	6a19      	ldr	r1, [r3, #32]
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	8b5a      	ldrh	r2, [r3, #26]
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	7b1b      	ldrb	r3, [r3, #12]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f001 fb05 	bl	8009790 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2204      	movs	r2, #4
 800818a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800818e:	e035      	b.n	80081fc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	7b1b      	ldrb	r3, [r3, #12]
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 fe04 	bl	8009da4 <USBH_LL_GetURBState>
 800819c:	4603      	mov	r3, r0
 800819e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80081a0:	7cfb      	ldrb	r3, [r7, #19]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d129      	bne.n	80081fa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	7b1b      	ldrb	r3, [r3, #12]
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f001 fd67 	bl	8009c80 <USBH_LL_GetLastXferSize>
 80081b2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d016      	beq.n	80081ec <CDC_ProcessReception+0x9e>
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	8b5b      	ldrh	r3, [r3, #26]
 80081c2:	461a      	mov	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d910      	bls.n	80081ec <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	1ad2      	subs	r2, r2, r3
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	6a1a      	ldr	r2, [r3, #32]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	441a      	add	r2, r3
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2203      	movs	r2, #3
 80081e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80081ea:	e006      	b.n	80081fa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f80f 	bl	8008218 <USBH_CDC_ReceiveCallback>
      break;
 80081fa:	bf00      	nop
  }
}
 80081fc:	bf00      	nop
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	4613      	mov	r3, r2
 800824c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d101      	bne.n	8008258 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008254:	2302      	movs	r3, #2
 8008256:	e029      	b.n	80082ac <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	79fa      	ldrb	r2, [r7, #7]
 800825c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 f81f 	bl	80082b4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f001 fc37 	bl	8009b18 <USBH_LL_Init>

  return USBH_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80082c0:	2300      	movs	r3, #0
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	e009      	b.n	80082da <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	33e0      	adds	r3, #224	; 0xe0
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	2200      	movs	r2, #0
 80082d2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3301      	adds	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2b0e      	cmp	r3, #14
 80082de:	d9f2      	bls.n	80082c6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80082e0:	2300      	movs	r3, #0
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	e009      	b.n	80082fa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80082f0:	2200      	movs	r2, #0
 80082f2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3301      	adds	r3, #1
 80082f8:	60fb      	str	r3, [r7, #12]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008300:	d3f1      	bcc.n	80082e6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2240      	movs	r2, #64	; 0x40
 8008326:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d016      	beq.n	800839e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10e      	bne.n	8008398 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008380:	1c59      	adds	r1, r3, #1
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	33de      	adds	r3, #222	; 0xde
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	73fb      	strb	r3, [r7, #15]
 8008396:	e004      	b.n	80083a2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008398:	2302      	movs	r3, #2
 800839a:	73fb      	strb	r3, [r7, #15]
 800839c:	e001      	b.n	80083a2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800839e:	2302      	movs	r3, #2
 80083a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3714      	adds	r7, #20
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80083c6:	78fa      	ldrb	r2, [r7, #3]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d204      	bcs.n	80083d6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	78fa      	ldrb	r2, [r7, #3]
 80083d0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80083d4:	e001      	b.n	80083da <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80083d6:	2302      	movs	r3, #2
 80083d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80083da:	7bfb      	ldrb	r3, [r7, #15]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b087      	sub	sp, #28
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	4608      	mov	r0, r1
 80083f2:	4611      	mov	r1, r2
 80083f4:	461a      	mov	r2, r3
 80083f6:	4603      	mov	r3, r0
 80083f8:	70fb      	strb	r3, [r7, #3]
 80083fa:	460b      	mov	r3, r1
 80083fc:	70bb      	strb	r3, [r7, #2]
 80083fe:	4613      	mov	r3, r2
 8008400:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008402:	2300      	movs	r3, #0
 8008404:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008406:	2300      	movs	r3, #0
 8008408:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008410:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008412:	e025      	b.n	8008460 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008414:	7dfb      	ldrb	r3, [r7, #23]
 8008416:	221a      	movs	r2, #26
 8008418:	fb02 f303 	mul.w	r3, r2, r3
 800841c:	3308      	adds	r3, #8
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	4413      	add	r3, r2
 8008422:	3302      	adds	r3, #2
 8008424:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	795b      	ldrb	r3, [r3, #5]
 800842a:	78fa      	ldrb	r2, [r7, #3]
 800842c:	429a      	cmp	r2, r3
 800842e:	d002      	beq.n	8008436 <USBH_FindInterface+0x4e>
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	2bff      	cmp	r3, #255	; 0xff
 8008434:	d111      	bne.n	800845a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800843a:	78ba      	ldrb	r2, [r7, #2]
 800843c:	429a      	cmp	r2, r3
 800843e:	d002      	beq.n	8008446 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008440:	78bb      	ldrb	r3, [r7, #2]
 8008442:	2bff      	cmp	r3, #255	; 0xff
 8008444:	d109      	bne.n	800845a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800844a:	787a      	ldrb	r2, [r7, #1]
 800844c:	429a      	cmp	r2, r3
 800844e:	d002      	beq.n	8008456 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008450:	787b      	ldrb	r3, [r7, #1]
 8008452:	2bff      	cmp	r3, #255	; 0xff
 8008454:	d101      	bne.n	800845a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008456:	7dfb      	ldrb	r3, [r7, #23]
 8008458:	e006      	b.n	8008468 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800845a:	7dfb      	ldrb	r3, [r7, #23]
 800845c:	3301      	adds	r3, #1
 800845e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008460:	7dfb      	ldrb	r3, [r7, #23]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d9d6      	bls.n	8008414 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008466:	23ff      	movs	r3, #255	; 0xff
}
 8008468:	4618      	mov	r0, r3
 800846a:	371c      	adds	r7, #28
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f001 fb87 	bl	8009b90 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008482:	2101      	movs	r1, #1
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f001 fca0 	bl	8009dca <USBH_LL_DriverVBUS>

  return USBH_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b088      	sub	sp, #32
 8008498:	af04      	add	r7, sp, #16
 800849a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800849c:	2302      	movs	r3, #2
 800849e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d102      	bne.n	80084b6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2203      	movs	r2, #3
 80084b4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b0b      	cmp	r3, #11
 80084be:	f200 81b3 	bhi.w	8008828 <USBH_Process+0x394>
 80084c2:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <USBH_Process+0x34>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	080084f9 	.word	0x080084f9
 80084cc:	0800852b 	.word	0x0800852b
 80084d0:	08008593 	.word	0x08008593
 80084d4:	080087c3 	.word	0x080087c3
 80084d8:	08008829 	.word	0x08008829
 80084dc:	08008637 	.word	0x08008637
 80084e0:	08008769 	.word	0x08008769
 80084e4:	0800866d 	.word	0x0800866d
 80084e8:	0800868d 	.word	0x0800868d
 80084ec:	080086ad 	.word	0x080086ad
 80084f0:	080086db 	.word	0x080086db
 80084f4:	080087ab 	.word	0x080087ab
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	f000 8193 	beq.w	800882c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800850c:	20c8      	movs	r0, #200	; 0xc8
 800850e:	f001 fca3 	bl	8009e58 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f001 fb99 	bl	8009c4a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008528:	e180      	b.n	800882c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008530:	2b01      	cmp	r3, #1
 8008532:	d107      	bne.n	8008544 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2202      	movs	r2, #2
 8008540:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008542:	e182      	b.n	800884a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800854a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800854e:	d914      	bls.n	800857a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008556:	3301      	adds	r3, #1
 8008558:	b2da      	uxtb	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008566:	2b03      	cmp	r3, #3
 8008568:	d903      	bls.n	8008572 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	220d      	movs	r2, #13
 800856e:	701a      	strb	r2, [r3, #0]
      break;
 8008570:	e16b      	b.n	800884a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	701a      	strb	r2, [r3, #0]
      break;
 8008578:	e167      	b.n	800884a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008580:	f103 020a 	add.w	r2, r3, #10
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800858a:	200a      	movs	r0, #10
 800858c:	f001 fc64 	bl	8009e58 <USBH_Delay>
      break;
 8008590:	e15b      	b.n	800884a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008598:	2b00      	cmp	r3, #0
 800859a:	d005      	beq.n	80085a8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085a2:	2104      	movs	r1, #4
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80085a8:	2064      	movs	r0, #100	; 0x64
 80085aa:	f001 fc55 	bl	8009e58 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f001 fb24 	bl	8009bfc <USBH_LL_GetSpeed>
 80085b4:	4603      	mov	r3, r0
 80085b6:	461a      	mov	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2205      	movs	r2, #5
 80085c2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80085c4:	2100      	movs	r1, #0
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f001 f92f 	bl	800982a <USBH_AllocPipe>
 80085cc:	4603      	mov	r3, r0
 80085ce:	461a      	mov	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80085d4:	2180      	movs	r1, #128	; 0x80
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f001 f927 	bl	800982a <USBH_AllocPipe>
 80085dc:	4603      	mov	r3, r0
 80085de:	461a      	mov	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	7919      	ldrb	r1, [r3, #4]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80085f8:	b292      	uxth	r2, r2
 80085fa:	9202      	str	r2, [sp, #8]
 80085fc:	2200      	movs	r2, #0
 80085fe:	9201      	str	r2, [sp, #4]
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	4603      	mov	r3, r0
 8008604:	2280      	movs	r2, #128	; 0x80
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f001 f8e0 	bl	80097cc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	7959      	ldrb	r1, [r3, #5]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008620:	b292      	uxth	r2, r2
 8008622:	9202      	str	r2, [sp, #8]
 8008624:	2200      	movs	r2, #0
 8008626:	9201      	str	r2, [sp, #4]
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	4603      	mov	r3, r0
 800862c:	2200      	movs	r2, #0
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f001 f8cc 	bl	80097cc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008634:	e109      	b.n	800884a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f90c 	bl	8008854 <USBH_HandleEnum>
 800863c:	4603      	mov	r3, r0
 800863e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b00      	cmp	r3, #0
 8008646:	f040 80f3 	bne.w	8008830 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008658:	2b01      	cmp	r3, #1
 800865a:	d103      	bne.n	8008664 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2208      	movs	r2, #8
 8008660:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008662:	e0e5      	b.n	8008830 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2207      	movs	r2, #7
 8008668:	701a      	strb	r2, [r3, #0]
      break;
 800866a:	e0e1      	b.n	8008830 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 80de 	beq.w	8008834 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800867e:	2101      	movs	r1, #1
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2208      	movs	r2, #8
 8008688:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800868a:	e0d3      	b.n	8008834 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008692:	b29b      	uxth	r3, r3
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fc20 	bl	8008edc <USBH_SetCfg>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f040 80ca 	bne.w	8008838 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2209      	movs	r2, #9
 80086a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80086aa:	e0c5      	b.n	8008838 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80086b2:	f003 0320 	and.w	r3, r3, #32
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00b      	beq.n	80086d2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80086ba:	2101      	movs	r1, #1
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fc30 	bl	8008f22 <USBH_SetFeature>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f040 80b9 	bne.w	800883c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	220a      	movs	r2, #10
 80086ce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80086d0:	e0b4      	b.n	800883c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	220a      	movs	r2, #10
 80086d6:	701a      	strb	r2, [r3, #0]
      break;
 80086d8:	e0b0      	b.n	800883c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	f000 80ad 	beq.w	8008840 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]
 80086f2:	e016      	b.n	8008722 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80086f4:	7bfa      	ldrb	r2, [r7, #15]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	32de      	adds	r2, #222	; 0xde
 80086fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086fe:	791a      	ldrb	r2, [r3, #4]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008706:	429a      	cmp	r2, r3
 8008708:	d108      	bne.n	800871c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800870a:	7bfa      	ldrb	r2, [r7, #15]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	32de      	adds	r2, #222	; 0xde
 8008710:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800871a:	e005      	b.n	8008728 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800871c:	7bfb      	ldrb	r3, [r7, #15]
 800871e:	3301      	adds	r3, #1
 8008720:	73fb      	strb	r3, [r7, #15]
 8008722:	7bfb      	ldrb	r3, [r7, #15]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d0e5      	beq.n	80086f4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800872e:	2b00      	cmp	r3, #0
 8008730:	d016      	beq.n	8008760 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	4798      	blx	r3
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d109      	bne.n	8008758 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2206      	movs	r2, #6
 8008748:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008750:	2103      	movs	r1, #3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008756:	e073      	b.n	8008840 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	220d      	movs	r2, #13
 800875c:	701a      	strb	r2, [r3, #0]
      break;
 800875e:	e06f      	b.n	8008840 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	220d      	movs	r2, #13
 8008764:	701a      	strb	r2, [r3, #0]
      break;
 8008766:	e06b      	b.n	8008840 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800876e:	2b00      	cmp	r3, #0
 8008770:	d017      	beq.n	80087a2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	4798      	blx	r3
 800877e:	4603      	mov	r3, r0
 8008780:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008782:	7bbb      	ldrb	r3, [r7, #14]
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d103      	bne.n	8008792 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	220b      	movs	r2, #11
 800878e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008790:	e058      	b.n	8008844 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b02      	cmp	r3, #2
 8008798:	d154      	bne.n	8008844 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	220d      	movs	r2, #13
 800879e:	701a      	strb	r2, [r3, #0]
      break;
 80087a0:	e050      	b.n	8008844 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	220d      	movs	r2, #13
 80087a6:	701a      	strb	r2, [r3, #0]
      break;
 80087a8:	e04c      	b.n	8008844 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d049      	beq.n	8008848 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087ba:	695b      	ldr	r3, [r3, #20]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	4798      	blx	r3
      }
      break;
 80087c0:	e042      	b.n	8008848 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff fd72 	bl	80082b4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d009      	beq.n	80087ee <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d005      	beq.n	8008804 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087fe:	2105      	movs	r1, #5
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b01      	cmp	r3, #1
 800880e:	d107      	bne.n	8008820 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7ff fe2b 	bl	8008474 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800881e:	e014      	b.n	800884a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f001 f9b5 	bl	8009b90 <USBH_LL_Start>
      break;
 8008826:	e010      	b.n	800884a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008828:	bf00      	nop
 800882a:	e00e      	b.n	800884a <USBH_Process+0x3b6>
      break;
 800882c:	bf00      	nop
 800882e:	e00c      	b.n	800884a <USBH_Process+0x3b6>
      break;
 8008830:	bf00      	nop
 8008832:	e00a      	b.n	800884a <USBH_Process+0x3b6>
    break;
 8008834:	bf00      	nop
 8008836:	e008      	b.n	800884a <USBH_Process+0x3b6>
      break;
 8008838:	bf00      	nop
 800883a:	e006      	b.n	800884a <USBH_Process+0x3b6>
      break;
 800883c:	bf00      	nop
 800883e:	e004      	b.n	800884a <USBH_Process+0x3b6>
      break;
 8008840:	bf00      	nop
 8008842:	e002      	b.n	800884a <USBH_Process+0x3b6>
      break;
 8008844:	bf00      	nop
 8008846:	e000      	b.n	800884a <USBH_Process+0x3b6>
      break;
 8008848:	bf00      	nop
  }
  return USBH_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b088      	sub	sp, #32
 8008858:	af04      	add	r7, sp, #16
 800885a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800885c:	2301      	movs	r3, #1
 800885e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008860:	2301      	movs	r3, #1
 8008862:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	785b      	ldrb	r3, [r3, #1]
 8008868:	2b07      	cmp	r3, #7
 800886a:	f200 81c1 	bhi.w	8008bf0 <USBH_HandleEnum+0x39c>
 800886e:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <USBH_HandleEnum+0x20>)
 8008870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008874:	08008895 	.word	0x08008895
 8008878:	08008953 	.word	0x08008953
 800887c:	080089bd 	.word	0x080089bd
 8008880:	08008a4b 	.word	0x08008a4b
 8008884:	08008ab5 	.word	0x08008ab5
 8008888:	08008b25 	.word	0x08008b25
 800888c:	08008b6b 	.word	0x08008b6b
 8008890:	08008bb1 	.word	0x08008bb1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008894:	2108      	movs	r1, #8
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fa50 	bl	8008d3c <USBH_Get_DevDesc>
 800889c:	4603      	mov	r3, r0
 800889e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80088a0:	7bbb      	ldrb	r3, [r7, #14]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d130      	bne.n	8008908 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	7919      	ldrb	r1, [r3, #4]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80088ca:	b292      	uxth	r2, r2
 80088cc:	9202      	str	r2, [sp, #8]
 80088ce:	2200      	movs	r2, #0
 80088d0:	9201      	str	r2, [sp, #4]
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	4603      	mov	r3, r0
 80088d6:	2280      	movs	r2, #128	; 0x80
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 ff77 	bl	80097cc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	7959      	ldrb	r1, [r3, #5]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80088f2:	b292      	uxth	r2, r2
 80088f4:	9202      	str	r2, [sp, #8]
 80088f6:	2200      	movs	r2, #0
 80088f8:	9201      	str	r2, [sp, #4]
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	4603      	mov	r3, r0
 80088fe:	2200      	movs	r2, #0
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 ff63 	bl	80097cc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008906:	e175      	b.n	8008bf4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008908:	7bbb      	ldrb	r3, [r7, #14]
 800890a:	2b03      	cmp	r3, #3
 800890c:	f040 8172 	bne.w	8008bf4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008916:	3301      	adds	r3, #1
 8008918:	b2da      	uxtb	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008926:	2b03      	cmp	r3, #3
 8008928:	d903      	bls.n	8008932 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	220d      	movs	r2, #13
 800892e:	701a      	strb	r2, [r3, #0]
      break;
 8008930:	e160      	b.n	8008bf4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	795b      	ldrb	r3, [r3, #5]
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 ff97 	bl	800986c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	791b      	ldrb	r3, [r3, #4]
 8008942:	4619      	mov	r1, r3
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 ff91 	bl	800986c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	701a      	strb	r2, [r3, #0]
      break;
 8008950:	e150      	b.n	8008bf4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008952:	2112      	movs	r1, #18
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f9f1 	bl	8008d3c <USBH_Get_DevDesc>
 800895a:	4603      	mov	r3, r0
 800895c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800895e:	7bbb      	ldrb	r3, [r7, #14]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d103      	bne.n	800896c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2202      	movs	r2, #2
 8008968:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800896a:	e145      	b.n	8008bf8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800896c:	7bbb      	ldrb	r3, [r7, #14]
 800896e:	2b03      	cmp	r3, #3
 8008970:	f040 8142 	bne.w	8008bf8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800897a:	3301      	adds	r3, #1
 800897c:	b2da      	uxtb	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800898a:	2b03      	cmp	r3, #3
 800898c:	d903      	bls.n	8008996 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	220d      	movs	r2, #13
 8008992:	701a      	strb	r2, [r3, #0]
      break;
 8008994:	e130      	b.n	8008bf8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	795b      	ldrb	r3, [r3, #5]
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 ff65 	bl	800986c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	791b      	ldrb	r3, [r3, #4]
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 ff5f 	bl	800986c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	701a      	strb	r2, [r3, #0]
      break;
 80089ba:	e11d      	b.n	8008bf8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80089bc:	2101      	movs	r1, #1
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fa68 	bl	8008e94 <USBH_SetAddress>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d132      	bne.n	8008a34 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80089ce:	2002      	movs	r0, #2
 80089d0:	f001 fa42 	bl	8009e58 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2203      	movs	r2, #3
 80089e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	7919      	ldrb	r1, [r3, #4]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80089f6:	b292      	uxth	r2, r2
 80089f8:	9202      	str	r2, [sp, #8]
 80089fa:	2200      	movs	r2, #0
 80089fc:	9201      	str	r2, [sp, #4]
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	4603      	mov	r3, r0
 8008a02:	2280      	movs	r2, #128	; 0x80
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fee1 	bl	80097cc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	7959      	ldrb	r1, [r3, #5]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a1e:	b292      	uxth	r2, r2
 8008a20:	9202      	str	r2, [sp, #8]
 8008a22:	2200      	movs	r2, #0
 8008a24:	9201      	str	r2, [sp, #4]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fecd 	bl	80097cc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008a32:	e0e3      	b.n	8008bfc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	f040 80e0 	bne.w	8008bfc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	220d      	movs	r2, #13
 8008a40:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	705a      	strb	r2, [r3, #1]
      break;
 8008a48:	e0d8      	b.n	8008bfc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008a4a:	2109      	movs	r1, #9
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f99d 	bl	8008d8c <USBH_Get_CfgDesc>
 8008a52:	4603      	mov	r3, r0
 8008a54:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d103      	bne.n	8008a64 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2204      	movs	r2, #4
 8008a60:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008a62:	e0cd      	b.n	8008c00 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	f040 80ca 	bne.w	8008c00 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a72:	3301      	adds	r3, #1
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d903      	bls.n	8008a8e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	220d      	movs	r2, #13
 8008a8a:	701a      	strb	r2, [r3, #0]
      break;
 8008a8c:	e0b8      	b.n	8008c00 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	795b      	ldrb	r3, [r3, #5]
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fee9 	bl	800986c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	791b      	ldrb	r3, [r3, #4]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fee3 	bl	800986c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	701a      	strb	r2, [r3, #0]
      break;
 8008ab2:	e0a5      	b.n	8008c00 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f965 	bl	8008d8c <USBH_Get_CfgDesc>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d103      	bne.n	8008ad4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2205      	movs	r2, #5
 8008ad0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008ad2:	e097      	b.n	8008c04 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	f040 8094 	bne.w	8008c04 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d903      	bls.n	8008afe <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	220d      	movs	r2, #13
 8008afa:	701a      	strb	r2, [r3, #0]
      break;
 8008afc:	e082      	b.n	8008c04 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	795b      	ldrb	r3, [r3, #5]
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 feb1 	bl	800986c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	791b      	ldrb	r3, [r3, #4]
 8008b0e:	4619      	mov	r1, r3
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 feab 	bl	800986c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	701a      	strb	r2, [r3, #0]
      break;
 8008b22:	e06f      	b.n	8008c04 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d019      	beq.n	8008b62 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008b3a:	23ff      	movs	r3, #255	; 0xff
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f949 	bl	8008dd4 <USBH_Get_StringDesc>
 8008b42:	4603      	mov	r3, r0
 8008b44:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008b46:	7bbb      	ldrb	r3, [r7, #14]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d103      	bne.n	8008b54 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2206      	movs	r2, #6
 8008b50:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008b52:	e059      	b.n	8008c08 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b54:	7bbb      	ldrb	r3, [r7, #14]
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d156      	bne.n	8008c08 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2206      	movs	r2, #6
 8008b5e:	705a      	strb	r2, [r3, #1]
      break;
 8008b60:	e052      	b.n	8008c08 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2206      	movs	r2, #6
 8008b66:	705a      	strb	r2, [r3, #1]
      break;
 8008b68:	e04e      	b.n	8008c08 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d019      	beq.n	8008ba8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008b80:	23ff      	movs	r3, #255	; 0xff
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f926 	bl	8008dd4 <USBH_Get_StringDesc>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008b8c:	7bbb      	ldrb	r3, [r7, #14]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d103      	bne.n	8008b9a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2207      	movs	r2, #7
 8008b96:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008b98:	e038      	b.n	8008c0c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	2b03      	cmp	r3, #3
 8008b9e:	d135      	bne.n	8008c0c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2207      	movs	r2, #7
 8008ba4:	705a      	strb	r2, [r3, #1]
      break;
 8008ba6:	e031      	b.n	8008c0c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2207      	movs	r2, #7
 8008bac:	705a      	strb	r2, [r3, #1]
      break;
 8008bae:	e02d      	b.n	8008c0c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d017      	beq.n	8008bea <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008bc6:	23ff      	movs	r3, #255	; 0xff
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f903 	bl	8008dd4 <USBH_Get_StringDesc>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d102      	bne.n	8008bde <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008bdc:	e018      	b.n	8008c10 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d115      	bne.n	8008c10 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	73fb      	strb	r3, [r7, #15]
      break;
 8008be8:	e012      	b.n	8008c10 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73fb      	strb	r3, [r7, #15]
      break;
 8008bee:	e00f      	b.n	8008c10 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008bf0:	bf00      	nop
 8008bf2:	e00e      	b.n	8008c12 <USBH_HandleEnum+0x3be>
      break;
 8008bf4:	bf00      	nop
 8008bf6:	e00c      	b.n	8008c12 <USBH_HandleEnum+0x3be>
      break;
 8008bf8:	bf00      	nop
 8008bfa:	e00a      	b.n	8008c12 <USBH_HandleEnum+0x3be>
      break;
 8008bfc:	bf00      	nop
 8008bfe:	e008      	b.n	8008c12 <USBH_HandleEnum+0x3be>
      break;
 8008c00:	bf00      	nop
 8008c02:	e006      	b.n	8008c12 <USBH_HandleEnum+0x3be>
      break;
 8008c04:	bf00      	nop
 8008c06:	e004      	b.n	8008c12 <USBH_HandleEnum+0x3be>
      break;
 8008c08:	bf00      	nop
 8008c0a:	e002      	b.n	8008c12 <USBH_HandleEnum+0x3be>
      break;
 8008c0c:	bf00      	nop
 8008c0e:	e000      	b.n	8008c12 <USBH_HandleEnum+0x3be>
      break;
 8008c10:	bf00      	nop
  }
  return Status;
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008c2e:	bf00      	nop
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b082      	sub	sp, #8
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f804 	bl	8008c5e <USBH_HandleSof>
}
 8008c56:	bf00      	nop
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b0b      	cmp	r3, #11
 8008c6e:	d10a      	bne.n	8008c86 <USBH_HandleSof+0x28>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d005      	beq.n	8008c86 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	4798      	blx	r3
  }
}
 8008c86:	bf00      	nop
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008c9e:	bf00      	nop
}
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b083      	sub	sp, #12
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008cba:	bf00      	nop
}
 8008cbc:	370c      	adds	r7, #12
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b083      	sub	sp, #12
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 ff56 	bl	8009bc6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	791b      	ldrb	r3, [r3, #4]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fda3 	bl	800986c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	795b      	ldrb	r3, [r3, #5]
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fd9d 	bl	800986c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af02      	add	r7, sp, #8
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	4613      	mov	r3, r2
 8008d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f864 	bl	8008e2a <USBH_GetDescriptor>
 8008d62:	4603      	mov	r3, r0
 8008d64:	73fb      	strb	r3, [r7, #15]
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10a      	bne.n	8008d82 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008d78:	78fa      	ldrb	r2, [r7, #3]
 8008d7a:	b292      	uxth	r2, r2
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	f000 f918 	bl	8008fb2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af02      	add	r7, sp, #8
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	331c      	adds	r3, #28
 8008d9c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008d9e:	887b      	ldrh	r3, [r7, #2]
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008da8:	2100      	movs	r1, #0
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f83d 	bl	8008e2a <USBH_GetDescriptor>
 8008db0:	4603      	mov	r3, r0
 8008db2:	72fb      	strb	r3, [r7, #11]
 8008db4:	7afb      	ldrb	r3, [r7, #11]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d107      	bne.n	8008dca <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008dc0:	887a      	ldrh	r2, [r7, #2]
 8008dc2:	68f9      	ldr	r1, [r7, #12]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 f964 	bl	8009092 <USBH_ParseCfgDesc>
  }

  return status;
 8008dca:	7afb      	ldrb	r3, [r7, #11]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b088      	sub	sp, #32
 8008dd8:	af02      	add	r7, sp, #8
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	607a      	str	r2, [r7, #4]
 8008dde:	461a      	mov	r2, r3
 8008de0:	460b      	mov	r3, r1
 8008de2:	72fb      	strb	r3, [r7, #11]
 8008de4:	4613      	mov	r3, r2
 8008de6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008de8:	7afb      	ldrb	r3, [r7, #11]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008df0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008df8:	893b      	ldrh	r3, [r7, #8]
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	2100      	movs	r1, #0
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 f812 	bl	8008e2a <USBH_GetDescriptor>
 8008e06:	4603      	mov	r3, r0
 8008e08:	75fb      	strb	r3, [r7, #23]
 8008e0a:	7dfb      	ldrb	r3, [r7, #23]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d107      	bne.n	8008e20 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008e16:	893a      	ldrh	r2, [r7, #8]
 8008e18:	6879      	ldr	r1, [r7, #4]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fa37 	bl	800928e <USBH_ParseStringDesc>
  }

  return status;
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3718      	adds	r7, #24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b084      	sub	sp, #16
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	60f8      	str	r0, [r7, #12]
 8008e32:	607b      	str	r3, [r7, #4]
 8008e34:	460b      	mov	r3, r1
 8008e36:	72fb      	strb	r3, [r7, #11]
 8008e38:	4613      	mov	r3, r2
 8008e3a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	789b      	ldrb	r3, [r3, #2]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d11c      	bne.n	8008e7e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008e44:	7afb      	ldrb	r3, [r7, #11]
 8008e46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2206      	movs	r2, #6
 8008e54:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	893a      	ldrh	r2, [r7, #8]
 8008e5a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008e5c:	893b      	ldrh	r3, [r7, #8]
 8008e5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e66:	d104      	bne.n	8008e72 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f240 4209 	movw	r2, #1033	; 0x409
 8008e6e:	829a      	strh	r2, [r3, #20]
 8008e70:	e002      	b.n	8008e78 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	8b3a      	ldrh	r2, [r7, #24]
 8008e7c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008e7e:	8b3b      	ldrh	r3, [r7, #24]
 8008e80:	461a      	mov	r2, r3
 8008e82:	6879      	ldr	r1, [r7, #4]
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 fa50 	bl	800932a <USBH_CtlReq>
 8008e8a:	4603      	mov	r3, r0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	789b      	ldrb	r3, [r3, #2]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d10f      	bne.n	8008ec8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2205      	movs	r2, #5
 8008eb2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008eb4:	78fb      	ldrb	r3, [r7, #3]
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008ec8:	2200      	movs	r2, #0
 8008eca:	2100      	movs	r1, #0
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fa2c 	bl	800932a <USBH_CtlReq>
 8008ed2:	4603      	mov	r3, r0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	789b      	ldrb	r3, [r3, #2]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d10e      	bne.n	8008f0e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2209      	movs	r2, #9
 8008efa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	887a      	ldrh	r2, [r7, #2]
 8008f00:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008f0e:	2200      	movs	r2, #0
 8008f10:	2100      	movs	r1, #0
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fa09 	bl	800932a <USBH_CtlReq>
 8008f18:	4603      	mov	r3, r0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b082      	sub	sp, #8
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	789b      	ldrb	r3, [r3, #2]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d10f      	bne.n	8008f56 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2203      	movs	r2, #3
 8008f40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008f42:	78fb      	ldrb	r3, [r7, #3]
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008f56:	2200      	movs	r2, #0
 8008f58:	2100      	movs	r1, #0
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f9e5 	bl	800932a <USBH_CtlReq>
 8008f60:	4603      	mov	r3, r0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	460b      	mov	r3, r1
 8008f74:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	789b      	ldrb	r3, [r3, #2]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d10f      	bne.n	8008f9e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2202      	movs	r2, #2
 8008f82:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 f9c1 	bl	800932a <USBH_CtlReq>
 8008fa8:	4603      	mov	r3, r0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b085      	sub	sp, #20
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	60f8      	str	r0, [r7, #12]
 8008fba:	60b9      	str	r1, [r7, #8]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	781a      	ldrb	r2, [r3, #0]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	785a      	ldrb	r2, [r3, #1]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	3302      	adds	r3, #2
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	3303      	adds	r3, #3
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	021b      	lsls	r3, r3, #8
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	791a      	ldrb	r2, [r3, #4]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	795a      	ldrb	r2, [r3, #5]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	799a      	ldrb	r2, [r3, #6]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	79da      	ldrb	r2, [r3, #7]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800900c:	88fb      	ldrh	r3, [r7, #6]
 800900e:	2b08      	cmp	r3, #8
 8009010:	d939      	bls.n	8009086 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	3308      	adds	r3, #8
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	b29a      	uxth	r2, r3
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	3309      	adds	r3, #9
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	b29b      	uxth	r3, r3
 8009022:	021b      	lsls	r3, r3, #8
 8009024:	b29b      	uxth	r3, r3
 8009026:	4313      	orrs	r3, r2
 8009028:	b29a      	uxth	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	330a      	adds	r3, #10
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	b29a      	uxth	r2, r3
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	330b      	adds	r3, #11
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	b29b      	uxth	r3, r3
 800903e:	021b      	lsls	r3, r3, #8
 8009040:	b29b      	uxth	r3, r3
 8009042:	4313      	orrs	r3, r2
 8009044:	b29a      	uxth	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	330c      	adds	r3, #12
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	b29a      	uxth	r2, r3
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	330d      	adds	r3, #13
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	b29b      	uxth	r3, r3
 800905a:	021b      	lsls	r3, r3, #8
 800905c:	b29b      	uxth	r3, r3
 800905e:	4313      	orrs	r3, r2
 8009060:	b29a      	uxth	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	7b9a      	ldrb	r2, [r3, #14]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	7bda      	ldrb	r2, [r3, #15]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	7c1a      	ldrb	r2, [r3, #16]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	7c5a      	ldrb	r2, [r3, #17]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	745a      	strb	r2, [r3, #17]
  }
}
 8009086:	bf00      	nop
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b08a      	sub	sp, #40	; 0x28
 8009096:	af00      	add	r7, sp, #0
 8009098:	60f8      	str	r0, [r7, #12]
 800909a:	60b9      	str	r1, [r7, #8]
 800909c:	4613      	mov	r3, r2
 800909e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80090a4:	2300      	movs	r3, #0
 80090a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80090aa:	2300      	movs	r3, #0
 80090ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	781a      	ldrb	r2, [r3, #0]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	785a      	ldrb	r2, [r3, #1]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	3302      	adds	r3, #2
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	3303      	adds	r3, #3
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	021b      	lsls	r3, r3, #8
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	4313      	orrs	r3, r2
 80090da:	b29a      	uxth	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	791a      	ldrb	r2, [r3, #4]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	795a      	ldrb	r2, [r3, #5]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	799a      	ldrb	r2, [r3, #6]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	79da      	ldrb	r2, [r3, #7]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	7a1a      	ldrb	r2, [r3, #8]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009108:	88fb      	ldrh	r3, [r7, #6]
 800910a:	2b09      	cmp	r3, #9
 800910c:	d95f      	bls.n	80091ce <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800910e:	2309      	movs	r3, #9
 8009110:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009112:	2300      	movs	r3, #0
 8009114:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009116:	e051      	b.n	80091bc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009118:	f107 0316 	add.w	r3, r7, #22
 800911c:	4619      	mov	r1, r3
 800911e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009120:	f000 f8e8 	bl	80092f4 <USBH_GetNextDesc>
 8009124:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	785b      	ldrb	r3, [r3, #1]
 800912a:	2b04      	cmp	r3, #4
 800912c:	d146      	bne.n	80091bc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800912e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009132:	221a      	movs	r2, #26
 8009134:	fb02 f303 	mul.w	r3, r2, r3
 8009138:	3308      	adds	r3, #8
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	4413      	add	r3, r2
 800913e:	3302      	adds	r3, #2
 8009140:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009142:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009144:	69f8      	ldr	r0, [r7, #28]
 8009146:	f000 f846 	bl	80091d6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009150:	2300      	movs	r3, #0
 8009152:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009154:	e022      	b.n	800919c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009156:	f107 0316 	add.w	r3, r7, #22
 800915a:	4619      	mov	r1, r3
 800915c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800915e:	f000 f8c9 	bl	80092f4 <USBH_GetNextDesc>
 8009162:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009166:	785b      	ldrb	r3, [r3, #1]
 8009168:	2b05      	cmp	r3, #5
 800916a:	d117      	bne.n	800919c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800916c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009170:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009174:	3201      	adds	r2, #1
 8009176:	00d2      	lsls	r2, r2, #3
 8009178:	211a      	movs	r1, #26
 800917a:	fb01 f303 	mul.w	r3, r1, r3
 800917e:	4413      	add	r3, r2
 8009180:	3308      	adds	r3, #8
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	4413      	add	r3, r2
 8009186:	3304      	adds	r3, #4
 8009188:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800918a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800918c:	69b8      	ldr	r0, [r7, #24]
 800918e:	f000 f851 	bl	8009234 <USBH_ParseEPDesc>
            ep_ix++;
 8009192:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009196:	3301      	adds	r3, #1
 8009198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	791b      	ldrb	r3, [r3, #4]
 80091a0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d204      	bcs.n	80091b2 <USBH_ParseCfgDesc+0x120>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	885a      	ldrh	r2, [r3, #2]
 80091ac:	8afb      	ldrh	r3, [r7, #22]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d8d1      	bhi.n	8009156 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80091b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091b6:	3301      	adds	r3, #1
 80091b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80091bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d804      	bhi.n	80091ce <USBH_ParseCfgDesc+0x13c>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	885a      	ldrh	r2, [r3, #2]
 80091c8:	8afb      	ldrh	r3, [r7, #22]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d8a4      	bhi.n	8009118 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80091ce:	bf00      	nop
 80091d0:	3728      	adds	r7, #40	; 0x28
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b083      	sub	sp, #12
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	781a      	ldrb	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	785a      	ldrb	r2, [r3, #1]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	789a      	ldrb	r2, [r3, #2]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	78da      	ldrb	r2, [r3, #3]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	791a      	ldrb	r2, [r3, #4]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	795a      	ldrb	r2, [r3, #5]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	799a      	ldrb	r2, [r3, #6]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	79da      	ldrb	r2, [r3, #7]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	7a1a      	ldrb	r2, [r3, #8]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	721a      	strb	r2, [r3, #8]
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	781a      	ldrb	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	785a      	ldrb	r2, [r3, #1]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	789a      	ldrb	r2, [r3, #2]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	78da      	ldrb	r2, [r3, #3]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	3304      	adds	r3, #4
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	b29a      	uxth	r2, r3
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	3305      	adds	r3, #5
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	b29b      	uxth	r3, r3
 800926e:	021b      	lsls	r3, r3, #8
 8009270:	b29b      	uxth	r3, r3
 8009272:	4313      	orrs	r3, r2
 8009274:	b29a      	uxth	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	799a      	ldrb	r2, [r3, #6]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	719a      	strb	r2, [r3, #6]
}
 8009282:	bf00      	nop
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800928e:	b480      	push	{r7}
 8009290:	b087      	sub	sp, #28
 8009292:	af00      	add	r7, sp, #0
 8009294:	60f8      	str	r0, [r7, #12]
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	4613      	mov	r3, r2
 800929a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	3301      	adds	r3, #1
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d120      	bne.n	80092e8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	1e9a      	subs	r2, r3, #2
 80092ac:	88fb      	ldrh	r3, [r7, #6]
 80092ae:	4293      	cmp	r3, r2
 80092b0:	bf28      	it	cs
 80092b2:	4613      	movcs	r3, r2
 80092b4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	3302      	adds	r3, #2
 80092ba:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80092bc:	2300      	movs	r3, #0
 80092be:	82fb      	strh	r3, [r7, #22]
 80092c0:	e00b      	b.n	80092da <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80092c2:	8afb      	ldrh	r3, [r7, #22]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	4413      	add	r3, r2
 80092c8:	781a      	ldrb	r2, [r3, #0]
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	701a      	strb	r2, [r3, #0]
      pdest++;
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	3301      	adds	r3, #1
 80092d2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80092d4:	8afb      	ldrh	r3, [r7, #22]
 80092d6:	3302      	adds	r3, #2
 80092d8:	82fb      	strh	r3, [r7, #22]
 80092da:	8afa      	ldrh	r2, [r7, #22]
 80092dc:	8abb      	ldrh	r3, [r7, #20]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d3ef      	bcc.n	80092c2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2200      	movs	r2, #0
 80092e6:	701a      	strb	r2, [r3, #0]
  }
}
 80092e8:	bf00      	nop
 80092ea:	371c      	adds	r7, #28
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	881a      	ldrh	r2, [r3, #0]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	b29b      	uxth	r3, r3
 8009308:	4413      	add	r3, r2
 800930a:	b29a      	uxth	r2, r3
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4413      	add	r3, r2
 800931a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800931c:	68fb      	ldr	r3, [r7, #12]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3714      	adds	r7, #20
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b086      	sub	sp, #24
 800932e:	af00      	add	r7, sp, #0
 8009330:	60f8      	str	r0, [r7, #12]
 8009332:	60b9      	str	r1, [r7, #8]
 8009334:	4613      	mov	r3, r2
 8009336:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009338:	2301      	movs	r3, #1
 800933a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	789b      	ldrb	r3, [r3, #2]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d002      	beq.n	800934a <USBH_CtlReq+0x20>
 8009344:	2b02      	cmp	r3, #2
 8009346:	d00f      	beq.n	8009368 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009348:	e027      	b.n	800939a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	88fa      	ldrh	r2, [r7, #6]
 8009354:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2201      	movs	r2, #1
 800935a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2202      	movs	r2, #2
 8009360:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009362:	2301      	movs	r3, #1
 8009364:	75fb      	strb	r3, [r7, #23]
      break;
 8009366:	e018      	b.n	800939a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 f81b 	bl	80093a4 <USBH_HandleControl>
 800936e:	4603      	mov	r3, r0
 8009370:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <USBH_CtlReq+0x54>
 8009378:	7dfb      	ldrb	r3, [r7, #23]
 800937a:	2b03      	cmp	r3, #3
 800937c:	d106      	bne.n	800938c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2201      	movs	r2, #1
 8009382:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	761a      	strb	r2, [r3, #24]
      break;
 800938a:	e005      	b.n	8009398 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800938c:	7dfb      	ldrb	r3, [r7, #23]
 800938e:	2b02      	cmp	r3, #2
 8009390:	d102      	bne.n	8009398 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2201      	movs	r2, #1
 8009396:	709a      	strb	r2, [r3, #2]
      break;
 8009398:	bf00      	nop
  }
  return status;
 800939a:	7dfb      	ldrb	r3, [r7, #23]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3718      	adds	r7, #24
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af02      	add	r7, sp, #8
 80093aa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80093ac:	2301      	movs	r3, #1
 80093ae:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80093b0:	2300      	movs	r3, #0
 80093b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	7e1b      	ldrb	r3, [r3, #24]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	2b0a      	cmp	r3, #10
 80093bc:	f200 8156 	bhi.w	800966c <USBH_HandleControl+0x2c8>
 80093c0:	a201      	add	r2, pc, #4	; (adr r2, 80093c8 <USBH_HandleControl+0x24>)
 80093c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c6:	bf00      	nop
 80093c8:	080093f5 	.word	0x080093f5
 80093cc:	0800940f 	.word	0x0800940f
 80093d0:	08009479 	.word	0x08009479
 80093d4:	0800949f 	.word	0x0800949f
 80093d8:	080094d7 	.word	0x080094d7
 80093dc:	08009501 	.word	0x08009501
 80093e0:	08009553 	.word	0x08009553
 80093e4:	08009575 	.word	0x08009575
 80093e8:	080095b1 	.word	0x080095b1
 80093ec:	080095d7 	.word	0x080095d7
 80093f0:	08009615 	.word	0x08009615
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f103 0110 	add.w	r1, r3, #16
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	795b      	ldrb	r3, [r3, #5]
 80093fe:	461a      	mov	r2, r3
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 f943 	bl	800968c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2202      	movs	r2, #2
 800940a:	761a      	strb	r2, [r3, #24]
      break;
 800940c:	e139      	b.n	8009682 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	795b      	ldrb	r3, [r3, #5]
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fcc5 	bl	8009da4 <USBH_LL_GetURBState>
 800941a:	4603      	mov	r3, r0
 800941c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800941e:	7bbb      	ldrb	r3, [r7, #14]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d11e      	bne.n	8009462 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	7c1b      	ldrb	r3, [r3, #16]
 8009428:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800942c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	8adb      	ldrh	r3, [r3, #22]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00a      	beq.n	800944c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009436:	7b7b      	ldrb	r3, [r7, #13]
 8009438:	2b80      	cmp	r3, #128	; 0x80
 800943a:	d103      	bne.n	8009444 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2203      	movs	r2, #3
 8009440:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009442:	e115      	b.n	8009670 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2205      	movs	r2, #5
 8009448:	761a      	strb	r2, [r3, #24]
      break;
 800944a:	e111      	b.n	8009670 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800944c:	7b7b      	ldrb	r3, [r7, #13]
 800944e:	2b80      	cmp	r3, #128	; 0x80
 8009450:	d103      	bne.n	800945a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2209      	movs	r2, #9
 8009456:	761a      	strb	r2, [r3, #24]
      break;
 8009458:	e10a      	b.n	8009670 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2207      	movs	r2, #7
 800945e:	761a      	strb	r2, [r3, #24]
      break;
 8009460:	e106      	b.n	8009670 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009462:	7bbb      	ldrb	r3, [r7, #14]
 8009464:	2b04      	cmp	r3, #4
 8009466:	d003      	beq.n	8009470 <USBH_HandleControl+0xcc>
 8009468:	7bbb      	ldrb	r3, [r7, #14]
 800946a:	2b02      	cmp	r3, #2
 800946c:	f040 8100 	bne.w	8009670 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	220b      	movs	r2, #11
 8009474:	761a      	strb	r2, [r3, #24]
      break;
 8009476:	e0fb      	b.n	8009670 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800947e:	b29a      	uxth	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6899      	ldr	r1, [r3, #8]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	899a      	ldrh	r2, [r3, #12]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	791b      	ldrb	r3, [r3, #4]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f93a 	bl	800970a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2204      	movs	r2, #4
 800949a:	761a      	strb	r2, [r3, #24]
      break;
 800949c:	e0f1      	b.n	8009682 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	791b      	ldrb	r3, [r3, #4]
 80094a2:	4619      	mov	r1, r3
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fc7d 	bl	8009da4 <USBH_LL_GetURBState>
 80094aa:	4603      	mov	r3, r0
 80094ac:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80094ae:	7bbb      	ldrb	r3, [r7, #14]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d102      	bne.n	80094ba <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2209      	movs	r2, #9
 80094b8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	2b05      	cmp	r3, #5
 80094be:	d102      	bne.n	80094c6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80094c0:	2303      	movs	r3, #3
 80094c2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80094c4:	e0d6      	b.n	8009674 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80094c6:	7bbb      	ldrb	r3, [r7, #14]
 80094c8:	2b04      	cmp	r3, #4
 80094ca:	f040 80d3 	bne.w	8009674 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	220b      	movs	r2, #11
 80094d2:	761a      	strb	r2, [r3, #24]
      break;
 80094d4:	e0ce      	b.n	8009674 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6899      	ldr	r1, [r3, #8]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	899a      	ldrh	r2, [r3, #12]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	795b      	ldrb	r3, [r3, #5]
 80094e2:	2001      	movs	r0, #1
 80094e4:	9000      	str	r0, [sp, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f8ea 	bl	80096c0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2206      	movs	r2, #6
 80094fc:	761a      	strb	r2, [r3, #24]
      break;
 80094fe:	e0c0      	b.n	8009682 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	795b      	ldrb	r3, [r3, #5]
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fc4c 	bl	8009da4 <USBH_LL_GetURBState>
 800950c:	4603      	mov	r3, r0
 800950e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009510:	7bbb      	ldrb	r3, [r7, #14]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d103      	bne.n	800951e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2207      	movs	r2, #7
 800951a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800951c:	e0ac      	b.n	8009678 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	2b05      	cmp	r3, #5
 8009522:	d105      	bne.n	8009530 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	220c      	movs	r2, #12
 8009528:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800952a:	2303      	movs	r3, #3
 800952c:	73fb      	strb	r3, [r7, #15]
      break;
 800952e:	e0a3      	b.n	8009678 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009530:	7bbb      	ldrb	r3, [r7, #14]
 8009532:	2b02      	cmp	r3, #2
 8009534:	d103      	bne.n	800953e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2205      	movs	r2, #5
 800953a:	761a      	strb	r2, [r3, #24]
      break;
 800953c:	e09c      	b.n	8009678 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800953e:	7bbb      	ldrb	r3, [r7, #14]
 8009540:	2b04      	cmp	r3, #4
 8009542:	f040 8099 	bne.w	8009678 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	220b      	movs	r2, #11
 800954a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800954c:	2302      	movs	r3, #2
 800954e:	73fb      	strb	r3, [r7, #15]
      break;
 8009550:	e092      	b.n	8009678 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	791b      	ldrb	r3, [r3, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	2100      	movs	r1, #0
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f8d5 	bl	800970a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009566:	b29a      	uxth	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2208      	movs	r2, #8
 8009570:	761a      	strb	r2, [r3, #24]

      break;
 8009572:	e086      	b.n	8009682 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	791b      	ldrb	r3, [r3, #4]
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fc12 	bl	8009da4 <USBH_LL_GetURBState>
 8009580:	4603      	mov	r3, r0
 8009582:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009584:	7bbb      	ldrb	r3, [r7, #14]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d105      	bne.n	8009596 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	220d      	movs	r2, #13
 800958e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009590:	2300      	movs	r3, #0
 8009592:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009594:	e072      	b.n	800967c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009596:	7bbb      	ldrb	r3, [r7, #14]
 8009598:	2b04      	cmp	r3, #4
 800959a:	d103      	bne.n	80095a4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	220b      	movs	r2, #11
 80095a0:	761a      	strb	r2, [r3, #24]
      break;
 80095a2:	e06b      	b.n	800967c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80095a4:	7bbb      	ldrb	r3, [r7, #14]
 80095a6:	2b05      	cmp	r3, #5
 80095a8:	d168      	bne.n	800967c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80095aa:	2303      	movs	r3, #3
 80095ac:	73fb      	strb	r3, [r7, #15]
      break;
 80095ae:	e065      	b.n	800967c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	795b      	ldrb	r3, [r3, #5]
 80095b4:	2201      	movs	r2, #1
 80095b6:	9200      	str	r2, [sp, #0]
 80095b8:	2200      	movs	r2, #0
 80095ba:	2100      	movs	r1, #0
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f87f 	bl	80096c0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	220a      	movs	r2, #10
 80095d2:	761a      	strb	r2, [r3, #24]
      break;
 80095d4:	e055      	b.n	8009682 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	795b      	ldrb	r3, [r3, #5]
 80095da:	4619      	mov	r1, r3
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fbe1 	bl	8009da4 <USBH_LL_GetURBState>
 80095e2:	4603      	mov	r3, r0
 80095e4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80095e6:	7bbb      	ldrb	r3, [r7, #14]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d105      	bne.n	80095f8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	220d      	movs	r2, #13
 80095f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80095f6:	e043      	b.n	8009680 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d103      	bne.n	8009606 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2209      	movs	r2, #9
 8009602:	761a      	strb	r2, [r3, #24]
      break;
 8009604:	e03c      	b.n	8009680 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	2b04      	cmp	r3, #4
 800960a:	d139      	bne.n	8009680 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	220b      	movs	r2, #11
 8009610:	761a      	strb	r2, [r3, #24]
      break;
 8009612:	e035      	b.n	8009680 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	7e5b      	ldrb	r3, [r3, #25]
 8009618:	3301      	adds	r3, #1
 800961a:	b2da      	uxtb	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	765a      	strb	r2, [r3, #25]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	7e5b      	ldrb	r3, [r3, #25]
 8009624:	2b02      	cmp	r3, #2
 8009626:	d806      	bhi.n	8009636 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009634:	e025      	b.n	8009682 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800963c:	2106      	movs	r1, #6
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	795b      	ldrb	r3, [r3, #5]
 800964c:	4619      	mov	r1, r3
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f90c 	bl	800986c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	791b      	ldrb	r3, [r3, #4]
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f906 	bl	800986c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009666:	2302      	movs	r3, #2
 8009668:	73fb      	strb	r3, [r7, #15]
      break;
 800966a:	e00a      	b.n	8009682 <USBH_HandleControl+0x2de>

    default:
      break;
 800966c:	bf00      	nop
 800966e:	e008      	b.n	8009682 <USBH_HandleControl+0x2de>
      break;
 8009670:	bf00      	nop
 8009672:	e006      	b.n	8009682 <USBH_HandleControl+0x2de>
      break;
 8009674:	bf00      	nop
 8009676:	e004      	b.n	8009682 <USBH_HandleControl+0x2de>
      break;
 8009678:	bf00      	nop
 800967a:	e002      	b.n	8009682 <USBH_HandleControl+0x2de>
      break;
 800967c:	bf00      	nop
 800967e:	e000      	b.n	8009682 <USBH_HandleControl+0x2de>
      break;
 8009680:	bf00      	nop
  }

  return status;
 8009682:	7bfb      	ldrb	r3, [r7, #15]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b088      	sub	sp, #32
 8009690:	af04      	add	r7, sp, #16
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	4613      	mov	r3, r2
 8009698:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800969a:	79f9      	ldrb	r1, [r7, #7]
 800969c:	2300      	movs	r3, #0
 800969e:	9303      	str	r3, [sp, #12]
 80096a0:	2308      	movs	r3, #8
 80096a2:	9302      	str	r3, [sp, #8]
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	9301      	str	r3, [sp, #4]
 80096a8:	2300      	movs	r3, #0
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	2300      	movs	r3, #0
 80096ae:	2200      	movs	r2, #0
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f000 fb46 	bl	8009d42 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b088      	sub	sp, #32
 80096c4:	af04      	add	r7, sp, #16
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	4611      	mov	r1, r2
 80096cc:	461a      	mov	r2, r3
 80096ce:	460b      	mov	r3, r1
 80096d0:	80fb      	strh	r3, [r7, #6]
 80096d2:	4613      	mov	r3, r2
 80096d4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d001      	beq.n	80096e4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80096e4:	7979      	ldrb	r1, [r7, #5]
 80096e6:	7e3b      	ldrb	r3, [r7, #24]
 80096e8:	9303      	str	r3, [sp, #12]
 80096ea:	88fb      	ldrh	r3, [r7, #6]
 80096ec:	9302      	str	r3, [sp, #8]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	9301      	str	r3, [sp, #4]
 80096f2:	2301      	movs	r3, #1
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	2300      	movs	r3, #0
 80096f8:	2200      	movs	r2, #0
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f000 fb21 	bl	8009d42 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b088      	sub	sp, #32
 800970e:	af04      	add	r7, sp, #16
 8009710:	60f8      	str	r0, [r7, #12]
 8009712:	60b9      	str	r1, [r7, #8]
 8009714:	4611      	mov	r1, r2
 8009716:	461a      	mov	r2, r3
 8009718:	460b      	mov	r3, r1
 800971a:	80fb      	strh	r3, [r7, #6]
 800971c:	4613      	mov	r3, r2
 800971e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009720:	7979      	ldrb	r1, [r7, #5]
 8009722:	2300      	movs	r3, #0
 8009724:	9303      	str	r3, [sp, #12]
 8009726:	88fb      	ldrh	r3, [r7, #6]
 8009728:	9302      	str	r3, [sp, #8]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	2301      	movs	r3, #1
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	2300      	movs	r3, #0
 8009734:	2201      	movs	r2, #1
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f000 fb03 	bl	8009d42 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800973c:	2300      	movs	r3, #0

}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b088      	sub	sp, #32
 800974a:	af04      	add	r7, sp, #16
 800974c:	60f8      	str	r0, [r7, #12]
 800974e:	60b9      	str	r1, [r7, #8]
 8009750:	4611      	mov	r1, r2
 8009752:	461a      	mov	r2, r3
 8009754:	460b      	mov	r3, r1
 8009756:	80fb      	strh	r3, [r7, #6]
 8009758:	4613      	mov	r3, r2
 800975a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009766:	2300      	movs	r3, #0
 8009768:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800976a:	7979      	ldrb	r1, [r7, #5]
 800976c:	7e3b      	ldrb	r3, [r7, #24]
 800976e:	9303      	str	r3, [sp, #12]
 8009770:	88fb      	ldrh	r3, [r7, #6]
 8009772:	9302      	str	r3, [sp, #8]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	9301      	str	r3, [sp, #4]
 8009778:	2301      	movs	r3, #1
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	2302      	movs	r3, #2
 800977e:	2200      	movs	r2, #0
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f000 fade 	bl	8009d42 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b088      	sub	sp, #32
 8009794:	af04      	add	r7, sp, #16
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	4611      	mov	r1, r2
 800979c:	461a      	mov	r2, r3
 800979e:	460b      	mov	r3, r1
 80097a0:	80fb      	strh	r3, [r7, #6]
 80097a2:	4613      	mov	r3, r2
 80097a4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80097a6:	7979      	ldrb	r1, [r7, #5]
 80097a8:	2300      	movs	r3, #0
 80097aa:	9303      	str	r3, [sp, #12]
 80097ac:	88fb      	ldrh	r3, [r7, #6]
 80097ae:	9302      	str	r3, [sp, #8]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	9301      	str	r3, [sp, #4]
 80097b4:	2301      	movs	r3, #1
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	2302      	movs	r3, #2
 80097ba:	2201      	movs	r2, #1
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f000 fac0 	bl	8009d42 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af04      	add	r7, sp, #16
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	4608      	mov	r0, r1
 80097d6:	4611      	mov	r1, r2
 80097d8:	461a      	mov	r2, r3
 80097da:	4603      	mov	r3, r0
 80097dc:	70fb      	strb	r3, [r7, #3]
 80097de:	460b      	mov	r3, r1
 80097e0:	70bb      	strb	r3, [r7, #2]
 80097e2:	4613      	mov	r3, r2
 80097e4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80097e6:	7878      	ldrb	r0, [r7, #1]
 80097e8:	78ba      	ldrb	r2, [r7, #2]
 80097ea:	78f9      	ldrb	r1, [r7, #3]
 80097ec:	8b3b      	ldrh	r3, [r7, #24]
 80097ee:	9302      	str	r3, [sp, #8]
 80097f0:	7d3b      	ldrb	r3, [r7, #20]
 80097f2:	9301      	str	r3, [sp, #4]
 80097f4:	7c3b      	ldrb	r3, [r7, #16]
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	4603      	mov	r3, r0
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fa53 	bl	8009ca6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b082      	sub	sp, #8
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	460b      	mov	r3, r1
 8009814:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009816:	78fb      	ldrb	r3, [r7, #3]
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fa72 	bl	8009d04 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	460b      	mov	r3, r1
 8009834:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f836 	bl	80098a8 <USBH_GetFreePipe>
 800983c:	4603      	mov	r3, r0
 800983e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009840:	89fb      	ldrh	r3, [r7, #14]
 8009842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009846:	4293      	cmp	r3, r2
 8009848:	d00a      	beq.n	8009860 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800984a:	78fa      	ldrb	r2, [r7, #3]
 800984c:	89fb      	ldrh	r3, [r7, #14]
 800984e:	f003 030f 	and.w	r3, r3, #15
 8009852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009856:	6879      	ldr	r1, [r7, #4]
 8009858:	33e0      	adds	r3, #224	; 0xe0
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	440b      	add	r3, r1
 800985e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009860:	89fb      	ldrh	r3, [r7, #14]
 8009862:	b2db      	uxtb	r3, r3
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	460b      	mov	r3, r1
 8009876:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	2b0a      	cmp	r3, #10
 800987c:	d80d      	bhi.n	800989a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800987e:	78fb      	ldrb	r3, [r7, #3]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	33e0      	adds	r3, #224	; 0xe0
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	685a      	ldr	r2, [r3, #4]
 800988a:	78fb      	ldrb	r3, [r7, #3]
 800988c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009890:	6879      	ldr	r1, [r7, #4]
 8009892:	33e0      	adds	r3, #224	; 0xe0
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	440b      	add	r3, r1
 8009898:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80098b0:	2300      	movs	r3, #0
 80098b2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80098b4:	2300      	movs	r3, #0
 80098b6:	73fb      	strb	r3, [r7, #15]
 80098b8:	e00f      	b.n	80098da <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	33e0      	adds	r3, #224	; 0xe0
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4413      	add	r3, r2
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d102      	bne.n	80098d4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	e007      	b.n	80098e4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	3301      	adds	r3, #1
 80098d8:	73fb      	strb	r3, [r7, #15]
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	2b0a      	cmp	r3, #10
 80098de:	d9ec      	bls.n	80098ba <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80098e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80098f4:	2201      	movs	r2, #1
 80098f6:	490e      	ldr	r1, [pc, #56]	; (8009930 <MX_USB_HOST_Init+0x40>)
 80098f8:	480e      	ldr	r0, [pc, #56]	; (8009934 <MX_USB_HOST_Init+0x44>)
 80098fa:	f7fe fca1 	bl	8008240 <USBH_Init>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009904:	f7f8 f93c 	bl	8001b80 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009908:	490b      	ldr	r1, [pc, #44]	; (8009938 <MX_USB_HOST_Init+0x48>)
 800990a:	480a      	ldr	r0, [pc, #40]	; (8009934 <MX_USB_HOST_Init+0x44>)
 800990c:	f7fe fd26 	bl	800835c <USBH_RegisterClass>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009916:	f7f8 f933 	bl	8001b80 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800991a:	4806      	ldr	r0, [pc, #24]	; (8009934 <MX_USB_HOST_Init+0x44>)
 800991c:	f7fe fdaa 	bl	8008474 <USBH_Start>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009926:	f7f8 f92b 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800992a:	bf00      	nop
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	08009951 	.word	0x08009951
 8009934:	2000028c 	.word	0x2000028c
 8009938:	20000014 	.word	0x20000014

0800993c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009940:	4802      	ldr	r0, [pc, #8]	; (800994c <MX_USB_HOST_Process+0x10>)
 8009942:	f7fe fda7 	bl	8008494 <USBH_Process>
}
 8009946:	bf00      	nop
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	2000028c 	.word	0x2000028c

08009950 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800995c:	78fb      	ldrb	r3, [r7, #3]
 800995e:	3b01      	subs	r3, #1
 8009960:	2b04      	cmp	r3, #4
 8009962:	d819      	bhi.n	8009998 <USBH_UserProcess+0x48>
 8009964:	a201      	add	r2, pc, #4	; (adr r2, 800996c <USBH_UserProcess+0x1c>)
 8009966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996a:	bf00      	nop
 800996c:	08009999 	.word	0x08009999
 8009970:	08009989 	.word	0x08009989
 8009974:	08009999 	.word	0x08009999
 8009978:	08009991 	.word	0x08009991
 800997c:	08009981 	.word	0x08009981
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009980:	4b09      	ldr	r3, [pc, #36]	; (80099a8 <USBH_UserProcess+0x58>)
 8009982:	2203      	movs	r2, #3
 8009984:	701a      	strb	r2, [r3, #0]
  break;
 8009986:	e008      	b.n	800999a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009988:	4b07      	ldr	r3, [pc, #28]	; (80099a8 <USBH_UserProcess+0x58>)
 800998a:	2202      	movs	r2, #2
 800998c:	701a      	strb	r2, [r3, #0]
  break;
 800998e:	e004      	b.n	800999a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009990:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <USBH_UserProcess+0x58>)
 8009992:	2201      	movs	r2, #1
 8009994:	701a      	strb	r2, [r3, #0]
  break;
 8009996:	e000      	b.n	800999a <USBH_UserProcess+0x4a>

  default:
  break;
 8009998:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800999a:	bf00      	nop
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	200000bc 	.word	0x200000bc

080099ac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08a      	sub	sp, #40	; 0x28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099b4:	f107 0314 	add.w	r3, r7, #20
 80099b8:	2200      	movs	r2, #0
 80099ba:	601a      	str	r2, [r3, #0]
 80099bc:	605a      	str	r2, [r3, #4]
 80099be:	609a      	str	r2, [r3, #8]
 80099c0:	60da      	str	r2, [r3, #12]
 80099c2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099cc:	d147      	bne.n	8009a5e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099ce:	2300      	movs	r3, #0
 80099d0:	613b      	str	r3, [r7, #16]
 80099d2:	4b25      	ldr	r3, [pc, #148]	; (8009a68 <HAL_HCD_MspInit+0xbc>)
 80099d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d6:	4a24      	ldr	r2, [pc, #144]	; (8009a68 <HAL_HCD_MspInit+0xbc>)
 80099d8:	f043 0301 	orr.w	r3, r3, #1
 80099dc:	6313      	str	r3, [r2, #48]	; 0x30
 80099de:	4b22      	ldr	r3, [pc, #136]	; (8009a68 <HAL_HCD_MspInit+0xbc>)
 80099e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e2:	f003 0301 	and.w	r3, r3, #1
 80099e6:	613b      	str	r3, [r7, #16]
 80099e8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80099ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80099f0:	2300      	movs	r3, #0
 80099f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099f4:	2300      	movs	r3, #0
 80099f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80099f8:	f107 0314 	add.w	r3, r7, #20
 80099fc:	4619      	mov	r1, r3
 80099fe:	481b      	ldr	r0, [pc, #108]	; (8009a6c <HAL_HCD_MspInit+0xc0>)
 8009a00:	f7f8 fd3c 	bl	800247c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009a04:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a12:	2300      	movs	r3, #0
 8009a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009a16:	230a      	movs	r3, #10
 8009a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a1a:	f107 0314 	add.w	r3, r7, #20
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4812      	ldr	r0, [pc, #72]	; (8009a6c <HAL_HCD_MspInit+0xc0>)
 8009a22:	f7f8 fd2b 	bl	800247c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009a26:	4b10      	ldr	r3, [pc, #64]	; (8009a68 <HAL_HCD_MspInit+0xbc>)
 8009a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a2a:	4a0f      	ldr	r2, [pc, #60]	; (8009a68 <HAL_HCD_MspInit+0xbc>)
 8009a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a30:	6353      	str	r3, [r2, #52]	; 0x34
 8009a32:	2300      	movs	r3, #0
 8009a34:	60fb      	str	r3, [r7, #12]
 8009a36:	4b0c      	ldr	r3, [pc, #48]	; (8009a68 <HAL_HCD_MspInit+0xbc>)
 8009a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a3a:	4a0b      	ldr	r2, [pc, #44]	; (8009a68 <HAL_HCD_MspInit+0xbc>)
 8009a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a40:	6453      	str	r3, [r2, #68]	; 0x44
 8009a42:	4b09      	ldr	r3, [pc, #36]	; (8009a68 <HAL_HCD_MspInit+0xbc>)
 8009a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a4a:	60fb      	str	r3, [r7, #12]
 8009a4c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009a4e:	2200      	movs	r2, #0
 8009a50:	2100      	movs	r1, #0
 8009a52:	2043      	movs	r0, #67	; 0x43
 8009a54:	f7f8 fcdb 	bl	800240e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009a58:	2043      	movs	r0, #67	; 0x43
 8009a5a:	f7f8 fcf4 	bl	8002446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009a5e:	bf00      	nop
 8009a60:	3728      	adds	r7, #40	; 0x28
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	40023800 	.word	0x40023800
 8009a6c:	40020000 	.word	0x40020000

08009a70 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7ff f8db 	bl	8008c3a <USBH_LL_IncTimer>
}
 8009a84:	bf00      	nop
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7ff f913 	bl	8008cc6 <USBH_LL_Connect>
}
 8009aa0:	bf00      	nop
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7ff f91c 	bl	8008cf4 <USBH_LL_Disconnect>
}
 8009abc:	bf00      	nop
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	460b      	mov	r3, r1
 8009ace:	70fb      	strb	r3, [r7, #3]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7ff f8cd 	bl	8008c8e <USBH_LL_PortEnabled>
}
 8009af4:	bf00      	nop
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7ff f8cd 	bl	8008caa <USBH_LL_PortDisabled>
}
 8009b10:	bf00      	nop
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d12a      	bne.n	8009b80 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009b2a:	4a18      	ldr	r2, [pc, #96]	; (8009b8c <USBH_LL_Init+0x74>)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a15      	ldr	r2, [pc, #84]	; (8009b8c <USBH_LL_Init+0x74>)
 8009b36:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b3a:	4b14      	ldr	r3, [pc, #80]	; (8009b8c <USBH_LL_Init+0x74>)
 8009b3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009b40:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009b42:	4b12      	ldr	r3, [pc, #72]	; (8009b8c <USBH_LL_Init+0x74>)
 8009b44:	2208      	movs	r2, #8
 8009b46:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009b48:	4b10      	ldr	r3, [pc, #64]	; (8009b8c <USBH_LL_Init+0x74>)
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b4e:	4b0f      	ldr	r3, [pc, #60]	; (8009b8c <USBH_LL_Init+0x74>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009b54:	4b0d      	ldr	r3, [pc, #52]	; (8009b8c <USBH_LL_Init+0x74>)
 8009b56:	2202      	movs	r2, #2
 8009b58:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b5a:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <USBH_LL_Init+0x74>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009b60:	480a      	ldr	r0, [pc, #40]	; (8009b8c <USBH_LL_Init+0x74>)
 8009b62:	f7f8 fe72 	bl	800284a <HAL_HCD_Init>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d001      	beq.n	8009b70 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009b6c:	f7f8 f808 	bl	8001b80 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009b70:	4806      	ldr	r0, [pc, #24]	; (8009b8c <USBH_LL_Init+0x74>)
 8009b72:	f7f9 fa4f 	bl	8003014 <HAL_HCD_GetCurrentFrame>
 8009b76:	4603      	mov	r3, r0
 8009b78:	4619      	mov	r1, r3
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f7ff f84e 	bl	8008c1c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3708      	adds	r7, #8
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20000664 	.word	0x20000664

08009b90 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7f9 f9be 	bl	8002f28 <HAL_HCD_Start>
 8009bac:	4603      	mov	r3, r0
 8009bae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 f95c 	bl	8009e70 <USBH_Get_USB_Status>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b084      	sub	sp, #16
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7f9 f9c6 	bl	8002f6e <HAL_HCD_Stop>
 8009be2:	4603      	mov	r3, r0
 8009be4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 f941 	bl	8009e70 <USBH_Get_USB_Status>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009c04:	2301      	movs	r3, #1
 8009c06:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7f9 fa0e 	bl	8003030 <HAL_HCD_GetCurrentSpeed>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d00c      	beq.n	8009c34 <USBH_LL_GetSpeed+0x38>
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d80d      	bhi.n	8009c3a <USBH_LL_GetSpeed+0x3e>
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d002      	beq.n	8009c28 <USBH_LL_GetSpeed+0x2c>
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d003      	beq.n	8009c2e <USBH_LL_GetSpeed+0x32>
 8009c26:	e008      	b.n	8009c3a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c2c:	e008      	b.n	8009c40 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	73fb      	strb	r3, [r7, #15]
    break;
 8009c32:	e005      	b.n	8009c40 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009c34:	2302      	movs	r3, #2
 8009c36:	73fb      	strb	r3, [r7, #15]
    break;
 8009c38:	e002      	b.n	8009c40 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c3e:	bf00      	nop
  }
  return  speed;
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b084      	sub	sp, #16
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c52:	2300      	movs	r3, #0
 8009c54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7f9 f9a1 	bl	8002fa8 <HAL_HCD_ResetPort>
 8009c66:	4603      	mov	r3, r0
 8009c68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c6a:	7bfb      	ldrb	r3, [r7, #15]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 f8ff 	bl	8009e70 <USBH_Get_USB_Status>
 8009c72:	4603      	mov	r3, r0
 8009c74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c92:	78fa      	ldrb	r2, [r7, #3]
 8009c94:	4611      	mov	r1, r2
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7f9 f9a8 	bl	8002fec <HAL_HCD_HC_GetXferCount>
 8009c9c:	4603      	mov	r3, r0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009ca6:	b590      	push	{r4, r7, lr}
 8009ca8:	b089      	sub	sp, #36	; 0x24
 8009caa:	af04      	add	r7, sp, #16
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	4608      	mov	r0, r1
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	70fb      	strb	r3, [r7, #3]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	70bb      	strb	r3, [r7, #2]
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009cce:	787c      	ldrb	r4, [r7, #1]
 8009cd0:	78ba      	ldrb	r2, [r7, #2]
 8009cd2:	78f9      	ldrb	r1, [r7, #3]
 8009cd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009cd6:	9302      	str	r3, [sp, #8]
 8009cd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009cdc:	9301      	str	r3, [sp, #4]
 8009cde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	4623      	mov	r3, r4
 8009ce6:	f7f8 fe12 	bl	800290e <HAL_HCD_HC_Init>
 8009cea:	4603      	mov	r3, r0
 8009cec:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 f8bd 	bl	8009e70 <USBH_Get_USB_Status>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3714      	adds	r7, #20
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd90      	pop	{r4, r7, pc}

08009d04 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d10:	2300      	movs	r3, #0
 8009d12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d1e:	78fa      	ldrb	r2, [r7, #3]
 8009d20:	4611      	mov	r1, r2
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7f8 fe82 	bl	8002a2c <HAL_HCD_HC_Halt>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f000 f89e 	bl	8009e70 <USBH_Get_USB_Status>
 8009d34:	4603      	mov	r3, r0
 8009d36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d38:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009d42:	b590      	push	{r4, r7, lr}
 8009d44:	b089      	sub	sp, #36	; 0x24
 8009d46:	af04      	add	r7, sp, #16
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	4608      	mov	r0, r1
 8009d4c:	4611      	mov	r1, r2
 8009d4e:	461a      	mov	r2, r3
 8009d50:	4603      	mov	r3, r0
 8009d52:	70fb      	strb	r3, [r7, #3]
 8009d54:	460b      	mov	r3, r1
 8009d56:	70bb      	strb	r3, [r7, #2]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009d6a:	787c      	ldrb	r4, [r7, #1]
 8009d6c:	78ba      	ldrb	r2, [r7, #2]
 8009d6e:	78f9      	ldrb	r1, [r7, #3]
 8009d70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009d74:	9303      	str	r3, [sp, #12]
 8009d76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009d78:	9302      	str	r3, [sp, #8]
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7c:	9301      	str	r3, [sp, #4]
 8009d7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	4623      	mov	r3, r4
 8009d86:	f7f8 fe75 	bl	8002a74 <HAL_HCD_HC_SubmitRequest>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f000 f86d 	bl	8009e70 <USBH_Get_USB_Status>
 8009d96:	4603      	mov	r3, r0
 8009d98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd90      	pop	{r4, r7, pc}

08009da4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	460b      	mov	r3, r1
 8009dae:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009db6:	78fa      	ldrb	r2, [r7, #3]
 8009db8:	4611      	mov	r1, r2
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7f9 f902 	bl	8002fc4 <HAL_HCD_HC_GetURBState>
 8009dc0:	4603      	mov	r3, r0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b082      	sub	sp, #8
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d103      	bne.n	8009de8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f000 f870 	bl	8009ec8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009de8:	20c8      	movs	r0, #200	; 0xc8
 8009dea:	f7f8 fa11 	bl	8002210 <HAL_Delay>
  return USBH_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	460b      	mov	r3, r1
 8009e02:	70fb      	strb	r3, [r7, #3]
 8009e04:	4613      	mov	r3, r2
 8009e06:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009e0e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009e10:	78fb      	ldrb	r3, [r7, #3]
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	212c      	movs	r1, #44	; 0x2c
 8009e16:	fb01 f303 	mul.w	r3, r1, r3
 8009e1a:	4413      	add	r3, r2
 8009e1c:	333b      	adds	r3, #59	; 0x3b
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d009      	beq.n	8009e38 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009e24:	78fb      	ldrb	r3, [r7, #3]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	212c      	movs	r1, #44	; 0x2c
 8009e2a:	fb01 f303 	mul.w	r3, r1, r3
 8009e2e:	4413      	add	r3, r2
 8009e30:	3354      	adds	r3, #84	; 0x54
 8009e32:	78ba      	ldrb	r2, [r7, #2]
 8009e34:	701a      	strb	r2, [r3, #0]
 8009e36:	e008      	b.n	8009e4a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009e38:	78fb      	ldrb	r3, [r7, #3]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	212c      	movs	r1, #44	; 0x2c
 8009e3e:	fb01 f303 	mul.w	r3, r1, r3
 8009e42:	4413      	add	r3, r2
 8009e44:	3355      	adds	r3, #85	; 0x55
 8009e46:	78ba      	ldrb	r2, [r7, #2]
 8009e48:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7f8 f9d5 	bl	8002210 <HAL_Delay>
}
 8009e66:	bf00      	nop
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
	...

08009e70 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	4603      	mov	r3, r0
 8009e78:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e7e:	79fb      	ldrb	r3, [r7, #7]
 8009e80:	2b03      	cmp	r3, #3
 8009e82:	d817      	bhi.n	8009eb4 <USBH_Get_USB_Status+0x44>
 8009e84:	a201      	add	r2, pc, #4	; (adr r2, 8009e8c <USBH_Get_USB_Status+0x1c>)
 8009e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8a:	bf00      	nop
 8009e8c:	08009e9d 	.word	0x08009e9d
 8009e90:	08009ea3 	.word	0x08009ea3
 8009e94:	08009ea9 	.word	0x08009ea9
 8009e98:	08009eaf 	.word	0x08009eaf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea0:	e00b      	b.n	8009eba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea6:	e008      	b.n	8009eba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	73fb      	strb	r3, [r7, #15]
    break;
 8009eac:	e005      	b.n	8009eba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009eae:	2302      	movs	r3, #2
 8009eb0:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb2:	e002      	b.n	8009eba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb8:	bf00      	nop
  }
  return usb_status;
 8009eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3714      	adds	r7, #20
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	4603      	mov	r3, r0
 8009ed0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009ed2:	79fb      	ldrb	r3, [r7, #7]
 8009ed4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009ed6:	79fb      	ldrb	r3, [r7, #7]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009edc:	2301      	movs	r3, #1
 8009ede:	73fb      	strb	r3, [r7, #15]
 8009ee0:	e001      	b.n	8009ee6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009ee6:	7bfb      	ldrb	r3, [r7, #15]
 8009ee8:	461a      	mov	r2, r3
 8009eea:	2101      	movs	r1, #1
 8009eec:	4803      	ldr	r0, [pc, #12]	; (8009efc <MX_DriverVbusFS+0x34>)
 8009eee:	f7f8 fc79 	bl	80027e4 <HAL_GPIO_WritePin>
}
 8009ef2:	bf00      	nop
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	40020800 	.word	0x40020800

08009f00 <__errno>:
 8009f00:	4b01      	ldr	r3, [pc, #4]	; (8009f08 <__errno+0x8>)
 8009f02:	6818      	ldr	r0, [r3, #0]
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	20000034 	.word	0x20000034

08009f0c <__libc_init_array>:
 8009f0c:	b570      	push	{r4, r5, r6, lr}
 8009f0e:	4d0d      	ldr	r5, [pc, #52]	; (8009f44 <__libc_init_array+0x38>)
 8009f10:	4c0d      	ldr	r4, [pc, #52]	; (8009f48 <__libc_init_array+0x3c>)
 8009f12:	1b64      	subs	r4, r4, r5
 8009f14:	10a4      	asrs	r4, r4, #2
 8009f16:	2600      	movs	r6, #0
 8009f18:	42a6      	cmp	r6, r4
 8009f1a:	d109      	bne.n	8009f30 <__libc_init_array+0x24>
 8009f1c:	4d0b      	ldr	r5, [pc, #44]	; (8009f4c <__libc_init_array+0x40>)
 8009f1e:	4c0c      	ldr	r4, [pc, #48]	; (8009f50 <__libc_init_array+0x44>)
 8009f20:	f000 f8f8 	bl	800a114 <_init>
 8009f24:	1b64      	subs	r4, r4, r5
 8009f26:	10a4      	asrs	r4, r4, #2
 8009f28:	2600      	movs	r6, #0
 8009f2a:	42a6      	cmp	r6, r4
 8009f2c:	d105      	bne.n	8009f3a <__libc_init_array+0x2e>
 8009f2e:	bd70      	pop	{r4, r5, r6, pc}
 8009f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f34:	4798      	blx	r3
 8009f36:	3601      	adds	r6, #1
 8009f38:	e7ee      	b.n	8009f18 <__libc_init_array+0xc>
 8009f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f3e:	4798      	blx	r3
 8009f40:	3601      	adds	r6, #1
 8009f42:	e7f2      	b.n	8009f2a <__libc_init_array+0x1e>
 8009f44:	0800a388 	.word	0x0800a388
 8009f48:	0800a388 	.word	0x0800a388
 8009f4c:	0800a388 	.word	0x0800a388
 8009f50:	0800a38c 	.word	0x0800a38c

08009f54 <malloc>:
 8009f54:	4b02      	ldr	r3, [pc, #8]	; (8009f60 <malloc+0xc>)
 8009f56:	4601      	mov	r1, r0
 8009f58:	6818      	ldr	r0, [r3, #0]
 8009f5a:	f000 b863 	b.w	800a024 <_malloc_r>
 8009f5e:	bf00      	nop
 8009f60:	20000034 	.word	0x20000034

08009f64 <free>:
 8009f64:	4b02      	ldr	r3, [pc, #8]	; (8009f70 <free+0xc>)
 8009f66:	4601      	mov	r1, r0
 8009f68:	6818      	ldr	r0, [r3, #0]
 8009f6a:	f000 b80b 	b.w	8009f84 <_free_r>
 8009f6e:	bf00      	nop
 8009f70:	20000034 	.word	0x20000034

08009f74 <memset>:
 8009f74:	4402      	add	r2, r0
 8009f76:	4603      	mov	r3, r0
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d100      	bne.n	8009f7e <memset+0xa>
 8009f7c:	4770      	bx	lr
 8009f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f82:	e7f9      	b.n	8009f78 <memset+0x4>

08009f84 <_free_r>:
 8009f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f86:	2900      	cmp	r1, #0
 8009f88:	d048      	beq.n	800a01c <_free_r+0x98>
 8009f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f8e:	9001      	str	r0, [sp, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f1a1 0404 	sub.w	r4, r1, #4
 8009f96:	bfb8      	it	lt
 8009f98:	18e4      	addlt	r4, r4, r3
 8009f9a:	f000 f8ad 	bl	800a0f8 <__malloc_lock>
 8009f9e:	4a20      	ldr	r2, [pc, #128]	; (800a020 <_free_r+0x9c>)
 8009fa0:	9801      	ldr	r0, [sp, #4]
 8009fa2:	6813      	ldr	r3, [r2, #0]
 8009fa4:	4615      	mov	r5, r2
 8009fa6:	b933      	cbnz	r3, 8009fb6 <_free_r+0x32>
 8009fa8:	6063      	str	r3, [r4, #4]
 8009faa:	6014      	str	r4, [r2, #0]
 8009fac:	b003      	add	sp, #12
 8009fae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fb2:	f000 b8a7 	b.w	800a104 <__malloc_unlock>
 8009fb6:	42a3      	cmp	r3, r4
 8009fb8:	d90b      	bls.n	8009fd2 <_free_r+0x4e>
 8009fba:	6821      	ldr	r1, [r4, #0]
 8009fbc:	1862      	adds	r2, r4, r1
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	bf04      	itt	eq
 8009fc2:	681a      	ldreq	r2, [r3, #0]
 8009fc4:	685b      	ldreq	r3, [r3, #4]
 8009fc6:	6063      	str	r3, [r4, #4]
 8009fc8:	bf04      	itt	eq
 8009fca:	1852      	addeq	r2, r2, r1
 8009fcc:	6022      	streq	r2, [r4, #0]
 8009fce:	602c      	str	r4, [r5, #0]
 8009fd0:	e7ec      	b.n	8009fac <_free_r+0x28>
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	b10b      	cbz	r3, 8009fdc <_free_r+0x58>
 8009fd8:	42a3      	cmp	r3, r4
 8009fda:	d9fa      	bls.n	8009fd2 <_free_r+0x4e>
 8009fdc:	6811      	ldr	r1, [r2, #0]
 8009fde:	1855      	adds	r5, r2, r1
 8009fe0:	42a5      	cmp	r5, r4
 8009fe2:	d10b      	bne.n	8009ffc <_free_r+0x78>
 8009fe4:	6824      	ldr	r4, [r4, #0]
 8009fe6:	4421      	add	r1, r4
 8009fe8:	1854      	adds	r4, r2, r1
 8009fea:	42a3      	cmp	r3, r4
 8009fec:	6011      	str	r1, [r2, #0]
 8009fee:	d1dd      	bne.n	8009fac <_free_r+0x28>
 8009ff0:	681c      	ldr	r4, [r3, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	6053      	str	r3, [r2, #4]
 8009ff6:	4421      	add	r1, r4
 8009ff8:	6011      	str	r1, [r2, #0]
 8009ffa:	e7d7      	b.n	8009fac <_free_r+0x28>
 8009ffc:	d902      	bls.n	800a004 <_free_r+0x80>
 8009ffe:	230c      	movs	r3, #12
 800a000:	6003      	str	r3, [r0, #0]
 800a002:	e7d3      	b.n	8009fac <_free_r+0x28>
 800a004:	6825      	ldr	r5, [r4, #0]
 800a006:	1961      	adds	r1, r4, r5
 800a008:	428b      	cmp	r3, r1
 800a00a:	bf04      	itt	eq
 800a00c:	6819      	ldreq	r1, [r3, #0]
 800a00e:	685b      	ldreq	r3, [r3, #4]
 800a010:	6063      	str	r3, [r4, #4]
 800a012:	bf04      	itt	eq
 800a014:	1949      	addeq	r1, r1, r5
 800a016:	6021      	streq	r1, [r4, #0]
 800a018:	6054      	str	r4, [r2, #4]
 800a01a:	e7c7      	b.n	8009fac <_free_r+0x28>
 800a01c:	b003      	add	sp, #12
 800a01e:	bd30      	pop	{r4, r5, pc}
 800a020:	200000c0 	.word	0x200000c0

0800a024 <_malloc_r>:
 800a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a026:	1ccd      	adds	r5, r1, #3
 800a028:	f025 0503 	bic.w	r5, r5, #3
 800a02c:	3508      	adds	r5, #8
 800a02e:	2d0c      	cmp	r5, #12
 800a030:	bf38      	it	cc
 800a032:	250c      	movcc	r5, #12
 800a034:	2d00      	cmp	r5, #0
 800a036:	4606      	mov	r6, r0
 800a038:	db01      	blt.n	800a03e <_malloc_r+0x1a>
 800a03a:	42a9      	cmp	r1, r5
 800a03c:	d903      	bls.n	800a046 <_malloc_r+0x22>
 800a03e:	230c      	movs	r3, #12
 800a040:	6033      	str	r3, [r6, #0]
 800a042:	2000      	movs	r0, #0
 800a044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a046:	f000 f857 	bl	800a0f8 <__malloc_lock>
 800a04a:	4921      	ldr	r1, [pc, #132]	; (800a0d0 <_malloc_r+0xac>)
 800a04c:	680a      	ldr	r2, [r1, #0]
 800a04e:	4614      	mov	r4, r2
 800a050:	b99c      	cbnz	r4, 800a07a <_malloc_r+0x56>
 800a052:	4f20      	ldr	r7, [pc, #128]	; (800a0d4 <_malloc_r+0xb0>)
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	b923      	cbnz	r3, 800a062 <_malloc_r+0x3e>
 800a058:	4621      	mov	r1, r4
 800a05a:	4630      	mov	r0, r6
 800a05c:	f000 f83c 	bl	800a0d8 <_sbrk_r>
 800a060:	6038      	str	r0, [r7, #0]
 800a062:	4629      	mov	r1, r5
 800a064:	4630      	mov	r0, r6
 800a066:	f000 f837 	bl	800a0d8 <_sbrk_r>
 800a06a:	1c43      	adds	r3, r0, #1
 800a06c:	d123      	bne.n	800a0b6 <_malloc_r+0x92>
 800a06e:	230c      	movs	r3, #12
 800a070:	6033      	str	r3, [r6, #0]
 800a072:	4630      	mov	r0, r6
 800a074:	f000 f846 	bl	800a104 <__malloc_unlock>
 800a078:	e7e3      	b.n	800a042 <_malloc_r+0x1e>
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	1b5b      	subs	r3, r3, r5
 800a07e:	d417      	bmi.n	800a0b0 <_malloc_r+0x8c>
 800a080:	2b0b      	cmp	r3, #11
 800a082:	d903      	bls.n	800a08c <_malloc_r+0x68>
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	441c      	add	r4, r3
 800a088:	6025      	str	r5, [r4, #0]
 800a08a:	e004      	b.n	800a096 <_malloc_r+0x72>
 800a08c:	6863      	ldr	r3, [r4, #4]
 800a08e:	42a2      	cmp	r2, r4
 800a090:	bf0c      	ite	eq
 800a092:	600b      	streq	r3, [r1, #0]
 800a094:	6053      	strne	r3, [r2, #4]
 800a096:	4630      	mov	r0, r6
 800a098:	f000 f834 	bl	800a104 <__malloc_unlock>
 800a09c:	f104 000b 	add.w	r0, r4, #11
 800a0a0:	1d23      	adds	r3, r4, #4
 800a0a2:	f020 0007 	bic.w	r0, r0, #7
 800a0a6:	1ac2      	subs	r2, r0, r3
 800a0a8:	d0cc      	beq.n	800a044 <_malloc_r+0x20>
 800a0aa:	1a1b      	subs	r3, r3, r0
 800a0ac:	50a3      	str	r3, [r4, r2]
 800a0ae:	e7c9      	b.n	800a044 <_malloc_r+0x20>
 800a0b0:	4622      	mov	r2, r4
 800a0b2:	6864      	ldr	r4, [r4, #4]
 800a0b4:	e7cc      	b.n	800a050 <_malloc_r+0x2c>
 800a0b6:	1cc4      	adds	r4, r0, #3
 800a0b8:	f024 0403 	bic.w	r4, r4, #3
 800a0bc:	42a0      	cmp	r0, r4
 800a0be:	d0e3      	beq.n	800a088 <_malloc_r+0x64>
 800a0c0:	1a21      	subs	r1, r4, r0
 800a0c2:	4630      	mov	r0, r6
 800a0c4:	f000 f808 	bl	800a0d8 <_sbrk_r>
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	d1dd      	bne.n	800a088 <_malloc_r+0x64>
 800a0cc:	e7cf      	b.n	800a06e <_malloc_r+0x4a>
 800a0ce:	bf00      	nop
 800a0d0:	200000c0 	.word	0x200000c0
 800a0d4:	200000c4 	.word	0x200000c4

0800a0d8 <_sbrk_r>:
 800a0d8:	b538      	push	{r3, r4, r5, lr}
 800a0da:	4d06      	ldr	r5, [pc, #24]	; (800a0f4 <_sbrk_r+0x1c>)
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4604      	mov	r4, r0
 800a0e0:	4608      	mov	r0, r1
 800a0e2:	602b      	str	r3, [r5, #0]
 800a0e4:	f7f7 ffb0 	bl	8002048 <_sbrk>
 800a0e8:	1c43      	adds	r3, r0, #1
 800a0ea:	d102      	bne.n	800a0f2 <_sbrk_r+0x1a>
 800a0ec:	682b      	ldr	r3, [r5, #0]
 800a0ee:	b103      	cbz	r3, 800a0f2 <_sbrk_r+0x1a>
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	bd38      	pop	{r3, r4, r5, pc}
 800a0f4:	20000968 	.word	0x20000968

0800a0f8 <__malloc_lock>:
 800a0f8:	4801      	ldr	r0, [pc, #4]	; (800a100 <__malloc_lock+0x8>)
 800a0fa:	f000 b809 	b.w	800a110 <__retarget_lock_acquire_recursive>
 800a0fe:	bf00      	nop
 800a100:	20000970 	.word	0x20000970

0800a104 <__malloc_unlock>:
 800a104:	4801      	ldr	r0, [pc, #4]	; (800a10c <__malloc_unlock+0x8>)
 800a106:	f000 b804 	b.w	800a112 <__retarget_lock_release_recursive>
 800a10a:	bf00      	nop
 800a10c:	20000970 	.word	0x20000970

0800a110 <__retarget_lock_acquire_recursive>:
 800a110:	4770      	bx	lr

0800a112 <__retarget_lock_release_recursive>:
 800a112:	4770      	bx	lr

0800a114 <_init>:
 800a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a116:	bf00      	nop
 800a118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a11a:	bc08      	pop	{r3}
 800a11c:	469e      	mov	lr, r3
 800a11e:	4770      	bx	lr

0800a120 <_fini>:
 800a120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a122:	bf00      	nop
 800a124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a126:	bc08      	pop	{r3}
 800a128:	469e      	mov	lr, r3
 800a12a:	4770      	bx	lr
