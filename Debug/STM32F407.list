
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edd0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800ef58  0800ef58  0001ef58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4bc  0800f4bc  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f4bc  0800f4bc  0001f4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4c4  0800f4c4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4c4  0800f4c4  0001f4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4c8  0800f4c8  0001f4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800f4cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a74  200001d8  0800f6a4  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000c4c  0800f6a4  00020c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026773  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050c4  00000000  00000000  0004697b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  0004ba40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018b8  00000000  00000000  0004d4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025db2  00000000  00000000  0004eda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024adc  00000000  00000000  00074b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d799c  00000000  00000000  0009962e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170fca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007444  00000000  00000000  00171020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d8 	.word	0x200001d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ef40 	.word	0x0800ef40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001dc 	.word	0x200001dc
 80001c4:	0800ef40 	.word	0x0800ef40

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b78:	f000 b96e 	b.w	8000e58 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	468c      	mov	ip, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 8083 	bne.w	8000caa <__udivmoddi4+0x116>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d947      	bls.n	8000c3a <__udivmoddi4+0xa6>
 8000baa:	fab2 f282 	clz	r2, r2
 8000bae:	b142      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	f1c2 0020 	rsb	r0, r2, #32
 8000bb4:	fa24 f000 	lsr.w	r0, r4, r0
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	4097      	lsls	r7, r2
 8000bbc:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bcc:	fa1f fe87 	uxth.w	lr, r7
 8000bd0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000be6:	f080 8119 	bcs.w	8000e1c <__udivmoddi4+0x288>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8116 	bls.w	8000e1c <__udivmoddi4+0x288>
 8000bf0:	3e02      	subs	r6, #2
 8000bf2:	443b      	add	r3, r7
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c12:	f080 8105 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000c16:	45a6      	cmp	lr, r4
 8000c18:	f240 8102 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	443c      	add	r4, r7
 8000c20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c24:	eba4 040e 	sub.w	r4, r4, lr
 8000c28:	2600      	movs	r6, #0
 8000c2a:	b11d      	cbz	r5, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c5 4300 	strd	r4, r3, [r5]
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	b902      	cbnz	r2, 8000c3e <__udivmoddi4+0xaa>
 8000c3c:	deff      	udf	#255	; 0xff
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d150      	bne.n	8000ce8 <__udivmoddi4+0x154>
 8000c46:	1bcb      	subs	r3, r1, r7
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	2601      	movs	r6, #1
 8000c52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c56:	0c21      	lsrs	r1, r4, #16
 8000c58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c60:	fb08 f30c 	mul.w	r3, r8, ip
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000c68:	1879      	adds	r1, r7, r1
 8000c6a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0xe2>
 8000c70:	428b      	cmp	r3, r1
 8000c72:	f200 80e9 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000c76:	4684      	mov	ip, r0
 8000c78:	1ac9      	subs	r1, r1, r3
 8000c7a:	b2a3      	uxth	r3, r4
 8000c7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c88:	fb08 f800 	mul.w	r8, r8, r0
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x10c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x10a>
 8000c98:	45a0      	cmp	r8, r4
 8000c9a:	f200 80d9 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	eba4 0408 	sub.w	r4, r4, r8
 8000ca4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca8:	e7bf      	b.n	8000c2a <__udivmoddi4+0x96>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0x12e>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80b1 	beq.w	8000e16 <__udivmoddi4+0x282>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x1cc>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0x140>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80b8 	bhi.w	8000e44 <__udivmoddi4+0x2b0>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	468c      	mov	ip, r1
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0a8      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000ce2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000ce8:	f1c2 0320 	rsb	r3, r2, #32
 8000cec:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf0:	4097      	lsls	r7, r2
 8000cf2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cf6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfa:	40d9      	lsrs	r1, r3
 8000cfc:	4330      	orrs	r0, r6
 8000cfe:	0c03      	lsrs	r3, r0, #16
 8000d00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d10:	fb06 f108 	mul.w	r1, r6, r8
 8000d14:	4299      	cmp	r1, r3
 8000d16:	fa04 f402 	lsl.w	r4, r4, r2
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x19c>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d22:	f080 808d 	bcs.w	8000e40 <__udivmoddi4+0x2ac>
 8000d26:	4299      	cmp	r1, r3
 8000d28:	f240 808a 	bls.w	8000e40 <__udivmoddi4+0x2ac>
 8000d2c:	3e02      	subs	r6, #2
 8000d2e:	443b      	add	r3, r7
 8000d30:	1a5b      	subs	r3, r3, r1
 8000d32:	b281      	uxth	r1, r0
 8000d34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d40:	fb00 f308 	mul.w	r3, r0, r8
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x1c4>
 8000d48:	1879      	adds	r1, r7, r1
 8000d4a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d4e:	d273      	bcs.n	8000e38 <__udivmoddi4+0x2a4>
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d971      	bls.n	8000e38 <__udivmoddi4+0x2a4>
 8000d54:	3802      	subs	r0, #2
 8000d56:	4439      	add	r1, r7
 8000d58:	1acb      	subs	r3, r1, r3
 8000d5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d5e:	e778      	b.n	8000c52 <__udivmoddi4+0xbe>
 8000d60:	f1c6 0c20 	rsb	ip, r6, #32
 8000d64:	fa03 f406 	lsl.w	r4, r3, r6
 8000d68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d6c:	431c      	orrs	r4, r3
 8000d6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	0c3b      	lsrs	r3, r7, #16
 8000d82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d86:	fa1f f884 	uxth.w	r8, r4
 8000d8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d92:	fb09 fa08 	mul.w	sl, r9, r8
 8000d96:	458a      	cmp	sl, r1
 8000d98:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x220>
 8000da2:	1861      	adds	r1, r4, r1
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000da8:	d248      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000daa:	458a      	cmp	sl, r1
 8000dac:	d946      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000dae:	f1a9 0902 	sub.w	r9, r9, #2
 8000db2:	4421      	add	r1, r4
 8000db4:	eba1 010a 	sub.w	r1, r1, sl
 8000db8:	b2bf      	uxth	r7, r7
 8000dba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dc6:	fb00 f808 	mul.w	r8, r0, r8
 8000dca:	45b8      	cmp	r8, r7
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x24a>
 8000dce:	19e7      	adds	r7, r4, r7
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d22e      	bcs.n	8000e34 <__udivmoddi4+0x2a0>
 8000dd6:	45b8      	cmp	r8, r7
 8000dd8:	d92c      	bls.n	8000e34 <__udivmoddi4+0x2a0>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	4427      	add	r7, r4
 8000dde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de2:	eba7 0708 	sub.w	r7, r7, r8
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	454f      	cmp	r7, r9
 8000dec:	46c6      	mov	lr, r8
 8000dee:	4649      	mov	r1, r9
 8000df0:	d31a      	bcc.n	8000e28 <__udivmoddi4+0x294>
 8000df2:	d017      	beq.n	8000e24 <__udivmoddi4+0x290>
 8000df4:	b15d      	cbz	r5, 8000e0e <__udivmoddi4+0x27a>
 8000df6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dfa:	eb67 0701 	sbc.w	r7, r7, r1
 8000dfe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e02:	40f2      	lsrs	r2, r6
 8000e04:	ea4c 0202 	orr.w	r2, ip, r2
 8000e08:	40f7      	lsrs	r7, r6
 8000e0a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e0e:	2600      	movs	r6, #0
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	462e      	mov	r6, r5
 8000e18:	4628      	mov	r0, r5
 8000e1a:	e70b      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	e6e9      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e20:	4618      	mov	r0, r3
 8000e22:	e6fd      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e24:	4543      	cmp	r3, r8
 8000e26:	d2e5      	bcs.n	8000df4 <__udivmoddi4+0x260>
 8000e28:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e2c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e30:	3801      	subs	r0, #1
 8000e32:	e7df      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e7d2      	b.n	8000dde <__udivmoddi4+0x24a>
 8000e38:	4660      	mov	r0, ip
 8000e3a:	e78d      	b.n	8000d58 <__udivmoddi4+0x1c4>
 8000e3c:	4681      	mov	r9, r0
 8000e3e:	e7b9      	b.n	8000db4 <__udivmoddi4+0x220>
 8000e40:	4666      	mov	r6, ip
 8000e42:	e775      	b.n	8000d30 <__udivmoddi4+0x19c>
 8000e44:	4630      	mov	r0, r6
 8000e46:	e74a      	b.n	8000cde <__udivmoddi4+0x14a>
 8000e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4c:	4439      	add	r1, r7
 8000e4e:	e713      	b.n	8000c78 <__udivmoddi4+0xe4>
 8000e50:	3802      	subs	r0, #2
 8000e52:	443c      	add	r4, r7
 8000e54:	e724      	b.n	8000ca0 <__udivmoddi4+0x10c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
	char digith = 0;;
 8000e62:	2300      	movs	r3, #0
 8000e64:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 8000e66:	f000 f853 	bl	8000f10 <read_one_digit_from_keyboard>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b23      	cmp	r3, #35	; 0x23
 8000e72:	d10a      	bne.n	8000e8a <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 8000e74:	221e      	movs	r2, #30
 8000e76:	2100      	movs	r1, #0
 8000e78:	4824      	ldr	r0, [pc, #144]	; (8000f0c <read_digits+0xb0>)
 8000e7a:	f00d ff7d 	bl	800ed78 <memset>
		keyboard.read_digits_position = 0;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <read_digits+0xb0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <read_digits+0xb0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8000e8e:	d109      	bne.n	8000ea4 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <read_digits+0xb0>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 8000e98:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <read_digits+0xb0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <read_digits+0xb0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d028      	beq.n	8000efc <read_digits+0xa0>
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b23      	cmp	r3, #35	; 0x23
 8000eae:	d025      	beq.n	8000efc <read_digits+0xa0>
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8000eb4:	d022      	beq.n	8000efc <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <read_digits+0xb0>)
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <read_digits+0xb0>)
 8000ebc:	7f92      	ldrb	r2, [r2, #30]
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	dc11      	bgt.n	8000ee6 <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <read_digits+0xb0>)
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	4911      	ldr	r1, [pc, #68]	; (8000f0c <read_digits+0xb0>)
 8000ec8:	79fa      	ldrb	r2, [r7, #7]
 8000eca:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <read_digits+0xb0>)
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <read_digits+0xb0>)
 8000ed4:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <read_digits+0xb0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <read_digits+0xb0>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000ee4:	e00e      	b.n	8000f04 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <read_digits+0xb0>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <read_digits+0xb0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <read_digits+0xb0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000efa:	e003      	b.n	8000f04 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <read_digits+0xb0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	77da      	strb	r2, [r3, #31]
	}
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2000020c 	.word	0x2000020c

08000f10 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
	char digit = '\0';
 8000f16:	2300      	movs	r3, #0
 8000f18:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f20:	48cf      	ldr	r0, [pc, #828]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f22:	f004 fd25 	bl	8005970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2c:	48cc      	ldr	r0, [pc, #816]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f2e:	f004 fd1f 	bl	8005970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f38:	48c9      	ldr	r0, [pc, #804]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f3a:	f004 fd19 	bl	8005970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f44:	48c6      	ldr	r0, [pc, #792]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f46:	f004 fd13 	bl	8005970 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000f4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f4e:	48c5      	ldr	r0, [pc, #788]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8000f50:	f004 fcf6 	bl	8005940 <HAL_GPIO_ReadPin>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d169      	bne.n	800102e <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f60:	48bf      	ldr	r0, [pc, #764]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f62:	f004 fd05 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	48bc      	ldr	r0, [pc, #752]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f6e:	f004 fcff 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f78:	48b9      	ldr	r0, [pc, #740]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f7a:	f004 fcf9 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f84:	48b6      	ldr	r0, [pc, #728]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f86:	f004 fcf3 	bl	8005970 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000f8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8e:	48b5      	ldr	r0, [pc, #724]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8000f90:	f004 fcd6 	bl	8005940 <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 8000f9a:	2331      	movs	r3, #49	; 0x31
 8000f9c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa4:	48ae      	ldr	r0, [pc, #696]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000fa6:	f004 fce3 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb0:	48ab      	ldr	r0, [pc, #684]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000fb2:	f004 fcdd 	bl	8005970 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000fb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fba:	48aa      	ldr	r0, [pc, #680]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8000fbc:	f004 fcc0 	bl	8005940 <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 8000fc6:	2334      	movs	r3, #52	; 0x34
 8000fc8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd0:	48a3      	ldr	r0, [pc, #652]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000fd2:	f004 fccd 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fdc:	48a0      	ldr	r0, [pc, #640]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000fde:	f004 fcc7 	bl	8005970 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000fe2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe6:	489f      	ldr	r0, [pc, #636]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8000fe8:	f004 fcaa 	bl	8005940 <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 8000ff2:	2337      	movs	r3, #55	; 0x37
 8000ff4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffc:	4898      	ldr	r0, [pc, #608]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000ffe:	f004 fcb7 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001008:	4895      	ldr	r0, [pc, #596]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800100a:	f004 fcb1 	bl	8005970 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800100e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001012:	4894      	ldr	r0, [pc, #592]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8001014:	f004 fc94 	bl	8005940 <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 800101e:	232a      	movs	r3, #42	; 0x2a
 8001020:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001028:	488d      	ldr	r0, [pc, #564]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800102a:	f004 fca1 	bl	8005970 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001034:	488a      	ldr	r0, [pc, #552]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001036:	f004 fc9b 	bl	8005970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001040:	4887      	ldr	r0, [pc, #540]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001042:	f004 fc95 	bl	8005970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104c:	4884      	ldr	r0, [pc, #528]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800104e:	f004 fc8f 	bl	8005970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001058:	4881      	ldr	r0, [pc, #516]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800105a:	f004 fc89 	bl	8005970 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 800105e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001062:	4880      	ldr	r0, [pc, #512]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8001064:	f004 fc6c 	bl	8005940 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d169      	bne.n	8001142 <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001074:	487a      	ldr	r0, [pc, #488]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001076:	f004 fc7b 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001080:	4877      	ldr	r0, [pc, #476]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001082:	f004 fc75 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
 8001088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108c:	4874      	ldr	r0, [pc, #464]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800108e:	f004 fc6f 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001098:	4871      	ldr	r0, [pc, #452]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800109a:	f004 fc69 	bl	8005970 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800109e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a2:	4870      	ldr	r0, [pc, #448]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 80010a4:	f004 fc4c 	bl	8005940 <HAL_GPIO_ReadPin>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 80010ae:	2332      	movs	r3, #50	; 0x32
 80010b0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b8:	4869      	ldr	r0, [pc, #420]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80010ba:	f004 fc59 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c4:	4866      	ldr	r0, [pc, #408]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80010c6:	f004 fc53 	bl	8005970 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80010ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ce:	4865      	ldr	r0, [pc, #404]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 80010d0:	f004 fc36 	bl	8005940 <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 80010da:	2335      	movs	r3, #53	; 0x35
 80010dc:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e4:	485e      	ldr	r0, [pc, #376]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80010e6:	f004 fc43 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f0:	485b      	ldr	r0, [pc, #364]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80010f2:	f004 fc3d 	bl	8005970 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80010f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fa:	485a      	ldr	r0, [pc, #360]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 80010fc:	f004 fc20 	bl	8005940 <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 8001106:	2338      	movs	r3, #56	; 0x38
 8001108:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001110:	4853      	ldr	r0, [pc, #332]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001112:	f004 fc2d 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111c:	4850      	ldr	r0, [pc, #320]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800111e:	f004 fc27 	bl	8005970 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001126:	484f      	ldr	r0, [pc, #316]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8001128:	f004 fc0a 	bl	8005940 <HAL_GPIO_ReadPin>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 8001132:	2330      	movs	r3, #48	; 0x30
 8001134:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113c:	4848      	ldr	r0, [pc, #288]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800113e:	f004 fc17 	bl	8005970 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001148:	4845      	ldr	r0, [pc, #276]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800114a:	f004 fc11 	bl	8005970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001154:	4842      	ldr	r0, [pc, #264]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001156:	f004 fc0b 	bl	8005970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001160:	483f      	ldr	r0, [pc, #252]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001162:	f004 fc05 	bl	8005970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	483c      	ldr	r0, [pc, #240]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800116e:	f004 fbff 	bl	8005970 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001172:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001176:	483c      	ldr	r0, [pc, #240]	; (8001268 <read_one_digit_from_keyboard+0x358>)
 8001178:	f004 fbe2 	bl	8005940 <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d169      	bne.n	8001256 <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001188:	4835      	ldr	r0, [pc, #212]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800118a:	f004 fbf1 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800118e:	2201      	movs	r2, #1
 8001190:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001194:	4832      	ldr	r0, [pc, #200]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001196:	f004 fbeb 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a0:	482f      	ldr	r0, [pc, #188]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80011a2:	f004 fbe5 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ac:	482c      	ldr	r0, [pc, #176]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80011ae:	f004 fbdf 	bl	8005970 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80011b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b6:	482c      	ldr	r0, [pc, #176]	; (8001268 <read_one_digit_from_keyboard+0x358>)
 80011b8:	f004 fbc2 	bl	8005940 <HAL_GPIO_ReadPin>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 80011c2:	2333      	movs	r3, #51	; 0x33
 80011c4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011cc:	4824      	ldr	r0, [pc, #144]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80011ce:	f004 fbcf 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d8:	4821      	ldr	r0, [pc, #132]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80011da:	f004 fbc9 	bl	8005970 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80011de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e2:	4821      	ldr	r0, [pc, #132]	; (8001268 <read_one_digit_from_keyboard+0x358>)
 80011e4:	f004 fbac 	bl	8005940 <HAL_GPIO_ReadPin>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 80011ee:	2336      	movs	r3, #54	; 0x36
 80011f0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f8:	4819      	ldr	r0, [pc, #100]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80011fa:	f004 fbb9 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001204:	4816      	ldr	r0, [pc, #88]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001206:	f004 fbb3 	bl	8005970 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800120a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120e:	4816      	ldr	r0, [pc, #88]	; (8001268 <read_one_digit_from_keyboard+0x358>)
 8001210:	f004 fb96 	bl	8005940 <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 800121a:	2339      	movs	r3, #57	; 0x39
 800121c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001224:	480e      	ldr	r0, [pc, #56]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001226:	f004 fba3 	bl	8005970 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001230:	480b      	ldr	r0, [pc, #44]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001232:	f004 fb9d 	bl	8005970 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001236:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800123a:	480b      	ldr	r0, [pc, #44]	; (8001268 <read_one_digit_from_keyboard+0x358>)
 800123c:	f004 fb80 	bl	8005940 <HAL_GPIO_ReadPin>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 8001246:	2323      	movs	r3, #35	; 0x23
 8001248:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001252:	f004 fb8d 	bl	8005970 <HAL_GPIO_WritePin>
	}
	return digit;
 8001256:	79fb      	ldrb	r3, [r7, #7]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40020400 	.word	0x40020400
 8001268:	40021000 	.word	0x40021000

0800126c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001272:	f004 f821 	bl	80052b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001276:	f000 f841 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127a:	f000 faf3 	bl	8001864 <MX_GPIO_Init>
  MX_I2S3_Init();
 800127e:	f000 f927 	bl	80014d0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001282:	f000 f969 	bl	8001558 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001286:	f00d fa27 	bl	800e6d8 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 800128a:	f000 fa29 	bl	80016e0 <MX_TIM2_Init>
  MX_SPI2_Init();
 800128e:	f000 f999 	bl	80015c4 <MX_SPI2_Init>
  MX_RNG_Init();
 8001292:	f000 f94d 	bl	8001530 <MX_RNG_Init>
  MX_TIM3_Init();
 8001296:	f000 fa71 	bl	800177c <MX_TIM3_Init>
  MX_TIM1_Init();
 800129a:	f000 f9c9 	bl	8001630 <MX_TIM1_Init>
  MX_I2C3_Init();
 800129e:	f000 f8e9 	bl	8001474 <MX_I2C3_Init>
  MX_I2C2_Init();
 80012a2:	f000 f8b9 	bl	8001418 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80012a6:	f000 f8ab 	bl	8001400 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 80012aa:	f001 fa0b 	bl	80026c4 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f001 fbae 	bl	8002a10 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 80012b4:	2003      	movs	r0, #3
 80012b6:	f001 f9a7 	bl	8002608 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 80012ba:	2000      	movs	r0, #0
 80012bc:	f001 fba8 	bl	8002a10 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 80012c0:	2364      	movs	r3, #100	; 0x64
 80012c2:	607b      	str	r3, [r7, #4]
  speed_test_LCD(number_of_tests);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f002 fa6f 	bl	80037a8 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f001 fba0 	bl	8002a10 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 80012d0:	4808      	ldr	r0, [pc, #32]	; (80012f4 <main+0x88>)
 80012d2:	f009 fac7 	bl	800a864 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80012d6:	2100      	movs	r1, #0
 80012d8:	4806      	ldr	r0, [pc, #24]	; (80012f4 <main+0x88>)
 80012da:	f009 fb33 	bl	800a944 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <main+0x8c>)
 80012e0:	220a      	movs	r2, #10
 80012e2:	779a      	strb	r2, [r3, #30]
  // Encoder /////////////////////////////////////////
//  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
//  int32_t prevCounter = 0;
  ////////////////////////////////////////////////////

   detect_all_sensors();			// Detect all devices which connected to i2c2 and i2c3
 80012e4:	f003 fd46 	bl	8004d74 <detect_all_sensors>
	  /////////////////////////////////////////////////////////////////


	  //I2C_3_scaner();

	 menu();
 80012e8:	f001 fcdc 	bl	8002ca4 <menu>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80012ec:	f00d fa1a 	bl	800e724 <MX_USB_HOST_Process>
	 menu();
 80012f0:	e7fa      	b.n	80012e8 <main+0x7c>
 80012f2:	bf00      	nop
 80012f4:	20000334 	.word	0x20000334
 80012f8:	2000020c 	.word	0x2000020c

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b098      	sub	sp, #96	; 0x60
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001306:	2230      	movs	r2, #48	; 0x30
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f00d fd34 	bl	800ed78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <SystemClock_Config+0xfc>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a30      	ldr	r2, [pc, #192]	; (80013f8 <SystemClock_Config+0xfc>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <SystemClock_Config+0xfc>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <SystemClock_Config+0x100>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a2a      	ldr	r2, [pc, #168]	; (80013fc <SystemClock_Config+0x100>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b28      	ldr	r3, [pc, #160]	; (80013fc <SystemClock_Config+0x100>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001366:	2301      	movs	r3, #1
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001370:	2302      	movs	r3, #2
 8001372:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001374:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001378:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800137a:	2308      	movs	r3, #8
 800137c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800137e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001382:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001384:	2302      	movs	r3, #2
 8001386:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001388:	2307      	movs	r3, #7
 800138a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001390:	4618      	mov	r0, r3
 8001392:	f008 f959 	bl	8009648 <HAL_RCC_OscConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800139c:	f000 fbca 	bl	8001b34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a0:	230f      	movs	r3, #15
 80013a2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a4:	2302      	movs	r3, #2
 80013a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	2105      	movs	r1, #5
 80013be:	4618      	mov	r0, r3
 80013c0:	f008 fbba 	bl	8009b38 <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013ca:	f000 fbb3 	bl	8001b34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013ce:	2301      	movs	r3, #1
 80013d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80013d2:	23c0      	movs	r3, #192	; 0xc0
 80013d4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	4618      	mov	r0, r3
 80013e0:	f008 fd92 	bl	8009f08 <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80013ea:	f000 fba3 	bl	8001b34 <Error_Handler>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3760      	adds	r7, #96	; 0x60
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40007000 	.word	0x40007000

08001400 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2100      	movs	r1, #0
 8001408:	201c      	movs	r0, #28
 800140a:	f004 f8c6 	bl	800559a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800140e:	201c      	movs	r0, #28
 8001410:	f004 f8df 	bl	80055d2 <HAL_NVIC_EnableIRQ>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_I2C2_Init+0x50>)
 800141e:	4a13      	ldr	r2, [pc, #76]	; (800146c <MX_I2C2_Init+0x54>)
 8001420:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_I2C2_Init+0x50>)
 8001424:	4a12      	ldr	r2, [pc, #72]	; (8001470 <MX_I2C2_Init+0x58>)
 8001426:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_I2C2_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_I2C2_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_I2C2_Init+0x50>)
 8001436:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800143a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <MX_I2C2_Init+0x50>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_I2C2_Init+0x50>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <MX_I2C2_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_I2C2_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_I2C2_Init+0x50>)
 8001456:	f006 f823 	bl	80074a0 <HAL_I2C_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001460:	f000 fb68 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200002e0 	.word	0x200002e0
 800146c:	40005800 	.word	0x40005800
 8001470:	000186a0 	.word	0x000186a0

08001474 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_I2C3_Init+0x50>)
 800147a:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <MX_I2C3_Init+0x54>)
 800147c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_I2C3_Init+0x50>)
 8001480:	4a12      	ldr	r2, [pc, #72]	; (80014cc <MX_I2C3_Init+0x58>)
 8001482:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_I2C3_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_I2C3_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_I2C3_Init+0x50>)
 8001492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001496:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MX_I2C3_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_I2C3_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <MX_I2C3_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_I2C3_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_I2C3_Init+0x50>)
 80014b2:	f005 fff5 	bl	80074a0 <HAL_I2C_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014bc:	f000 fb3a 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000234 	.word	0x20000234
 80014c8:	40005c00 	.word	0x40005c00
 80014cc:	000186a0 	.word	0x000186a0

080014d0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <MX_I2S3_Init+0x54>)
 80014d6:	4a14      	ldr	r2, [pc, #80]	; (8001528 <MX_I2S3_Init+0x58>)
 80014d8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <MX_I2S3_Init+0x54>)
 80014dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <MX_I2S3_Init+0x54>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_I2S3_Init+0x54>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <MX_I2S3_Init+0x54>)
 80014f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <MX_I2S3_Init+0x54>)
 80014f8:	4a0c      	ldr	r2, [pc, #48]	; (800152c <MX_I2S3_Init+0x5c>)
 80014fa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_I2S3_Init+0x54>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_I2S3_Init+0x54>)
 8001504:	2200      	movs	r2, #0
 8001506:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_I2S3_Init+0x54>)
 800150a:	2200      	movs	r2, #0
 800150c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_I2S3_Init+0x54>)
 8001510:	f007 fbfa 	bl	8008d08 <HAL_I2S_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800151a:	f000 fb0b 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000474 	.word	0x20000474
 8001528:	40003c00 	.word	0x40003c00
 800152c:	00017700 	.word	0x00017700

08001530 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_RNG_Init+0x20>)
 8001536:	4a07      	ldr	r2, [pc, #28]	; (8001554 <MX_RNG_Init+0x24>)
 8001538:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_RNG_Init+0x20>)
 800153c:	f008 fe24 	bl	800a188 <HAL_RNG_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001546:	f000 faf5 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200003c4 	.word	0x200003c4
 8001554:	50060800 	.word	0x50060800

08001558 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <MX_SPI1_Init+0x64>)
 800155e:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <MX_SPI1_Init+0x68>)
 8001560:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <MX_SPI1_Init+0x64>)
 8001564:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001568:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MX_SPI1_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <MX_SPI1_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_SPI1_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_SPI1_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_SPI1_Init+0x64>)
 8001584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001588:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_SPI1_Init+0x64>)
 800158c:	2200      	movs	r2, #0
 800158e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <MX_SPI1_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_SPI1_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <MX_SPI1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_SPI1_Init+0x64>)
 80015a4:	220a      	movs	r2, #10
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <MX_SPI1_Init+0x64>)
 80015aa:	f008 fe7b 	bl	800a2a4 <HAL_SPI_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015b4:	f000 fabe 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200003d4 	.word	0x200003d4
 80015c0:	40013000 	.word	0x40013000

080015c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <MX_SPI2_Init+0x64>)
 80015ca:	4a18      	ldr	r2, [pc, #96]	; (800162c <MX_SPI2_Init+0x68>)
 80015cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015ce:	4b16      	ldr	r3, [pc, #88]	; (8001628 <MX_SPI2_Init+0x64>)
 80015d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <MX_SPI2_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <MX_SPI2_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_SPI2_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_SPI2_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_SPI2_Init+0x64>)
 80015f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_SPI2_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <MX_SPI2_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_SPI2_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <MX_SPI2_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_SPI2_Init+0x64>)
 8001610:	220a      	movs	r2, #10
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <MX_SPI2_Init+0x64>)
 8001616:	f008 fe45 	bl	800a2a4 <HAL_SPI_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001620:	f000 fa88 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000288 	.word	0x20000288
 800162c:	40003800 	.word	0x40003800

08001630 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	2224      	movs	r2, #36	; 0x24
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f00d fb9a 	bl	800ed78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <MX_TIM1_Init+0xa8>)
 800164e:	4a23      	ldr	r2, [pc, #140]	; (80016dc <MX_TIM1_Init+0xac>)
 8001650:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <MX_TIM1_Init+0xa8>)
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <MX_TIM1_Init+0xa8>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <MX_TIM1_Init+0xa8>)
 8001660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001664:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <MX_TIM1_Init+0xa8>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <MX_TIM1_Init+0xa8>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <MX_TIM1_Init+0xa8>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001678:	2301      	movs	r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800167c:	2300      	movs	r3, #0
 800167e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001680:	2301      	movs	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001690:	2301      	movs	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001694:	2300      	movs	r3, #0
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	4619      	mov	r1, r3
 80016a2:	480d      	ldr	r0, [pc, #52]	; (80016d8 <MX_TIM1_Init+0xa8>)
 80016a4:	f009 fab5 	bl	800ac12 <HAL_TIM_Encoder_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80016ae:	f000 fa41 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	4619      	mov	r1, r3
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <MX_TIM1_Init+0xa8>)
 80016c0:	f00a f91a 	bl	800b8f8 <HAL_TIMEx_MasterConfigSynchronization>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80016ca:	f000 fa33 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	3730      	adds	r7, #48	; 0x30
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000037c 	.word	0x2000037c
 80016dc:	40010000 	.word	0x40010000

080016e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f4:	463b      	mov	r3, r7
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <MX_TIM2_Init+0x98>)
 80016fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001702:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <MX_TIM2_Init+0x98>)
 8001706:	f240 3247 	movw	r2, #839	; 0x347
 800170a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MX_TIM2_Init+0x98>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <MX_TIM2_Init+0x98>)
 8001714:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001718:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_TIM2_Init+0x98>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <MX_TIM2_Init+0x98>)
 8001722:	2280      	movs	r2, #128	; 0x80
 8001724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001726:	4814      	ldr	r0, [pc, #80]	; (8001778 <MX_TIM2_Init+0x98>)
 8001728:	f009 f84c 	bl	800a7c4 <HAL_TIM_Base_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001732:	f000 f9ff 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	4619      	mov	r1, r3
 8001742:	480d      	ldr	r0, [pc, #52]	; (8001778 <MX_TIM2_Init+0x98>)
 8001744:	f009 fcd2 	bl	800b0ec <HAL_TIM_ConfigClockSource>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800174e:	f000 f9f1 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001752:	2310      	movs	r3, #16
 8001754:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800175a:	463b      	mov	r3, r7
 800175c:	4619      	mov	r1, r3
 800175e:	4806      	ldr	r0, [pc, #24]	; (8001778 <MX_TIM2_Init+0x98>)
 8001760:	f00a f8ca 	bl	800b8f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800176a:	f000 f9e3 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000042c 	.word	0x2000042c

0800177c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001790:	f107 0320 	add.w	r3, r7, #32
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	615a      	str	r2, [r3, #20]
 80017aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ac:	4b2b      	ldr	r3, [pc, #172]	; (800185c <MX_TIM3_Init+0xe0>)
 80017ae:	4a2c      	ldr	r2, [pc, #176]	; (8001860 <MX_TIM3_Init+0xe4>)
 80017b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <MX_TIM3_Init+0xe0>)
 80017b4:	f640 0233 	movw	r2, #2099	; 0x833
 80017b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <MX_TIM3_Init+0xe0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80017c0:	4b26      	ldr	r3, [pc, #152]	; (800185c <MX_TIM3_Init+0xe0>)
 80017c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80017c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <MX_TIM3_Init+0xe0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <MX_TIM3_Init+0xe0>)
 80017d0:	2280      	movs	r2, #128	; 0x80
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017d4:	4821      	ldr	r0, [pc, #132]	; (800185c <MX_TIM3_Init+0xe0>)
 80017d6:	f008 fff5 	bl	800a7c4 <HAL_TIM_Base_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80017e0:	f000 f9a8 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ee:	4619      	mov	r1, r3
 80017f0:	481a      	ldr	r0, [pc, #104]	; (800185c <MX_TIM3_Init+0xe0>)
 80017f2:	f009 fc7b 	bl	800b0ec <HAL_TIM_ConfigClockSource>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80017fc:	f000 f99a 	bl	8001b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001800:	4816      	ldr	r0, [pc, #88]	; (800185c <MX_TIM3_Init+0xe0>)
 8001802:	f009 f9ad 	bl	800ab60 <HAL_TIM_PWM_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800180c:	f000 f992 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001818:	f107 0320 	add.w	r3, r7, #32
 800181c:	4619      	mov	r1, r3
 800181e:	480f      	ldr	r0, [pc, #60]	; (800185c <MX_TIM3_Init+0xe0>)
 8001820:	f00a f86a 	bl	800b8f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800182a:	f000 f983 	bl	8001b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182e:	2360      	movs	r3, #96	; 0x60
 8001830:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	2200      	movs	r2, #0
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_TIM3_Init+0xe0>)
 8001846:	f009 fb93 	bl	800af70 <HAL_TIM_PWM_ConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001850:	f000 f970 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	3738      	adds	r7, #56	; 0x38
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000334 	.word	0x20000334
 8001860:	40000400 	.word	0x40000400

08001864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	4ba6      	ldr	r3, [pc, #664]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4aa5      	ldr	r2, [pc, #660]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 8001884:	f043 0310 	orr.w	r3, r3, #16
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4ba3      	ldr	r3, [pc, #652]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	4b9f      	ldr	r3, [pc, #636]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a9e      	ldr	r2, [pc, #632]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b9c      	ldr	r3, [pc, #624]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b98      	ldr	r3, [pc, #608]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a97      	ldr	r2, [pc, #604]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b95      	ldr	r3, [pc, #596]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b91      	ldr	r3, [pc, #580]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a90      	ldr	r2, [pc, #576]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b8e      	ldr	r3, [pc, #568]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	4b8a      	ldr	r3, [pc, #552]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a89      	ldr	r2, [pc, #548]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b87      	ldr	r3, [pc, #540]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	4b83      	ldr	r3, [pc, #524]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a82      	ldr	r2, [pc, #520]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b80      	ldr	r3, [pc, #512]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8001922:	2200      	movs	r2, #0
 8001924:	217c      	movs	r1, #124	; 0x7c
 8001926:	487d      	ldr	r0, [pc, #500]	; (8001b1c <MX_GPIO_Init+0x2b8>)
 8001928:	f004 f822 	bl	8005970 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800192c:	2201      	movs	r2, #1
 800192e:	2101      	movs	r1, #1
 8001930:	487b      	ldr	r0, [pc, #492]	; (8001b20 <MX_GPIO_Init+0x2bc>)
 8001932:	f004 f81d 	bl	8005970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001936:	2200      	movs	r2, #0
 8001938:	f64f 7110 	movw	r1, #65296	; 0xff10
 800193c:	4879      	ldr	r0, [pc, #484]	; (8001b24 <MX_GPIO_Init+0x2c0>)
 800193e:	f004 f817 	bl	8005970 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001948:	4875      	ldr	r0, [pc, #468]	; (8001b20 <MX_GPIO_Init+0x2bc>)
 800194a:	f004 f811 	bl	8005970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001954:	4874      	ldr	r0, [pc, #464]	; (8001b28 <MX_GPIO_Init+0x2c4>)
 8001956:	f004 f80b 	bl	8005970 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 800195a:	2374      	movs	r3, #116	; 0x74
 800195c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	4619      	mov	r1, r3
 8001970:	486a      	ldr	r0, [pc, #424]	; (8001b1c <MX_GPIO_Init+0x2b8>)
 8001972:	f003 fe49 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001976:	2308      	movs	r3, #8
 8001978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	4619      	mov	r1, r3
 800198c:	4863      	ldr	r0, [pc, #396]	; (8001b1c <MX_GPIO_Init+0x2b8>)
 800198e:	f003 fe3b 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	485e      	ldr	r0, [pc, #376]	; (8001b20 <MX_GPIO_Init+0x2bc>)
 80019a8:	f003 fe2e 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 80019ac:	f640 0341 	movw	r3, #2113	; 0x841
 80019b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b2:	2301      	movs	r3, #1
 80019b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	4856      	ldr	r0, [pc, #344]	; (8001b20 <MX_GPIO_Init+0x2bc>)
 80019c6:	f003 fe1f 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80019ca:	2308      	movs	r3, #8
 80019cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019da:	2305      	movs	r3, #5
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	484e      	ldr	r0, [pc, #312]	; (8001b20 <MX_GPIO_Init+0x2bc>)
 80019e6:	f003 fe0f 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019ea:	2301      	movs	r3, #1
 80019ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019ee:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <MX_GPIO_Init+0x2c8>)
 80019f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	4619      	mov	r1, r3
 80019fc:	484c      	ldr	r0, [pc, #304]	; (8001b30 <MX_GPIO_Init+0x2cc>)
 80019fe:	f003 fe03 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a02:	2304      	movs	r3, #4
 8001a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4844      	ldr	r0, [pc, #272]	; (8001b28 <MX_GPIO_Init+0x2c4>)
 8001a16:	f003 fdf7 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTION_SENSOR_9960_Pin KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = MOTION_SENSOR_9960_Pin|KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 8001a1a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	483b      	ldr	r0, [pc, #236]	; (8001b1c <MX_GPIO_Init+0x2b8>)
 8001a30:	f003 fdea 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001a34:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	4837      	ldr	r0, [pc, #220]	; (8001b28 <MX_GPIO_Init+0x2c4>)
 8001a4a:	f003 fddd 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001a4e:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001a52:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	4619      	mov	r1, r3
 8001a66:	482f      	ldr	r0, [pc, #188]	; (8001b24 <MX_GPIO_Init+0x2c0>)
 8001a68:	f003 fdce 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4829      	ldr	r0, [pc, #164]	; (8001b24 <MX_GPIO_Init+0x2c0>)
 8001a80:	f003 fdc2 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a84:	2340      	movs	r3, #64	; 0x40
 8001a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4823      	ldr	r0, [pc, #140]	; (8001b28 <MX_GPIO_Init+0x2c4>)
 8001a9c:	f003 fdb4 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001aa0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	481b      	ldr	r0, [pc, #108]	; (8001b28 <MX_GPIO_Init+0x2c4>)
 8001aba:	f003 fda5 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac4:	2312      	movs	r3, #18
 8001ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4813      	ldr	r0, [pc, #76]	; (8001b28 <MX_GPIO_Init+0x2c4>)
 8001adc:	f003 fd94 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	480a      	ldr	r0, [pc, #40]	; (8001b1c <MX_GPIO_Init+0x2b8>)
 8001af4:	f003 fd88 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001af8:	2302      	movs	r3, #2
 8001afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <MX_GPIO_Init+0x2c8>)
 8001afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4804      	ldr	r0, [pc, #16]	; (8001b1c <MX_GPIO_Init+0x2b8>)
 8001b0c:	f003 fd7c 	bl	8005608 <HAL_GPIO_Init>

}
 8001b10:	bf00      	nop
 8001b12:	3730      	adds	r7, #48	; 0x30
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40020800 	.word	0x40020800
 8001b24:	40020c00 	.word	0x40020c00
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	10120000 	.word	0x10120000
 8001b30:	40020000 	.word	0x40020000

08001b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <Error_Handler+0x8>
	...

08001b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b7e:	2007      	movs	r0, #7
 8001b80:	f003 fd00 	bl	8005584 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	2005      	movs	r0, #5
 8001b8a:	f003 fd06 	bl	800559a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b8e:	2005      	movs	r0, #5
 8001b90:	f003 fd1f 	bl	80055d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	; 0x30
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a42      	ldr	r2, [pc, #264]	; (8001cc8 <HAL_I2C_MspInit+0x128>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d12d      	bne.n	8001c1e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a40      	ldr	r2, [pc, #256]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be4:	2312      	movs	r3, #18
 8001be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4835      	ldr	r0, [pc, #212]	; (8001cd0 <HAL_I2C_MspInit+0x130>)
 8001bfc:	f003 fd04 	bl	8005608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	4a30      	ldr	r2, [pc, #192]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c10:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c1c:	e050      	b.n	8001cc0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a2c      	ldr	r2, [pc, #176]	; (8001cd4 <HAL_I2C_MspInit+0x134>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d14b      	bne.n	8001cc0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c32:	f043 0304 	orr.w	r3, r3, #4
 8001c36:	6313      	str	r3, [r2, #48]	; 0x30
 8001c38:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6313      	str	r3, [r2, #48]	; 0x30
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c66:	2312      	movs	r3, #18
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c72:	2304      	movs	r3, #4
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4816      	ldr	r0, [pc, #88]	; (8001cd8 <HAL_I2C_MspInit+0x138>)
 8001c7e:	f003 fcc3 	bl	8005608 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c88:	2312      	movs	r3, #18
 8001c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c94:	2304      	movs	r3, #4
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	480f      	ldr	r0, [pc, #60]	; (8001cdc <HAL_I2C_MspInit+0x13c>)
 8001ca0:	f003 fcb2 	bl	8005608 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	4a07      	ldr	r2, [pc, #28]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001cae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
}
 8001cc0:	bf00      	nop
 8001cc2:	3730      	adds	r7, #48	; 0x30
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40005800 	.word	0x40005800
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40005c00 	.word	0x40005c00
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020000 	.word	0x40020000

08001ce0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a28      	ldr	r2, [pc, #160]	; (8001da0 <HAL_I2S_MspInit+0xc0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d14a      	bne.n	8001d98 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	4a26      	ldr	r2, [pc, #152]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d10:	6413      	str	r3, [r2, #64]	; 0x40
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a1f      	ldr	r2, [pc, #124]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a18      	ldr	r2, [pc, #96]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d56:	2310      	movs	r3, #16
 8001d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d66:	2306      	movs	r3, #6
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480d      	ldr	r0, [pc, #52]	; (8001da8 <HAL_I2S_MspInit+0xc8>)
 8001d72:	f003 fc49 	bl	8005608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001d76:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d88:	2306      	movs	r3, #6
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <HAL_I2S_MspInit+0xcc>)
 8001d94:	f003 fc38 	bl	8005608 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d98:	bf00      	nop
 8001d9a:	3728      	adds	r7, #40	; 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40003c00 	.word	0x40003c00
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020000 	.word	0x40020000
 8001dac:	40020800 	.word	0x40020800

08001db0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <HAL_RNG_MspInit+0x3c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d10d      	bne.n	8001dde <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_RNG_MspInit+0x40>)
 8001dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dca:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <HAL_RNG_MspInit+0x40>)
 8001dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd0:	6353      	str	r3, [r2, #52]	; 0x34
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <HAL_RNG_MspInit+0x40>)
 8001dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	50060800 	.word	0x50060800
 8001df0:	40023800 	.word	0x40023800

08001df4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08c      	sub	sp, #48	; 0x30
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a41      	ldr	r2, [pc, #260]	; (8001f18 <HAL_SPI_MspInit+0x124>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d12c      	bne.n	8001e70 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	4b40      	ldr	r3, [pc, #256]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	4a3f      	ldr	r2, [pc, #252]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	4b39      	ldr	r3, [pc, #228]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a38      	ldr	r2, [pc, #224]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b36      	ldr	r3, [pc, #216]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001e4e:	23e0      	movs	r3, #224	; 0xe0
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e5e:	2305      	movs	r3, #5
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4619      	mov	r1, r3
 8001e68:	482d      	ldr	r0, [pc, #180]	; (8001f20 <HAL_SPI_MspInit+0x12c>)
 8001e6a:	f003 fbcd 	bl	8005608 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e6e:	e04f      	b.n	8001f10 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a2b      	ldr	r2, [pc, #172]	; (8001f24 <HAL_SPI_MspInit+0x130>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d14a      	bne.n	8001f10 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a26      	ldr	r2, [pc, #152]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a1f      	ldr	r2, [pc, #124]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001ea0:	f043 0304 	orr.w	r3, r3, #4
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eda:	2303      	movs	r3, #3
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ede:	2305      	movs	r3, #5
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee2:	f107 031c 	add.w	r3, r7, #28
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480f      	ldr	r0, [pc, #60]	; (8001f28 <HAL_SPI_MspInit+0x134>)
 8001eea:	f003 fb8d 	bl	8005608 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001eee:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efc:	2303      	movs	r3, #3
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f00:	2305      	movs	r3, #5
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4808      	ldr	r0, [pc, #32]	; (8001f2c <HAL_SPI_MspInit+0x138>)
 8001f0c:	f003 fb7c 	bl	8005608 <HAL_GPIO_Init>
}
 8001f10:	bf00      	nop
 8001f12:	3730      	adds	r7, #48	; 0x30
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40013000 	.word	0x40013000
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40003800 	.word	0x40003800
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40020400 	.word	0x40020400

08001f30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	; 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d12c      	bne.n	8001fac <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	4a17      	ldr	r2, [pc, #92]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6453      	str	r3, [r2, #68]	; 0x44
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a10      	ldr	r2, [pc, #64]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f78:	f043 0310 	orr.w	r3, r3, #16
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001f8a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f94:	2301      	movs	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <HAL_TIM_Encoder_MspInit+0x8c>)
 8001fa8:	f003 fb2e 	bl	8005608 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fac:	bf00      	nop
 8001fae:	3728      	adds	r7, #40	; 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40010000 	.word	0x40010000
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_TIM_Base_MspInit+0x70>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a15      	ldr	r2, [pc, #84]	; (8002030 <HAL_TIM_Base_MspInit+0x70>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_TIM_Base_MspInit+0x70>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fee:	e01a      	b.n	8002026 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <HAL_TIM_Base_MspInit+0x74>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d115      	bne.n	8002026 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_TIM_Base_MspInit+0x70>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <HAL_TIM_Base_MspInit+0x70>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_TIM_Base_MspInit+0x70>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	201d      	movs	r0, #29
 800201c:	f003 fabd 	bl	800559a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002020:	201d      	movs	r0, #29
 8002022:	f003 fad6 	bl	80055d2 <HAL_NVIC_EnableIRQ>
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800
 8002034:	40000400 	.word	0x40000400

08002038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800203c:	e7fe      	b.n	800203c <NMI_Handler+0x4>

0800203e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <HardFault_Handler+0x4>

08002044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <MemManage_Handler+0x4>

0800204a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <BusFault_Handler+0x4>

08002050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <UsageFault_Handler+0x4>

08002056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002084:	f003 f96a 	bl	800535c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}

0800208c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 80020a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020a4:	481b      	ldr	r0, [pc, #108]	; (8002114 <TIM2_IRQHandler+0x78>)
 80020a6:	f003 fc7c 	bl	80059a2 <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <TIM2_IRQHandler+0x7c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d111      	bne.n	80020d6 <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <TIM2_IRQHandler+0x80>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2bc8      	cmp	r3, #200	; 0xc8
 80020b8:	dc0a      	bgt.n	80020d0 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <TIM2_IRQHandler+0x80>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <TIM2_IRQHandler+0x84>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <TIM2_IRQHandler+0x80>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	4a14      	ldr	r2, [pc, #80]	; (800211c <TIM2_IRQHandler+0x80>)
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e002      	b.n	80020d6 <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <TIM2_IRQHandler+0x7c>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <TIM2_IRQHandler+0x7c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d114      	bne.n	8002108 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <TIM2_IRQHandler+0x80>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b63      	cmp	r3, #99	; 0x63
 80020e4:	dd0a      	ble.n	80020fc <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <TIM2_IRQHandler+0x80>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <TIM2_IRQHandler+0x84>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <TIM2_IRQHandler+0x80>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	4a09      	ldr	r2, [pc, #36]	; (800211c <TIM2_IRQHandler+0x80>)
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e005      	b.n	8002108 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <TIM2_IRQHandler+0x7c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
		  i = 100;
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <TIM2_IRQHandler+0x80>)
 8002104:	2264      	movs	r2, #100	; 0x64
 8002106:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <TIM2_IRQHandler+0x84>)
 800210a:	f008 fe28 	bl	800ad5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40020c00 	.word	0x40020c00
 8002118:	200001f4 	.word	0x200001f4
 800211c:	20000000 	.word	0x20000000
 8002120:	2000042c 	.word	0x2000042c

08002124 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002128:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800212c:	4804      	ldr	r0, [pc, #16]	; (8002140 <TIM3_IRQHandler+0x1c>)
 800212e:	f003 fc38 	bl	80059a2 <HAL_GPIO_TogglePin>
  read_digits();
 8002132:	f7fe fe93 	bl	8000e5c <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002136:	4803      	ldr	r0, [pc, #12]	; (8002144 <TIM3_IRQHandler+0x20>)
 8002138:	f008 fe11 	bl	800ad5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40020c00 	.word	0x40020c00
 8002144:	20000334 	.word	0x20000334

08002148 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <OTG_FS_IRQHandler+0x10>)
 800214e:	f003 fead 	bl	8005eac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000938 	.word	0x20000938

0800215c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002164:	4a14      	ldr	r2, [pc, #80]	; (80021b8 <_sbrk+0x5c>)
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <_sbrk+0x60>)
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002170:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <_sbrk+0x64>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d102      	bne.n	800217e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <_sbrk+0x64>)
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <_sbrk+0x68>)
 800217c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <_sbrk+0x64>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	429a      	cmp	r2, r3
 800218a:	d207      	bcs.n	800219c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800218c:	f00c fdac 	bl	800ece8 <__errno>
 8002190:	4603      	mov	r3, r0
 8002192:	220c      	movs	r2, #12
 8002194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800219a:	e009      	b.n	80021b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <_sbrk+0x64>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <_sbrk+0x64>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <_sbrk+0x64>)
 80021ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ae:	68fb      	ldr	r3, [r7, #12]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20020000 	.word	0x20020000
 80021bc:	00000400 	.word	0x00000400
 80021c0:	200001f8 	.word	0x200001f8
 80021c4:	20000c50 	.word	0x20000c50

080021c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <SystemInit+0x20>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <SystemInit+0x20>)
 80021d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b08b      	sub	sp, #44	; 0x2c
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4604      	mov	r4, r0
 80021f4:	4608      	mov	r0, r1
 80021f6:	4611      	mov	r1, r2
 80021f8:	461a      	mov	r2, r3
 80021fa:	4623      	mov	r3, r4
 80021fc:	80fb      	strh	r3, [r7, #6]
 80021fe:	4603      	mov	r3, r0
 8002200:	80bb      	strh	r3, [r7, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	807b      	strh	r3, [r7, #2]
 8002206:	4613      	mov	r3, r2
 8002208:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 800220a:	887b      	ldrh	r3, [r7, #2]
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8002212:	887b      	ldrh	r3, [r7, #2]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	f1c3 0301 	rsb	r3, r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8002224:	e061      	b.n	80022ea <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8002226:	88fa      	ldrh	r2, [r7, #6]
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	e018      	b.n	8002262 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	b298      	uxth	r0, r3
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	b29a      	uxth	r2, r3
 8002238:	88bb      	ldrh	r3, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	b29b      	uxth	r3, r3
 800223e:	883a      	ldrh	r2, [r7, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	f000 fc0b 	bl	8002a5c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	b298      	uxth	r0, r3
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	b29b      	uxth	r3, r3
 800224e:	88ba      	ldrh	r2, [r7, #4]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	b29b      	uxth	r3, r3
 8002254:	883a      	ldrh	r2, [r7, #0]
 8002256:	4619      	mov	r1, r3
 8002258:	f000 fc00 	bl	8002a5c <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	3301      	adds	r3, #1
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	4413      	add	r3, r2
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	429a      	cmp	r2, r3
 800226c:	dde0      	ble.n	8002230 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	e018      	b.n	80022aa <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	b298      	uxth	r0, r3
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	b29a      	uxth	r2, r3
 8002280:	88bb      	ldrh	r3, [r7, #4]
 8002282:	4413      	add	r3, r2
 8002284:	b29b      	uxth	r3, r3
 8002286:	883a      	ldrh	r2, [r7, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	f000 fbe7 	bl	8002a5c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	b298      	uxth	r0, r3
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	b29b      	uxth	r3, r3
 8002296:	88ba      	ldrh	r2, [r7, #4]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	b29b      	uxth	r3, r3
 800229c:	883a      	ldrh	r2, [r7, #0]
 800229e:	4619      	mov	r1, r3
 80022a0:	f000 fbdc 	bl	8002a5c <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3301      	adds	r3, #1
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	88fa      	ldrh	r2, [r7, #6]
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	4413      	add	r3, r2
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	dde0      	ble.n	8002278 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	3301      	adds	r3, #1
 80022ba:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	4413      	add	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	3302      	adds	r3, #2
 80022c8:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	005a      	lsls	r2, r3, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	4413      	add	r3, r2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	dd09      	ble.n	80022ea <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	3b01      	subs	r3, #1
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	4413      	add	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	3302      	adds	r3, #2
 80022e8:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80022ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	da99      	bge.n	8002226 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80022f2:	bf00      	nop
 80022f4:	bf00      	nop
 80022f6:	372c      	adds	r7, #44	; 0x2c
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd90      	pop	{r4, r7, pc}

080022fc <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af02      	add	r7, sp, #8
 8002302:	4604      	mov	r4, r0
 8002304:	4608      	mov	r0, r1
 8002306:	4611      	mov	r1, r2
 8002308:	461a      	mov	r2, r3
 800230a:	4623      	mov	r3, r4
 800230c:	71fb      	strb	r3, [r7, #7]
 800230e:	4603      	mov	r3, r0
 8002310:	80bb      	strh	r3, [r7, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	71bb      	strb	r3, [r7, #6]
 8002316:	4613      	mov	r3, r2
 8002318:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	2b1f      	cmp	r3, #31
 8002322:	d902      	bls.n	800232a <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	3b20      	subs	r3, #32
 8002328:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800232a:	2300      	movs	r3, #0
 800232c:	753b      	strb	r3, [r7, #20]
 800232e:	e012      	b.n	8002356 <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 8002330:	7dfa      	ldrb	r2, [r7, #23]
 8002332:	7d38      	ldrb	r0, [r7, #20]
 8002334:	7d39      	ldrb	r1, [r7, #20]
 8002336:	4c3b      	ldr	r4, [pc, #236]	; (8002424 <ILI9341_Draw_Char+0x128>)
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4423      	add	r3, r4
 8002342:	4403      	add	r3, r0
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	f107 0318 	add.w	r3, r7, #24
 800234a:	440b      	add	r3, r1
 800234c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002350:	7d3b      	ldrb	r3, [r7, #20]
 8002352:	3301      	adds	r3, #1
 8002354:	753b      	strb	r3, [r7, #20]
 8002356:	7d3b      	ldrb	r3, [r7, #20]
 8002358:	2b05      	cmp	r3, #5
 800235a:	d9e9      	bls.n	8002330 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800235c:	79bb      	ldrb	r3, [r7, #6]
 800235e:	b299      	uxth	r1, r3
 8002360:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002362:	461a      	mov	r2, r3
 8002364:	0052      	lsls	r2, r2, #1
 8002366:	4413      	add	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	b29c      	uxth	r4, r3
 8002372:	88b8      	ldrh	r0, [r7, #4]
 8002374:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	4623      	mov	r3, r4
 800237a:	f000 fc37 	bl	8002bec <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800237e:	2300      	movs	r3, #0
 8002380:	757b      	strb	r3, [r7, #21]
 8002382:	e046      	b.n	8002412 <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002384:	2300      	movs	r3, #0
 8002386:	75bb      	strb	r3, [r7, #22]
 8002388:	e03d      	b.n	8002406 <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 800238a:	7d7b      	ldrb	r3, [r7, #21]
 800238c:	f107 0218 	add.w	r2, r7, #24
 8002390:	4413      	add	r3, r2
 8002392:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002396:	461a      	mov	r2, r3
 8002398:	7dbb      	ldrb	r3, [r7, #22]
 800239a:	fa42 f303 	asr.w	r3, r2, r3
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d02c      	beq.n	8002400 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 80023a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d10f      	bne.n	80023cc <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80023ac:	7d7b      	ldrb	r3, [r7, #21]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	88bb      	ldrh	r3, [r7, #4]
 80023b2:	4413      	add	r3, r2
 80023b4:	b298      	uxth	r0, r3
 80023b6:	79bb      	ldrb	r3, [r7, #6]
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	7dbb      	ldrb	r3, [r7, #22]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	4413      	add	r3, r2
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	4619      	mov	r1, r3
 80023c6:	f000 fb49 	bl	8002a5c <ILI9341_Draw_Pixel>
 80023ca:	e019      	b.n	8002400 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80023cc:	7d7b      	ldrb	r3, [r7, #21]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023d2:	fb12 f303 	smulbb	r3, r2, r3
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	88bb      	ldrh	r3, [r7, #4]
 80023da:	4413      	add	r3, r2
 80023dc:	b298      	uxth	r0, r3
 80023de:	79bb      	ldrb	r3, [r7, #6]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	7dbb      	ldrb	r3, [r7, #22]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80023e8:	fb11 f303 	smulbb	r3, r1, r3
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	b299      	uxth	r1, r3
 80023f2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80023f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023f6:	887b      	ldrh	r3, [r7, #2]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	4623      	mov	r3, r4
 80023fc:	f000 fbf6 	bl	8002bec <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002400:	7dbb      	ldrb	r3, [r7, #22]
 8002402:	3301      	adds	r3, #1
 8002404:	75bb      	strb	r3, [r7, #22]
 8002406:	7dbb      	ldrb	r3, [r7, #22]
 8002408:	2b07      	cmp	r3, #7
 800240a:	d9be      	bls.n	800238a <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 800240c:	7d7b      	ldrb	r3, [r7, #21]
 800240e:	3301      	adds	r3, #1
 8002410:	757b      	strb	r3, [r7, #21]
 8002412:	7d7b      	ldrb	r3, [r7, #21]
 8002414:	2b05      	cmp	r3, #5
 8002416:	d9b5      	bls.n	8002384 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd90      	pop	{r4, r7, pc}
 8002422:	bf00      	nop
 8002424:	0800f088 	.word	0x0800f088

08002428 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b087      	sub	sp, #28
 800242c:	af02      	add	r7, sp, #8
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	4608      	mov	r0, r1
 8002432:	4611      	mov	r1, r2
 8002434:	461a      	mov	r2, r3
 8002436:	4603      	mov	r3, r0
 8002438:	817b      	strh	r3, [r7, #10]
 800243a:	460b      	mov	r3, r1
 800243c:	727b      	strb	r3, [r7, #9]
 800243e:	4613      	mov	r3, r2
 8002440:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8002442:	e016      	b.n	8002472 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	60fa      	str	r2, [r7, #12]
 800244a:	7818      	ldrb	r0, [r3, #0]
 800244c:	88fc      	ldrh	r4, [r7, #6]
 800244e:	7a7a      	ldrb	r2, [r7, #9]
 8002450:	8979      	ldrh	r1, [r7, #10]
 8002452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	8c3b      	ldrh	r3, [r7, #32]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	4623      	mov	r3, r4
 800245c:	f7ff ff4e 	bl	80022fc <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8002460:	8c3b      	ldrh	r3, [r7, #32]
 8002462:	461a      	mov	r2, r3
 8002464:	0052      	lsls	r2, r2, #1
 8002466:	4413      	add	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	897b      	ldrh	r3, [r7, #10]
 800246e:	4413      	add	r3, r2
 8002470:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1e4      	bne.n	8002444 <ILI9341_Draw_Text+0x1c>
    }
}
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	bd90      	pop	{r4, r7, pc}

08002484 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002488:	2200      	movs	r2, #0
 800248a:	2110      	movs	r1, #16
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <ILI9341_SPI_Init+0x14>)
 800248e:	f003 fa6f 	bl	8005970 <HAL_GPIO_WritePin>
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000

0800249c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80024a6:	1df9      	adds	r1, r7, #7
 80024a8:	2301      	movs	r3, #1
 80024aa:	2201      	movs	r2, #1
 80024ac:	4803      	ldr	r0, [pc, #12]	; (80024bc <ILI9341_SPI_Send+0x20>)
 80024ae:	f007 ff82 	bl	800a3b6 <HAL_SPI_Transmit>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000288 	.word	0x20000288

080024c0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2110      	movs	r1, #16
 80024ce:	480a      	ldr	r0, [pc, #40]	; (80024f8 <ILI9341_Write_Command+0x38>)
 80024d0:	f003 fa4e 	bl	8005970 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80024d4:	2200      	movs	r2, #0
 80024d6:	2140      	movs	r1, #64	; 0x40
 80024d8:	4807      	ldr	r0, [pc, #28]	; (80024f8 <ILI9341_Write_Command+0x38>)
 80024da:	f003 fa49 	bl	8005970 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ffdb 	bl	800249c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80024e6:	2201      	movs	r2, #1
 80024e8:	2110      	movs	r1, #16
 80024ea:	4803      	ldr	r0, [pc, #12]	; (80024f8 <ILI9341_Write_Command+0x38>)
 80024ec:	f003 fa40 	bl	8005970 <HAL_GPIO_WritePin>
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000

080024fc <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002506:	2201      	movs	r2, #1
 8002508:	2140      	movs	r1, #64	; 0x40
 800250a:	480a      	ldr	r0, [pc, #40]	; (8002534 <ILI9341_Write_Data+0x38>)
 800250c:	f003 fa30 	bl	8005970 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002510:	2200      	movs	r2, #0
 8002512:	2110      	movs	r1, #16
 8002514:	4807      	ldr	r0, [pc, #28]	; (8002534 <ILI9341_Write_Data+0x38>)
 8002516:	f003 fa2b 	bl	8005970 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ffbd 	bl	800249c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002522:	2201      	movs	r2, #1
 8002524:	2110      	movs	r1, #16
 8002526:	4803      	ldr	r0, [pc, #12]	; (8002534 <ILI9341_Write_Data+0x38>)
 8002528:	f003 fa22 	bl	8005970 <HAL_GPIO_WritePin>
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000

08002538 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4604      	mov	r4, r0
 8002540:	4608      	mov	r0, r1
 8002542:	4611      	mov	r1, r2
 8002544:	461a      	mov	r2, r3
 8002546:	4623      	mov	r3, r4
 8002548:	80fb      	strh	r3, [r7, #6]
 800254a:	4603      	mov	r3, r0
 800254c:	80bb      	strh	r3, [r7, #4]
 800254e:	460b      	mov	r3, r1
 8002550:	807b      	strh	r3, [r7, #2]
 8002552:	4613      	mov	r3, r2
 8002554:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8002556:	202a      	movs	r0, #42	; 0x2a
 8002558:	f7ff ffb2 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	b29b      	uxth	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ffc9 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800256a:	88fb      	ldrh	r3, [r7, #6]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ffc4 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002574:	887b      	ldrh	r3, [r7, #2]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	b29b      	uxth	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ffbd 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff ffb8 	bl	80024fc <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 800258c:	202b      	movs	r0, #43	; 0x2b
 800258e:	f7ff ff97 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8002592:	88bb      	ldrh	r3, [r7, #4]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	b29b      	uxth	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff ffae 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80025a0:	88bb      	ldrh	r3, [r7, #4]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ffa9 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80025aa:	883b      	ldrh	r3, [r7, #0]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ffa2 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80025b8:	883b      	ldrh	r3, [r7, #0]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff9d 	bl	80024fc <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80025c2:	202c      	movs	r0, #44	; 0x2c
 80025c4:	f7ff ff7c 	bl	80024c0 <ILI9341_Write_Command>
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd90      	pop	{r4, r7, pc}

080025d0 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80025d4:	2200      	movs	r2, #0
 80025d6:	2120      	movs	r1, #32
 80025d8:	480a      	ldr	r0, [pc, #40]	; (8002604 <ILI9341_Reset+0x34>)
 80025da:	f003 f9c9 	bl	8005970 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80025de:	20c8      	movs	r0, #200	; 0xc8
 80025e0:	f002 fedc 	bl	800539c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80025e4:	2200      	movs	r2, #0
 80025e6:	2110      	movs	r1, #16
 80025e8:	4806      	ldr	r0, [pc, #24]	; (8002604 <ILI9341_Reset+0x34>)
 80025ea:	f003 f9c1 	bl	8005970 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80025ee:	20c8      	movs	r0, #200	; 0xc8
 80025f0:	f002 fed4 	bl	800539c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80025f4:	2201      	movs	r2, #1
 80025f6:	2120      	movs	r1, #32
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <ILI9341_Reset+0x34>)
 80025fa:	f003 f9b9 	bl	8005970 <HAL_GPIO_WritePin>
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000

08002608 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8002616:	2036      	movs	r0, #54	; 0x36
 8002618:	f7ff ff52 	bl	80024c0 <ILI9341_Write_Command>
HAL_Delay(1);
 800261c:	2001      	movs	r0, #1
 800261e:	f002 febd 	bl	800539c <HAL_Delay>
	
switch(screen_rotation) 
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d837      	bhi.n	8002698 <ILI9341_Set_Rotation+0x90>
 8002628:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <ILI9341_Set_Rotation+0x28>)
 800262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262e:	bf00      	nop
 8002630:	08002641 	.word	0x08002641
 8002634:	08002657 	.word	0x08002657
 8002638:	0800266d 	.word	0x0800266d
 800263c:	08002683 	.word	0x08002683
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002640:	2048      	movs	r0, #72	; 0x48
 8002642:	f7ff ff5b 	bl	80024fc <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <ILI9341_Set_Rotation+0x9c>)
 8002648:	22f0      	movs	r2, #240	; 0xf0
 800264a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800264c:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <ILI9341_Set_Rotation+0xa0>)
 800264e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002652:	801a      	strh	r2, [r3, #0]
			break;
 8002654:	e021      	b.n	800269a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8002656:	2028      	movs	r0, #40	; 0x28
 8002658:	f7ff ff50 	bl	80024fc <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <ILI9341_Set_Rotation+0x9c>)
 800265e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002662:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <ILI9341_Set_Rotation+0xa0>)
 8002666:	22f0      	movs	r2, #240	; 0xf0
 8002668:	801a      	strh	r2, [r3, #0]
			break;
 800266a:	e016      	b.n	800269a <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 800266c:	2088      	movs	r0, #136	; 0x88
 800266e:	f7ff ff45 	bl	80024fc <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <ILI9341_Set_Rotation+0x9c>)
 8002674:	22f0      	movs	r2, #240	; 0xf0
 8002676:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <ILI9341_Set_Rotation+0xa0>)
 800267a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800267e:	801a      	strh	r2, [r3, #0]
			break;
 8002680:	e00b      	b.n	800269a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002682:	20e8      	movs	r0, #232	; 0xe8
 8002684:	f7ff ff3a 	bl	80024fc <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <ILI9341_Set_Rotation+0x9c>)
 800268a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800268e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <ILI9341_Set_Rotation+0xa0>)
 8002692:	22f0      	movs	r2, #240	; 0xf0
 8002694:	801a      	strh	r2, [r3, #0]
			break;
 8002696:	e000      	b.n	800269a <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002698:	bf00      	nop
	}
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	2000000a 	.word	0x2000000a
 80026a8:	20000008 	.word	0x20000008

080026ac <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80026b0:	2201      	movs	r2, #1
 80026b2:	2120      	movs	r1, #32
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <ILI9341_Enable+0x14>)
 80026b6:	f003 f95b 	bl	8005970 <HAL_GPIO_WritePin>
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000

080026c4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80026c8:	f7ff fff0 	bl	80026ac <ILI9341_Enable>
ILI9341_SPI_Init();
 80026cc:	f7ff feda 	bl	8002484 <ILI9341_SPI_Init>
ILI9341_Reset();
 80026d0:	f7ff ff7e 	bl	80025d0 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80026d4:	2001      	movs	r0, #1
 80026d6:	f7ff fef3 	bl	80024c0 <ILI9341_Write_Command>
HAL_Delay(1000);
 80026da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026de:	f002 fe5d 	bl	800539c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80026e2:	20cb      	movs	r0, #203	; 0xcb
 80026e4:	f7ff feec 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80026e8:	2039      	movs	r0, #57	; 0x39
 80026ea:	f7ff ff07 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80026ee:	202c      	movs	r0, #44	; 0x2c
 80026f0:	f7ff ff04 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7ff ff01 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80026fa:	2034      	movs	r0, #52	; 0x34
 80026fc:	f7ff fefe 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002700:	2002      	movs	r0, #2
 8002702:	f7ff fefb 	bl	80024fc <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8002706:	20cf      	movs	r0, #207	; 0xcf
 8002708:	f7ff feda 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800270c:	2000      	movs	r0, #0
 800270e:	f7ff fef5 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002712:	20c1      	movs	r0, #193	; 0xc1
 8002714:	f7ff fef2 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002718:	2030      	movs	r0, #48	; 0x30
 800271a:	f7ff feef 	bl	80024fc <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800271e:	20e8      	movs	r0, #232	; 0xe8
 8002720:	f7ff fece 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002724:	2085      	movs	r0, #133	; 0x85
 8002726:	f7ff fee9 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800272a:	2000      	movs	r0, #0
 800272c:	f7ff fee6 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002730:	2078      	movs	r0, #120	; 0x78
 8002732:	f7ff fee3 	bl	80024fc <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8002736:	20ea      	movs	r0, #234	; 0xea
 8002738:	f7ff fec2 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800273c:	2000      	movs	r0, #0
 800273e:	f7ff fedd 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002742:	2000      	movs	r0, #0
 8002744:	f7ff feda 	bl	80024fc <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002748:	20ed      	movs	r0, #237	; 0xed
 800274a:	f7ff feb9 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800274e:	2064      	movs	r0, #100	; 0x64
 8002750:	f7ff fed4 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002754:	2003      	movs	r0, #3
 8002756:	f7ff fed1 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800275a:	2012      	movs	r0, #18
 800275c:	f7ff fece 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002760:	2081      	movs	r0, #129	; 0x81
 8002762:	f7ff fecb 	bl	80024fc <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002766:	20f7      	movs	r0, #247	; 0xf7
 8002768:	f7ff feaa 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 800276c:	2020      	movs	r0, #32
 800276e:	f7ff fec5 	bl	80024fc <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002772:	20c0      	movs	r0, #192	; 0xc0
 8002774:	f7ff fea4 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002778:	2023      	movs	r0, #35	; 0x23
 800277a:	f7ff febf 	bl	80024fc <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800277e:	20c1      	movs	r0, #193	; 0xc1
 8002780:	f7ff fe9e 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002784:	2010      	movs	r0, #16
 8002786:	f7ff feb9 	bl	80024fc <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800278a:	20c5      	movs	r0, #197	; 0xc5
 800278c:	f7ff fe98 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002790:	203e      	movs	r0, #62	; 0x3e
 8002792:	f7ff feb3 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002796:	2028      	movs	r0, #40	; 0x28
 8002798:	f7ff feb0 	bl	80024fc <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 800279c:	20c7      	movs	r0, #199	; 0xc7
 800279e:	f7ff fe8f 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80027a2:	2086      	movs	r0, #134	; 0x86
 80027a4:	f7ff feaa 	bl	80024fc <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80027a8:	2036      	movs	r0, #54	; 0x36
 80027aa:	f7ff fe89 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80027ae:	2048      	movs	r0, #72	; 0x48
 80027b0:	f7ff fea4 	bl	80024fc <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80027b4:	203a      	movs	r0, #58	; 0x3a
 80027b6:	f7ff fe83 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80027ba:	2055      	movs	r0, #85	; 0x55
 80027bc:	f7ff fe9e 	bl	80024fc <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80027c0:	20b1      	movs	r0, #177	; 0xb1
 80027c2:	f7ff fe7d 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7ff fe98 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80027cc:	2018      	movs	r0, #24
 80027ce:	f7ff fe95 	bl	80024fc <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80027d2:	20b6      	movs	r0, #182	; 0xb6
 80027d4:	f7ff fe74 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80027d8:	2008      	movs	r0, #8
 80027da:	f7ff fe8f 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80027de:	2082      	movs	r0, #130	; 0x82
 80027e0:	f7ff fe8c 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80027e4:	2027      	movs	r0, #39	; 0x27
 80027e6:	f7ff fe89 	bl	80024fc <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80027ea:	20f2      	movs	r0, #242	; 0xf2
 80027ec:	f7ff fe68 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7ff fe83 	bl	80024fc <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80027f6:	2026      	movs	r0, #38	; 0x26
 80027f8:	f7ff fe62 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80027fc:	2001      	movs	r0, #1
 80027fe:	f7ff fe7d 	bl	80024fc <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8002802:	20e0      	movs	r0, #224	; 0xe0
 8002804:	f7ff fe5c 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002808:	200f      	movs	r0, #15
 800280a:	f7ff fe77 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800280e:	2031      	movs	r0, #49	; 0x31
 8002810:	f7ff fe74 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002814:	202b      	movs	r0, #43	; 0x2b
 8002816:	f7ff fe71 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800281a:	200c      	movs	r0, #12
 800281c:	f7ff fe6e 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002820:	200e      	movs	r0, #14
 8002822:	f7ff fe6b 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002826:	2008      	movs	r0, #8
 8002828:	f7ff fe68 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 800282c:	204e      	movs	r0, #78	; 0x4e
 800282e:	f7ff fe65 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002832:	20f1      	movs	r0, #241	; 0xf1
 8002834:	f7ff fe62 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8002838:	2037      	movs	r0, #55	; 0x37
 800283a:	f7ff fe5f 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800283e:	2007      	movs	r0, #7
 8002840:	f7ff fe5c 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002844:	2010      	movs	r0, #16
 8002846:	f7ff fe59 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800284a:	2003      	movs	r0, #3
 800284c:	f7ff fe56 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002850:	200e      	movs	r0, #14
 8002852:	f7ff fe53 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8002856:	2009      	movs	r0, #9
 8002858:	f7ff fe50 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800285c:	2000      	movs	r0, #0
 800285e:	f7ff fe4d 	bl	80024fc <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002862:	20e1      	movs	r0, #225	; 0xe1
 8002864:	f7ff fe2c 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002868:	2000      	movs	r0, #0
 800286a:	f7ff fe47 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800286e:	200e      	movs	r0, #14
 8002870:	f7ff fe44 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002874:	2014      	movs	r0, #20
 8002876:	f7ff fe41 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800287a:	2003      	movs	r0, #3
 800287c:	f7ff fe3e 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002880:	2011      	movs	r0, #17
 8002882:	f7ff fe3b 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002886:	2007      	movs	r0, #7
 8002888:	f7ff fe38 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800288c:	2031      	movs	r0, #49	; 0x31
 800288e:	f7ff fe35 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002892:	20c1      	movs	r0, #193	; 0xc1
 8002894:	f7ff fe32 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002898:	2048      	movs	r0, #72	; 0x48
 800289a:	f7ff fe2f 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800289e:	2008      	movs	r0, #8
 80028a0:	f7ff fe2c 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80028a4:	200f      	movs	r0, #15
 80028a6:	f7ff fe29 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80028aa:	200c      	movs	r0, #12
 80028ac:	f7ff fe26 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80028b0:	2031      	movs	r0, #49	; 0x31
 80028b2:	f7ff fe23 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80028b6:	2036      	movs	r0, #54	; 0x36
 80028b8:	f7ff fe20 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80028bc:	200f      	movs	r0, #15
 80028be:	f7ff fe1d 	bl	80024fc <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80028c2:	2011      	movs	r0, #17
 80028c4:	f7ff fdfc 	bl	80024c0 <ILI9341_Write_Command>
HAL_Delay(120);
 80028c8:	2078      	movs	r0, #120	; 0x78
 80028ca:	f002 fd67 	bl	800539c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80028ce:	2029      	movs	r0, #41	; 0x29
 80028d0:	f7ff fdf6 	bl	80024c0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80028d4:	2003      	movs	r0, #3
 80028d6:	f7ff fe97 	bl	8002608 <ILI9341_Set_Rotation>

HAL_Delay(10);
 80028da:	200a      	movs	r0, #10
 80028dc:	f002 fd5e 	bl	800539c <HAL_Delay>
//
}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80028e4:	b5b0      	push	{r4, r5, r7, lr}
 80028e6:	b08c      	sub	sp, #48	; 0x30
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	6039      	str	r1, [r7, #0]
 80028ee:	80fb      	strh	r3, [r7, #6]
 80028f0:	466b      	mov	r3, sp
 80028f2:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002900:	d202      	bcs.n	8002908 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
 8002906:	e002      	b.n	800290e <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002908:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800290e:	2201      	movs	r2, #1
 8002910:	2140      	movs	r1, #64	; 0x40
 8002912:	483d      	ldr	r0, [pc, #244]	; (8002a08 <ILI9341_Draw_Colour_Burst+0x124>)
 8002914:	f003 f82c 	bl	8005970 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002918:	2200      	movs	r2, #0
 800291a:	2110      	movs	r1, #16
 800291c:	483a      	ldr	r0, [pc, #232]	; (8002a08 <ILI9341_Draw_Colour_Burst+0x124>)
 800291e:	f003 f827 	bl	8005970 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	b29b      	uxth	r3, r3
 8002928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 800292c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800292e:	4623      	mov	r3, r4
 8002930:	3b01      	subs	r3, #1
 8002932:	61fb      	str	r3, [r7, #28]
 8002934:	4620      	mov	r0, r4
 8002936:	f04f 0100 	mov.w	r1, #0
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	00cb      	lsls	r3, r1, #3
 8002944:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002948:	00c2      	lsls	r2, r0, #3
 800294a:	4620      	mov	r0, r4
 800294c:	f04f 0100 	mov.w	r1, #0
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	00cb      	lsls	r3, r1, #3
 800295a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800295e:	00c2      	lsls	r2, r0, #3
 8002960:	1de3      	adds	r3, r4, #7
 8002962:	08db      	lsrs	r3, r3, #3
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	ebad 0d03 	sub.w	sp, sp, r3
 800296a:	466b      	mov	r3, sp
 800296c:	3300      	adds	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002970:	2300      	movs	r3, #0
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
 8002974:	e00e      	b.n	8002994 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297a:	4413      	add	r3, r2
 800297c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002980:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	3301      	adds	r3, #1
 8002986:	88fa      	ldrh	r2, [r7, #6]
 8002988:	b2d1      	uxtb	r1, r2
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	3302      	adds	r3, #2
 8002992:	62bb      	str	r3, [r7, #40]	; 0x28
 8002994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	429a      	cmp	r2, r3
 800299a:	d3ec      	bcc.n	8002976 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029aa:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80029b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029b6:	fb01 f202 	mul.w	r2, r1, r2
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d010      	beq.n	80029e6 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80029c4:	2300      	movs	r3, #0
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c8:	e009      	b.n	80029de <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80029ca:	69b9      	ldr	r1, [r7, #24]
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	230a      	movs	r3, #10
 80029d2:	480e      	ldr	r0, [pc, #56]	; (8002a0c <ILI9341_Draw_Colour_Burst+0x128>)
 80029d4:	f007 fcef 	bl	800a3b6 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	3301      	adds	r3, #1
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d3f1      	bcc.n	80029ca <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80029e6:	69b9      	ldr	r1, [r7, #24]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	230a      	movs	r3, #10
 80029ee:	4807      	ldr	r0, [pc, #28]	; (8002a0c <ILI9341_Draw_Colour_Burst+0x128>)
 80029f0:	f007 fce1 	bl	800a3b6 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80029f4:	2201      	movs	r2, #1
 80029f6:	2110      	movs	r1, #16
 80029f8:	4803      	ldr	r0, [pc, #12]	; (8002a08 <ILI9341_Draw_Colour_Burst+0x124>)
 80029fa:	f002 ffb9 	bl	8005970 <HAL_GPIO_WritePin>
 80029fe:	46ad      	mov	sp, r5
}
 8002a00:	bf00      	nop
 8002a02:	3730      	adds	r7, #48	; 0x30
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bdb0      	pop	{r4, r5, r7, pc}
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	20000288 	.word	0x20000288

08002a10 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <ILI9341_Fill_Screen+0x44>)
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <ILI9341_Fill_Screen+0x48>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2100      	movs	r1, #0
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7ff fd85 	bl	8002538 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <ILI9341_Fill_Screen+0x44>)
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <ILI9341_Fill_Screen+0x48>)
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	fb03 f302 	mul.w	r3, r3, r2
 8002a40:	461a      	mov	r2, r3
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	4611      	mov	r1, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff ff4c 	bl	80028e4 <ILI9341_Draw_Colour_Burst>
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	2000000a 	.word	0x2000000a
 8002a58:	20000008 	.word	0x20000008

08002a5c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	80fb      	strh	r3, [r7, #6]
 8002a66:	460b      	mov	r3, r1
 8002a68:	80bb      	strh	r3, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002a6e:	4b5b      	ldr	r3, [pc, #364]	; (8002bdc <ILI9341_Draw_Pixel+0x180>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	88fa      	ldrh	r2, [r7, #6]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	f080 80ac 	bcs.w	8002bd4 <ILI9341_Draw_Pixel+0x178>
 8002a7c:	4b58      	ldr	r3, [pc, #352]	; (8002be0 <ILI9341_Draw_Pixel+0x184>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	88ba      	ldrh	r2, [r7, #4]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	f080 80a5 	bcs.w	8002bd4 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2140      	movs	r1, #64	; 0x40
 8002a8e:	4855      	ldr	r0, [pc, #340]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002a90:	f002 ff6e 	bl	8005970 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002a94:	2200      	movs	r2, #0
 8002a96:	2110      	movs	r1, #16
 8002a98:	4852      	ldr	r0, [pc, #328]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002a9a:	f002 ff69 	bl	8005970 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002a9e:	202a      	movs	r0, #42	; 0x2a
 8002aa0:	f7ff fcfc 	bl	800249c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	2140      	movs	r1, #64	; 0x40
 8002aa8:	484e      	ldr	r0, [pc, #312]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002aaa:	f002 ff61 	bl	8005970 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002aae:	2201      	movs	r2, #1
 8002ab0:	2110      	movs	r1, #16
 8002ab2:	484c      	ldr	r0, [pc, #304]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002ab4:	f002 ff5c 	bl	8005970 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2110      	movs	r1, #16
 8002abc:	4849      	ldr	r0, [pc, #292]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002abe:	f002 ff57 	bl	8005970 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	753b      	strb	r3, [r7, #20]
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	757b      	strb	r3, [r7, #21]
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	121b      	asrs	r3, r3, #8
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	75bb      	strb	r3, [r7, #22]
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002ae6:	f107 0114 	add.w	r1, r7, #20
 8002aea:	2301      	movs	r3, #1
 8002aec:	2204      	movs	r2, #4
 8002aee:	483e      	ldr	r0, [pc, #248]	; (8002be8 <ILI9341_Draw_Pixel+0x18c>)
 8002af0:	f007 fc61 	bl	800a3b6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002af4:	2201      	movs	r2, #1
 8002af6:	2110      	movs	r1, #16
 8002af8:	483a      	ldr	r0, [pc, #232]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002afa:	f002 ff39 	bl	8005970 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002afe:	2200      	movs	r2, #0
 8002b00:	2140      	movs	r1, #64	; 0x40
 8002b02:	4838      	ldr	r0, [pc, #224]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b04:	f002 ff34 	bl	8005970 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2110      	movs	r1, #16
 8002b0c:	4835      	ldr	r0, [pc, #212]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b0e:	f002 ff2f 	bl	8005970 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002b12:	202b      	movs	r0, #43	; 0x2b
 8002b14:	f7ff fcc2 	bl	800249c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002b18:	2201      	movs	r2, #1
 8002b1a:	2140      	movs	r1, #64	; 0x40
 8002b1c:	4831      	ldr	r0, [pc, #196]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b1e:	f002 ff27 	bl	8005970 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002b22:	2201      	movs	r2, #1
 8002b24:	2110      	movs	r1, #16
 8002b26:	482f      	ldr	r0, [pc, #188]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b28:	f002 ff22 	bl	8005970 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2110      	movs	r1, #16
 8002b30:	482c      	ldr	r0, [pc, #176]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b32:	f002 ff1d 	bl	8005970 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002b36:	88bb      	ldrh	r3, [r7, #4]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	743b      	strb	r3, [r7, #16]
 8002b40:	88bb      	ldrh	r3, [r7, #4]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	747b      	strb	r3, [r7, #17]
 8002b46:	88bb      	ldrh	r3, [r7, #4]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	121b      	asrs	r3, r3, #8
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	74bb      	strb	r3, [r7, #18]
 8002b50:	88bb      	ldrh	r3, [r7, #4]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	3301      	adds	r3, #1
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002b5a:	f107 0110 	add.w	r1, r7, #16
 8002b5e:	2301      	movs	r3, #1
 8002b60:	2204      	movs	r2, #4
 8002b62:	4821      	ldr	r0, [pc, #132]	; (8002be8 <ILI9341_Draw_Pixel+0x18c>)
 8002b64:	f007 fc27 	bl	800a3b6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002b68:	2201      	movs	r2, #1
 8002b6a:	2110      	movs	r1, #16
 8002b6c:	481d      	ldr	r0, [pc, #116]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b6e:	f002 feff 	bl	8005970 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002b72:	2200      	movs	r2, #0
 8002b74:	2140      	movs	r1, #64	; 0x40
 8002b76:	481b      	ldr	r0, [pc, #108]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b78:	f002 fefa 	bl	8005970 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2110      	movs	r1, #16
 8002b80:	4818      	ldr	r0, [pc, #96]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b82:	f002 fef5 	bl	8005970 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002b86:	202c      	movs	r0, #44	; 0x2c
 8002b88:	f7ff fc88 	bl	800249c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	2140      	movs	r1, #64	; 0x40
 8002b90:	4814      	ldr	r0, [pc, #80]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b92:	f002 feed 	bl	8005970 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002b96:	2201      	movs	r2, #1
 8002b98:	2110      	movs	r1, #16
 8002b9a:	4812      	ldr	r0, [pc, #72]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b9c:	f002 fee8 	bl	8005970 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2110      	movs	r1, #16
 8002ba4:	480f      	ldr	r0, [pc, #60]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002ba6:	f002 fee3 	bl	8005970 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002baa:	887b      	ldrh	r3, [r7, #2]
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	733b      	strb	r3, [r7, #12]
 8002bb4:	887b      	ldrh	r3, [r7, #2]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002bba:	f107 010c 	add.w	r1, r7, #12
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	4809      	ldr	r0, [pc, #36]	; (8002be8 <ILI9341_Draw_Pixel+0x18c>)
 8002bc4:	f007 fbf7 	bl	800a3b6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002bc8:	2201      	movs	r2, #1
 8002bca:	2110      	movs	r1, #16
 8002bcc:	4805      	ldr	r0, [pc, #20]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002bce:	f002 fecf 	bl	8005970 <HAL_GPIO_WritePin>
 8002bd2:	e000      	b.n	8002bd6 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002bd4:	bf00      	nop
	
}
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	2000000a 	.word	0x2000000a
 8002be0:	20000008 	.word	0x20000008
 8002be4:	40021000 	.word	0x40021000
 8002be8:	20000288 	.word	0x20000288

08002bec <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	80fb      	strh	r3, [r7, #6]
 8002bfe:	4603      	mov	r3, r0
 8002c00:	80bb      	strh	r3, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	807b      	strh	r3, [r7, #2]
 8002c06:	4613      	mov	r3, r2
 8002c08:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002c0a:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <ILI9341_Draw_Rectangle+0xb0>)
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	88fa      	ldrh	r2, [r7, #6]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d23d      	bcs.n	8002c92 <ILI9341_Draw_Rectangle+0xa6>
 8002c16:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <ILI9341_Draw_Rectangle+0xb4>)
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	88ba      	ldrh	r2, [r7, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d237      	bcs.n	8002c92 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002c22:	88fa      	ldrh	r2, [r7, #6]
 8002c24:	887b      	ldrh	r3, [r7, #2]
 8002c26:	4413      	add	r3, r2
 8002c28:	4a1c      	ldr	r2, [pc, #112]	; (8002c9c <ILI9341_Draw_Rectangle+0xb0>)
 8002c2a:	8812      	ldrh	r2, [r2, #0]
 8002c2c:	b292      	uxth	r2, r2
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	dd05      	ble.n	8002c3e <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002c32:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <ILI9341_Draw_Rectangle+0xb0>)
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002c3e:	88ba      	ldrh	r2, [r7, #4]
 8002c40:	883b      	ldrh	r3, [r7, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <ILI9341_Draw_Rectangle+0xb4>)
 8002c46:	8812      	ldrh	r2, [r2, #0]
 8002c48:	b292      	uxth	r2, r2
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	dd05      	ble.n	8002c5a <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <ILI9341_Draw_Rectangle+0xb4>)
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	88bb      	ldrh	r3, [r7, #4]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002c5a:	88fa      	ldrh	r2, [r7, #6]
 8002c5c:	887b      	ldrh	r3, [r7, #2]
 8002c5e:	4413      	add	r3, r2
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29c      	uxth	r4, r3
 8002c66:	88ba      	ldrh	r2, [r7, #4]
 8002c68:	883b      	ldrh	r3, [r7, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	88b9      	ldrh	r1, [r7, #4]
 8002c74:	88f8      	ldrh	r0, [r7, #6]
 8002c76:	4622      	mov	r2, r4
 8002c78:	f7ff fc5e 	bl	8002538 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002c7c:	883b      	ldrh	r3, [r7, #0]
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	fb02 f303 	mul.w	r3, r2, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	8b3b      	ldrh	r3, [r7, #24]
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fe2a 	bl	80028e4 <ILI9341_Draw_Colour_Burst>
 8002c90:	e000      	b.n	8002c94 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002c92:	bf00      	nop
}
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd90      	pop	{r4, r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	2000000a 	.word	0x2000000a
 8002ca0:	20000008 	.word	0x20000008

08002ca4 <menu>:
uint8_t pointer_on_selected_menu =1;
//uint8_t p =0;
//void print_sign(p);

void menu()
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
	Menu_SetGenericWriteCallback(Generic_Write);  //передача показника на Generic_Write функцію  point in Menu_SetGenericWriteCallback
 8002caa:	4832      	ldr	r0, [pc, #200]	; (8002d74 <menu+0xd0>)
 8002cac:	f000 fd4a 	bl	8003744 <Menu_SetGenericWriteCallback>

	//print_all_top_menu();
	Menu_Navigate(&Menu_1);
 8002cb0:	4831      	ldr	r0, [pc, #196]	; (8002d78 <menu+0xd4>)
 8002cb2:	f000 fd19 	bl	80036e8 <Menu_Navigate>
//	print_sign(p);
//	Menu_Navigate(&Menu_2);
//	Menu_Navigate(&Menu_3);
	while (1)
	  {
	   uint8_t pressed_key = getPressKey();
 8002cb6:	f000 fc4f 	bl	8003558 <getPressKey>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]

	   if (pressed_key != BUTTON_NOTHING && !flagPressed)
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2bff      	cmp	r3, #255	; 0xff
 8002cc2:	d04a      	beq.n	8002d5a <menu+0xb6>
 8002cc4:	4b2d      	ldr	r3, [pc, #180]	; (8002d7c <menu+0xd8>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	f083 0301 	eor.w	r3, r3, #1
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d043      	beq.n	8002d5a <menu+0xb6>
	   {
			flagPressed = true;
 8002cd2:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <menu+0xd8>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
			switch(pressed_key)
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d83b      	bhi.n	8002d56 <menu+0xb2>
 8002cde:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <menu+0x40>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002cf9 	.word	0x08002cf9
 8002ce8:	08002d09 	.word	0x08002d09
 8002cec:	08002d25 	.word	0x08002d25
 8002cf0:	08002d41 	.word	0x08002d41
 8002cf4:	08002d51 	.word	0x08002d51
			{
				case BUTTON_LEFT:
					Menu_Navigate(MENU_PARENT);
 8002cf8:	f000 fcea 	bl	80036d0 <Menu_GetCurrentMenu>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fcf1 	bl	80036e8 <Menu_Navigate>
					break;
 8002d06:	e027      	b.n	8002d58 <menu+0xb4>

				case BUTTON_UP:
					pointer_on_selected_menu--;			// <<<<<<<<<<<<<<<<
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <menu+0xdc>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <menu+0xdc>)
 8002d12:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_PREVIOUS);
 8002d14:	f000 fcdc 	bl	80036d0 <Menu_GetCurrentMenu>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 fce3 	bl	80036e8 <Menu_Navigate>
					break;
 8002d22:	e019      	b.n	8002d58 <menu+0xb4>

				case BUTTON_DOWN:
					pointer_on_selected_menu++;			// <<<<<<<<<<<<<<<<
 8002d24:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <menu+0xdc>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <menu+0xdc>)
 8002d2e:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_NEXT);
 8002d30:	f000 fcce 	bl	80036d0 <Menu_GetCurrentMenu>
 8002d34:	4603      	mov	r3, r0
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fcd5 	bl	80036e8 <Menu_Navigate>
					break;
 8002d3e:	e00b      	b.n	8002d58 <menu+0xb4>

				case BUTTON_RIGHT:
					Menu_Navigate(MENU_CHILD);
 8002d40:	f000 fcc6 	bl	80036d0 <Menu_GetCurrentMenu>
 8002d44:	4603      	mov	r3, r0
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fccd 	bl	80036e8 <Menu_Navigate>
					break;
 8002d4e:	e003      	b.n	8002d58 <menu+0xb4>

				case BUTTON_SELECT:
					Menu_EnterCurrentItem();
 8002d50:	f000 fd0c 	bl	800376c <Menu_EnterCurrentItem>
					break;
 8002d54:	e000      	b.n	8002d58 <menu+0xb4>

			 default:
			  break;
 8002d56:	bf00      	nop
			switch(pressed_key)
 8002d58:	e00b      	b.n	8002d72 <menu+0xce>
			}
	   }
	   else if (getPressKey() == BUTTON_NOTHING && flagPressed)
 8002d5a:	f000 fbfd 	bl	8003558 <getPressKey>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2bff      	cmp	r3, #255	; 0xff
 8002d62:	d1a8      	bne.n	8002cb6 <menu+0x12>
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <menu+0xd8>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0a4      	beq.n	8002cb6 <menu+0x12>
	   {
		   flagPressed = false;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <menu+0xd8>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
	  {
 8002d72:	e7a0      	b.n	8002cb6 <menu+0x12>
 8002d74:	08003689 	.word	0x08003689
 8002d78:	0800f2e0 	.word	0x0800f2e0
 8002d7c:	20000200 	.word	0x20000200
 8002d80:	20000148 	.word	0x20000148

08002d84 <print_all_top_menu>:
	  }
}
// -----------------------------------------------------------------------
//// TEST PRINT FUNCTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void print_all_top_menu(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	9301      	str	r3, [sp, #4]
 8002d8e:	2302      	movs	r3, #2
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d96:	226e      	movs	r2, #110	; 0x6e
 8002d98:	211e      	movs	r1, #30
 8002d9a:	4884      	ldr	r0, [pc, #528]	; (8002fac <print_all_top_menu+0x228>)
 8002d9c:	f7ff fb44 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8002da0:	2300      	movs	r3, #0
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	2302      	movs	r3, #2
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dac:	2282      	movs	r2, #130	; 0x82
 8002dae:	211e      	movs	r1, #30
 8002db0:	487e      	ldr	r0, [pc, #504]	; (8002fac <print_all_top_menu+0x228>)
 8002db2:	f7ff fb39 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 8002db6:	2300      	movs	r3, #0
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	2302      	movs	r3, #2
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dc2:	2296      	movs	r2, #150	; 0x96
 8002dc4:	211e      	movs	r1, #30
 8002dc6:	4879      	ldr	r0, [pc, #484]	; (8002fac <print_all_top_menu+0x228>)
 8002dc8:	f7ff fb2e 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8002dcc:	2300      	movs	r3, #0
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dd8:	22aa      	movs	r2, #170	; 0xaa
 8002dda:	211e      	movs	r1, #30
 8002ddc:	4873      	ldr	r0, [pc, #460]	; (8002fac <print_all_top_menu+0x228>)
 8002dde:	f7ff fb23 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8002de2:	2300      	movs	r3, #0
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	2302      	movs	r3, #2
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dee:	22be      	movs	r2, #190	; 0xbe
 8002df0:	211e      	movs	r1, #30
 8002df2:	486e      	ldr	r0, [pc, #440]	; (8002fac <print_all_top_menu+0x228>)
 8002df4:	f7ff fb18 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8002df8:	2300      	movs	r3, #0
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e04:	22d2      	movs	r2, #210	; 0xd2
 8002e06:	211e      	movs	r1, #30
 8002e08:	4868      	ldr	r0, [pc, #416]	; (8002fac <print_all_top_menu+0x228>)
 8002e0a:	f7ff fb0d 	bl	8002428 <ILI9341_Draw_Text>

	// Print all main menus
	ILI9341_Draw_Text(main_menus[0], 30, 110, WHITE, 2, BLACK);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	2302      	movs	r3, #2
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e1a:	226e      	movs	r2, #110	; 0x6e
 8002e1c:	211e      	movs	r1, #30
 8002e1e:	4864      	ldr	r0, [pc, #400]	; (8002fb0 <print_all_top_menu+0x22c>)
 8002e20:	f7ff fb02 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[1], 30, 130, WHITE, 2, BLACK);
 8002e24:	2300      	movs	r3, #0
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	2302      	movs	r3, #2
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e30:	2282      	movs	r2, #130	; 0x82
 8002e32:	211e      	movs	r1, #30
 8002e34:	485f      	ldr	r0, [pc, #380]	; (8002fb4 <print_all_top_menu+0x230>)
 8002e36:	f7ff faf7 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[2], 30, 150, WHITE, 2, BLACK);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	2302      	movs	r3, #2
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e46:	2296      	movs	r2, #150	; 0x96
 8002e48:	211e      	movs	r1, #30
 8002e4a:	485b      	ldr	r0, [pc, #364]	; (8002fb8 <print_all_top_menu+0x234>)
 8002e4c:	f7ff faec 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[3], 30, 170, WHITE, 2, BLACK);
 8002e50:	2300      	movs	r3, #0
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	2302      	movs	r3, #2
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e5c:	22aa      	movs	r2, #170	; 0xaa
 8002e5e:	211e      	movs	r1, #30
 8002e60:	4856      	ldr	r0, [pc, #344]	; (8002fbc <print_all_top_menu+0x238>)
 8002e62:	f7ff fae1 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[4], 30, 190, WHITE, 2, BLACK);
 8002e66:	2300      	movs	r3, #0
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e72:	22be      	movs	r2, #190	; 0xbe
 8002e74:	211e      	movs	r1, #30
 8002e76:	4852      	ldr	r0, [pc, #328]	; (8002fc0 <print_all_top_menu+0x23c>)
 8002e78:	f7ff fad6 	bl	8002428 <ILI9341_Draw_Text>

	//
	if(pointer_on_selected_menu <= 0)
 8002e7c:	4b51      	ldr	r3, [pc, #324]	; (8002fc4 <print_all_top_menu+0x240>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <print_all_top_menu+0x106>
	{
		pointer_on_selected_menu = 5;
 8002e84:	4b4f      	ldr	r3, [pc, #316]	; (8002fc4 <print_all_top_menu+0x240>)
 8002e86:	2205      	movs	r2, #5
 8002e88:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 6)
 8002e8a:	4b4e      	ldr	r3, [pc, #312]	; (8002fc4 <print_all_top_menu+0x240>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b05      	cmp	r3, #5
 8002e90:	d902      	bls.n	8002e98 <print_all_top_menu+0x114>
	{
		pointer_on_selected_menu = 1;
 8002e92:	4b4c      	ldr	r3, [pc, #304]	; (8002fc4 <print_all_top_menu+0x240>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
	}
	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 8002e98:	2300      	movs	r3, #0
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ea4:	226e      	movs	r2, #110	; 0x6e
 8002ea6:	2105      	movs	r1, #5
 8002ea8:	4847      	ldr	r0, [pc, #284]	; (8002fc8 <print_all_top_menu+0x244>)
 8002eaa:	f7ff fabd 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	9301      	str	r3, [sp, #4]
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eba:	2282      	movs	r2, #130	; 0x82
 8002ebc:	2105      	movs	r1, #5
 8002ebe:	4842      	ldr	r0, [pc, #264]	; (8002fc8 <print_all_top_menu+0x244>)
 8002ec0:	f7ff fab2 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	2302      	movs	r3, #2
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ed0:	2296      	movs	r2, #150	; 0x96
 8002ed2:	2105      	movs	r1, #5
 8002ed4:	483c      	ldr	r0, [pc, #240]	; (8002fc8 <print_all_top_menu+0x244>)
 8002ed6:	f7ff faa7 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 8002eda:	2300      	movs	r3, #0
 8002edc:	9301      	str	r3, [sp, #4]
 8002ede:	2302      	movs	r3, #2
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ee6:	22aa      	movs	r2, #170	; 0xaa
 8002ee8:	2105      	movs	r1, #5
 8002eea:	4837      	ldr	r0, [pc, #220]	; (8002fc8 <print_all_top_menu+0x244>)
 8002eec:	f7ff fa9c 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002efc:	22be      	movs	r2, #190	; 0xbe
 8002efe:	2105      	movs	r1, #5
 8002f00:	4831      	ldr	r0, [pc, #196]	; (8002fc8 <print_all_top_menu+0x244>)
 8002f02:	f7ff fa91 	bl	8002428 <ILI9341_Draw_Text>

	// Point pointer on menu
	switch (pointer_on_selected_menu)
 8002f06:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <print_all_top_menu+0x240>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d849      	bhi.n	8002fa4 <print_all_top_menu+0x220>
 8002f10:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <print_all_top_menu+0x194>)
 8002f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f16:	bf00      	nop
 8002f18:	08002f2d 	.word	0x08002f2d
 8002f1c:	08002f45 	.word	0x08002f45
 8002f20:	08002f5d 	.word	0x08002f5d
 8002f24:	08002f75 	.word	0x08002f75
 8002f28:	08002f8d 	.word	0x08002f8d
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	2302      	movs	r3, #2
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f38:	226e      	movs	r2, #110	; 0x6e
 8002f3a:	2105      	movs	r1, #5
 8002f3c:	4823      	ldr	r0, [pc, #140]	; (8002fcc <print_all_top_menu+0x248>)
 8002f3e:	f7ff fa73 	bl	8002428 <ILI9341_Draw_Text>
			break;
 8002f42:	e02f      	b.n	8002fa4 <print_all_top_menu+0x220>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8002f44:	2300      	movs	r3, #0
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	2302      	movs	r3, #2
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f50:	2282      	movs	r2, #130	; 0x82
 8002f52:	2105      	movs	r1, #5
 8002f54:	481d      	ldr	r0, [pc, #116]	; (8002fcc <print_all_top_menu+0x248>)
 8002f56:	f7ff fa67 	bl	8002428 <ILI9341_Draw_Text>
			break;
 8002f5a:	e023      	b.n	8002fa4 <print_all_top_menu+0x220>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	2302      	movs	r3, #2
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f68:	2296      	movs	r2, #150	; 0x96
 8002f6a:	2105      	movs	r1, #5
 8002f6c:	4817      	ldr	r0, [pc, #92]	; (8002fcc <print_all_top_menu+0x248>)
 8002f6e:	f7ff fa5b 	bl	8002428 <ILI9341_Draw_Text>
			break;
 8002f72:	e017      	b.n	8002fa4 <print_all_top_menu+0x220>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 8002f74:	2300      	movs	r3, #0
 8002f76:	9301      	str	r3, [sp, #4]
 8002f78:	2302      	movs	r3, #2
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f80:	22aa      	movs	r2, #170	; 0xaa
 8002f82:	2105      	movs	r1, #5
 8002f84:	4811      	ldr	r0, [pc, #68]	; (8002fcc <print_all_top_menu+0x248>)
 8002f86:	f7ff fa4f 	bl	8002428 <ILI9341_Draw_Text>
			break;
 8002f8a:	e00b      	b.n	8002fa4 <print_all_top_menu+0x220>
		case 5:
			ILI9341_Draw_Text( "->", 5, 190, RED, 2, BLACK);
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	2302      	movs	r3, #2
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f98:	22be      	movs	r2, #190	; 0xbe
 8002f9a:	2105      	movs	r1, #5
 8002f9c:	480b      	ldr	r0, [pc, #44]	; (8002fcc <print_all_top_menu+0x248>)
 8002f9e:	f7ff fa43 	bl	8002428 <ILI9341_Draw_Text>
			break;
 8002fa2:	bf00      	nop
	}

}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	0800ef58 	.word	0x0800ef58
 8002fb0:	20000010 	.word	0x20000010
 8002fb4:	2000002e 	.word	0x2000002e
 8002fb8:	2000004c 	.word	0x2000004c
 8002fbc:	2000006a 	.word	0x2000006a
 8002fc0:	20000088 	.word	0x20000088
 8002fc4:	20000148 	.word	0x20000148
 8002fc8:	0800ef7c 	.word	0x0800ef7c
 8002fcc:	0800ef80 	.word	0x0800ef80

08002fd0 <print_all_menu_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_menus(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	9301      	str	r3, [sp, #4]
 8002fda:	2302      	movs	r3, #2
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fe2:	226e      	movs	r2, #110	; 0x6e
 8002fe4:	211e      	movs	r1, #30
 8002fe6:	4877      	ldr	r0, [pc, #476]	; (80031c4 <print_all_menu_1_menus+0x1f4>)
 8002fe8:	f7ff fa1e 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8002fec:	2300      	movs	r3, #0
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ff8:	2282      	movs	r2, #130	; 0x82
 8002ffa:	211e      	movs	r1, #30
 8002ffc:	4871      	ldr	r0, [pc, #452]	; (80031c4 <print_all_menu_1_menus+0x1f4>)
 8002ffe:	f7ff fa13 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 8003002:	2300      	movs	r3, #0
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	2302      	movs	r3, #2
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800300e:	2296      	movs	r2, #150	; 0x96
 8003010:	211e      	movs	r1, #30
 8003012:	486c      	ldr	r0, [pc, #432]	; (80031c4 <print_all_menu_1_menus+0x1f4>)
 8003014:	f7ff fa08 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8003018:	2300      	movs	r3, #0
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	2302      	movs	r3, #2
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003024:	22aa      	movs	r2, #170	; 0xaa
 8003026:	211e      	movs	r1, #30
 8003028:	4866      	ldr	r0, [pc, #408]	; (80031c4 <print_all_menu_1_menus+0x1f4>)
 800302a:	f7ff f9fd 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 800302e:	2300      	movs	r3, #0
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	2302      	movs	r3, #2
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800303a:	22be      	movs	r2, #190	; 0xbe
 800303c:	211e      	movs	r1, #30
 800303e:	4861      	ldr	r0, [pc, #388]	; (80031c4 <print_all_menu_1_menus+0x1f4>)
 8003040:	f7ff f9f2 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8003044:	2300      	movs	r3, #0
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	2302      	movs	r3, #2
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003050:	22d2      	movs	r2, #210	; 0xd2
 8003052:	211e      	movs	r1, #30
 8003054:	485b      	ldr	r0, [pc, #364]	; (80031c4 <print_all_menu_1_menus+0x1f4>)
 8003056:	f7ff f9e7 	bl	8002428 <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 800305a:	2300      	movs	r3, #0
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	2302      	movs	r3, #2
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003066:	226e      	movs	r2, #110	; 0x6e
 8003068:	2105      	movs	r1, #5
 800306a:	4857      	ldr	r0, [pc, #348]	; (80031c8 <print_all_menu_1_menus+0x1f8>)
 800306c:	f7ff f9dc 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8003070:	2300      	movs	r3, #0
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	2302      	movs	r3, #2
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800307c:	2282      	movs	r2, #130	; 0x82
 800307e:	2105      	movs	r1, #5
 8003080:	4851      	ldr	r0, [pc, #324]	; (80031c8 <print_all_menu_1_menus+0x1f8>)
 8003082:	f7ff f9d1 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 8003086:	2300      	movs	r3, #0
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	2302      	movs	r3, #2
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003092:	2296      	movs	r2, #150	; 0x96
 8003094:	2105      	movs	r1, #5
 8003096:	484c      	ldr	r0, [pc, #304]	; (80031c8 <print_all_menu_1_menus+0x1f8>)
 8003098:	f7ff f9c6 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 800309c:	2300      	movs	r3, #0
 800309e:	9301      	str	r3, [sp, #4]
 80030a0:	2302      	movs	r3, #2
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030a8:	22aa      	movs	r2, #170	; 0xaa
 80030aa:	2105      	movs	r1, #5
 80030ac:	4846      	ldr	r0, [pc, #280]	; (80031c8 <print_all_menu_1_menus+0x1f8>)
 80030ae:	f7ff f9bb 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 80030b2:	2300      	movs	r3, #0
 80030b4:	9301      	str	r3, [sp, #4]
 80030b6:	2302      	movs	r3, #2
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030be:	22be      	movs	r2, #190	; 0xbe
 80030c0:	2105      	movs	r1, #5
 80030c2:	4841      	ldr	r0, [pc, #260]	; (80031c8 <print_all_menu_1_menus+0x1f8>)
 80030c4:	f7ff f9b0 	bl	8002428 <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1[0], 30, 110, WHITE, 2, BLACK);
 80030c8:	2300      	movs	r3, #0
 80030ca:	9301      	str	r3, [sp, #4]
 80030cc:	2302      	movs	r3, #2
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030d4:	226e      	movs	r2, #110	; 0x6e
 80030d6:	211e      	movs	r1, #30
 80030d8:	483c      	ldr	r0, [pc, #240]	; (80031cc <print_all_menu_1_menus+0x1fc>)
 80030da:	f7ff f9a5 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[1], 30, 130, WHITE, 2, BLACK);
 80030de:	2300      	movs	r3, #0
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	2302      	movs	r3, #2
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ea:	2282      	movs	r2, #130	; 0x82
 80030ec:	211e      	movs	r1, #30
 80030ee:	4838      	ldr	r0, [pc, #224]	; (80031d0 <print_all_menu_1_menus+0x200>)
 80030f0:	f7ff f99a 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[2], 30, 150, WHITE, 2, BLACK);
 80030f4:	2300      	movs	r3, #0
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	2302      	movs	r3, #2
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003100:	2296      	movs	r2, #150	; 0x96
 8003102:	211e      	movs	r1, #30
 8003104:	4833      	ldr	r0, [pc, #204]	; (80031d4 <print_all_menu_1_menus+0x204>)
 8003106:	f7ff f98f 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[3], 30, 170, WHITE, 2, BLACK);
 800310a:	2300      	movs	r3, #0
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	2302      	movs	r3, #2
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003116:	22aa      	movs	r2, #170	; 0xaa
 8003118:	211e      	movs	r1, #30
 800311a:	482f      	ldr	r0, [pc, #188]	; (80031d8 <print_all_menu_1_menus+0x208>)
 800311c:	f7ff f984 	bl	8002428 <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 8003120:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <print_all_menu_1_menus+0x20c>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <print_all_menu_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 8003128:	4b2c      	ldr	r3, [pc, #176]	; (80031dc <print_all_menu_1_menus+0x20c>)
 800312a:	2204      	movs	r2, #4
 800312c:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 800312e:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <print_all_menu_1_menus+0x20c>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b04      	cmp	r3, #4
 8003134:	d902      	bls.n	800313c <print_all_menu_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 8003136:	4b29      	ldr	r3, [pc, #164]	; (80031dc <print_all_menu_1_menus+0x20c>)
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 800313c:	4b27      	ldr	r3, [pc, #156]	; (80031dc <print_all_menu_1_menus+0x20c>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	3b01      	subs	r3, #1
 8003142:	2b03      	cmp	r3, #3
 8003144:	d83a      	bhi.n	80031bc <print_all_menu_1_menus+0x1ec>
 8003146:	a201      	add	r2, pc, #4	; (adr r2, 800314c <print_all_menu_1_menus+0x17c>)
 8003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314c:	0800315d 	.word	0x0800315d
 8003150:	08003175 	.word	0x08003175
 8003154:	0800318d 	.word	0x0800318d
 8003158:	080031a5 	.word	0x080031a5
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 800315c:	2300      	movs	r3, #0
 800315e:	9301      	str	r3, [sp, #4]
 8003160:	2302      	movs	r3, #2
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003168:	226e      	movs	r2, #110	; 0x6e
 800316a:	2105      	movs	r1, #5
 800316c:	481c      	ldr	r0, [pc, #112]	; (80031e0 <print_all_menu_1_menus+0x210>)
 800316e:	f7ff f95b 	bl	8002428 <ILI9341_Draw_Text>
			break;
 8003172:	e023      	b.n	80031bc <print_all_menu_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8003174:	2300      	movs	r3, #0
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	2302      	movs	r3, #2
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003180:	2282      	movs	r2, #130	; 0x82
 8003182:	2105      	movs	r1, #5
 8003184:	4816      	ldr	r0, [pc, #88]	; (80031e0 <print_all_menu_1_menus+0x210>)
 8003186:	f7ff f94f 	bl	8002428 <ILI9341_Draw_Text>
			break;
 800318a:	e017      	b.n	80031bc <print_all_menu_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 800318c:	2300      	movs	r3, #0
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	2302      	movs	r3, #2
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003198:	2296      	movs	r2, #150	; 0x96
 800319a:	2105      	movs	r1, #5
 800319c:	4810      	ldr	r0, [pc, #64]	; (80031e0 <print_all_menu_1_menus+0x210>)
 800319e:	f7ff f943 	bl	8002428 <ILI9341_Draw_Text>
			break;
 80031a2:	e00b      	b.n	80031bc <print_all_menu_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 80031a4:	2300      	movs	r3, #0
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	2302      	movs	r3, #2
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031b0:	22aa      	movs	r2, #170	; 0xaa
 80031b2:	2105      	movs	r1, #5
 80031b4:	480a      	ldr	r0, [pc, #40]	; (80031e0 <print_all_menu_1_menus+0x210>)
 80031b6:	f7ff f937 	bl	8002428 <ILI9341_Draw_Text>
			break;
 80031ba:	bf00      	nop
	}
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	0800ef58 	.word	0x0800ef58
 80031c8:	0800ef7c 	.word	0x0800ef7c
 80031cc:	200000a8 	.word	0x200000a8
 80031d0:	200000bc 	.word	0x200000bc
 80031d4:	200000d0 	.word	0x200000d0
 80031d8:	200000e4 	.word	0x200000e4
 80031dc:	20000148 	.word	0x20000148
 80031e0:	0800ef80 	.word	0x0800ef80

080031e4 <print_all_menu_1_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_1_menus(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 80031ea:	2300      	movs	r3, #0
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	2302      	movs	r3, #2
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031f6:	226e      	movs	r2, #110	; 0x6e
 80031f8:	211e      	movs	r1, #30
 80031fa:	4877      	ldr	r0, [pc, #476]	; (80033d8 <print_all_menu_1_1_menus+0x1f4>)
 80031fc:	f7ff f914 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8003200:	2300      	movs	r3, #0
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	2302      	movs	r3, #2
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800320c:	2282      	movs	r2, #130	; 0x82
 800320e:	211e      	movs	r1, #30
 8003210:	4871      	ldr	r0, [pc, #452]	; (80033d8 <print_all_menu_1_1_menus+0x1f4>)
 8003212:	f7ff f909 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 8003216:	2300      	movs	r3, #0
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	2302      	movs	r3, #2
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003222:	2296      	movs	r2, #150	; 0x96
 8003224:	211e      	movs	r1, #30
 8003226:	486c      	ldr	r0, [pc, #432]	; (80033d8 <print_all_menu_1_1_menus+0x1f4>)
 8003228:	f7ff f8fe 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 800322c:	2300      	movs	r3, #0
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	2302      	movs	r3, #2
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003238:	22aa      	movs	r2, #170	; 0xaa
 800323a:	211e      	movs	r1, #30
 800323c:	4866      	ldr	r0, [pc, #408]	; (80033d8 <print_all_menu_1_1_menus+0x1f4>)
 800323e:	f7ff f8f3 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8003242:	2300      	movs	r3, #0
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	2302      	movs	r3, #2
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800324e:	22be      	movs	r2, #190	; 0xbe
 8003250:	211e      	movs	r1, #30
 8003252:	4861      	ldr	r0, [pc, #388]	; (80033d8 <print_all_menu_1_1_menus+0x1f4>)
 8003254:	f7ff f8e8 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8003258:	2300      	movs	r3, #0
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	2302      	movs	r3, #2
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003264:	22d2      	movs	r2, #210	; 0xd2
 8003266:	211e      	movs	r1, #30
 8003268:	485b      	ldr	r0, [pc, #364]	; (80033d8 <print_all_menu_1_1_menus+0x1f4>)
 800326a:	f7ff f8dd 	bl	8002428 <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 800326e:	2300      	movs	r3, #0
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	2302      	movs	r3, #2
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800327a:	226e      	movs	r2, #110	; 0x6e
 800327c:	2105      	movs	r1, #5
 800327e:	4857      	ldr	r0, [pc, #348]	; (80033dc <print_all_menu_1_1_menus+0x1f8>)
 8003280:	f7ff f8d2 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8003284:	2300      	movs	r3, #0
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	2302      	movs	r3, #2
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003290:	2282      	movs	r2, #130	; 0x82
 8003292:	2105      	movs	r1, #5
 8003294:	4851      	ldr	r0, [pc, #324]	; (80033dc <print_all_menu_1_1_menus+0x1f8>)
 8003296:	f7ff f8c7 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 800329a:	2300      	movs	r3, #0
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	2302      	movs	r3, #2
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032a6:	2296      	movs	r2, #150	; 0x96
 80032a8:	2105      	movs	r1, #5
 80032aa:	484c      	ldr	r0, [pc, #304]	; (80033dc <print_all_menu_1_1_menus+0x1f8>)
 80032ac:	f7ff f8bc 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 80032b0:	2300      	movs	r3, #0
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	2302      	movs	r3, #2
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032bc:	22aa      	movs	r2, #170	; 0xaa
 80032be:	2105      	movs	r1, #5
 80032c0:	4846      	ldr	r0, [pc, #280]	; (80033dc <print_all_menu_1_1_menus+0x1f8>)
 80032c2:	f7ff f8b1 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 80032c6:	2300      	movs	r3, #0
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	2302      	movs	r3, #2
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032d2:	22be      	movs	r2, #190	; 0xbe
 80032d4:	2105      	movs	r1, #5
 80032d6:	4841      	ldr	r0, [pc, #260]	; (80033dc <print_all_menu_1_1_menus+0x1f8>)
 80032d8:	f7ff f8a6 	bl	8002428 <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1_1[0], 30, 110, WHITE, 2, BLACK);
 80032dc:	2300      	movs	r3, #0
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	2302      	movs	r3, #2
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032e8:	226e      	movs	r2, #110	; 0x6e
 80032ea:	211e      	movs	r1, #30
 80032ec:	483c      	ldr	r0, [pc, #240]	; (80033e0 <print_all_menu_1_1_menus+0x1fc>)
 80032ee:	f7ff f89b 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[1], 30, 130, WHITE, 2, BLACK);
 80032f2:	2300      	movs	r3, #0
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	2302      	movs	r3, #2
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032fe:	2282      	movs	r2, #130	; 0x82
 8003300:	211e      	movs	r1, #30
 8003302:	4838      	ldr	r0, [pc, #224]	; (80033e4 <print_all_menu_1_1_menus+0x200>)
 8003304:	f7ff f890 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[2], 30, 150, WHITE, 2, BLACK);
 8003308:	2300      	movs	r3, #0
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	2302      	movs	r3, #2
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003314:	2296      	movs	r2, #150	; 0x96
 8003316:	211e      	movs	r1, #30
 8003318:	4833      	ldr	r0, [pc, #204]	; (80033e8 <print_all_menu_1_1_menus+0x204>)
 800331a:	f7ff f885 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[3], 30, 170, WHITE, 2, BLACK);
 800331e:	2300      	movs	r3, #0
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	2302      	movs	r3, #2
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800332a:	22aa      	movs	r2, #170	; 0xaa
 800332c:	211e      	movs	r1, #30
 800332e:	482f      	ldr	r0, [pc, #188]	; (80033ec <print_all_menu_1_1_menus+0x208>)
 8003330:	f7ff f87a 	bl	8002428 <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 8003334:	4b2e      	ldr	r3, [pc, #184]	; (80033f0 <print_all_menu_1_1_menus+0x20c>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <print_all_menu_1_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 800333c:	4b2c      	ldr	r3, [pc, #176]	; (80033f0 <print_all_menu_1_1_menus+0x20c>)
 800333e:	2204      	movs	r2, #4
 8003340:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 8003342:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <print_all_menu_1_1_menus+0x20c>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b04      	cmp	r3, #4
 8003348:	d902      	bls.n	8003350 <print_all_menu_1_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 800334a:	4b29      	ldr	r3, [pc, #164]	; (80033f0 <print_all_menu_1_1_menus+0x20c>)
 800334c:	2201      	movs	r2, #1
 800334e:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 8003350:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <print_all_menu_1_1_menus+0x20c>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	3b01      	subs	r3, #1
 8003356:	2b03      	cmp	r3, #3
 8003358:	d83a      	bhi.n	80033d0 <print_all_menu_1_1_menus+0x1ec>
 800335a:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <print_all_menu_1_1_menus+0x17c>)
 800335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003360:	08003371 	.word	0x08003371
 8003364:	08003389 	.word	0x08003389
 8003368:	080033a1 	.word	0x080033a1
 800336c:	080033b9 	.word	0x080033b9
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8003370:	2300      	movs	r3, #0
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	2302      	movs	r3, #2
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800337c:	226e      	movs	r2, #110	; 0x6e
 800337e:	2105      	movs	r1, #5
 8003380:	481c      	ldr	r0, [pc, #112]	; (80033f4 <print_all_menu_1_1_menus+0x210>)
 8003382:	f7ff f851 	bl	8002428 <ILI9341_Draw_Text>
			break;
 8003386:	e023      	b.n	80033d0 <print_all_menu_1_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8003388:	2300      	movs	r3, #0
 800338a:	9301      	str	r3, [sp, #4]
 800338c:	2302      	movs	r3, #2
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003394:	2282      	movs	r2, #130	; 0x82
 8003396:	2105      	movs	r1, #5
 8003398:	4816      	ldr	r0, [pc, #88]	; (80033f4 <print_all_menu_1_1_menus+0x210>)
 800339a:	f7ff f845 	bl	8002428 <ILI9341_Draw_Text>
			break;
 800339e:	e017      	b.n	80033d0 <print_all_menu_1_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 80033a0:	2300      	movs	r3, #0
 80033a2:	9301      	str	r3, [sp, #4]
 80033a4:	2302      	movs	r3, #2
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033ac:	2296      	movs	r2, #150	; 0x96
 80033ae:	2105      	movs	r1, #5
 80033b0:	4810      	ldr	r0, [pc, #64]	; (80033f4 <print_all_menu_1_1_menus+0x210>)
 80033b2:	f7ff f839 	bl	8002428 <ILI9341_Draw_Text>
			break;
 80033b6:	e00b      	b.n	80033d0 <print_all_menu_1_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 80033b8:	2300      	movs	r3, #0
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	2302      	movs	r3, #2
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033c4:	22aa      	movs	r2, #170	; 0xaa
 80033c6:	2105      	movs	r1, #5
 80033c8:	480a      	ldr	r0, [pc, #40]	; (80033f4 <print_all_menu_1_1_menus+0x210>)
 80033ca:	f7ff f82d 	bl	8002428 <ILI9341_Draw_Text>
			break;
 80033ce:	bf00      	nop
	}
}
 80033d0:	bf00      	nop
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	0800ef58 	.word	0x0800ef58
 80033dc:	0800ef7c 	.word	0x0800ef7c
 80033e0:	200000f8 	.word	0x200000f8
 80033e4:	2000010c 	.word	0x2000010c
 80033e8:	20000120 	.word	0x20000120
 80033ec:	20000134 	.word	0x20000134
 80033f0:	20000148 	.word	0x20000148
 80033f4:	0800ef80 	.word	0x0800ef80

080033f8 <tongle_green_led>:
// -----------------------------------------------------------------------
void tongle_green_led(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12);
 80033fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <tongle_green_led+0x14>)
 8003402:	f002 face 	bl	80059a2 <HAL_GPIO_TogglePin>
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40020c00 	.word	0x40020c00

08003410 <RED_LED_ON>:
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------
void RED_LED_ON(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003414:	2201      	movs	r2, #1
 8003416:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800341a:	4802      	ldr	r0, [pc, #8]	; (8003424 <RED_LED_ON+0x14>)
 800341c:	f002 faa8 	bl	8005970 <HAL_GPIO_WritePin>
}
 8003420:	bf00      	nop
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40020c00 	.word	0x40020c00

08003428 <RED_LED_OFF>:
// -----------------------------------------------------------------------
void RED_LED_OFF(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800342c:	2200      	movs	r2, #0
 800342e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003432:	4802      	ldr	r0, [pc, #8]	; (800343c <RED_LED_OFF+0x14>)
 8003434:	f002 fa9c 	bl	8005970 <HAL_GPIO_WritePin>
}
 8003438:	bf00      	nop
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40020c00 	.word	0x40020c00

08003440 <Level1Item3_Enter>:
// -----------------------------------------------------------------------
static void Level1Item3_Enter(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af02      	add	r7, sp, #8
 bool flagPressed = false;
 8003446:	2300      	movs	r3, #0
 8003448:	71fb      	strb	r3, [r7, #7]

 ILI9341_Draw_Text( "                          ", 10, 60, WHITE, 2, BLACK);   // Clearn lcd
 800344a:	2300      	movs	r3, #0
 800344c:	9301      	str	r3, [sp, #4]
 800344e:	2302      	movs	r3, #2
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003456:	223c      	movs	r2, #60	; 0x3c
 8003458:	210a      	movs	r1, #10
 800345a:	4838      	ldr	r0, [pc, #224]	; (800353c <Level1Item3_Enter+0xfc>)
 800345c:	f7fe ffe4 	bl	8002428 <ILI9341_Draw_Text>

 ILI9341_Draw_Text( "Red LED is:", 10, 60, WHITE, 2, BLACK);
 8003460:	2300      	movs	r3, #0
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	2302      	movs	r3, #2
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800346c:	223c      	movs	r2, #60	; 0x3c
 800346e:	210a      	movs	r1, #10
 8003470:	4833      	ldr	r0, [pc, #204]	; (8003540 <Level1Item3_Enter+0x100>)
 8003472:	f7fe ffd9 	bl	8002428 <ILI9341_Draw_Text>

 while(getPressKey() != BUTTON_LEFT)
 8003476:	e049      	b.n	800350c <Level1Item3_Enter+0xcc>
 {
	 // Read PIN
	 int led_status =  HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14);
 8003478:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800347c:	4831      	ldr	r0, [pc, #196]	; (8003544 <Level1Item3_Enter+0x104>)
 800347e:	f002 fa5f 	bl	8005940 <HAL_GPIO_ReadPin>
 8003482:	4603      	mov	r3, r0
 8003484:	603b      	str	r3, [r7, #0]

	 if(flagPressed == true)
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d019      	beq.n	80034c0 <Level1Item3_Enter+0x80>
	 {
		 if(led_status == GPIO_PIN_SET)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10b      	bne.n	80034aa <Level1Item3_Enter+0x6a>
		 {
			 ILI9341_Draw_Text( "ON ", 150, 60, WHITE, 2, BLACK);
 8003492:	2300      	movs	r3, #0
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	2302      	movs	r3, #2
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800349e:	223c      	movs	r2, #60	; 0x3c
 80034a0:	2196      	movs	r1, #150	; 0x96
 80034a2:	4829      	ldr	r0, [pc, #164]	; (8003548 <Level1Item3_Enter+0x108>)
 80034a4:	f7fe ffc0 	bl	8002428 <ILI9341_Draw_Text>
 80034a8:	e00a      	b.n	80034c0 <Level1Item3_Enter+0x80>
		 }
		 else
		 {
		 	 ILI9341_Draw_Text( "OFF", 150, 60, WHITE, 2, BLACK);
 80034aa:	2300      	movs	r3, #0
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	2302      	movs	r3, #2
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034b6:	223c      	movs	r2, #60	; 0x3c
 80034b8:	2196      	movs	r1, #150	; 0x96
 80034ba:	4824      	ldr	r0, [pc, #144]	; (800354c <Level1Item3_Enter+0x10c>)
 80034bc:	f7fe ffb4 	bl	8002428 <ILI9341_Draw_Text>
		 }
	 }


	 if(getPressKey() != BUTTON_NOTHING && !flagPressed)
 80034c0:	f000 f84a 	bl	8003558 <getPressKey>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2bff      	cmp	r3, #255	; 0xff
 80034c8:	d016      	beq.n	80034f8 <Level1Item3_Enter+0xb8>
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	f083 0301 	eor.w	r3, r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d010      	beq.n	80034f8 <Level1Item3_Enter+0xb8>
	 {
		 flagPressed = true;
 80034d6:	2301      	movs	r3, #1
 80034d8:	71fb      	strb	r3, [r7, #7]

		 switch(getPressKey())  // If press any key
 80034da:	f000 f83d 	bl	8003558 <getPressKey>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d002      	beq.n	80034ea <Level1Item3_Enter+0xaa>
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d003      	beq.n	80034f0 <Level1Item3_Enter+0xb0>
	  	  		  break;
	  	  	  case BUTTON_DOWN:
	  	  		  RED_LED_OFF();
	  	  		  break;
	  	  	  default:
	  	  		  break;
 80034e8:	e005      	b.n	80034f6 <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_ON();
 80034ea:	f7ff ff91 	bl	8003410 <RED_LED_ON>
	  	  		  break;
 80034ee:	e002      	b.n	80034f6 <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_OFF();
 80034f0:	f7ff ff9a 	bl	8003428 <RED_LED_OFF>
	  	  		  break;
 80034f4:	bf00      	nop
		 switch(getPressKey())  // If press any key
 80034f6:	e009      	b.n	800350c <Level1Item3_Enter+0xcc>
		 }
	 }
	 else if(getPressKey() == BUTTON_NOTHING && flagPressed)
 80034f8:	f000 f82e 	bl	8003558 <getPressKey>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2bff      	cmp	r3, #255	; 0xff
 8003500:	d104      	bne.n	800350c <Level1Item3_Enter+0xcc>
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <Level1Item3_Enter+0xcc>
	 {
		 flagPressed = false; 	// if button was release
 8003508:	2300      	movs	r3, #0
 800350a:	71fb      	strb	r3, [r7, #7]
 while(getPressKey() != BUTTON_LEFT)
 800350c:	f000 f824 	bl	8003558 <getPressKey>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1b0      	bne.n	8003478 <Level1Item3_Enter+0x38>
	 }
 }

 ILI9341_Draw_Text( "                           ", 10, 60, WHITE, 2, BLACK); // Cleaning one row LCD
 8003516:	2300      	movs	r3, #0
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	2302      	movs	r3, #2
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003522:	223c      	movs	r2, #60	; 0x3c
 8003524:	210a      	movs	r1, #10
 8003526:	480a      	ldr	r0, [pc, #40]	; (8003550 <Level1Item3_Enter+0x110>)
 8003528:	f7fe ff7e 	bl	8002428 <ILI9341_Draw_Text>
 Menu_Navigate(&Menu_3);  // Back to menu 3
 800352c:	4809      	ldr	r0, [pc, #36]	; (8003554 <Level1Item3_Enter+0x114>)
 800352e:	f000 f8db 	bl	80036e8 <Menu_Navigate>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	0800ef84 	.word	0x0800ef84
 8003540:	0800efa0 	.word	0x0800efa0
 8003544:	40020c00 	.word	0x40020c00
 8003548:	0800efac 	.word	0x0800efac
 800354c:	0800efb0 	.word	0x0800efb0
 8003550:	0800efb4 	.word	0x0800efb4
 8003554:	0800f338 	.word	0x0800f338

08003558 <getPressKey>:
// -----------------------------------------------------------------------
static uint8_t getPressKey()		// 3x4 keyboard
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af02      	add	r7, sp, #8
	char digit = '\0';
 800355e:	2300      	movs	r3, #0
 8003560:	75fb      	strb	r3, [r7, #23]
	char buff_lcd[20] = "KEY: ";
 8003562:	4a48      	ldr	r2, [pc, #288]	; (8003684 <getPressKey+0x12c>)
 8003564:	463b      	mov	r3, r7
 8003566:	e892 0003 	ldmia.w	r2, {r0, r1}
 800356a:	6018      	str	r0, [r3, #0]
 800356c:	3304      	adds	r3, #4
 800356e:	8019      	strh	r1, [r3, #0]
 8003570:	1dbb      	adds	r3, r7, #6
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]
 8003578:	609a      	str	r2, [r3, #8]
 800357a:	819a      	strh	r2, [r3, #12]
	digit = read_one_digit_from_keyboard();
 800357c:	f7fd fcc8 	bl	8000f10 <read_one_digit_from_keyboard>
 8003580:	4603      	mov	r3, r0
 8003582:	75fb      	strb	r3, [r7, #23]
	switch(digit)
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	3b32      	subs	r3, #50	; 0x32
 8003588:	2b06      	cmp	r3, #6
 800358a:	d875      	bhi.n	8003678 <getPressKey+0x120>
 800358c:	a201      	add	r2, pc, #4	; (adr r2, 8003594 <getPressKey+0x3c>)
 800358e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003592:	bf00      	nop
 8003594:	080035d9 	.word	0x080035d9
 8003598:	08003679 	.word	0x08003679
 800359c:	080035b1 	.word	0x080035b1
 80035a0:	08003651 	.word	0x08003651
 80035a4:	08003629 	.word	0x08003629
 80035a8:	08003679 	.word	0x08003679
 80035ac:	08003601 	.word	0x08003601
	{
		case '4':
		{
			strncat(buff_lcd, &digit, 1);
 80035b0:	f107 0117 	add.w	r1, r7, #23
 80035b4:	463b      	mov	r3, r7
 80035b6:	2201      	movs	r2, #1
 80035b8:	4618      	mov	r0, r3
 80035ba:	f00b fc9f 	bl	800eefc <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80035be:	4638      	mov	r0, r7
 80035c0:	2300      	movs	r3, #0
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	2302      	movs	r3, #2
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035cc:	2200      	movs	r2, #0
 80035ce:	2100      	movs	r1, #0
 80035d0:	f7fe ff2a 	bl	8002428 <ILI9341_Draw_Text>
			return BUTTON_LEFT;
 80035d4:	2300      	movs	r3, #0
 80035d6:	e050      	b.n	800367a <getPressKey+0x122>
		}
		case '2':
		{
			strncat(buff_lcd, &digit, 1);
 80035d8:	f107 0117 	add.w	r1, r7, #23
 80035dc:	463b      	mov	r3, r7
 80035de:	2201      	movs	r2, #1
 80035e0:	4618      	mov	r0, r3
 80035e2:	f00b fc8b 	bl	800eefc <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80035e6:	4638      	mov	r0, r7
 80035e8:	2300      	movs	r3, #0
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	2302      	movs	r3, #2
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035f4:	2200      	movs	r2, #0
 80035f6:	2100      	movs	r1, #0
 80035f8:	f7fe ff16 	bl	8002428 <ILI9341_Draw_Text>
			return BUTTON_UP;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e03c      	b.n	800367a <getPressKey+0x122>
		}
		case '8':
		{
			strncat(buff_lcd, &digit, 1);
 8003600:	f107 0117 	add.w	r1, r7, #23
 8003604:	463b      	mov	r3, r7
 8003606:	2201      	movs	r2, #1
 8003608:	4618      	mov	r0, r3
 800360a:	f00b fc77 	bl	800eefc <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 800360e:	4638      	mov	r0, r7
 8003610:	2300      	movs	r3, #0
 8003612:	9301      	str	r3, [sp, #4]
 8003614:	2302      	movs	r3, #2
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800361c:	2200      	movs	r2, #0
 800361e:	2100      	movs	r1, #0
 8003620:	f7fe ff02 	bl	8002428 <ILI9341_Draw_Text>
			return BUTTON_DOWN;
 8003624:	2302      	movs	r3, #2
 8003626:	e028      	b.n	800367a <getPressKey+0x122>
		}
		case '6':
		{
			strncat(buff_lcd, &digit, 1);
 8003628:	f107 0117 	add.w	r1, r7, #23
 800362c:	463b      	mov	r3, r7
 800362e:	2201      	movs	r2, #1
 8003630:	4618      	mov	r0, r3
 8003632:	f00b fc63 	bl	800eefc <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8003636:	4638      	mov	r0, r7
 8003638:	2300      	movs	r3, #0
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	2302      	movs	r3, #2
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003644:	2200      	movs	r2, #0
 8003646:	2100      	movs	r1, #0
 8003648:	f7fe feee 	bl	8002428 <ILI9341_Draw_Text>
			return BUTTON_RIGHT;
 800364c:	2303      	movs	r3, #3
 800364e:	e014      	b.n	800367a <getPressKey+0x122>
		}
		case '5':
		{
			strncat(buff_lcd, &digit, 1);
 8003650:	f107 0117 	add.w	r1, r7, #23
 8003654:	463b      	mov	r3, r7
 8003656:	2201      	movs	r2, #1
 8003658:	4618      	mov	r0, r3
 800365a:	f00b fc4f 	bl	800eefc <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 800365e:	4638      	mov	r0, r7
 8003660:	2300      	movs	r3, #0
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	2302      	movs	r3, #2
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800366c:	2200      	movs	r2, #0
 800366e:	2100      	movs	r1, #0
 8003670:	f7fe feda 	bl	8002428 <ILI9341_Draw_Text>
			return BUTTON_SELECT;
 8003674:	2304      	movs	r3, #4
 8003676:	e000      	b.n	800367a <getPressKey+0x122>
		}
		default:
			return BUTTON_NOTHING;
 8003678:	23ff      	movs	r3, #255	; 0xff
			break;


	}
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	0800efd0 	.word	0x0800efd0

08003688 <Generic_Write>:
// -----------------------------------------------------------------------
void Generic_Write(const char* Text)		// Print "Text" data on LCD
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af02      	add	r7, sp, #8
 800368e:	6078      	str	r0, [r7, #4]
	if (Text)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d015      	beq.n	80036c2 <Generic_Write+0x3a>
	{
		ILI9341_Draw_Text( "                                 ", 10, 100, WHITE, 1, BLACK);
 8003696:	2300      	movs	r3, #0
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	2301      	movs	r3, #1
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036a2:	2264      	movs	r2, #100	; 0x64
 80036a4:	210a      	movs	r1, #10
 80036a6:	4809      	ldr	r0, [pc, #36]	; (80036cc <Generic_Write+0x44>)
 80036a8:	f7fe febe 	bl	8002428 <ILI9341_Draw_Text>
		ILI9341_Draw_Text( Text, 10, 100, WHITE, 1, BLACK);
 80036ac:	2300      	movs	r3, #0
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	2301      	movs	r3, #1
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036b8:	2264      	movs	r2, #100	; 0x64
 80036ba:	210a      	movs	r1, #10
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fe feb3 	bl	8002428 <ILI9341_Draw_Text>
	}
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	0800efe4 	.word	0x0800efe4

080036d0 <Menu_GetCurrentMenu>:
// -----------------------------------------------------------------------
Menu_Item_t* Menu_GetCurrentMenu(void)		// Повертає поточни вибраний пункт меню
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
	return CurrentMenuItem;
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <Menu_GetCurrentMenu+0x14>)
 80036d6:	681b      	ldr	r3, [r3, #0]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	2000000c 	.word	0x2000000c

080036e8 <Menu_Navigate>:
// -----------------------------------------------------------------------
// Переходи по меню
// in: ПОказник на апсолютний пункт меню, для вибору
// MENU_PARENT, MENU_CHILD, MENU_NEXT або  MENU_PREVIOUS
void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))  // What it mean???
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a11      	ldr	r2, [pc, #68]	; (8003738 <Menu_Navigate+0x50>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d01a      	beq.n	800372e <Menu_Navigate+0x46>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d017      	beq.n	800372e <Menu_Navigate+0x46>
	{
		return;		// Exit
	}

	CurrentMenuItem = NewMenu;    // Передане маню стає вибране
 80036fe:	4a0f      	ldr	r2, [pc, #60]	; (800373c <Menu_Navigate+0x54>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6013      	str	r3, [r2, #0]

	if (MenuWriteFunc)    // If   MenuWriteFunc  != NULL  ???????
 8003704:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <Menu_Navigate+0x58>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d006      	beq.n	800371a <Menu_Navigate+0x32>
	{
		MenuWriteFunc(CurrentMenuItem->Text);			// Print Text string on LCD
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <Menu_Navigate+0x58>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a0a      	ldr	r2, [pc, #40]	; (800373c <Menu_Navigate+0x54>)
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	3218      	adds	r2, #24
 8003716:	4610      	mov	r0, r2
 8003718:	4798      	blx	r3
	}

	//   void (*SelectCallback)(void) - Creating pointer on function
	// Write  CurrentMenuItem->SelectCallback in  void (*SelectCallback)(void) pinter
	void (*SelectCallback)(void) = CurrentMenuItem->SelectCallback;
 800371a:	4b08      	ldr	r3, [pc, #32]	; (800373c <Menu_Navigate+0x54>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	60fb      	str	r3, [r7, #12]

	if (SelectCallback)		// If SelectCallback != NULL
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <Menu_Navigate+0x48>
	{
		SelectCallback();   // It does - CurrentMenuItem->SelectCallback;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4798      	blx	r3
 800372c:	e000      	b.n	8003730 <Menu_Navigate+0x48>
		return;		// Exit
 800372e:	bf00      	nop
	}
}
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	0800f2c8 	.word	0x0800f2c8
 800373c:	2000000c 	.word	0x2000000c
 8003740:	200001fc 	.word	0x200001fc

08003744 <Menu_SetGenericWriteCallback>:
 пунктів меню. В рамках цієї функції зворотного виклику користувач повинен
 реалізувати код для відображення поточного тексту меню, що зберігається
 в  ref MENU_ITEM_STORAGE пам'яті.. */
// In: вказівник на функцію зворотного виклику для виконання кожного вибраного пункту меню.
void Menu_SetGenericWriteCallback(void (*WriteFunc)(const char* Text))    //  What doing this function??????? <<<<<<<<<<<
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
	MenuWriteFunc = WriteFunc;  		// Запис показника функції WriteFunc в
 800374c:	4a05      	ldr	r2, [pc, #20]	; (8003764 <Menu_SetGenericWriteCallback+0x20>)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6013      	str	r3, [r2, #0]
	//  показник на функцію під назвою MenuWriteFunc
	Menu_Navigate(CurrentMenuItem);      // Передача цього показника в функцію Menu_Navigate
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <Menu_SetGenericWriteCallback+0x24>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff ffc6 	bl	80036e8 <Menu_Navigate>
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	200001fc 	.word	0x200001fc
 8003768:	2000000c 	.word	0x2000000c

0800376c <Menu_EnterCurrentItem>:
// -----------------------------------------------------------------------
/* Функція входить у вибраний на даний момент пункт меню, виконуючи налаштовану
   функцію зворотного дзвінка (якщо така є) */
void Menu_EnterCurrentItem(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
	if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <Menu_EnterCurrentItem+0x34>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <Menu_EnterCurrentItem+0x38>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00d      	beq.n	8003798 <Menu_EnterCurrentItem+0x2c>
 800377c:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <Menu_EnterCurrentItem+0x34>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <Menu_EnterCurrentItem+0x2c>
	{
		return;
	}

	void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <Menu_EnterCurrentItem+0x34>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	607b      	str	r3, [r7, #4]
	if (EnterCallback)		// If EnterCallback != NULL
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <Menu_EnterCurrentItem+0x2e>
	{
		EnterCallback();
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4798      	blx	r3
 8003796:	e000      	b.n	800379a <Menu_EnterCurrentItem+0x2e>
		return;
 8003798:	bf00      	nop
	}

}// -----------------------------------------------------------------------
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	2000000c 	.word	0x2000000c
 80037a4:	0800f2c8 	.word	0x0800f2c8

080037a8 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	int i =0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 80037b4:	e036      	b.n	8003824 <speed_test_LCD+0x7c>
	{
		i ++;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	3301      	adds	r3, #1
 80037ba:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80037d0:	4819      	ldr	r0, [pc, #100]	; (8003838 <speed_test_LCD+0x90>)
 80037d2:	f006 fd52 	bl	800a27a <HAL_RNG_GetRandomNumber>
 80037d6:	6138      	str	r0, [r7, #16]
		xr = random_num;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80037dc:	4816      	ldr	r0, [pc, #88]	; (8003838 <speed_test_LCD+0x90>)
 80037de:	f006 fd4c 	bl	800a27a <HAL_RNG_GetRandomNumber>
 80037e2:	6138      	str	r0, [r7, #16]
		yr = random_num;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80037e8:	4813      	ldr	r0, [pc, #76]	; (8003838 <speed_test_LCD+0x90>)
 80037ea:	f006 fd46 	bl	800a27a <HAL_RNG_GetRandomNumber>
 80037ee:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80037f4:	4810      	ldr	r0, [pc, #64]	; (8003838 <speed_test_LCD+0x90>)
 80037f6:	f006 fd40 	bl	800a27a <HAL_RNG_GetRandomNumber>
 80037fa:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8003800:	89fb      	ldrh	r3, [r7, #14]
 8003802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003806:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8003808:	89bb      	ldrh	r3, [r7, #12]
 800380a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380e:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8003810:	897b      	ldrh	r3, [r7, #10]
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8003818:	893b      	ldrh	r3, [r7, #8]
 800381a:	897a      	ldrh	r2, [r7, #10]
 800381c:	89b9      	ldrh	r1, [r7, #12]
 800381e:	89f8      	ldrh	r0, [r7, #14]
 8003820:	f7fe fce4 	bl	80021ec <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	ddc4      	ble.n	80037b6 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	200003c4 	.word	0x200003c4

0800383c <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8003844:	2305      	movs	r3, #5
 8003846:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f001 f9f1 	bl	8004c34 <null_ptr_check>
 8003852:	4603      	mov	r3, r0
 8003854:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8003856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d133      	bne.n	80038c6 <bme280_init+0x8a>
		while (try_count) {
 800385e:	e028      	b.n	80038b2 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003860:	f107 010d 	add.w	r1, r7, #13
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	20d0      	movs	r0, #208	; 0xd0
 800386a:	f000 f832 	bl	80038d2 <bme280_get_regs>
 800386e:	4603      	mov	r3, r0
 8003870:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8003872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d114      	bne.n	80038a4 <bme280_init+0x68>
 800387a:	7b7b      	ldrb	r3, [r7, #13]
 800387c:	2b60      	cmp	r3, #96	; 0x60
 800387e:	d111      	bne.n	80038a4 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8003880:	7b7a      	ldrb	r2, [r7, #13]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f976 	bl	8003b78 <bme280_soft_reset>
 800388c:	4603      	mov	r3, r0
 800388e:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8003890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d110      	bne.n	80038ba <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f001 f841 	bl	8004920 <get_calib_data>
 800389e:	4603      	mov	r3, r0
 80038a0:	73fb      	strb	r3, [r7, #15]
				}
				break;
 80038a2:	e00a      	b.n	80038ba <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2001      	movs	r0, #1
 80038aa:	4798      	blx	r3
			--try_count;
 80038ac:	7bbb      	ldrb	r3, [r7, #14]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 80038b2:	7bbb      	ldrb	r3, [r7, #14]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1d3      	bne.n	8003860 <bme280_init+0x24>
 80038b8:	e000      	b.n	80038bc <bme280_init+0x80>
				break;
 80038ba:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 80038bc:	7bbb      	ldrb	r3, [r7, #14]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 80038c2:	23fe      	movs	r3, #254	; 0xfe
 80038c4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80038c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 80038d2:	b590      	push	{r4, r7, lr}
 80038d4:	b087      	sub	sp, #28
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607b      	str	r3, [r7, #4]
 80038dc:	4603      	mov	r3, r0
 80038de:	73fb      	strb	r3, [r7, #15]
 80038e0:	4613      	mov	r3, r2
 80038e2:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f001 f9a5 	bl	8004c34 <null_ptr_check>
 80038ea:	4603      	mov	r3, r0
 80038ec:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80038ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d117      	bne.n	8003926 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	789b      	ldrb	r3, [r3, #2]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d003      	beq.n	8003906 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003904:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685c      	ldr	r4, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	7858      	ldrb	r0, [r3, #1]
 800390e:	89bb      	ldrh	r3, [r7, #12]
 8003910:	7bf9      	ldrb	r1, [r7, #15]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	47a0      	blx	r4
 8003916:	4603      	mov	r3, r0
 8003918:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 800391a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8003922:	23fc      	movs	r3, #252	; 0xfc
 8003924:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003926:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800392a:	4618      	mov	r0, r3
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	bd90      	pop	{r4, r7, pc}

08003932 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8003932:	b590      	push	{r4, r7, lr}
 8003934:	b08d      	sub	sp, #52	; 0x34
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	4613      	mov	r3, r2
 8003940:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	2b0a      	cmp	r3, #10
 8003946:	d901      	bls.n	800394c <bme280_set_regs+0x1a>
		len = 10;
 8003948:	230a      	movs	r3, #10
 800394a:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800394c:	6838      	ldr	r0, [r7, #0]
 800394e:	f001 f971 	bl	8004c34 <null_ptr_check>
 8003952:	4603      	mov	r3, r0
 8003954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8003958:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800395c:	2b00      	cmp	r3, #0
 800395e:	d154      	bne.n	8003a0a <bme280_set_regs+0xd8>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d051      	beq.n	8003a0a <bme280_set_regs+0xd8>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d04e      	beq.n	8003a0a <bme280_set_regs+0xd8>
		if (len != 0) {
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d047      	beq.n	8003a02 <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	789b      	ldrb	r3, [r3, #2]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d01a      	beq.n	80039b6 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003980:	2300      	movs	r3, #0
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003986:	e011      	b.n	80039ac <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8003988:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003996:	68f9      	ldr	r1, [r7, #12]
 8003998:	440b      	add	r3, r1
 800399a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80039a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039a6:	3301      	adds	r3, #1
 80039a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ac:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d3e8      	bcc.n	8003988 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d90b      	bls.n	80039d4 <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	f107 0114 	add.w	r1, r7, #20
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fff0 	bl	80049aa <interleave_reg_addr>
				temp_len = len * 2;
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80039d2:	e001      	b.n	80039d8 <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689c      	ldr	r4, [r3, #8]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	7858      	ldrb	r0, [r3, #1]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	7819      	ldrb	r1, [r3, #0]
 80039e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80039e6:	f107 0214 	add.w	r2, r7, #20
 80039ea:	47a0      	blx	r4
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 80039f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 80039fa:	23fc      	movs	r3, #252	; 0xfc
 80039fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8003a00:	e007      	b.n	8003a12 <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8003a02:	23fd      	movs	r3, #253	; 0xfd
 8003a04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8003a08:	e003      	b.n	8003a12 <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003a0a:	23ff      	movs	r3, #255	; 0xff
 8003a0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a10:	e000      	b.n	8003a14 <bme280_set_regs+0xe2>
		if (len != 0) {
 8003a12:	bf00      	nop
	}


	return rslt;
 8003a14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3734      	adds	r7, #52	; 0x34
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd90      	pop	{r4, r7, pc}

08003a20 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	6039      	str	r1, [r7, #0]
 8003a2a:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003a2c:	6838      	ldr	r0, [r7, #0]
 8003a2e:	f001 f901 	bl	8004c34 <null_ptr_check>
 8003a32:	4603      	mov	r3, r0
 8003a34:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8003a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d13f      	bne.n	8003abe <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8003a3e:	f107 030e 	add.w	r3, r7, #14
 8003a42:	6839      	ldr	r1, [r7, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 f874 	bl	8003b32 <bme280_get_sensor_mode>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8003a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d107      	bne.n	8003a66 <bme280_set_sensor_settings+0x46>
 8003a56:	7bbb      	ldrb	r3, [r7, #14]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8003a5c:	6838      	ldr	r0, [r7, #0]
 8003a5e:	f000 fb4e 	bl	80040fe <put_device_to_sleep>
 8003a62:	4603      	mov	r3, r0
 8003a64:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8003a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d127      	bne.n	8003abe <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	4619      	mov	r1, r3
 8003a72:	2007      	movs	r0, #7
 8003a74:	f001 f8c2 	bl	8004bfc <are_settings_changed>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 f98a 	bl	8003da2 <set_osr_settings>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8003a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d111      	bne.n	8003abe <bme280_set_sensor_settings+0x9e>
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	2018      	movs	r0, #24
 8003aa0:	f001 f8ac 	bl	8004bfc <are_settings_changed>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fa11 	bl	8003edc <set_filter_standby_settings>
 8003aba:	4603      	mov	r3, r0
 8003abc:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8003abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b084      	sub	sp, #16
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	6039      	str	r1, [r7, #0]
 8003ad4:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003ad6:	6838      	ldr	r0, [r7, #0]
 8003ad8:	f001 f8ac 	bl	8004c34 <null_ptr_check>
 8003adc:	4603      	mov	r3, r0
 8003ade:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8003ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d11e      	bne.n	8003b26 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8003ae8:	f107 030e 	add.w	r3, r7, #14
 8003aec:	6839      	ldr	r1, [r7, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 f81f 	bl	8003b32 <bme280_get_sensor_mode>
 8003af4:	4603      	mov	r3, r0
 8003af6:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8003af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d107      	bne.n	8003b10 <bme280_set_sensor_mode+0x46>
 8003b00:	7bbb      	ldrb	r3, [r7, #14]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d004      	beq.n	8003b10 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8003b06:	6838      	ldr	r0, [r7, #0]
 8003b08:	f000 faf9 	bl	80040fe <put_device_to_sleep>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8003b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	6839      	ldr	r1, [r7, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fabb 	bl	8004098 <write_power_mode>
 8003b22:	4603      	mov	r3, r0
 8003b24:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003b3c:	6838      	ldr	r0, [r7, #0]
 8003b3e:	f001 f879 	bl	8004c34 <null_ptr_check>
 8003b42:	4603      	mov	r3, r0
 8003b44:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8003b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10e      	bne.n	8003b6c <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2201      	movs	r2, #1
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	20f4      	movs	r0, #244	; 0xf4
 8003b56:	f7ff febc 	bl	80038d2 <bme280_get_regs>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8003b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8003b80:	23e0      	movs	r3, #224	; 0xe0
 8003b82:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8003b84:	23b6      	movs	r3, #182	; 0xb6
 8003b86:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f001 f853 	bl	8004c34 <null_ptr_check>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8003b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10d      	bne.n	8003bb6 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003b9a:	f107 010d 	add.w	r1, r7, #13
 8003b9e:	f107 000e 	add.w	r0, r7, #14
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f7ff fec4 	bl	8003932 <bme280_set_regs>
 8003baa:	4603      	mov	r3, r0
 8003bac:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2002      	movs	r0, #2
 8003bb4:	4798      	blx	r3
	}

	return rslt;
 8003bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b08a      	sub	sp, #40	; 0x28
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	4603      	mov	r3, r0
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8003bd8:	f107 0310 	add.w	r3, r7, #16
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f001 f825 	bl	8004c34 <null_ptr_check>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8003bf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d124      	bne.n	8003c42 <bme280_get_sensor_data+0x80>
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d021      	beq.n	8003c42 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8003bfe:	f107 011c 	add.w	r1, r7, #28
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2208      	movs	r2, #8
 8003c06:	20f7      	movs	r0, #247	; 0xf7
 8003c08:	f7ff fe63 	bl	80038d2 <bme280_get_regs>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8003c12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d116      	bne.n	8003c48 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8003c1a:	f107 0210 	add.w	r2, r7, #16
 8003c1e:	f107 031c 	add.w	r3, r7, #28
 8003c22:	4611      	mov	r1, r2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f815 	bl	8003c54 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3310      	adds	r3, #16
 8003c2e:	f107 0110 	add.w	r1, r7, #16
 8003c32:	7bf8      	ldrb	r0, [r7, #15]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	f000 f853 	bl	8003ce0 <bme280_compensate_data>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8003c40:	e002      	b.n	8003c48 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003c42:	23ff      	movs	r3, #255	; 0xff
 8003c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8003c48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3728      	adds	r7, #40	; 0x28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	031b      	lsls	r3, r3, #12
 8003c64:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3302      	adds	r3, #2
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	431a      	orrs	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3303      	adds	r3, #3
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	031b      	lsls	r3, r3, #12
 8003c92:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3305      	adds	r3, #5
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	091b      	lsrs	r3, r3, #4
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3306      	adds	r3, #6
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3307      	adds	r3, #7
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	609a      	str	r2, [r3, #8]
}
 8003cd4:	bf00      	nop
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	4603      	mov	r3, r0
 8003cee:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d04b      	beq.n	8003d92 <bme280_compensate_data+0xb2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d048      	beq.n	8003d92 <bme280_compensate_data+0xb2>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d045      	beq.n	8003d92 <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8003d3a:	6839      	ldr	r1, [r7, #0]
 8003d3c:	68b8      	ldr	r0, [r7, #8]
 8003d3e:	f000 fa2b 	bl	8004198 <compensate_temperature>
 8003d42:	eeb0 7a40 	vmov.f32	s14, s0
 8003d46:	eef0 7a60 	vmov.f32	s15, s1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8003d5a:	6839      	ldr	r1, [r7, #0]
 8003d5c:	68b8      	ldr	r0, [r7, #8]
 8003d5e:	f000 faef 	bl	8004340 <compensate_pressure>
 8003d62:	eeb0 7a40 	vmov.f32	s14, s0
 8003d66:	eef0 7a60 	vmov.f32	s15, s1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00d      	beq.n	8003d96 <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8003d7a:	6839      	ldr	r1, [r7, #0]
 8003d7c:	68b8      	ldr	r0, [r7, #8]
 8003d7e:	f000 fcaf 	bl	80046e0 <compensate_humidity>
 8003d82:	eeb0 7a40 	vmov.f32	s14, s0
 8003d86:	eef0 7a60 	vmov.f32	s15, s1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 8003d90:	e001      	b.n	8003d96 <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003d92:	23ff      	movs	r3, #255	; 0xff
 8003d94:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b086      	sub	sp, #24
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	4603      	mov	r3, r0
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
 8003dae:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8003db0:	2301      	movs	r3, #1
 8003db2:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d005      	beq.n	8003dca <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	68b8      	ldr	r0, [r7, #8]
 8003dc2:	f000 f815 	bl	8003df0 <set_osr_humidity_settings>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d007      	beq.n	8003de4 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f842 	bl	8003e64 <set_osr_press_temp_settings>
 8003de0:	4603      	mov	r3, r0
 8003de2:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8003de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8003dfa:	23f2      	movs	r3, #242	; 0xf2
 8003dfc:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	789b      	ldrb	r3, [r3, #2]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8003e0a:	f107 010e 	add.w	r1, r7, #14
 8003e0e:	f107 000c 	add.w	r0, r7, #12
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f7ff fd8c 	bl	8003932 <bme280_set_regs>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8003e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d118      	bne.n	8003e58 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8003e26:	23f4      	movs	r3, #244	; 0xf4
 8003e28:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8003e2a:	7b38      	ldrb	r0, [r7, #12]
 8003e2c:	f107 010d 	add.w	r1, r7, #13
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f7ff fd4d 	bl	80038d2 <bme280_get_regs>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8003e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d109      	bne.n	8003e58 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8003e44:	f107 010d 	add.w	r1, r7, #13
 8003e48:	f107 000c 	add.w	r0, r7, #12
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f7ff fd6f 	bl	8003932 <bme280_set_regs>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8003e72:	23f4      	movs	r3, #244	; 0xf4
 8003e74:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003e76:	7db8      	ldrb	r0, [r7, #22]
 8003e78:	f107 0115 	add.w	r1, r7, #21
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f7ff fd27 	bl	80038d2 <bme280_get_regs>
 8003e84:	4603      	mov	r3, r0
 8003e86:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8003e88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d11f      	bne.n	8003ed0 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 8003e9a:	f107 0315 	add.w	r3, r7, #21
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 f88e 	bl	8003fc2 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8003eb0:	f107 0315 	add.w	r3, r7, #21
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f8a0 	bl	8003ffc <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003ebc:	f107 0115 	add.w	r1, r7, #21
 8003ec0:	f107 0016 	add.w	r0, r7, #22
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f7ff fd33 	bl	8003932 <bme280_set_regs>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8003eea:	23f5      	movs	r3, #245	; 0xf5
 8003eec:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003eee:	7db8      	ldrb	r0, [r7, #22]
 8003ef0:	f107 0115 	add.w	r1, r7, #21
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f7ff fceb 	bl	80038d2 <bme280_get_regs>
 8003efc:	4603      	mov	r3, r0
 8003efe:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8003f00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d11f      	bne.n	8003f48 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d005      	beq.n	8003f1e <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8003f12:	f107 0315 	add.w	r3, r7, #21
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 f81b 	bl	8003f54 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8003f28:	f107 0315 	add.w	r3, r7, #21
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 f82d 	bl	8003f8e <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003f34:	f107 0115 	add.w	r1, r7, #21
 8003f38:	f107 0016 	add.w	r0, r7, #22
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f7ff fcf7 	bl	8003932 <bme280_set_regs>
 8003f44:	4603      	mov	r3, r0
 8003f46:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003f48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	b25b      	sxtb	r3, r3
 8003f64:	f023 031c 	bic.w	r3, r3, #28
 8003f68:	b25a      	sxtb	r2, r3
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	78db      	ldrb	r3, [r3, #3]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	b25b      	sxtb	r3, r3
 8003f72:	f003 031c 	and.w	r3, r3, #28
 8003f76:	b25b      	sxtb	r3, r3
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	b25b      	sxtb	r3, r3
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	701a      	strb	r2, [r3, #0]
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	b25b      	sxtb	r3, r3
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	b25a      	sxtb	r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	791b      	ldrb	r3, [r3, #4]
 8003fa8:	015b      	lsls	r3, r3, #5
 8003faa:	b25b      	sxtb	r3, r3
 8003fac:	4313      	orrs	r3, r2
 8003fae:	b25b      	sxtb	r3, r3
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	701a      	strb	r2, [r3, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	b25b      	sxtb	r3, r3
 8003fd2:	f023 031c 	bic.w	r3, r3, #28
 8003fd6:	b25a      	sxtb	r2, r3
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	b25b      	sxtb	r3, r3
 8003fe0:	f003 031c 	and.w	r3, r3, #28
 8003fe4:	b25b      	sxtb	r3, r3
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	b25b      	sxtb	r3, r3
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	701a      	strb	r2, [r3, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	b25b      	sxtb	r3, r3
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	b25a      	sxtb	r2, r3
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	785b      	ldrb	r3, [r3, #1]
 8004016:	015b      	lsls	r3, r3, #5
 8004018:	b25b      	sxtb	r3, r3
 800401a:	4313      	orrs	r3, r2
 800401c:	b25b      	sxtb	r3, r3
 800401e:	b2da      	uxtb	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	701a      	strb	r2, [r3, #0]
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	b2da      	uxtb	r2, r3
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3302      	adds	r3, #2
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	109b      	asrs	r3, r3, #2
 8004050:	b2db      	uxtb	r3, r3
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	b2da      	uxtb	r2, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3302      	adds	r3, #2
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	b2da      	uxtb	r2, r3
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3303      	adds	r3, #3
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	109b      	asrs	r3, r3, #2
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	b2da      	uxtb	r2, r3
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3303      	adds	r3, #3
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	b2da      	uxtb	r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	711a      	strb	r2, [r3, #4]
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	6039      	str	r1, [r7, #0]
 80040a2:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80040a4:	23f4      	movs	r3, #244	; 0xf4
 80040a6:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80040a8:	7bb8      	ldrb	r0, [r7, #14]
 80040aa:	f107 010d 	add.w	r1, r7, #13
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f7ff fc0e 	bl	80038d2 <bme280_get_regs>
 80040b6:	4603      	mov	r3, r0
 80040b8:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80040ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d117      	bne.n	80040f2 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80040c2:	7b7b      	ldrb	r3, [r7, #13]
 80040c4:	b25b      	sxtb	r3, r3
 80040c6:	f023 0303 	bic.w	r3, r3, #3
 80040ca:	b25a      	sxtb	r2, r3
 80040cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	b25b      	sxtb	r3, r3
 80040d6:	4313      	orrs	r3, r2
 80040d8:	b25b      	sxtb	r3, r3
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80040de:	f107 010d 	add.w	r1, r7, #13
 80040e2:	f107 000e 	add.w	r0, r7, #14
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f7ff fc22 	bl	8003932 <bme280_set_regs>
 80040ee:	4603      	mov	r3, r0
 80040f0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80040f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b086      	sub	sp, #24
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8004106:	f107 0110 	add.w	r1, r7, #16
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2204      	movs	r2, #4
 800410e:	20f2      	movs	r0, #242	; 0xf2
 8004110:	f7ff fbdf 	bl	80038d2 <bme280_get_regs>
 8004114:	4603      	mov	r3, r0
 8004116:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8004118:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d118      	bne.n	8004152 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8004120:	f107 0208 	add.w	r2, r7, #8
 8004124:	f107 0310 	add.w	r3, r7, #16
 8004128:	4611      	mov	r1, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff ff80 	bl	8004030 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff fd21 	bl	8003b78 <bme280_soft_reset>
 8004136:	4603      	mov	r3, r0
 8004138:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 800413a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d107      	bne.n	8004152 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8004142:	f107 0308 	add.w	r3, r7, #8
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4618      	mov	r0, r3
 800414a:	f000 f808 	bl	800415e <reload_device_settings>
 800414e:	4603      	mov	r3, r0
 8004150:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8004152:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	201f      	movs	r0, #31
 800416e:	f7ff fe18 	bl	8003da2 <set_osr_settings>
 8004172:	4603      	mov	r3, r0
 8004174:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 8004176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	201f      	movs	r0, #31
 8004184:	f7ff feaa 	bl	8003edc <set_filter_standby_settings>
 8004188:	4603      	mov	r3, r0
 800418a:	73fb      	strb	r3, [r7, #15]

	return rslt;
 800418c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8004198:	b5b0      	push	{r4, r5, r7, lr}
 800419a:	b08c      	sub	sp, #48	; 0x30
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	4b5f      	ldr	r3, [pc, #380]	; (8004324 <compensate_temperature+0x18c>)
 80041a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	4b5d      	ldr	r3, [pc, #372]	; (8004328 <compensate_temperature+0x190>)
 80041b2:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fc f946 	bl	800044c <__aeabi_ui2d>
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	4b59      	ldr	r3, [pc, #356]	; (800432c <compensate_temperature+0x194>)
 80041c6:	f7fc fae5 	bl	8000794 <__aeabi_ddiv>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4614      	mov	r4, r2
 80041d0:	461d      	mov	r5, r3
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fc f938 	bl	800044c <__aeabi_ui2d>
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	4b53      	ldr	r3, [pc, #332]	; (8004330 <compensate_temperature+0x198>)
 80041e2:	f7fc fad7 	bl	8000794 <__aeabi_ddiv>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4620      	mov	r0, r4
 80041ec:	4629      	mov	r1, r5
 80041ee:	f7fb ffef 	bl	80001d0 <__aeabi_dsub>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004200:	4618      	mov	r0, r3
 8004202:	f7fc f933 	bl	800046c <__aeabi_i2d>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800420e:	f7fc f997 	bl	8000540 <__aeabi_dmul>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fc f914 	bl	800044c <__aeabi_ui2d>
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800422c:	f7fc fab2 	bl	8000794 <__aeabi_ddiv>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4614      	mov	r4, r2
 8004236:	461d      	mov	r5, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f7fc f905 	bl	800044c <__aeabi_ui2d>
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	4b3b      	ldr	r3, [pc, #236]	; (8004334 <compensate_temperature+0x19c>)
 8004248:	f7fc faa4 	bl	8000794 <__aeabi_ddiv>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4620      	mov	r0, r4
 8004252:	4629      	mov	r1, r5
 8004254:	f7fb ffbc 	bl	80001d0 <__aeabi_dsub>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8004260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004264:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004268:	f7fc f96a 	bl	8000540 <__aeabi_dmul>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4614      	mov	r4, r2
 8004272:	461d      	mov	r5, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800427a:	4618      	mov	r0, r3
 800427c:	f7fc f8f6 	bl	800046c <__aeabi_i2d>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4620      	mov	r0, r4
 8004286:	4629      	mov	r1, r5
 8004288:	f7fc f95a 	bl	8000540 <__aeabi_dmul>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 8004294:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004298:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800429c:	f7fb ff9a 	bl	80001d4 <__adddf3>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4610      	mov	r0, r2
 80042a6:	4619      	mov	r1, r3
 80042a8:	f7fc fbe4 	bl	8000a74 <__aeabi_d2iz>
 80042ac:	4602      	mov	r2, r0
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 80042b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042ba:	f7fb ff8b 	bl	80001d4 <__adddf3>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4610      	mov	r0, r2
 80042c4:	4619      	mov	r1, r3
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	4b1b      	ldr	r3, [pc, #108]	; (8004338 <compensate_temperature+0x1a0>)
 80042cc:	f7fc fa62 	bl	8000794 <__aeabi_ddiv>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 80042d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042e0:	f7fc fba0 	bl	8000a24 <__aeabi_dcmplt>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d004      	beq.n	80042f4 <compensate_temperature+0x15c>
		temperature = temperature_min;
 80042ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80042f2:	e00c      	b.n	800430e <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 80042f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042fc:	f7fc fbb0 	bl	8000a60 <__aeabi_dcmpgt>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <compensate_temperature+0x176>
		temperature = temperature_max;
 8004306:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800430a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 800430e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004312:	ec43 2b17 	vmov	d7, r2, r3
}
 8004316:	eeb0 0a47 	vmov.f32	s0, s14
 800431a:	eef0 0a67 	vmov.f32	s1, s15
 800431e:	3730      	adds	r7, #48	; 0x30
 8004320:	46bd      	mov	sp, r7
 8004322:	bdb0      	pop	{r4, r5, r7, pc}
 8004324:	c0440000 	.word	0xc0440000
 8004328:	40554000 	.word	0x40554000
 800432c:	40d00000 	.word	0x40d00000
 8004330:	40900000 	.word	0x40900000
 8004334:	40c00000 	.word	0x40c00000
 8004338:	40b40000 	.word	0x40b40000
 800433c:	00000000 	.word	0x00000000

08004340 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8004340:	b5b0      	push	{r4, r5, r7, lr}
 8004342:	b08e      	sub	sp, #56	; 0x38
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 800434a:	a3d9      	add	r3, pc, #868	; (adr r3, 80046b0 <compensate_pressure+0x370>)
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 8004354:	a3d8      	add	r3, pc, #864	; (adr r3, 80046b8 <compensate_pressure+0x378>)
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	4618      	mov	r0, r3
 8004364:	f7fc f882 	bl	800046c <__aeabi_i2d>
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004370:	f7fc fa10 	bl	8000794 <__aeabi_ddiv>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4610      	mov	r0, r2
 800437a:	4619      	mov	r1, r3
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	4bc1      	ldr	r3, [pc, #772]	; (8004688 <compensate_pressure+0x348>)
 8004382:	f7fb ff25 	bl	80001d0 <__aeabi_dsub>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 800438e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004392:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004396:	f7fc f8d3 	bl	8000540 <__aeabi_dmul>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4614      	mov	r4, r2
 80043a0:	461d      	mov	r5, r3
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fc f85f 	bl	800046c <__aeabi_i2d>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4620      	mov	r0, r4
 80043b4:	4629      	mov	r1, r5
 80043b6:	f7fc f8c3 	bl	8000540 <__aeabi_dmul>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	4bb1      	ldr	r3, [pc, #708]	; (800468c <compensate_pressure+0x34c>)
 80043c8:	f7fc f9e4 	bl	8000794 <__aeabi_ddiv>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fc f846 	bl	800046c <__aeabi_i2d>
 80043e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043e4:	f7fc f8ac 	bl	8000540 <__aeabi_dmul>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	f7fb feee 	bl	80001d4 <__adddf3>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004400:	f7fb fee8 	bl	80001d4 <__adddf3>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	4b9f      	ldr	r3, [pc, #636]	; (8004690 <compensate_pressure+0x350>)
 8004412:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004416:	f7fc f9bd 	bl	8000794 <__aeabi_ddiv>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4614      	mov	r4, r2
 8004420:	461d      	mov	r5, r3
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc f81f 	bl	800046c <__aeabi_i2d>
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	4b98      	ldr	r3, [pc, #608]	; (8004694 <compensate_pressure+0x354>)
 8004434:	f7fc f884 	bl	8000540 <__aeabi_dmul>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4620      	mov	r0, r4
 800443e:	4629      	mov	r1, r5
 8004440:	f7fb fec8 	bl	80001d4 <__adddf3>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004452:	4618      	mov	r0, r3
 8004454:	f7fc f80a 	bl	800046c <__aeabi_i2d>
 8004458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800445c:	f7fc f870 	bl	8000540 <__aeabi_dmul>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4610      	mov	r0, r2
 8004466:	4619      	mov	r1, r3
 8004468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800446c:	f7fc f868 	bl	8000540 <__aeabi_dmul>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4610      	mov	r0, r2
 8004476:	4619      	mov	r1, r3
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	4b86      	ldr	r3, [pc, #536]	; (8004698 <compensate_pressure+0x358>)
 800447e:	f7fc f989 	bl	8000794 <__aeabi_ddiv>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004490:	4618      	mov	r0, r3
 8004492:	f7fb ffeb 	bl	800046c <__aeabi_i2d>
 8004496:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800449a:	f7fc f851 	bl	8000540 <__aeabi_dmul>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4610      	mov	r0, r2
 80044a4:	4619      	mov	r1, r3
 80044a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044aa:	f7fb fe93 	bl	80001d4 <__adddf3>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	4b77      	ldr	r3, [pc, #476]	; (8004698 <compensate_pressure+0x358>)
 80044bc:	f7fc f96a 	bl	8000794 <__aeabi_ddiv>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	4b6f      	ldr	r3, [pc, #444]	; (800468c <compensate_pressure+0x34c>)
 80044ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80044d2:	f7fc f95f 	bl	8000794 <__aeabi_ddiv>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4610      	mov	r0, r2
 80044dc:	4619      	mov	r1, r3
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	4b6e      	ldr	r3, [pc, #440]	; (800469c <compensate_pressure+0x35c>)
 80044e4:	f7fb fe76 	bl	80001d4 <__adddf3>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4614      	mov	r4, r2
 80044ee:	461d      	mov	r5, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	88db      	ldrh	r3, [r3, #6]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fb ffa9 	bl	800044c <__aeabi_ui2d>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4620      	mov	r0, r4
 8004500:	4629      	mov	r1, r5
 8004502:	f7fc f81d 	bl	8000540 <__aeabi_dmul>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800451a:	f7fc fa79 	bl	8000a10 <__aeabi_dcmpeq>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	f040 80cd 	bne.w	80046c0 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fb ff8e 	bl	800044c <__aeabi_ui2d>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	f04f 0000 	mov.w	r0, #0
 8004538:	4959      	ldr	r1, [pc, #356]	; (80046a0 <compensate_pressure+0x360>)
 800453a:	f7fb fe49 	bl	80001d0 <__aeabi_dsub>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	4b56      	ldr	r3, [pc, #344]	; (80046a4 <compensate_pressure+0x364>)
 800454c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004550:	f7fc f920 	bl	8000794 <__aeabi_ddiv>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800455c:	f7fb fe38 	bl	80001d0 <__aeabi_dsub>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4610      	mov	r0, r2
 8004566:	4619      	mov	r1, r3
 8004568:	a345      	add	r3, pc, #276	; (adr r3, 8004680 <compensate_pressure+0x340>)
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f7fb ffe7 	bl	8000540 <__aeabi_dmul>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4610      	mov	r0, r2
 8004578:	4619      	mov	r1, r3
 800457a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800457e:	f7fc f909 	bl	8000794 <__aeabi_ddiv>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004590:	4618      	mov	r0, r3
 8004592:	f7fb ff6b 	bl	800046c <__aeabi_i2d>
 8004596:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800459a:	f7fb ffd1 	bl	8000540 <__aeabi_dmul>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4610      	mov	r0, r2
 80045a4:	4619      	mov	r1, r3
 80045a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045aa:	f7fb ffc9 	bl	8000540 <__aeabi_dmul>
 80045ae:	4602      	mov	r2, r0
 80045b0:	460b      	mov	r3, r1
 80045b2:	4610      	mov	r0, r2
 80045b4:	4619      	mov	r1, r3
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	4b3b      	ldr	r3, [pc, #236]	; (80046a8 <compensate_pressure+0x368>)
 80045bc:	f7fc f8ea 	bl	8000794 <__aeabi_ddiv>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fb ff4c 	bl	800046c <__aeabi_i2d>
 80045d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045d8:	f7fb ffb2 	bl	8000540 <__aeabi_dmul>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4610      	mov	r0, r2
 80045e2:	4619      	mov	r1, r3
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	4b28      	ldr	r3, [pc, #160]	; (800468c <compensate_pressure+0x34c>)
 80045ea:	f7fc f8d3 	bl	8000794 <__aeabi_ddiv>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 80045f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80045fe:	f7fb fde9 	bl	80001d4 <__adddf3>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4614      	mov	r4, r2
 8004608:	461d      	mov	r5, r3
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004610:	4618      	mov	r0, r3
 8004612:	f7fb ff2b 	bl	800046c <__aeabi_i2d>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4620      	mov	r0, r4
 800461c:	4629      	mov	r1, r5
 800461e:	f7fb fdd9 	bl	80001d4 <__adddf3>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	4b1f      	ldr	r3, [pc, #124]	; (80046ac <compensate_pressure+0x36c>)
 8004630:	f7fc f8b0 	bl	8000794 <__aeabi_ddiv>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800463c:	f7fb fdca 	bl	80001d4 <__adddf3>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8004648:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800464c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004650:	f7fc f9e8 	bl	8000a24 <__aeabi_dcmplt>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d004      	beq.n	8004664 <compensate_pressure+0x324>
			pressure = pressure_min;
 800465a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800465e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004662:	e031      	b.n	80046c8 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 8004664:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004668:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800466c:	f7fc f9f8 	bl	8000a60 <__aeabi_dcmpgt>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d028      	beq.n	80046c8 <compensate_pressure+0x388>
			pressure = pressure_max;
 8004676:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800467a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800467e:	e023      	b.n	80046c8 <compensate_pressure+0x388>
 8004680:	00000000 	.word	0x00000000
 8004684:	40b86a00 	.word	0x40b86a00
 8004688:	40ef4000 	.word	0x40ef4000
 800468c:	40e00000 	.word	0x40e00000
 8004690:	40100000 	.word	0x40100000
 8004694:	40f00000 	.word	0x40f00000
 8004698:	41200000 	.word	0x41200000
 800469c:	3ff00000 	.word	0x3ff00000
 80046a0:	41300000 	.word	0x41300000
 80046a4:	40b00000 	.word	0x40b00000
 80046a8:	41e00000 	.word	0x41e00000
 80046ac:	40300000 	.word	0x40300000
 80046b0:	00000000 	.word	0x00000000
 80046b4:	40dd4c00 	.word	0x40dd4c00
 80046b8:	00000000 	.word	0x00000000
 80046bc:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 80046c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 80046c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80046cc:	ec43 2b17 	vmov	d7, r2, r3
}
 80046d0:	eeb0 0a47 	vmov.f32	s0, s14
 80046d4:	eef0 0a67 	vmov.f32	s1, s15
 80046d8:	3738      	adds	r7, #56	; 0x38
 80046da:	46bd      	mov	sp, r7
 80046dc:	bdb0      	pop	{r4, r5, r7, pc}
 80046de:	bf00      	nop

080046e0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80046e0:	b5b0      	push	{r4, r5, r7, lr}
 80046e2:	b094      	sub	sp, #80	; 0x50
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	4b81      	ldr	r3, [pc, #516]	; (8004900 <compensate_humidity+0x220>)
 80046fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	4618      	mov	r0, r3
 8004706:	f7fb feb1 	bl	800046c <__aeabi_i2d>
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	4b7d      	ldr	r3, [pc, #500]	; (8004904 <compensate_humidity+0x224>)
 8004710:	f7fb fd5e 	bl	80001d0 <__aeabi_dsub>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004722:	4618      	mov	r0, r3
 8004724:	f7fb fea2 	bl	800046c <__aeabi_i2d>
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	4b76      	ldr	r3, [pc, #472]	; (8004908 <compensate_humidity+0x228>)
 800472e:	f7fb ff07 	bl	8000540 <__aeabi_dmul>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4614      	mov	r4, r2
 8004738:	461d      	mov	r5, r3
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004740:	4618      	mov	r0, r3
 8004742:	f7fb fe93 	bl	800046c <__aeabi_i2d>
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	4b70      	ldr	r3, [pc, #448]	; (800490c <compensate_humidity+0x22c>)
 800474c:	f7fc f822 	bl	8000794 <__aeabi_ddiv>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4610      	mov	r0, r2
 8004756:	4619      	mov	r1, r3
 8004758:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800475c:	f7fb fef0 	bl	8000540 <__aeabi_dmul>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4620      	mov	r0, r4
 8004766:	4629      	mov	r1, r5
 8004768:	f7fb fd34 	bl	80001d4 <__adddf3>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4618      	mov	r0, r3
 800477a:	f7fb fe67 	bl	800044c <__aeabi_ui2d>
 800477e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004782:	f7fb fd25 	bl	80001d0 <__aeabi_dsub>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004794:	4618      	mov	r0, r3
 8004796:	f7fb fe69 	bl	800046c <__aeabi_i2d>
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	4b5c      	ldr	r3, [pc, #368]	; (8004910 <compensate_humidity+0x230>)
 80047a0:	f7fb fff8 	bl	8000794 <__aeabi_ddiv>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	7f1b      	ldrb	r3, [r3, #28]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fb fe4b 	bl	800044c <__aeabi_ui2d>
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	4b56      	ldr	r3, [pc, #344]	; (8004914 <compensate_humidity+0x234>)
 80047bc:	f7fb ffea 	bl	8000794 <__aeabi_ddiv>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4610      	mov	r0, r2
 80047c6:	4619      	mov	r1, r3
 80047c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047cc:	f7fb feb8 	bl	8000540 <__aeabi_dmul>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	4b4e      	ldr	r3, [pc, #312]	; (8004918 <compensate_humidity+0x238>)
 80047de:	f7fb fcf9 	bl	80001d4 <__adddf3>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fb fe3b 	bl	800046c <__aeabi_i2d>
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	4b46      	ldr	r3, [pc, #280]	; (8004914 <compensate_humidity+0x234>)
 80047fc:	f7fb ffca 	bl	8000794 <__aeabi_ddiv>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4610      	mov	r0, r2
 8004806:	4619      	mov	r1, r3
 8004808:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800480c:	f7fb fe98 	bl	8000540 <__aeabi_dmul>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4610      	mov	r0, r2
 8004816:	4619      	mov	r1, r3
 8004818:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800481c:	f7fb fe90 	bl	8000540 <__aeabi_dmul>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4610      	mov	r0, r2
 8004826:	4619      	mov	r1, r3
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	4b3a      	ldr	r3, [pc, #232]	; (8004918 <compensate_humidity+0x238>)
 800482e:	f7fb fcd1 	bl	80001d4 <__adddf3>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 800483a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800483e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004842:	f7fb fe7d 	bl	8000540 <__aeabi_dmul>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4614      	mov	r4, r2
 800484c:	461d      	mov	r5, r3
 800484e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004852:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004856:	f7fb fe73 	bl	8000540 <__aeabi_dmul>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4620      	mov	r0, r4
 8004860:	4629      	mov	r1, r5
 8004862:	f7fb fe6d 	bl	8000540 <__aeabi_dmul>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	7e1b      	ldrb	r3, [r3, #24]
 8004872:	4618      	mov	r0, r3
 8004874:	f7fb fdea 	bl	800044c <__aeabi_ui2d>
 8004878:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800487c:	f7fb fe60 	bl	8000540 <__aeabi_dmul>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4610      	mov	r0, r2
 8004886:	4619      	mov	r1, r3
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	4b23      	ldr	r3, [pc, #140]	; (800491c <compensate_humidity+0x23c>)
 800488e:	f7fb ff81 	bl	8000794 <__aeabi_ddiv>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	f04f 0000 	mov.w	r0, #0
 800489a:	491f      	ldr	r1, [pc, #124]	; (8004918 <compensate_humidity+0x238>)
 800489c:	f7fb fc98 	bl	80001d0 <__aeabi_dsub>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048a8:	f7fb fe4a 	bl	8000540 <__aeabi_dmul>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 80048b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048b8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80048bc:	f7fc f8d0 	bl	8000a60 <__aeabi_dcmpgt>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d004      	beq.n	80048d0 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 80048c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048ca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80048ce:	e00c      	b.n	80048ea <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 80048d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048d4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80048d8:	f7fc f8a4 	bl	8000a24 <__aeabi_dcmplt>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <compensate_humidity+0x20a>
		humidity = humidity_min;
 80048e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 80048ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048ee:	ec43 2b17 	vmov	d7, r2, r3
}
 80048f2:	eeb0 0a47 	vmov.f32	s0, s14
 80048f6:	eef0 0a67 	vmov.f32	s1, s15
 80048fa:	3750      	adds	r7, #80	; 0x50
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004900:	40590000 	.word	0x40590000
 8004904:	40f2c000 	.word	0x40f2c000
 8004908:	40500000 	.word	0x40500000
 800490c:	40d00000 	.word	0x40d00000
 8004910:	40f00000 	.word	0x40f00000
 8004914:	41900000 	.word	0x41900000
 8004918:	3ff00000 	.word	0x3ff00000
 800491c:	41200000 	.word	0x41200000

08004920 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08a      	sub	sp, #40	; 0x28
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8004928:	2388      	movs	r3, #136	; 0x88
 800492a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	f107 0310 	add.w	r3, r7, #16
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	605a      	str	r2, [r3, #4]
 800493c:	609a      	str	r2, [r3, #8]
 800493e:	60da      	str	r2, [r3, #12]
 8004940:	611a      	str	r2, [r3, #16]
 8004942:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8004944:	f107 010c 	add.w	r1, r7, #12
 8004948:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	221a      	movs	r2, #26
 8004950:	f7fe ffbf 	bl	80038d2 <bme280_get_regs>
 8004954:	4603      	mov	r3, r0
 8004956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 800495a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800495e:	2b00      	cmp	r3, #0
 8004960:	d11d      	bne.n	800499e <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8004962:	f107 030c 	add.w	r3, r7, #12
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4618      	mov	r0, r3
 800496a:	f000 f84a 	bl	8004a02 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800496e:	23e1      	movs	r3, #225	; 0xe1
 8004970:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8004974:	f107 010c 	add.w	r1, r7, #12
 8004978:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2207      	movs	r2, #7
 8004980:	f7fe ffa7 	bl	80038d2 <bme280_get_regs>
 8004984:	4603      	mov	r3, r0
 8004986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 800498a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800498e:	2b00      	cmp	r3, #0
 8004990:	d105      	bne.n	800499e <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8004992:	f107 030c 	add.w	r3, r7, #12
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	f000 f8e1 	bl	8004b60 <parse_humidity_calib_data>
		}
	}

	return rslt;
 800499e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3728      	adds	r7, #40	; 0x28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b087      	sub	sp, #28
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80049b8:	2301      	movs	r3, #1
 80049ba:	75fb      	strb	r3, [r7, #23]
 80049bc:	e016      	b.n	80049ec <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80049be:	7dfb      	ldrb	r3, [r7, #23]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	441a      	add	r2, r3
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	3b01      	subs	r3, #1
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	440b      	add	r3, r1
 80049ce:	7812      	ldrb	r2, [r2, #0]
 80049d0:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	441a      	add	r2, r3
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	4619      	mov	r1, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	440b      	add	r3, r1
 80049e2:	7812      	ldrb	r2, [r2, #0]
 80049e4:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
 80049e8:	3301      	adds	r3, #1
 80049ea:	75fb      	strb	r3, [r7, #23]
 80049ec:	7dfa      	ldrb	r2, [r7, #23]
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d3e4      	bcc.n	80049be <interleave_reg_addr+0x14>
	}
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	3310      	adds	r3, #16
 8004a10:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3301      	adds	r3, #1
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	b21a      	sxth	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	b21b      	sxth	r3, r3
 8004a22:	4313      	orrs	r3, r2
 8004a24:	b21b      	sxth	r3, r3
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3303      	adds	r3, #3
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	b21a      	sxth	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3302      	adds	r3, #2
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	b21b      	sxth	r3, r3
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	b21a      	sxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3305      	adds	r3, #5
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	b21a      	sxth	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3304      	adds	r3, #4
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	b21b      	sxth	r3, r3
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	b21a      	sxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3307      	adds	r3, #7
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	b21a      	sxth	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3306      	adds	r3, #6
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	b21b      	sxth	r3, r3
 8004a72:	4313      	orrs	r3, r2
 8004a74:	b21b      	sxth	r3, r3
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3309      	adds	r3, #9
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	b21a      	sxth	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3308      	adds	r3, #8
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	b21b      	sxth	r3, r3
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	b21a      	sxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	330b      	adds	r3, #11
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	b21a      	sxth	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	330a      	adds	r3, #10
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	b21b      	sxth	r3, r3
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	b21a      	sxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	330d      	adds	r3, #13
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	b21a      	sxth	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	330c      	adds	r3, #12
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	b21b      	sxth	r3, r3
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	b21a      	sxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	330f      	adds	r3, #15
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	b21a      	sxth	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	330e      	adds	r3, #14
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	b21b      	sxth	r3, r3
 8004adc:	4313      	orrs	r3, r2
 8004ade:	b21a      	sxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3311      	adds	r3, #17
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	b21a      	sxth	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3310      	adds	r3, #16
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	b21b      	sxth	r3, r3
 8004af6:	4313      	orrs	r3, r2
 8004af8:	b21a      	sxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3313      	adds	r3, #19
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	b21a      	sxth	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3312      	adds	r3, #18
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	b21b      	sxth	r3, r3
 8004b10:	4313      	orrs	r3, r2
 8004b12:	b21a      	sxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3315      	adds	r3, #21
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	b21a      	sxth	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3314      	adds	r3, #20
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	b21b      	sxth	r3, r3
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	b21a      	sxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3317      	adds	r3, #23
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	b21a      	sxth	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3316      	adds	r3, #22
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	b21b      	sxth	r3, r3
 8004b44:	4313      	orrs	r3, r2
 8004b46:	b21a      	sxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	7e5a      	ldrb	r2, [r3, #25]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	761a      	strb	r2, [r3, #24]

}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	3310      	adds	r3, #16
 8004b6e:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3301      	adds	r3, #1
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	b21a      	sxth	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	b21b      	sxth	r3, r3
 8004b80:	4313      	orrs	r3, r2
 8004b82:	b21a      	sxth	r2, r3
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	789a      	ldrb	r2, [r3, #2]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3303      	adds	r3, #3
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	b25b      	sxtb	r3, r3
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b21b      	sxth	r3, r3
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8004bae:	8a7a      	ldrh	r2, [r7, #18]
 8004bb0:	8a3b      	ldrh	r3, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	b21a      	sxth	r2, r3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3305      	adds	r3, #5
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	b25b      	sxtb	r3, r3
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8004bd6:	89fa      	ldrh	r2, [r7, #14]
 8004bd8:	89bb      	ldrh	r3, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	b21a      	sxth	r2, r3
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3306      	adds	r3, #6
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	b25a      	sxtb	r2, r3
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	460a      	mov	r2, r1
 8004c06:	71fb      	strb	r3, [r7, #7]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8004c10:	79fa      	ldrb	r2, [r7, #7]
 8004c12:	79bb      	ldrb	r3, [r7, #6]
 8004c14:	4013      	ands	r3, r2
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	e001      	b.n	8004c26 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8004c22:	2300      	movs	r3, #0
 8004c24:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00b      	beq.n	8004c5a <null_ptr_check+0x26>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <null_ptr_check+0x26>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <null_ptr_check+0x26>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d102      	bne.n	8004c60 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8004c5a:	23ff      	movs	r3, #255	; 0xff
 8004c5c:	73fb      	strb	r3, [r7, #15]
 8004c5e:	e001      	b.n	8004c64 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8004c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <user_i2c_read>:


int8_t init_bme280(void);

int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	603a      	str	r2, [r7, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	71fb      	strb	r3, [r7, #7]
 8004c82:	460b      	mov	r3, r1
 8004c84:	71bb      	strb	r3, [r7, #6]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	b299      	uxth	r1, r3
 8004c92:	1dba      	adds	r2, r7, #6
 8004c94:	230a      	movs	r3, #10
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4811      	ldr	r0, [pc, #68]	; (8004ce0 <user_i2c_read+0x6c>)
 8004c9c:	f002 fd44 	bl	8007728 <HAL_I2C_Master_Transmit>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <user_i2c_read+0x38>
 8004ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004caa:	e014      	b.n	8004cd6 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	b21b      	sxth	r3, r3
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	b21b      	sxth	r3, r3
 8004cb8:	b299      	uxth	r1, r3
 8004cba:	88bb      	ldrh	r3, [r7, #4]
 8004cbc:	220a      	movs	r2, #10
 8004cbe:	9200      	str	r2, [sp, #0]
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	4807      	ldr	r0, [pc, #28]	; (8004ce0 <user_i2c_read+0x6c>)
 8004cc4:	f002 fe2e 	bl	8007924 <HAL_I2C_Master_Receive>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <user_i2c_read+0x60>
 8004cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cd2:	e000      	b.n	8004cd6 <user_i2c_read+0x62>

  return 0;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000234 	.word	0x20000234

08004ce4 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fb55 	bl	800539c <HAL_Delay>
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	603a      	str	r2, [r7, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	4603      	mov	r3, r0
 8004d08:	71fb      	strb	r3, [r7, #7]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	71bb      	strb	r3, [r7, #6]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8004d12:	88bb      	ldrh	r3, [r7, #4]
 8004d14:	3301      	adds	r3, #1
 8004d16:	4618      	mov	r0, r3
 8004d18:	f00a f810 	bl	800ed3c <malloc>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8004d20:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	88ba      	ldrh	r2, [r7, #4]
 8004d2e:	6839      	ldr	r1, [r7, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f00a f813 	bl	800ed5c <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	b299      	uxth	r1, r3
 8004d3e:	88bb      	ldrh	r3, [r7, #4]
 8004d40:	3301      	adds	r3, #1
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d48:	9200      	str	r2, [sp, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4808      	ldr	r0, [pc, #32]	; (8004d70 <user_i2c_write+0x74>)
 8004d4e:	f002 fceb 	bl	8007728 <HAL_I2C_Master_Transmit>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <user_i2c_write+0x62>
 8004d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d5c:	e003      	b.n	8004d66 <user_i2c_write+0x6a>

  free(buf);
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f009 fff4 	bl	800ed4c <free>
  return 0;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000234 	.word	0x20000234

08004d74 <detect_all_sensors>:
}i2c_device;


//----------------------------------------------------------------------------------------
void detect_all_sensors(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
	detect_bme280();
 8004d78:	f000 f8d6 	bl	8004f28 <detect_bme280>
	detect_mpu6050();
 8004d7c:	f000 f90a 	bl	8004f94 <detect_mpu6050>
	detect_apds9960();
 8004d80:	f000 f9e6 	bl	8005150 <detect_apds9960>
	denect_hmc5883l();
 8004d84:	f000 f988 	bl	8005098 <denect_hmc5883l>
	detect_ms5611();
 8004d88:	f000 f9b4 	bl	80050f4 <detect_ms5611>
	detect_oled_screen();
 8004d8c:	f000 fa16 	bl	80051bc <detect_oled_screen>
	detect_ds3231();
 8004d90:	f000 fa3a 	bl	8005208 <detect_ds3231>

	measure();
 8004d94:	f000 f802 	bl	8004d9c <measure>
}
 8004d98:	bf00      	nop
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <measure>:
//----------------------------------------------------------------------------------------
void measure(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
	if(i2c_device.BME280_ready_status == true)
 8004da0:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <measure+0x18>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <measure+0x14>
	{
	    init_bme280();
 8004da8:	f000 f806 	bl	8004db8 <init_bme280>
		bme280_measure();
 8004dac:	f000 f850 	bl	8004e50 <bme280_measure>

//	mpu6050();
//	hmc5883l();
//	ms5611();
//	apds9960();
}
 8004db0:	bf00      	nop
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	2000052c 	.word	0x2000052c

08004db8 <init_bme280>:
//----------------------------------------------------------------------------------------
int8_t init_bme280(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8004dbc:	4b1e      	ldr	r3, [pc, #120]	; (8004e38 <init_bme280+0x80>)
 8004dbe:	2276      	movs	r2, #118	; 0x76
 8004dc0:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <init_bme280+0x80>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8004dc8:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <init_bme280+0x80>)
 8004dca:	4a1c      	ldr	r2, [pc, #112]	; (8004e3c <init_bme280+0x84>)
 8004dcc:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8004dce:	4b1a      	ldr	r3, [pc, #104]	; (8004e38 <init_bme280+0x80>)
 8004dd0:	4a1b      	ldr	r2, [pc, #108]	; (8004e40 <init_bme280+0x88>)
 8004dd2:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 8004dd4:	4b18      	ldr	r3, [pc, #96]	; (8004e38 <init_bme280+0x80>)
 8004dd6:	4a1b      	ldr	r2, [pc, #108]	; (8004e44 <init_bme280+0x8c>)
 8004dd8:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 8004dda:	4817      	ldr	r0, [pc, #92]	; (8004e38 <init_bme280+0x80>)
 8004ddc:	f7fe fd2e 	bl	800383c <bme280_init>
 8004de0:	4603      	mov	r3, r0
 8004de2:	461a      	mov	r2, r3
 8004de4:	4b18      	ldr	r3, [pc, #96]	; (8004e48 <init_bme280+0x90>)
 8004de6:	701a      	strb	r2, [r3, #0]

	 /* BME280 설정 */
	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8004de8:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <init_bme280+0x80>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8004df0:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <init_bme280+0x80>)
 8004df2:	2205      	movs	r2, #5
 8004df4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8004df8:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <init_bme280+0x80>)
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8004e00:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <init_bme280+0x80>)
 8004e02:	2204      	movs	r2, #4
 8004e04:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8004e08:	490b      	ldr	r1, [pc, #44]	; (8004e38 <init_bme280+0x80>)
 8004e0a:	200f      	movs	r0, #15
 8004e0c:	f7fe fe08 	bl	8003a20 <bme280_set_sensor_settings>
 8004e10:	4603      	mov	r3, r0
 8004e12:	461a      	mov	r2, r3
 8004e14:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <init_bme280+0x90>)
 8004e16:	701a      	strb	r2, [r3, #0]

	//	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8004e18:	4907      	ldr	r1, [pc, #28]	; (8004e38 <init_bme280+0x80>)
 8004e1a:	2003      	movs	r0, #3
 8004e1c:	f7fe fe55 	bl	8003aca <bme280_set_sensor_mode>
 8004e20:	4603      	mov	r3, r0
 8004e22:	461a      	mov	r2, r3
 8004e24:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <init_bme280+0x90>)
 8004e26:	701a      	strb	r2, [r3, #0]

	 dev.delay_ms(40);
 8004e28:	4b03      	ldr	r3, [pc, #12]	; (8004e38 <init_bme280+0x80>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	2028      	movs	r0, #40	; 0x28
 8004e2e:	4798      	blx	r3
}
 8004e30:	bf00      	nop
 8004e32:	4618      	mov	r0, r3
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	200004c0 	.word	0x200004c0
 8004e3c:	08004c75 	.word	0x08004c75
 8004e40:	08004cfd 	.word	0x08004cfd
 8004e44:	08004ce5 	.word	0x08004ce5
 8004e48:	20000500 	.word	0x20000500
 8004e4c:	00000000 	.word	0x00000000

08004e50 <bme280_measure>:
void bme280_measure(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
	// From       --> https://github.com/eziya/STM32_HAL_BME280/blob/master/Src/main.c
	  while(1)
	  {
		  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8004e56:	4a2c      	ldr	r2, [pc, #176]	; (8004f08 <bme280_measure+0xb8>)
 8004e58:	492c      	ldr	r1, [pc, #176]	; (8004f0c <bme280_measure+0xbc>)
 8004e5a:	2007      	movs	r0, #7
 8004e5c:	f7fe feb1 	bl	8003bc2 <bme280_get_sensor_data>
 8004e60:	4603      	mov	r3, r0
 8004e62:	461a      	mov	r2, r3
 8004e64:	4b2a      	ldr	r3, [pc, #168]	; (8004f10 <bme280_measure+0xc0>)
 8004e66:	701a      	strb	r2, [r3, #0]

		  if(rslt == BME280_OK)
 8004e68:	4b29      	ldr	r3, [pc, #164]	; (8004f10 <bme280_measure+0xc0>)
 8004e6a:	f993 3000 	ldrsb.w	r3, [r3]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d133      	bne.n	8004eda <bme280_measure+0x8a>
		  {
			  temperature = comp_data.temperature / 100.0;      /* °C  */
 8004e72:	4b26      	ldr	r3, [pc, #152]	; (8004f0c <bme280_measure+0xbc>)
 8004e74:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	4b25      	ldr	r3, [pc, #148]	; (8004f14 <bme280_measure+0xc4>)
 8004e7e:	f7fb fc89 	bl	8000794 <__aeabi_ddiv>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4610      	mov	r0, r2
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f7fb fe1b 	bl	8000ac4 <__aeabi_d2f>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4a21      	ldr	r2, [pc, #132]	; (8004f18 <bme280_measure+0xc8>)
 8004e92:	6013      	str	r3, [r2, #0]
			  humidity = comp_data.humidity / 1024.0;           /* %   */
 8004e94:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <bme280_measure+0xbc>)
 8004e96:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	4b1f      	ldr	r3, [pc, #124]	; (8004f1c <bme280_measure+0xcc>)
 8004ea0:	f7fb fc78 	bl	8000794 <__aeabi_ddiv>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4619      	mov	r1, r3
 8004eac:	f7fb fe0a 	bl	8000ac4 <__aeabi_d2f>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4a1b      	ldr	r2, [pc, #108]	; (8004f20 <bme280_measure+0xd0>)
 8004eb4:	6013      	str	r3, [r2, #0]
			  pressure = comp_data.pressure / 10000.0;          /* hPa */
 8004eb6:	4b15      	ldr	r3, [pc, #84]	; (8004f0c <bme280_measure+0xbc>)
 8004eb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ebc:	a310      	add	r3, pc, #64	; (adr r3, 8004f00 <bme280_measure+0xb0>)
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	f7fb fc67 	bl	8000794 <__aeabi_ddiv>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4610      	mov	r0, r2
 8004ecc:	4619      	mov	r1, r3
 8004ece:	f7fb fdf9 	bl	8000ac4 <__aeabi_d2f>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4a13      	ldr	r2, [pc, #76]	; (8004f24 <bme280_measure+0xd4>)
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	e00c      	b.n	8004ef4 <bme280_measure+0xa4>
		  }
		  else
		  {
			  int g = 5;
 8004eda:	2305      	movs	r3, #5
 8004edc:	607b      	str	r3, [r7, #4]
			  while(g >= 0)
 8004ede:	e006      	b.n	8004eee <bme280_measure+0x9e>
			  {
				  HAL_Delay(300);
 8004ee0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004ee4:	f000 fa5a 	bl	800539c <HAL_Delay>
				  g--;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	607b      	str	r3, [r7, #4]
			  while(g >= 0)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	daf5      	bge.n	8004ee0 <bme280_measure+0x90>
			  }
		  }

		  HAL_Delay(500);
 8004ef4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ef8:	f000 fa50 	bl	800539c <HAL_Delay>
		  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8004efc:	e7ab      	b.n	8004e56 <bme280_measure+0x6>
 8004efe:	bf00      	nop
 8004f00:	00000000 	.word	0x00000000
 8004f04:	40c38800 	.word	0x40c38800
 8004f08:	200004c0 	.word	0x200004c0
 8004f0c:	20000508 	.word	0x20000508
 8004f10:	20000500 	.word	0x20000500
 8004f14:	40590000 	.word	0x40590000
 8004f18:	20000520 	.word	0x20000520
 8004f1c:	40900000 	.word	0x40900000
 8004f20:	20000528 	.word	0x20000528
 8004f24:	20000524 	.word	0x20000524

08004f28 <detect_bme280>:



//----------------------------------------------------------------------------------------
void detect_bme280(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af04      	add	r7, sp, #16
	uint16_t STATUS=0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x76;  		 	// BME280
 8004f32:	2376      	movs	r3, #118	; 0x76
 8004f34:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0xD0;
 8004f36:	23d0      	movs	r3, #208	; 0xd0
 8004f38:	807b      	strh	r3, [r7, #2]
	uint8_t id = 96;							// in hex form
 8004f3a:	2360      	movs	r3, #96	; 0x60
 8004f3c:	707b      	strb	r3, [r7, #1]
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8004f3e:	2300      	movs	r3, #0
 8004f40:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8004f42:	88bb      	ldrh	r3, [r7, #4]
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	b299      	uxth	r1, r3
 8004f48:	887a      	ldrh	r2, [r7, #2]
 8004f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f4e:	9302      	str	r3, [sp, #8]
 8004f50:	2301      	movs	r3, #1
 8004f52:	9301      	str	r3, [sp, #4]
 8004f54:	463b      	mov	r3, r7
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	2301      	movs	r3, #1
 8004f5a:	480c      	ldr	r0, [pc, #48]	; (8004f8c <detect_bme280+0x64>)
 8004f5c:	f003 f802 	bl	8007f64 <HAL_I2C_Mem_Read>
 8004f60:	4603      	mov	r3, r0
 8004f62:	80fb      	strh	r3, [r7, #6]
	//HAL_OK == 0
	if((buff == id) && (STATUS == 0))
 8004f64:	783b      	ldrb	r3, [r7, #0]
 8004f66:	787a      	ldrb	r2, [r7, #1]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d106      	bne.n	8004f7a <detect_bme280+0x52>
 8004f6c:	88fb      	ldrh	r3, [r7, #6]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d103      	bne.n	8004f7a <detect_bme280+0x52>
	{
		i2c_device.BME280_ready_status = true;
 8004f72:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <detect_bme280+0x68>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	e003      	b.n	8004f82 <detect_bme280+0x5a>
	}
	else
	{
		i2c_device.BME280_ready_status = false;
 8004f7a:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <detect_bme280+0x68>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
	}
}
 8004f80:	bf00      	nop
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000234 	.word	0x20000234
 8004f90:	2000052c 	.word	0x2000052c

08004f94 <detect_mpu6050>:
//----------------------------------------------------------------------------------------
void detect_mpu6050(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	81fb      	strh	r3, [r7, #14]
	uint16_t addres_device = 0xD0;
 8004f9e:	23d0      	movs	r3, #208	; 0xd0
 8004fa0:	81bb      	strh	r3, [r7, #12]
	uint16_t id_addr = 0x75;
 8004fa2:	2375      	movs	r3, #117	; 0x75
 8004fa4:	817b      	strh	r3, [r7, #10]
	uint8_t id = 104;							// in hex form
 8004fa6:	2368      	movs	r3, #104	; 0x68
 8004fa8:	727b      	strb	r3, [r7, #9]
	uint8_t buff = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	723b      	strb	r3, [r7, #8]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, id_addr, 1, &buff, 1, 1000);
 8004fae:	897a      	ldrh	r2, [r7, #10]
 8004fb0:	89b9      	ldrh	r1, [r7, #12]
 8004fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fb6:	9302      	str	r3, [sp, #8]
 8004fb8:	2301      	movs	r3, #1
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	f107 0308 	add.w	r3, r7, #8
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	4832      	ldr	r0, [pc, #200]	; (8005090 <detect_mpu6050+0xfc>)
 8004fc6:	f002 ffcd 	bl	8007f64 <HAL_I2C_Mem_Read>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	81fb      	strh	r3, [r7, #14]

	if((buff == id) && (STATUS == 0))
 8004fce:	7a3b      	ldrb	r3, [r7, #8]
 8004fd0:	7a7a      	ldrb	r2, [r7, #9]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d106      	bne.n	8004fe4 <detect_mpu6050+0x50>
 8004fd6:	89fb      	ldrh	r3, [r7, #14]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d103      	bne.n	8004fe4 <detect_mpu6050+0x50>
	{
		i2c_device.MPU6050_ready_status = true;
 8004fdc:	4b2d      	ldr	r3, [pc, #180]	; (8005094 <detect_mpu6050+0x100>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	705a      	strb	r2, [r3, #1]
 8004fe2:	e002      	b.n	8004fea <detect_mpu6050+0x56>
	}
	else
	{
		i2c_device.MPU6050_ready_status = false;
 8004fe4:	4b2b      	ldr	r3, [pc, #172]	; (8005094 <detect_mpu6050+0x100>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	705a      	strb	r2, [r3, #1]
	}

	// turn on direct i2c communication with hmc5883l
	if(i2c_device.MPU6050_ready_status == true)
 8004fea:	4b2a      	ldr	r3, [pc, #168]	; (8005094 <detect_mpu6050+0x100>)
 8004fec:	785b      	ldrb	r3, [r3, #1]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d04a      	beq.n	8005088 <detect_mpu6050+0xf4>
	{
		uint8_t data = 0x00;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x6A, 1, &data, 1, 1000);		// Disable i2c master mode
 8004ff6:	89b9      	ldrh	r1, [r7, #12]
 8004ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ffc:	9302      	str	r3, [sp, #8]
 8004ffe:	2301      	movs	r3, #1
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	1dfb      	adds	r3, r7, #7
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	2301      	movs	r3, #1
 8005008:	226a      	movs	r2, #106	; 0x6a
 800500a:	4821      	ldr	r0, [pc, #132]	; (8005090 <detect_mpu6050+0xfc>)
 800500c:	f002 feb0 	bl	8007d70 <HAL_I2C_Mem_Write>
 8005010:	4603      	mov	r3, r0
 8005012:	81fb      	strh	r3, [r7, #14]
		data = 0x02;
 8005014:	2302      	movs	r3, #2
 8005016:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);		// Enable i2c master bypass mode
 8005018:	89b9      	ldrh	r1, [r7, #12]
 800501a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800501e:	9302      	str	r3, [sp, #8]
 8005020:	2301      	movs	r3, #1
 8005022:	9301      	str	r3, [sp, #4]
 8005024:	1dfb      	adds	r3, r7, #7
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	2301      	movs	r3, #1
 800502a:	2237      	movs	r2, #55	; 0x37
 800502c:	4818      	ldr	r0, [pc, #96]	; (8005090 <detect_mpu6050+0xfc>)
 800502e:	f002 fe9f 	bl	8007d70 <HAL_I2C_Mem_Write>
 8005032:	4603      	mov	r3, r0
 8005034:	81fb      	strh	r3, [r7, #14]

		// Check waited registers
		buff = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x6A, 1, &buff, 1, 1000);
 800503a:	89b9      	ldrh	r1, [r7, #12]
 800503c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005040:	9302      	str	r3, [sp, #8]
 8005042:	2301      	movs	r3, #1
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	f107 0308 	add.w	r3, r7, #8
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	2301      	movs	r3, #1
 800504e:	226a      	movs	r2, #106	; 0x6a
 8005050:	480f      	ldr	r0, [pc, #60]	; (8005090 <detect_mpu6050+0xfc>)
 8005052:	f002 ff87 	bl	8007f64 <HAL_I2C_Mem_Read>
 8005056:	4603      	mov	r3, r0
 8005058:	81fb      	strh	r3, [r7, #14]
		buff = 0;
 800505a:	2300      	movs	r3, #0
 800505c:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x37, 1, &buff, 1, 1000);
 800505e:	89b9      	ldrh	r1, [r7, #12]
 8005060:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005064:	9302      	str	r3, [sp, #8]
 8005066:	2301      	movs	r3, #1
 8005068:	9301      	str	r3, [sp, #4]
 800506a:	f107 0308 	add.w	r3, r7, #8
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	2301      	movs	r3, #1
 8005072:	2237      	movs	r2, #55	; 0x37
 8005074:	4806      	ldr	r0, [pc, #24]	; (8005090 <detect_mpu6050+0xfc>)
 8005076:	f002 ff75 	bl	8007f64 <HAL_I2C_Mem_Read>
 800507a:	4603      	mov	r3, r0
 800507c:	81fb      	strh	r3, [r7, #14]

		if(STATUS == 0)
 800507e:	89fb      	ldrh	r3, [r7, #14]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <detect_mpu6050+0xf4>
		{
			denect_hmc5883l();     // Don't work  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8005084:	f000 f808 	bl	8005098 <denect_hmc5883l>
		}
	}
}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	200002e0 	.word	0x200002e0
 8005094:	2000052c 	.word	0x2000052c

08005098 <denect_hmc5883l>:
//----------------------------------------------------------------------------------------
void denect_hmc5883l(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 800509e:	2300      	movs	r3, #0
 80050a0:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x1E;       //0x1E                		 ///// 0x3C
 80050a2:	231e      	movs	r3, #30
 80050a4:	80bb      	strh	r3, [r7, #4]
	uint16_t addr = 0x0A;				// HMC5883L_REG_IDENT_A      ///// 0xA0
 80050a6:	230a      	movs	r3, #10
 80050a8:	807b      	strh	r3, [r7, #2]
	//uint8_t id = 0xa8;							// in hex form
	uint8_t buff = 0;
 80050aa:	2300      	movs	r3, #0
 80050ac:	707b      	strb	r3, [r7, #1]

	//STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1 , addr, 1, &buff, 1, 1000);
 80050ae:	88bb      	ldrh	r3, [r7, #4]
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	b299      	uxth	r1, r3
 80050b4:	887a      	ldrh	r2, [r7, #2]
 80050b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050ba:	9302      	str	r3, [sp, #8]
 80050bc:	2301      	movs	r3, #1
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	1c7b      	adds	r3, r7, #1
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	2301      	movs	r3, #1
 80050c6:	4809      	ldr	r0, [pc, #36]	; (80050ec <denect_hmc5883l+0x54>)
 80050c8:	f002 ff4c 	bl	8007f64 <HAL_I2C_Mem_Read>
 80050cc:	4603      	mov	r3, r0
 80050ce:	80fb      	strh	r3, [r7, #6]
	if(STATUS == 0)
 80050d0:	88fb      	ldrh	r3, [r7, #6]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d103      	bne.n	80050de <denect_hmc5883l+0x46>
	{
		i2c_device.HMC5883L_ready_status = true;
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <denect_hmc5883l+0x58>)
 80050d8:	2201      	movs	r2, #1
 80050da:	709a      	strb	r2, [r3, #2]
//	HMC5883L_setDataRate(HMC5883L_DATARATE_15HZ);
//	HMC5883L_setSamples(HMC5883L_SAMPLES_1); HMC5883L_setOffset(0, 0);
//
//	Vector mag = HMC5883L_readRaw();

}
 80050dc:	e002      	b.n	80050e4 <denect_hmc5883l+0x4c>
		i2c_device.HMC5883L_ready_status = false;
 80050de:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <denect_hmc5883l+0x58>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	709a      	strb	r2, [r3, #2]
}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	200002e0 	.word	0x200002e0
 80050f0:	2000052c 	.word	0x2000052c

080050f4 <detect_ms5611>:
//----------------------------------------------------------------------------------------
void detect_ms5611(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x77;
 80050fe:	2377      	movs	r3, #119	; 0x77
 8005100:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00 ;
 8005102:	2300      	movs	r3, #0
 8005104:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800510a:	88bb      	ldrh	r3, [r7, #4]
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	b299      	uxth	r1, r3
 8005110:	887a      	ldrh	r2, [r7, #2]
 8005112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005116:	9302      	str	r3, [sp, #8]
 8005118:	2301      	movs	r3, #1
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	1c7b      	adds	r3, r7, #1
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	2301      	movs	r3, #1
 8005122:	4809      	ldr	r0, [pc, #36]	; (8005148 <detect_ms5611+0x54>)
 8005124:	f002 ff1e 	bl	8007f64 <HAL_I2C_Mem_Read>
 8005128:	4603      	mov	r3, r0
 800512a:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 800512c:	88fb      	ldrh	r3, [r7, #6]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d103      	bne.n	800513a <detect_ms5611+0x46>
	{
		i2c_device.MS5611_ready_status = true;
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <detect_ms5611+0x58>)
 8005134:	2201      	movs	r2, #1
 8005136:	70da      	strb	r2, [r3, #3]
	}
	else
	{
		i2c_device.MS5611_ready_status = false;
	}
}
 8005138:	e002      	b.n	8005140 <detect_ms5611+0x4c>
		i2c_device.MS5611_ready_status = false;
 800513a:	4b04      	ldr	r3, [pc, #16]	; (800514c <detect_ms5611+0x58>)
 800513c:	2200      	movs	r2, #0
 800513e:	70da      	strb	r2, [r3, #3]
}
 8005140:	bf00      	nop
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	200002e0 	.word	0x200002e0
 800514c:	2000052c 	.word	0x2000052c

08005150 <detect_apds9960>:
//----------------------------------------------------------------------------------------
void detect_apds9960(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x39;
 800515a:	2339      	movs	r3, #57	; 0x39
 800515c:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x92;
 800515e:	2392      	movs	r3, #146	; 0x92
 8005160:	807b      	strh	r3, [r7, #2]
	uint8_t id = 0xa8;							// in hex form
 8005162:	23a8      	movs	r3, #168	; 0xa8
 8005164:	707b      	strb	r3, [r7, #1]
	uint8_t buff = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800516a:	88bb      	ldrh	r3, [r7, #4]
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	b299      	uxth	r1, r3
 8005170:	887a      	ldrh	r2, [r7, #2]
 8005172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005176:	9302      	str	r3, [sp, #8]
 8005178:	2301      	movs	r3, #1
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	463b      	mov	r3, r7
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	2301      	movs	r3, #1
 8005182:	480c      	ldr	r0, [pc, #48]	; (80051b4 <detect_apds9960+0x64>)
 8005184:	f002 feee 	bl	8007f64 <HAL_I2C_Mem_Read>
 8005188:	4603      	mov	r3, r0
 800518a:	80fb      	strh	r3, [r7, #6]

	if((buff == id) && (STATUS == 0))
 800518c:	783b      	ldrb	r3, [r7, #0]
 800518e:	787a      	ldrb	r2, [r7, #1]
 8005190:	429a      	cmp	r2, r3
 8005192:	d106      	bne.n	80051a2 <detect_apds9960+0x52>
 8005194:	88fb      	ldrh	r3, [r7, #6]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d103      	bne.n	80051a2 <detect_apds9960+0x52>
	{
		i2c_device.APDS9960_ready_status = true;
 800519a:	4b07      	ldr	r3, [pc, #28]	; (80051b8 <detect_apds9960+0x68>)
 800519c:	2201      	movs	r2, #1
 800519e:	711a      	strb	r2, [r3, #4]
 80051a0:	e003      	b.n	80051aa <detect_apds9960+0x5a>
	}
	else
	{
		i2c_device.APDS9960_ready_status = false;
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <detect_apds9960+0x68>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	711a      	strb	r2, [r3, #4]
	}
}
 80051a8:	bf00      	nop
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	200002e0 	.word	0x200002e0
 80051b8:	2000052c 	.word	0x2000052c

080051bc <detect_oled_screen>:
//----------------------------------------------------------------------------------------
void detect_oled_screen(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af02      	add	r7, sp, #8
	uint16_t STATUS = 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = 0x00;
 80051c6:	2300      	movs	r3, #0
 80051c8:	713b      	strb	r3, [r7, #4]
	buffer[1] = 0xAE;
 80051ca:	23ae      	movs	r3, #174	; 0xae
 80051cc:	717b      	strb	r3, [r7, #5]

	STATUS = HAL_I2C_Master_Transmit(&hi2c3, 0x78,buffer, 2, 1000);
 80051ce:	1d3a      	adds	r2, r7, #4
 80051d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	2302      	movs	r3, #2
 80051d8:	2178      	movs	r1, #120	; 0x78
 80051da:	4809      	ldr	r0, [pc, #36]	; (8005200 <detect_oled_screen+0x44>)
 80051dc:	f002 faa4 	bl	8007728 <HAL_I2C_Master_Transmit>
 80051e0:	4603      	mov	r3, r0
 80051e2:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 80051e4:	88fb      	ldrh	r3, [r7, #6]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d103      	bne.n	80051f2 <detect_oled_screen+0x36>
	{
		i2c_device.OLED_ready_status = true;
 80051ea:	4b06      	ldr	r3, [pc, #24]	; (8005204 <detect_oled_screen+0x48>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	715a      	strb	r2, [r3, #5]
	}
	else
	{
		i2c_device.OLED_ready_status = false;
	}
}
 80051f0:	e002      	b.n	80051f8 <detect_oled_screen+0x3c>
		i2c_device.OLED_ready_status = false;
 80051f2:	4b04      	ldr	r3, [pc, #16]	; (8005204 <detect_oled_screen+0x48>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	715a      	strb	r2, [r3, #5]
}
 80051f8:	bf00      	nop
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20000234 	.word	0x20000234
 8005204:	2000052c 	.word	0x2000052c

08005208 <detect_ds3231>:
//----------------------------------------------------------------------------------------
void detect_ds3231(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 800520e:	2300      	movs	r3, #0
 8005210:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x68;
 8005212:	2368      	movs	r3, #104	; 0x68
 8005214:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00;						// Read seconds
 8005216:	2300      	movs	r3, #0
 8005218:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800521e:	88bb      	ldrh	r3, [r7, #4]
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	b299      	uxth	r1, r3
 8005224:	887a      	ldrh	r2, [r7, #2]
 8005226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800522a:	9302      	str	r3, [sp, #8]
 800522c:	2301      	movs	r3, #1
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	1c7b      	adds	r3, r7, #1
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	2301      	movs	r3, #1
 8005236:	4809      	ldr	r0, [pc, #36]	; (800525c <detect_ds3231+0x54>)
 8005238:	f002 fe94 	bl	8007f64 <HAL_I2C_Mem_Read>
 800523c:	4603      	mov	r3, r0
 800523e:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8005240:	88fb      	ldrh	r3, [r7, #6]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d103      	bne.n	800524e <detect_ds3231+0x46>
	{
		i2c_device.DS3231_ready_status = true;
 8005246:	4b06      	ldr	r3, [pc, #24]	; (8005260 <detect_ds3231+0x58>)
 8005248:	2201      	movs	r2, #1
 800524a:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		i2c_device.DS3231_ready_status = false;
	}
}
 800524c:	e002      	b.n	8005254 <detect_ds3231+0x4c>
		i2c_device.DS3231_ready_status = false;
 800524e:	4b04      	ldr	r3, [pc, #16]	; (8005260 <detect_ds3231+0x58>)
 8005250:	2200      	movs	r2, #0
 8005252:	719a      	strb	r2, [r3, #6]
}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000234 	.word	0x20000234
 8005260:	2000052c 	.word	0x2000052c

08005264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800529c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005268:	480d      	ldr	r0, [pc, #52]	; (80052a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800526a:	490e      	ldr	r1, [pc, #56]	; (80052a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800526c:	4a0e      	ldr	r2, [pc, #56]	; (80052a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800526e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005270:	e002      	b.n	8005278 <LoopCopyDataInit>

08005272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005276:	3304      	adds	r3, #4

08005278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800527a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800527c:	d3f9      	bcc.n	8005272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800527e:	4a0b      	ldr	r2, [pc, #44]	; (80052ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005280:	4c0b      	ldr	r4, [pc, #44]	; (80052b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005284:	e001      	b.n	800528a <LoopFillZerobss>

08005286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005288:	3204      	adds	r2, #4

0800528a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800528a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800528c:	d3fb      	bcc.n	8005286 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800528e:	f7fc ff9b 	bl	80021c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005292:	f009 fd2f 	bl	800ecf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005296:	f7fb ffe9 	bl	800126c <main>
  bx  lr    
 800529a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800529c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80052a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052a4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80052a8:	0800f4cc 	.word	0x0800f4cc
  ldr r2, =_sbss
 80052ac:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80052b0:	20000c4c 	.word	0x20000c4c

080052b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80052b4:	e7fe      	b.n	80052b4 <ADC_IRQHandler>
	...

080052b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80052bc:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <HAL_Init+0x40>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0d      	ldr	r2, [pc, #52]	; (80052f8 <HAL_Init+0x40>)
 80052c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80052c8:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <HAL_Init+0x40>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a0a      	ldr	r2, [pc, #40]	; (80052f8 <HAL_Init+0x40>)
 80052ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052d4:	4b08      	ldr	r3, [pc, #32]	; (80052f8 <HAL_Init+0x40>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a07      	ldr	r2, [pc, #28]	; (80052f8 <HAL_Init+0x40>)
 80052da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052e0:	2003      	movs	r0, #3
 80052e2:	f000 f94f 	bl	8005584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052e6:	2000      	movs	r0, #0
 80052e8:	f000 f808 	bl	80052fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052ec:	f7fc fc28 	bl	8001b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40023c00 	.word	0x40023c00

080052fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005304:	4b12      	ldr	r3, [pc, #72]	; (8005350 <HAL_InitTick+0x54>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	4b12      	ldr	r3, [pc, #72]	; (8005354 <HAL_InitTick+0x58>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	4619      	mov	r1, r3
 800530e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005312:	fbb3 f3f1 	udiv	r3, r3, r1
 8005316:	fbb2 f3f3 	udiv	r3, r2, r3
 800531a:	4618      	mov	r0, r3
 800531c:	f000 f967 	bl	80055ee <HAL_SYSTICK_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e00e      	b.n	8005348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b0f      	cmp	r3, #15
 800532e:	d80a      	bhi.n	8005346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005330:	2200      	movs	r2, #0
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005338:	f000 f92f 	bl	800559a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800533c:	4a06      	ldr	r2, [pc, #24]	; (8005358 <HAL_InitTick+0x5c>)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	e000      	b.n	8005348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	20000004 	.word	0x20000004
 8005354:	20000150 	.word	0x20000150
 8005358:	2000014c 	.word	0x2000014c

0800535c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005360:	4b06      	ldr	r3, [pc, #24]	; (800537c <HAL_IncTick+0x20>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	461a      	mov	r2, r3
 8005366:	4b06      	ldr	r3, [pc, #24]	; (8005380 <HAL_IncTick+0x24>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4413      	add	r3, r2
 800536c:	4a04      	ldr	r2, [pc, #16]	; (8005380 <HAL_IncTick+0x24>)
 800536e:	6013      	str	r3, [r2, #0]
}
 8005370:	bf00      	nop
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	20000150 	.word	0x20000150
 8005380:	2000055c 	.word	0x2000055c

08005384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  return uwTick;
 8005388:	4b03      	ldr	r3, [pc, #12]	; (8005398 <HAL_GetTick+0x14>)
 800538a:	681b      	ldr	r3, [r3, #0]
}
 800538c:	4618      	mov	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	2000055c 	.word	0x2000055c

0800539c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053a4:	f7ff ffee 	bl	8005384 <HAL_GetTick>
 80053a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053b4:	d005      	beq.n	80053c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80053b6:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <HAL_Delay+0x44>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80053c2:	bf00      	nop
 80053c4:	f7ff ffde 	bl	8005384 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d8f7      	bhi.n	80053c4 <HAL_Delay+0x28>
  {
  }
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000150 	.word	0x20000150

080053e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053f4:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <__NVIC_SetPriorityGrouping+0x44>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005400:	4013      	ands	r3, r2
 8005402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800540c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005416:	4a04      	ldr	r2, [pc, #16]	; (8005428 <__NVIC_SetPriorityGrouping+0x44>)
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	60d3      	str	r3, [r2, #12]
}
 800541c:	bf00      	nop
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	e000ed00 	.word	0xe000ed00

0800542c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005430:	4b04      	ldr	r3, [pc, #16]	; (8005444 <__NVIC_GetPriorityGrouping+0x18>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	0a1b      	lsrs	r3, r3, #8
 8005436:	f003 0307 	and.w	r3, r3, #7
}
 800543a:	4618      	mov	r0, r3
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	e000ed00 	.word	0xe000ed00

08005448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	4603      	mov	r3, r0
 8005450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005456:	2b00      	cmp	r3, #0
 8005458:	db0b      	blt.n	8005472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800545a:	79fb      	ldrb	r3, [r7, #7]
 800545c:	f003 021f 	and.w	r2, r3, #31
 8005460:	4907      	ldr	r1, [pc, #28]	; (8005480 <__NVIC_EnableIRQ+0x38>)
 8005462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005466:	095b      	lsrs	r3, r3, #5
 8005468:	2001      	movs	r0, #1
 800546a:	fa00 f202 	lsl.w	r2, r0, r2
 800546e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	e000e100 	.word	0xe000e100

08005484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	4603      	mov	r3, r0
 800548c:	6039      	str	r1, [r7, #0]
 800548e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005494:	2b00      	cmp	r3, #0
 8005496:	db0a      	blt.n	80054ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	b2da      	uxtb	r2, r3
 800549c:	490c      	ldr	r1, [pc, #48]	; (80054d0 <__NVIC_SetPriority+0x4c>)
 800549e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a2:	0112      	lsls	r2, r2, #4
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	440b      	add	r3, r1
 80054a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054ac:	e00a      	b.n	80054c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	4908      	ldr	r1, [pc, #32]	; (80054d4 <__NVIC_SetPriority+0x50>)
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	3b04      	subs	r3, #4
 80054bc:	0112      	lsls	r2, r2, #4
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	440b      	add	r3, r1
 80054c2:	761a      	strb	r2, [r3, #24]
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	e000e100 	.word	0xe000e100
 80054d4:	e000ed00 	.word	0xe000ed00

080054d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054d8:	b480      	push	{r7}
 80054da:	b089      	sub	sp, #36	; 0x24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f1c3 0307 	rsb	r3, r3, #7
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	bf28      	it	cs
 80054f6:	2304      	movcs	r3, #4
 80054f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	3304      	adds	r3, #4
 80054fe:	2b06      	cmp	r3, #6
 8005500:	d902      	bls.n	8005508 <NVIC_EncodePriority+0x30>
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	3b03      	subs	r3, #3
 8005506:	e000      	b.n	800550a <NVIC_EncodePriority+0x32>
 8005508:	2300      	movs	r3, #0
 800550a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800550c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43da      	mvns	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	401a      	ands	r2, r3
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005520:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	fa01 f303 	lsl.w	r3, r1, r3
 800552a:	43d9      	mvns	r1, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005530:	4313      	orrs	r3, r2
         );
}
 8005532:	4618      	mov	r0, r3
 8005534:	3724      	adds	r7, #36	; 0x24
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
	...

08005540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3b01      	subs	r3, #1
 800554c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005550:	d301      	bcc.n	8005556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005552:	2301      	movs	r3, #1
 8005554:	e00f      	b.n	8005576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005556:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <SysTick_Config+0x40>)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3b01      	subs	r3, #1
 800555c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800555e:	210f      	movs	r1, #15
 8005560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005564:	f7ff ff8e 	bl	8005484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <SysTick_Config+0x40>)
 800556a:	2200      	movs	r2, #0
 800556c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800556e:	4b04      	ldr	r3, [pc, #16]	; (8005580 <SysTick_Config+0x40>)
 8005570:	2207      	movs	r2, #7
 8005572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	e000e010 	.word	0xe000e010

08005584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff ff29 	bl	80053e4 <__NVIC_SetPriorityGrouping>
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800559a:	b580      	push	{r7, lr}
 800559c:	b086      	sub	sp, #24
 800559e:	af00      	add	r7, sp, #0
 80055a0:	4603      	mov	r3, r0
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055ac:	f7ff ff3e 	bl	800542c <__NVIC_GetPriorityGrouping>
 80055b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	68b9      	ldr	r1, [r7, #8]
 80055b6:	6978      	ldr	r0, [r7, #20]
 80055b8:	f7ff ff8e 	bl	80054d8 <NVIC_EncodePriority>
 80055bc:	4602      	mov	r2, r0
 80055be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055c2:	4611      	mov	r1, r2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff ff5d 	bl	8005484 <__NVIC_SetPriority>
}
 80055ca:	bf00      	nop
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	4603      	mov	r3, r0
 80055da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff ff31 	bl	8005448 <__NVIC_EnableIRQ>
}
 80055e6:	bf00      	nop
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff ffa2 	bl	8005540 <SysTick_Config>
 80055fc:	4603      	mov	r3, r0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005608:	b480      	push	{r7}
 800560a:	b089      	sub	sp, #36	; 0x24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005616:	2300      	movs	r3, #0
 8005618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800561a:	2300      	movs	r3, #0
 800561c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800561e:	2300      	movs	r3, #0
 8005620:	61fb      	str	r3, [r7, #28]
 8005622:	e16b      	b.n	80058fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005624:	2201      	movs	r2, #1
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4013      	ands	r3, r2
 8005636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	429a      	cmp	r2, r3
 800563e:	f040 815a 	bne.w	80058f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	2b01      	cmp	r3, #1
 800564c:	d005      	beq.n	800565a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005656:	2b02      	cmp	r3, #2
 8005658:	d130      	bne.n	80056bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	2203      	movs	r2, #3
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	43db      	mvns	r3, r3
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	4013      	ands	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	4313      	orrs	r3, r2
 8005682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005690:	2201      	movs	r2, #1
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	43db      	mvns	r3, r3
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4013      	ands	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	091b      	lsrs	r3, r3, #4
 80056a6:	f003 0201 	and.w	r2, r3, #1
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	fa02 f303 	lsl.w	r3, r2, r3
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f003 0303 	and.w	r3, r3, #3
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d017      	beq.n	80056f8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	2203      	movs	r2, #3
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	43db      	mvns	r3, r3
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4013      	ands	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f003 0303 	and.w	r3, r3, #3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d123      	bne.n	800574c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	08da      	lsrs	r2, r3, #3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3208      	adds	r2, #8
 800570c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005710:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	220f      	movs	r2, #15
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	43db      	mvns	r3, r3
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	4013      	ands	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	691a      	ldr	r2, [r3, #16]
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	4313      	orrs	r3, r2
 800573c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	08da      	lsrs	r2, r3, #3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3208      	adds	r2, #8
 8005746:	69b9      	ldr	r1, [r7, #24]
 8005748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	2203      	movs	r2, #3
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	43db      	mvns	r3, r3
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4013      	ands	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f003 0203 	and.w	r2, r3, #3
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	4313      	orrs	r3, r2
 8005778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 80b4 	beq.w	80058f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	4b60      	ldr	r3, [pc, #384]	; (8005914 <HAL_GPIO_Init+0x30c>)
 8005794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005796:	4a5f      	ldr	r2, [pc, #380]	; (8005914 <HAL_GPIO_Init+0x30c>)
 8005798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800579c:	6453      	str	r3, [r2, #68]	; 0x44
 800579e:	4b5d      	ldr	r3, [pc, #372]	; (8005914 <HAL_GPIO_Init+0x30c>)
 80057a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057aa:	4a5b      	ldr	r2, [pc, #364]	; (8005918 <HAL_GPIO_Init+0x310>)
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	089b      	lsrs	r3, r3, #2
 80057b0:	3302      	adds	r3, #2
 80057b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	220f      	movs	r2, #15
 80057c2:	fa02 f303 	lsl.w	r3, r2, r3
 80057c6:	43db      	mvns	r3, r3
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	4013      	ands	r3, r2
 80057cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a52      	ldr	r2, [pc, #328]	; (800591c <HAL_GPIO_Init+0x314>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d02b      	beq.n	800582e <HAL_GPIO_Init+0x226>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a51      	ldr	r2, [pc, #324]	; (8005920 <HAL_GPIO_Init+0x318>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d025      	beq.n	800582a <HAL_GPIO_Init+0x222>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a50      	ldr	r2, [pc, #320]	; (8005924 <HAL_GPIO_Init+0x31c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d01f      	beq.n	8005826 <HAL_GPIO_Init+0x21e>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a4f      	ldr	r2, [pc, #316]	; (8005928 <HAL_GPIO_Init+0x320>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d019      	beq.n	8005822 <HAL_GPIO_Init+0x21a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a4e      	ldr	r2, [pc, #312]	; (800592c <HAL_GPIO_Init+0x324>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <HAL_GPIO_Init+0x216>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a4d      	ldr	r2, [pc, #308]	; (8005930 <HAL_GPIO_Init+0x328>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00d      	beq.n	800581a <HAL_GPIO_Init+0x212>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a4c      	ldr	r2, [pc, #304]	; (8005934 <HAL_GPIO_Init+0x32c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d007      	beq.n	8005816 <HAL_GPIO_Init+0x20e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a4b      	ldr	r2, [pc, #300]	; (8005938 <HAL_GPIO_Init+0x330>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d101      	bne.n	8005812 <HAL_GPIO_Init+0x20a>
 800580e:	2307      	movs	r3, #7
 8005810:	e00e      	b.n	8005830 <HAL_GPIO_Init+0x228>
 8005812:	2308      	movs	r3, #8
 8005814:	e00c      	b.n	8005830 <HAL_GPIO_Init+0x228>
 8005816:	2306      	movs	r3, #6
 8005818:	e00a      	b.n	8005830 <HAL_GPIO_Init+0x228>
 800581a:	2305      	movs	r3, #5
 800581c:	e008      	b.n	8005830 <HAL_GPIO_Init+0x228>
 800581e:	2304      	movs	r3, #4
 8005820:	e006      	b.n	8005830 <HAL_GPIO_Init+0x228>
 8005822:	2303      	movs	r3, #3
 8005824:	e004      	b.n	8005830 <HAL_GPIO_Init+0x228>
 8005826:	2302      	movs	r3, #2
 8005828:	e002      	b.n	8005830 <HAL_GPIO_Init+0x228>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <HAL_GPIO_Init+0x228>
 800582e:	2300      	movs	r3, #0
 8005830:	69fa      	ldr	r2, [r7, #28]
 8005832:	f002 0203 	and.w	r2, r2, #3
 8005836:	0092      	lsls	r2, r2, #2
 8005838:	4093      	lsls	r3, r2
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	4313      	orrs	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005840:	4935      	ldr	r1, [pc, #212]	; (8005918 <HAL_GPIO_Init+0x310>)
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	089b      	lsrs	r3, r3, #2
 8005846:	3302      	adds	r3, #2
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800584e:	4b3b      	ldr	r3, [pc, #236]	; (800593c <HAL_GPIO_Init+0x334>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	43db      	mvns	r3, r3
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4013      	ands	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005872:	4a32      	ldr	r2, [pc, #200]	; (800593c <HAL_GPIO_Init+0x334>)
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005878:	4b30      	ldr	r3, [pc, #192]	; (800593c <HAL_GPIO_Init+0x334>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	43db      	mvns	r3, r3
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	4013      	ands	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800589c:	4a27      	ldr	r2, [pc, #156]	; (800593c <HAL_GPIO_Init+0x334>)
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058a2:	4b26      	ldr	r3, [pc, #152]	; (800593c <HAL_GPIO_Init+0x334>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	43db      	mvns	r3, r3
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	4013      	ands	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058c6:	4a1d      	ldr	r2, [pc, #116]	; (800593c <HAL_GPIO_Init+0x334>)
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058cc:	4b1b      	ldr	r3, [pc, #108]	; (800593c <HAL_GPIO_Init+0x334>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	43db      	mvns	r3, r3
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	4013      	ands	r3, r2
 80058da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058f0:	4a12      	ldr	r2, [pc, #72]	; (800593c <HAL_GPIO_Init+0x334>)
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	3301      	adds	r3, #1
 80058fa:	61fb      	str	r3, [r7, #28]
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	2b0f      	cmp	r3, #15
 8005900:	f67f ae90 	bls.w	8005624 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	3724      	adds	r7, #36	; 0x24
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40023800 	.word	0x40023800
 8005918:	40013800 	.word	0x40013800
 800591c:	40020000 	.word	0x40020000
 8005920:	40020400 	.word	0x40020400
 8005924:	40020800 	.word	0x40020800
 8005928:	40020c00 	.word	0x40020c00
 800592c:	40021000 	.word	0x40021000
 8005930:	40021400 	.word	0x40021400
 8005934:	40021800 	.word	0x40021800
 8005938:	40021c00 	.word	0x40021c00
 800593c:	40013c00 	.word	0x40013c00

08005940 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	887b      	ldrh	r3, [r7, #2]
 8005952:	4013      	ands	r3, r2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005958:	2301      	movs	r3, #1
 800595a:	73fb      	strb	r3, [r7, #15]
 800595c:	e001      	b.n	8005962 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800595e:	2300      	movs	r3, #0
 8005960:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005962:	7bfb      	ldrb	r3, [r7, #15]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	807b      	strh	r3, [r7, #2]
 800597c:	4613      	mov	r3, r2
 800597e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005980:	787b      	ldrb	r3, [r7, #1]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005986:	887a      	ldrh	r2, [r7, #2]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800598c:	e003      	b.n	8005996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800598e:	887b      	ldrh	r3, [r7, #2]
 8005990:	041a      	lsls	r2, r3, #16
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	619a      	str	r2, [r3, #24]
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b085      	sub	sp, #20
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	460b      	mov	r3, r1
 80059ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059b4:	887a      	ldrh	r2, [r7, #2]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4013      	ands	r3, r2
 80059ba:	041a      	lsls	r2, r3, #16
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	43d9      	mvns	r1, r3
 80059c0:	887b      	ldrh	r3, [r7, #2]
 80059c2:	400b      	ands	r3, r1
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	619a      	str	r2, [r3, #24]
}
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80059d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059d8:	b08f      	sub	sp, #60	; 0x3c
 80059da:	af0a      	add	r7, sp, #40	; 0x28
 80059dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e054      	b.n	8005a92 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f008 fec6 	bl	800e794 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f006 f868 	bl	800bafc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	687e      	ldr	r6, [r7, #4]
 8005a34:	466d      	mov	r5, sp
 8005a36:	f106 0410 	add.w	r4, r6, #16
 8005a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a46:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a4a:	1d33      	adds	r3, r6, #4
 8005a4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a4e:	6838      	ldr	r0, [r7, #0]
 8005a50:	f005 ffe2 	bl	800ba18 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2101      	movs	r1, #1
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f006 f85f 	bl	800bb1e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	687e      	ldr	r6, [r7, #4]
 8005a68:	466d      	mov	r5, sp
 8005a6a:	f106 0410 	add.w	r4, r6, #16
 8005a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a7e:	1d33      	adds	r3, r6, #4
 8005a80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a82:	6838      	ldr	r0, [r7, #0]
 8005a84:	f006 f972 	bl	800bd6c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a9a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005a9a:	b590      	push	{r4, r7, lr}
 8005a9c:	b089      	sub	sp, #36	; 0x24
 8005a9e:	af04      	add	r7, sp, #16
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	4608      	mov	r0, r1
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	70fb      	strb	r3, [r7, #3]
 8005aac:	460b      	mov	r3, r1
 8005aae:	70bb      	strb	r3, [r7, #2]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_HCD_HC_Init+0x28>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e076      	b.n	8005bb0 <HAL_HCD_HC_Init+0x116>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	212c      	movs	r1, #44	; 0x2c
 8005ad0:	fb01 f303 	mul.w	r3, r1, r3
 8005ad4:	4413      	add	r3, r2
 8005ad6:	333d      	adds	r3, #61	; 0x3d
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	212c      	movs	r1, #44	; 0x2c
 8005ae2:	fb01 f303 	mul.w	r3, r1, r3
 8005ae6:	4413      	add	r3, r2
 8005ae8:	3338      	adds	r3, #56	; 0x38
 8005aea:	787a      	ldrb	r2, [r7, #1]
 8005aec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005aee:	78fb      	ldrb	r3, [r7, #3]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	212c      	movs	r1, #44	; 0x2c
 8005af4:	fb01 f303 	mul.w	r3, r1, r3
 8005af8:	4413      	add	r3, r2
 8005afa:	3340      	adds	r3, #64	; 0x40
 8005afc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005afe:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	212c      	movs	r1, #44	; 0x2c
 8005b06:	fb01 f303 	mul.w	r3, r1, r3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3339      	adds	r3, #57	; 0x39
 8005b0e:	78fa      	ldrb	r2, [r7, #3]
 8005b10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005b12:	78fb      	ldrb	r3, [r7, #3]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	212c      	movs	r1, #44	; 0x2c
 8005b18:	fb01 f303 	mul.w	r3, r1, r3
 8005b1c:	4413      	add	r3, r2
 8005b1e:	333f      	adds	r3, #63	; 0x3f
 8005b20:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005b24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005b26:	78fb      	ldrb	r3, [r7, #3]
 8005b28:	78ba      	ldrb	r2, [r7, #2]
 8005b2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b2e:	b2d0      	uxtb	r0, r2
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	212c      	movs	r1, #44	; 0x2c
 8005b34:	fb01 f303 	mul.w	r3, r1, r3
 8005b38:	4413      	add	r3, r2
 8005b3a:	333a      	adds	r3, #58	; 0x3a
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005b40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	da09      	bge.n	8005b5c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	212c      	movs	r1, #44	; 0x2c
 8005b4e:	fb01 f303 	mul.w	r3, r1, r3
 8005b52:	4413      	add	r3, r2
 8005b54:	333b      	adds	r3, #59	; 0x3b
 8005b56:	2201      	movs	r2, #1
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	e008      	b.n	8005b6e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	212c      	movs	r1, #44	; 0x2c
 8005b62:	fb01 f303 	mul.w	r3, r1, r3
 8005b66:	4413      	add	r3, r2
 8005b68:	333b      	adds	r3, #59	; 0x3b
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	212c      	movs	r1, #44	; 0x2c
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	4413      	add	r3, r2
 8005b7a:	333c      	adds	r3, #60	; 0x3c
 8005b7c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005b80:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	787c      	ldrb	r4, [r7, #1]
 8005b88:	78ba      	ldrb	r2, [r7, #2]
 8005b8a:	78f9      	ldrb	r1, [r7, #3]
 8005b8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b8e:	9302      	str	r3, [sp, #8]
 8005b90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b94:	9301      	str	r3, [sp, #4]
 8005b96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	4623      	mov	r3, r4
 8005b9e:	f006 fa67 	bl	800c070 <USB_HC_Init>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd90      	pop	{r4, r7, pc}

08005bb8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d101      	bne.n	8005bd6 <HAL_HCD_HC_Halt+0x1e>
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	e00f      	b.n	8005bf6 <HAL_HCD_HC_Halt+0x3e>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	78fa      	ldrb	r2, [r7, #3]
 8005be4:	4611      	mov	r1, r2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f006 fca3 	bl	800c532 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	4608      	mov	r0, r1
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4603      	mov	r3, r0
 8005c10:	70fb      	strb	r3, [r7, #3]
 8005c12:	460b      	mov	r3, r1
 8005c14:	70bb      	strb	r3, [r7, #2]
 8005c16:	4613      	mov	r3, r2
 8005c18:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	212c      	movs	r1, #44	; 0x2c
 8005c20:	fb01 f303 	mul.w	r3, r1, r3
 8005c24:	4413      	add	r3, r2
 8005c26:	333b      	adds	r3, #59	; 0x3b
 8005c28:	78ba      	ldrb	r2, [r7, #2]
 8005c2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	212c      	movs	r1, #44	; 0x2c
 8005c32:	fb01 f303 	mul.w	r3, r1, r3
 8005c36:	4413      	add	r3, r2
 8005c38:	333f      	adds	r3, #63	; 0x3f
 8005c3a:	787a      	ldrb	r2, [r7, #1]
 8005c3c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005c3e:	7c3b      	ldrb	r3, [r7, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d112      	bne.n	8005c6a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	212c      	movs	r1, #44	; 0x2c
 8005c4a:	fb01 f303 	mul.w	r3, r1, r3
 8005c4e:	4413      	add	r3, r2
 8005c50:	3342      	adds	r3, #66	; 0x42
 8005c52:	2203      	movs	r2, #3
 8005c54:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005c56:	78fb      	ldrb	r3, [r7, #3]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	212c      	movs	r1, #44	; 0x2c
 8005c5c:	fb01 f303 	mul.w	r3, r1, r3
 8005c60:	4413      	add	r3, r2
 8005c62:	333d      	adds	r3, #61	; 0x3d
 8005c64:	7f3a      	ldrb	r2, [r7, #28]
 8005c66:	701a      	strb	r2, [r3, #0]
 8005c68:	e008      	b.n	8005c7c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c6a:	78fb      	ldrb	r3, [r7, #3]
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	212c      	movs	r1, #44	; 0x2c
 8005c70:	fb01 f303 	mul.w	r3, r1, r3
 8005c74:	4413      	add	r3, r2
 8005c76:	3342      	adds	r3, #66	; 0x42
 8005c78:	2202      	movs	r2, #2
 8005c7a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005c7c:	787b      	ldrb	r3, [r7, #1]
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	f200 80c6 	bhi.w	8005e10 <HAL_HCD_HC_SubmitRequest+0x210>
 8005c84:	a201      	add	r2, pc, #4	; (adr r2, 8005c8c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8005c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8a:	bf00      	nop
 8005c8c:	08005c9d 	.word	0x08005c9d
 8005c90:	08005dfd 	.word	0x08005dfd
 8005c94:	08005d01 	.word	0x08005d01
 8005c98:	08005d7f 	.word	0x08005d7f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005c9c:	7c3b      	ldrb	r3, [r7, #16]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	f040 80b8 	bne.w	8005e14 <HAL_HCD_HC_SubmitRequest+0x214>
 8005ca4:	78bb      	ldrb	r3, [r7, #2]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f040 80b4 	bne.w	8005e14 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005cac:	8b3b      	ldrh	r3, [r7, #24]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d108      	bne.n	8005cc4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	212c      	movs	r1, #44	; 0x2c
 8005cb8:	fb01 f303 	mul.w	r3, r1, r3
 8005cbc:	4413      	add	r3, r2
 8005cbe:	3355      	adds	r3, #85	; 0x55
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005cc4:	78fb      	ldrb	r3, [r7, #3]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	212c      	movs	r1, #44	; 0x2c
 8005cca:	fb01 f303 	mul.w	r3, r1, r3
 8005cce:	4413      	add	r3, r2
 8005cd0:	3355      	adds	r3, #85	; 0x55
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d109      	bne.n	8005cec <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005cd8:	78fb      	ldrb	r3, [r7, #3]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	212c      	movs	r1, #44	; 0x2c
 8005cde:	fb01 f303 	mul.w	r3, r1, r3
 8005ce2:	4413      	add	r3, r2
 8005ce4:	3342      	adds	r3, #66	; 0x42
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005cea:	e093      	b.n	8005e14 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	212c      	movs	r1, #44	; 0x2c
 8005cf2:	fb01 f303 	mul.w	r3, r1, r3
 8005cf6:	4413      	add	r3, r2
 8005cf8:	3342      	adds	r3, #66	; 0x42
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	701a      	strb	r2, [r3, #0]
      break;
 8005cfe:	e089      	b.n	8005e14 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005d00:	78bb      	ldrb	r3, [r7, #2]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d11d      	bne.n	8005d42 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005d06:	78fb      	ldrb	r3, [r7, #3]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	212c      	movs	r1, #44	; 0x2c
 8005d0c:	fb01 f303 	mul.w	r3, r1, r3
 8005d10:	4413      	add	r3, r2
 8005d12:	3355      	adds	r3, #85	; 0x55
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d109      	bne.n	8005d2e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d1a:	78fb      	ldrb	r3, [r7, #3]
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	212c      	movs	r1, #44	; 0x2c
 8005d20:	fb01 f303 	mul.w	r3, r1, r3
 8005d24:	4413      	add	r3, r2
 8005d26:	3342      	adds	r3, #66	; 0x42
 8005d28:	2200      	movs	r2, #0
 8005d2a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005d2c:	e073      	b.n	8005e16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005d2e:	78fb      	ldrb	r3, [r7, #3]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	212c      	movs	r1, #44	; 0x2c
 8005d34:	fb01 f303 	mul.w	r3, r1, r3
 8005d38:	4413      	add	r3, r2
 8005d3a:	3342      	adds	r3, #66	; 0x42
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	701a      	strb	r2, [r3, #0]
      break;
 8005d40:	e069      	b.n	8005e16 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005d42:	78fb      	ldrb	r3, [r7, #3]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	212c      	movs	r1, #44	; 0x2c
 8005d48:	fb01 f303 	mul.w	r3, r1, r3
 8005d4c:	4413      	add	r3, r2
 8005d4e:	3354      	adds	r3, #84	; 0x54
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d109      	bne.n	8005d6a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d56:	78fb      	ldrb	r3, [r7, #3]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	212c      	movs	r1, #44	; 0x2c
 8005d5c:	fb01 f303 	mul.w	r3, r1, r3
 8005d60:	4413      	add	r3, r2
 8005d62:	3342      	adds	r3, #66	; 0x42
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]
      break;
 8005d68:	e055      	b.n	8005e16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005d6a:	78fb      	ldrb	r3, [r7, #3]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	212c      	movs	r1, #44	; 0x2c
 8005d70:	fb01 f303 	mul.w	r3, r1, r3
 8005d74:	4413      	add	r3, r2
 8005d76:	3342      	adds	r3, #66	; 0x42
 8005d78:	2202      	movs	r2, #2
 8005d7a:	701a      	strb	r2, [r3, #0]
      break;
 8005d7c:	e04b      	b.n	8005e16 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005d7e:	78bb      	ldrb	r3, [r7, #2]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d11d      	bne.n	8005dc0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	212c      	movs	r1, #44	; 0x2c
 8005d8a:	fb01 f303 	mul.w	r3, r1, r3
 8005d8e:	4413      	add	r3, r2
 8005d90:	3355      	adds	r3, #85	; 0x55
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	212c      	movs	r1, #44	; 0x2c
 8005d9e:	fb01 f303 	mul.w	r3, r1, r3
 8005da2:	4413      	add	r3, r2
 8005da4:	3342      	adds	r3, #66	; 0x42
 8005da6:	2200      	movs	r2, #0
 8005da8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005daa:	e034      	b.n	8005e16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	212c      	movs	r1, #44	; 0x2c
 8005db2:	fb01 f303 	mul.w	r3, r1, r3
 8005db6:	4413      	add	r3, r2
 8005db8:	3342      	adds	r3, #66	; 0x42
 8005dba:	2202      	movs	r2, #2
 8005dbc:	701a      	strb	r2, [r3, #0]
      break;
 8005dbe:	e02a      	b.n	8005e16 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005dc0:	78fb      	ldrb	r3, [r7, #3]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	212c      	movs	r1, #44	; 0x2c
 8005dc6:	fb01 f303 	mul.w	r3, r1, r3
 8005dca:	4413      	add	r3, r2
 8005dcc:	3354      	adds	r3, #84	; 0x54
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d109      	bne.n	8005de8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	212c      	movs	r1, #44	; 0x2c
 8005dda:	fb01 f303 	mul.w	r3, r1, r3
 8005dde:	4413      	add	r3, r2
 8005de0:	3342      	adds	r3, #66	; 0x42
 8005de2:	2200      	movs	r2, #0
 8005de4:	701a      	strb	r2, [r3, #0]
      break;
 8005de6:	e016      	b.n	8005e16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	212c      	movs	r1, #44	; 0x2c
 8005dee:	fb01 f303 	mul.w	r3, r1, r3
 8005df2:	4413      	add	r3, r2
 8005df4:	3342      	adds	r3, #66	; 0x42
 8005df6:	2202      	movs	r2, #2
 8005df8:	701a      	strb	r2, [r3, #0]
      break;
 8005dfa:	e00c      	b.n	8005e16 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	212c      	movs	r1, #44	; 0x2c
 8005e02:	fb01 f303 	mul.w	r3, r1, r3
 8005e06:	4413      	add	r3, r2
 8005e08:	3342      	adds	r3, #66	; 0x42
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	701a      	strb	r2, [r3, #0]
      break;
 8005e0e:	e002      	b.n	8005e16 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005e10:	bf00      	nop
 8005e12:	e000      	b.n	8005e16 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005e14:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	212c      	movs	r1, #44	; 0x2c
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	4413      	add	r3, r2
 8005e22:	3344      	adds	r3, #68	; 0x44
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	8b3a      	ldrh	r2, [r7, #24]
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	202c      	movs	r0, #44	; 0x2c
 8005e30:	fb00 f303 	mul.w	r3, r0, r3
 8005e34:	440b      	add	r3, r1
 8005e36:	334c      	adds	r3, #76	; 0x4c
 8005e38:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	212c      	movs	r1, #44	; 0x2c
 8005e40:	fb01 f303 	mul.w	r3, r1, r3
 8005e44:	4413      	add	r3, r2
 8005e46:	3360      	adds	r3, #96	; 0x60
 8005e48:	2200      	movs	r2, #0
 8005e4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005e4c:	78fb      	ldrb	r3, [r7, #3]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	212c      	movs	r1, #44	; 0x2c
 8005e52:	fb01 f303 	mul.w	r3, r1, r3
 8005e56:	4413      	add	r3, r2
 8005e58:	3350      	adds	r3, #80	; 0x50
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	212c      	movs	r1, #44	; 0x2c
 8005e64:	fb01 f303 	mul.w	r3, r1, r3
 8005e68:	4413      	add	r3, r2
 8005e6a:	3339      	adds	r3, #57	; 0x39
 8005e6c:	78fa      	ldrb	r2, [r7, #3]
 8005e6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	212c      	movs	r1, #44	; 0x2c
 8005e76:	fb01 f303 	mul.w	r3, r1, r3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	3361      	adds	r3, #97	; 0x61
 8005e7e:	2200      	movs	r2, #0
 8005e80:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	222c      	movs	r2, #44	; 0x2c
 8005e8a:	fb02 f303 	mul.w	r3, r2, r3
 8005e8e:	3338      	adds	r3, #56	; 0x38
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	18d1      	adds	r1, r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f006 f9f6 	bl	800c28c <USB_HC_StartXfer>
 8005ea0:	4603      	mov	r3, r0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop

08005eac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f005 ff0f 	bl	800bce6 <USB_GetMode>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	f040 80ef 	bne.w	80060ae <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f005 fef3 	bl	800bcc0 <USB_ReadInterrupts>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80e5 	beq.w	80060ac <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f005 feea 	bl	800bcc0 <USB_ReadInterrupts>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ef2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ef6:	d104      	bne.n	8005f02 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005f00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f005 feda 	bl	800bcc0 <USB_ReadInterrupts>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f16:	d104      	bne.n	8005f22 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f005 feca 	bl	800bcc0 <USB_ReadInterrupts>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f36:	d104      	bne.n	8005f42 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005f40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f005 feba 	bl	800bcc0 <USB_ReadInterrupts>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d103      	bne.n	8005f5e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f005 feac 	bl	800bcc0 <USB_ReadInterrupts>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f72:	d115      	bne.n	8005fa0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005f7c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d108      	bne.n	8005fa0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f008 fc7e 	bl	800e890 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2101      	movs	r1, #1
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f005 ffa2 	bl	800bee4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f005 fe8b 	bl	800bcc0 <USB_ReadInterrupts>
 8005faa:	4603      	mov	r3, r0
 8005fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fb4:	d102      	bne.n	8005fbc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f001 f9ff 	bl	80073ba <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f005 fe7d 	bl	800bcc0 <USB_ReadInterrupts>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d106      	bne.n	8005fde <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f008 fc41 	bl	800e858 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2208      	movs	r2, #8
 8005fdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f005 fe6c 	bl	800bcc0 <USB_ReadInterrupts>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	2b10      	cmp	r3, #16
 8005ff0:	d101      	bne.n	8005ff6 <HAL_HCD_IRQHandler+0x14a>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <HAL_HCD_IRQHandler+0x14c>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d012      	beq.n	8006022 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0210 	bic.w	r2, r2, #16
 800600a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f001 f902 	bl	8007216 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	699a      	ldr	r2, [r3, #24]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f042 0210 	orr.w	r2, r2, #16
 8006020:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4618      	mov	r0, r3
 8006028:	f005 fe4a 	bl	800bcc0 <USB_ReadInterrupts>
 800602c:	4603      	mov	r3, r0
 800602e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006032:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006036:	d13a      	bne.n	80060ae <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4618      	mov	r0, r3
 800603e:	f006 fa67 	bl	800c510 <USB_HC_ReadInterrupt>
 8006042:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	e025      	b.n	8006096 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f003 030f 	and.w	r3, r3, #15
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	fa22 f303 	lsr.w	r3, r2, r3
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d018      	beq.n	8006090 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4413      	add	r3, r2
 8006066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006074:	d106      	bne.n	8006084 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	b2db      	uxtb	r3, r3
 800607a:	4619      	mov	r1, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f8ab 	bl	80061d8 <HCD_HC_IN_IRQHandler>
 8006082:	e005      	b.n	8006090 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	b2db      	uxtb	r3, r3
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fcc6 	bl	8006a1c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	3301      	adds	r3, #1
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	429a      	cmp	r2, r3
 800609e:	d3d4      	bcc.n	800604a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060a8:	615a      	str	r2, [r3, #20]
 80060aa:	e000      	b.n	80060ae <HAL_HCD_IRQHandler+0x202>
      return;
 80060ac:	bf00      	nop
    }
  }
}
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <HAL_HCD_Start+0x16>
 80060c6:	2302      	movs	r3, #2
 80060c8:	e013      	b.n	80060f2 <HAL_HCD_Start+0x3e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f005 fcff 	bl	800bada <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2101      	movs	r1, #1
 80060e2:	4618      	mov	r0, r3
 80060e4:	f005 ff62 	bl	800bfac <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b082      	sub	sp, #8
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_HCD_Stop+0x16>
 800610c:	2302      	movs	r3, #2
 800610e:	e00d      	b.n	800612c <HAL_HCD_Stop+0x32>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f006 fb61 	bl	800c7e4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4618      	mov	r0, r3
 8006142:	f005 ff09 	bl	800bf58 <USB_ResetPort>
 8006146:	4603      	mov	r3, r0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	212c      	movs	r1, #44	; 0x2c
 8006162:	fb01 f303 	mul.w	r3, r1, r3
 8006166:	4413      	add	r3, r2
 8006168:	3360      	adds	r3, #96	; 0x60
 800616a:	781b      	ldrb	r3, [r3, #0]
}
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	212c      	movs	r1, #44	; 0x2c
 800618a:	fb01 f303 	mul.w	r3, r1, r3
 800618e:	4413      	add	r3, r2
 8006190:	3350      	adds	r3, #80	; 0x50
 8006192:	681b      	ldr	r3, [r3, #0]
}
 8006194:	4618      	mov	r0, r3
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f005 ff4d 	bl	800c04c <USB_GetCurrentFrame>
 80061b2:	4603      	mov	r3, r0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f005 ff28 	bl	800c01e <USB_GetHostSpeed>
 80061ce:	4603      	mov	r3, r0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80061ee:	78fb      	ldrb	r3, [r7, #3]
 80061f0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b04      	cmp	r3, #4
 8006206:	d119      	bne.n	800623c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	4413      	add	r3, r2
 8006210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006214:	461a      	mov	r2, r3
 8006216:	2304      	movs	r3, #4
 8006218:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	4413      	add	r3, r2
 8006222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	440a      	add	r2, r1
 8006230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006234:	f043 0302 	orr.w	r3, r3, #2
 8006238:	60d3      	str	r3, [r2, #12]
 800623a:	e101      	b.n	8006440 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	4413      	add	r3, r2
 8006244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006252:	d12b      	bne.n	80062ac <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	4413      	add	r3, r2
 800625c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006260:	461a      	mov	r2, r3
 8006262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006266:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	212c      	movs	r1, #44	; 0x2c
 800626e:	fb01 f303 	mul.w	r3, r1, r3
 8006272:	4413      	add	r3, r2
 8006274:	3361      	adds	r3, #97	; 0x61
 8006276:	2207      	movs	r2, #7
 8006278:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	4413      	add	r3, r2
 8006282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	440a      	add	r2, r1
 8006290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006294:	f043 0302 	orr.w	r3, r3, #2
 8006298:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	4611      	mov	r1, r2
 80062a4:	4618      	mov	r0, r3
 80062a6:	f006 f944 	bl	800c532 <USB_HC_Halt>
 80062aa:	e0c9      	b.n	8006440 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d109      	bne.n	80062d6 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ce:	461a      	mov	r2, r3
 80062d0:	2320      	movs	r3, #32
 80062d2:	6093      	str	r3, [r2, #8]
 80062d4:	e0b4      	b.n	8006440 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f003 0308 	and.w	r3, r3, #8
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d133      	bne.n	8006354 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	0151      	lsls	r1, r2, #5
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	440a      	add	r2, r1
 8006302:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006306:	f043 0302 	orr.w	r3, r3, #2
 800630a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	212c      	movs	r1, #44	; 0x2c
 8006312:	fb01 f303 	mul.w	r3, r1, r3
 8006316:	4413      	add	r3, r2
 8006318:	3361      	adds	r3, #97	; 0x61
 800631a:	2205      	movs	r2, #5
 800631c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	4413      	add	r3, r2
 8006326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632a:	461a      	mov	r2, r3
 800632c:	2310      	movs	r3, #16
 800632e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	4413      	add	r3, r2
 8006338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633c:	461a      	mov	r2, r3
 800633e:	2308      	movs	r3, #8
 8006340:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	4611      	mov	r1, r2
 800634c:	4618      	mov	r0, r3
 800634e:	f006 f8f0 	bl	800c532 <USB_HC_Halt>
 8006352:	e075      	b.n	8006440 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	4413      	add	r3, r2
 800635c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636a:	d134      	bne.n	80063d6 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	4413      	add	r3, r2
 8006374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	440a      	add	r2, r1
 8006382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006386:	f043 0302 	orr.w	r3, r3, #2
 800638a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	212c      	movs	r1, #44	; 0x2c
 8006392:	fb01 f303 	mul.w	r3, r1, r3
 8006396:	4413      	add	r3, r2
 8006398:	3361      	adds	r3, #97	; 0x61
 800639a:	2208      	movs	r2, #8
 800639c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063aa:	461a      	mov	r2, r3
 80063ac:	2310      	movs	r3, #16
 80063ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063bc:	461a      	mov	r2, r3
 80063be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063c2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	4611      	mov	r1, r2
 80063ce:	4618      	mov	r0, r3
 80063d0:	f006 f8af 	bl	800c532 <USB_HC_Halt>
 80063d4:	e034      	b.n	8006440 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e8:	2b80      	cmp	r3, #128	; 0x80
 80063ea:	d129      	bne.n	8006440 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	440a      	add	r2, r1
 8006402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006406:	f043 0302 	orr.w	r3, r3, #2
 800640a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	212c      	movs	r1, #44	; 0x2c
 8006412:	fb01 f303 	mul.w	r3, r1, r3
 8006416:	4413      	add	r3, r2
 8006418:	3361      	adds	r3, #97	; 0x61
 800641a:	2206      	movs	r2, #6
 800641c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	4611      	mov	r1, r2
 8006428:	4618      	mov	r0, r3
 800642a:	f006 f882 	bl	800c532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	4413      	add	r3, r2
 8006436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643a:	461a      	mov	r2, r3
 800643c:	2380      	movs	r3, #128	; 0x80
 800643e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	4413      	add	r3, r2
 8006448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006456:	d122      	bne.n	800649e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	4413      	add	r3, r2
 8006460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	0151      	lsls	r1, r2, #5
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	440a      	add	r2, r1
 800646e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006472:	f043 0302 	orr.w	r3, r3, #2
 8006476:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	4611      	mov	r1, r2
 8006482:	4618      	mov	r0, r3
 8006484:	f006 f855 	bl	800c532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	4413      	add	r3, r2
 8006490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006494:	461a      	mov	r2, r3
 8006496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800649a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800649c:	e2ba      	b.n	8006a14 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	f040 811b 	bne.w	80066ec <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d019      	beq.n	80064f2 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	212c      	movs	r1, #44	; 0x2c
 80064c4:	fb01 f303 	mul.w	r3, r1, r3
 80064c8:	4413      	add	r3, r2
 80064ca:	3348      	adds	r3, #72	; 0x48
 80064cc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	0159      	lsls	r1, r3, #5
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	440b      	add	r3, r1
 80064d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80064e0:	1ad2      	subs	r2, r2, r3
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	202c      	movs	r0, #44	; 0x2c
 80064e8:	fb00 f303 	mul.w	r3, r0, r3
 80064ec:	440b      	add	r3, r1
 80064ee:	3350      	adds	r3, #80	; 0x50
 80064f0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	212c      	movs	r1, #44	; 0x2c
 80064f8:	fb01 f303 	mul.w	r3, r1, r3
 80064fc:	4413      	add	r3, r2
 80064fe:	3361      	adds	r3, #97	; 0x61
 8006500:	2201      	movs	r2, #1
 8006502:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	212c      	movs	r1, #44	; 0x2c
 800650a:	fb01 f303 	mul.w	r3, r1, r3
 800650e:	4413      	add	r3, r2
 8006510:	335c      	adds	r3, #92	; 0x5c
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	4413      	add	r3, r2
 800651e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006522:	461a      	mov	r2, r3
 8006524:	2301      	movs	r3, #1
 8006526:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	212c      	movs	r1, #44	; 0x2c
 800652e:	fb01 f303 	mul.w	r3, r1, r3
 8006532:	4413      	add	r3, r2
 8006534:	333f      	adds	r3, #63	; 0x3f
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d009      	beq.n	8006550 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	212c      	movs	r1, #44	; 0x2c
 8006542:	fb01 f303 	mul.w	r3, r1, r3
 8006546:	4413      	add	r3, r2
 8006548:	333f      	adds	r3, #63	; 0x3f
 800654a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800654c:	2b02      	cmp	r3, #2
 800654e:	d121      	bne.n	8006594 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	4413      	add	r3, r2
 8006558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	0151      	lsls	r1, r2, #5
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	440a      	add	r2, r1
 8006566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800656a:	f043 0302 	orr.w	r3, r3, #2
 800656e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	4611      	mov	r1, r2
 800657a:	4618      	mov	r0, r3
 800657c:	f005 ffd9 	bl	800c532 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	4413      	add	r3, r2
 8006588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658c:	461a      	mov	r2, r3
 800658e:	2310      	movs	r3, #16
 8006590:	6093      	str	r3, [r2, #8]
 8006592:	e066      	b.n	8006662 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	212c      	movs	r1, #44	; 0x2c
 800659a:	fb01 f303 	mul.w	r3, r1, r3
 800659e:	4413      	add	r3, r2
 80065a0:	333f      	adds	r3, #63	; 0x3f
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d127      	bne.n	80065f8 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	0151      	lsls	r1, r2, #5
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	440a      	add	r2, r1
 80065be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065c6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	212c      	movs	r1, #44	; 0x2c
 80065ce:	fb01 f303 	mul.w	r3, r1, r3
 80065d2:	4413      	add	r3, r2
 80065d4:	3360      	adds	r3, #96	; 0x60
 80065d6:	2201      	movs	r2, #1
 80065d8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	b2d9      	uxtb	r1, r3
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	202c      	movs	r0, #44	; 0x2c
 80065e4:	fb00 f303 	mul.w	r3, r0, r3
 80065e8:	4413      	add	r3, r2
 80065ea:	3360      	adds	r3, #96	; 0x60
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f008 f95b 	bl	800e8ac <HAL_HCD_HC_NotifyURBChange_Callback>
 80065f6:	e034      	b.n	8006662 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	212c      	movs	r1, #44	; 0x2c
 80065fe:	fb01 f303 	mul.w	r3, r1, r3
 8006602:	4413      	add	r3, r2
 8006604:	333f      	adds	r3, #63	; 0x3f
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d12a      	bne.n	8006662 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	212c      	movs	r1, #44	; 0x2c
 8006612:	fb01 f303 	mul.w	r3, r1, r3
 8006616:	4413      	add	r3, r2
 8006618:	3360      	adds	r3, #96	; 0x60
 800661a:	2201      	movs	r2, #1
 800661c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	212c      	movs	r1, #44	; 0x2c
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	4413      	add	r3, r2
 800662a:	3354      	adds	r3, #84	; 0x54
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	f083 0301 	eor.w	r3, r3, #1
 8006632:	b2d8      	uxtb	r0, r3
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	212c      	movs	r1, #44	; 0x2c
 800663a:	fb01 f303 	mul.w	r3, r1, r3
 800663e:	4413      	add	r3, r2
 8006640:	3354      	adds	r3, #84	; 0x54
 8006642:	4602      	mov	r2, r0
 8006644:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	b2d9      	uxtb	r1, r3
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	202c      	movs	r0, #44	; 0x2c
 8006650:	fb00 f303 	mul.w	r3, r0, r3
 8006654:	4413      	add	r3, r2
 8006656:	3360      	adds	r3, #96	; 0x60
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f008 f925 	bl	800e8ac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d12b      	bne.n	80066c2 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	212c      	movs	r1, #44	; 0x2c
 8006670:	fb01 f303 	mul.w	r3, r1, r3
 8006674:	4413      	add	r3, r2
 8006676:	3348      	adds	r3, #72	; 0x48
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	202c      	movs	r0, #44	; 0x2c
 8006680:	fb00 f202 	mul.w	r2, r0, r2
 8006684:	440a      	add	r2, r1
 8006686:	3240      	adds	r2, #64	; 0x40
 8006688:	8812      	ldrh	r2, [r2, #0]
 800668a:	fbb3 f3f2 	udiv	r3, r3, r2
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 81be 	beq.w	8006a14 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	212c      	movs	r1, #44	; 0x2c
 800669e:	fb01 f303 	mul.w	r3, r1, r3
 80066a2:	4413      	add	r3, r2
 80066a4:	3354      	adds	r3, #84	; 0x54
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	f083 0301 	eor.w	r3, r3, #1
 80066ac:	b2d8      	uxtb	r0, r3
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	212c      	movs	r1, #44	; 0x2c
 80066b4:	fb01 f303 	mul.w	r3, r1, r3
 80066b8:	4413      	add	r3, r2
 80066ba:	3354      	adds	r3, #84	; 0x54
 80066bc:	4602      	mov	r2, r0
 80066be:	701a      	strb	r2, [r3, #0]
}
 80066c0:	e1a8      	b.n	8006a14 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	212c      	movs	r1, #44	; 0x2c
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	4413      	add	r3, r2
 80066ce:	3354      	adds	r3, #84	; 0x54
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	f083 0301 	eor.w	r3, r3, #1
 80066d6:	b2d8      	uxtb	r0, r3
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	212c      	movs	r1, #44	; 0x2c
 80066de:	fb01 f303 	mul.w	r3, r1, r3
 80066e2:	4413      	add	r3, r2
 80066e4:	3354      	adds	r3, #84	; 0x54
 80066e6:	4602      	mov	r2, r0
 80066e8:	701a      	strb	r2, [r3, #0]
}
 80066ea:	e193      	b.n	8006a14 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b02      	cmp	r3, #2
 8006700:	f040 8106 	bne.w	8006910 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	4413      	add	r3, r2
 800670c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	0151      	lsls	r1, r2, #5
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	440a      	add	r2, r1
 800671a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800671e:	f023 0302 	bic.w	r3, r3, #2
 8006722:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	212c      	movs	r1, #44	; 0x2c
 800672a:	fb01 f303 	mul.w	r3, r1, r3
 800672e:	4413      	add	r3, r2
 8006730:	3361      	adds	r3, #97	; 0x61
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d109      	bne.n	800674c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	212c      	movs	r1, #44	; 0x2c
 800673e:	fb01 f303 	mul.w	r3, r1, r3
 8006742:	4413      	add	r3, r2
 8006744:	3360      	adds	r3, #96	; 0x60
 8006746:	2201      	movs	r2, #1
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	e0c9      	b.n	80068e0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	212c      	movs	r1, #44	; 0x2c
 8006752:	fb01 f303 	mul.w	r3, r1, r3
 8006756:	4413      	add	r3, r2
 8006758:	3361      	adds	r3, #97	; 0x61
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b05      	cmp	r3, #5
 800675e:	d109      	bne.n	8006774 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	212c      	movs	r1, #44	; 0x2c
 8006766:	fb01 f303 	mul.w	r3, r1, r3
 800676a:	4413      	add	r3, r2
 800676c:	3360      	adds	r3, #96	; 0x60
 800676e:	2205      	movs	r2, #5
 8006770:	701a      	strb	r2, [r3, #0]
 8006772:	e0b5      	b.n	80068e0 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	212c      	movs	r1, #44	; 0x2c
 800677a:	fb01 f303 	mul.w	r3, r1, r3
 800677e:	4413      	add	r3, r2
 8006780:	3361      	adds	r3, #97	; 0x61
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b06      	cmp	r3, #6
 8006786:	d009      	beq.n	800679c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	212c      	movs	r1, #44	; 0x2c
 800678e:	fb01 f303 	mul.w	r3, r1, r3
 8006792:	4413      	add	r3, r2
 8006794:	3361      	adds	r3, #97	; 0x61
 8006796:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006798:	2b08      	cmp	r3, #8
 800679a:	d150      	bne.n	800683e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	212c      	movs	r1, #44	; 0x2c
 80067a2:	fb01 f303 	mul.w	r3, r1, r3
 80067a6:	4413      	add	r3, r2
 80067a8:	335c      	adds	r3, #92	; 0x5c
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	202c      	movs	r0, #44	; 0x2c
 80067b4:	fb00 f303 	mul.w	r3, r0, r3
 80067b8:	440b      	add	r3, r1
 80067ba:	335c      	adds	r3, #92	; 0x5c
 80067bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	212c      	movs	r1, #44	; 0x2c
 80067c4:	fb01 f303 	mul.w	r3, r1, r3
 80067c8:	4413      	add	r3, r2
 80067ca:	335c      	adds	r3, #92	; 0x5c
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d912      	bls.n	80067f8 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	212c      	movs	r1, #44	; 0x2c
 80067d8:	fb01 f303 	mul.w	r3, r1, r3
 80067dc:	4413      	add	r3, r2
 80067de:	335c      	adds	r3, #92	; 0x5c
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	212c      	movs	r1, #44	; 0x2c
 80067ea:	fb01 f303 	mul.w	r3, r1, r3
 80067ee:	4413      	add	r3, r2
 80067f0:	3360      	adds	r3, #96	; 0x60
 80067f2:	2204      	movs	r2, #4
 80067f4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80067f6:	e073      	b.n	80068e0 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	212c      	movs	r1, #44	; 0x2c
 80067fe:	fb01 f303 	mul.w	r3, r1, r3
 8006802:	4413      	add	r3, r2
 8006804:	3360      	adds	r3, #96	; 0x60
 8006806:	2202      	movs	r2, #2
 8006808:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	4413      	add	r3, r2
 8006812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006820:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006828:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	4413      	add	r3, r2
 8006832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006836:	461a      	mov	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800683c:	e050      	b.n	80068e0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	212c      	movs	r1, #44	; 0x2c
 8006844:	fb01 f303 	mul.w	r3, r1, r3
 8006848:	4413      	add	r3, r2
 800684a:	3361      	adds	r3, #97	; 0x61
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b03      	cmp	r3, #3
 8006850:	d122      	bne.n	8006898 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	212c      	movs	r1, #44	; 0x2c
 8006858:	fb01 f303 	mul.w	r3, r1, r3
 800685c:	4413      	add	r3, r2
 800685e:	3360      	adds	r3, #96	; 0x60
 8006860:	2202      	movs	r2, #2
 8006862:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	4413      	add	r3, r2
 800686c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800687a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006882:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	4413      	add	r3, r2
 800688c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006890:	461a      	mov	r2, r3
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	e023      	b.n	80068e0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	212c      	movs	r1, #44	; 0x2c
 800689e:	fb01 f303 	mul.w	r3, r1, r3
 80068a2:	4413      	add	r3, r2
 80068a4:	3361      	adds	r3, #97	; 0x61
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b07      	cmp	r3, #7
 80068aa:	d119      	bne.n	80068e0 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	212c      	movs	r1, #44	; 0x2c
 80068b2:	fb01 f303 	mul.w	r3, r1, r3
 80068b6:	4413      	add	r3, r2
 80068b8:	335c      	adds	r3, #92	; 0x5c
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	202c      	movs	r0, #44	; 0x2c
 80068c4:	fb00 f303 	mul.w	r3, r0, r3
 80068c8:	440b      	add	r3, r1
 80068ca:	335c      	adds	r3, #92	; 0x5c
 80068cc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	212c      	movs	r1, #44	; 0x2c
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	4413      	add	r3, r2
 80068da:	3360      	adds	r3, #96	; 0x60
 80068dc:	2204      	movs	r2, #4
 80068de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ec:	461a      	mov	r2, r3
 80068ee:	2302      	movs	r3, #2
 80068f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	b2d9      	uxtb	r1, r3
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	202c      	movs	r0, #44	; 0x2c
 80068fc:	fb00 f303 	mul.w	r3, r0, r3
 8006900:	4413      	add	r3, r2
 8006902:	3360      	adds	r3, #96	; 0x60
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f007 ffcf 	bl	800e8ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800690e:	e081      	b.n	8006a14 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	4413      	add	r3, r2
 8006918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 0310 	and.w	r3, r3, #16
 8006922:	2b10      	cmp	r3, #16
 8006924:	d176      	bne.n	8006a14 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	212c      	movs	r1, #44	; 0x2c
 800692c:	fb01 f303 	mul.w	r3, r1, r3
 8006930:	4413      	add	r3, r2
 8006932:	333f      	adds	r3, #63	; 0x3f
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	2b03      	cmp	r3, #3
 8006938:	d121      	bne.n	800697e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	212c      	movs	r1, #44	; 0x2c
 8006940:	fb01 f303 	mul.w	r3, r1, r3
 8006944:	4413      	add	r3, r2
 8006946:	335c      	adds	r3, #92	; 0x5c
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	4413      	add	r3, r2
 8006954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	0151      	lsls	r1, r2, #5
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	440a      	add	r2, r1
 8006962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006966:	f043 0302 	orr.w	r3, r3, #2
 800696a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	b2d2      	uxtb	r2, r2
 8006974:	4611      	mov	r1, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f005 fddb 	bl	800c532 <USB_HC_Halt>
 800697c:	e041      	b.n	8006a02 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	212c      	movs	r1, #44	; 0x2c
 8006984:	fb01 f303 	mul.w	r3, r1, r3
 8006988:	4413      	add	r3, r2
 800698a:	333f      	adds	r3, #63	; 0x3f
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d009      	beq.n	80069a6 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	212c      	movs	r1, #44	; 0x2c
 8006998:	fb01 f303 	mul.w	r3, r1, r3
 800699c:	4413      	add	r3, r2
 800699e:	333f      	adds	r3, #63	; 0x3f
 80069a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d12d      	bne.n	8006a02 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	212c      	movs	r1, #44	; 0x2c
 80069ac:	fb01 f303 	mul.w	r3, r1, r3
 80069b0:	4413      	add	r3, r2
 80069b2:	335c      	adds	r3, #92	; 0x5c
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d120      	bne.n	8006a02 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	212c      	movs	r1, #44	; 0x2c
 80069c6:	fb01 f303 	mul.w	r3, r1, r3
 80069ca:	4413      	add	r3, r2
 80069cc:	3361      	adds	r3, #97	; 0x61
 80069ce:	2203      	movs	r2, #3
 80069d0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	0151      	lsls	r1, r2, #5
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	440a      	add	r2, r1
 80069e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069ec:	f043 0302 	orr.w	r3, r3, #2
 80069f0:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	4611      	mov	r1, r2
 80069fc:	4618      	mov	r0, r3
 80069fe:	f005 fd98 	bl	800c532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0e:	461a      	mov	r2, r3
 8006a10:	2310      	movs	r3, #16
 8006a12:	6093      	str	r3, [r2, #8]
}
 8006a14:	bf00      	nop
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8006a32:	78fb      	ldrb	r3, [r7, #3]
 8006a34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b04      	cmp	r3, #4
 8006a4a:	d119      	bne.n	8006a80 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a58:	461a      	mov	r2, r3
 8006a5a:	2304      	movs	r3, #4
 8006a5c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	0151      	lsls	r1, r2, #5
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	440a      	add	r2, r1
 8006a74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a78:	f043 0302 	orr.w	r3, r3, #2
 8006a7c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006a7e:	e3c6      	b.n	800720e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 0320 	and.w	r3, r3, #32
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	d13e      	bne.n	8006b14 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	2320      	movs	r3, #32
 8006aa6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	212c      	movs	r1, #44	; 0x2c
 8006aae:	fb01 f303 	mul.w	r3, r1, r3
 8006ab2:	4413      	add	r3, r2
 8006ab4:	333d      	adds	r3, #61	; 0x3d
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	f040 83a8 	bne.w	800720e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	212c      	movs	r1, #44	; 0x2c
 8006ac4:	fb01 f303 	mul.w	r3, r1, r3
 8006ac8:	4413      	add	r3, r2
 8006aca:	333d      	adds	r3, #61	; 0x3d
 8006acc:	2200      	movs	r2, #0
 8006ace:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	212c      	movs	r1, #44	; 0x2c
 8006ad6:	fb01 f303 	mul.w	r3, r1, r3
 8006ada:	4413      	add	r3, r2
 8006adc:	3360      	adds	r3, #96	; 0x60
 8006ade:	2202      	movs	r2, #2
 8006ae0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	0151      	lsls	r1, r2, #5
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	440a      	add	r2, r1
 8006af8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006afc:	f043 0302 	orr.w	r3, r3, #2
 8006b00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f005 fd10 	bl	800c532 <USB_HC_Halt>
}
 8006b12:	e37c      	b.n	800720e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b2a:	d122      	bne.n	8006b72 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	0151      	lsls	r1, r2, #5
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	440a      	add	r2, r1
 8006b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b46:	f043 0302 	orr.w	r3, r3, #2
 8006b4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	4611      	mov	r1, r2
 8006b56:	4618      	mov	r0, r3
 8006b58:	f005 fceb 	bl	800c532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b68:	461a      	mov	r2, r3
 8006b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b6e:	6093      	str	r3, [r2, #8]
}
 8006b70:	e34d      	b.n	800720e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d150      	bne.n	8006c2a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	212c      	movs	r1, #44	; 0x2c
 8006b8e:	fb01 f303 	mul.w	r3, r1, r3
 8006b92:	4413      	add	r3, r2
 8006b94:	335c      	adds	r3, #92	; 0x5c
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	d111      	bne.n	8006bd4 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	212c      	movs	r1, #44	; 0x2c
 8006bb6:	fb01 f303 	mul.w	r3, r1, r3
 8006bba:	4413      	add	r3, r2
 8006bbc:	333d      	adds	r3, #61	; 0x3d
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bce:	461a      	mov	r2, r3
 8006bd0:	2340      	movs	r3, #64	; 0x40
 8006bd2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bee:	f043 0302 	orr.w	r3, r3, #2
 8006bf2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f005 fc97 	bl	800c532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c10:	461a      	mov	r2, r3
 8006c12:	2301      	movs	r3, #1
 8006c14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	212c      	movs	r1, #44	; 0x2c
 8006c1c:	fb01 f303 	mul.w	r3, r1, r3
 8006c20:	4413      	add	r3, r2
 8006c22:	3361      	adds	r3, #97	; 0x61
 8006c24:	2201      	movs	r2, #1
 8006c26:	701a      	strb	r2, [r3, #0]
}
 8006c28:	e2f1      	b.n	800720e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3c:	2b40      	cmp	r3, #64	; 0x40
 8006c3e:	d13c      	bne.n	8006cba <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	212c      	movs	r1, #44	; 0x2c
 8006c46:	fb01 f303 	mul.w	r3, r1, r3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3361      	adds	r3, #97	; 0x61
 8006c4e:	2204      	movs	r2, #4
 8006c50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	212c      	movs	r1, #44	; 0x2c
 8006c58:	fb01 f303 	mul.w	r3, r1, r3
 8006c5c:	4413      	add	r3, r2
 8006c5e:	333d      	adds	r3, #61	; 0x3d
 8006c60:	2201      	movs	r2, #1
 8006c62:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	212c      	movs	r1, #44	; 0x2c
 8006c6a:	fb01 f303 	mul.w	r3, r1, r3
 8006c6e:	4413      	add	r3, r2
 8006c70:	335c      	adds	r3, #92	; 0x5c
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	0151      	lsls	r1, r2, #5
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	440a      	add	r2, r1
 8006c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c90:	f043 0302 	orr.w	r3, r3, #2
 8006c94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	b2d2      	uxtb	r2, r2
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f005 fc46 	bl	800c532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	2340      	movs	r3, #64	; 0x40
 8006cb6:	6093      	str	r3, [r2, #8]
}
 8006cb8:	e2a9      	b.n	800720e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f003 0308 	and.w	r3, r3, #8
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d12a      	bne.n	8006d26 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cdc:	461a      	mov	r2, r3
 8006cde:	2308      	movs	r3, #8
 8006ce0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	0151      	lsls	r1, r2, #5
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	440a      	add	r2, r1
 8006cf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cfc:	f043 0302 	orr.w	r3, r3, #2
 8006d00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	b2d2      	uxtb	r2, r2
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f005 fc10 	bl	800c532 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	212c      	movs	r1, #44	; 0x2c
 8006d18:	fb01 f303 	mul.w	r3, r1, r3
 8006d1c:	4413      	add	r3, r2
 8006d1e:	3361      	adds	r3, #97	; 0x61
 8006d20:	2205      	movs	r2, #5
 8006d22:	701a      	strb	r2, [r3, #0]
}
 8006d24:	e273      	b.n	800720e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f003 0310 	and.w	r3, r3, #16
 8006d38:	2b10      	cmp	r3, #16
 8006d3a:	d150      	bne.n	8006dde <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	212c      	movs	r1, #44	; 0x2c
 8006d42:	fb01 f303 	mul.w	r3, r1, r3
 8006d46:	4413      	add	r3, r2
 8006d48:	335c      	adds	r3, #92	; 0x5c
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	212c      	movs	r1, #44	; 0x2c
 8006d54:	fb01 f303 	mul.w	r3, r1, r3
 8006d58:	4413      	add	r3, r2
 8006d5a:	3361      	adds	r3, #97	; 0x61
 8006d5c:	2203      	movs	r2, #3
 8006d5e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	212c      	movs	r1, #44	; 0x2c
 8006d66:	fb01 f303 	mul.w	r3, r1, r3
 8006d6a:	4413      	add	r3, r2
 8006d6c:	333d      	adds	r3, #61	; 0x3d
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d112      	bne.n	8006d9a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	212c      	movs	r1, #44	; 0x2c
 8006d7a:	fb01 f303 	mul.w	r3, r1, r3
 8006d7e:	4413      	add	r3, r2
 8006d80:	333c      	adds	r3, #60	; 0x3c
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d108      	bne.n	8006d9a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	212c      	movs	r1, #44	; 0x2c
 8006d8e:	fb01 f303 	mul.w	r3, r1, r3
 8006d92:	4413      	add	r3, r2
 8006d94:	333d      	adds	r3, #61	; 0x3d
 8006d96:	2201      	movs	r2, #1
 8006d98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006db4:	f043 0302 	orr.w	r3, r3, #2
 8006db8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f005 fbb4 	bl	800c532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	2310      	movs	r3, #16
 8006dda:	6093      	str	r3, [r2, #8]
}
 8006ddc:	e217      	b.n	800720e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df0:	2b80      	cmp	r3, #128	; 0x80
 8006df2:	d174      	bne.n	8006ede <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d121      	bne.n	8006e40 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	212c      	movs	r1, #44	; 0x2c
 8006e02:	fb01 f303 	mul.w	r3, r1, r3
 8006e06:	4413      	add	r3, r2
 8006e08:	3361      	adds	r3, #97	; 0x61
 8006e0a:	2206      	movs	r2, #6
 8006e0c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	0151      	lsls	r1, r2, #5
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	440a      	add	r2, r1
 8006e24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e28:	f043 0302 	orr.w	r3, r3, #2
 8006e2c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	4611      	mov	r1, r2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f005 fb7a 	bl	800c532 <USB_HC_Halt>
 8006e3e:	e044      	b.n	8006eca <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	212c      	movs	r1, #44	; 0x2c
 8006e46:	fb01 f303 	mul.w	r3, r1, r3
 8006e4a:	4413      	add	r3, r2
 8006e4c:	335c      	adds	r3, #92	; 0x5c
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	202c      	movs	r0, #44	; 0x2c
 8006e58:	fb00 f303 	mul.w	r3, r0, r3
 8006e5c:	440b      	add	r3, r1
 8006e5e:	335c      	adds	r3, #92	; 0x5c
 8006e60:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	212c      	movs	r1, #44	; 0x2c
 8006e68:	fb01 f303 	mul.w	r3, r1, r3
 8006e6c:	4413      	add	r3, r2
 8006e6e:	335c      	adds	r3, #92	; 0x5c
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d920      	bls.n	8006eb8 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	212c      	movs	r1, #44	; 0x2c
 8006e7c:	fb01 f303 	mul.w	r3, r1, r3
 8006e80:	4413      	add	r3, r2
 8006e82:	335c      	adds	r3, #92	; 0x5c
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	212c      	movs	r1, #44	; 0x2c
 8006e8e:	fb01 f303 	mul.w	r3, r1, r3
 8006e92:	4413      	add	r3, r2
 8006e94:	3360      	adds	r3, #96	; 0x60
 8006e96:	2204      	movs	r2, #4
 8006e98:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	b2d9      	uxtb	r1, r3
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	202c      	movs	r0, #44	; 0x2c
 8006ea4:	fb00 f303 	mul.w	r3, r0, r3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	3360      	adds	r3, #96	; 0x60
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f007 fcfb 	bl	800e8ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8006eb6:	e008      	b.n	8006eca <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	212c      	movs	r1, #44	; 0x2c
 8006ebe:	fb01 f303 	mul.w	r3, r1, r3
 8006ec2:	4413      	add	r3, r2
 8006ec4:	3360      	adds	r3, #96	; 0x60
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	2380      	movs	r3, #128	; 0x80
 8006eda:	6093      	str	r3, [r2, #8]
}
 8006edc:	e197      	b.n	800720e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef4:	d134      	bne.n	8006f60 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	0151      	lsls	r1, r2, #5
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	440a      	add	r2, r1
 8006f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f10:	f043 0302 	orr.w	r3, r3, #2
 8006f14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	b2d2      	uxtb	r2, r2
 8006f1e:	4611      	mov	r1, r2
 8006f20:	4618      	mov	r0, r3
 8006f22:	f005 fb06 	bl	800c532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f32:	461a      	mov	r2, r3
 8006f34:	2310      	movs	r3, #16
 8006f36:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f44:	461a      	mov	r2, r3
 8006f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	212c      	movs	r1, #44	; 0x2c
 8006f52:	fb01 f303 	mul.w	r3, r1, r3
 8006f56:	4413      	add	r3, r2
 8006f58:	3361      	adds	r3, #97	; 0x61
 8006f5a:	2208      	movs	r2, #8
 8006f5c:	701a      	strb	r2, [r3, #0]
}
 8006f5e:	e156      	b.n	800720e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	f040 814b 	bne.w	800720e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	0151      	lsls	r1, r2, #5
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	440a      	add	r2, r1
 8006f8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f92:	f023 0302 	bic.w	r3, r3, #2
 8006f96:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	212c      	movs	r1, #44	; 0x2c
 8006f9e:	fb01 f303 	mul.w	r3, r1, r3
 8006fa2:	4413      	add	r3, r2
 8006fa4:	3361      	adds	r3, #97	; 0x61
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d179      	bne.n	80070a0 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	212c      	movs	r1, #44	; 0x2c
 8006fb2:	fb01 f303 	mul.w	r3, r1, r3
 8006fb6:	4413      	add	r3, r2
 8006fb8:	3360      	adds	r3, #96	; 0x60
 8006fba:	2201      	movs	r2, #1
 8006fbc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	212c      	movs	r1, #44	; 0x2c
 8006fc4:	fb01 f303 	mul.w	r3, r1, r3
 8006fc8:	4413      	add	r3, r2
 8006fca:	333f      	adds	r3, #63	; 0x3f
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d00a      	beq.n	8006fe8 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	212c      	movs	r1, #44	; 0x2c
 8006fd8:	fb01 f303 	mul.w	r3, r1, r3
 8006fdc:	4413      	add	r3, r2
 8006fde:	333f      	adds	r3, #63	; 0x3f
 8006fe0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	f040 80fc 	bne.w	80071e0 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d142      	bne.n	8007076 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	212c      	movs	r1, #44	; 0x2c
 8006ff6:	fb01 f303 	mul.w	r3, r1, r3
 8006ffa:	4413      	add	r3, r2
 8006ffc:	334c      	adds	r3, #76	; 0x4c
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 80ed 	beq.w	80071e0 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	212c      	movs	r1, #44	; 0x2c
 800700c:	fb01 f303 	mul.w	r3, r1, r3
 8007010:	4413      	add	r3, r2
 8007012:	334c      	adds	r3, #76	; 0x4c
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	202c      	movs	r0, #44	; 0x2c
 800701c:	fb00 f202 	mul.w	r2, r0, r2
 8007020:	440a      	add	r2, r1
 8007022:	3240      	adds	r2, #64	; 0x40
 8007024:	8812      	ldrh	r2, [r2, #0]
 8007026:	4413      	add	r3, r2
 8007028:	3b01      	subs	r3, #1
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	202c      	movs	r0, #44	; 0x2c
 8007030:	fb00 f202 	mul.w	r2, r0, r2
 8007034:	440a      	add	r2, r1
 8007036:	3240      	adds	r2, #64	; 0x40
 8007038:	8812      	ldrh	r2, [r2, #0]
 800703a:	fbb3 f3f2 	udiv	r3, r3, r2
 800703e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 80ca 	beq.w	80071e0 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	212c      	movs	r1, #44	; 0x2c
 8007052:	fb01 f303 	mul.w	r3, r1, r3
 8007056:	4413      	add	r3, r2
 8007058:	3355      	adds	r3, #85	; 0x55
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	f083 0301 	eor.w	r3, r3, #1
 8007060:	b2d8      	uxtb	r0, r3
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	212c      	movs	r1, #44	; 0x2c
 8007068:	fb01 f303 	mul.w	r3, r1, r3
 800706c:	4413      	add	r3, r2
 800706e:	3355      	adds	r3, #85	; 0x55
 8007070:	4602      	mov	r2, r0
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	e0b4      	b.n	80071e0 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	212c      	movs	r1, #44	; 0x2c
 800707c:	fb01 f303 	mul.w	r3, r1, r3
 8007080:	4413      	add	r3, r2
 8007082:	3355      	adds	r3, #85	; 0x55
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	f083 0301 	eor.w	r3, r3, #1
 800708a:	b2d8      	uxtb	r0, r3
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	212c      	movs	r1, #44	; 0x2c
 8007092:	fb01 f303 	mul.w	r3, r1, r3
 8007096:	4413      	add	r3, r2
 8007098:	3355      	adds	r3, #85	; 0x55
 800709a:	4602      	mov	r2, r0
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	e09f      	b.n	80071e0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	212c      	movs	r1, #44	; 0x2c
 80070a6:	fb01 f303 	mul.w	r3, r1, r3
 80070aa:	4413      	add	r3, r2
 80070ac:	3361      	adds	r3, #97	; 0x61
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d109      	bne.n	80070c8 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	212c      	movs	r1, #44	; 0x2c
 80070ba:	fb01 f303 	mul.w	r3, r1, r3
 80070be:	4413      	add	r3, r2
 80070c0:	3360      	adds	r3, #96	; 0x60
 80070c2:	2202      	movs	r2, #2
 80070c4:	701a      	strb	r2, [r3, #0]
 80070c6:	e08b      	b.n	80071e0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	212c      	movs	r1, #44	; 0x2c
 80070ce:	fb01 f303 	mul.w	r3, r1, r3
 80070d2:	4413      	add	r3, r2
 80070d4:	3361      	adds	r3, #97	; 0x61
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d109      	bne.n	80070f0 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	212c      	movs	r1, #44	; 0x2c
 80070e2:	fb01 f303 	mul.w	r3, r1, r3
 80070e6:	4413      	add	r3, r2
 80070e8:	3360      	adds	r3, #96	; 0x60
 80070ea:	2202      	movs	r2, #2
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	e077      	b.n	80071e0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	212c      	movs	r1, #44	; 0x2c
 80070f6:	fb01 f303 	mul.w	r3, r1, r3
 80070fa:	4413      	add	r3, r2
 80070fc:	3361      	adds	r3, #97	; 0x61
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	2b05      	cmp	r3, #5
 8007102:	d109      	bne.n	8007118 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	212c      	movs	r1, #44	; 0x2c
 800710a:	fb01 f303 	mul.w	r3, r1, r3
 800710e:	4413      	add	r3, r2
 8007110:	3360      	adds	r3, #96	; 0x60
 8007112:	2205      	movs	r2, #5
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	e063      	b.n	80071e0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	212c      	movs	r1, #44	; 0x2c
 800711e:	fb01 f303 	mul.w	r3, r1, r3
 8007122:	4413      	add	r3, r2
 8007124:	3361      	adds	r3, #97	; 0x61
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b06      	cmp	r3, #6
 800712a:	d009      	beq.n	8007140 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	212c      	movs	r1, #44	; 0x2c
 8007132:	fb01 f303 	mul.w	r3, r1, r3
 8007136:	4413      	add	r3, r2
 8007138:	3361      	adds	r3, #97	; 0x61
 800713a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800713c:	2b08      	cmp	r3, #8
 800713e:	d14f      	bne.n	80071e0 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	212c      	movs	r1, #44	; 0x2c
 8007146:	fb01 f303 	mul.w	r3, r1, r3
 800714a:	4413      	add	r3, r2
 800714c:	335c      	adds	r3, #92	; 0x5c
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	1c5a      	adds	r2, r3, #1
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	202c      	movs	r0, #44	; 0x2c
 8007158:	fb00 f303 	mul.w	r3, r0, r3
 800715c:	440b      	add	r3, r1
 800715e:	335c      	adds	r3, #92	; 0x5c
 8007160:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	212c      	movs	r1, #44	; 0x2c
 8007168:	fb01 f303 	mul.w	r3, r1, r3
 800716c:	4413      	add	r3, r2
 800716e:	335c      	adds	r3, #92	; 0x5c
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b02      	cmp	r3, #2
 8007174:	d912      	bls.n	800719c <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	212c      	movs	r1, #44	; 0x2c
 800717c:	fb01 f303 	mul.w	r3, r1, r3
 8007180:	4413      	add	r3, r2
 8007182:	335c      	adds	r3, #92	; 0x5c
 8007184:	2200      	movs	r2, #0
 8007186:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	212c      	movs	r1, #44	; 0x2c
 800718e:	fb01 f303 	mul.w	r3, r1, r3
 8007192:	4413      	add	r3, r2
 8007194:	3360      	adds	r3, #96	; 0x60
 8007196:	2204      	movs	r2, #4
 8007198:	701a      	strb	r2, [r3, #0]
 800719a:	e021      	b.n	80071e0 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	212c      	movs	r1, #44	; 0x2c
 80071a2:	fb01 f303 	mul.w	r3, r1, r3
 80071a6:	4413      	add	r3, r2
 80071a8:	3360      	adds	r3, #96	; 0x60
 80071aa:	2202      	movs	r2, #2
 80071ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071c4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071cc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071da:	461a      	mov	r2, r3
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ec:	461a      	mov	r2, r3
 80071ee:	2302      	movs	r3, #2
 80071f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	b2d9      	uxtb	r1, r3
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	202c      	movs	r0, #44	; 0x2c
 80071fc:	fb00 f303 	mul.w	r3, r0, r3
 8007200:	4413      	add	r3, r2
 8007202:	3360      	adds	r3, #96	; 0x60
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f007 fb4f 	bl	800e8ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800720e:	bf00      	nop
 8007210:	3720      	adds	r7, #32
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b08a      	sub	sp, #40	; 0x28
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	f003 030f 	and.w	r3, r3, #15
 8007236:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	0c5b      	lsrs	r3, r3, #17
 800723c:	f003 030f 	and.w	r3, r3, #15
 8007240:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	091b      	lsrs	r3, r3, #4
 8007246:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800724a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2b02      	cmp	r3, #2
 8007250:	d004      	beq.n	800725c <HCD_RXQLVL_IRQHandler+0x46>
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2b05      	cmp	r3, #5
 8007256:	f000 80a9 	beq.w	80073ac <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800725a:	e0aa      	b.n	80073b2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 80a6 	beq.w	80073b0 <HCD_RXQLVL_IRQHandler+0x19a>
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	212c      	movs	r1, #44	; 0x2c
 800726a:	fb01 f303 	mul.w	r3, r1, r3
 800726e:	4413      	add	r3, r2
 8007270:	3344      	adds	r3, #68	; 0x44
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 809b 	beq.w	80073b0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	212c      	movs	r1, #44	; 0x2c
 8007280:	fb01 f303 	mul.w	r3, r1, r3
 8007284:	4413      	add	r3, r2
 8007286:	3350      	adds	r3, #80	; 0x50
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	441a      	add	r2, r3
 800728e:	6879      	ldr	r1, [r7, #4]
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	202c      	movs	r0, #44	; 0x2c
 8007294:	fb00 f303 	mul.w	r3, r0, r3
 8007298:	440b      	add	r3, r1
 800729a:	334c      	adds	r3, #76	; 0x4c
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d87a      	bhi.n	8007398 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6818      	ldr	r0, [r3, #0]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	212c      	movs	r1, #44	; 0x2c
 80072ac:	fb01 f303 	mul.w	r3, r1, r3
 80072b0:	4413      	add	r3, r2
 80072b2:	3344      	adds	r3, #68	; 0x44
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	b292      	uxth	r2, r2
 80072ba:	4619      	mov	r1, r3
 80072bc:	f004 fcd7 	bl	800bc6e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	212c      	movs	r1, #44	; 0x2c
 80072c6:	fb01 f303 	mul.w	r3, r1, r3
 80072ca:	4413      	add	r3, r2
 80072cc:	3344      	adds	r3, #68	; 0x44
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	441a      	add	r2, r3
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	202c      	movs	r0, #44	; 0x2c
 80072da:	fb00 f303 	mul.w	r3, r0, r3
 80072de:	440b      	add	r3, r1
 80072e0:	3344      	adds	r3, #68	; 0x44
 80072e2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	212c      	movs	r1, #44	; 0x2c
 80072ea:	fb01 f303 	mul.w	r3, r1, r3
 80072ee:	4413      	add	r3, r2
 80072f0:	3350      	adds	r3, #80	; 0x50
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	441a      	add	r2, r3
 80072f8:	6879      	ldr	r1, [r7, #4]
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	202c      	movs	r0, #44	; 0x2c
 80072fe:	fb00 f303 	mul.w	r3, r0, r3
 8007302:	440b      	add	r3, r1
 8007304:	3350      	adds	r3, #80	; 0x50
 8007306:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	4413      	add	r3, r2
 8007310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	0cdb      	lsrs	r3, r3, #19
 8007318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800731c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	212c      	movs	r1, #44	; 0x2c
 8007324:	fb01 f303 	mul.w	r3, r1, r3
 8007328:	4413      	add	r3, r2
 800732a:	3340      	adds	r3, #64	; 0x40
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	4293      	cmp	r3, r2
 8007334:	d13c      	bne.n	80073b0 <HCD_RXQLVL_IRQHandler+0x19a>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d039      	beq.n	80073b0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	4413      	add	r3, r2
 8007344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007352:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800735a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	4413      	add	r3, r2
 8007364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007368:	461a      	mov	r2, r3
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	212c      	movs	r1, #44	; 0x2c
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	4413      	add	r3, r2
 800737a:	3354      	adds	r3, #84	; 0x54
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	f083 0301 	eor.w	r3, r3, #1
 8007382:	b2d8      	uxtb	r0, r3
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	212c      	movs	r1, #44	; 0x2c
 800738a:	fb01 f303 	mul.w	r3, r1, r3
 800738e:	4413      	add	r3, r2
 8007390:	3354      	adds	r3, #84	; 0x54
 8007392:	4602      	mov	r2, r0
 8007394:	701a      	strb	r2, [r3, #0]
      break;
 8007396:	e00b      	b.n	80073b0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	212c      	movs	r1, #44	; 0x2c
 800739e:	fb01 f303 	mul.w	r3, r1, r3
 80073a2:	4413      	add	r3, r2
 80073a4:	3360      	adds	r3, #96	; 0x60
 80073a6:	2204      	movs	r2, #4
 80073a8:	701a      	strb	r2, [r3, #0]
      break;
 80073aa:	e001      	b.n	80073b0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80073ac:	bf00      	nop
 80073ae:	e000      	b.n	80073b2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80073b0:	bf00      	nop
  }
}
 80073b2:	bf00      	nop
 80073b4:	3728      	adds	r7, #40	; 0x28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b086      	sub	sp, #24
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80073e6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d10b      	bne.n	800740a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d102      	bne.n	8007402 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f007 fa39 	bl	800e874 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	f043 0302 	orr.w	r3, r3, #2
 8007408:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f003 0308 	and.w	r3, r3, #8
 8007410:	2b08      	cmp	r3, #8
 8007412:	d132      	bne.n	800747a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f043 0308 	orr.w	r3, r3, #8
 800741a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f003 0304 	and.w	r3, r3, #4
 8007422:	2b04      	cmp	r3, #4
 8007424:	d126      	bne.n	8007474 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	2b02      	cmp	r3, #2
 800742c:	d113      	bne.n	8007456 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007434:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007438:	d106      	bne.n	8007448 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2102      	movs	r1, #2
 8007440:	4618      	mov	r0, r3
 8007442:	f004 fd4f 	bl	800bee4 <USB_InitFSLSPClkSel>
 8007446:	e011      	b.n	800746c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2101      	movs	r1, #1
 800744e:	4618      	mov	r0, r3
 8007450:	f004 fd48 	bl	800bee4 <USB_InitFSLSPClkSel>
 8007454:	e00a      	b.n	800746c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d106      	bne.n	800746c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007464:	461a      	mov	r2, r3
 8007466:	f64e 2360 	movw	r3, #60000	; 0xea60
 800746a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f007 fa2b 	bl	800e8c8 <HAL_HCD_PortEnabled_Callback>
 8007472:	e002      	b.n	800747a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f007 fa35 	bl	800e8e4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f003 0320 	and.w	r3, r3, #32
 8007480:	2b20      	cmp	r3, #32
 8007482:	d103      	bne.n	800748c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f043 0320 	orr.w	r3, r3, #32
 800748a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007492:	461a      	mov	r2, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	6013      	str	r3, [r2, #0]
}
 8007498:	bf00      	nop
 800749a:	3718      	adds	r7, #24
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e12b      	b.n	800770a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d106      	bne.n	80074cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7fa fb6a 	bl	8001ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2224      	movs	r2, #36	; 0x24
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f022 0201 	bic.w	r2, r2, #1
 80074e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007502:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007504:	f002 fcec 	bl	8009ee0 <HAL_RCC_GetPCLK1Freq>
 8007508:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	4a81      	ldr	r2, [pc, #516]	; (8007714 <HAL_I2C_Init+0x274>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d807      	bhi.n	8007524 <HAL_I2C_Init+0x84>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4a80      	ldr	r2, [pc, #512]	; (8007718 <HAL_I2C_Init+0x278>)
 8007518:	4293      	cmp	r3, r2
 800751a:	bf94      	ite	ls
 800751c:	2301      	movls	r3, #1
 800751e:	2300      	movhi	r3, #0
 8007520:	b2db      	uxtb	r3, r3
 8007522:	e006      	b.n	8007532 <HAL_I2C_Init+0x92>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4a7d      	ldr	r2, [pc, #500]	; (800771c <HAL_I2C_Init+0x27c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	bf94      	ite	ls
 800752c:	2301      	movls	r3, #1
 800752e:	2300      	movhi	r3, #0
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e0e7      	b.n	800770a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4a78      	ldr	r2, [pc, #480]	; (8007720 <HAL_I2C_Init+0x280>)
 800753e:	fba2 2303 	umull	r2, r3, r2, r3
 8007542:	0c9b      	lsrs	r3, r3, #18
 8007544:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	430a      	orrs	r2, r1
 8007558:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6a1b      	ldr	r3, [r3, #32]
 8007560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	4a6a      	ldr	r2, [pc, #424]	; (8007714 <HAL_I2C_Init+0x274>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d802      	bhi.n	8007574 <HAL_I2C_Init+0xd4>
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	3301      	adds	r3, #1
 8007572:	e009      	b.n	8007588 <HAL_I2C_Init+0xe8>
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800757a:	fb02 f303 	mul.w	r3, r2, r3
 800757e:	4a69      	ldr	r2, [pc, #420]	; (8007724 <HAL_I2C_Init+0x284>)
 8007580:	fba2 2303 	umull	r2, r3, r2, r3
 8007584:	099b      	lsrs	r3, r3, #6
 8007586:	3301      	adds	r3, #1
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6812      	ldr	r2, [r2, #0]
 800758c:	430b      	orrs	r3, r1
 800758e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800759a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	495c      	ldr	r1, [pc, #368]	; (8007714 <HAL_I2C_Init+0x274>)
 80075a4:	428b      	cmp	r3, r1
 80075a6:	d819      	bhi.n	80075dc <HAL_I2C_Init+0x13c>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	1e59      	subs	r1, r3, #1
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80075b6:	1c59      	adds	r1, r3, #1
 80075b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80075bc:	400b      	ands	r3, r1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <HAL_I2C_Init+0x138>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	1e59      	subs	r1, r3, #1
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	005b      	lsls	r3, r3, #1
 80075cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80075d0:	3301      	adds	r3, #1
 80075d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075d6:	e051      	b.n	800767c <HAL_I2C_Init+0x1dc>
 80075d8:	2304      	movs	r3, #4
 80075da:	e04f      	b.n	800767c <HAL_I2C_Init+0x1dc>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d111      	bne.n	8007608 <HAL_I2C_Init+0x168>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	1e58      	subs	r0, r3, #1
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6859      	ldr	r1, [r3, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	005b      	lsls	r3, r3, #1
 80075f0:	440b      	add	r3, r1
 80075f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80075f6:	3301      	adds	r3, #1
 80075f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	bf0c      	ite	eq
 8007600:	2301      	moveq	r3, #1
 8007602:	2300      	movne	r3, #0
 8007604:	b2db      	uxtb	r3, r3
 8007606:	e012      	b.n	800762e <HAL_I2C_Init+0x18e>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	1e58      	subs	r0, r3, #1
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6859      	ldr	r1, [r3, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	440b      	add	r3, r1
 8007616:	0099      	lsls	r1, r3, #2
 8007618:	440b      	add	r3, r1
 800761a:	fbb0 f3f3 	udiv	r3, r0, r3
 800761e:	3301      	adds	r3, #1
 8007620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007624:	2b00      	cmp	r3, #0
 8007626:	bf0c      	ite	eq
 8007628:	2301      	moveq	r3, #1
 800762a:	2300      	movne	r3, #0
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <HAL_I2C_Init+0x196>
 8007632:	2301      	movs	r3, #1
 8007634:	e022      	b.n	800767c <HAL_I2C_Init+0x1dc>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10e      	bne.n	800765c <HAL_I2C_Init+0x1bc>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	1e58      	subs	r0, r3, #1
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6859      	ldr	r1, [r3, #4]
 8007646:	460b      	mov	r3, r1
 8007648:	005b      	lsls	r3, r3, #1
 800764a:	440b      	add	r3, r1
 800764c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007650:	3301      	adds	r3, #1
 8007652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800765a:	e00f      	b.n	800767c <HAL_I2C_Init+0x1dc>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	1e58      	subs	r0, r3, #1
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6859      	ldr	r1, [r3, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	440b      	add	r3, r1
 800766a:	0099      	lsls	r1, r3, #2
 800766c:	440b      	add	r3, r1
 800766e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007672:	3301      	adds	r3, #1
 8007674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007678:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800767c:	6879      	ldr	r1, [r7, #4]
 800767e:	6809      	ldr	r1, [r1, #0]
 8007680:	4313      	orrs	r3, r2
 8007682:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	69da      	ldr	r2, [r3, #28]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80076aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	6911      	ldr	r1, [r2, #16]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	68d2      	ldr	r2, [r2, #12]
 80076b6:	4311      	orrs	r1, r2
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	6812      	ldr	r2, [r2, #0]
 80076bc:	430b      	orrs	r3, r1
 80076be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	695a      	ldr	r2, [r3, #20]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f042 0201 	orr.w	r2, r2, #1
 80076ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2220      	movs	r2, #32
 80076f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	000186a0 	.word	0x000186a0
 8007718:	001e847f 	.word	0x001e847f
 800771c:	003d08ff 	.word	0x003d08ff
 8007720:	431bde83 	.word	0x431bde83
 8007724:	10624dd3 	.word	0x10624dd3

08007728 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b088      	sub	sp, #32
 800772c:	af02      	add	r7, sp, #8
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	607a      	str	r2, [r7, #4]
 8007732:	461a      	mov	r2, r3
 8007734:	460b      	mov	r3, r1
 8007736:	817b      	strh	r3, [r7, #10]
 8007738:	4613      	mov	r3, r2
 800773a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800773c:	f7fd fe22 	bl	8005384 <HAL_GetTick>
 8007740:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b20      	cmp	r3, #32
 800774c:	f040 80e0 	bne.w	8007910 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	2319      	movs	r3, #25
 8007756:	2201      	movs	r2, #1
 8007758:	4970      	ldr	r1, [pc, #448]	; (800791c <HAL_I2C_Master_Transmit+0x1f4>)
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f001 f8f6 	bl	800894c <I2C_WaitOnFlagUntilTimeout>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007766:	2302      	movs	r3, #2
 8007768:	e0d3      	b.n	8007912 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <HAL_I2C_Master_Transmit+0x50>
 8007774:	2302      	movs	r3, #2
 8007776:	e0cc      	b.n	8007912 <HAL_I2C_Master_Transmit+0x1ea>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b01      	cmp	r3, #1
 800778c:	d007      	beq.n	800779e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f042 0201 	orr.w	r2, r2, #1
 800779c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2221      	movs	r2, #33	; 0x21
 80077b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2210      	movs	r2, #16
 80077ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	893a      	ldrh	r2, [r7, #8]
 80077ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	4a50      	ldr	r2, [pc, #320]	; (8007920 <HAL_I2C_Master_Transmit+0x1f8>)
 80077de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80077e0:	8979      	ldrh	r1, [r7, #10]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	6a3a      	ldr	r2, [r7, #32]
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f000 fde2 	bl	80083b0 <I2C_MasterRequestWrite>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e08d      	b.n	8007912 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077f6:	2300      	movs	r3, #0
 80077f8:	613b      	str	r3, [r7, #16]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	613b      	str	r3, [r7, #16]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	613b      	str	r3, [r7, #16]
 800780a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800780c:	e066      	b.n	80078dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	6a39      	ldr	r1, [r7, #32]
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f001 f970 	bl	8008af8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00d      	beq.n	800783a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007822:	2b04      	cmp	r3, #4
 8007824:	d107      	bne.n	8007836 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007834:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e06b      	b.n	8007912 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	781a      	ldrb	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007854:	b29b      	uxth	r3, r3
 8007856:	3b01      	subs	r3, #1
 8007858:	b29a      	uxth	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007862:	3b01      	subs	r3, #1
 8007864:	b29a      	uxth	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	f003 0304 	and.w	r3, r3, #4
 8007874:	2b04      	cmp	r3, #4
 8007876:	d11b      	bne.n	80078b0 <HAL_I2C_Master_Transmit+0x188>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800787c:	2b00      	cmp	r3, #0
 800787e:	d017      	beq.n	80078b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	781a      	ldrb	r2, [r3, #0]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789a:	b29b      	uxth	r3, r3
 800789c:	3b01      	subs	r3, #1
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078a8:	3b01      	subs	r3, #1
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	6a39      	ldr	r1, [r7, #32]
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f001 f960 	bl	8008b7a <I2C_WaitOnBTFFlagUntilTimeout>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00d      	beq.n	80078dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	d107      	bne.n	80078d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e01a      	b.n	8007912 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d194      	bne.n	800780e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	e000      	b.n	8007912 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007910:	2302      	movs	r3, #2
  }
}
 8007912:	4618      	mov	r0, r3
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	00100002 	.word	0x00100002
 8007920:	ffff0000 	.word	0xffff0000

08007924 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b08c      	sub	sp, #48	; 0x30
 8007928:	af02      	add	r7, sp, #8
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	607a      	str	r2, [r7, #4]
 800792e:	461a      	mov	r2, r3
 8007930:	460b      	mov	r3, r1
 8007932:	817b      	strh	r3, [r7, #10]
 8007934:	4613      	mov	r3, r2
 8007936:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007938:	f7fd fd24 	bl	8005384 <HAL_GetTick>
 800793c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b20      	cmp	r3, #32
 8007948:	f040 820b 	bne.w	8007d62 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	2319      	movs	r3, #25
 8007952:	2201      	movs	r2, #1
 8007954:	497c      	ldr	r1, [pc, #496]	; (8007b48 <HAL_I2C_Master_Receive+0x224>)
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 fff8 	bl	800894c <I2C_WaitOnFlagUntilTimeout>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007962:	2302      	movs	r3, #2
 8007964:	e1fe      	b.n	8007d64 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800796c:	2b01      	cmp	r3, #1
 800796e:	d101      	bne.n	8007974 <HAL_I2C_Master_Receive+0x50>
 8007970:	2302      	movs	r3, #2
 8007972:	e1f7      	b.n	8007d64 <HAL_I2C_Master_Receive+0x440>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b01      	cmp	r3, #1
 8007988:	d007      	beq.n	800799a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f042 0201 	orr.w	r2, r2, #1
 8007998:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2222      	movs	r2, #34	; 0x22
 80079ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2210      	movs	r2, #16
 80079b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	893a      	ldrh	r2, [r7, #8]
 80079ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4a5c      	ldr	r2, [pc, #368]	; (8007b4c <HAL_I2C_Master_Receive+0x228>)
 80079da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80079dc:	8979      	ldrh	r1, [r7, #10]
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 fd66 	bl	80084b4 <I2C_MasterRequestRead>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d001      	beq.n	80079f2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e1b8      	b.n	8007d64 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d113      	bne.n	8007a22 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079fa:	2300      	movs	r3, #0
 80079fc:	623b      	str	r3, [r7, #32]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	623b      	str	r3, [r7, #32]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	623b      	str	r3, [r7, #32]
 8007a0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	e18c      	b.n	8007d3c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d11b      	bne.n	8007a62 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	61fb      	str	r3, [r7, #28]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	61fb      	str	r3, [r7, #28]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	61fb      	str	r3, [r7, #28]
 8007a4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	e16c      	b.n	8007d3c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d11b      	bne.n	8007aa2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	61bb      	str	r3, [r7, #24]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	61bb      	str	r3, [r7, #24]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	61bb      	str	r3, [r7, #24]
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	e14c      	b.n	8007d3c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ab0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	617b      	str	r3, [r7, #20]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	617b      	str	r3, [r7, #20]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	617b      	str	r3, [r7, #20]
 8007ac6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007ac8:	e138      	b.n	8007d3c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	f200 80f1 	bhi.w	8007cb6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d123      	bne.n	8007b24 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ade:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f001 f88b 	bl	8008bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e139      	b.n	8007d64 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	691a      	ldr	r2, [r3, #16]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afa:	b2d2      	uxtb	r2, r2
 8007afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b22:	e10b      	b.n	8007d3c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d14e      	bne.n	8007bca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b32:	2200      	movs	r2, #0
 8007b34:	4906      	ldr	r1, [pc, #24]	; (8007b50 <HAL_I2C_Master_Receive+0x22c>)
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 ff08 	bl	800894c <I2C_WaitOnFlagUntilTimeout>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d008      	beq.n	8007b54 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e10e      	b.n	8007d64 <HAL_I2C_Master_Receive+0x440>
 8007b46:	bf00      	nop
 8007b48:	00100002 	.word	0x00100002
 8007b4c:	ffff0000 	.word	0xffff0000
 8007b50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	691a      	ldr	r2, [r3, #16]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	b2d2      	uxtb	r2, r2
 8007b70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b80:	3b01      	subs	r3, #1
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	691a      	ldr	r2, [r3, #16]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba0:	b2d2      	uxtb	r2, r2
 8007ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007bc8:	e0b8      	b.n	8007d3c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	4966      	ldr	r1, [pc, #408]	; (8007d6c <HAL_I2C_Master_Receive+0x448>)
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 feb9 	bl	800894c <I2C_WaitOnFlagUntilTimeout>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e0bf      	b.n	8007d64 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	691a      	ldr	r2, [r3, #16]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c10:	3b01      	subs	r3, #1
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	494f      	ldr	r1, [pc, #316]	; (8007d6c <HAL_I2C_Master_Receive+0x448>)
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 fe8b 	bl	800894c <I2C_WaitOnFlagUntilTimeout>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e091      	b.n	8007d64 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	691a      	ldr	r2, [r3, #16]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5a:	b2d2      	uxtb	r2, r2
 8007c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	691a      	ldr	r2, [r3, #16]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	b2d2      	uxtb	r2, r2
 8007c8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	1c5a      	adds	r2, r3, #1
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	3b01      	subs	r3, #1
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007cb4:	e042      	b.n	8007d3c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 ff9e 	bl	8008bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e04c      	b.n	8007d64 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	691a      	ldr	r2, [r3, #16]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd4:	b2d2      	uxtb	r2, r2
 8007cd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	f003 0304 	and.w	r3, r3, #4
 8007d06:	2b04      	cmp	r3, #4
 8007d08:	d118      	bne.n	8007d3c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	691a      	ldr	r2, [r3, #16]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d14:	b2d2      	uxtb	r2, r2
 8007d16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d26:	3b01      	subs	r3, #1
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	3b01      	subs	r3, #1
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f47f aec2 	bne.w	8007aca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	e000      	b.n	8007d64 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007d62:	2302      	movs	r3, #2
  }
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3728      	adds	r7, #40	; 0x28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	00010004 	.word	0x00010004

08007d70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b088      	sub	sp, #32
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	4608      	mov	r0, r1
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	4603      	mov	r3, r0
 8007d80:	817b      	strh	r3, [r7, #10]
 8007d82:	460b      	mov	r3, r1
 8007d84:	813b      	strh	r3, [r7, #8]
 8007d86:	4613      	mov	r3, r2
 8007d88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d8a:	f7fd fafb 	bl	8005384 <HAL_GetTick>
 8007d8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	f040 80d9 	bne.w	8007f50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	2319      	movs	r3, #25
 8007da4:	2201      	movs	r2, #1
 8007da6:	496d      	ldr	r1, [pc, #436]	; (8007f5c <HAL_I2C_Mem_Write+0x1ec>)
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 fdcf 	bl	800894c <I2C_WaitOnFlagUntilTimeout>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007db4:	2302      	movs	r3, #2
 8007db6:	e0cc      	b.n	8007f52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d101      	bne.n	8007dc6 <HAL_I2C_Mem_Write+0x56>
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	e0c5      	b.n	8007f52 <HAL_I2C_Mem_Write+0x1e2>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d007      	beq.n	8007dec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f042 0201 	orr.w	r2, r2, #1
 8007dea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2221      	movs	r2, #33	; 0x21
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2240      	movs	r2, #64	; 0x40
 8007e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6a3a      	ldr	r2, [r7, #32]
 8007e16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4a4d      	ldr	r2, [pc, #308]	; (8007f60 <HAL_I2C_Mem_Write+0x1f0>)
 8007e2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e2e:	88f8      	ldrh	r0, [r7, #6]
 8007e30:	893a      	ldrh	r2, [r7, #8]
 8007e32:	8979      	ldrh	r1, [r7, #10]
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 fc06 	bl	8008650 <I2C_RequestMemoryWrite>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d052      	beq.n	8007ef0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e081      	b.n	8007f52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f000 fe50 	bl	8008af8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00d      	beq.n	8007e7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e62:	2b04      	cmp	r3, #4
 8007e64:	d107      	bne.n	8007e76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e06b      	b.n	8007f52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	781a      	ldrb	r2, [r3, #0]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	1c5a      	adds	r2, r3, #1
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e94:	3b01      	subs	r3, #1
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	f003 0304 	and.w	r3, r3, #4
 8007eb4:	2b04      	cmp	r3, #4
 8007eb6:	d11b      	bne.n	8007ef0 <HAL_I2C_Mem_Write+0x180>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d017      	beq.n	8007ef0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec4:	781a      	ldrb	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eda:	3b01      	subs	r3, #1
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1aa      	bne.n	8007e4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 fe3c 	bl	8008b7a <I2C_WaitOnBTFFlagUntilTimeout>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00d      	beq.n	8007f24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d107      	bne.n	8007f20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e016      	b.n	8007f52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2220      	movs	r2, #32
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	e000      	b.n	8007f52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007f50:	2302      	movs	r3, #2
  }
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	00100002 	.word	0x00100002
 8007f60:	ffff0000 	.word	0xffff0000

08007f64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08c      	sub	sp, #48	; 0x30
 8007f68:	af02      	add	r7, sp, #8
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	4608      	mov	r0, r1
 8007f6e:	4611      	mov	r1, r2
 8007f70:	461a      	mov	r2, r3
 8007f72:	4603      	mov	r3, r0
 8007f74:	817b      	strh	r3, [r7, #10]
 8007f76:	460b      	mov	r3, r1
 8007f78:	813b      	strh	r3, [r7, #8]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f7e:	f7fd fa01 	bl	8005384 <HAL_GetTick>
 8007f82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	f040 8208 	bne.w	80083a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	2319      	movs	r3, #25
 8007f98:	2201      	movs	r2, #1
 8007f9a:	497b      	ldr	r1, [pc, #492]	; (8008188 <HAL_I2C_Mem_Read+0x224>)
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 fcd5 	bl	800894c <I2C_WaitOnFlagUntilTimeout>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007fa8:	2302      	movs	r3, #2
 8007faa:	e1fb      	b.n	80083a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d101      	bne.n	8007fba <HAL_I2C_Mem_Read+0x56>
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	e1f4      	b.n	80083a4 <HAL_I2C_Mem_Read+0x440>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d007      	beq.n	8007fe0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f042 0201 	orr.w	r2, r2, #1
 8007fde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2222      	movs	r2, #34	; 0x22
 8007ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2240      	movs	r2, #64	; 0x40
 8007ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800800a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008010:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008016:	b29a      	uxth	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4a5b      	ldr	r2, [pc, #364]	; (800818c <HAL_I2C_Mem_Read+0x228>)
 8008020:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008022:	88f8      	ldrh	r0, [r7, #6]
 8008024:	893a      	ldrh	r2, [r7, #8]
 8008026:	8979      	ldrh	r1, [r7, #10]
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	9301      	str	r3, [sp, #4]
 800802c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	4603      	mov	r3, r0
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 fba2 	bl	800877c <I2C_RequestMemoryRead>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e1b0      	b.n	80083a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008046:	2b00      	cmp	r3, #0
 8008048:	d113      	bne.n	8008072 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800804a:	2300      	movs	r3, #0
 800804c:	623b      	str	r3, [r7, #32]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	623b      	str	r3, [r7, #32]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	623b      	str	r3, [r7, #32]
 800805e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	e184      	b.n	800837c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008076:	2b01      	cmp	r3, #1
 8008078:	d11b      	bne.n	80080b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008088:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800808a:	2300      	movs	r3, #0
 800808c:	61fb      	str	r3, [r7, #28]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	61fb      	str	r3, [r7, #28]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	61fb      	str	r3, [r7, #28]
 800809e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080ae:	601a      	str	r2, [r3, #0]
 80080b0:	e164      	b.n	800837c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d11b      	bne.n	80080f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080da:	2300      	movs	r3, #0
 80080dc:	61bb      	str	r3, [r7, #24]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	61bb      	str	r3, [r7, #24]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	61bb      	str	r3, [r7, #24]
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	e144      	b.n	800837c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080f2:	2300      	movs	r3, #0
 80080f4:	617b      	str	r3, [r7, #20]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	617b      	str	r3, [r7, #20]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	617b      	str	r3, [r7, #20]
 8008106:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008108:	e138      	b.n	800837c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800810e:	2b03      	cmp	r3, #3
 8008110:	f200 80f1 	bhi.w	80082f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008118:	2b01      	cmp	r3, #1
 800811a:	d123      	bne.n	8008164 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800811c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800811e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 fd6b 	bl	8008bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e139      	b.n	80083a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691a      	ldr	r2, [r3, #16]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	b2d2      	uxtb	r2, r2
 800813c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008142:	1c5a      	adds	r2, r3, #1
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800814c:	3b01      	subs	r3, #1
 800814e:	b29a      	uxth	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008158:	b29b      	uxth	r3, r3
 800815a:	3b01      	subs	r3, #1
 800815c:	b29a      	uxth	r2, r3
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008162:	e10b      	b.n	800837c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008168:	2b02      	cmp	r3, #2
 800816a:	d14e      	bne.n	800820a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008172:	2200      	movs	r2, #0
 8008174:	4906      	ldr	r1, [pc, #24]	; (8008190 <HAL_I2C_Mem_Read+0x22c>)
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f000 fbe8 	bl	800894c <I2C_WaitOnFlagUntilTimeout>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d008      	beq.n	8008194 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e10e      	b.n	80083a4 <HAL_I2C_Mem_Read+0x440>
 8008186:	bf00      	nop
 8008188:	00100002 	.word	0x00100002
 800818c:	ffff0000 	.word	0xffff0000
 8008190:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691a      	ldr	r2, [r3, #16]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ae:	b2d2      	uxtb	r2, r2
 80081b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c0:	3b01      	subs	r3, #1
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	3b01      	subs	r3, #1
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	691a      	ldr	r2, [r3, #16]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	b2d2      	uxtb	r2, r2
 80081e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	1c5a      	adds	r2, r3, #1
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081f2:	3b01      	subs	r3, #1
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081fe:	b29b      	uxth	r3, r3
 8008200:	3b01      	subs	r3, #1
 8008202:	b29a      	uxth	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008208:	e0b8      	b.n	800837c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008210:	2200      	movs	r2, #0
 8008212:	4966      	ldr	r1, [pc, #408]	; (80083ac <HAL_I2C_Mem_Read+0x448>)
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 fb99 	bl	800894c <I2C_WaitOnFlagUntilTimeout>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e0bf      	b.n	80083a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008232:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	691a      	ldr	r2, [r3, #16]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	b2d2      	uxtb	r2, r2
 8008240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008250:	3b01      	subs	r3, #1
 8008252:	b29a      	uxth	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800825c:	b29b      	uxth	r3, r3
 800825e:	3b01      	subs	r3, #1
 8008260:	b29a      	uxth	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826c:	2200      	movs	r2, #0
 800826e:	494f      	ldr	r1, [pc, #316]	; (80083ac <HAL_I2C_Mem_Read+0x448>)
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 fb6b 	bl	800894c <I2C_WaitOnFlagUntilTimeout>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e091      	b.n	80083a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800828e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	691a      	ldr	r2, [r3, #16]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	b2d2      	uxtb	r2, r2
 800829c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ac:	3b01      	subs	r3, #1
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	3b01      	subs	r3, #1
 80082bc:	b29a      	uxth	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	691a      	ldr	r2, [r3, #16]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	b2d2      	uxtb	r2, r2
 80082ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	1c5a      	adds	r2, r3, #1
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082de:	3b01      	subs	r3, #1
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	3b01      	subs	r3, #1
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80082f4:	e042      	b.n	800837c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f000 fc7e 	bl	8008bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e04c      	b.n	80083a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	691a      	ldr	r2, [r3, #16]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	b2d2      	uxtb	r2, r2
 8008316:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831c:	1c5a      	adds	r2, r3, #1
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008326:	3b01      	subs	r3, #1
 8008328:	b29a      	uxth	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008332:	b29b      	uxth	r3, r3
 8008334:	3b01      	subs	r3, #1
 8008336:	b29a      	uxth	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	f003 0304 	and.w	r3, r3, #4
 8008346:	2b04      	cmp	r3, #4
 8008348:	d118      	bne.n	800837c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	691a      	ldr	r2, [r3, #16]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	b2d2      	uxtb	r2, r2
 8008356:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835c:	1c5a      	adds	r2, r3, #1
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008366:	3b01      	subs	r3, #1
 8008368:	b29a      	uxth	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008372:	b29b      	uxth	r3, r3
 8008374:	3b01      	subs	r3, #1
 8008376:	b29a      	uxth	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008380:	2b00      	cmp	r3, #0
 8008382:	f47f aec2 	bne.w	800810a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2220      	movs	r2, #32
 800838a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	e000      	b.n	80083a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80083a2:	2302      	movs	r3, #2
  }
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3728      	adds	r7, #40	; 0x28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	00010004 	.word	0x00010004

080083b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	607a      	str	r2, [r7, #4]
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	460b      	mov	r3, r1
 80083be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d006      	beq.n	80083da <I2C_MasterRequestWrite+0x2a>
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d003      	beq.n	80083da <I2C_MasterRequestWrite+0x2a>
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083d8:	d108      	bne.n	80083ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083e8:	601a      	str	r2, [r3, #0]
 80083ea:	e00b      	b.n	8008404 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f0:	2b12      	cmp	r3, #18
 80083f2:	d107      	bne.n	8008404 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008402:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f000 fa9b 	bl	800894c <I2C_WaitOnFlagUntilTimeout>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00d      	beq.n	8008438 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800842a:	d103      	bne.n	8008434 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e035      	b.n	80084a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008440:	d108      	bne.n	8008454 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008442:	897b      	ldrh	r3, [r7, #10]
 8008444:	b2db      	uxtb	r3, r3
 8008446:	461a      	mov	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008450:	611a      	str	r2, [r3, #16]
 8008452:	e01b      	b.n	800848c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008454:	897b      	ldrh	r3, [r7, #10]
 8008456:	11db      	asrs	r3, r3, #7
 8008458:	b2db      	uxtb	r3, r3
 800845a:	f003 0306 	and.w	r3, r3, #6
 800845e:	b2db      	uxtb	r3, r3
 8008460:	f063 030f 	orn	r3, r3, #15
 8008464:	b2da      	uxtb	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	490e      	ldr	r1, [pc, #56]	; (80084ac <I2C_MasterRequestWrite+0xfc>)
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f000 fac1 	bl	80089fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e010      	b.n	80084a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008482:	897b      	ldrh	r3, [r7, #10]
 8008484:	b2da      	uxtb	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	4907      	ldr	r1, [pc, #28]	; (80084b0 <I2C_MasterRequestWrite+0x100>)
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 fab1 	bl	80089fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e000      	b.n	80084a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	00010008 	.word	0x00010008
 80084b0:	00010002 	.word	0x00010002

080084b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	607a      	str	r2, [r7, #4]
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	460b      	mov	r3, r1
 80084c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2b08      	cmp	r3, #8
 80084de:	d006      	beq.n	80084ee <I2C_MasterRequestRead+0x3a>
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d003      	beq.n	80084ee <I2C_MasterRequestRead+0x3a>
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80084ec:	d108      	bne.n	8008500 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	e00b      	b.n	8008518 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008504:	2b11      	cmp	r3, #17
 8008506:	d107      	bne.n	8008518 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008516:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f000 fa11 	bl	800894c <I2C_WaitOnFlagUntilTimeout>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00d      	beq.n	800854c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800853a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800853e:	d103      	bne.n	8008548 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008546:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e079      	b.n	8008640 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008554:	d108      	bne.n	8008568 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008556:	897b      	ldrh	r3, [r7, #10]
 8008558:	b2db      	uxtb	r3, r3
 800855a:	f043 0301 	orr.w	r3, r3, #1
 800855e:	b2da      	uxtb	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	611a      	str	r2, [r3, #16]
 8008566:	e05f      	b.n	8008628 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008568:	897b      	ldrh	r3, [r7, #10]
 800856a:	11db      	asrs	r3, r3, #7
 800856c:	b2db      	uxtb	r3, r3
 800856e:	f003 0306 	and.w	r3, r3, #6
 8008572:	b2db      	uxtb	r3, r3
 8008574:	f063 030f 	orn	r3, r3, #15
 8008578:	b2da      	uxtb	r2, r3
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	4930      	ldr	r1, [pc, #192]	; (8008648 <I2C_MasterRequestRead+0x194>)
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 fa37 	bl	80089fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e054      	b.n	8008640 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008596:	897b      	ldrh	r3, [r7, #10]
 8008598:	b2da      	uxtb	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	4929      	ldr	r1, [pc, #164]	; (800864c <I2C_MasterRequestRead+0x198>)
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f000 fa27 	bl	80089fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e044      	b.n	8008640 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085b6:	2300      	movs	r3, #0
 80085b8:	613b      	str	r3, [r7, #16]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	695b      	ldr	r3, [r3, #20]
 80085c0:	613b      	str	r3, [r7, #16]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	613b      	str	r3, [r7, #16]
 80085ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 f9af 	bl	800894c <I2C_WaitOnFlagUntilTimeout>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00d      	beq.n	8008610 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008602:	d103      	bne.n	800860c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800860a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	e017      	b.n	8008640 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008610:	897b      	ldrh	r3, [r7, #10]
 8008612:	11db      	asrs	r3, r3, #7
 8008614:	b2db      	uxtb	r3, r3
 8008616:	f003 0306 	and.w	r3, r3, #6
 800861a:	b2db      	uxtb	r3, r3
 800861c:	f063 030e 	orn	r3, r3, #14
 8008620:	b2da      	uxtb	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	4907      	ldr	r1, [pc, #28]	; (800864c <I2C_MasterRequestRead+0x198>)
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f000 f9e3 	bl	80089fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e000      	b.n	8008640 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3718      	adds	r7, #24
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	00010008 	.word	0x00010008
 800864c:	00010002 	.word	0x00010002

08008650 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b088      	sub	sp, #32
 8008654:	af02      	add	r7, sp, #8
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	4608      	mov	r0, r1
 800865a:	4611      	mov	r1, r2
 800865c:	461a      	mov	r2, r3
 800865e:	4603      	mov	r3, r0
 8008660:	817b      	strh	r3, [r7, #10]
 8008662:	460b      	mov	r3, r1
 8008664:	813b      	strh	r3, [r7, #8]
 8008666:	4613      	mov	r3, r2
 8008668:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008678:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	6a3b      	ldr	r3, [r7, #32]
 8008680:	2200      	movs	r2, #0
 8008682:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 f960 	bl	800894c <I2C_WaitOnFlagUntilTimeout>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00d      	beq.n	80086ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800869c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086a0:	d103      	bne.n	80086aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e05f      	b.n	800876e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80086ae:	897b      	ldrh	r3, [r7, #10]
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	461a      	mov	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80086bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	6a3a      	ldr	r2, [r7, #32]
 80086c2:	492d      	ldr	r1, [pc, #180]	; (8008778 <I2C_RequestMemoryWrite+0x128>)
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 f998 	bl	80089fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e04c      	b.n	800876e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086d4:	2300      	movs	r3, #0
 80086d6:	617b      	str	r3, [r7, #20]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	617b      	str	r3, [r7, #20]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	617b      	str	r3, [r7, #20]
 80086e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ec:	6a39      	ldr	r1, [r7, #32]
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 fa02 	bl	8008af8 <I2C_WaitOnTXEFlagUntilTimeout>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00d      	beq.n	8008716 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	2b04      	cmp	r3, #4
 8008700:	d107      	bne.n	8008712 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008710:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e02b      	b.n	800876e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008716:	88fb      	ldrh	r3, [r7, #6]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d105      	bne.n	8008728 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800871c:	893b      	ldrh	r3, [r7, #8]
 800871e:	b2da      	uxtb	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	611a      	str	r2, [r3, #16]
 8008726:	e021      	b.n	800876c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008728:	893b      	ldrh	r3, [r7, #8]
 800872a:	0a1b      	lsrs	r3, r3, #8
 800872c:	b29b      	uxth	r3, r3
 800872e:	b2da      	uxtb	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008738:	6a39      	ldr	r1, [r7, #32]
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 f9dc 	bl	8008af8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00d      	beq.n	8008762 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	2b04      	cmp	r3, #4
 800874c:	d107      	bne.n	800875e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800875c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e005      	b.n	800876e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008762:	893b      	ldrh	r3, [r7, #8]
 8008764:	b2da      	uxtb	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	00010002 	.word	0x00010002

0800877c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b088      	sub	sp, #32
 8008780:	af02      	add	r7, sp, #8
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	4608      	mov	r0, r1
 8008786:	4611      	mov	r1, r2
 8008788:	461a      	mov	r2, r3
 800878a:	4603      	mov	r3, r0
 800878c:	817b      	strh	r3, [r7, #10]
 800878e:	460b      	mov	r3, r1
 8008790:	813b      	strh	r3, [r7, #8]
 8008792:	4613      	mov	r3, r2
 8008794:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	2200      	movs	r2, #0
 80087be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 f8c2 	bl	800894c <I2C_WaitOnFlagUntilTimeout>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00d      	beq.n	80087ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087dc:	d103      	bne.n	80087e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e0aa      	b.n	8008940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80087ea:	897b      	ldrh	r3, [r7, #10]
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	461a      	mov	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80087f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	6a3a      	ldr	r2, [r7, #32]
 80087fe:	4952      	ldr	r1, [pc, #328]	; (8008948 <I2C_RequestMemoryRead+0x1cc>)
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f000 f8fa 	bl	80089fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e097      	b.n	8008940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008810:	2300      	movs	r3, #0
 8008812:	617b      	str	r3, [r7, #20]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	617b      	str	r3, [r7, #20]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	617b      	str	r3, [r7, #20]
 8008824:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008828:	6a39      	ldr	r1, [r7, #32]
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f000 f964 	bl	8008af8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00d      	beq.n	8008852 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	2b04      	cmp	r3, #4
 800883c:	d107      	bne.n	800884e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800884c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e076      	b.n	8008940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008852:	88fb      	ldrh	r3, [r7, #6]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d105      	bne.n	8008864 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008858:	893b      	ldrh	r3, [r7, #8]
 800885a:	b2da      	uxtb	r2, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	611a      	str	r2, [r3, #16]
 8008862:	e021      	b.n	80088a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008864:	893b      	ldrh	r3, [r7, #8]
 8008866:	0a1b      	lsrs	r3, r3, #8
 8008868:	b29b      	uxth	r3, r3
 800886a:	b2da      	uxtb	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008874:	6a39      	ldr	r1, [r7, #32]
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 f93e 	bl	8008af8 <I2C_WaitOnTXEFlagUntilTimeout>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00d      	beq.n	800889e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	2b04      	cmp	r3, #4
 8008888:	d107      	bne.n	800889a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008898:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e050      	b.n	8008940 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800889e:	893b      	ldrh	r3, [r7, #8]
 80088a0:	b2da      	uxtb	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088aa:	6a39      	ldr	r1, [r7, #32]
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f000 f923 	bl	8008af8 <I2C_WaitOnTXEFlagUntilTimeout>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00d      	beq.n	80088d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088bc:	2b04      	cmp	r3, #4
 80088be:	d107      	bne.n	80088d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e035      	b.n	8008940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80088e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 f82b 	bl	800894c <I2C_WaitOnFlagUntilTimeout>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00d      	beq.n	8008918 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800890a:	d103      	bne.n	8008914 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008912:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e013      	b.n	8008940 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008918:	897b      	ldrh	r3, [r7, #10]
 800891a:	b2db      	uxtb	r3, r3
 800891c:	f043 0301 	orr.w	r3, r3, #1
 8008920:	b2da      	uxtb	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	6a3a      	ldr	r2, [r7, #32]
 800892c:	4906      	ldr	r1, [pc, #24]	; (8008948 <I2C_RequestMemoryRead+0x1cc>)
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f000 f863 	bl	80089fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d001      	beq.n	800893e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e000      	b.n	8008940 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3718      	adds	r7, #24
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	00010002 	.word	0x00010002

0800894c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	603b      	str	r3, [r7, #0]
 8008958:	4613      	mov	r3, r2
 800895a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800895c:	e025      	b.n	80089aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008964:	d021      	beq.n	80089aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008966:	f7fc fd0d 	bl	8005384 <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	429a      	cmp	r2, r3
 8008974:	d302      	bcc.n	800897c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d116      	bne.n	80089aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2220      	movs	r2, #32
 8008986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008996:	f043 0220 	orr.w	r2, r3, #32
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e023      	b.n	80089f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	0c1b      	lsrs	r3, r3, #16
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d10d      	bne.n	80089d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	43da      	mvns	r2, r3
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	4013      	ands	r3, r2
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	bf0c      	ite	eq
 80089c6:	2301      	moveq	r3, #1
 80089c8:	2300      	movne	r3, #0
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	461a      	mov	r2, r3
 80089ce:	e00c      	b.n	80089ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	43da      	mvns	r2, r3
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	4013      	ands	r3, r2
 80089dc:	b29b      	uxth	r3, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	bf0c      	ite	eq
 80089e2:	2301      	moveq	r3, #1
 80089e4:	2300      	movne	r3, #0
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	461a      	mov	r2, r3
 80089ea:	79fb      	ldrb	r3, [r7, #7]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d0b6      	beq.n	800895e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b084      	sub	sp, #16
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	60f8      	str	r0, [r7, #12]
 8008a02:	60b9      	str	r1, [r7, #8]
 8008a04:	607a      	str	r2, [r7, #4]
 8008a06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a08:	e051      	b.n	8008aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a18:	d123      	bne.n	8008a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	f043 0204 	orr.w	r2, r3, #4
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e046      	b.n	8008af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a68:	d021      	beq.n	8008aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a6a:	f7fc fc8b 	bl	8005384 <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d302      	bcc.n	8008a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d116      	bne.n	8008aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2220      	movs	r2, #32
 8008a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9a:	f043 0220 	orr.w	r2, r3, #32
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e020      	b.n	8008af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	0c1b      	lsrs	r3, r3, #16
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d10c      	bne.n	8008ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	43da      	mvns	r2, r3
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	bf14      	ite	ne
 8008aca:	2301      	movne	r3, #1
 8008acc:	2300      	moveq	r3, #0
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	e00b      	b.n	8008aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	43da      	mvns	r2, r3
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	4013      	ands	r3, r2
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	bf14      	ite	ne
 8008ae4:	2301      	movne	r3, #1
 8008ae6:	2300      	moveq	r3, #0
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d18d      	bne.n	8008a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b04:	e02d      	b.n	8008b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 f8ce 	bl	8008ca8 <I2C_IsAcknowledgeFailed>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e02d      	b.n	8008b72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b1c:	d021      	beq.n	8008b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b1e:	f7fc fc31 	bl	8005384 <HAL_GetTick>
 8008b22:	4602      	mov	r2, r0
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d302      	bcc.n	8008b34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d116      	bne.n	8008b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2220      	movs	r2, #32
 8008b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4e:	f043 0220 	orr.w	r2, r3, #32
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e007      	b.n	8008b72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b6c:	2b80      	cmp	r3, #128	; 0x80
 8008b6e:	d1ca      	bne.n	8008b06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	60f8      	str	r0, [r7, #12]
 8008b82:	60b9      	str	r1, [r7, #8]
 8008b84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b86:	e02d      	b.n	8008be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 f88d 	bl	8008ca8 <I2C_IsAcknowledgeFailed>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e02d      	b.n	8008bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b9e:	d021      	beq.n	8008be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ba0:	f7fc fbf0 	bl	8005384 <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d302      	bcc.n	8008bb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d116      	bne.n	8008be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd0:	f043 0220 	orr.w	r2, r3, #32
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e007      	b.n	8008bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	f003 0304 	and.w	r3, r3, #4
 8008bee:	2b04      	cmp	r3, #4
 8008bf0:	d1ca      	bne.n	8008b88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c08:	e042      	b.n	8008c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	695b      	ldr	r3, [r3, #20]
 8008c10:	f003 0310 	and.w	r3, r3, #16
 8008c14:	2b10      	cmp	r3, #16
 8008c16:	d119      	bne.n	8008c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f06f 0210 	mvn.w	r2, #16
 8008c20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2220      	movs	r2, #32
 8008c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e029      	b.n	8008ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c4c:	f7fc fb9a 	bl	8005384 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d302      	bcc.n	8008c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d116      	bne.n	8008c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	f043 0220 	orr.w	r2, r3, #32
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e007      	b.n	8008ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c9a:	2b40      	cmp	r3, #64	; 0x40
 8008c9c:	d1b5      	bne.n	8008c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cbe:	d11b      	bne.n	8008cf8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008cc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2220      	movs	r2, #32
 8008cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce4:	f043 0204 	orr.w	r2, r3, #4
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e000      	b.n	8008cfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
	...

08008d08 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b088      	sub	sp, #32
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e128      	b.n	8008f6c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d109      	bne.n	8008d3a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a90      	ldr	r2, [pc, #576]	; (8008f74 <HAL_I2S_Init+0x26c>)
 8008d32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7f8 ffd3 	bl	8001ce0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	69db      	ldr	r3, [r3, #28]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	6812      	ldr	r2, [r2, #0]
 8008d4c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008d50:	f023 030f 	bic.w	r3, r3, #15
 8008d54:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d060      	beq.n	8008e28 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d102      	bne.n	8008d74 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008d6e:	2310      	movs	r3, #16
 8008d70:	617b      	str	r3, [r7, #20]
 8008d72:	e001      	b.n	8008d78 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008d74:	2320      	movs	r3, #32
 8008d76:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	2b20      	cmp	r3, #32
 8008d7e:	d802      	bhi.n	8008d86 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8008d86:	2001      	movs	r0, #1
 8008d88:	f001 f9a0 	bl	800a0cc <HAL_RCCEx_GetPeriphCLKFreq>
 8008d8c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d96:	d125      	bne.n	8008de4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d010      	beq.n	8008dc2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	fbb2 f2f3 	udiv	r2, r2, r3
 8008daa:	4613      	mov	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4413      	add	r3, r2
 8008db0:	005b      	lsls	r3, r3, #1
 8008db2:	461a      	mov	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dbc:	3305      	adds	r3, #5
 8008dbe:	613b      	str	r3, [r7, #16]
 8008dc0:	e01f      	b.n	8008e02 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	00db      	lsls	r3, r3, #3
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8008dcc:	4613      	mov	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	005b      	lsls	r3, r3, #1
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dde:	3305      	adds	r3, #5
 8008de0:	613b      	str	r3, [r7, #16]
 8008de2:	e00e      	b.n	8008e02 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	fbb2 f2f3 	udiv	r2, r2, r3
 8008dec:	4613      	mov	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4413      	add	r3, r2
 8008df2:	005b      	lsls	r3, r3, #1
 8008df4:	461a      	mov	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dfe:	3305      	adds	r3, #5
 8008e00:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	4a5c      	ldr	r2, [pc, #368]	; (8008f78 <HAL_I2S_Init+0x270>)
 8008e06:	fba2 2303 	umull	r2, r3, r2, r3
 8008e0a:	08db      	lsrs	r3, r3, #3
 8008e0c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	085b      	lsrs	r3, r3, #1
 8008e1e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	021b      	lsls	r3, r3, #8
 8008e24:	61bb      	str	r3, [r7, #24]
 8008e26:	e003      	b.n	8008e30 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008e28:	2302      	movs	r3, #2
 8008e2a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d902      	bls.n	8008e3c <HAL_I2S_Init+0x134>
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	2bff      	cmp	r3, #255	; 0xff
 8008e3a:	d907      	bls.n	8008e4c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e40:	f043 0210 	orr.w	r2, r3, #16
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e08f      	b.n	8008f6c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	691a      	ldr	r2, [r3, #16]
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	ea42 0103 	orr.w	r1, r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	69fa      	ldr	r2, [r7, #28]
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008e6a:	f023 030f 	bic.w	r3, r3, #15
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	6851      	ldr	r1, [r2, #4]
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	6892      	ldr	r2, [r2, #8]
 8008e76:	4311      	orrs	r1, r2
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	68d2      	ldr	r2, [r2, #12]
 8008e7c:	4311      	orrs	r1, r2
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	6992      	ldr	r2, [r2, #24]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	431a      	orrs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e8e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d161      	bne.n	8008f5c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a38      	ldr	r2, [pc, #224]	; (8008f7c <HAL_I2S_Init+0x274>)
 8008e9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a37      	ldr	r2, [pc, #220]	; (8008f80 <HAL_I2S_Init+0x278>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d101      	bne.n	8008eac <HAL_I2S_Init+0x1a4>
 8008ea8:	4b36      	ldr	r3, [pc, #216]	; (8008f84 <HAL_I2S_Init+0x27c>)
 8008eaa:	e001      	b.n	8008eb0 <HAL_I2S_Init+0x1a8>
 8008eac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	6812      	ldr	r2, [r2, #0]
 8008eb6:	4932      	ldr	r1, [pc, #200]	; (8008f80 <HAL_I2S_Init+0x278>)
 8008eb8:	428a      	cmp	r2, r1
 8008eba:	d101      	bne.n	8008ec0 <HAL_I2S_Init+0x1b8>
 8008ebc:	4a31      	ldr	r2, [pc, #196]	; (8008f84 <HAL_I2S_Init+0x27c>)
 8008ebe:	e001      	b.n	8008ec4 <HAL_I2S_Init+0x1bc>
 8008ec0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8008ec4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008ec8:	f023 030f 	bic.w	r3, r3, #15
 8008ecc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a2b      	ldr	r2, [pc, #172]	; (8008f80 <HAL_I2S_Init+0x278>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d101      	bne.n	8008edc <HAL_I2S_Init+0x1d4>
 8008ed8:	4b2a      	ldr	r3, [pc, #168]	; (8008f84 <HAL_I2S_Init+0x27c>)
 8008eda:	e001      	b.n	8008ee0 <HAL_I2S_Init+0x1d8>
 8008edc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ee0:	2202      	movs	r2, #2
 8008ee2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a25      	ldr	r2, [pc, #148]	; (8008f80 <HAL_I2S_Init+0x278>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d101      	bne.n	8008ef2 <HAL_I2S_Init+0x1ea>
 8008eee:	4b25      	ldr	r3, [pc, #148]	; (8008f84 <HAL_I2S_Init+0x27c>)
 8008ef0:	e001      	b.n	8008ef6 <HAL_I2S_Init+0x1ee>
 8008ef2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f02:	d003      	beq.n	8008f0c <HAL_I2S_Init+0x204>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d103      	bne.n	8008f14 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8008f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f10:	613b      	str	r3, [r7, #16]
 8008f12:	e001      	b.n	8008f18 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8008f14:	2300      	movs	r3, #0
 8008f16:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008f22:	4313      	orrs	r3, r2
 8008f24:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008f36:	4313      	orrs	r3, r2
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	897b      	ldrh	r3, [r7, #10]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008f44:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a0d      	ldr	r2, [pc, #52]	; (8008f80 <HAL_I2S_Init+0x278>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d101      	bne.n	8008f54 <HAL_I2S_Init+0x24c>
 8008f50:	4b0c      	ldr	r3, [pc, #48]	; (8008f84 <HAL_I2S_Init+0x27c>)
 8008f52:	e001      	b.n	8008f58 <HAL_I2S_Init+0x250>
 8008f54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008f58:	897a      	ldrh	r2, [r7, #10]
 8008f5a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3720      	adds	r7, #32
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	0800907f 	.word	0x0800907f
 8008f78:	cccccccd 	.word	0xcccccccd
 8008f7c:	08009195 	.word	0x08009195
 8008f80:	40003800 	.word	0x40003800
 8008f84:	40003400 	.word	0x40003400

08008f88 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd0:	881a      	ldrh	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fdc:	1c9a      	adds	r2, r3, #2
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10e      	bne.n	8009018 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	685a      	ldr	r2, [r3, #4]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009008:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7ff ffb8 	bl	8008f88 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009018:	bf00      	nop
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68da      	ldr	r2, [r3, #12]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009032:	b292      	uxth	r2, r2
 8009034:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903a:	1c9a      	adds	r2, r3, #2
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009044:	b29b      	uxth	r3, r3
 8009046:	3b01      	subs	r3, #1
 8009048:	b29a      	uxth	r2, r3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009052:	b29b      	uxth	r3, r3
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10e      	bne.n	8009076 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009066:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7ff ff93 	bl	8008f9c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009076:	bf00      	nop
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b086      	sub	sp, #24
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009094:	b2db      	uxtb	r3, r3
 8009096:	2b04      	cmp	r3, #4
 8009098:	d13a      	bne.n	8009110 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d109      	bne.n	80090b8 <I2S_IRQHandler+0x3a>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ae:	2b40      	cmp	r3, #64	; 0x40
 80090b0:	d102      	bne.n	80090b8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff ffb4 	bl	8009020 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090be:	2b40      	cmp	r3, #64	; 0x40
 80090c0:	d126      	bne.n	8009110 <I2S_IRQHandler+0x92>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	f003 0320 	and.w	r3, r3, #32
 80090cc:	2b20      	cmp	r3, #32
 80090ce:	d11f      	bne.n	8009110 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685a      	ldr	r2, [r3, #4]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80090de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80090e0:	2300      	movs	r3, #0
 80090e2:	613b      	str	r3, [r7, #16]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	613b      	str	r3, [r7, #16]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	613b      	str	r3, [r7, #16]
 80090f4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009102:	f043 0202 	orr.w	r2, r3, #2
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7ff ff50 	bl	8008fb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b03      	cmp	r3, #3
 800911a:	d136      	bne.n	800918a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	f003 0302 	and.w	r3, r3, #2
 8009122:	2b02      	cmp	r3, #2
 8009124:	d109      	bne.n	800913a <I2S_IRQHandler+0xbc>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009130:	2b80      	cmp	r3, #128	; 0x80
 8009132:	d102      	bne.n	800913a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7ff ff45 	bl	8008fc4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f003 0308 	and.w	r3, r3, #8
 8009140:	2b08      	cmp	r3, #8
 8009142:	d122      	bne.n	800918a <I2S_IRQHandler+0x10c>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	f003 0320 	and.w	r3, r3, #32
 800914e:	2b20      	cmp	r3, #32
 8009150:	d11b      	bne.n	800918a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	685a      	ldr	r2, [r3, #4]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009160:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009162:	2300      	movs	r3, #0
 8009164:	60fb      	str	r3, [r7, #12]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	60fb      	str	r3, [r7, #12]
 800916e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800917c:	f043 0204 	orr.w	r2, r3, #4
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f7ff ff13 	bl	8008fb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800918a:	bf00      	nop
 800918c:	3718      	adds	r7, #24
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b088      	sub	sp, #32
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4aa2      	ldr	r2, [pc, #648]	; (8009434 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d101      	bne.n	80091b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80091ae:	4ba2      	ldr	r3, [pc, #648]	; (8009438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80091b0:	e001      	b.n	80091b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80091b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a9b      	ldr	r2, [pc, #620]	; (8009434 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d101      	bne.n	80091d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80091cc:	4b9a      	ldr	r3, [pc, #616]	; (8009438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80091ce:	e001      	b.n	80091d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80091d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091e0:	d004      	beq.n	80091ec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f040 8099 	bne.w	800931e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	f003 0302 	and.w	r3, r3, #2
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d107      	bne.n	8009206 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f925 	bl	8009450 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	2b01      	cmp	r3, #1
 800920e:	d107      	bne.n	8009220 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f9c8 	bl	80095b0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009226:	2b40      	cmp	r3, #64	; 0x40
 8009228:	d13a      	bne.n	80092a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f003 0320 	and.w	r3, r3, #32
 8009230:	2b00      	cmp	r3, #0
 8009232:	d035      	beq.n	80092a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a7e      	ldr	r2, [pc, #504]	; (8009434 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d101      	bne.n	8009242 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800923e:	4b7e      	ldr	r3, [pc, #504]	; (8009438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009240:	e001      	b.n	8009246 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8009242:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4979      	ldr	r1, [pc, #484]	; (8009434 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800924e:	428b      	cmp	r3, r1
 8009250:	d101      	bne.n	8009256 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8009252:	4b79      	ldr	r3, [pc, #484]	; (8009438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009254:	e001      	b.n	800925a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8009256:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800925a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800925e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685a      	ldr	r2, [r3, #4]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800926e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009270:	2300      	movs	r3, #0
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	60fb      	str	r3, [r7, #12]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	60fb      	str	r3, [r7, #12]
 8009284:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009292:	f043 0202 	orr.w	r2, r3, #2
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7ff fe88 	bl	8008fb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	f003 0308 	and.w	r3, r3, #8
 80092a6:	2b08      	cmp	r3, #8
 80092a8:	f040 80be 	bne.w	8009428 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f003 0320 	and.w	r3, r3, #32
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f000 80b8 	beq.w	8009428 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80092c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a59      	ldr	r2, [pc, #356]	; (8009434 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d101      	bne.n	80092d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80092d2:	4b59      	ldr	r3, [pc, #356]	; (8009438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80092d4:	e001      	b.n	80092da <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80092d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4954      	ldr	r1, [pc, #336]	; (8009434 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80092e2:	428b      	cmp	r3, r1
 80092e4:	d101      	bne.n	80092ea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80092e6:	4b54      	ldr	r3, [pc, #336]	; (8009438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80092e8:	e001      	b.n	80092ee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80092ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80092ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80092f2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80092f4:	2300      	movs	r3, #0
 80092f6:	60bb      	str	r3, [r7, #8]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	60bb      	str	r3, [r7, #8]
 8009300:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800930e:	f043 0204 	orr.w	r2, r3, #4
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff fe4a 	bl	8008fb0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800931c:	e084      	b.n	8009428 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	f003 0302 	and.w	r3, r3, #2
 8009324:	2b02      	cmp	r3, #2
 8009326:	d107      	bne.n	8009338 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800932e:	2b00      	cmp	r3, #0
 8009330:	d002      	beq.n	8009338 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f8be 	bl	80094b4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	f003 0301 	and.w	r3, r3, #1
 800933e:	2b01      	cmp	r3, #1
 8009340:	d107      	bne.n	8009352 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009348:	2b00      	cmp	r3, #0
 800934a:	d002      	beq.n	8009352 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f8fd 	bl	800954c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009358:	2b40      	cmp	r3, #64	; 0x40
 800935a:	d12f      	bne.n	80093bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	f003 0320 	and.w	r3, r3, #32
 8009362:	2b00      	cmp	r3, #0
 8009364:	d02a      	beq.n	80093bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009374:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a2e      	ldr	r2, [pc, #184]	; (8009434 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d101      	bne.n	8009384 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8009380:	4b2d      	ldr	r3, [pc, #180]	; (8009438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009382:	e001      	b.n	8009388 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8009384:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4929      	ldr	r1, [pc, #164]	; (8009434 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009390:	428b      	cmp	r3, r1
 8009392:	d101      	bne.n	8009398 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8009394:	4b28      	ldr	r3, [pc, #160]	; (8009438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009396:	e001      	b.n	800939c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8009398:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800939c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80093a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ae:	f043 0202 	orr.w	r2, r3, #2
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff fdfa 	bl	8008fb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	f003 0308 	and.w	r3, r3, #8
 80093c2:	2b08      	cmp	r3, #8
 80093c4:	d131      	bne.n	800942a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	f003 0320 	and.w	r3, r3, #32
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d02c      	beq.n	800942a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a17      	ldr	r2, [pc, #92]	; (8009434 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d101      	bne.n	80093de <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80093da:	4b17      	ldr	r3, [pc, #92]	; (8009438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80093dc:	e001      	b.n	80093e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80093de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80093e2:	685a      	ldr	r2, [r3, #4]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4912      	ldr	r1, [pc, #72]	; (8009434 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80093ea:	428b      	cmp	r3, r1
 80093ec:	d101      	bne.n	80093f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80093ee:	4b12      	ldr	r3, [pc, #72]	; (8009438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80093f0:	e001      	b.n	80093f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80093f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80093f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80093fa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685a      	ldr	r2, [r3, #4]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800940a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009418:	f043 0204 	orr.w	r2, r3, #4
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7ff fdc5 	bl	8008fb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009426:	e000      	b.n	800942a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009428:	bf00      	nop
}
 800942a:	bf00      	nop
 800942c:	3720      	adds	r7, #32
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	40003800 	.word	0x40003800
 8009438:	40003400 	.word	0x40003400

0800943c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	1c99      	adds	r1, r3, #2
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	6251      	str	r1, [r2, #36]	; 0x24
 8009462:	881a      	ldrh	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800946e:	b29b      	uxth	r3, r3
 8009470:	3b01      	subs	r3, #1
 8009472:	b29a      	uxth	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800947c:	b29b      	uxth	r3, r3
 800947e:	2b00      	cmp	r3, #0
 8009480:	d113      	bne.n	80094aa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	685a      	ldr	r2, [r3, #4]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009490:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009496:	b29b      	uxth	r3, r3
 8009498:	2b00      	cmp	r3, #0
 800949a:	d106      	bne.n	80094aa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7ff ffc9 	bl	800943c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80094aa:	bf00      	nop
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	1c99      	adds	r1, r3, #2
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	6251      	str	r1, [r2, #36]	; 0x24
 80094c6:	8819      	ldrh	r1, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <I2SEx_TxISR_I2SExt+0x90>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d101      	bne.n	80094d6 <I2SEx_TxISR_I2SExt+0x22>
 80094d2:	4b1d      	ldr	r3, [pc, #116]	; (8009548 <I2SEx_TxISR_I2SExt+0x94>)
 80094d4:	e001      	b.n	80094da <I2SEx_TxISR_I2SExt+0x26>
 80094d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80094da:	460a      	mov	r2, r1
 80094dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	3b01      	subs	r3, #1
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d121      	bne.n	800953a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a12      	ldr	r2, [pc, #72]	; (8009544 <I2SEx_TxISR_I2SExt+0x90>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d101      	bne.n	8009504 <I2SEx_TxISR_I2SExt+0x50>
 8009500:	4b11      	ldr	r3, [pc, #68]	; (8009548 <I2SEx_TxISR_I2SExt+0x94>)
 8009502:	e001      	b.n	8009508 <I2SEx_TxISR_I2SExt+0x54>
 8009504:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009508:	685a      	ldr	r2, [r3, #4]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	490d      	ldr	r1, [pc, #52]	; (8009544 <I2SEx_TxISR_I2SExt+0x90>)
 8009510:	428b      	cmp	r3, r1
 8009512:	d101      	bne.n	8009518 <I2SEx_TxISR_I2SExt+0x64>
 8009514:	4b0c      	ldr	r3, [pc, #48]	; (8009548 <I2SEx_TxISR_I2SExt+0x94>)
 8009516:	e001      	b.n	800951c <I2SEx_TxISR_I2SExt+0x68>
 8009518:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800951c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009520:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009526:	b29b      	uxth	r3, r3
 8009528:	2b00      	cmp	r3, #0
 800952a:	d106      	bne.n	800953a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7ff ff81 	bl	800943c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800953a:	bf00      	nop
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	40003800 	.word	0x40003800
 8009548:	40003400 	.word	0x40003400

0800954c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68d8      	ldr	r0, [r3, #12]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955e:	1c99      	adds	r1, r3, #2
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	62d1      	str	r1, [r2, #44]	; 0x2c
 8009564:	b282      	uxth	r2, r0
 8009566:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800956c:	b29b      	uxth	r3, r3
 800956e:	3b01      	subs	r3, #1
 8009570:	b29a      	uxth	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800957a:	b29b      	uxth	r3, r3
 800957c:	2b00      	cmp	r3, #0
 800957e:	d113      	bne.n	80095a8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	685a      	ldr	r2, [r3, #4]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800958e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009594:	b29b      	uxth	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7ff ff4a 	bl	800943c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80095a8:	bf00      	nop
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a20      	ldr	r2, [pc, #128]	; (8009640 <I2SEx_RxISR_I2SExt+0x90>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d101      	bne.n	80095c6 <I2SEx_RxISR_I2SExt+0x16>
 80095c2:	4b20      	ldr	r3, [pc, #128]	; (8009644 <I2SEx_RxISR_I2SExt+0x94>)
 80095c4:	e001      	b.n	80095ca <I2SEx_RxISR_I2SExt+0x1a>
 80095c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80095ca:	68d8      	ldr	r0, [r3, #12]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d0:	1c99      	adds	r1, r3, #2
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80095d6:	b282      	uxth	r2, r0
 80095d8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095de:	b29b      	uxth	r3, r3
 80095e0:	3b01      	subs	r3, #1
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d121      	bne.n	8009636 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a12      	ldr	r2, [pc, #72]	; (8009640 <I2SEx_RxISR_I2SExt+0x90>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d101      	bne.n	8009600 <I2SEx_RxISR_I2SExt+0x50>
 80095fc:	4b11      	ldr	r3, [pc, #68]	; (8009644 <I2SEx_RxISR_I2SExt+0x94>)
 80095fe:	e001      	b.n	8009604 <I2SEx_RxISR_I2SExt+0x54>
 8009600:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	490d      	ldr	r1, [pc, #52]	; (8009640 <I2SEx_RxISR_I2SExt+0x90>)
 800960c:	428b      	cmp	r3, r1
 800960e:	d101      	bne.n	8009614 <I2SEx_RxISR_I2SExt+0x64>
 8009610:	4b0c      	ldr	r3, [pc, #48]	; (8009644 <I2SEx_RxISR_I2SExt+0x94>)
 8009612:	e001      	b.n	8009618 <I2SEx_RxISR_I2SExt+0x68>
 8009614:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009618:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800961c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009622:	b29b      	uxth	r3, r3
 8009624:	2b00      	cmp	r3, #0
 8009626:	d106      	bne.n	8009636 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7ff ff03 	bl	800943c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009636:	bf00      	nop
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	40003800 	.word	0x40003800
 8009644:	40003400 	.word	0x40003400

08009648 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d101      	bne.n	800965a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e264      	b.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 0301 	and.w	r3, r3, #1
 8009662:	2b00      	cmp	r3, #0
 8009664:	d075      	beq.n	8009752 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009666:	4ba3      	ldr	r3, [pc, #652]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f003 030c 	and.w	r3, r3, #12
 800966e:	2b04      	cmp	r3, #4
 8009670:	d00c      	beq.n	800968c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009672:	4ba0      	ldr	r3, [pc, #640]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800967a:	2b08      	cmp	r3, #8
 800967c:	d112      	bne.n	80096a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800967e:	4b9d      	ldr	r3, [pc, #628]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800968a:	d10b      	bne.n	80096a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800968c:	4b99      	ldr	r3, [pc, #612]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d05b      	beq.n	8009750 <HAL_RCC_OscConfig+0x108>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d157      	bne.n	8009750 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e23f      	b.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096ac:	d106      	bne.n	80096bc <HAL_RCC_OscConfig+0x74>
 80096ae:	4b91      	ldr	r3, [pc, #580]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a90      	ldr	r2, [pc, #576]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80096b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096b8:	6013      	str	r3, [r2, #0]
 80096ba:	e01d      	b.n	80096f8 <HAL_RCC_OscConfig+0xb0>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096c4:	d10c      	bne.n	80096e0 <HAL_RCC_OscConfig+0x98>
 80096c6:	4b8b      	ldr	r3, [pc, #556]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a8a      	ldr	r2, [pc, #552]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80096cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096d0:	6013      	str	r3, [r2, #0]
 80096d2:	4b88      	ldr	r3, [pc, #544]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a87      	ldr	r2, [pc, #540]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80096d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	e00b      	b.n	80096f8 <HAL_RCC_OscConfig+0xb0>
 80096e0:	4b84      	ldr	r3, [pc, #528]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a83      	ldr	r2, [pc, #524]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80096e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096ea:	6013      	str	r3, [r2, #0]
 80096ec:	4b81      	ldr	r3, [pc, #516]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a80      	ldr	r2, [pc, #512]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80096f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d013      	beq.n	8009728 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009700:	f7fb fe40 	bl	8005384 <HAL_GetTick>
 8009704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009706:	e008      	b.n	800971a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009708:	f7fb fe3c 	bl	8005384 <HAL_GetTick>
 800970c:	4602      	mov	r2, r0
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	2b64      	cmp	r3, #100	; 0x64
 8009714:	d901      	bls.n	800971a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e204      	b.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800971a:	4b76      	ldr	r3, [pc, #472]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009722:	2b00      	cmp	r3, #0
 8009724:	d0f0      	beq.n	8009708 <HAL_RCC_OscConfig+0xc0>
 8009726:	e014      	b.n	8009752 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009728:	f7fb fe2c 	bl	8005384 <HAL_GetTick>
 800972c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800972e:	e008      	b.n	8009742 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009730:	f7fb fe28 	bl	8005384 <HAL_GetTick>
 8009734:	4602      	mov	r2, r0
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	2b64      	cmp	r3, #100	; 0x64
 800973c:	d901      	bls.n	8009742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800973e:	2303      	movs	r3, #3
 8009740:	e1f0      	b.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009742:	4b6c      	ldr	r3, [pc, #432]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1f0      	bne.n	8009730 <HAL_RCC_OscConfig+0xe8>
 800974e:	e000      	b.n	8009752 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 0302 	and.w	r3, r3, #2
 800975a:	2b00      	cmp	r3, #0
 800975c:	d063      	beq.n	8009826 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800975e:	4b65      	ldr	r3, [pc, #404]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	f003 030c 	and.w	r3, r3, #12
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00b      	beq.n	8009782 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800976a:	4b62      	ldr	r3, [pc, #392]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009772:	2b08      	cmp	r3, #8
 8009774:	d11c      	bne.n	80097b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009776:	4b5f      	ldr	r3, [pc, #380]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d116      	bne.n	80097b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009782:	4b5c      	ldr	r3, [pc, #368]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0302 	and.w	r3, r3, #2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d005      	beq.n	800979a <HAL_RCC_OscConfig+0x152>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d001      	beq.n	800979a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e1c4      	b.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800979a:	4b56      	ldr	r3, [pc, #344]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	4952      	ldr	r1, [pc, #328]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097ae:	e03a      	b.n	8009826 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d020      	beq.n	80097fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80097b8:	4b4f      	ldr	r3, [pc, #316]	; (80098f8 <HAL_RCC_OscConfig+0x2b0>)
 80097ba:	2201      	movs	r2, #1
 80097bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097be:	f7fb fde1 	bl	8005384 <HAL_GetTick>
 80097c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097c4:	e008      	b.n	80097d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097c6:	f7fb fddd 	bl	8005384 <HAL_GetTick>
 80097ca:	4602      	mov	r2, r0
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d901      	bls.n	80097d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e1a5      	b.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097d8:	4b46      	ldr	r3, [pc, #280]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0302 	and.w	r3, r3, #2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0f0      	beq.n	80097c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097e4:	4b43      	ldr	r3, [pc, #268]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	4940      	ldr	r1, [pc, #256]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80097f4:	4313      	orrs	r3, r2
 80097f6:	600b      	str	r3, [r1, #0]
 80097f8:	e015      	b.n	8009826 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097fa:	4b3f      	ldr	r3, [pc, #252]	; (80098f8 <HAL_RCC_OscConfig+0x2b0>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009800:	f7fb fdc0 	bl	8005384 <HAL_GetTick>
 8009804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009806:	e008      	b.n	800981a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009808:	f7fb fdbc 	bl	8005384 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	2b02      	cmp	r3, #2
 8009814:	d901      	bls.n	800981a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009816:	2303      	movs	r3, #3
 8009818:	e184      	b.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800981a:	4b36      	ldr	r3, [pc, #216]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 0302 	and.w	r3, r3, #2
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1f0      	bne.n	8009808 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 0308 	and.w	r3, r3, #8
 800982e:	2b00      	cmp	r3, #0
 8009830:	d030      	beq.n	8009894 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	695b      	ldr	r3, [r3, #20]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d016      	beq.n	8009868 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800983a:	4b30      	ldr	r3, [pc, #192]	; (80098fc <HAL_RCC_OscConfig+0x2b4>)
 800983c:	2201      	movs	r2, #1
 800983e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009840:	f7fb fda0 	bl	8005384 <HAL_GetTick>
 8009844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009846:	e008      	b.n	800985a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009848:	f7fb fd9c 	bl	8005384 <HAL_GetTick>
 800984c:	4602      	mov	r2, r0
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	2b02      	cmp	r3, #2
 8009854:	d901      	bls.n	800985a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	e164      	b.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800985a:	4b26      	ldr	r3, [pc, #152]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 800985c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800985e:	f003 0302 	and.w	r3, r3, #2
 8009862:	2b00      	cmp	r3, #0
 8009864:	d0f0      	beq.n	8009848 <HAL_RCC_OscConfig+0x200>
 8009866:	e015      	b.n	8009894 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009868:	4b24      	ldr	r3, [pc, #144]	; (80098fc <HAL_RCC_OscConfig+0x2b4>)
 800986a:	2200      	movs	r2, #0
 800986c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800986e:	f7fb fd89 	bl	8005384 <HAL_GetTick>
 8009872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009874:	e008      	b.n	8009888 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009876:	f7fb fd85 	bl	8005384 <HAL_GetTick>
 800987a:	4602      	mov	r2, r0
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	2b02      	cmp	r3, #2
 8009882:	d901      	bls.n	8009888 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e14d      	b.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009888:	4b1a      	ldr	r3, [pc, #104]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 800988a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800988c:	f003 0302 	and.w	r3, r3, #2
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1f0      	bne.n	8009876 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 0304 	and.w	r3, r3, #4
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 80a0 	beq.w	80099e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098a2:	2300      	movs	r3, #0
 80098a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098a6:	4b13      	ldr	r3, [pc, #76]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80098a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10f      	bne.n	80098d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098b2:	2300      	movs	r3, #0
 80098b4:	60bb      	str	r3, [r7, #8]
 80098b6:	4b0f      	ldr	r3, [pc, #60]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80098b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ba:	4a0e      	ldr	r2, [pc, #56]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80098bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098c0:	6413      	str	r3, [r2, #64]	; 0x40
 80098c2:	4b0c      	ldr	r3, [pc, #48]	; (80098f4 <HAL_RCC_OscConfig+0x2ac>)
 80098c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098ca:	60bb      	str	r3, [r7, #8]
 80098cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80098ce:	2301      	movs	r3, #1
 80098d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098d2:	4b0b      	ldr	r3, [pc, #44]	; (8009900 <HAL_RCC_OscConfig+0x2b8>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d121      	bne.n	8009922 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80098de:	4b08      	ldr	r3, [pc, #32]	; (8009900 <HAL_RCC_OscConfig+0x2b8>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a07      	ldr	r2, [pc, #28]	; (8009900 <HAL_RCC_OscConfig+0x2b8>)
 80098e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098ea:	f7fb fd4b 	bl	8005384 <HAL_GetTick>
 80098ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098f0:	e011      	b.n	8009916 <HAL_RCC_OscConfig+0x2ce>
 80098f2:	bf00      	nop
 80098f4:	40023800 	.word	0x40023800
 80098f8:	42470000 	.word	0x42470000
 80098fc:	42470e80 	.word	0x42470e80
 8009900:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009904:	f7fb fd3e 	bl	8005384 <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	2b02      	cmp	r3, #2
 8009910:	d901      	bls.n	8009916 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e106      	b.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009916:	4b85      	ldr	r3, [pc, #532]	; (8009b2c <HAL_RCC_OscConfig+0x4e4>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0f0      	beq.n	8009904 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d106      	bne.n	8009938 <HAL_RCC_OscConfig+0x2f0>
 800992a:	4b81      	ldr	r3, [pc, #516]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 800992c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992e:	4a80      	ldr	r2, [pc, #512]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 8009930:	f043 0301 	orr.w	r3, r3, #1
 8009934:	6713      	str	r3, [r2, #112]	; 0x70
 8009936:	e01c      	b.n	8009972 <HAL_RCC_OscConfig+0x32a>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	2b05      	cmp	r3, #5
 800993e:	d10c      	bne.n	800995a <HAL_RCC_OscConfig+0x312>
 8009940:	4b7b      	ldr	r3, [pc, #492]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 8009942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009944:	4a7a      	ldr	r2, [pc, #488]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 8009946:	f043 0304 	orr.w	r3, r3, #4
 800994a:	6713      	str	r3, [r2, #112]	; 0x70
 800994c:	4b78      	ldr	r3, [pc, #480]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 800994e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009950:	4a77      	ldr	r2, [pc, #476]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 8009952:	f043 0301 	orr.w	r3, r3, #1
 8009956:	6713      	str	r3, [r2, #112]	; 0x70
 8009958:	e00b      	b.n	8009972 <HAL_RCC_OscConfig+0x32a>
 800995a:	4b75      	ldr	r3, [pc, #468]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 800995c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800995e:	4a74      	ldr	r2, [pc, #464]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 8009960:	f023 0301 	bic.w	r3, r3, #1
 8009964:	6713      	str	r3, [r2, #112]	; 0x70
 8009966:	4b72      	ldr	r3, [pc, #456]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 8009968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996a:	4a71      	ldr	r2, [pc, #452]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 800996c:	f023 0304 	bic.w	r3, r3, #4
 8009970:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d015      	beq.n	80099a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800997a:	f7fb fd03 	bl	8005384 <HAL_GetTick>
 800997e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009980:	e00a      	b.n	8009998 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009982:	f7fb fcff 	bl	8005384 <HAL_GetTick>
 8009986:	4602      	mov	r2, r0
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009990:	4293      	cmp	r3, r2
 8009992:	d901      	bls.n	8009998 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009994:	2303      	movs	r3, #3
 8009996:	e0c5      	b.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009998:	4b65      	ldr	r3, [pc, #404]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 800999a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999c:	f003 0302 	and.w	r3, r3, #2
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0ee      	beq.n	8009982 <HAL_RCC_OscConfig+0x33a>
 80099a4:	e014      	b.n	80099d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099a6:	f7fb fced 	bl	8005384 <HAL_GetTick>
 80099aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099ac:	e00a      	b.n	80099c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099ae:	f7fb fce9 	bl	8005384 <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099bc:	4293      	cmp	r3, r2
 80099be:	d901      	bls.n	80099c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e0af      	b.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099c4:	4b5a      	ldr	r3, [pc, #360]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 80099c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c8:	f003 0302 	and.w	r3, r3, #2
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1ee      	bne.n	80099ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80099d0:	7dfb      	ldrb	r3, [r7, #23]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d105      	bne.n	80099e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099d6:	4b56      	ldr	r3, [pc, #344]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 80099d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099da:	4a55      	ldr	r2, [pc, #340]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 80099dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f000 809b 	beq.w	8009b22 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80099ec:	4b50      	ldr	r3, [pc, #320]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	f003 030c 	and.w	r3, r3, #12
 80099f4:	2b08      	cmp	r3, #8
 80099f6:	d05c      	beq.n	8009ab2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	699b      	ldr	r3, [r3, #24]
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d141      	bne.n	8009a84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a00:	4b4c      	ldr	r3, [pc, #304]	; (8009b34 <HAL_RCC_OscConfig+0x4ec>)
 8009a02:	2200      	movs	r2, #0
 8009a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a06:	f7fb fcbd 	bl	8005384 <HAL_GetTick>
 8009a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a0c:	e008      	b.n	8009a20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a0e:	f7fb fcb9 	bl	8005384 <HAL_GetTick>
 8009a12:	4602      	mov	r2, r0
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d901      	bls.n	8009a20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	e081      	b.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a20:	4b43      	ldr	r3, [pc, #268]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1f0      	bne.n	8009a0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	69da      	ldr	r2, [r3, #28]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a1b      	ldr	r3, [r3, #32]
 8009a34:	431a      	orrs	r2, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3a:	019b      	lsls	r3, r3, #6
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a42:	085b      	lsrs	r3, r3, #1
 8009a44:	3b01      	subs	r3, #1
 8009a46:	041b      	lsls	r3, r3, #16
 8009a48:	431a      	orrs	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4e:	061b      	lsls	r3, r3, #24
 8009a50:	4937      	ldr	r1, [pc, #220]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 8009a52:	4313      	orrs	r3, r2
 8009a54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a56:	4b37      	ldr	r3, [pc, #220]	; (8009b34 <HAL_RCC_OscConfig+0x4ec>)
 8009a58:	2201      	movs	r2, #1
 8009a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a5c:	f7fb fc92 	bl	8005384 <HAL_GetTick>
 8009a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a62:	e008      	b.n	8009a76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a64:	f7fb fc8e 	bl	8005384 <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d901      	bls.n	8009a76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e056      	b.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a76:	4b2e      	ldr	r3, [pc, #184]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d0f0      	beq.n	8009a64 <HAL_RCC_OscConfig+0x41c>
 8009a82:	e04e      	b.n	8009b22 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a84:	4b2b      	ldr	r3, [pc, #172]	; (8009b34 <HAL_RCC_OscConfig+0x4ec>)
 8009a86:	2200      	movs	r2, #0
 8009a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a8a:	f7fb fc7b 	bl	8005384 <HAL_GetTick>
 8009a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a90:	e008      	b.n	8009aa4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a92:	f7fb fc77 	bl	8005384 <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d901      	bls.n	8009aa4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	e03f      	b.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009aa4:	4b22      	ldr	r3, [pc, #136]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1f0      	bne.n	8009a92 <HAL_RCC_OscConfig+0x44a>
 8009ab0:	e037      	b.n	8009b22 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	699b      	ldr	r3, [r3, #24]
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d101      	bne.n	8009abe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e032      	b.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009abe:	4b1c      	ldr	r3, [pc, #112]	; (8009b30 <HAL_RCC_OscConfig+0x4e8>)
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d028      	beq.n	8009b1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d121      	bne.n	8009b1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d11a      	bne.n	8009b1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009aee:	4013      	ands	r3, r2
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009af4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d111      	bne.n	8009b1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b04:	085b      	lsrs	r3, r3, #1
 8009b06:	3b01      	subs	r3, #1
 8009b08:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d107      	bne.n	8009b1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b18:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d001      	beq.n	8009b22 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e000      	b.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	40007000 	.word	0x40007000
 8009b30:	40023800 	.word	0x40023800
 8009b34:	42470060 	.word	0x42470060

08009b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d101      	bne.n	8009b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e0cc      	b.n	8009ce6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b4c:	4b68      	ldr	r3, [pc, #416]	; (8009cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0307 	and.w	r3, r3, #7
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d90c      	bls.n	8009b74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b5a:	4b65      	ldr	r3, [pc, #404]	; (8009cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	b2d2      	uxtb	r2, r2
 8009b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b62:	4b63      	ldr	r3, [pc, #396]	; (8009cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 0307 	and.w	r3, r3, #7
 8009b6a:	683a      	ldr	r2, [r7, #0]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d001      	beq.n	8009b74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	e0b8      	b.n	8009ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0302 	and.w	r3, r3, #2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d020      	beq.n	8009bc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 0304 	and.w	r3, r3, #4
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d005      	beq.n	8009b98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b8c:	4b59      	ldr	r3, [pc, #356]	; (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	4a58      	ldr	r2, [pc, #352]	; (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009b92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009b96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0308 	and.w	r3, r3, #8
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d005      	beq.n	8009bb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009ba4:	4b53      	ldr	r3, [pc, #332]	; (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	4a52      	ldr	r2, [pc, #328]	; (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009baa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bb0:	4b50      	ldr	r3, [pc, #320]	; (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	494d      	ldr	r1, [pc, #308]	; (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d044      	beq.n	8009c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d107      	bne.n	8009be6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009bd6:	4b47      	ldr	r3, [pc, #284]	; (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d119      	bne.n	8009c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e07f      	b.n	8009ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d003      	beq.n	8009bf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d107      	bne.n	8009c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bf6:	4b3f      	ldr	r3, [pc, #252]	; (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d109      	bne.n	8009c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e06f      	b.n	8009ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c06:	4b3b      	ldr	r3, [pc, #236]	; (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 0302 	and.w	r3, r3, #2
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e067      	b.n	8009ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c16:	4b37      	ldr	r3, [pc, #220]	; (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	f023 0203 	bic.w	r2, r3, #3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	4934      	ldr	r1, [pc, #208]	; (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009c28:	f7fb fbac 	bl	8005384 <HAL_GetTick>
 8009c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c2e:	e00a      	b.n	8009c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c30:	f7fb fba8 	bl	8005384 <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d901      	bls.n	8009c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e04f      	b.n	8009ce6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c46:	4b2b      	ldr	r3, [pc, #172]	; (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	f003 020c 	and.w	r2, r3, #12
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d1eb      	bne.n	8009c30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009c58:	4b25      	ldr	r3, [pc, #148]	; (8009cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 0307 	and.w	r3, r3, #7
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d20c      	bcs.n	8009c80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c66:	4b22      	ldr	r3, [pc, #136]	; (8009cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	b2d2      	uxtb	r2, r2
 8009c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c6e:	4b20      	ldr	r3, [pc, #128]	; (8009cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 0307 	and.w	r3, r3, #7
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d001      	beq.n	8009c80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e032      	b.n	8009ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0304 	and.w	r3, r3, #4
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d008      	beq.n	8009c9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c8c:	4b19      	ldr	r3, [pc, #100]	; (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	4916      	ldr	r1, [pc, #88]	; (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0308 	and.w	r3, r3, #8
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d009      	beq.n	8009cbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009caa:	4b12      	ldr	r3, [pc, #72]	; (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	00db      	lsls	r3, r3, #3
 8009cb8:	490e      	ldr	r1, [pc, #56]	; (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009cbe:	f000 f821 	bl	8009d04 <HAL_RCC_GetSysClockFreq>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	4b0b      	ldr	r3, [pc, #44]	; (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	091b      	lsrs	r3, r3, #4
 8009cca:	f003 030f 	and.w	r3, r3, #15
 8009cce:	490a      	ldr	r1, [pc, #40]	; (8009cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8009cd0:	5ccb      	ldrb	r3, [r1, r3]
 8009cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd6:	4a09      	ldr	r2, [pc, #36]	; (8009cfc <HAL_RCC_ClockConfig+0x1c4>)
 8009cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009cda:	4b09      	ldr	r3, [pc, #36]	; (8009d00 <HAL_RCC_ClockConfig+0x1c8>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fb fb0c 	bl	80052fc <HAL_InitTick>

  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	40023c00 	.word	0x40023c00
 8009cf4:	40023800 	.word	0x40023800
 8009cf8:	0800f070 	.word	0x0800f070
 8009cfc:	20000004 	.word	0x20000004
 8009d00:	2000014c 	.word	0x2000014c

08009d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009d08:	b084      	sub	sp, #16
 8009d0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	607b      	str	r3, [r7, #4]
 8009d10:	2300      	movs	r3, #0
 8009d12:	60fb      	str	r3, [r7, #12]
 8009d14:	2300      	movs	r3, #0
 8009d16:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d1c:	4b67      	ldr	r3, [pc, #412]	; (8009ebc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	f003 030c 	and.w	r3, r3, #12
 8009d24:	2b08      	cmp	r3, #8
 8009d26:	d00d      	beq.n	8009d44 <HAL_RCC_GetSysClockFreq+0x40>
 8009d28:	2b08      	cmp	r3, #8
 8009d2a:	f200 80bd 	bhi.w	8009ea8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d002      	beq.n	8009d38 <HAL_RCC_GetSysClockFreq+0x34>
 8009d32:	2b04      	cmp	r3, #4
 8009d34:	d003      	beq.n	8009d3e <HAL_RCC_GetSysClockFreq+0x3a>
 8009d36:	e0b7      	b.n	8009ea8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009d38:	4b61      	ldr	r3, [pc, #388]	; (8009ec0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009d3a:	60bb      	str	r3, [r7, #8]
       break;
 8009d3c:	e0b7      	b.n	8009eae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009d3e:	4b61      	ldr	r3, [pc, #388]	; (8009ec4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009d40:	60bb      	str	r3, [r7, #8]
      break;
 8009d42:	e0b4      	b.n	8009eae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d44:	4b5d      	ldr	r3, [pc, #372]	; (8009ebc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d4e:	4b5b      	ldr	r3, [pc, #364]	; (8009ebc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d04d      	beq.n	8009df6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d5a:	4b58      	ldr	r3, [pc, #352]	; (8009ebc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	099b      	lsrs	r3, r3, #6
 8009d60:	461a      	mov	r2, r3
 8009d62:	f04f 0300 	mov.w	r3, #0
 8009d66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009d6a:	f04f 0100 	mov.w	r1, #0
 8009d6e:	ea02 0800 	and.w	r8, r2, r0
 8009d72:	ea03 0901 	and.w	r9, r3, r1
 8009d76:	4640      	mov	r0, r8
 8009d78:	4649      	mov	r1, r9
 8009d7a:	f04f 0200 	mov.w	r2, #0
 8009d7e:	f04f 0300 	mov.w	r3, #0
 8009d82:	014b      	lsls	r3, r1, #5
 8009d84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009d88:	0142      	lsls	r2, r0, #5
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	ebb0 0008 	subs.w	r0, r0, r8
 8009d92:	eb61 0109 	sbc.w	r1, r1, r9
 8009d96:	f04f 0200 	mov.w	r2, #0
 8009d9a:	f04f 0300 	mov.w	r3, #0
 8009d9e:	018b      	lsls	r3, r1, #6
 8009da0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009da4:	0182      	lsls	r2, r0, #6
 8009da6:	1a12      	subs	r2, r2, r0
 8009da8:	eb63 0301 	sbc.w	r3, r3, r1
 8009dac:	f04f 0000 	mov.w	r0, #0
 8009db0:	f04f 0100 	mov.w	r1, #0
 8009db4:	00d9      	lsls	r1, r3, #3
 8009db6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009dba:	00d0      	lsls	r0, r2, #3
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	eb12 0208 	adds.w	r2, r2, r8
 8009dc4:	eb43 0309 	adc.w	r3, r3, r9
 8009dc8:	f04f 0000 	mov.w	r0, #0
 8009dcc:	f04f 0100 	mov.w	r1, #0
 8009dd0:	0259      	lsls	r1, r3, #9
 8009dd2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009dd6:	0250      	lsls	r0, r2, #9
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4610      	mov	r0, r2
 8009dde:	4619      	mov	r1, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	461a      	mov	r2, r3
 8009de4:	f04f 0300 	mov.w	r3, #0
 8009de8:	f7f6 febc 	bl	8000b64 <__aeabi_uldivmod>
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	4613      	mov	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]
 8009df4:	e04a      	b.n	8009e8c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009df6:	4b31      	ldr	r3, [pc, #196]	; (8009ebc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	099b      	lsrs	r3, r3, #6
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	f04f 0300 	mov.w	r3, #0
 8009e02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009e06:	f04f 0100 	mov.w	r1, #0
 8009e0a:	ea02 0400 	and.w	r4, r2, r0
 8009e0e:	ea03 0501 	and.w	r5, r3, r1
 8009e12:	4620      	mov	r0, r4
 8009e14:	4629      	mov	r1, r5
 8009e16:	f04f 0200 	mov.w	r2, #0
 8009e1a:	f04f 0300 	mov.w	r3, #0
 8009e1e:	014b      	lsls	r3, r1, #5
 8009e20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009e24:	0142      	lsls	r2, r0, #5
 8009e26:	4610      	mov	r0, r2
 8009e28:	4619      	mov	r1, r3
 8009e2a:	1b00      	subs	r0, r0, r4
 8009e2c:	eb61 0105 	sbc.w	r1, r1, r5
 8009e30:	f04f 0200 	mov.w	r2, #0
 8009e34:	f04f 0300 	mov.w	r3, #0
 8009e38:	018b      	lsls	r3, r1, #6
 8009e3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009e3e:	0182      	lsls	r2, r0, #6
 8009e40:	1a12      	subs	r2, r2, r0
 8009e42:	eb63 0301 	sbc.w	r3, r3, r1
 8009e46:	f04f 0000 	mov.w	r0, #0
 8009e4a:	f04f 0100 	mov.w	r1, #0
 8009e4e:	00d9      	lsls	r1, r3, #3
 8009e50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e54:	00d0      	lsls	r0, r2, #3
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	1912      	adds	r2, r2, r4
 8009e5c:	eb45 0303 	adc.w	r3, r5, r3
 8009e60:	f04f 0000 	mov.w	r0, #0
 8009e64:	f04f 0100 	mov.w	r1, #0
 8009e68:	0299      	lsls	r1, r3, #10
 8009e6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009e6e:	0290      	lsls	r0, r2, #10
 8009e70:	4602      	mov	r2, r0
 8009e72:	460b      	mov	r3, r1
 8009e74:	4610      	mov	r0, r2
 8009e76:	4619      	mov	r1, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	f04f 0300 	mov.w	r3, #0
 8009e80:	f7f6 fe70 	bl	8000b64 <__aeabi_uldivmod>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	4613      	mov	r3, r2
 8009e8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009e8c:	4b0b      	ldr	r3, [pc, #44]	; (8009ebc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	0c1b      	lsrs	r3, r3, #16
 8009e92:	f003 0303 	and.w	r3, r3, #3
 8009e96:	3301      	adds	r3, #1
 8009e98:	005b      	lsls	r3, r3, #1
 8009e9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ea4:	60bb      	str	r3, [r7, #8]
      break;
 8009ea6:	e002      	b.n	8009eae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009ea8:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009eaa:	60bb      	str	r3, [r7, #8]
      break;
 8009eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009eae:	68bb      	ldr	r3, [r7, #8]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009eba:	bf00      	nop
 8009ebc:	40023800 	.word	0x40023800
 8009ec0:	00f42400 	.word	0x00f42400
 8009ec4:	007a1200 	.word	0x007a1200

08009ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ecc:	4b03      	ldr	r3, [pc, #12]	; (8009edc <HAL_RCC_GetHCLKFreq+0x14>)
 8009ece:	681b      	ldr	r3, [r3, #0]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	20000004 	.word	0x20000004

08009ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009ee4:	f7ff fff0 	bl	8009ec8 <HAL_RCC_GetHCLKFreq>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	4b05      	ldr	r3, [pc, #20]	; (8009f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	0a9b      	lsrs	r3, r3, #10
 8009ef0:	f003 0307 	and.w	r3, r3, #7
 8009ef4:	4903      	ldr	r1, [pc, #12]	; (8009f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ef6:	5ccb      	ldrb	r3, [r1, r3]
 8009ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	40023800 	.word	0x40023800
 8009f04:	0800f080 	.word	0x0800f080

08009f08 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f10:	2300      	movs	r3, #0
 8009f12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009f14:	2300      	movs	r3, #0
 8009f16:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0301 	and.w	r3, r3, #1
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d105      	bne.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d035      	beq.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009f30:	4b62      	ldr	r3, [pc, #392]	; (800a0bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009f36:	f7fb fa25 	bl	8005384 <HAL_GetTick>
 8009f3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009f3c:	e008      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009f3e:	f7fb fa21 	bl	8005384 <HAL_GetTick>
 8009f42:	4602      	mov	r2, r0
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d901      	bls.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e0b0      	b.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009f50:	4b5b      	ldr	r3, [pc, #364]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1f0      	bne.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	019a      	lsls	r2, r3, #6
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	071b      	lsls	r3, r3, #28
 8009f68:	4955      	ldr	r1, [pc, #340]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009f70:	4b52      	ldr	r3, [pc, #328]	; (800a0bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009f72:	2201      	movs	r2, #1
 8009f74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009f76:	f7fb fa05 	bl	8005384 <HAL_GetTick>
 8009f7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f7c:	e008      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009f7e:	f7fb fa01 	bl	8005384 <HAL_GetTick>
 8009f82:	4602      	mov	r2, r0
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	2b02      	cmp	r3, #2
 8009f8a:	d901      	bls.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e090      	b.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f90:	4b4b      	ldr	r3, [pc, #300]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d0f0      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 0302 	and.w	r3, r3, #2
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 8083 	beq.w	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009faa:	2300      	movs	r3, #0
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	4b44      	ldr	r3, [pc, #272]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb2:	4a43      	ldr	r2, [pc, #268]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8009fba:	4b41      	ldr	r3, [pc, #260]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fc2:	60fb      	str	r3, [r7, #12]
 8009fc4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009fc6:	4b3f      	ldr	r3, [pc, #252]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a3e      	ldr	r2, [pc, #248]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fd0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009fd2:	f7fb f9d7 	bl	8005384 <HAL_GetTick>
 8009fd6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009fd8:	e008      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009fda:	f7fb f9d3 	bl	8005384 <HAL_GetTick>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	2b02      	cmp	r3, #2
 8009fe6:	d901      	bls.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	e062      	b.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009fec:	4b35      	ldr	r3, [pc, #212]	; (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d0f0      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009ff8:	4b31      	ldr	r3, [pc, #196]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a000:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d02f      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a010:	693a      	ldr	r2, [r7, #16]
 800a012:	429a      	cmp	r2, r3
 800a014:	d028      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a016:	4b2a      	ldr	r3, [pc, #168]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a01a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a01e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a020:	4b29      	ldr	r3, [pc, #164]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a022:	2201      	movs	r2, #1
 800a024:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a026:	4b28      	ldr	r3, [pc, #160]	; (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a028:	2200      	movs	r2, #0
 800a02a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a02c:	4a24      	ldr	r2, [pc, #144]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a032:	4b23      	ldr	r3, [pc, #140]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a036:	f003 0301 	and.w	r3, r3, #1
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d114      	bne.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a03e:	f7fb f9a1 	bl	8005384 <HAL_GetTick>
 800a042:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a044:	e00a      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a046:	f7fb f99d 	bl	8005384 <HAL_GetTick>
 800a04a:	4602      	mov	r2, r0
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	f241 3288 	movw	r2, #5000	; 0x1388
 800a054:	4293      	cmp	r3, r2
 800a056:	d901      	bls.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a058:	2303      	movs	r3, #3
 800a05a:	e02a      	b.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a05c:	4b18      	ldr	r3, [pc, #96]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a05e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a060:	f003 0302 	and.w	r3, r3, #2
 800a064:	2b00      	cmp	r3, #0
 800a066:	d0ee      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a070:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a074:	d10d      	bne.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a076:	4b12      	ldr	r3, [pc, #72]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a08a:	490d      	ldr	r1, [pc, #52]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	608b      	str	r3, [r1, #8]
 800a090:	e005      	b.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a092:	4b0b      	ldr	r3, [pc, #44]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	4a0a      	ldr	r2, [pc, #40]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a098:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a09c:	6093      	str	r3, [r2, #8]
 800a09e:	4b08      	ldr	r3, [pc, #32]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a0a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0aa:	4905      	ldr	r1, [pc, #20]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	42470068 	.word	0x42470068
 800a0c0:	40023800 	.word	0x40023800
 800a0c4:	40007000 	.word	0x40007000
 800a0c8:	42470e40 	.word	0x42470e40

0800a0cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b087      	sub	sp, #28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d13e      	bne.n	800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800a0ea:	4b23      	ldr	r3, [pc, #140]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0f2:	60fb      	str	r3, [r7, #12]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d005      	beq.n	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d12f      	bne.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800a100:	4b1e      	ldr	r3, [pc, #120]	; (800a17c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a102:	617b      	str	r3, [r7, #20]
          break;
 800a104:	e02f      	b.n	800a166 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a106:	4b1c      	ldr	r3, [pc, #112]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a10e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a112:	d108      	bne.n	800a126 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a114:	4b18      	ldr	r3, [pc, #96]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a11c:	4a18      	ldr	r2, [pc, #96]	; (800a180 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a11e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a122:	613b      	str	r3, [r7, #16]
 800a124:	e007      	b.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a126:	4b14      	ldr	r3, [pc, #80]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a12e:	4a15      	ldr	r2, [pc, #84]	; (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800a130:	fbb2 f3f3 	udiv	r3, r2, r3
 800a134:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800a136:	4b10      	ldr	r3, [pc, #64]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a13c:	099b      	lsrs	r3, r3, #6
 800a13e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	fb02 f303 	mul.w	r3, r2, r3
 800a148:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800a14a:	4b0b      	ldr	r3, [pc, #44]	; (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a14c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a150:	0f1b      	lsrs	r3, r3, #28
 800a152:	f003 0307 	and.w	r3, r3, #7
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	fbb2 f3f3 	udiv	r3, r2, r3
 800a15c:	617b      	str	r3, [r7, #20]
          break;
 800a15e:	e002      	b.n	800a166 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800a160:	2300      	movs	r3, #0
 800a162:	617b      	str	r3, [r7, #20]
          break;
 800a164:	bf00      	nop
        }
      }
      break;
 800a166:	bf00      	nop
    }
  }
  return frequency;
 800a168:	697b      	ldr	r3, [r7, #20]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	371c      	adds	r7, #28
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	40023800 	.word	0x40023800
 800a17c:	00bb8000 	.word	0x00bb8000
 800a180:	007a1200 	.word	0x007a1200
 800a184:	00f42400 	.word	0x00f42400

0800a188 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e01c      	b.n	800a1d4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	795b      	ldrb	r3, [r3, #5]
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d105      	bne.n	800a1b0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f7f7 fe00 	bl	8001db0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f042 0204 	orr.w	r2, r2, #4
 800a1c4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	791b      	ldrb	r3, [r3, #4]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d101      	bne.n	800a1f6 <HAL_RNG_GenerateRandomNumber+0x1a>
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	e03d      	b.n	800a272 <HAL_RNG_GenerateRandomNumber+0x96>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	795b      	ldrb	r3, [r3, #5]
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b01      	cmp	r3, #1
 800a204:	d12c      	bne.n	800a260 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2202      	movs	r2, #2
 800a20a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a20c:	f7fb f8ba 	bl	8005384 <HAL_GetTick>
 800a210:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a212:	e011      	b.n	800a238 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a214:	f7fb f8b6 	bl	8005384 <HAL_GetTick>
 800a218:	4602      	mov	r2, r0
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	1ad3      	subs	r3, r2, r3
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d90a      	bls.n	800a238 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2201      	movs	r2, #1
 800a226:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2202      	movs	r2, #2
 800a22c:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	e01c      	b.n	800a272 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	2b01      	cmp	r3, #1
 800a244:	d1e6      	bne.n	800a214 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	689a      	ldr	r2, [r3, #8]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	68da      	ldr	r2, [r3, #12]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	715a      	strb	r2, [r3, #5]
 800a25e:	e004      	b.n	800a26a <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2204      	movs	r2, #4
 800a264:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	711a      	strb	r2, [r3, #4]

  return status;
 800a270:	7bfb      	ldrb	r3, [r7, #15]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b082      	sub	sp, #8
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	330c      	adds	r3, #12
 800a286:	4619      	mov	r1, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f7ff ffa7 	bl	800a1dc <HAL_RNG_GenerateRandomNumber>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d102      	bne.n	800a29a <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	e000      	b.n	800a29c <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 800a29a:	2300      	movs	r3, #0
  }
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d101      	bne.n	800a2b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e07b      	b.n	800a3ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d108      	bne.n	800a2d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2c6:	d009      	beq.n	800a2dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	61da      	str	r2, [r3, #28]
 800a2ce:	e005      	b.n	800a2dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d106      	bne.n	800a2fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f7f7 fd7c 	bl	8001df4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2202      	movs	r2, #2
 800a300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a312:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a324:	431a      	orrs	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a32e:	431a      	orrs	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	f003 0302 	and.w	r3, r3, #2
 800a338:	431a      	orrs	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	f003 0301 	and.w	r3, r3, #1
 800a342:	431a      	orrs	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a34c:	431a      	orrs	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	69db      	ldr	r3, [r3, #28]
 800a352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a356:	431a      	orrs	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6a1b      	ldr	r3, [r3, #32]
 800a35c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a360:	ea42 0103 	orr.w	r1, r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a368:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	430a      	orrs	r2, r1
 800a372:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	0c1b      	lsrs	r3, r3, #16
 800a37a:	f003 0104 	and.w	r1, r3, #4
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a382:	f003 0210 	and.w	r2, r3, #16
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	430a      	orrs	r2, r1
 800a38c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	69da      	ldr	r2, [r3, #28]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a39c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b088      	sub	sp, #32
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	60b9      	str	r1, [r7, #8]
 800a3c0:	603b      	str	r3, [r7, #0]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d101      	bne.n	800a3d8 <HAL_SPI_Transmit+0x22>
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	e126      	b.n	800a626 <HAL_SPI_Transmit+0x270>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3e0:	f7fa ffd0 	bl	8005384 <HAL_GetTick>
 800a3e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a3e6:	88fb      	ldrh	r3, [r7, #6]
 800a3e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d002      	beq.n	800a3fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a3fa:	e10b      	b.n	800a614 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d002      	beq.n	800a408 <HAL_SPI_Transmit+0x52>
 800a402:	88fb      	ldrh	r3, [r7, #6]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d102      	bne.n	800a40e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a40c:	e102      	b.n	800a614 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2203      	movs	r2, #3
 800a412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	68ba      	ldr	r2, [r7, #8]
 800a420:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	88fa      	ldrh	r2, [r7, #6]
 800a426:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	88fa      	ldrh	r2, [r7, #6]
 800a42c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a454:	d10f      	bne.n	800a476 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a464:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a474:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a480:	2b40      	cmp	r3, #64	; 0x40
 800a482:	d007      	beq.n	800a494 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a492:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a49c:	d14b      	bne.n	800a536 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d002      	beq.n	800a4ac <HAL_SPI_Transmit+0xf6>
 800a4a6:	8afb      	ldrh	r3, [r7, #22]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d13e      	bne.n	800a52a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b0:	881a      	ldrh	r2, [r3, #0]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4bc:	1c9a      	adds	r2, r3, #2
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a4d0:	e02b      	b.n	800a52a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	f003 0302 	and.w	r3, r3, #2
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d112      	bne.n	800a506 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e4:	881a      	ldrh	r2, [r3, #0]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f0:	1c9a      	adds	r2, r3, #2
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	86da      	strh	r2, [r3, #54]	; 0x36
 800a504:	e011      	b.n	800a52a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a506:	f7fa ff3d 	bl	8005384 <HAL_GetTick>
 800a50a:	4602      	mov	r2, r0
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	429a      	cmp	r2, r3
 800a514:	d803      	bhi.n	800a51e <HAL_SPI_Transmit+0x168>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a51c:	d102      	bne.n	800a524 <HAL_SPI_Transmit+0x16e>
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d102      	bne.n	800a52a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a524:	2303      	movs	r3, #3
 800a526:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a528:	e074      	b.n	800a614 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a52e:	b29b      	uxth	r3, r3
 800a530:	2b00      	cmp	r3, #0
 800a532:	d1ce      	bne.n	800a4d2 <HAL_SPI_Transmit+0x11c>
 800a534:	e04c      	b.n	800a5d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d002      	beq.n	800a544 <HAL_SPI_Transmit+0x18e>
 800a53e:	8afb      	ldrh	r3, [r7, #22]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d140      	bne.n	800a5c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	330c      	adds	r3, #12
 800a54e:	7812      	ldrb	r2, [r2, #0]
 800a550:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a556:	1c5a      	adds	r2, r3, #1
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a560:	b29b      	uxth	r3, r3
 800a562:	3b01      	subs	r3, #1
 800a564:	b29a      	uxth	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a56a:	e02c      	b.n	800a5c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	f003 0302 	and.w	r3, r3, #2
 800a576:	2b02      	cmp	r3, #2
 800a578:	d113      	bne.n	800a5a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	330c      	adds	r3, #12
 800a584:	7812      	ldrb	r2, [r2, #0]
 800a586:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a58c:	1c5a      	adds	r2, r3, #1
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a596:	b29b      	uxth	r3, r3
 800a598:	3b01      	subs	r3, #1
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	86da      	strh	r2, [r3, #54]	; 0x36
 800a5a0:	e011      	b.n	800a5c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5a2:	f7fa feef 	bl	8005384 <HAL_GetTick>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d803      	bhi.n	800a5ba <HAL_SPI_Transmit+0x204>
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5b8:	d102      	bne.n	800a5c0 <HAL_SPI_Transmit+0x20a>
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d102      	bne.n	800a5c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a5c4:	e026      	b.n	800a614 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1cd      	bne.n	800a56c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a5d0:	69ba      	ldr	r2, [r7, #24]
 800a5d2:	6839      	ldr	r1, [r7, #0]
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f000 f8b3 	bl	800a740 <SPI_EndRxTxTransaction>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d002      	beq.n	800a5e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2220      	movs	r2, #32
 800a5e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d10a      	bne.n	800a604 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	613b      	str	r3, [r7, #16]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	613b      	str	r3, [r7, #16]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	613b      	str	r3, [r7, #16]
 800a602:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d002      	beq.n	800a612 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	77fb      	strb	r3, [r7, #31]
 800a610:	e000      	b.n	800a614 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a612:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a624:	7ffb      	ldrb	r3, [r7, #31]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3720      	adds	r7, #32
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
	...

0800a630 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b088      	sub	sp, #32
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	603b      	str	r3, [r7, #0]
 800a63c:	4613      	mov	r3, r2
 800a63e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a640:	f7fa fea0 	bl	8005384 <HAL_GetTick>
 800a644:	4602      	mov	r2, r0
 800a646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a648:	1a9b      	subs	r3, r3, r2
 800a64a:	683a      	ldr	r2, [r7, #0]
 800a64c:	4413      	add	r3, r2
 800a64e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a650:	f7fa fe98 	bl	8005384 <HAL_GetTick>
 800a654:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a656:	4b39      	ldr	r3, [pc, #228]	; (800a73c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	015b      	lsls	r3, r3, #5
 800a65c:	0d1b      	lsrs	r3, r3, #20
 800a65e:	69fa      	ldr	r2, [r7, #28]
 800a660:	fb02 f303 	mul.w	r3, r2, r3
 800a664:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a666:	e054      	b.n	800a712 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a66e:	d050      	beq.n	800a712 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a670:	f7fa fe88 	bl	8005384 <HAL_GetTick>
 800a674:	4602      	mov	r2, r0
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	69fa      	ldr	r2, [r7, #28]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d902      	bls.n	800a686 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d13d      	bne.n	800a702 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	685a      	ldr	r2, [r3, #4]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a694:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a69e:	d111      	bne.n	800a6c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6a8:	d004      	beq.n	800a6b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6b2:	d107      	bne.n	800a6c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6cc:	d10f      	bne.n	800a6ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6dc:	601a      	str	r2, [r3, #0]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a6fe:	2303      	movs	r3, #3
 800a700:	e017      	b.n	800a732 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d101      	bne.n	800a70c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a708:	2300      	movs	r3, #0
 800a70a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	3b01      	subs	r3, #1
 800a710:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	689a      	ldr	r2, [r3, #8]
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	4013      	ands	r3, r2
 800a71c:	68ba      	ldr	r2, [r7, #8]
 800a71e:	429a      	cmp	r2, r3
 800a720:	bf0c      	ite	eq
 800a722:	2301      	moveq	r3, #1
 800a724:	2300      	movne	r3, #0
 800a726:	b2db      	uxtb	r3, r3
 800a728:	461a      	mov	r2, r3
 800a72a:	79fb      	ldrb	r3, [r7, #7]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d19b      	bne.n	800a668 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3720      	adds	r7, #32
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20000004 	.word	0x20000004

0800a740 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af02      	add	r7, sp, #8
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a74c:	4b1b      	ldr	r3, [pc, #108]	; (800a7bc <SPI_EndRxTxTransaction+0x7c>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a1b      	ldr	r2, [pc, #108]	; (800a7c0 <SPI_EndRxTxTransaction+0x80>)
 800a752:	fba2 2303 	umull	r2, r3, r2, r3
 800a756:	0d5b      	lsrs	r3, r3, #21
 800a758:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a75c:	fb02 f303 	mul.w	r3, r2, r3
 800a760:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a76a:	d112      	bne.n	800a792 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	2200      	movs	r2, #0
 800a774:	2180      	movs	r1, #128	; 0x80
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f7ff ff5a 	bl	800a630 <SPI_WaitFlagStateUntilTimeout>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d016      	beq.n	800a7b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a786:	f043 0220 	orr.w	r2, r3, #32
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a78e:	2303      	movs	r3, #3
 800a790:	e00f      	b.n	800a7b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00a      	beq.n	800a7ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	3b01      	subs	r3, #1
 800a79c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7a8:	2b80      	cmp	r3, #128	; 0x80
 800a7aa:	d0f2      	beq.n	800a792 <SPI_EndRxTxTransaction+0x52>
 800a7ac:	e000      	b.n	800a7b0 <SPI_EndRxTxTransaction+0x70>
        break;
 800a7ae:	bf00      	nop
  }

  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20000004 	.word	0x20000004
 800a7c0:	165e9f81 	.word	0x165e9f81

0800a7c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d101      	bne.n	800a7d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e041      	b.n	800a85a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d106      	bne.n	800a7f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7f7 fbe8 	bl	8001fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2202      	movs	r2, #2
 800a7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	3304      	adds	r3, #4
 800a800:	4619      	mov	r1, r3
 800a802:	4610      	mov	r0, r2
 800a804:	f000 fd68 	bl	800b2d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
	...

0800a864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a864:	b480      	push	{r7}
 800a866:	b085      	sub	sp, #20
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a872:	b2db      	uxtb	r3, r3
 800a874:	2b01      	cmp	r3, #1
 800a876:	d001      	beq.n	800a87c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	e04e      	b.n	800a91a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2202      	movs	r2, #2
 800a880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	68da      	ldr	r2, [r3, #12]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f042 0201 	orr.w	r2, r2, #1
 800a892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a23      	ldr	r2, [pc, #140]	; (800a928 <HAL_TIM_Base_Start_IT+0xc4>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d022      	beq.n	800a8e4 <HAL_TIM_Base_Start_IT+0x80>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8a6:	d01d      	beq.n	800a8e4 <HAL_TIM_Base_Start_IT+0x80>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a1f      	ldr	r2, [pc, #124]	; (800a92c <HAL_TIM_Base_Start_IT+0xc8>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d018      	beq.n	800a8e4 <HAL_TIM_Base_Start_IT+0x80>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a1e      	ldr	r2, [pc, #120]	; (800a930 <HAL_TIM_Base_Start_IT+0xcc>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d013      	beq.n	800a8e4 <HAL_TIM_Base_Start_IT+0x80>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a1c      	ldr	r2, [pc, #112]	; (800a934 <HAL_TIM_Base_Start_IT+0xd0>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d00e      	beq.n	800a8e4 <HAL_TIM_Base_Start_IT+0x80>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a1b      	ldr	r2, [pc, #108]	; (800a938 <HAL_TIM_Base_Start_IT+0xd4>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d009      	beq.n	800a8e4 <HAL_TIM_Base_Start_IT+0x80>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a19      	ldr	r2, [pc, #100]	; (800a93c <HAL_TIM_Base_Start_IT+0xd8>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d004      	beq.n	800a8e4 <HAL_TIM_Base_Start_IT+0x80>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a18      	ldr	r2, [pc, #96]	; (800a940 <HAL_TIM_Base_Start_IT+0xdc>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d111      	bne.n	800a908 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	f003 0307 	and.w	r3, r3, #7
 800a8ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2b06      	cmp	r3, #6
 800a8f4:	d010      	beq.n	800a918 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f042 0201 	orr.w	r2, r2, #1
 800a904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a906:	e007      	b.n	800a918 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f042 0201 	orr.w	r2, r2, #1
 800a916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3714      	adds	r7, #20
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	40010000 	.word	0x40010000
 800a92c:	40000400 	.word	0x40000400
 800a930:	40000800 	.word	0x40000800
 800a934:	40000c00 	.word	0x40000c00
 800a938:	40010400 	.word	0x40010400
 800a93c:	40014000 	.word	0x40014000
 800a940:	40001800 	.word	0x40001800

0800a944 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d109      	bne.n	800a968 <HAL_TIM_OC_Start_IT+0x24>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	bf14      	ite	ne
 800a960:	2301      	movne	r3, #1
 800a962:	2300      	moveq	r3, #0
 800a964:	b2db      	uxtb	r3, r3
 800a966:	e022      	b.n	800a9ae <HAL_TIM_OC_Start_IT+0x6a>
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	2b04      	cmp	r3, #4
 800a96c:	d109      	bne.n	800a982 <HAL_TIM_OC_Start_IT+0x3e>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b01      	cmp	r3, #1
 800a978:	bf14      	ite	ne
 800a97a:	2301      	movne	r3, #1
 800a97c:	2300      	moveq	r3, #0
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	e015      	b.n	800a9ae <HAL_TIM_OC_Start_IT+0x6a>
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	2b08      	cmp	r3, #8
 800a986:	d109      	bne.n	800a99c <HAL_TIM_OC_Start_IT+0x58>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b01      	cmp	r3, #1
 800a992:	bf14      	ite	ne
 800a994:	2301      	movne	r3, #1
 800a996:	2300      	moveq	r3, #0
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	e008      	b.n	800a9ae <HAL_TIM_OC_Start_IT+0x6a>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	bf14      	ite	ne
 800a9a8:	2301      	movne	r3, #1
 800a9aa:	2300      	moveq	r3, #0
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e0c2      	b.n	800ab3c <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d104      	bne.n	800a9c6 <HAL_TIM_OC_Start_IT+0x82>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9c4:	e013      	b.n	800a9ee <HAL_TIM_OC_Start_IT+0xaa>
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	2b04      	cmp	r3, #4
 800a9ca:	d104      	bne.n	800a9d6 <HAL_TIM_OC_Start_IT+0x92>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9d4:	e00b      	b.n	800a9ee <HAL_TIM_OC_Start_IT+0xaa>
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	2b08      	cmp	r3, #8
 800a9da:	d104      	bne.n	800a9e6 <HAL_TIM_OC_Start_IT+0xa2>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2202      	movs	r2, #2
 800a9e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9e4:	e003      	b.n	800a9ee <HAL_TIM_OC_Start_IT+0xaa>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2202      	movs	r2, #2
 800a9ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	2b0c      	cmp	r3, #12
 800a9f2:	d841      	bhi.n	800aa78 <HAL_TIM_OC_Start_IT+0x134>
 800a9f4:	a201      	add	r2, pc, #4	; (adr r2, 800a9fc <HAL_TIM_OC_Start_IT+0xb8>)
 800a9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fa:	bf00      	nop
 800a9fc:	0800aa31 	.word	0x0800aa31
 800aa00:	0800aa79 	.word	0x0800aa79
 800aa04:	0800aa79 	.word	0x0800aa79
 800aa08:	0800aa79 	.word	0x0800aa79
 800aa0c:	0800aa43 	.word	0x0800aa43
 800aa10:	0800aa79 	.word	0x0800aa79
 800aa14:	0800aa79 	.word	0x0800aa79
 800aa18:	0800aa79 	.word	0x0800aa79
 800aa1c:	0800aa55 	.word	0x0800aa55
 800aa20:	0800aa79 	.word	0x0800aa79
 800aa24:	0800aa79 	.word	0x0800aa79
 800aa28:	0800aa79 	.word	0x0800aa79
 800aa2c:	0800aa67 	.word	0x0800aa67
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	68da      	ldr	r2, [r3, #12]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f042 0202 	orr.w	r2, r2, #2
 800aa3e:	60da      	str	r2, [r3, #12]
      break;
 800aa40:	e01b      	b.n	800aa7a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68da      	ldr	r2, [r3, #12]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f042 0204 	orr.w	r2, r2, #4
 800aa50:	60da      	str	r2, [r3, #12]
      break;
 800aa52:	e012      	b.n	800aa7a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68da      	ldr	r2, [r3, #12]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0208 	orr.w	r2, r2, #8
 800aa62:	60da      	str	r2, [r3, #12]
      break;
 800aa64:	e009      	b.n	800aa7a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68da      	ldr	r2, [r3, #12]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f042 0210 	orr.w	r2, r2, #16
 800aa74:	60da      	str	r2, [r3, #12]
      break;
 800aa76:	e000      	b.n	800aa7a <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 800aa78:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 ff12 	bl	800b8ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a2d      	ldr	r2, [pc, #180]	; (800ab44 <HAL_TIM_OC_Start_IT+0x200>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d004      	beq.n	800aa9c <HAL_TIM_OC_Start_IT+0x158>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a2c      	ldr	r2, [pc, #176]	; (800ab48 <HAL_TIM_OC_Start_IT+0x204>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d101      	bne.n	800aaa0 <HAL_TIM_OC_Start_IT+0x15c>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e000      	b.n	800aaa2 <HAL_TIM_OC_Start_IT+0x15e>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d007      	beq.n	800aab6 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aab4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a22      	ldr	r2, [pc, #136]	; (800ab44 <HAL_TIM_OC_Start_IT+0x200>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d022      	beq.n	800ab06 <HAL_TIM_OC_Start_IT+0x1c2>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aac8:	d01d      	beq.n	800ab06 <HAL_TIM_OC_Start_IT+0x1c2>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a1f      	ldr	r2, [pc, #124]	; (800ab4c <HAL_TIM_OC_Start_IT+0x208>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d018      	beq.n	800ab06 <HAL_TIM_OC_Start_IT+0x1c2>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a1d      	ldr	r2, [pc, #116]	; (800ab50 <HAL_TIM_OC_Start_IT+0x20c>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d013      	beq.n	800ab06 <HAL_TIM_OC_Start_IT+0x1c2>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a1c      	ldr	r2, [pc, #112]	; (800ab54 <HAL_TIM_OC_Start_IT+0x210>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d00e      	beq.n	800ab06 <HAL_TIM_OC_Start_IT+0x1c2>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a16      	ldr	r2, [pc, #88]	; (800ab48 <HAL_TIM_OC_Start_IT+0x204>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d009      	beq.n	800ab06 <HAL_TIM_OC_Start_IT+0x1c2>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a18      	ldr	r2, [pc, #96]	; (800ab58 <HAL_TIM_OC_Start_IT+0x214>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d004      	beq.n	800ab06 <HAL_TIM_OC_Start_IT+0x1c2>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a16      	ldr	r2, [pc, #88]	; (800ab5c <HAL_TIM_OC_Start_IT+0x218>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d111      	bne.n	800ab2a <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	f003 0307 	and.w	r3, r3, #7
 800ab10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2b06      	cmp	r3, #6
 800ab16:	d010      	beq.n	800ab3a <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f042 0201 	orr.w	r2, r2, #1
 800ab26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab28:	e007      	b.n	800ab3a <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f042 0201 	orr.w	r2, r2, #1
 800ab38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	40010000 	.word	0x40010000
 800ab48:	40010400 	.word	0x40010400
 800ab4c:	40000400 	.word	0x40000400
 800ab50:	40000800 	.word	0x40000800
 800ab54:	40000c00 	.word	0x40000c00
 800ab58:	40014000 	.word	0x40014000
 800ab5c:	40001800 	.word	0x40001800

0800ab60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d101      	bne.n	800ab72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e041      	b.n	800abf6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d106      	bne.n	800ab8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f839 	bl	800abfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2202      	movs	r2, #2
 800ab90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	4610      	mov	r0, r2
 800aba0:	f000 fb9a 	bl	800b2d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2201      	movs	r2, #1
 800abd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abf4:	2300      	movs	r3, #0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800abfe:	b480      	push	{r7}
 800ac00:	b083      	sub	sp, #12
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ac06:	bf00      	nop
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr

0800ac12 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b086      	sub	sp, #24
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e097      	b.n	800ad56 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d106      	bne.n	800ac40 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7f7 f978 	bl	8001f30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2202      	movs	r2, #2
 800ac44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	6812      	ldr	r2, [r2, #0]
 800ac52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac56:	f023 0307 	bic.w	r3, r3, #7
 800ac5a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	3304      	adds	r3, #4
 800ac64:	4619      	mov	r1, r3
 800ac66:	4610      	mov	r0, r2
 800ac68:	f000 fb36 	bl	800b2d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	6a1b      	ldr	r3, [r3, #32]
 800ac82:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac94:	f023 0303 	bic.w	r3, r3, #3
 800ac98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	689a      	ldr	r2, [r3, #8]
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	699b      	ldr	r3, [r3, #24]
 800aca2:	021b      	lsls	r3, r3, #8
 800aca4:	4313      	orrs	r3, r2
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800acb2:	f023 030c 	bic.w	r3, r3, #12
 800acb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800acbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800acc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	68da      	ldr	r2, [r3, #12]
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	69db      	ldr	r3, [r3, #28]
 800accc:	021b      	lsls	r3, r3, #8
 800acce:	4313      	orrs	r3, r2
 800acd0:	693a      	ldr	r2, [r7, #16]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	011a      	lsls	r2, r3, #4
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	6a1b      	ldr	r3, [r3, #32]
 800ace0:	031b      	lsls	r3, r3, #12
 800ace2:	4313      	orrs	r3, r2
 800ace4:	693a      	ldr	r2, [r7, #16]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800acf0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800acf8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	685a      	ldr	r2, [r3, #4]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	695b      	ldr	r3, [r3, #20]
 800ad02:	011b      	lsls	r3, r3, #4
 800ad04:	4313      	orrs	r3, r2
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2201      	movs	r2, #1
 800ad48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3718      	adds	r7, #24
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b082      	sub	sp, #8
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	f003 0302 	and.w	r3, r3, #2
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	d122      	bne.n	800adba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	f003 0302 	and.w	r3, r3, #2
 800ad7e:	2b02      	cmp	r3, #2
 800ad80:	d11b      	bne.n	800adba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f06f 0202 	mvn.w	r2, #2
 800ad8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	f003 0303 	and.w	r3, r3, #3
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d003      	beq.n	800ada8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fa7b 	bl	800b29c <HAL_TIM_IC_CaptureCallback>
 800ada6:	e005      	b.n	800adb4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fa6d 	bl	800b288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fa7e 	bl	800b2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	f003 0304 	and.w	r3, r3, #4
 800adc4:	2b04      	cmp	r3, #4
 800adc6:	d122      	bne.n	800ae0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	f003 0304 	and.w	r3, r3, #4
 800add2:	2b04      	cmp	r3, #4
 800add4:	d11b      	bne.n	800ae0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f06f 0204 	mvn.w	r2, #4
 800adde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2202      	movs	r2, #2
 800ade4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	699b      	ldr	r3, [r3, #24]
 800adec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d003      	beq.n	800adfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fa51 	bl	800b29c <HAL_TIM_IC_CaptureCallback>
 800adfa:	e005      	b.n	800ae08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 fa43 	bl	800b288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 fa54 	bl	800b2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	f003 0308 	and.w	r3, r3, #8
 800ae18:	2b08      	cmp	r3, #8
 800ae1a:	d122      	bne.n	800ae62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	f003 0308 	and.w	r3, r3, #8
 800ae26:	2b08      	cmp	r3, #8
 800ae28:	d11b      	bne.n	800ae62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f06f 0208 	mvn.w	r2, #8
 800ae32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2204      	movs	r2, #4
 800ae38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	69db      	ldr	r3, [r3, #28]
 800ae40:	f003 0303 	and.w	r3, r3, #3
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d003      	beq.n	800ae50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 fa27 	bl	800b29c <HAL_TIM_IC_CaptureCallback>
 800ae4e:	e005      	b.n	800ae5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fa19 	bl	800b288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 fa2a 	bl	800b2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	691b      	ldr	r3, [r3, #16]
 800ae68:	f003 0310 	and.w	r3, r3, #16
 800ae6c:	2b10      	cmp	r3, #16
 800ae6e:	d122      	bne.n	800aeb6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	f003 0310 	and.w	r3, r3, #16
 800ae7a:	2b10      	cmp	r3, #16
 800ae7c:	d11b      	bne.n	800aeb6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f06f 0210 	mvn.w	r2, #16
 800ae86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2208      	movs	r2, #8
 800ae8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	69db      	ldr	r3, [r3, #28]
 800ae94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d003      	beq.n	800aea4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 f9fd 	bl	800b29c <HAL_TIM_IC_CaptureCallback>
 800aea2:	e005      	b.n	800aeb0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f9ef 	bl	800b288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 fa00 	bl	800b2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	f003 0301 	and.w	r3, r3, #1
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d10e      	bne.n	800aee2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	f003 0301 	and.w	r3, r3, #1
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d107      	bne.n	800aee2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f06f 0201 	mvn.w	r2, #1
 800aeda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 f9c9 	bl	800b274 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeec:	2b80      	cmp	r3, #128	; 0x80
 800aeee:	d10e      	bne.n	800af0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aefa:	2b80      	cmp	r3, #128	; 0x80
 800aefc:	d107      	bne.n	800af0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fd7b 	bl	800ba04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af18:	2b40      	cmp	r3, #64	; 0x40
 800af1a:	d10e      	bne.n	800af3a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af26:	2b40      	cmp	r3, #64	; 0x40
 800af28:	d107      	bne.n	800af3a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 f9c5 	bl	800b2c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	f003 0320 	and.w	r3, r3, #32
 800af44:	2b20      	cmp	r3, #32
 800af46:	d10e      	bne.n	800af66 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	f003 0320 	and.w	r3, r3, #32
 800af52:	2b20      	cmp	r3, #32
 800af54:	d107      	bne.n	800af66 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f06f 0220 	mvn.w	r2, #32
 800af5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fd45 	bl	800b9f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af66:	bf00      	nop
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
	...

0800af70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af82:	2b01      	cmp	r3, #1
 800af84:	d101      	bne.n	800af8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800af86:	2302      	movs	r3, #2
 800af88:	e0ac      	b.n	800b0e4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2201      	movs	r2, #1
 800af8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2b0c      	cmp	r3, #12
 800af96:	f200 809f 	bhi.w	800b0d8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800af9a:	a201      	add	r2, pc, #4	; (adr r2, 800afa0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800af9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa0:	0800afd5 	.word	0x0800afd5
 800afa4:	0800b0d9 	.word	0x0800b0d9
 800afa8:	0800b0d9 	.word	0x0800b0d9
 800afac:	0800b0d9 	.word	0x0800b0d9
 800afb0:	0800b015 	.word	0x0800b015
 800afb4:	0800b0d9 	.word	0x0800b0d9
 800afb8:	0800b0d9 	.word	0x0800b0d9
 800afbc:	0800b0d9 	.word	0x0800b0d9
 800afc0:	0800b057 	.word	0x0800b057
 800afc4:	0800b0d9 	.word	0x0800b0d9
 800afc8:	0800b0d9 	.word	0x0800b0d9
 800afcc:	0800b0d9 	.word	0x0800b0d9
 800afd0:	0800b097 	.word	0x0800b097
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	68b9      	ldr	r1, [r7, #8]
 800afda:	4618      	mov	r0, r3
 800afdc:	f000 fa1c 	bl	800b418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	699a      	ldr	r2, [r3, #24]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f042 0208 	orr.w	r2, r2, #8
 800afee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	699a      	ldr	r2, [r3, #24]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f022 0204 	bic.w	r2, r2, #4
 800affe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	6999      	ldr	r1, [r3, #24]
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	691a      	ldr	r2, [r3, #16]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	430a      	orrs	r2, r1
 800b010:	619a      	str	r2, [r3, #24]
      break;
 800b012:	e062      	b.n	800b0da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	68b9      	ldr	r1, [r7, #8]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 fa6c 	bl	800b4f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	699a      	ldr	r2, [r3, #24]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b02e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	699a      	ldr	r2, [r3, #24]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b03e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	6999      	ldr	r1, [r3, #24]
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	021a      	lsls	r2, r3, #8
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	430a      	orrs	r2, r1
 800b052:	619a      	str	r2, [r3, #24]
      break;
 800b054:	e041      	b.n	800b0da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68b9      	ldr	r1, [r7, #8]
 800b05c:	4618      	mov	r0, r3
 800b05e:	f000 fac1 	bl	800b5e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	69da      	ldr	r2, [r3, #28]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f042 0208 	orr.w	r2, r2, #8
 800b070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	69da      	ldr	r2, [r3, #28]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f022 0204 	bic.w	r2, r2, #4
 800b080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	69d9      	ldr	r1, [r3, #28]
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	691a      	ldr	r2, [r3, #16]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	430a      	orrs	r2, r1
 800b092:	61da      	str	r2, [r3, #28]
      break;
 800b094:	e021      	b.n	800b0da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	68b9      	ldr	r1, [r7, #8]
 800b09c:	4618      	mov	r0, r3
 800b09e:	f000 fb15 	bl	800b6cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	69da      	ldr	r2, [r3, #28]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	69da      	ldr	r2, [r3, #28]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	69d9      	ldr	r1, [r3, #28]
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	691b      	ldr	r3, [r3, #16]
 800b0cc:	021a      	lsls	r2, r3, #8
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	430a      	orrs	r2, r1
 800b0d4:	61da      	str	r2, [r3, #28]
      break;
 800b0d6:	e000      	b.n	800b0da <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800b0d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d101      	bne.n	800b104 <HAL_TIM_ConfigClockSource+0x18>
 800b100:	2302      	movs	r3, #2
 800b102:	e0b3      	b.n	800b26c <HAL_TIM_ConfigClockSource+0x180>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2202      	movs	r2, #2
 800b110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b122:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b12a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	68fa      	ldr	r2, [r7, #12]
 800b132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b13c:	d03e      	beq.n	800b1bc <HAL_TIM_ConfigClockSource+0xd0>
 800b13e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b142:	f200 8087 	bhi.w	800b254 <HAL_TIM_ConfigClockSource+0x168>
 800b146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b14a:	f000 8085 	beq.w	800b258 <HAL_TIM_ConfigClockSource+0x16c>
 800b14e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b152:	d87f      	bhi.n	800b254 <HAL_TIM_ConfigClockSource+0x168>
 800b154:	2b70      	cmp	r3, #112	; 0x70
 800b156:	d01a      	beq.n	800b18e <HAL_TIM_ConfigClockSource+0xa2>
 800b158:	2b70      	cmp	r3, #112	; 0x70
 800b15a:	d87b      	bhi.n	800b254 <HAL_TIM_ConfigClockSource+0x168>
 800b15c:	2b60      	cmp	r3, #96	; 0x60
 800b15e:	d050      	beq.n	800b202 <HAL_TIM_ConfigClockSource+0x116>
 800b160:	2b60      	cmp	r3, #96	; 0x60
 800b162:	d877      	bhi.n	800b254 <HAL_TIM_ConfigClockSource+0x168>
 800b164:	2b50      	cmp	r3, #80	; 0x50
 800b166:	d03c      	beq.n	800b1e2 <HAL_TIM_ConfigClockSource+0xf6>
 800b168:	2b50      	cmp	r3, #80	; 0x50
 800b16a:	d873      	bhi.n	800b254 <HAL_TIM_ConfigClockSource+0x168>
 800b16c:	2b40      	cmp	r3, #64	; 0x40
 800b16e:	d058      	beq.n	800b222 <HAL_TIM_ConfigClockSource+0x136>
 800b170:	2b40      	cmp	r3, #64	; 0x40
 800b172:	d86f      	bhi.n	800b254 <HAL_TIM_ConfigClockSource+0x168>
 800b174:	2b30      	cmp	r3, #48	; 0x30
 800b176:	d064      	beq.n	800b242 <HAL_TIM_ConfigClockSource+0x156>
 800b178:	2b30      	cmp	r3, #48	; 0x30
 800b17a:	d86b      	bhi.n	800b254 <HAL_TIM_ConfigClockSource+0x168>
 800b17c:	2b20      	cmp	r3, #32
 800b17e:	d060      	beq.n	800b242 <HAL_TIM_ConfigClockSource+0x156>
 800b180:	2b20      	cmp	r3, #32
 800b182:	d867      	bhi.n	800b254 <HAL_TIM_ConfigClockSource+0x168>
 800b184:	2b00      	cmp	r3, #0
 800b186:	d05c      	beq.n	800b242 <HAL_TIM_ConfigClockSource+0x156>
 800b188:	2b10      	cmp	r3, #16
 800b18a:	d05a      	beq.n	800b242 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b18c:	e062      	b.n	800b254 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6818      	ldr	r0, [r3, #0]
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	6899      	ldr	r1, [r3, #8]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	685a      	ldr	r2, [r3, #4]
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	f000 fb65 	bl	800b86c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b1b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68fa      	ldr	r2, [r7, #12]
 800b1b8:	609a      	str	r2, [r3, #8]
      break;
 800b1ba:	e04e      	b.n	800b25a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6818      	ldr	r0, [r3, #0]
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	6899      	ldr	r1, [r3, #8]
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	685a      	ldr	r2, [r3, #4]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	f000 fb4e 	bl	800b86c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	689a      	ldr	r2, [r3, #8]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1de:	609a      	str	r2, [r3, #8]
      break;
 800b1e0:	e03b      	b.n	800b25a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6818      	ldr	r0, [r3, #0]
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	6859      	ldr	r1, [r3, #4]
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	f000 fac2 	bl	800b778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2150      	movs	r1, #80	; 0x50
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f000 fb1b 	bl	800b836 <TIM_ITRx_SetConfig>
      break;
 800b200:	e02b      	b.n	800b25a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6818      	ldr	r0, [r3, #0]
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	6859      	ldr	r1, [r3, #4]
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	461a      	mov	r2, r3
 800b210:	f000 fae1 	bl	800b7d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2160      	movs	r1, #96	; 0x60
 800b21a:	4618      	mov	r0, r3
 800b21c:	f000 fb0b 	bl	800b836 <TIM_ITRx_SetConfig>
      break;
 800b220:	e01b      	b.n	800b25a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6818      	ldr	r0, [r3, #0]
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	6859      	ldr	r1, [r3, #4]
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	461a      	mov	r2, r3
 800b230:	f000 faa2 	bl	800b778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2140      	movs	r1, #64	; 0x40
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 fafb 	bl	800b836 <TIM_ITRx_SetConfig>
      break;
 800b240:	e00b      	b.n	800b25a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4619      	mov	r1, r3
 800b24c:	4610      	mov	r0, r2
 800b24e:	f000 faf2 	bl	800b836 <TIM_ITRx_SetConfig>
        break;
 800b252:	e002      	b.n	800b25a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b254:	bf00      	nop
 800b256:	e000      	b.n	800b25a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b258:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2201      	movs	r2, #1
 800b25e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3710      	adds	r7, #16
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b27c:	bf00      	nop
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a40      	ldr	r2, [pc, #256]	; (800b3ec <TIM_Base_SetConfig+0x114>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d013      	beq.n	800b318 <TIM_Base_SetConfig+0x40>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2f6:	d00f      	beq.n	800b318 <TIM_Base_SetConfig+0x40>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a3d      	ldr	r2, [pc, #244]	; (800b3f0 <TIM_Base_SetConfig+0x118>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d00b      	beq.n	800b318 <TIM_Base_SetConfig+0x40>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4a3c      	ldr	r2, [pc, #240]	; (800b3f4 <TIM_Base_SetConfig+0x11c>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d007      	beq.n	800b318 <TIM_Base_SetConfig+0x40>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4a3b      	ldr	r2, [pc, #236]	; (800b3f8 <TIM_Base_SetConfig+0x120>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d003      	beq.n	800b318 <TIM_Base_SetConfig+0x40>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4a3a      	ldr	r2, [pc, #232]	; (800b3fc <TIM_Base_SetConfig+0x124>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d108      	bne.n	800b32a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b31e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	4313      	orrs	r3, r2
 800b328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a2f      	ldr	r2, [pc, #188]	; (800b3ec <TIM_Base_SetConfig+0x114>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d02b      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b338:	d027      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a2c      	ldr	r2, [pc, #176]	; (800b3f0 <TIM_Base_SetConfig+0x118>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d023      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a2b      	ldr	r2, [pc, #172]	; (800b3f4 <TIM_Base_SetConfig+0x11c>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d01f      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a2a      	ldr	r2, [pc, #168]	; (800b3f8 <TIM_Base_SetConfig+0x120>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d01b      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a29      	ldr	r2, [pc, #164]	; (800b3fc <TIM_Base_SetConfig+0x124>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d017      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4a28      	ldr	r2, [pc, #160]	; (800b400 <TIM_Base_SetConfig+0x128>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d013      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a27      	ldr	r2, [pc, #156]	; (800b404 <TIM_Base_SetConfig+0x12c>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d00f      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4a26      	ldr	r2, [pc, #152]	; (800b408 <TIM_Base_SetConfig+0x130>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d00b      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4a25      	ldr	r2, [pc, #148]	; (800b40c <TIM_Base_SetConfig+0x134>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d007      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4a24      	ldr	r2, [pc, #144]	; (800b410 <TIM_Base_SetConfig+0x138>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d003      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4a23      	ldr	r2, [pc, #140]	; (800b414 <TIM_Base_SetConfig+0x13c>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d108      	bne.n	800b39c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	68fa      	ldr	r2, [r7, #12]
 800b398:	4313      	orrs	r3, r2
 800b39a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	695b      	ldr	r3, [r3, #20]
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	689a      	ldr	r2, [r3, #8]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4a0a      	ldr	r2, [pc, #40]	; (800b3ec <TIM_Base_SetConfig+0x114>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d003      	beq.n	800b3d0 <TIM_Base_SetConfig+0xf8>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a0c      	ldr	r2, [pc, #48]	; (800b3fc <TIM_Base_SetConfig+0x124>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d103      	bne.n	800b3d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	691a      	ldr	r2, [r3, #16]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	615a      	str	r2, [r3, #20]
}
 800b3de:	bf00      	nop
 800b3e0:	3714      	adds	r7, #20
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	40010000 	.word	0x40010000
 800b3f0:	40000400 	.word	0x40000400
 800b3f4:	40000800 	.word	0x40000800
 800b3f8:	40000c00 	.word	0x40000c00
 800b3fc:	40010400 	.word	0x40010400
 800b400:	40014000 	.word	0x40014000
 800b404:	40014400 	.word	0x40014400
 800b408:	40014800 	.word	0x40014800
 800b40c:	40001800 	.word	0x40001800
 800b410:	40001c00 	.word	0x40001c00
 800b414:	40002000 	.word	0x40002000

0800b418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b418:	b480      	push	{r7}
 800b41a:	b087      	sub	sp, #28
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a1b      	ldr	r3, [r3, #32]
 800b426:	f023 0201 	bic.w	r2, r3, #1
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a1b      	ldr	r3, [r3, #32]
 800b432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	699b      	ldr	r3, [r3, #24]
 800b43e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f023 0303 	bic.w	r3, r3, #3
 800b44e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	4313      	orrs	r3, r2
 800b458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	f023 0302 	bic.w	r3, r3, #2
 800b460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	4313      	orrs	r3, r2
 800b46a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a20      	ldr	r2, [pc, #128]	; (800b4f0 <TIM_OC1_SetConfig+0xd8>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d003      	beq.n	800b47c <TIM_OC1_SetConfig+0x64>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a1f      	ldr	r2, [pc, #124]	; (800b4f4 <TIM_OC1_SetConfig+0xdc>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d10c      	bne.n	800b496 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	f023 0308 	bic.w	r3, r3, #8
 800b482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	697a      	ldr	r2, [r7, #20]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	f023 0304 	bic.w	r3, r3, #4
 800b494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a15      	ldr	r2, [pc, #84]	; (800b4f0 <TIM_OC1_SetConfig+0xd8>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d003      	beq.n	800b4a6 <TIM_OC1_SetConfig+0x8e>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a14      	ldr	r2, [pc, #80]	; (800b4f4 <TIM_OC1_SetConfig+0xdc>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d111      	bne.n	800b4ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	693a      	ldr	r2, [r7, #16]
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	699b      	ldr	r3, [r3, #24]
 800b4c4:	693a      	ldr	r2, [r7, #16]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	693a      	ldr	r2, [r7, #16]
 800b4ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	685a      	ldr	r2, [r3, #4]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	697a      	ldr	r2, [r7, #20]
 800b4e2:	621a      	str	r2, [r3, #32]
}
 800b4e4:	bf00      	nop
 800b4e6:	371c      	adds	r7, #28
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	40010000 	.word	0x40010000
 800b4f4:	40010400 	.word	0x40010400

0800b4f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b087      	sub	sp, #28
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a1b      	ldr	r3, [r3, #32]
 800b506:	f023 0210 	bic.w	r2, r3, #16
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a1b      	ldr	r3, [r3, #32]
 800b512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	699b      	ldr	r3, [r3, #24]
 800b51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b52e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	021b      	lsls	r3, r3, #8
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	4313      	orrs	r3, r2
 800b53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	f023 0320 	bic.w	r3, r3, #32
 800b542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	011b      	lsls	r3, r3, #4
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a22      	ldr	r2, [pc, #136]	; (800b5dc <TIM_OC2_SetConfig+0xe4>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d003      	beq.n	800b560 <TIM_OC2_SetConfig+0x68>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a21      	ldr	r2, [pc, #132]	; (800b5e0 <TIM_OC2_SetConfig+0xe8>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d10d      	bne.n	800b57c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	011b      	lsls	r3, r3, #4
 800b56e:	697a      	ldr	r2, [r7, #20]
 800b570:	4313      	orrs	r3, r2
 800b572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b57a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a17      	ldr	r2, [pc, #92]	; (800b5dc <TIM_OC2_SetConfig+0xe4>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d003      	beq.n	800b58c <TIM_OC2_SetConfig+0x94>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4a16      	ldr	r2, [pc, #88]	; (800b5e0 <TIM_OC2_SetConfig+0xe8>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d113      	bne.n	800b5b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b59a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	695b      	ldr	r3, [r3, #20]
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	699b      	ldr	r3, [r3, #24]
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	693a      	ldr	r2, [r7, #16]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	693a      	ldr	r2, [r7, #16]
 800b5b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	685a      	ldr	r2, [r3, #4]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	697a      	ldr	r2, [r7, #20]
 800b5cc:	621a      	str	r2, [r3, #32]
}
 800b5ce:	bf00      	nop
 800b5d0:	371c      	adds	r7, #28
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	40010000 	.word	0x40010000
 800b5e0:	40010400 	.word	0x40010400

0800b5e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b087      	sub	sp, #28
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a1b      	ldr	r3, [r3, #32]
 800b5f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a1b      	ldr	r3, [r3, #32]
 800b5fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	69db      	ldr	r3, [r3, #28]
 800b60a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f023 0303 	bic.w	r3, r3, #3
 800b61a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	4313      	orrs	r3, r2
 800b624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b62c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	021b      	lsls	r3, r3, #8
 800b634:	697a      	ldr	r2, [r7, #20]
 800b636:	4313      	orrs	r3, r2
 800b638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a21      	ldr	r2, [pc, #132]	; (800b6c4 <TIM_OC3_SetConfig+0xe0>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d003      	beq.n	800b64a <TIM_OC3_SetConfig+0x66>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a20      	ldr	r2, [pc, #128]	; (800b6c8 <TIM_OC3_SetConfig+0xe4>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d10d      	bne.n	800b666 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	021b      	lsls	r3, r3, #8
 800b658:	697a      	ldr	r2, [r7, #20]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a16      	ldr	r2, [pc, #88]	; (800b6c4 <TIM_OC3_SetConfig+0xe0>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d003      	beq.n	800b676 <TIM_OC3_SetConfig+0x92>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a15      	ldr	r2, [pc, #84]	; (800b6c8 <TIM_OC3_SetConfig+0xe4>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d113      	bne.n	800b69e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b67c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	695b      	ldr	r3, [r3, #20]
 800b68a:	011b      	lsls	r3, r3, #4
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	4313      	orrs	r3, r2
 800b690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	699b      	ldr	r3, [r3, #24]
 800b696:	011b      	lsls	r3, r3, #4
 800b698:	693a      	ldr	r2, [r7, #16]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	685a      	ldr	r2, [r3, #4]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	697a      	ldr	r2, [r7, #20]
 800b6b6:	621a      	str	r2, [r3, #32]
}
 800b6b8:	bf00      	nop
 800b6ba:	371c      	adds	r7, #28
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr
 800b6c4:	40010000 	.word	0x40010000
 800b6c8:	40010400 	.word	0x40010400

0800b6cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b087      	sub	sp, #28
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6a1b      	ldr	r3, [r3, #32]
 800b6da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6a1b      	ldr	r3, [r3, #32]
 800b6e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	69db      	ldr	r3, [r3, #28]
 800b6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	021b      	lsls	r3, r3, #8
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	031b      	lsls	r3, r3, #12
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	4313      	orrs	r3, r2
 800b722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4a12      	ldr	r2, [pc, #72]	; (800b770 <TIM_OC4_SetConfig+0xa4>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d003      	beq.n	800b734 <TIM_OC4_SetConfig+0x68>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a11      	ldr	r2, [pc, #68]	; (800b774 <TIM_OC4_SetConfig+0xa8>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d109      	bne.n	800b748 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b73a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	695b      	ldr	r3, [r3, #20]
 800b740:	019b      	lsls	r3, r3, #6
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	4313      	orrs	r3, r2
 800b746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	697a      	ldr	r2, [r7, #20]
 800b74c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	685a      	ldr	r2, [r3, #4]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	693a      	ldr	r2, [r7, #16]
 800b760:	621a      	str	r2, [r3, #32]
}
 800b762:	bf00      	nop
 800b764:	371c      	adds	r7, #28
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	40010000 	.word	0x40010000
 800b774:	40010400 	.word	0x40010400

0800b778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b778:	b480      	push	{r7}
 800b77a:	b087      	sub	sp, #28
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6a1b      	ldr	r3, [r3, #32]
 800b788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	f023 0201 	bic.w	r2, r3, #1
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	011b      	lsls	r3, r3, #4
 800b7a8:	693a      	ldr	r2, [r7, #16]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	f023 030a 	bic.w	r3, r3, #10
 800b7b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b7b6:	697a      	ldr	r2, [r7, #20]
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	693a      	ldr	r2, [r7, #16]
 800b7c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	621a      	str	r2, [r3, #32]
}
 800b7ca:	bf00      	nop
 800b7cc:	371c      	adds	r7, #28
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b087      	sub	sp, #28
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	60f8      	str	r0, [r7, #12]
 800b7de:	60b9      	str	r1, [r7, #8]
 800b7e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6a1b      	ldr	r3, [r3, #32]
 800b7e6:	f023 0210 	bic.w	r2, r3, #16
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6a1b      	ldr	r3, [r3, #32]
 800b7f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b800:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	031b      	lsls	r3, r3, #12
 800b806:	697a      	ldr	r2, [r7, #20]
 800b808:	4313      	orrs	r3, r2
 800b80a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b812:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	011b      	lsls	r3, r3, #4
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	4313      	orrs	r3, r2
 800b81c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	697a      	ldr	r2, [r7, #20]
 800b822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	693a      	ldr	r2, [r7, #16]
 800b828:	621a      	str	r2, [r3, #32]
}
 800b82a:	bf00      	nop
 800b82c:	371c      	adds	r7, #28
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr

0800b836 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b836:	b480      	push	{r7}
 800b838:	b085      	sub	sp, #20
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
 800b83e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b84c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	4313      	orrs	r3, r2
 800b854:	f043 0307 	orr.w	r3, r3, #7
 800b858:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	609a      	str	r2, [r3, #8]
}
 800b860:	bf00      	nop
 800b862:	3714      	adds	r7, #20
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b087      	sub	sp, #28
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
 800b878:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b886:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	021a      	lsls	r2, r3, #8
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	431a      	orrs	r2, r3
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	4313      	orrs	r3, r2
 800b894:	697a      	ldr	r2, [r7, #20]
 800b896:	4313      	orrs	r3, r2
 800b898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	697a      	ldr	r2, [r7, #20]
 800b89e:	609a      	str	r2, [r3, #8]
}
 800b8a0:	bf00      	nop
 800b8a2:	371c      	adds	r7, #28
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b087      	sub	sp, #28
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	f003 031f 	and.w	r3, r3, #31
 800b8be:	2201      	movs	r2, #1
 800b8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6a1a      	ldr	r2, [r3, #32]
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	43db      	mvns	r3, r3
 800b8ce:	401a      	ands	r2, r3
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6a1a      	ldr	r2, [r3, #32]
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	f003 031f 	and.w	r3, r3, #31
 800b8de:	6879      	ldr	r1, [r7, #4]
 800b8e0:	fa01 f303 	lsl.w	r3, r1, r3
 800b8e4:	431a      	orrs	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	621a      	str	r2, [r3, #32]
}
 800b8ea:	bf00      	nop
 800b8ec:	371c      	adds	r7, #28
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr
	...

0800b8f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d101      	bne.n	800b910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b90c:	2302      	movs	r3, #2
 800b90e:	e05a      	b.n	800b9c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2202      	movs	r2, #2
 800b91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	4313      	orrs	r3, r2
 800b940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4a21      	ldr	r2, [pc, #132]	; (800b9d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d022      	beq.n	800b99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b95c:	d01d      	beq.n	800b99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a1d      	ldr	r2, [pc, #116]	; (800b9d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d018      	beq.n	800b99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a1b      	ldr	r2, [pc, #108]	; (800b9dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d013      	beq.n	800b99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a1a      	ldr	r2, [pc, #104]	; (800b9e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d00e      	beq.n	800b99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a18      	ldr	r2, [pc, #96]	; (800b9e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d009      	beq.n	800b99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a17      	ldr	r2, [pc, #92]	; (800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d004      	beq.n	800b99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a15      	ldr	r2, [pc, #84]	; (800b9ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d10c      	bne.n	800b9b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3714      	adds	r7, #20
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	40010000 	.word	0x40010000
 800b9d8:	40000400 	.word	0x40000400
 800b9dc:	40000800 	.word	0x40000800
 800b9e0:	40000c00 	.word	0x40000c00
 800b9e4:	40010400 	.word	0x40010400
 800b9e8:	40014000 	.word	0x40014000
 800b9ec:	40001800 	.word	0x40001800

0800b9f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b9f8:	bf00      	nop
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba0c:	bf00      	nop
 800ba0e:	370c      	adds	r7, #12
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba18:	b084      	sub	sp, #16
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b084      	sub	sp, #16
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
 800ba22:	f107 001c 	add.w	r0, r7, #28
 800ba26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d122      	bne.n	800ba76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ba44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ba58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d105      	bne.n	800ba6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 f94a 	bl	800bd04 <USB_CoreReset>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]
 800ba74:	e01a      	b.n	800baac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f93e 	bl	800bd04 <USB_CoreReset>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ba8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d106      	bne.n	800baa0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	639a      	str	r2, [r3, #56]	; 0x38
 800ba9e:	e005      	b.n	800baac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800baac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d10b      	bne.n	800baca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	f043 0206 	orr.w	r2, r3, #6
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	f043 0220 	orr.w	r2, r3, #32
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800baca:	7bfb      	ldrb	r3, [r7, #15]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3710      	adds	r7, #16
 800bad0:	46bd      	mov	sp, r7
 800bad2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bad6:	b004      	add	sp, #16
 800bad8:	4770      	bx	lr

0800bada <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bada:	b480      	push	{r7}
 800badc:	b083      	sub	sp, #12
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	f043 0201 	orr.w	r2, r3, #1
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800baee:	2300      	movs	r3, #0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	f023 0201 	bic.w	r2, r3, #1
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b082      	sub	sp, #8
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
 800bb26:	460b      	mov	r3, r1
 800bb28:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bb36:	78fb      	ldrb	r3, [r7, #3]
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d106      	bne.n	800bb4a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	60da      	str	r2, [r3, #12]
 800bb48:	e00b      	b.n	800bb62 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800bb4a:	78fb      	ldrb	r3, [r7, #3]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d106      	bne.n	800bb5e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	60da      	str	r2, [r3, #12]
 800bb5c:	e001      	b.n	800bb62 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e003      	b.n	800bb6a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800bb62:	2032      	movs	r0, #50	; 0x32
 800bb64:	f7f9 fc1a 	bl	800539c <HAL_Delay>

  return HAL_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3708      	adds	r7, #8
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
	...

0800bb74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b085      	sub	sp, #20
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	019b      	lsls	r3, r3, #6
 800bb86:	f043 0220 	orr.w	r2, r3, #32
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	3301      	adds	r3, #1
 800bb92:	60fb      	str	r3, [r7, #12]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	4a09      	ldr	r2, [pc, #36]	; (800bbbc <USB_FlushTxFifo+0x48>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d901      	bls.n	800bba0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bb9c:	2303      	movs	r3, #3
 800bb9e:	e006      	b.n	800bbae <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	691b      	ldr	r3, [r3, #16]
 800bba4:	f003 0320 	and.w	r3, r3, #32
 800bba8:	2b20      	cmp	r3, #32
 800bbaa:	d0f0      	beq.n	800bb8e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3714      	adds	r7, #20
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop
 800bbbc:	00030d40 	.word	0x00030d40

0800bbc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2210      	movs	r2, #16
 800bbd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	60fb      	str	r3, [r7, #12]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	4a09      	ldr	r2, [pc, #36]	; (800bc00 <USB_FlushRxFifo+0x40>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d901      	bls.n	800bbe4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	e006      	b.n	800bbf2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	f003 0310 	and.w	r3, r3, #16
 800bbec:	2b10      	cmp	r3, #16
 800bbee:	d0f0      	beq.n	800bbd2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3714      	adds	r7, #20
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	00030d40 	.word	0x00030d40

0800bc04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b089      	sub	sp, #36	; 0x24
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	4611      	mov	r1, r2
 800bc10:	461a      	mov	r2, r3
 800bc12:	460b      	mov	r3, r1
 800bc14:	71fb      	strb	r3, [r7, #7]
 800bc16:	4613      	mov	r3, r2
 800bc18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800bc22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d11a      	bne.n	800bc60 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bc2a:	88bb      	ldrh	r3, [r7, #4]
 800bc2c:	3303      	adds	r3, #3
 800bc2e:	089b      	lsrs	r3, r3, #2
 800bc30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bc32:	2300      	movs	r3, #0
 800bc34:	61bb      	str	r3, [r7, #24]
 800bc36:	e00f      	b.n	800bc58 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bc38:	79fb      	ldrb	r3, [r7, #7]
 800bc3a:	031a      	lsls	r2, r3, #12
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	4413      	add	r3, r2
 800bc40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc44:	461a      	mov	r2, r3
 800bc46:	69fb      	ldr	r3, [r7, #28]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	3301      	adds	r3, #1
 800bc56:	61bb      	str	r3, [r7, #24]
 800bc58:	69ba      	ldr	r2, [r7, #24]
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d3eb      	bcc.n	800bc38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3724      	adds	r7, #36	; 0x24
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr

0800bc6e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bc6e:	b480      	push	{r7}
 800bc70:	b089      	sub	sp, #36	; 0x24
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	60f8      	str	r0, [r7, #12]
 800bc76:	60b9      	str	r1, [r7, #8]
 800bc78:	4613      	mov	r3, r2
 800bc7a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800bc84:	88fb      	ldrh	r3, [r7, #6]
 800bc86:	3303      	adds	r3, #3
 800bc88:	089b      	lsrs	r3, r3, #2
 800bc8a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	61bb      	str	r3, [r7, #24]
 800bc90:	e00b      	b.n	800bcaa <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	69fb      	ldr	r3, [r7, #28]
 800bc9c:	601a      	str	r2, [r3, #0]
    pDest++;
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	3304      	adds	r3, #4
 800bca2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	3301      	adds	r3, #1
 800bca8:	61bb      	str	r3, [r7, #24]
 800bcaa:	69ba      	ldr	r2, [r7, #24]
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d3ef      	bcc.n	800bc92 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800bcb2:	69fb      	ldr	r3, [r7, #28]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3724      	adds	r7, #36	; 0x24
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	695b      	ldr	r3, [r3, #20]
 800bccc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	699b      	ldr	r3, [r3, #24]
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3714      	adds	r7, #20
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr

0800bce6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bce6:	b480      	push	{r7}
 800bce8:	b083      	sub	sp, #12
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	f003 0301 	and.w	r3, r3, #1
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr
	...

0800bd04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	3301      	adds	r3, #1
 800bd14:	60fb      	str	r3, [r7, #12]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	4a13      	ldr	r2, [pc, #76]	; (800bd68 <USB_CoreReset+0x64>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d901      	bls.n	800bd22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bd1e:	2303      	movs	r3, #3
 800bd20:	e01b      	b.n	800bd5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	daf2      	bge.n	800bd10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	f043 0201 	orr.w	r2, r3, #1
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	60fb      	str	r3, [r7, #12]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	4a09      	ldr	r2, [pc, #36]	; (800bd68 <USB_CoreReset+0x64>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d901      	bls.n	800bd4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bd48:	2303      	movs	r3, #3
 800bd4a:	e006      	b.n	800bd5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	f003 0301 	and.w	r3, r3, #1
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d0f0      	beq.n	800bd3a <USB_CoreReset+0x36>

  return HAL_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3714      	adds	r7, #20
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop
 800bd68:	00030d40 	.word	0x00030d40

0800bd6c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd6c:	b084      	sub	sp, #16
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b084      	sub	sp, #16
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
 800bd76:	f107 001c 	add.w	r0, r7, #28
 800bd7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd88:	461a      	mov	r2, r3
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd9e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdaa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d018      	beq.n	800bdf0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800bdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d10a      	bne.n	800bdda <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bdd2:	f043 0304 	orr.w	r3, r3, #4
 800bdd6:	6013      	str	r3, [r2, #0]
 800bdd8:	e014      	b.n	800be04 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	68ba      	ldr	r2, [r7, #8]
 800bde4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bde8:	f023 0304 	bic.w	r3, r3, #4
 800bdec:	6013      	str	r3, [r2, #0]
 800bdee:	e009      	b.n	800be04 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	68ba      	ldr	r2, [r7, #8]
 800bdfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bdfe:	f023 0304 	bic.w	r3, r3, #4
 800be02:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800be04:	2110      	movs	r1, #16
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f7ff feb4 	bl	800bb74 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f7ff fed7 	bl	800bbc0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800be12:	2300      	movs	r3, #0
 800be14:	60fb      	str	r3, [r7, #12]
 800be16:	e015      	b.n	800be44 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	015a      	lsls	r2, r3, #5
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	4413      	add	r3, r2
 800be20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be24:	461a      	mov	r2, r3
 800be26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be2a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	015a      	lsls	r2, r3, #5
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	4413      	add	r3, r2
 800be34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be38:	461a      	mov	r2, r3
 800be3a:	2300      	movs	r3, #0
 800be3c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	3301      	adds	r3, #1
 800be42:	60fb      	str	r3, [r7, #12]
 800be44:	6a3b      	ldr	r3, [r7, #32]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d3e5      	bcc.n	800be18 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800be4c:	2101      	movs	r1, #1
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 f8ac 	bl	800bfac <USB_DriveVbus>

  HAL_Delay(200U);
 800be54:	20c8      	movs	r0, #200	; 0xc8
 800be56:	f7f9 faa1 	bl	800539c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2200      	movs	r2, #0
 800be5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be66:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be70:	2b00      	cmp	r3, #0
 800be72:	d00b      	beq.n	800be8c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be7a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4a14      	ldr	r2, [pc, #80]	; (800bed0 <USB_HostInit+0x164>)
 800be80:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4a13      	ldr	r2, [pc, #76]	; (800bed4 <USB_HostInit+0x168>)
 800be86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800be8a:	e009      	b.n	800bea0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2280      	movs	r2, #128	; 0x80
 800be90:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4a10      	ldr	r2, [pc, #64]	; (800bed8 <USB_HostInit+0x16c>)
 800be96:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4a10      	ldr	r2, [pc, #64]	; (800bedc <USB_HostInit+0x170>)
 800be9c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d105      	bne.n	800beb2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	f043 0210 	orr.w	r2, r3, #16
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	699a      	ldr	r2, [r3, #24]
 800beb6:	4b0a      	ldr	r3, [pc, #40]	; (800bee0 <USB_HostInit+0x174>)
 800beb8:	4313      	orrs	r3, r2
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800beca:	b004      	add	sp, #16
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop
 800bed0:	01000200 	.word	0x01000200
 800bed4:	00e00300 	.word	0x00e00300
 800bed8:	00600080 	.word	0x00600080
 800bedc:	004000e0 	.word	0x004000e0
 800bee0:	a3200008 	.word	0xa3200008

0800bee4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	460b      	mov	r3, r1
 800beee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf02:	f023 0303 	bic.w	r3, r3, #3
 800bf06:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	78fb      	ldrb	r3, [r7, #3]
 800bf12:	f003 0303 	and.w	r3, r3, #3
 800bf16:	68f9      	ldr	r1, [r7, #12]
 800bf18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800bf20:	78fb      	ldrb	r3, [r7, #3]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d107      	bne.n	800bf36 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bf32:	6053      	str	r3, [r2, #4]
 800bf34:	e009      	b.n	800bf4a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800bf36:	78fb      	ldrb	r3, [r7, #3]
 800bf38:	2b02      	cmp	r3, #2
 800bf3a:	d106      	bne.n	800bf4a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf42:	461a      	mov	r2, r3
 800bf44:	f241 7370 	movw	r3, #6000	; 0x1770
 800bf48:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800bf4a:	2300      	movs	r3, #0
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3714      	adds	r7, #20
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800bf64:	2300      	movs	r3, #0
 800bf66:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bf78:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf86:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800bf88:	2064      	movs	r0, #100	; 0x64
 800bf8a:	f7f9 fa07 	bl	800539c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf9a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800bf9c:	200a      	movs	r0, #10
 800bf9e:	f7f9 f9fd 	bl	800539c <HAL_Delay>

  return HAL_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3710      	adds	r7, #16
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b085      	sub	sp, #20
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bfd0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d109      	bne.n	800bff0 <USB_DriveVbus+0x44>
 800bfdc:	78fb      	ldrb	r3, [r7, #3]
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d106      	bne.n	800bff0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	68fa      	ldr	r2, [r7, #12]
 800bfe6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bfea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bfee:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bffa:	d109      	bne.n	800c010 <USB_DriveVbus+0x64>
 800bffc:	78fb      	ldrb	r3, [r7, #3]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d106      	bne.n	800c010 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c00a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c00e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3714      	adds	r7, #20
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr

0800c01e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c01e:	b480      	push	{r7}
 800c020:	b085      	sub	sp, #20
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c02a:	2300      	movs	r3, #0
 800c02c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	0c5b      	lsrs	r3, r3, #17
 800c03c:	f003 0303 	and.w	r3, r3, #3
}
 800c040:	4618      	mov	r0, r3
 800c042:	3714      	adds	r7, #20
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	b29b      	uxth	r3, r3
}
 800c062:	4618      	mov	r0, r3
 800c064:	3714      	adds	r7, #20
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr
	...

0800c070 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b088      	sub	sp, #32
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	4608      	mov	r0, r1
 800c07a:	4611      	mov	r1, r2
 800c07c:	461a      	mov	r2, r3
 800c07e:	4603      	mov	r3, r0
 800c080:	70fb      	strb	r3, [r7, #3]
 800c082:	460b      	mov	r3, r1
 800c084:	70bb      	strb	r3, [r7, #2]
 800c086:	4613      	mov	r3, r2
 800c088:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c08a:	2300      	movs	r3, #0
 800c08c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c092:	78fb      	ldrb	r3, [r7, #3]
 800c094:	015a      	lsls	r2, r3, #5
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	4413      	add	r3, r2
 800c09a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c09e:	461a      	mov	r2, r3
 800c0a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0a4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c0a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c0aa:	2b03      	cmp	r3, #3
 800c0ac:	d87e      	bhi.n	800c1ac <USB_HC_Init+0x13c>
 800c0ae:	a201      	add	r2, pc, #4	; (adr r2, 800c0b4 <USB_HC_Init+0x44>)
 800c0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b4:	0800c0c5 	.word	0x0800c0c5
 800c0b8:	0800c16f 	.word	0x0800c16f
 800c0bc:	0800c0c5 	.word	0x0800c0c5
 800c0c0:	0800c131 	.word	0x0800c131
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c0c4:	78fb      	ldrb	r3, [r7, #3]
 800c0c6:	015a      	lsls	r2, r3, #5
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	f240 439d 	movw	r3, #1181	; 0x49d
 800c0d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c0d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	da10      	bge.n	800c102 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c0e0:	78fb      	ldrb	r3, [r7, #3]
 800c0e2:	015a      	lsls	r2, r3, #5
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	78fa      	ldrb	r2, [r7, #3]
 800c0f0:	0151      	lsls	r1, r2, #5
 800c0f2:	693a      	ldr	r2, [r7, #16]
 800c0f4:	440a      	add	r2, r1
 800c0f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0fe:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c100:	e057      	b.n	800c1b2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d051      	beq.n	800c1b2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c10e:	78fb      	ldrb	r3, [r7, #3]
 800c110:	015a      	lsls	r2, r3, #5
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	4413      	add	r3, r2
 800c116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	78fa      	ldrb	r2, [r7, #3]
 800c11e:	0151      	lsls	r1, r2, #5
 800c120:	693a      	ldr	r2, [r7, #16]
 800c122:	440a      	add	r2, r1
 800c124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c128:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c12c:	60d3      	str	r3, [r2, #12]
      break;
 800c12e:	e040      	b.n	800c1b2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c130:	78fb      	ldrb	r3, [r7, #3]
 800c132:	015a      	lsls	r2, r3, #5
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	4413      	add	r3, r2
 800c138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c13c:	461a      	mov	r2, r3
 800c13e:	f240 639d 	movw	r3, #1693	; 0x69d
 800c142:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c144:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	da34      	bge.n	800c1b6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c14c:	78fb      	ldrb	r3, [r7, #3]
 800c14e:	015a      	lsls	r2, r3, #5
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	4413      	add	r3, r2
 800c154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	78fa      	ldrb	r2, [r7, #3]
 800c15c:	0151      	lsls	r1, r2, #5
 800c15e:	693a      	ldr	r2, [r7, #16]
 800c160:	440a      	add	r2, r1
 800c162:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c16a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c16c:	e023      	b.n	800c1b6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c16e:	78fb      	ldrb	r3, [r7, #3]
 800c170:	015a      	lsls	r2, r3, #5
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	4413      	add	r3, r2
 800c176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c17a:	461a      	mov	r2, r3
 800c17c:	f240 2325 	movw	r3, #549	; 0x225
 800c180:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c182:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c186:	2b00      	cmp	r3, #0
 800c188:	da17      	bge.n	800c1ba <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c18a:	78fb      	ldrb	r3, [r7, #3]
 800c18c:	015a      	lsls	r2, r3, #5
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	4413      	add	r3, r2
 800c192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	78fa      	ldrb	r2, [r7, #3]
 800c19a:	0151      	lsls	r1, r2, #5
 800c19c:	693a      	ldr	r2, [r7, #16]
 800c19e:	440a      	add	r2, r1
 800c1a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1a4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c1a8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c1aa:	e006      	b.n	800c1ba <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	77fb      	strb	r3, [r7, #31]
      break;
 800c1b0:	e004      	b.n	800c1bc <USB_HC_Init+0x14c>
      break;
 800c1b2:	bf00      	nop
 800c1b4:	e002      	b.n	800c1bc <USB_HC_Init+0x14c>
      break;
 800c1b6:	bf00      	nop
 800c1b8:	e000      	b.n	800c1bc <USB_HC_Init+0x14c>
      break;
 800c1ba:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1c2:	699a      	ldr	r2, [r3, #24]
 800c1c4:	78fb      	ldrb	r3, [r7, #3]
 800c1c6:	f003 030f 	and.w	r3, r3, #15
 800c1ca:	2101      	movs	r1, #1
 800c1cc:	fa01 f303 	lsl.w	r3, r1, r3
 800c1d0:	6939      	ldr	r1, [r7, #16]
 800c1d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	699b      	ldr	r3, [r3, #24]
 800c1de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c1e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	da03      	bge.n	800c1f6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c1ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1f2:	61bb      	str	r3, [r7, #24]
 800c1f4:	e001      	b.n	800c1fa <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f7ff ff0f 	bl	800c01e <USB_GetHostSpeed>
 800c200:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c202:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c206:	2b02      	cmp	r3, #2
 800c208:	d106      	bne.n	800c218 <USB_HC_Init+0x1a8>
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2b02      	cmp	r3, #2
 800c20e:	d003      	beq.n	800c218 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c210:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c214:	617b      	str	r3, [r7, #20]
 800c216:	e001      	b.n	800c21c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c218:	2300      	movs	r3, #0
 800c21a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c21c:	787b      	ldrb	r3, [r7, #1]
 800c21e:	059b      	lsls	r3, r3, #22
 800c220:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c224:	78bb      	ldrb	r3, [r7, #2]
 800c226:	02db      	lsls	r3, r3, #11
 800c228:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c22c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c22e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c232:	049b      	lsls	r3, r3, #18
 800c234:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c238:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c23a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c23c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c240:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c246:	78fb      	ldrb	r3, [r7, #3]
 800c248:	0159      	lsls	r1, r3, #5
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	440b      	add	r3, r1
 800c24e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c252:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c258:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800c25a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c25e:	2b03      	cmp	r3, #3
 800c260:	d10f      	bne.n	800c282 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800c262:	78fb      	ldrb	r3, [r7, #3]
 800c264:	015a      	lsls	r2, r3, #5
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	4413      	add	r3, r2
 800c26a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	78fa      	ldrb	r2, [r7, #3]
 800c272:	0151      	lsls	r1, r2, #5
 800c274:	693a      	ldr	r2, [r7, #16]
 800c276:	440a      	add	r2, r1
 800c278:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c27c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c280:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c282:	7ffb      	ldrb	r3, [r7, #31]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3720      	adds	r7, #32
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b08c      	sub	sp, #48	; 0x30
 800c290:	af02      	add	r7, sp, #8
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	4613      	mov	r3, r2
 800c298:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	785b      	ldrb	r3, [r3, #1]
 800c2a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c2a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2a8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d02d      	beq.n	800c312 <USB_HC_StartXfer+0x86>
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	791b      	ldrb	r3, [r3, #4]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d129      	bne.n	800c312 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c2be:	79fb      	ldrb	r3, [r7, #7]
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d117      	bne.n	800c2f4 <USB_HC_StartXfer+0x68>
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	79db      	ldrb	r3, [r3, #7]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d003      	beq.n	800c2d4 <USB_HC_StartXfer+0x48>
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	79db      	ldrb	r3, [r3, #7]
 800c2d0:	2b02      	cmp	r3, #2
 800c2d2:	d10f      	bne.n	800c2f4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	015a      	lsls	r2, r3, #5
 800c2d8:	6a3b      	ldr	r3, [r7, #32]
 800c2da:	4413      	add	r3, r2
 800c2dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	69fa      	ldr	r2, [r7, #28]
 800c2e4:	0151      	lsls	r1, r2, #5
 800c2e6:	6a3a      	ldr	r2, [r7, #32]
 800c2e8:	440a      	add	r2, r1
 800c2ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2f2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800c2f4:	79fb      	ldrb	r3, [r7, #7]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d10b      	bne.n	800c312 <USB_HC_StartXfer+0x86>
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	795b      	ldrb	r3, [r3, #5]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d107      	bne.n	800c312 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	785b      	ldrb	r3, [r3, #1]
 800c306:	4619      	mov	r1, r3
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	f000 fa2f 	bl	800c76c <USB_DoPing>
      return HAL_OK;
 800c30e:	2300      	movs	r3, #0
 800c310:	e0f8      	b.n	800c504 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	695b      	ldr	r3, [r3, #20]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d018      	beq.n	800c34c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	695b      	ldr	r3, [r3, #20]
 800c31e:	68ba      	ldr	r2, [r7, #8]
 800c320:	8912      	ldrh	r2, [r2, #8]
 800c322:	4413      	add	r3, r2
 800c324:	3b01      	subs	r3, #1
 800c326:	68ba      	ldr	r2, [r7, #8]
 800c328:	8912      	ldrh	r2, [r2, #8]
 800c32a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c32e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c330:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c332:	8b7b      	ldrh	r3, [r7, #26]
 800c334:	429a      	cmp	r2, r3
 800c336:	d90b      	bls.n	800c350 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800c338:	8b7b      	ldrh	r3, [r7, #26]
 800c33a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c33c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c33e:	68ba      	ldr	r2, [r7, #8]
 800c340:	8912      	ldrh	r2, [r2, #8]
 800c342:	fb02 f203 	mul.w	r2, r2, r3
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	611a      	str	r2, [r3, #16]
 800c34a:	e001      	b.n	800c350 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800c34c:	2301      	movs	r3, #1
 800c34e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	78db      	ldrb	r3, [r3, #3]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d007      	beq.n	800c368 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c358:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c35a:	68ba      	ldr	r2, [r7, #8]
 800c35c:	8912      	ldrh	r2, [r2, #8]
 800c35e:	fb02 f203 	mul.w	r2, r2, r3
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	611a      	str	r2, [r3, #16]
 800c366:	e003      	b.n	800c370 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	695a      	ldr	r2, [r3, #20]
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	691b      	ldr	r3, [r3, #16]
 800c374:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c378:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c37a:	04d9      	lsls	r1, r3, #19
 800c37c:	4b63      	ldr	r3, [pc, #396]	; (800c50c <USB_HC_StartXfer+0x280>)
 800c37e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c380:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	7a9b      	ldrb	r3, [r3, #10]
 800c386:	075b      	lsls	r3, r3, #29
 800c388:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c38c:	69f9      	ldr	r1, [r7, #28]
 800c38e:	0148      	lsls	r0, r1, #5
 800c390:	6a39      	ldr	r1, [r7, #32]
 800c392:	4401      	add	r1, r0
 800c394:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c398:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c39a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c39c:	79fb      	ldrb	r3, [r7, #7]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d009      	beq.n	800c3b6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	68d9      	ldr	r1, [r3, #12]
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	015a      	lsls	r2, r3, #5
 800c3aa:	6a3b      	ldr	r3, [r7, #32]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3b2:	460a      	mov	r2, r1
 800c3b4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c3b6:	6a3b      	ldr	r3, [r7, #32]
 800c3b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	f003 0301 	and.w	r3, r3, #1
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	bf0c      	ite	eq
 800c3c6:	2301      	moveq	r3, #1
 800c3c8:	2300      	movne	r3, #0
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	015a      	lsls	r2, r3, #5
 800c3d2:	6a3b      	ldr	r3, [r7, #32]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	69fa      	ldr	r2, [r7, #28]
 800c3de:	0151      	lsls	r1, r2, #5
 800c3e0:	6a3a      	ldr	r2, [r7, #32]
 800c3e2:	440a      	add	r2, r1
 800c3e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c3e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c3ec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	015a      	lsls	r2, r3, #5
 800c3f2:	6a3b      	ldr	r3, [r7, #32]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	7e7b      	ldrb	r3, [r7, #25]
 800c3fe:	075b      	lsls	r3, r3, #29
 800c400:	69f9      	ldr	r1, [r7, #28]
 800c402:	0148      	lsls	r0, r1, #5
 800c404:	6a39      	ldr	r1, [r7, #32]
 800c406:	4401      	add	r1, r0
 800c408:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c40c:	4313      	orrs	r3, r2
 800c40e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	015a      	lsls	r2, r3, #5
 800c414:	6a3b      	ldr	r3, [r7, #32]
 800c416:	4413      	add	r3, r2
 800c418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c426:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	78db      	ldrb	r3, [r3, #3]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d004      	beq.n	800c43a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c436:	613b      	str	r3, [r7, #16]
 800c438:	e003      	b.n	800c442 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c440:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c448:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	015a      	lsls	r2, r3, #5
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	4413      	add	r3, r2
 800c452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c456:	461a      	mov	r2, r3
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c45c:	79fb      	ldrb	r3, [r7, #7]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d001      	beq.n	800c466 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c462:	2300      	movs	r3, #0
 800c464:	e04e      	b.n	800c504 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	78db      	ldrb	r3, [r3, #3]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d149      	bne.n	800c502 <USB_HC_StartXfer+0x276>
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	695b      	ldr	r3, [r3, #20]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d045      	beq.n	800c502 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	79db      	ldrb	r3, [r3, #7]
 800c47a:	2b03      	cmp	r3, #3
 800c47c:	d830      	bhi.n	800c4e0 <USB_HC_StartXfer+0x254>
 800c47e:	a201      	add	r2, pc, #4	; (adr r2, 800c484 <USB_HC_StartXfer+0x1f8>)
 800c480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c484:	0800c495 	.word	0x0800c495
 800c488:	0800c4b9 	.word	0x0800c4b9
 800c48c:	0800c495 	.word	0x0800c495
 800c490:	0800c4b9 	.word	0x0800c4b9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	695b      	ldr	r3, [r3, #20]
 800c498:	3303      	adds	r3, #3
 800c49a:	089b      	lsrs	r3, r3, #2
 800c49c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c49e:	8afa      	ldrh	r2, [r7, #22]
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d91c      	bls.n	800c4e4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	699b      	ldr	r3, [r3, #24]
 800c4ae:	f043 0220 	orr.w	r2, r3, #32
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	619a      	str	r2, [r3, #24]
        }
        break;
 800c4b6:	e015      	b.n	800c4e4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	695b      	ldr	r3, [r3, #20]
 800c4bc:	3303      	adds	r3, #3
 800c4be:	089b      	lsrs	r3, r3, #2
 800c4c0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c4c2:	8afa      	ldrh	r2, [r7, #22]
 800c4c4:	6a3b      	ldr	r3, [r7, #32]
 800c4c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4ca:	691b      	ldr	r3, [r3, #16]
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d90a      	bls.n	800c4e8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	699b      	ldr	r3, [r3, #24]
 800c4d6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	619a      	str	r2, [r3, #24]
        }
        break;
 800c4de:	e003      	b.n	800c4e8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c4e0:	bf00      	nop
 800c4e2:	e002      	b.n	800c4ea <USB_HC_StartXfer+0x25e>
        break;
 800c4e4:	bf00      	nop
 800c4e6:	e000      	b.n	800c4ea <USB_HC_StartXfer+0x25e>
        break;
 800c4e8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	68d9      	ldr	r1, [r3, #12]
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	785a      	ldrb	r2, [r3, #1]
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	695b      	ldr	r3, [r3, #20]
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	9000      	str	r0, [sp, #0]
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	f7ff fb81 	bl	800bc04 <USB_WritePacket>
  }

  return HAL_OK;
 800c502:	2300      	movs	r3, #0
}
 800c504:	4618      	mov	r0, r3
 800c506:	3728      	adds	r7, #40	; 0x28
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	1ff80000 	.word	0x1ff80000

0800c510 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c522:	695b      	ldr	r3, [r3, #20]
 800c524:	b29b      	uxth	r3, r3
}
 800c526:	4618      	mov	r0, r3
 800c528:	3714      	adds	r7, #20
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr

0800c532 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c532:	b480      	push	{r7}
 800c534:	b089      	sub	sp, #36	; 0x24
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
 800c53a:	460b      	mov	r3, r1
 800c53c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800c542:	78fb      	ldrb	r3, [r7, #3]
 800c544:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800c546:	2300      	movs	r3, #0
 800c548:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	015a      	lsls	r2, r3, #5
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	4413      	add	r3, r2
 800c552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	0c9b      	lsrs	r3, r3, #18
 800c55a:	f003 0303 	and.w	r3, r3, #3
 800c55e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	015a      	lsls	r2, r3, #5
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	4413      	add	r3, r2
 800c568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	0fdb      	lsrs	r3, r3, #31
 800c570:	f003 0301 	and.w	r3, r3, #1
 800c574:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	f003 0320 	and.w	r3, r3, #32
 800c57e:	2b20      	cmp	r3, #32
 800c580:	d104      	bne.n	800c58c <USB_HC_Halt+0x5a>
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d101      	bne.n	800c58c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c588:	2300      	movs	r3, #0
 800c58a:	e0e8      	b.n	800c75e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d002      	beq.n	800c598 <USB_HC_Halt+0x66>
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	2b02      	cmp	r3, #2
 800c596:	d173      	bne.n	800c680 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	015a      	lsls	r2, r3, #5
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	4413      	add	r3, r2
 800c5a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	697a      	ldr	r2, [r7, #20]
 800c5a8:	0151      	lsls	r1, r2, #5
 800c5aa:	69ba      	ldr	r2, [r7, #24]
 800c5ac:	440a      	add	r2, r1
 800c5ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c5b6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	f003 0320 	and.w	r3, r3, #32
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f040 80cb 	bne.w	800c75c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d143      	bne.n	800c65a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	015a      	lsls	r2, r3, #5
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	4413      	add	r3, r2
 800c5da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	697a      	ldr	r2, [r7, #20]
 800c5e2:	0151      	lsls	r1, r2, #5
 800c5e4:	69ba      	ldr	r2, [r7, #24]
 800c5e6:	440a      	add	r2, r1
 800c5e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5f0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	015a      	lsls	r2, r3, #5
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	697a      	ldr	r2, [r7, #20]
 800c602:	0151      	lsls	r1, r2, #5
 800c604:	69ba      	ldr	r2, [r7, #24]
 800c606:	440a      	add	r2, r1
 800c608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c60c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c610:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	015a      	lsls	r2, r3, #5
 800c616:	69bb      	ldr	r3, [r7, #24]
 800c618:	4413      	add	r3, r2
 800c61a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	697a      	ldr	r2, [r7, #20]
 800c622:	0151      	lsls	r1, r2, #5
 800c624:	69ba      	ldr	r2, [r7, #24]
 800c626:	440a      	add	r2, r1
 800c628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c62c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c630:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	3301      	adds	r3, #1
 800c636:	61fb      	str	r3, [r7, #28]
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c63e:	d81d      	bhi.n	800c67c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	015a      	lsls	r2, r3, #5
 800c644:	69bb      	ldr	r3, [r7, #24]
 800c646:	4413      	add	r3, r2
 800c648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c656:	d0ec      	beq.n	800c632 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c658:	e080      	b.n	800c75c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	015a      	lsls	r2, r3, #5
 800c65e:	69bb      	ldr	r3, [r7, #24]
 800c660:	4413      	add	r3, r2
 800c662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	697a      	ldr	r2, [r7, #20]
 800c66a:	0151      	lsls	r1, r2, #5
 800c66c:	69ba      	ldr	r2, [r7, #24]
 800c66e:	440a      	add	r2, r1
 800c670:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c674:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c678:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c67a:	e06f      	b.n	800c75c <USB_HC_Halt+0x22a>
            break;
 800c67c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c67e:	e06d      	b.n	800c75c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	015a      	lsls	r2, r3, #5
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	4413      	add	r3, r2
 800c688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	697a      	ldr	r2, [r7, #20]
 800c690:	0151      	lsls	r1, r2, #5
 800c692:	69ba      	ldr	r2, [r7, #24]
 800c694:	440a      	add	r2, r1
 800c696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c69a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c69e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6a6:	691b      	ldr	r3, [r3, #16]
 800c6a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d143      	bne.n	800c738 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	015a      	lsls	r2, r3, #5
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	697a      	ldr	r2, [r7, #20]
 800c6c0:	0151      	lsls	r1, r2, #5
 800c6c2:	69ba      	ldr	r2, [r7, #24]
 800c6c4:	440a      	add	r2, r1
 800c6c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c6ce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	015a      	lsls	r2, r3, #5
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	0151      	lsls	r1, r2, #5
 800c6e2:	69ba      	ldr	r2, [r7, #24]
 800c6e4:	440a      	add	r2, r1
 800c6e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c6ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	015a      	lsls	r2, r3, #5
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	4413      	add	r3, r2
 800c6f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	0151      	lsls	r1, r2, #5
 800c702:	69ba      	ldr	r2, [r7, #24]
 800c704:	440a      	add	r2, r1
 800c706:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c70a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c70e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c710:	69fb      	ldr	r3, [r7, #28]
 800c712:	3301      	adds	r3, #1
 800c714:	61fb      	str	r3, [r7, #28]
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c71c:	d81d      	bhi.n	800c75a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	015a      	lsls	r2, r3, #5
 800c722:	69bb      	ldr	r3, [r7, #24]
 800c724:	4413      	add	r3, r2
 800c726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c734:	d0ec      	beq.n	800c710 <USB_HC_Halt+0x1de>
 800c736:	e011      	b.n	800c75c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	015a      	lsls	r2, r3, #5
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	4413      	add	r3, r2
 800c740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	697a      	ldr	r2, [r7, #20]
 800c748:	0151      	lsls	r1, r2, #5
 800c74a:	69ba      	ldr	r2, [r7, #24]
 800c74c:	440a      	add	r2, r1
 800c74e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c752:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c756:	6013      	str	r3, [r2, #0]
 800c758:	e000      	b.n	800c75c <USB_HC_Halt+0x22a>
          break;
 800c75a:	bf00      	nop
    }
  }

  return HAL_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3724      	adds	r7, #36	; 0x24
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
	...

0800c76c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b087      	sub	sp, #28
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	460b      	mov	r3, r1
 800c776:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c77c:	78fb      	ldrb	r3, [r7, #3]
 800c77e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c780:	2301      	movs	r3, #1
 800c782:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	04da      	lsls	r2, r3, #19
 800c788:	4b15      	ldr	r3, [pc, #84]	; (800c7e0 <USB_DoPing+0x74>)
 800c78a:	4013      	ands	r3, r2
 800c78c:	693a      	ldr	r2, [r7, #16]
 800c78e:	0151      	lsls	r1, r2, #5
 800c790:	697a      	ldr	r2, [r7, #20]
 800c792:	440a      	add	r2, r1
 800c794:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c798:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c79c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	015a      	lsls	r2, r3, #5
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c7b4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c7bc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	015a      	lsls	r2, r3, #5
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c7d0:	2300      	movs	r3, #0
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	371c      	adds	r7, #28
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	1ff80000 	.word	0x1ff80000

0800c7e4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b086      	sub	sp, #24
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f7ff f981 	bl	800bafc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c7fa:	2110      	movs	r1, #16
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f7ff f9b9 	bl	800bb74 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f7ff f9dc 	bl	800bbc0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c808:	2300      	movs	r3, #0
 800c80a:	613b      	str	r3, [r7, #16]
 800c80c:	e01f      	b.n	800c84e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	015a      	lsls	r2, r3, #5
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	4413      	add	r3, r2
 800c816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c824:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c82c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c834:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	015a      	lsls	r2, r3, #5
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	4413      	add	r3, r2
 800c83e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c842:	461a      	mov	r2, r3
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	3301      	adds	r3, #1
 800c84c:	613b      	str	r3, [r7, #16]
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	2b0f      	cmp	r3, #15
 800c852:	d9dc      	bls.n	800c80e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c854:	2300      	movs	r3, #0
 800c856:	613b      	str	r3, [r7, #16]
 800c858:	e034      	b.n	800c8c4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	015a      	lsls	r2, r3, #5
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	4413      	add	r3, r2
 800c862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c870:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c878:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c880:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	015a      	lsls	r2, r3, #5
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	4413      	add	r3, r2
 800c88a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c88e:	461a      	mov	r2, r3
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	3301      	adds	r3, #1
 800c898:	617b      	str	r3, [r7, #20]
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8a0:	d80c      	bhi.n	800c8bc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	015a      	lsls	r2, r3, #5
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8b8:	d0ec      	beq.n	800c894 <USB_StopHost+0xb0>
 800c8ba:	e000      	b.n	800c8be <USB_StopHost+0xda>
        break;
 800c8bc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	613b      	str	r3, [r7, #16]
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	2b0f      	cmp	r3, #15
 800c8c8:	d9c7      	bls.n	800c85a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8d6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8de:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f7ff f8fa 	bl	800bada <USB_EnableGlobalInt>

  return HAL_OK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3718      	adds	r7, #24
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c8f0:	b590      	push	{r4, r7, lr}
 800c8f2:	b089      	sub	sp, #36	; 0x24
 800c8f4:	af04      	add	r7, sp, #16
 800c8f6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	2202      	movs	r2, #2
 800c8fc:	2102      	movs	r1, #2
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fc66 	bl	800d1d0 <USBH_FindInterface>
 800c904:	4603      	mov	r3, r0
 800c906:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c908:	7bfb      	ldrb	r3, [r7, #15]
 800c90a:	2bff      	cmp	r3, #255	; 0xff
 800c90c:	d002      	beq.n	800c914 <USBH_CDC_InterfaceInit+0x24>
 800c90e:	7bfb      	ldrb	r3, [r7, #15]
 800c910:	2b01      	cmp	r3, #1
 800c912:	d901      	bls.n	800c918 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c914:	2302      	movs	r3, #2
 800c916:	e13d      	b.n	800cb94 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c918:	7bfb      	ldrb	r3, [r7, #15]
 800c91a:	4619      	mov	r1, r3
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 fc3b 	bl	800d198 <USBH_SelectInterface>
 800c922:	4603      	mov	r3, r0
 800c924:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c926:	7bbb      	ldrb	r3, [r7, #14]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d001      	beq.n	800c930 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c92c:	2302      	movs	r3, #2
 800c92e:	e131      	b.n	800cb94 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800c936:	2050      	movs	r0, #80	; 0x50
 800c938:	f002 fa00 	bl	800ed3c <malloc>
 800c93c:	4603      	mov	r3, r0
 800c93e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c946:	69db      	ldr	r3, [r3, #28]
 800c948:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d101      	bne.n	800c954 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c950:	2302      	movs	r3, #2
 800c952:	e11f      	b.n	800cb94 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c954:	2250      	movs	r2, #80	; 0x50
 800c956:	2100      	movs	r1, #0
 800c958:	68b8      	ldr	r0, [r7, #8]
 800c95a:	f002 fa0d 	bl	800ed78 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c95e:	7bfb      	ldrb	r3, [r7, #15]
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	211a      	movs	r1, #26
 800c964:	fb01 f303 	mul.w	r3, r1, r3
 800c968:	4413      	add	r3, r2
 800c96a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	b25b      	sxtb	r3, r3
 800c972:	2b00      	cmp	r3, #0
 800c974:	da15      	bge.n	800c9a2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c976:	7bfb      	ldrb	r3, [r7, #15]
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	211a      	movs	r1, #26
 800c97c:	fb01 f303 	mul.w	r3, r1, r3
 800c980:	4413      	add	r3, r2
 800c982:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c986:	781a      	ldrb	r2, [r3, #0]
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	211a      	movs	r1, #26
 800c992:	fb01 f303 	mul.w	r3, r1, r3
 800c996:	4413      	add	r3, r2
 800c998:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c99c:	881a      	ldrh	r2, [r3, #0]
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	785b      	ldrb	r3, [r3, #1]
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f001 fe32 	bl	800e612 <USBH_AllocPipe>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	7819      	ldrb	r1, [r3, #0]
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	7858      	ldrb	r0, [r3, #1]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c9ca:	68ba      	ldr	r2, [r7, #8]
 800c9cc:	8952      	ldrh	r2, [r2, #10]
 800c9ce:	9202      	str	r2, [sp, #8]
 800c9d0:	2203      	movs	r2, #3
 800c9d2:	9201      	str	r2, [sp, #4]
 800c9d4:	9300      	str	r3, [sp, #0]
 800c9d6:	4623      	mov	r3, r4
 800c9d8:	4602      	mov	r2, r0
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f001 fdea 	bl	800e5b4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f002 f8f9 	bl	800ebe0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	210a      	movs	r1, #10
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 fbeb 	bl	800d1d0 <USBH_FindInterface>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ca00:	2bff      	cmp	r3, #255	; 0xff
 800ca02:	d002      	beq.n	800ca0a <USBH_CDC_InterfaceInit+0x11a>
 800ca04:	7bfb      	ldrb	r3, [r7, #15]
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d901      	bls.n	800ca0e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ca0a:	2302      	movs	r3, #2
 800ca0c:	e0c2      	b.n	800cb94 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800ca0e:	7bfb      	ldrb	r3, [r7, #15]
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	211a      	movs	r1, #26
 800ca14:	fb01 f303 	mul.w	r3, r1, r3
 800ca18:	4413      	add	r3, r2
 800ca1a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	b25b      	sxtb	r3, r3
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	da16      	bge.n	800ca54 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ca26:	7bfb      	ldrb	r3, [r7, #15]
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	211a      	movs	r1, #26
 800ca2c:	fb01 f303 	mul.w	r3, r1, r3
 800ca30:	4413      	add	r3, r2
 800ca32:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ca36:	781a      	ldrb	r2, [r3, #0]
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ca3c:	7bfb      	ldrb	r3, [r7, #15]
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	211a      	movs	r1, #26
 800ca42:	fb01 f303 	mul.w	r3, r1, r3
 800ca46:	4413      	add	r3, r2
 800ca48:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ca4c:	881a      	ldrh	r2, [r3, #0]
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	835a      	strh	r2, [r3, #26]
 800ca52:	e015      	b.n	800ca80 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ca54:	7bfb      	ldrb	r3, [r7, #15]
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	211a      	movs	r1, #26
 800ca5a:	fb01 f303 	mul.w	r3, r1, r3
 800ca5e:	4413      	add	r3, r2
 800ca60:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ca64:	781a      	ldrb	r2, [r3, #0]
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ca6a:	7bfb      	ldrb	r3, [r7, #15]
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	211a      	movs	r1, #26
 800ca70:	fb01 f303 	mul.w	r3, r1, r3
 800ca74:	4413      	add	r3, r2
 800ca76:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ca7a:	881a      	ldrh	r2, [r3, #0]
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	211a      	movs	r1, #26
 800ca86:	fb01 f303 	mul.w	r3, r1, r3
 800ca8a:	4413      	add	r3, r2
 800ca8c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	b25b      	sxtb	r3, r3
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	da16      	bge.n	800cac6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ca98:	7bfb      	ldrb	r3, [r7, #15]
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	211a      	movs	r1, #26
 800ca9e:	fb01 f303 	mul.w	r3, r1, r3
 800caa2:	4413      	add	r3, r2
 800caa4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800caa8:	781a      	ldrb	r2, [r3, #0]
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800caae:	7bfb      	ldrb	r3, [r7, #15]
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	211a      	movs	r1, #26
 800cab4:	fb01 f303 	mul.w	r3, r1, r3
 800cab8:	4413      	add	r3, r2
 800caba:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800cabe:	881a      	ldrh	r2, [r3, #0]
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	835a      	strh	r2, [r3, #26]
 800cac4:	e015      	b.n	800caf2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800cac6:	7bfb      	ldrb	r3, [r7, #15]
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	211a      	movs	r1, #26
 800cacc:	fb01 f303 	mul.w	r3, r1, r3
 800cad0:	4413      	add	r3, r2
 800cad2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cad6:	781a      	ldrb	r2, [r3, #0]
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800cadc:	7bfb      	ldrb	r3, [r7, #15]
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	211a      	movs	r1, #26
 800cae2:	fb01 f303 	mul.w	r3, r1, r3
 800cae6:	4413      	add	r3, r2
 800cae8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800caec:	881a      	ldrh	r2, [r3, #0]
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	7b9b      	ldrb	r3, [r3, #14]
 800caf6:	4619      	mov	r1, r3
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f001 fd8a 	bl	800e612 <USBH_AllocPipe>
 800cafe:	4603      	mov	r3, r0
 800cb00:	461a      	mov	r2, r3
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	7bdb      	ldrb	r3, [r3, #15]
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f001 fd80 	bl	800e612 <USBH_AllocPipe>
 800cb12:	4603      	mov	r3, r0
 800cb14:	461a      	mov	r2, r3
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	7b59      	ldrb	r1, [r3, #13]
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	7b98      	ldrb	r0, [r3, #14]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	8b12      	ldrh	r2, [r2, #24]
 800cb32:	9202      	str	r2, [sp, #8]
 800cb34:	2202      	movs	r2, #2
 800cb36:	9201      	str	r2, [sp, #4]
 800cb38:	9300      	str	r3, [sp, #0]
 800cb3a:	4623      	mov	r3, r4
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f001 fd38 	bl	800e5b4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	7b19      	ldrb	r1, [r3, #12]
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	7bd8      	ldrb	r0, [r3, #15]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cb58:	68ba      	ldr	r2, [r7, #8]
 800cb5a:	8b52      	ldrh	r2, [r2, #26]
 800cb5c:	9202      	str	r2, [sp, #8]
 800cb5e:	2202      	movs	r2, #2
 800cb60:	9201      	str	r2, [sp, #4]
 800cb62:	9300      	str	r3, [sp, #0]
 800cb64:	4623      	mov	r3, r4
 800cb66:	4602      	mov	r2, r0
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f001 fd23 	bl	800e5b4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	2200      	movs	r2, #0
 800cb72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	7b5b      	ldrb	r3, [r3, #13]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f002 f82e 	bl	800ebe0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	7b1b      	ldrb	r3, [r3, #12]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f002 f827 	bl	800ebe0 <USBH_LL_SetToggle>

  return USBH_OK;
 800cb92:	2300      	movs	r3, #0
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3714      	adds	r7, #20
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd90      	pop	{r4, r7, pc}

0800cb9c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbaa:	69db      	ldr	r3, [r3, #28]
 800cbac:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d00e      	beq.n	800cbd4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	4619      	mov	r1, r3
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f001 fd18 	bl	800e5f2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f001 fd43 	bl	800e654 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	7b1b      	ldrb	r3, [r3, #12]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00e      	beq.n	800cbfa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	7b1b      	ldrb	r3, [r3, #12]
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f001 fd05 	bl	800e5f2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	7b1b      	ldrb	r3, [r3, #12]
 800cbec:	4619      	mov	r1, r3
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f001 fd30 	bl	800e654 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	7b5b      	ldrb	r3, [r3, #13]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d00e      	beq.n	800cc20 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	7b5b      	ldrb	r3, [r3, #13]
 800cc06:	4619      	mov	r1, r3
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f001 fcf2 	bl	800e5f2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	7b5b      	ldrb	r3, [r3, #13]
 800cc12:	4619      	mov	r1, r3
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f001 fd1d 	bl	800e654 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc26:	69db      	ldr	r3, [r3, #28]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00b      	beq.n	800cc44 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc32:	69db      	ldr	r3, [r3, #28]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f002 f889 	bl	800ed4c <free>
    phost->pActiveClass->pData = 0U;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc40:	2200      	movs	r2, #0
 800cc42:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800cc44:	2300      	movs	r3, #0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800cc4e:	b580      	push	{r7, lr}
 800cc50:	b084      	sub	sp, #16
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc5c:	69db      	ldr	r3, [r3, #28]
 800cc5e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	3340      	adds	r3, #64	; 0x40
 800cc64:	4619      	mov	r1, r3
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 f8b1 	bl	800cdce <GetLineCoding>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800cc70:	7afb      	ldrb	r3, [r7, #11]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d105      	bne.n	800cc82 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc7c:	2102      	movs	r1, #2
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800cc82:	7afb      	ldrb	r3, [r7, #11]
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3710      	adds	r7, #16
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b084      	sub	sp, #16
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800cc94:	2301      	movs	r3, #1
 800cc96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cca2:	69db      	ldr	r3, [r3, #28]
 800cca4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ccac:	2b04      	cmp	r3, #4
 800ccae:	d877      	bhi.n	800cda0 <USBH_CDC_Process+0x114>
 800ccb0:	a201      	add	r2, pc, #4	; (adr r2, 800ccb8 <USBH_CDC_Process+0x2c>)
 800ccb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb6:	bf00      	nop
 800ccb8:	0800cccd 	.word	0x0800cccd
 800ccbc:	0800ccd3 	.word	0x0800ccd3
 800ccc0:	0800cd03 	.word	0x0800cd03
 800ccc4:	0800cd77 	.word	0x0800cd77
 800ccc8:	0800cd85 	.word	0x0800cd85
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800cccc:	2300      	movs	r3, #0
 800ccce:	73fb      	strb	r3, [r7, #15]
      break;
 800ccd0:	e06d      	b.n	800cdae <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 f897 	bl	800ce0c <SetLineCoding>
 800ccde:	4603      	mov	r3, r0
 800cce0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cce2:	7bbb      	ldrb	r3, [r7, #14]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d104      	bne.n	800ccf2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	2202      	movs	r2, #2
 800ccec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ccf0:	e058      	b.n	800cda4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ccf2:	7bbb      	ldrb	r3, [r7, #14]
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d055      	beq.n	800cda4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	2204      	movs	r2, #4
 800ccfc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800cd00:	e050      	b.n	800cda4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	3340      	adds	r3, #64	; 0x40
 800cd06:	4619      	mov	r1, r3
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 f860 	bl	800cdce <GetLineCoding>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cd12:	7bbb      	ldrb	r3, [r7, #14]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d126      	bne.n	800cd66 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd2a:	791b      	ldrb	r3, [r3, #4]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d13b      	bne.n	800cda8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd3a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d133      	bne.n	800cda8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd4a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d12b      	bne.n	800cda8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd58:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d124      	bne.n	800cda8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 f958 	bl	800d014 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800cd64:	e020      	b.n	800cda8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800cd66:	7bbb      	ldrb	r3, [r7, #14]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d01d      	beq.n	800cda8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	2204      	movs	r2, #4
 800cd70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800cd74:	e018      	b.n	800cda8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 f867 	bl	800ce4a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 f8da 	bl	800cf36 <CDC_ProcessReception>
      break;
 800cd82:	e014      	b.n	800cdae <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800cd84:	2100      	movs	r1, #0
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 ffe3 	bl	800dd52 <USBH_ClrFeature>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cd90:	7bbb      	ldrb	r3, [r7, #14]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d10a      	bne.n	800cdac <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800cd9e:	e005      	b.n	800cdac <USBH_CDC_Process+0x120>

    default:
      break;
 800cda0:	bf00      	nop
 800cda2:	e004      	b.n	800cdae <USBH_CDC_Process+0x122>
      break;
 800cda4:	bf00      	nop
 800cda6:	e002      	b.n	800cdae <USBH_CDC_Process+0x122>
      break;
 800cda8:	bf00      	nop
 800cdaa:	e000      	b.n	800cdae <USBH_CDC_Process+0x122>
      break;
 800cdac:	bf00      	nop

  }

  return status;
 800cdae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3710      	adds	r7, #16
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b083      	sub	sp, #12
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800cdc0:	2300      	movs	r3, #0
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	370c      	adds	r7, #12
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdcc:	4770      	bx	lr

0800cdce <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b082      	sub	sp, #8
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
 800cdd6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	22a1      	movs	r2, #161	; 0xa1
 800cddc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2221      	movs	r2, #33	; 0x21
 800cde2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2207      	movs	r2, #7
 800cdf4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	2207      	movs	r2, #7
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f001 f988 	bl	800e112 <USBH_CtlReq>
 800ce02:	4603      	mov	r3, r0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3708      	adds	r7, #8
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2221      	movs	r2, #33	; 0x21
 800ce1a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2220      	movs	r2, #32
 800ce20:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2207      	movs	r2, #7
 800ce32:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	2207      	movs	r2, #7
 800ce38:	4619      	mov	r1, r3
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f001 f969 	bl	800e112 <USBH_CtlReq>
 800ce40:	4603      	mov	r3, r0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3708      	adds	r7, #8
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b086      	sub	sp, #24
 800ce4e:	af02      	add	r7, sp, #8
 800ce50:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce58:	69db      	ldr	r3, [r3, #28]
 800ce5a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d002      	beq.n	800ce70 <CDC_ProcessTransmission+0x26>
 800ce6a:	2b02      	cmp	r3, #2
 800ce6c:	d023      	beq.n	800ceb6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ce6e:	e05e      	b.n	800cf2e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	8b12      	ldrh	r2, [r2, #24]
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d90b      	bls.n	800ce94 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	69d9      	ldr	r1, [r3, #28]
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	8b1a      	ldrh	r2, [r3, #24]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	7b5b      	ldrb	r3, [r3, #13]
 800ce88:	2001      	movs	r0, #1
 800ce8a:	9000      	str	r0, [sp, #0]
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f001 fb4e 	bl	800e52e <USBH_BulkSendData>
 800ce92:	e00b      	b.n	800ceac <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800ce9c:	b29a      	uxth	r2, r3
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	7b5b      	ldrb	r3, [r3, #13]
 800cea2:	2001      	movs	r0, #1
 800cea4:	9000      	str	r0, [sp, #0]
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f001 fb41 	bl	800e52e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2202      	movs	r2, #2
 800ceb0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ceb4:	e03b      	b.n	800cf2e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	7b5b      	ldrb	r3, [r3, #13]
 800ceba:	4619      	mov	r1, r3
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f001 fe65 	bl	800eb8c <USBH_LL_GetURBState>
 800cec2:	4603      	mov	r3, r0
 800cec4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800cec6:	7afb      	ldrb	r3, [r7, #11]
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d128      	bne.n	800cf1e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced0:	68fa      	ldr	r2, [r7, #12]
 800ced2:	8b12      	ldrh	r2, [r2, #24]
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d90e      	bls.n	800cef6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	8b12      	ldrh	r2, [r2, #24]
 800cee0:	1a9a      	subs	r2, r3, r2
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	69db      	ldr	r3, [r3, #28]
 800ceea:	68fa      	ldr	r2, [r7, #12]
 800ceec:	8b12      	ldrh	r2, [r2, #24]
 800ceee:	441a      	add	r2, r3
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	61da      	str	r2, [r3, #28]
 800cef4:	e002      	b.n	800cefc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2200      	movs	r2, #0
 800cefa:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d004      	beq.n	800cf0e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2201      	movs	r2, #1
 800cf08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800cf0c:	e00e      	b.n	800cf2c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 f868 	bl	800cfec <USBH_CDC_TransmitCallback>
      break;
 800cf1c:	e006      	b.n	800cf2c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800cf1e:	7afb      	ldrb	r3, [r7, #11]
 800cf20:	2b02      	cmp	r3, #2
 800cf22:	d103      	bne.n	800cf2c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2201      	movs	r2, #1
 800cf28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800cf2c:	bf00      	nop
  }
}
 800cf2e:	bf00      	nop
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b086      	sub	sp, #24
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf44:	69db      	ldr	r3, [r3, #28]
 800cf46:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800cf52:	2b03      	cmp	r3, #3
 800cf54:	d002      	beq.n	800cf5c <CDC_ProcessReception+0x26>
 800cf56:	2b04      	cmp	r3, #4
 800cf58:	d00e      	beq.n	800cf78 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800cf5a:	e043      	b.n	800cfe4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	6a19      	ldr	r1, [r3, #32]
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	8b5a      	ldrh	r2, [r3, #26]
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	7b1b      	ldrb	r3, [r3, #12]
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f001 fb05 	bl	800e578 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	2204      	movs	r2, #4
 800cf72:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800cf76:	e035      	b.n	800cfe4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	7b1b      	ldrb	r3, [r3, #12]
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f001 fe04 	bl	800eb8c <USBH_LL_GetURBState>
 800cf84:	4603      	mov	r3, r0
 800cf86:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800cf88:	7cfb      	ldrb	r3, [r7, #19]
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d129      	bne.n	800cfe2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	7b1b      	ldrb	r3, [r3, #12]
 800cf92:	4619      	mov	r1, r3
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f001 fd67 	bl	800ea68 <USBH_LL_GetLastXferSize>
 800cf9a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfa0:	68fa      	ldr	r2, [r7, #12]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d016      	beq.n	800cfd4 <CDC_ProcessReception+0x9e>
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	8b5b      	ldrh	r3, [r3, #26]
 800cfaa:	461a      	mov	r2, r3
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d910      	bls.n	800cfd4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	1ad2      	subs	r2, r2, r3
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	6a1a      	ldr	r2, [r3, #32]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	441a      	add	r2, r3
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	2203      	movs	r2, #3
 800cfce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800cfd2:	e006      	b.n	800cfe2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 f80f 	bl	800d000 <USBH_CDC_ReceiveCallback>
      break;
 800cfe2:	bf00      	nop
  }
}
 800cfe4:	bf00      	nop
 800cfe6:	3718      	adds	r7, #24
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cff4:	bf00      	nop
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr

0800d000 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d008:	bf00      	nop
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d01c:	bf00      	nop
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	4613      	mov	r3, r2
 800d034:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d101      	bne.n	800d040 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d03c:	2302      	movs	r3, #2
 800d03e:	e029      	b.n	800d094 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	79fa      	ldrb	r2, [r7, #7]
 800d044:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2200      	movs	r2, #0
 800d04c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2200      	movs	r2, #0
 800d054:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800d058:	68f8      	ldr	r0, [r7, #12]
 800d05a:	f000 f81f 	bl	800d09c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2200      	movs	r2, #0
 800d062:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2200      	movs	r2, #0
 800d06a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2200      	movs	r2, #0
 800d072:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2200      	movs	r2, #0
 800d07a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d003      	beq.n	800d08c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	68ba      	ldr	r2, [r7, #8]
 800d088:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f001 fc37 	bl	800e900 <USBH_LL_Init>

  return USBH_OK;
 800d092:	2300      	movs	r3, #0
}
 800d094:	4618      	mov	r0, r3
 800d096:	3710      	adds	r7, #16
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	60fb      	str	r3, [r7, #12]
 800d0ac:	e009      	b.n	800d0c2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	33e0      	adds	r3, #224	; 0xe0
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4413      	add	r3, r2
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	3301      	adds	r3, #1
 800d0c0:	60fb      	str	r3, [r7, #12]
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2b0e      	cmp	r3, #14
 800d0c6:	d9f2      	bls.n	800d0ae <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	60fb      	str	r3, [r7, #12]
 800d0cc:	e009      	b.n	800d0e2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d0d8:	2200      	movs	r2, #0
 800d0da:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	3301      	adds	r3, #1
 800d0e0:	60fb      	str	r3, [r7, #12]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0e8:	d3f1      	bcc.n	800d0ce <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2240      	movs	r2, #64	; 0x40
 800d10e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2200      	movs	r2, #0
 800d11a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2201      	movs	r2, #1
 800d122:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2200      	movs	r2, #0
 800d132:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800d136:	2300      	movs	r3, #0
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3714      	adds	r7, #20
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d14e:	2300      	movs	r3, #0
 800d150:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d016      	beq.n	800d186 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d10e      	bne.n	800d180 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d168:	1c59      	adds	r1, r3, #1
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	33de      	adds	r3, #222	; 0xde
 800d174:	6839      	ldr	r1, [r7, #0]
 800d176:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d17a:	2300      	movs	r3, #0
 800d17c:	73fb      	strb	r3, [r7, #15]
 800d17e:	e004      	b.n	800d18a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d180:	2302      	movs	r3, #2
 800d182:	73fb      	strb	r3, [r7, #15]
 800d184:	e001      	b.n	800d18a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d186:	2302      	movs	r3, #2
 800d188:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3714      	adds	r7, #20
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d198:	b480      	push	{r7}
 800d19a:	b085      	sub	sp, #20
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d1ae:	78fa      	ldrb	r2, [r7, #3]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d204      	bcs.n	800d1be <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	78fa      	ldrb	r2, [r7, #3]
 800d1b8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d1bc:	e001      	b.n	800d1c2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d1be:	2302      	movs	r3, #2
 800d1c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3714      	adds	r7, #20
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b087      	sub	sp, #28
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	4608      	mov	r0, r1
 800d1da:	4611      	mov	r1, r2
 800d1dc:	461a      	mov	r2, r3
 800d1de:	4603      	mov	r3, r0
 800d1e0:	70fb      	strb	r3, [r7, #3]
 800d1e2:	460b      	mov	r3, r1
 800d1e4:	70bb      	strb	r3, [r7, #2]
 800d1e6:	4613      	mov	r3, r2
 800d1e8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d1f8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d1fa:	e025      	b.n	800d248 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d1fc:	7dfb      	ldrb	r3, [r7, #23]
 800d1fe:	221a      	movs	r2, #26
 800d200:	fb02 f303 	mul.w	r3, r2, r3
 800d204:	3308      	adds	r3, #8
 800d206:	68fa      	ldr	r2, [r7, #12]
 800d208:	4413      	add	r3, r2
 800d20a:	3302      	adds	r3, #2
 800d20c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	795b      	ldrb	r3, [r3, #5]
 800d212:	78fa      	ldrb	r2, [r7, #3]
 800d214:	429a      	cmp	r2, r3
 800d216:	d002      	beq.n	800d21e <USBH_FindInterface+0x4e>
 800d218:	78fb      	ldrb	r3, [r7, #3]
 800d21a:	2bff      	cmp	r3, #255	; 0xff
 800d21c:	d111      	bne.n	800d242 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d222:	78ba      	ldrb	r2, [r7, #2]
 800d224:	429a      	cmp	r2, r3
 800d226:	d002      	beq.n	800d22e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d228:	78bb      	ldrb	r3, [r7, #2]
 800d22a:	2bff      	cmp	r3, #255	; 0xff
 800d22c:	d109      	bne.n	800d242 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d232:	787a      	ldrb	r2, [r7, #1]
 800d234:	429a      	cmp	r2, r3
 800d236:	d002      	beq.n	800d23e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d238:	787b      	ldrb	r3, [r7, #1]
 800d23a:	2bff      	cmp	r3, #255	; 0xff
 800d23c:	d101      	bne.n	800d242 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d23e:	7dfb      	ldrb	r3, [r7, #23]
 800d240:	e006      	b.n	800d250 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d242:	7dfb      	ldrb	r3, [r7, #23]
 800d244:	3301      	adds	r3, #1
 800d246:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d248:	7dfb      	ldrb	r3, [r7, #23]
 800d24a:	2b01      	cmp	r3, #1
 800d24c:	d9d6      	bls.n	800d1fc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d24e:	23ff      	movs	r3, #255	; 0xff
}
 800d250:	4618      	mov	r0, r3
 800d252:	371c      	adds	r7, #28
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f001 fb87 	bl	800e978 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800d26a:	2101      	movs	r1, #1
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f001 fca0 	bl	800ebb2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d272:	2300      	movs	r3, #0
}
 800d274:	4618      	mov	r0, r3
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b088      	sub	sp, #32
 800d280:	af04      	add	r7, sp, #16
 800d282:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d284:	2302      	movs	r3, #2
 800d286:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d288:	2300      	movs	r3, #0
 800d28a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d292:	b2db      	uxtb	r3, r3
 800d294:	2b01      	cmp	r3, #1
 800d296:	d102      	bne.n	800d29e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2203      	movs	r2, #3
 800d29c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	2b0b      	cmp	r3, #11
 800d2a6:	f200 81b3 	bhi.w	800d610 <USBH_Process+0x394>
 800d2aa:	a201      	add	r2, pc, #4	; (adr r2, 800d2b0 <USBH_Process+0x34>)
 800d2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b0:	0800d2e1 	.word	0x0800d2e1
 800d2b4:	0800d313 	.word	0x0800d313
 800d2b8:	0800d37b 	.word	0x0800d37b
 800d2bc:	0800d5ab 	.word	0x0800d5ab
 800d2c0:	0800d611 	.word	0x0800d611
 800d2c4:	0800d41f 	.word	0x0800d41f
 800d2c8:	0800d551 	.word	0x0800d551
 800d2cc:	0800d455 	.word	0x0800d455
 800d2d0:	0800d475 	.word	0x0800d475
 800d2d4:	0800d495 	.word	0x0800d495
 800d2d8:	0800d4c3 	.word	0x0800d4c3
 800d2dc:	0800d593 	.word	0x0800d593
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d2e6:	b2db      	uxtb	r3, r3
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f000 8193 	beq.w	800d614 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d2f4:	20c8      	movs	r0, #200	; 0xc8
 800d2f6:	f001 fca3 	bl	800ec40 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f001 fb99 	bl	800ea32 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2200      	movs	r2, #0
 800d30c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d310:	e180      	b.n	800d614 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d107      	bne.n	800d32c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2202      	movs	r2, #2
 800d328:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d32a:	e182      	b.n	800d632 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d332:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d336:	d914      	bls.n	800d362 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d33e:	3301      	adds	r3, #1
 800d340:	b2da      	uxtb	r2, r3
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d34e:	2b03      	cmp	r3, #3
 800d350:	d903      	bls.n	800d35a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	220d      	movs	r2, #13
 800d356:	701a      	strb	r2, [r3, #0]
      break;
 800d358:	e16b      	b.n	800d632 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2200      	movs	r2, #0
 800d35e:	701a      	strb	r2, [r3, #0]
      break;
 800d360:	e167      	b.n	800d632 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d368:	f103 020a 	add.w	r2, r3, #10
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d372:	200a      	movs	r0, #10
 800d374:	f001 fc64 	bl	800ec40 <USBH_Delay>
      break;
 800d378:	e15b      	b.n	800d632 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d380:	2b00      	cmp	r3, #0
 800d382:	d005      	beq.n	800d390 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d38a:	2104      	movs	r1, #4
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d390:	2064      	movs	r0, #100	; 0x64
 800d392:	f001 fc55 	bl	800ec40 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f001 fb24 	bl	800e9e4 <USBH_LL_GetSpeed>
 800d39c:	4603      	mov	r3, r0
 800d39e:	461a      	mov	r2, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2205      	movs	r2, #5
 800d3aa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f001 f92f 	bl	800e612 <USBH_AllocPipe>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d3bc:	2180      	movs	r1, #128	; 0x80
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f001 f927 	bl	800e612 <USBH_AllocPipe>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	7919      	ldrb	r1, [r3, #4]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d3e0:	b292      	uxth	r2, r2
 800d3e2:	9202      	str	r2, [sp, #8]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	9201      	str	r2, [sp, #4]
 800d3e8:	9300      	str	r3, [sp, #0]
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2280      	movs	r2, #128	; 0x80
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f001 f8e0 	bl	800e5b4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	7959      	ldrb	r1, [r3, #5]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d408:	b292      	uxth	r2, r2
 800d40a:	9202      	str	r2, [sp, #8]
 800d40c:	2200      	movs	r2, #0
 800d40e:	9201      	str	r2, [sp, #4]
 800d410:	9300      	str	r3, [sp, #0]
 800d412:	4603      	mov	r3, r0
 800d414:	2200      	movs	r2, #0
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f001 f8cc 	bl	800e5b4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d41c:	e109      	b.n	800d632 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 f90c 	bl	800d63c <USBH_HandleEnum>
 800d424:	4603      	mov	r3, r0
 800d426:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d428:	7bbb      	ldrb	r3, [r7, #14]
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f040 80f3 	bne.w	800d618 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2200      	movs	r2, #0
 800d436:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d440:	2b01      	cmp	r3, #1
 800d442:	d103      	bne.n	800d44c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2208      	movs	r2, #8
 800d448:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d44a:	e0e5      	b.n	800d618 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2207      	movs	r2, #7
 800d450:	701a      	strb	r2, [r3, #0]
      break;
 800d452:	e0e1      	b.n	800d618 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	f000 80de 	beq.w	800d61c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d466:	2101      	movs	r1, #1
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2208      	movs	r2, #8
 800d470:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800d472:	e0d3      	b.n	800d61c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	4619      	mov	r1, r3
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 fc20 	bl	800dcc4 <USBH_SetCfg>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	f040 80ca 	bne.w	800d620 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2209      	movs	r2, #9
 800d490:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d492:	e0c5      	b.n	800d620 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d49a:	f003 0320 	and.w	r3, r3, #32
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d00b      	beq.n	800d4ba <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800d4a2:	2101      	movs	r1, #1
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 fc30 	bl	800dd0a <USBH_SetFeature>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f040 80b9 	bne.w	800d624 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	220a      	movs	r2, #10
 800d4b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d4b8:	e0b4      	b.n	800d624 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	220a      	movs	r2, #10
 800d4be:	701a      	strb	r2, [r3, #0]
      break;
 800d4c0:	e0b0      	b.n	800d624 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f000 80ad 	beq.w	800d628 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	73fb      	strb	r3, [r7, #15]
 800d4da:	e016      	b.n	800d50a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d4dc:	7bfa      	ldrb	r2, [r7, #15]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	32de      	adds	r2, #222	; 0xde
 800d4e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4e6:	791a      	ldrb	r2, [r3, #4]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d108      	bne.n	800d504 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d4f2:	7bfa      	ldrb	r2, [r7, #15]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	32de      	adds	r2, #222	; 0xde
 800d4f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d502:	e005      	b.n	800d510 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d504:	7bfb      	ldrb	r3, [r7, #15]
 800d506:	3301      	adds	r3, #1
 800d508:	73fb      	strb	r3, [r7, #15]
 800d50a:	7bfb      	ldrb	r3, [r7, #15]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d0e5      	beq.n	800d4dc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d516:	2b00      	cmp	r3, #0
 800d518:	d016      	beq.n	800d548 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d520:	689b      	ldr	r3, [r3, #8]
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	4798      	blx	r3
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d109      	bne.n	800d540 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2206      	movs	r2, #6
 800d530:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d538:	2103      	movs	r1, #3
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d53e:	e073      	b.n	800d628 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	220d      	movs	r2, #13
 800d544:	701a      	strb	r2, [r3, #0]
      break;
 800d546:	e06f      	b.n	800d628 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	220d      	movs	r2, #13
 800d54c:	701a      	strb	r2, [r3, #0]
      break;
 800d54e:	e06b      	b.n	800d628 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d556:	2b00      	cmp	r3, #0
 800d558:	d017      	beq.n	800d58a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d560:	691b      	ldr	r3, [r3, #16]
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	4798      	blx	r3
 800d566:	4603      	mov	r3, r0
 800d568:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d56a:	7bbb      	ldrb	r3, [r7, #14]
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d103      	bne.n	800d57a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	220b      	movs	r2, #11
 800d576:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d578:	e058      	b.n	800d62c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800d57a:	7bbb      	ldrb	r3, [r7, #14]
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	2b02      	cmp	r3, #2
 800d580:	d154      	bne.n	800d62c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	220d      	movs	r2, #13
 800d586:	701a      	strb	r2, [r3, #0]
      break;
 800d588:	e050      	b.n	800d62c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	220d      	movs	r2, #13
 800d58e:	701a      	strb	r2, [r3, #0]
      break;
 800d590:	e04c      	b.n	800d62c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d049      	beq.n	800d630 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d5a2:	695b      	ldr	r3, [r3, #20]
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	4798      	blx	r3
      }
      break;
 800d5a8:	e042      	b.n	800d630 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f7ff fd72 	bl	800d09c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d009      	beq.n	800d5d6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d005      	beq.n	800d5ec <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d5e6:	2105      	movs	r1, #5
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d107      	bne.n	800d608 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f7ff fe2b 	bl	800d25c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d606:	e014      	b.n	800d632 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f001 f9b5 	bl	800e978 <USBH_LL_Start>
      break;
 800d60e:	e010      	b.n	800d632 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800d610:	bf00      	nop
 800d612:	e00e      	b.n	800d632 <USBH_Process+0x3b6>
      break;
 800d614:	bf00      	nop
 800d616:	e00c      	b.n	800d632 <USBH_Process+0x3b6>
      break;
 800d618:	bf00      	nop
 800d61a:	e00a      	b.n	800d632 <USBH_Process+0x3b6>
    break;
 800d61c:	bf00      	nop
 800d61e:	e008      	b.n	800d632 <USBH_Process+0x3b6>
      break;
 800d620:	bf00      	nop
 800d622:	e006      	b.n	800d632 <USBH_Process+0x3b6>
      break;
 800d624:	bf00      	nop
 800d626:	e004      	b.n	800d632 <USBH_Process+0x3b6>
      break;
 800d628:	bf00      	nop
 800d62a:	e002      	b.n	800d632 <USBH_Process+0x3b6>
      break;
 800d62c:	bf00      	nop
 800d62e:	e000      	b.n	800d632 <USBH_Process+0x3b6>
      break;
 800d630:	bf00      	nop
  }
  return USBH_OK;
 800d632:	2300      	movs	r3, #0
}
 800d634:	4618      	mov	r0, r3
 800d636:	3710      	adds	r7, #16
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b088      	sub	sp, #32
 800d640:	af04      	add	r7, sp, #16
 800d642:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d644:	2301      	movs	r3, #1
 800d646:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d648:	2301      	movs	r3, #1
 800d64a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	785b      	ldrb	r3, [r3, #1]
 800d650:	2b07      	cmp	r3, #7
 800d652:	f200 81c1 	bhi.w	800d9d8 <USBH_HandleEnum+0x39c>
 800d656:	a201      	add	r2, pc, #4	; (adr r2, 800d65c <USBH_HandleEnum+0x20>)
 800d658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d65c:	0800d67d 	.word	0x0800d67d
 800d660:	0800d73b 	.word	0x0800d73b
 800d664:	0800d7a5 	.word	0x0800d7a5
 800d668:	0800d833 	.word	0x0800d833
 800d66c:	0800d89d 	.word	0x0800d89d
 800d670:	0800d90d 	.word	0x0800d90d
 800d674:	0800d953 	.word	0x0800d953
 800d678:	0800d999 	.word	0x0800d999
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d67c:	2108      	movs	r1, #8
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 fa50 	bl	800db24 <USBH_Get_DevDesc>
 800d684:	4603      	mov	r3, r0
 800d686:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d688:	7bbb      	ldrb	r3, [r7, #14]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d130      	bne.n	800d6f0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2201      	movs	r2, #1
 800d69c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	7919      	ldrb	r1, [r3, #4]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d6b2:	b292      	uxth	r2, r2
 800d6b4:	9202      	str	r2, [sp, #8]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	9201      	str	r2, [sp, #4]
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	4603      	mov	r3, r0
 800d6be:	2280      	movs	r2, #128	; 0x80
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 ff77 	bl	800e5b4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	7959      	ldrb	r1, [r3, #5]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d6da:	b292      	uxth	r2, r2
 800d6dc:	9202      	str	r2, [sp, #8]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	9201      	str	r2, [sp, #4]
 800d6e2:	9300      	str	r3, [sp, #0]
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 ff63 	bl	800e5b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d6ee:	e175      	b.n	800d9dc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d6f0:	7bbb      	ldrb	r3, [r7, #14]
 800d6f2:	2b03      	cmp	r3, #3
 800d6f4:	f040 8172 	bne.w	800d9dc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d6fe:	3301      	adds	r3, #1
 800d700:	b2da      	uxtb	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d70e:	2b03      	cmp	r3, #3
 800d710:	d903      	bls.n	800d71a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	220d      	movs	r2, #13
 800d716:	701a      	strb	r2, [r3, #0]
      break;
 800d718:	e160      	b.n	800d9dc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	795b      	ldrb	r3, [r3, #5]
 800d71e:	4619      	mov	r1, r3
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f000 ff97 	bl	800e654 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	791b      	ldrb	r3, [r3, #4]
 800d72a:	4619      	mov	r1, r3
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f000 ff91 	bl	800e654 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2200      	movs	r2, #0
 800d736:	701a      	strb	r2, [r3, #0]
      break;
 800d738:	e150      	b.n	800d9dc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d73a:	2112      	movs	r1, #18
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 f9f1 	bl	800db24 <USBH_Get_DevDesc>
 800d742:	4603      	mov	r3, r0
 800d744:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d746:	7bbb      	ldrb	r3, [r7, #14]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d103      	bne.n	800d754 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2202      	movs	r2, #2
 800d750:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d752:	e145      	b.n	800d9e0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d754:	7bbb      	ldrb	r3, [r7, #14]
 800d756:	2b03      	cmp	r3, #3
 800d758:	f040 8142 	bne.w	800d9e0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d762:	3301      	adds	r3, #1
 800d764:	b2da      	uxtb	r2, r3
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d772:	2b03      	cmp	r3, #3
 800d774:	d903      	bls.n	800d77e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	220d      	movs	r2, #13
 800d77a:	701a      	strb	r2, [r3, #0]
      break;
 800d77c:	e130      	b.n	800d9e0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	795b      	ldrb	r3, [r3, #5]
 800d782:	4619      	mov	r1, r3
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 ff65 	bl	800e654 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	791b      	ldrb	r3, [r3, #4]
 800d78e:	4619      	mov	r1, r3
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 ff5f 	bl	800e654 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	701a      	strb	r2, [r3, #0]
      break;
 800d7a2:	e11d      	b.n	800d9e0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d7a4:	2101      	movs	r1, #1
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 fa68 	bl	800dc7c <USBH_SetAddress>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d7b0:	7bbb      	ldrb	r3, [r7, #14]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d132      	bne.n	800d81c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d7b6:	2002      	movs	r0, #2
 800d7b8:	f001 fa42 	bl	800ec40 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2203      	movs	r2, #3
 800d7c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	7919      	ldrb	r1, [r3, #4]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d7de:	b292      	uxth	r2, r2
 800d7e0:	9202      	str	r2, [sp, #8]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	9201      	str	r2, [sp, #4]
 800d7e6:	9300      	str	r3, [sp, #0]
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2280      	movs	r2, #128	; 0x80
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 fee1 	bl	800e5b4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	7959      	ldrb	r1, [r3, #5]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d806:	b292      	uxth	r2, r2
 800d808:	9202      	str	r2, [sp, #8]
 800d80a:	2200      	movs	r2, #0
 800d80c:	9201      	str	r2, [sp, #4]
 800d80e:	9300      	str	r3, [sp, #0]
 800d810:	4603      	mov	r3, r0
 800d812:	2200      	movs	r2, #0
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 fecd 	bl	800e5b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d81a:	e0e3      	b.n	800d9e4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d81c:	7bbb      	ldrb	r3, [r7, #14]
 800d81e:	2b03      	cmp	r3, #3
 800d820:	f040 80e0 	bne.w	800d9e4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	220d      	movs	r2, #13
 800d828:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	705a      	strb	r2, [r3, #1]
      break;
 800d830:	e0d8      	b.n	800d9e4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d832:	2109      	movs	r1, #9
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 f99d 	bl	800db74 <USBH_Get_CfgDesc>
 800d83a:	4603      	mov	r3, r0
 800d83c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d83e:	7bbb      	ldrb	r3, [r7, #14]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d103      	bne.n	800d84c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2204      	movs	r2, #4
 800d848:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d84a:	e0cd      	b.n	800d9e8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d84c:	7bbb      	ldrb	r3, [r7, #14]
 800d84e:	2b03      	cmp	r3, #3
 800d850:	f040 80ca 	bne.w	800d9e8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d85a:	3301      	adds	r3, #1
 800d85c:	b2da      	uxtb	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d86a:	2b03      	cmp	r3, #3
 800d86c:	d903      	bls.n	800d876 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	220d      	movs	r2, #13
 800d872:	701a      	strb	r2, [r3, #0]
      break;
 800d874:	e0b8      	b.n	800d9e8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	795b      	ldrb	r3, [r3, #5]
 800d87a:	4619      	mov	r1, r3
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 fee9 	bl	800e654 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	791b      	ldrb	r3, [r3, #4]
 800d886:	4619      	mov	r1, r3
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 fee3 	bl	800e654 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2200      	movs	r2, #0
 800d892:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	701a      	strb	r2, [r3, #0]
      break;
 800d89a:	e0a5      	b.n	800d9e8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f000 f965 	bl	800db74 <USBH_Get_CfgDesc>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d8ae:	7bbb      	ldrb	r3, [r7, #14]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d103      	bne.n	800d8bc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2205      	movs	r2, #5
 800d8b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d8ba:	e097      	b.n	800d9ec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d8bc:	7bbb      	ldrb	r3, [r7, #14]
 800d8be:	2b03      	cmp	r3, #3
 800d8c0:	f040 8094 	bne.w	800d9ec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	b2da      	uxtb	r2, r3
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d8da:	2b03      	cmp	r3, #3
 800d8dc:	d903      	bls.n	800d8e6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	220d      	movs	r2, #13
 800d8e2:	701a      	strb	r2, [r3, #0]
      break;
 800d8e4:	e082      	b.n	800d9ec <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	795b      	ldrb	r3, [r3, #5]
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 feb1 	bl	800e654 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	791b      	ldrb	r3, [r3, #4]
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 feab 	bl	800e654 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2200      	movs	r2, #0
 800d902:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2200      	movs	r2, #0
 800d908:	701a      	strb	r2, [r3, #0]
      break;
 800d90a:	e06f      	b.n	800d9ec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d912:	2b00      	cmp	r3, #0
 800d914:	d019      	beq.n	800d94a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d922:	23ff      	movs	r3, #255	; 0xff
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f000 f949 	bl	800dbbc <USBH_Get_StringDesc>
 800d92a:	4603      	mov	r3, r0
 800d92c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d92e:	7bbb      	ldrb	r3, [r7, #14]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d103      	bne.n	800d93c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2206      	movs	r2, #6
 800d938:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d93a:	e059      	b.n	800d9f0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d93c:	7bbb      	ldrb	r3, [r7, #14]
 800d93e:	2b03      	cmp	r3, #3
 800d940:	d156      	bne.n	800d9f0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2206      	movs	r2, #6
 800d946:	705a      	strb	r2, [r3, #1]
      break;
 800d948:	e052      	b.n	800d9f0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2206      	movs	r2, #6
 800d94e:	705a      	strb	r2, [r3, #1]
      break;
 800d950:	e04e      	b.n	800d9f0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d019      	beq.n	800d990 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d968:	23ff      	movs	r3, #255	; 0xff
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 f926 	bl	800dbbc <USBH_Get_StringDesc>
 800d970:	4603      	mov	r3, r0
 800d972:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d974:	7bbb      	ldrb	r3, [r7, #14]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d103      	bne.n	800d982 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2207      	movs	r2, #7
 800d97e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d980:	e038      	b.n	800d9f4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d982:	7bbb      	ldrb	r3, [r7, #14]
 800d984:	2b03      	cmp	r3, #3
 800d986:	d135      	bne.n	800d9f4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2207      	movs	r2, #7
 800d98c:	705a      	strb	r2, [r3, #1]
      break;
 800d98e:	e031      	b.n	800d9f4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2207      	movs	r2, #7
 800d994:	705a      	strb	r2, [r3, #1]
      break;
 800d996:	e02d      	b.n	800d9f4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d017      	beq.n	800d9d2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d9ae:	23ff      	movs	r3, #255	; 0xff
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 f903 	bl	800dbbc <USBH_Get_StringDesc>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d9ba:	7bbb      	ldrb	r3, [r7, #14]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d102      	bne.n	800d9c6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d9c4:	e018      	b.n	800d9f8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d9c6:	7bbb      	ldrb	r3, [r7, #14]
 800d9c8:	2b03      	cmp	r3, #3
 800d9ca:	d115      	bne.n	800d9f8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	73fb      	strb	r3, [r7, #15]
      break;
 800d9d0:	e012      	b.n	800d9f8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	73fb      	strb	r3, [r7, #15]
      break;
 800d9d6:	e00f      	b.n	800d9f8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800d9d8:	bf00      	nop
 800d9da:	e00e      	b.n	800d9fa <USBH_HandleEnum+0x3be>
      break;
 800d9dc:	bf00      	nop
 800d9de:	e00c      	b.n	800d9fa <USBH_HandleEnum+0x3be>
      break;
 800d9e0:	bf00      	nop
 800d9e2:	e00a      	b.n	800d9fa <USBH_HandleEnum+0x3be>
      break;
 800d9e4:	bf00      	nop
 800d9e6:	e008      	b.n	800d9fa <USBH_HandleEnum+0x3be>
      break;
 800d9e8:	bf00      	nop
 800d9ea:	e006      	b.n	800d9fa <USBH_HandleEnum+0x3be>
      break;
 800d9ec:	bf00      	nop
 800d9ee:	e004      	b.n	800d9fa <USBH_HandleEnum+0x3be>
      break;
 800d9f0:	bf00      	nop
 800d9f2:	e002      	b.n	800d9fa <USBH_HandleEnum+0x3be>
      break;
 800d9f4:	bf00      	nop
 800d9f6:	e000      	b.n	800d9fa <USBH_HandleEnum+0x3be>
      break;
 800d9f8:	bf00      	nop
  }
  return Status;
 800d9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3710      	adds	r7, #16
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	683a      	ldr	r2, [r7, #0]
 800da12:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800da16:	bf00      	nop
 800da18:	370c      	adds	r7, #12
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr

0800da22 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800da22:	b580      	push	{r7, lr}
 800da24:	b082      	sub	sp, #8
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800da30:	1c5a      	adds	r2, r3, #1
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 f804 	bl	800da46 <USBH_HandleSof>
}
 800da3e:	bf00      	nop
 800da40:	3708      	adds	r7, #8
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}

0800da46 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800da46:	b580      	push	{r7, lr}
 800da48:	b082      	sub	sp, #8
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	b2db      	uxtb	r3, r3
 800da54:	2b0b      	cmp	r3, #11
 800da56:	d10a      	bne.n	800da6e <USBH_HandleSof+0x28>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d005      	beq.n	800da6e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da68:	699b      	ldr	r3, [r3, #24]
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	4798      	blx	r3
  }
}
 800da6e:	bf00      	nop
 800da70:	3708      	adds	r7, #8
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800da76:	b480      	push	{r7}
 800da78:	b083      	sub	sp, #12
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2201      	movs	r2, #1
 800da82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800da86:	bf00      	nop
}
 800da88:	370c      	adds	r7, #12
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr

0800da92 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800da92:	b480      	push	{r7}
 800da94:	b083      	sub	sp, #12
 800da96:	af00      	add	r7, sp, #0
 800da98:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800daa2:	bf00      	nop
}
 800daa4:	370c      	adds	r7, #12
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr

0800daae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800daae:	b480      	push	{r7}
 800dab0:	b083      	sub	sp, #12
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2201      	movs	r2, #1
 800daba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2200      	movs	r2, #0
 800daca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800dace:	2300      	movs	r3, #0
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2201      	movs	r2, #1
 800dae8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2200      	movs	r2, #0
 800daf0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2200      	movs	r2, #0
 800daf8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 ff56 	bl	800e9ae <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	791b      	ldrb	r3, [r3, #4]
 800db06:	4619      	mov	r1, r3
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f000 fda3 	bl	800e654 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	795b      	ldrb	r3, [r3, #5]
 800db12:	4619      	mov	r1, r3
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 fd9d 	bl	800e654 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800db1a:	2300      	movs	r3, #0
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3708      	adds	r7, #8
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b086      	sub	sp, #24
 800db28:	af02      	add	r7, sp, #8
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	460b      	mov	r3, r1
 800db2e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800db36:	78fb      	ldrb	r3, [r7, #3]
 800db38:	b29b      	uxth	r3, r3
 800db3a:	9300      	str	r3, [sp, #0]
 800db3c:	4613      	mov	r3, r2
 800db3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db42:	2100      	movs	r1, #0
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f000 f864 	bl	800dc12 <USBH_GetDescriptor>
 800db4a:	4603      	mov	r3, r0
 800db4c:	73fb      	strb	r3, [r7, #15]
 800db4e:	7bfb      	ldrb	r3, [r7, #15]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d10a      	bne.n	800db6a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f203 3026 	addw	r0, r3, #806	; 0x326
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800db60:	78fa      	ldrb	r2, [r7, #3]
 800db62:	b292      	uxth	r2, r2
 800db64:	4619      	mov	r1, r3
 800db66:	f000 f918 	bl	800dd9a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800db6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3710      	adds	r7, #16
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800db74:	b580      	push	{r7, lr}
 800db76:	b086      	sub	sp, #24
 800db78:	af02      	add	r7, sp, #8
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	460b      	mov	r3, r1
 800db7e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	331c      	adds	r3, #28
 800db84:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800db86:	887b      	ldrh	r3, [r7, #2]
 800db88:	9300      	str	r3, [sp, #0]
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db90:	2100      	movs	r1, #0
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 f83d 	bl	800dc12 <USBH_GetDescriptor>
 800db98:	4603      	mov	r3, r0
 800db9a:	72fb      	strb	r3, [r7, #11]
 800db9c:	7afb      	ldrb	r3, [r7, #11]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d107      	bne.n	800dbb2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800dba8:	887a      	ldrh	r2, [r7, #2]
 800dbaa:	68f9      	ldr	r1, [r7, #12]
 800dbac:	4618      	mov	r0, r3
 800dbae:	f000 f964 	bl	800de7a <USBH_ParseCfgDesc>
  }

  return status;
 800dbb2:	7afb      	ldrb	r3, [r7, #11]
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3710      	adds	r7, #16
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b088      	sub	sp, #32
 800dbc0:	af02      	add	r7, sp, #8
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	607a      	str	r2, [r7, #4]
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	460b      	mov	r3, r1
 800dbca:	72fb      	strb	r3, [r7, #11]
 800dbcc:	4613      	mov	r3, r2
 800dbce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800dbd0:	7afb      	ldrb	r3, [r7, #11]
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800dbd8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800dbe0:	893b      	ldrh	r3, [r7, #8]
 800dbe2:	9300      	str	r3, [sp, #0]
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	2100      	movs	r1, #0
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f000 f812 	bl	800dc12 <USBH_GetDescriptor>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	75fb      	strb	r3, [r7, #23]
 800dbf2:	7dfb      	ldrb	r3, [r7, #23]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d107      	bne.n	800dc08 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dbfe:	893a      	ldrh	r2, [r7, #8]
 800dc00:	6879      	ldr	r1, [r7, #4]
 800dc02:	4618      	mov	r0, r3
 800dc04:	f000 fa37 	bl	800e076 <USBH_ParseStringDesc>
  }

  return status;
 800dc08:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3718      	adds	r7, #24
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b084      	sub	sp, #16
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	60f8      	str	r0, [r7, #12]
 800dc1a:	607b      	str	r3, [r7, #4]
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	72fb      	strb	r3, [r7, #11]
 800dc20:	4613      	mov	r3, r2
 800dc22:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	789b      	ldrb	r3, [r3, #2]
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d11c      	bne.n	800dc66 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800dc2c:	7afb      	ldrb	r3, [r7, #11]
 800dc2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dc32:	b2da      	uxtb	r2, r3
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2206      	movs	r2, #6
 800dc3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	893a      	ldrh	r2, [r7, #8]
 800dc42:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800dc44:	893b      	ldrh	r3, [r7, #8]
 800dc46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dc4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc4e:	d104      	bne.n	800dc5a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f240 4209 	movw	r2, #1033	; 0x409
 800dc56:	829a      	strh	r2, [r3, #20]
 800dc58:	e002      	b.n	800dc60 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	8b3a      	ldrh	r2, [r7, #24]
 800dc64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800dc66:	8b3b      	ldrh	r3, [r7, #24]
 800dc68:	461a      	mov	r2, r3
 800dc6a:	6879      	ldr	r1, [r7, #4]
 800dc6c:	68f8      	ldr	r0, [r7, #12]
 800dc6e:	f000 fa50 	bl	800e112 <USBH_CtlReq>
 800dc72:	4603      	mov	r3, r0
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3710      	adds	r7, #16
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	460b      	mov	r3, r1
 800dc86:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	789b      	ldrb	r3, [r3, #2]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d10f      	bne.n	800dcb0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2200      	movs	r2, #0
 800dc94:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2205      	movs	r2, #5
 800dc9a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800dc9c:	78fb      	ldrb	r3, [r7, #3]
 800dc9e:	b29a      	uxth	r2, r3
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2200      	movs	r2, #0
 800dca8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2200      	movs	r2, #0
 800dcae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 fa2c 	bl	800e112 <USBH_CtlReq>
 800dcba:	4603      	mov	r3, r0
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3708      	adds	r7, #8
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	460b      	mov	r3, r1
 800dcce:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	789b      	ldrb	r3, [r3, #2]
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d10e      	bne.n	800dcf6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2209      	movs	r2, #9
 800dce2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	887a      	ldrh	r2, [r7, #2]
 800dce8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2200      	movs	r2, #0
 800dcee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 fa09 	bl	800e112 <USBH_CtlReq>
 800dd00:	4603      	mov	r3, r0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3708      	adds	r7, #8
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b082      	sub	sp, #8
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
 800dd12:	460b      	mov	r3, r1
 800dd14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	789b      	ldrb	r3, [r3, #2]
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d10f      	bne.n	800dd3e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2200      	movs	r2, #0
 800dd22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2203      	movs	r2, #3
 800dd28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800dd2a:	78fb      	ldrb	r3, [r7, #3]
 800dd2c:	b29a      	uxth	r2, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2200      	movs	r2, #0
 800dd36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dd3e:	2200      	movs	r2, #0
 800dd40:	2100      	movs	r1, #0
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f000 f9e5 	bl	800e112 <USBH_CtlReq>
 800dd48:	4603      	mov	r3, r0
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3708      	adds	r7, #8
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b082      	sub	sp, #8
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	789b      	ldrb	r3, [r3, #2]
 800dd62:	2b01      	cmp	r3, #1
 800dd64:	d10f      	bne.n	800dd86 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2202      	movs	r2, #2
 800dd6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2201      	movs	r2, #1
 800dd70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2200      	movs	r2, #0
 800dd76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800dd78:	78fb      	ldrb	r3, [r7, #3]
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800dd86:	2200      	movs	r2, #0
 800dd88:	2100      	movs	r1, #0
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f000 f9c1 	bl	800e112 <USBH_CtlReq>
 800dd90:	4603      	mov	r3, r0
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3708      	adds	r7, #8
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}

0800dd9a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800dd9a:	b480      	push	{r7}
 800dd9c:	b085      	sub	sp, #20
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	60f8      	str	r0, [r7, #12]
 800dda2:	60b9      	str	r1, [r7, #8]
 800dda4:	4613      	mov	r3, r2
 800dda6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	781a      	ldrb	r2, [r3, #0]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	785a      	ldrb	r2, [r3, #1]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	3302      	adds	r3, #2
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	b29a      	uxth	r2, r3
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	3303      	adds	r3, #3
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	021b      	lsls	r3, r3, #8
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	4313      	orrs	r3, r2
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	791a      	ldrb	r2, [r3, #4]
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	795a      	ldrb	r2, [r3, #5]
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	799a      	ldrb	r2, [r3, #6]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	79da      	ldrb	r2, [r3, #7]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ddf4:	88fb      	ldrh	r3, [r7, #6]
 800ddf6:	2b08      	cmp	r3, #8
 800ddf8:	d939      	bls.n	800de6e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	3308      	adds	r3, #8
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	b29a      	uxth	r2, r3
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	3309      	adds	r3, #9
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	b29b      	uxth	r3, r3
 800de0a:	021b      	lsls	r3, r3, #8
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	4313      	orrs	r3, r2
 800de10:	b29a      	uxth	r2, r3
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	330a      	adds	r3, #10
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	b29a      	uxth	r2, r3
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	330b      	adds	r3, #11
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	b29b      	uxth	r3, r3
 800de26:	021b      	lsls	r3, r3, #8
 800de28:	b29b      	uxth	r3, r3
 800de2a:	4313      	orrs	r3, r2
 800de2c:	b29a      	uxth	r2, r3
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	330c      	adds	r3, #12
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	b29a      	uxth	r2, r3
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	330d      	adds	r3, #13
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	b29b      	uxth	r3, r3
 800de42:	021b      	lsls	r3, r3, #8
 800de44:	b29b      	uxth	r3, r3
 800de46:	4313      	orrs	r3, r2
 800de48:	b29a      	uxth	r2, r3
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	7b9a      	ldrb	r2, [r3, #14]
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	7bda      	ldrb	r2, [r3, #15]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	7c1a      	ldrb	r2, [r3, #16]
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	7c5a      	ldrb	r2, [r3, #17]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	745a      	strb	r2, [r3, #17]
  }
}
 800de6e:	bf00      	nop
 800de70:	3714      	adds	r7, #20
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr

0800de7a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b08a      	sub	sp, #40	; 0x28
 800de7e:	af00      	add	r7, sp, #0
 800de80:	60f8      	str	r0, [r7, #12]
 800de82:	60b9      	str	r1, [r7, #8]
 800de84:	4613      	mov	r3, r2
 800de86:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800de8c:	2300      	movs	r3, #0
 800de8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800de92:	2300      	movs	r3, #0
 800de94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	781a      	ldrb	r2, [r3, #0]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	785a      	ldrb	r2, [r3, #1]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	3302      	adds	r3, #2
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	3303      	adds	r3, #3
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	b29b      	uxth	r3, r3
 800debc:	021b      	lsls	r3, r3, #8
 800debe:	b29b      	uxth	r3, r3
 800dec0:	4313      	orrs	r3, r2
 800dec2:	b29a      	uxth	r2, r3
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	791a      	ldrb	r2, [r3, #4]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	795a      	ldrb	r2, [r3, #5]
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	799a      	ldrb	r2, [r3, #6]
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	79da      	ldrb	r2, [r3, #7]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	7a1a      	ldrb	r2, [r3, #8]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800def0:	88fb      	ldrh	r3, [r7, #6]
 800def2:	2b09      	cmp	r3, #9
 800def4:	d95f      	bls.n	800dfb6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800def6:	2309      	movs	r3, #9
 800def8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800defa:	2300      	movs	r3, #0
 800defc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800defe:	e051      	b.n	800dfa4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800df00:	f107 0316 	add.w	r3, r7, #22
 800df04:	4619      	mov	r1, r3
 800df06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df08:	f000 f8e8 	bl	800e0dc <USBH_GetNextDesc>
 800df0c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800df0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df10:	785b      	ldrb	r3, [r3, #1]
 800df12:	2b04      	cmp	r3, #4
 800df14:	d146      	bne.n	800dfa4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800df16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df1a:	221a      	movs	r2, #26
 800df1c:	fb02 f303 	mul.w	r3, r2, r3
 800df20:	3308      	adds	r3, #8
 800df22:	68fa      	ldr	r2, [r7, #12]
 800df24:	4413      	add	r3, r2
 800df26:	3302      	adds	r3, #2
 800df28:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800df2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df2c:	69f8      	ldr	r0, [r7, #28]
 800df2e:	f000 f846 	bl	800dfbe <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800df32:	2300      	movs	r3, #0
 800df34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800df38:	2300      	movs	r3, #0
 800df3a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800df3c:	e022      	b.n	800df84 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800df3e:	f107 0316 	add.w	r3, r7, #22
 800df42:	4619      	mov	r1, r3
 800df44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df46:	f000 f8c9 	bl	800e0dc <USBH_GetNextDesc>
 800df4a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800df4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4e:	785b      	ldrb	r3, [r3, #1]
 800df50:	2b05      	cmp	r3, #5
 800df52:	d117      	bne.n	800df84 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800df54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df58:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800df5c:	3201      	adds	r2, #1
 800df5e:	00d2      	lsls	r2, r2, #3
 800df60:	211a      	movs	r1, #26
 800df62:	fb01 f303 	mul.w	r3, r1, r3
 800df66:	4413      	add	r3, r2
 800df68:	3308      	adds	r3, #8
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	4413      	add	r3, r2
 800df6e:	3304      	adds	r3, #4
 800df70:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800df72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df74:	69b8      	ldr	r0, [r7, #24]
 800df76:	f000 f851 	bl	800e01c <USBH_ParseEPDesc>
            ep_ix++;
 800df7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800df7e:	3301      	adds	r3, #1
 800df80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800df84:	69fb      	ldr	r3, [r7, #28]
 800df86:	791b      	ldrb	r3, [r3, #4]
 800df88:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d204      	bcs.n	800df9a <USBH_ParseCfgDesc+0x120>
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	885a      	ldrh	r2, [r3, #2]
 800df94:	8afb      	ldrh	r3, [r7, #22]
 800df96:	429a      	cmp	r2, r3
 800df98:	d8d1      	bhi.n	800df3e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800df9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df9e:	3301      	adds	r3, #1
 800dfa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800dfa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d804      	bhi.n	800dfb6 <USBH_ParseCfgDesc+0x13c>
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	885a      	ldrh	r2, [r3, #2]
 800dfb0:	8afb      	ldrh	r3, [r7, #22]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d8a4      	bhi.n	800df00 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800dfb6:	bf00      	nop
 800dfb8:	3728      	adds	r7, #40	; 0x28
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}

0800dfbe <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800dfbe:	b480      	push	{r7}
 800dfc0:	b083      	sub	sp, #12
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	6078      	str	r0, [r7, #4]
 800dfc6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	781a      	ldrb	r2, [r3, #0]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	785a      	ldrb	r2, [r3, #1]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	789a      	ldrb	r2, [r3, #2]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	78da      	ldrb	r2, [r3, #3]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	791a      	ldrb	r2, [r3, #4]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	795a      	ldrb	r2, [r3, #5]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	799a      	ldrb	r2, [r3, #6]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	79da      	ldrb	r2, [r3, #7]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	7a1a      	ldrb	r2, [r3, #8]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	721a      	strb	r2, [r3, #8]
}
 800e010:	bf00      	nop
 800e012:	370c      	adds	r7, #12
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	781a      	ldrb	r2, [r3, #0]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	785a      	ldrb	r2, [r3, #1]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	789a      	ldrb	r2, [r3, #2]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	78da      	ldrb	r2, [r3, #3]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	3304      	adds	r3, #4
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	b29a      	uxth	r2, r3
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	3305      	adds	r3, #5
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	b29b      	uxth	r3, r3
 800e056:	021b      	lsls	r3, r3, #8
 800e058:	b29b      	uxth	r3, r3
 800e05a:	4313      	orrs	r3, r2
 800e05c:	b29a      	uxth	r2, r3
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	799a      	ldrb	r2, [r3, #6]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	719a      	strb	r2, [r3, #6]
}
 800e06a:	bf00      	nop
 800e06c:	370c      	adds	r7, #12
 800e06e:	46bd      	mov	sp, r7
 800e070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e074:	4770      	bx	lr

0800e076 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e076:	b480      	push	{r7}
 800e078:	b087      	sub	sp, #28
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	60f8      	str	r0, [r7, #12]
 800e07e:	60b9      	str	r1, [r7, #8]
 800e080:	4613      	mov	r3, r2
 800e082:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	3301      	adds	r3, #1
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	2b03      	cmp	r3, #3
 800e08c:	d120      	bne.n	800e0d0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	1e9a      	subs	r2, r3, #2
 800e094:	88fb      	ldrh	r3, [r7, #6]
 800e096:	4293      	cmp	r3, r2
 800e098:	bf28      	it	cs
 800e09a:	4613      	movcs	r3, r2
 800e09c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	3302      	adds	r3, #2
 800e0a2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	82fb      	strh	r3, [r7, #22]
 800e0a8:	e00b      	b.n	800e0c2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e0aa:	8afb      	ldrh	r3, [r7, #22]
 800e0ac:	68fa      	ldr	r2, [r7, #12]
 800e0ae:	4413      	add	r3, r2
 800e0b0:	781a      	ldrb	r2, [r3, #0]
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e0bc:	8afb      	ldrh	r3, [r7, #22]
 800e0be:	3302      	adds	r3, #2
 800e0c0:	82fb      	strh	r3, [r7, #22]
 800e0c2:	8afa      	ldrh	r2, [r7, #22]
 800e0c4:	8abb      	ldrh	r3, [r7, #20]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d3ef      	bcc.n	800e0aa <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	701a      	strb	r2, [r3, #0]
  }
}
 800e0d0:	bf00      	nop
 800e0d2:	371c      	adds	r7, #28
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr

0800e0dc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b085      	sub	sp, #20
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	881a      	ldrh	r2, [r3, #0]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	4413      	add	r3, r2
 800e0f2:	b29a      	uxth	r2, r3
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	4413      	add	r3, r2
 800e102:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e104:	68fb      	ldr	r3, [r7, #12]
}
 800e106:	4618      	mov	r0, r3
 800e108:	3714      	adds	r7, #20
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr

0800e112 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e112:	b580      	push	{r7, lr}
 800e114:	b086      	sub	sp, #24
 800e116:	af00      	add	r7, sp, #0
 800e118:	60f8      	str	r0, [r7, #12]
 800e11a:	60b9      	str	r1, [r7, #8]
 800e11c:	4613      	mov	r3, r2
 800e11e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e120:	2301      	movs	r3, #1
 800e122:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	789b      	ldrb	r3, [r3, #2]
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d002      	beq.n	800e132 <USBH_CtlReq+0x20>
 800e12c:	2b02      	cmp	r3, #2
 800e12e:	d00f      	beq.n	800e150 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e130:	e027      	b.n	800e182 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	68ba      	ldr	r2, [r7, #8]
 800e136:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	88fa      	ldrh	r2, [r7, #6]
 800e13c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2201      	movs	r2, #1
 800e142:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2202      	movs	r2, #2
 800e148:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e14a:	2301      	movs	r3, #1
 800e14c:	75fb      	strb	r3, [r7, #23]
      break;
 800e14e:	e018      	b.n	800e182 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e150:	68f8      	ldr	r0, [r7, #12]
 800e152:	f000 f81b 	bl	800e18c <USBH_HandleControl>
 800e156:	4603      	mov	r3, r0
 800e158:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e15a:	7dfb      	ldrb	r3, [r7, #23]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d002      	beq.n	800e166 <USBH_CtlReq+0x54>
 800e160:	7dfb      	ldrb	r3, [r7, #23]
 800e162:	2b03      	cmp	r3, #3
 800e164:	d106      	bne.n	800e174 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	2201      	movs	r2, #1
 800e16a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2200      	movs	r2, #0
 800e170:	761a      	strb	r2, [r3, #24]
      break;
 800e172:	e005      	b.n	800e180 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e174:	7dfb      	ldrb	r3, [r7, #23]
 800e176:	2b02      	cmp	r3, #2
 800e178:	d102      	bne.n	800e180 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2201      	movs	r2, #1
 800e17e:	709a      	strb	r2, [r3, #2]
      break;
 800e180:	bf00      	nop
  }
  return status;
 800e182:	7dfb      	ldrb	r3, [r7, #23]
}
 800e184:	4618      	mov	r0, r3
 800e186:	3718      	adds	r7, #24
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b086      	sub	sp, #24
 800e190:	af02      	add	r7, sp, #8
 800e192:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e194:	2301      	movs	r3, #1
 800e196:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e198:	2300      	movs	r3, #0
 800e19a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	7e1b      	ldrb	r3, [r3, #24]
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	2b0a      	cmp	r3, #10
 800e1a4:	f200 8156 	bhi.w	800e454 <USBH_HandleControl+0x2c8>
 800e1a8:	a201      	add	r2, pc, #4	; (adr r2, 800e1b0 <USBH_HandleControl+0x24>)
 800e1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ae:	bf00      	nop
 800e1b0:	0800e1dd 	.word	0x0800e1dd
 800e1b4:	0800e1f7 	.word	0x0800e1f7
 800e1b8:	0800e261 	.word	0x0800e261
 800e1bc:	0800e287 	.word	0x0800e287
 800e1c0:	0800e2bf 	.word	0x0800e2bf
 800e1c4:	0800e2e9 	.word	0x0800e2e9
 800e1c8:	0800e33b 	.word	0x0800e33b
 800e1cc:	0800e35d 	.word	0x0800e35d
 800e1d0:	0800e399 	.word	0x0800e399
 800e1d4:	0800e3bf 	.word	0x0800e3bf
 800e1d8:	0800e3fd 	.word	0x0800e3fd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f103 0110 	add.w	r1, r3, #16
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	795b      	ldrb	r3, [r3, #5]
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f000 f943 	bl	800e474 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2202      	movs	r2, #2
 800e1f2:	761a      	strb	r2, [r3, #24]
      break;
 800e1f4:	e139      	b.n	800e46a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	795b      	ldrb	r3, [r3, #5]
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f000 fcc5 	bl	800eb8c <USBH_LL_GetURBState>
 800e202:	4603      	mov	r3, r0
 800e204:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e206:	7bbb      	ldrb	r3, [r7, #14]
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d11e      	bne.n	800e24a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	7c1b      	ldrb	r3, [r3, #16]
 800e210:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e214:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	8adb      	ldrh	r3, [r3, #22]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00a      	beq.n	800e234 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e21e:	7b7b      	ldrb	r3, [r7, #13]
 800e220:	2b80      	cmp	r3, #128	; 0x80
 800e222:	d103      	bne.n	800e22c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2203      	movs	r2, #3
 800e228:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e22a:	e115      	b.n	800e458 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2205      	movs	r2, #5
 800e230:	761a      	strb	r2, [r3, #24]
      break;
 800e232:	e111      	b.n	800e458 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800e234:	7b7b      	ldrb	r3, [r7, #13]
 800e236:	2b80      	cmp	r3, #128	; 0x80
 800e238:	d103      	bne.n	800e242 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2209      	movs	r2, #9
 800e23e:	761a      	strb	r2, [r3, #24]
      break;
 800e240:	e10a      	b.n	800e458 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2207      	movs	r2, #7
 800e246:	761a      	strb	r2, [r3, #24]
      break;
 800e248:	e106      	b.n	800e458 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e24a:	7bbb      	ldrb	r3, [r7, #14]
 800e24c:	2b04      	cmp	r3, #4
 800e24e:	d003      	beq.n	800e258 <USBH_HandleControl+0xcc>
 800e250:	7bbb      	ldrb	r3, [r7, #14]
 800e252:	2b02      	cmp	r3, #2
 800e254:	f040 8100 	bne.w	800e458 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	220b      	movs	r2, #11
 800e25c:	761a      	strb	r2, [r3, #24]
      break;
 800e25e:	e0fb      	b.n	800e458 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e266:	b29a      	uxth	r2, r3
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6899      	ldr	r1, [r3, #8]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	899a      	ldrh	r2, [r3, #12]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	791b      	ldrb	r3, [r3, #4]
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f000 f93a 	bl	800e4f2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2204      	movs	r2, #4
 800e282:	761a      	strb	r2, [r3, #24]
      break;
 800e284:	e0f1      	b.n	800e46a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	791b      	ldrb	r3, [r3, #4]
 800e28a:	4619      	mov	r1, r3
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f000 fc7d 	bl	800eb8c <USBH_LL_GetURBState>
 800e292:	4603      	mov	r3, r0
 800e294:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e296:	7bbb      	ldrb	r3, [r7, #14]
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d102      	bne.n	800e2a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2209      	movs	r2, #9
 800e2a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e2a2:	7bbb      	ldrb	r3, [r7, #14]
 800e2a4:	2b05      	cmp	r3, #5
 800e2a6:	d102      	bne.n	800e2ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e2a8:	2303      	movs	r3, #3
 800e2aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e2ac:	e0d6      	b.n	800e45c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800e2ae:	7bbb      	ldrb	r3, [r7, #14]
 800e2b0:	2b04      	cmp	r3, #4
 800e2b2:	f040 80d3 	bne.w	800e45c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	220b      	movs	r2, #11
 800e2ba:	761a      	strb	r2, [r3, #24]
      break;
 800e2bc:	e0ce      	b.n	800e45c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6899      	ldr	r1, [r3, #8]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	899a      	ldrh	r2, [r3, #12]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	795b      	ldrb	r3, [r3, #5]
 800e2ca:	2001      	movs	r0, #1
 800e2cc:	9000      	str	r0, [sp, #0]
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 f8ea 	bl	800e4a8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e2da:	b29a      	uxth	r2, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2206      	movs	r2, #6
 800e2e4:	761a      	strb	r2, [r3, #24]
      break;
 800e2e6:	e0c0      	b.n	800e46a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	795b      	ldrb	r3, [r3, #5]
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 fc4c 	bl	800eb8c <USBH_LL_GetURBState>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e2f8:	7bbb      	ldrb	r3, [r7, #14]
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d103      	bne.n	800e306 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2207      	movs	r2, #7
 800e302:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e304:	e0ac      	b.n	800e460 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e306:	7bbb      	ldrb	r3, [r7, #14]
 800e308:	2b05      	cmp	r3, #5
 800e30a:	d105      	bne.n	800e318 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	220c      	movs	r2, #12
 800e310:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e312:	2303      	movs	r3, #3
 800e314:	73fb      	strb	r3, [r7, #15]
      break;
 800e316:	e0a3      	b.n	800e460 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e318:	7bbb      	ldrb	r3, [r7, #14]
 800e31a:	2b02      	cmp	r3, #2
 800e31c:	d103      	bne.n	800e326 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2205      	movs	r2, #5
 800e322:	761a      	strb	r2, [r3, #24]
      break;
 800e324:	e09c      	b.n	800e460 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e326:	7bbb      	ldrb	r3, [r7, #14]
 800e328:	2b04      	cmp	r3, #4
 800e32a:	f040 8099 	bne.w	800e460 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	220b      	movs	r2, #11
 800e332:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e334:	2302      	movs	r3, #2
 800e336:	73fb      	strb	r3, [r7, #15]
      break;
 800e338:	e092      	b.n	800e460 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	791b      	ldrb	r3, [r3, #4]
 800e33e:	2200      	movs	r2, #0
 800e340:	2100      	movs	r1, #0
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f000 f8d5 	bl	800e4f2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e34e:	b29a      	uxth	r2, r3
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2208      	movs	r2, #8
 800e358:	761a      	strb	r2, [r3, #24]

      break;
 800e35a:	e086      	b.n	800e46a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	791b      	ldrb	r3, [r3, #4]
 800e360:	4619      	mov	r1, r3
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f000 fc12 	bl	800eb8c <USBH_LL_GetURBState>
 800e368:	4603      	mov	r3, r0
 800e36a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e36c:	7bbb      	ldrb	r3, [r7, #14]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d105      	bne.n	800e37e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	220d      	movs	r2, #13
 800e376:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e378:	2300      	movs	r3, #0
 800e37a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e37c:	e072      	b.n	800e464 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e37e:	7bbb      	ldrb	r3, [r7, #14]
 800e380:	2b04      	cmp	r3, #4
 800e382:	d103      	bne.n	800e38c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	220b      	movs	r2, #11
 800e388:	761a      	strb	r2, [r3, #24]
      break;
 800e38a:	e06b      	b.n	800e464 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e38c:	7bbb      	ldrb	r3, [r7, #14]
 800e38e:	2b05      	cmp	r3, #5
 800e390:	d168      	bne.n	800e464 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e392:	2303      	movs	r3, #3
 800e394:	73fb      	strb	r3, [r7, #15]
      break;
 800e396:	e065      	b.n	800e464 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	795b      	ldrb	r3, [r3, #5]
 800e39c:	2201      	movs	r2, #1
 800e39e:	9200      	str	r2, [sp, #0]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f000 f87f 	bl	800e4a8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e3b0:	b29a      	uxth	r2, r3
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	220a      	movs	r2, #10
 800e3ba:	761a      	strb	r2, [r3, #24]
      break;
 800e3bc:	e055      	b.n	800e46a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	795b      	ldrb	r3, [r3, #5]
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f000 fbe1 	bl	800eb8c <USBH_LL_GetURBState>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e3ce:	7bbb      	ldrb	r3, [r7, #14]
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	d105      	bne.n	800e3e0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	220d      	movs	r2, #13
 800e3dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e3de:	e043      	b.n	800e468 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e3e0:	7bbb      	ldrb	r3, [r7, #14]
 800e3e2:	2b02      	cmp	r3, #2
 800e3e4:	d103      	bne.n	800e3ee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2209      	movs	r2, #9
 800e3ea:	761a      	strb	r2, [r3, #24]
      break;
 800e3ec:	e03c      	b.n	800e468 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e3ee:	7bbb      	ldrb	r3, [r7, #14]
 800e3f0:	2b04      	cmp	r3, #4
 800e3f2:	d139      	bne.n	800e468 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	220b      	movs	r2, #11
 800e3f8:	761a      	strb	r2, [r3, #24]
      break;
 800e3fa:	e035      	b.n	800e468 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	7e5b      	ldrb	r3, [r3, #25]
 800e400:	3301      	adds	r3, #1
 800e402:	b2da      	uxtb	r2, r3
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	765a      	strb	r2, [r3, #25]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	7e5b      	ldrb	r3, [r3, #25]
 800e40c:	2b02      	cmp	r3, #2
 800e40e:	d806      	bhi.n	800e41e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2201      	movs	r2, #1
 800e414:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2201      	movs	r2, #1
 800e41a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e41c:	e025      	b.n	800e46a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e424:	2106      	movs	r1, #6
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2200      	movs	r2, #0
 800e42e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	795b      	ldrb	r3, [r3, #5]
 800e434:	4619      	mov	r1, r3
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 f90c 	bl	800e654 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	791b      	ldrb	r3, [r3, #4]
 800e440:	4619      	mov	r1, r3
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f000 f906 	bl	800e654 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2200      	movs	r2, #0
 800e44c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e44e:	2302      	movs	r3, #2
 800e450:	73fb      	strb	r3, [r7, #15]
      break;
 800e452:	e00a      	b.n	800e46a <USBH_HandleControl+0x2de>

    default:
      break;
 800e454:	bf00      	nop
 800e456:	e008      	b.n	800e46a <USBH_HandleControl+0x2de>
      break;
 800e458:	bf00      	nop
 800e45a:	e006      	b.n	800e46a <USBH_HandleControl+0x2de>
      break;
 800e45c:	bf00      	nop
 800e45e:	e004      	b.n	800e46a <USBH_HandleControl+0x2de>
      break;
 800e460:	bf00      	nop
 800e462:	e002      	b.n	800e46a <USBH_HandleControl+0x2de>
      break;
 800e464:	bf00      	nop
 800e466:	e000      	b.n	800e46a <USBH_HandleControl+0x2de>
      break;
 800e468:	bf00      	nop
  }

  return status;
 800e46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b088      	sub	sp, #32
 800e478:	af04      	add	r7, sp, #16
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	4613      	mov	r3, r2
 800e480:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e482:	79f9      	ldrb	r1, [r7, #7]
 800e484:	2300      	movs	r3, #0
 800e486:	9303      	str	r3, [sp, #12]
 800e488:	2308      	movs	r3, #8
 800e48a:	9302      	str	r3, [sp, #8]
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	9301      	str	r3, [sp, #4]
 800e490:	2300      	movs	r3, #0
 800e492:	9300      	str	r3, [sp, #0]
 800e494:	2300      	movs	r3, #0
 800e496:	2200      	movs	r2, #0
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	f000 fb46 	bl	800eb2a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800e49e:	2300      	movs	r3, #0
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3710      	adds	r7, #16
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b088      	sub	sp, #32
 800e4ac:	af04      	add	r7, sp, #16
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	60b9      	str	r1, [r7, #8]
 800e4b2:	4611      	mov	r1, r2
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	460b      	mov	r3, r1
 800e4b8:	80fb      	strh	r3, [r7, #6]
 800e4ba:	4613      	mov	r3, r2
 800e4bc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d001      	beq.n	800e4cc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e4cc:	7979      	ldrb	r1, [r7, #5]
 800e4ce:	7e3b      	ldrb	r3, [r7, #24]
 800e4d0:	9303      	str	r3, [sp, #12]
 800e4d2:	88fb      	ldrh	r3, [r7, #6]
 800e4d4:	9302      	str	r3, [sp, #8]
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	9301      	str	r3, [sp, #4]
 800e4da:	2301      	movs	r3, #1
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	2300      	movs	r3, #0
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	68f8      	ldr	r0, [r7, #12]
 800e4e4:	f000 fb21 	bl	800eb2a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e4e8:	2300      	movs	r3, #0
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3710      	adds	r7, #16
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}

0800e4f2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e4f2:	b580      	push	{r7, lr}
 800e4f4:	b088      	sub	sp, #32
 800e4f6:	af04      	add	r7, sp, #16
 800e4f8:	60f8      	str	r0, [r7, #12]
 800e4fa:	60b9      	str	r1, [r7, #8]
 800e4fc:	4611      	mov	r1, r2
 800e4fe:	461a      	mov	r2, r3
 800e500:	460b      	mov	r3, r1
 800e502:	80fb      	strh	r3, [r7, #6]
 800e504:	4613      	mov	r3, r2
 800e506:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e508:	7979      	ldrb	r1, [r7, #5]
 800e50a:	2300      	movs	r3, #0
 800e50c:	9303      	str	r3, [sp, #12]
 800e50e:	88fb      	ldrh	r3, [r7, #6]
 800e510:	9302      	str	r3, [sp, #8]
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	9301      	str	r3, [sp, #4]
 800e516:	2301      	movs	r3, #1
 800e518:	9300      	str	r3, [sp, #0]
 800e51a:	2300      	movs	r3, #0
 800e51c:	2201      	movs	r2, #1
 800e51e:	68f8      	ldr	r0, [r7, #12]
 800e520:	f000 fb03 	bl	800eb2a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e524:	2300      	movs	r3, #0

}
 800e526:	4618      	mov	r0, r3
 800e528:	3710      	adds	r7, #16
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}

0800e52e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e52e:	b580      	push	{r7, lr}
 800e530:	b088      	sub	sp, #32
 800e532:	af04      	add	r7, sp, #16
 800e534:	60f8      	str	r0, [r7, #12]
 800e536:	60b9      	str	r1, [r7, #8]
 800e538:	4611      	mov	r1, r2
 800e53a:	461a      	mov	r2, r3
 800e53c:	460b      	mov	r3, r1
 800e53e:	80fb      	strh	r3, [r7, #6]
 800e540:	4613      	mov	r3, r2
 800e542:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d001      	beq.n	800e552 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e54e:	2300      	movs	r3, #0
 800e550:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e552:	7979      	ldrb	r1, [r7, #5]
 800e554:	7e3b      	ldrb	r3, [r7, #24]
 800e556:	9303      	str	r3, [sp, #12]
 800e558:	88fb      	ldrh	r3, [r7, #6]
 800e55a:	9302      	str	r3, [sp, #8]
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	9301      	str	r3, [sp, #4]
 800e560:	2301      	movs	r3, #1
 800e562:	9300      	str	r3, [sp, #0]
 800e564:	2302      	movs	r3, #2
 800e566:	2200      	movs	r2, #0
 800e568:	68f8      	ldr	r0, [r7, #12]
 800e56a:	f000 fade 	bl	800eb2a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e56e:	2300      	movs	r3, #0
}
 800e570:	4618      	mov	r0, r3
 800e572:	3710      	adds	r7, #16
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b088      	sub	sp, #32
 800e57c:	af04      	add	r7, sp, #16
 800e57e:	60f8      	str	r0, [r7, #12]
 800e580:	60b9      	str	r1, [r7, #8]
 800e582:	4611      	mov	r1, r2
 800e584:	461a      	mov	r2, r3
 800e586:	460b      	mov	r3, r1
 800e588:	80fb      	strh	r3, [r7, #6]
 800e58a:	4613      	mov	r3, r2
 800e58c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e58e:	7979      	ldrb	r1, [r7, #5]
 800e590:	2300      	movs	r3, #0
 800e592:	9303      	str	r3, [sp, #12]
 800e594:	88fb      	ldrh	r3, [r7, #6]
 800e596:	9302      	str	r3, [sp, #8]
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	9301      	str	r3, [sp, #4]
 800e59c:	2301      	movs	r3, #1
 800e59e:	9300      	str	r3, [sp, #0]
 800e5a0:	2302      	movs	r3, #2
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	68f8      	ldr	r0, [r7, #12]
 800e5a6:	f000 fac0 	bl	800eb2a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e5aa:	2300      	movs	r3, #0
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3710      	adds	r7, #16
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b086      	sub	sp, #24
 800e5b8:	af04      	add	r7, sp, #16
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	4608      	mov	r0, r1
 800e5be:	4611      	mov	r1, r2
 800e5c0:	461a      	mov	r2, r3
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	70fb      	strb	r3, [r7, #3]
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	70bb      	strb	r3, [r7, #2]
 800e5ca:	4613      	mov	r3, r2
 800e5cc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e5ce:	7878      	ldrb	r0, [r7, #1]
 800e5d0:	78ba      	ldrb	r2, [r7, #2]
 800e5d2:	78f9      	ldrb	r1, [r7, #3]
 800e5d4:	8b3b      	ldrh	r3, [r7, #24]
 800e5d6:	9302      	str	r3, [sp, #8]
 800e5d8:	7d3b      	ldrb	r3, [r7, #20]
 800e5da:	9301      	str	r3, [sp, #4]
 800e5dc:	7c3b      	ldrb	r3, [r7, #16]
 800e5de:	9300      	str	r3, [sp, #0]
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 fa53 	bl	800ea8e <USBH_LL_OpenPipe>

  return USBH_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b082      	sub	sp, #8
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800e5fe:	78fb      	ldrb	r3, [r7, #3]
 800e600:	4619      	mov	r1, r3
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f000 fa72 	bl	800eaec <USBH_LL_ClosePipe>

  return USBH_OK;
 800e608:	2300      	movs	r3, #0
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3708      	adds	r7, #8
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b084      	sub	sp, #16
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
 800e61a:	460b      	mov	r3, r1
 800e61c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f000 f836 	bl	800e690 <USBH_GetFreePipe>
 800e624:	4603      	mov	r3, r0
 800e626:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e628:	89fb      	ldrh	r3, [r7, #14]
 800e62a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e62e:	4293      	cmp	r3, r2
 800e630:	d00a      	beq.n	800e648 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800e632:	78fa      	ldrb	r2, [r7, #3]
 800e634:	89fb      	ldrh	r3, [r7, #14]
 800e636:	f003 030f 	and.w	r3, r3, #15
 800e63a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e63e:	6879      	ldr	r1, [r7, #4]
 800e640:	33e0      	adds	r3, #224	; 0xe0
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	440b      	add	r3, r1
 800e646:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e648:	89fb      	ldrh	r3, [r7, #14]
 800e64a:	b2db      	uxtb	r3, r3
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3710      	adds	r7, #16
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e654:	b480      	push	{r7}
 800e656:	b083      	sub	sp, #12
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	460b      	mov	r3, r1
 800e65e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e660:	78fb      	ldrb	r3, [r7, #3]
 800e662:	2b0a      	cmp	r3, #10
 800e664:	d80d      	bhi.n	800e682 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e666:	78fb      	ldrb	r3, [r7, #3]
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	33e0      	adds	r3, #224	; 0xe0
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	4413      	add	r3, r2
 800e670:	685a      	ldr	r2, [r3, #4]
 800e672:	78fb      	ldrb	r3, [r7, #3]
 800e674:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e678:	6879      	ldr	r1, [r7, #4]
 800e67a:	33e0      	adds	r3, #224	; 0xe0
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	440b      	add	r3, r1
 800e680:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e682:	2300      	movs	r3, #0
}
 800e684:	4618      	mov	r0, r3
 800e686:	370c      	adds	r7, #12
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr

0800e690 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e690:	b480      	push	{r7}
 800e692:	b085      	sub	sp, #20
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e698:	2300      	movs	r3, #0
 800e69a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e69c:	2300      	movs	r3, #0
 800e69e:	73fb      	strb	r3, [r7, #15]
 800e6a0:	e00f      	b.n	800e6c2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e6a2:	7bfb      	ldrb	r3, [r7, #15]
 800e6a4:	687a      	ldr	r2, [r7, #4]
 800e6a6:	33e0      	adds	r3, #224	; 0xe0
 800e6a8:	009b      	lsls	r3, r3, #2
 800e6aa:	4413      	add	r3, r2
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d102      	bne.n	800e6bc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e6b6:	7bfb      	ldrb	r3, [r7, #15]
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	e007      	b.n	800e6cc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800e6bc:	7bfb      	ldrb	r3, [r7, #15]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	73fb      	strb	r3, [r7, #15]
 800e6c2:	7bfb      	ldrb	r3, [r7, #15]
 800e6c4:	2b0a      	cmp	r3, #10
 800e6c6:	d9ec      	bls.n	800e6a2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e6c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3714      	adds	r7, #20
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d6:	4770      	bx	lr

0800e6d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e6dc:	2201      	movs	r2, #1
 800e6de:	490e      	ldr	r1, [pc, #56]	; (800e718 <MX_USB_HOST_Init+0x40>)
 800e6e0:	480e      	ldr	r0, [pc, #56]	; (800e71c <MX_USB_HOST_Init+0x44>)
 800e6e2:	f7fe fca1 	bl	800d028 <USBH_Init>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d001      	beq.n	800e6f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e6ec:	f7f3 fa22 	bl	8001b34 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800e6f0:	490b      	ldr	r1, [pc, #44]	; (800e720 <MX_USB_HOST_Init+0x48>)
 800e6f2:	480a      	ldr	r0, [pc, #40]	; (800e71c <MX_USB_HOST_Init+0x44>)
 800e6f4:	f7fe fd26 	bl	800d144 <USBH_RegisterClass>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d001      	beq.n	800e702 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e6fe:	f7f3 fa19 	bl	8001b34 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e702:	4806      	ldr	r0, [pc, #24]	; (800e71c <MX_USB_HOST_Init+0x44>)
 800e704:	f7fe fdaa 	bl	800d25c <USBH_Start>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d001      	beq.n	800e712 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e70e:	f7f3 fa11 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e712:	bf00      	nop
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	0800e739 	.word	0x0800e739
 800e71c:	20000560 	.word	0x20000560
 800e720:	20000154 	.word	0x20000154

0800e724 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e728:	4802      	ldr	r0, [pc, #8]	; (800e734 <MX_USB_HOST_Process+0x10>)
 800e72a:	f7fe fda7 	bl	800d27c <USBH_Process>
}
 800e72e:	bf00      	nop
 800e730:	bd80      	pop	{r7, pc}
 800e732:	bf00      	nop
 800e734:	20000560 	.word	0x20000560

0800e738 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	460b      	mov	r3, r1
 800e742:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e744:	78fb      	ldrb	r3, [r7, #3]
 800e746:	3b01      	subs	r3, #1
 800e748:	2b04      	cmp	r3, #4
 800e74a:	d819      	bhi.n	800e780 <USBH_UserProcess+0x48>
 800e74c:	a201      	add	r2, pc, #4	; (adr r2, 800e754 <USBH_UserProcess+0x1c>)
 800e74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e752:	bf00      	nop
 800e754:	0800e781 	.word	0x0800e781
 800e758:	0800e771 	.word	0x0800e771
 800e75c:	0800e781 	.word	0x0800e781
 800e760:	0800e779 	.word	0x0800e779
 800e764:	0800e769 	.word	0x0800e769
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e768:	4b09      	ldr	r3, [pc, #36]	; (800e790 <USBH_UserProcess+0x58>)
 800e76a:	2203      	movs	r2, #3
 800e76c:	701a      	strb	r2, [r3, #0]
  break;
 800e76e:	e008      	b.n	800e782 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e770:	4b07      	ldr	r3, [pc, #28]	; (800e790 <USBH_UserProcess+0x58>)
 800e772:	2202      	movs	r2, #2
 800e774:	701a      	strb	r2, [r3, #0]
  break;
 800e776:	e004      	b.n	800e782 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e778:	4b05      	ldr	r3, [pc, #20]	; (800e790 <USBH_UserProcess+0x58>)
 800e77a:	2201      	movs	r2, #1
 800e77c:	701a      	strb	r2, [r3, #0]
  break;
 800e77e:	e000      	b.n	800e782 <USBH_UserProcess+0x4a>

  default:
  break;
 800e780:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e782:	bf00      	nop
 800e784:	370c      	adds	r7, #12
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr
 800e78e:	bf00      	nop
 800e790:	20000201 	.word	0x20000201

0800e794 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b08a      	sub	sp, #40	; 0x28
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e79c:	f107 0314 	add.w	r3, r7, #20
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	601a      	str	r2, [r3, #0]
 800e7a4:	605a      	str	r2, [r3, #4]
 800e7a6:	609a      	str	r2, [r3, #8]
 800e7a8:	60da      	str	r2, [r3, #12]
 800e7aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e7b4:	d147      	bne.n	800e846 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	613b      	str	r3, [r7, #16]
 800e7ba:	4b25      	ldr	r3, [pc, #148]	; (800e850 <HAL_HCD_MspInit+0xbc>)
 800e7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7be:	4a24      	ldr	r2, [pc, #144]	; (800e850 <HAL_HCD_MspInit+0xbc>)
 800e7c0:	f043 0301 	orr.w	r3, r3, #1
 800e7c4:	6313      	str	r3, [r2, #48]	; 0x30
 800e7c6:	4b22      	ldr	r3, [pc, #136]	; (800e850 <HAL_HCD_MspInit+0xbc>)
 800e7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ca:	f003 0301 	and.w	r3, r3, #1
 800e7ce:	613b      	str	r3, [r7, #16]
 800e7d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800e7d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800e7e0:	f107 0314 	add.w	r3, r7, #20
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	481b      	ldr	r0, [pc, #108]	; (800e854 <HAL_HCD_MspInit+0xc0>)
 800e7e8:	f7f6 ff0e 	bl	8005608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800e7ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e7f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7f2:	2302      	movs	r3, #2
 800e7f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e7fe:	230a      	movs	r3, #10
 800e800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e802:	f107 0314 	add.w	r3, r7, #20
 800e806:	4619      	mov	r1, r3
 800e808:	4812      	ldr	r0, [pc, #72]	; (800e854 <HAL_HCD_MspInit+0xc0>)
 800e80a:	f7f6 fefd 	bl	8005608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e80e:	4b10      	ldr	r3, [pc, #64]	; (800e850 <HAL_HCD_MspInit+0xbc>)
 800e810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e812:	4a0f      	ldr	r2, [pc, #60]	; (800e850 <HAL_HCD_MspInit+0xbc>)
 800e814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e818:	6353      	str	r3, [r2, #52]	; 0x34
 800e81a:	2300      	movs	r3, #0
 800e81c:	60fb      	str	r3, [r7, #12]
 800e81e:	4b0c      	ldr	r3, [pc, #48]	; (800e850 <HAL_HCD_MspInit+0xbc>)
 800e820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e822:	4a0b      	ldr	r2, [pc, #44]	; (800e850 <HAL_HCD_MspInit+0xbc>)
 800e824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e828:	6453      	str	r3, [r2, #68]	; 0x44
 800e82a:	4b09      	ldr	r3, [pc, #36]	; (800e850 <HAL_HCD_MspInit+0xbc>)
 800e82c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e82e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e832:	60fb      	str	r3, [r7, #12]
 800e834:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e836:	2200      	movs	r2, #0
 800e838:	2100      	movs	r1, #0
 800e83a:	2043      	movs	r0, #67	; 0x43
 800e83c:	f7f6 fead 	bl	800559a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e840:	2043      	movs	r0, #67	; 0x43
 800e842:	f7f6 fec6 	bl	80055d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e846:	bf00      	nop
 800e848:	3728      	adds	r7, #40	; 0x28
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	40023800 	.word	0x40023800
 800e854:	40020000 	.word	0x40020000

0800e858 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e866:	4618      	mov	r0, r3
 800e868:	f7ff f8db 	bl	800da22 <USBH_LL_IncTimer>
}
 800e86c:	bf00      	nop
 800e86e:	3708      	adds	r7, #8
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e882:	4618      	mov	r0, r3
 800e884:	f7ff f913 	bl	800daae <USBH_LL_Connect>
}
 800e888:	bf00      	nop
 800e88a:	3708      	adds	r7, #8
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7ff f91c 	bl	800dadc <USBH_LL_Disconnect>
}
 800e8a4:	bf00      	nop
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b083      	sub	sp, #12
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	70fb      	strb	r3, [r7, #3]
 800e8b8:	4613      	mov	r3, r2
 800e8ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e8bc:	bf00      	nop
 800e8be:	370c      	adds	r7, #12
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7ff f8cd 	bl	800da76 <USBH_LL_PortEnabled>
}
 800e8dc:	bf00      	nop
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7ff f8cd 	bl	800da92 <USBH_LL_PortDisabled>
}
 800e8f8:	bf00      	nop
 800e8fa:	3708      	adds	r7, #8
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d12a      	bne.n	800e968 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e912:	4a18      	ldr	r2, [pc, #96]	; (800e974 <USBH_LL_Init+0x74>)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	4a15      	ldr	r2, [pc, #84]	; (800e974 <USBH_LL_Init+0x74>)
 800e91e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e922:	4b14      	ldr	r3, [pc, #80]	; (800e974 <USBH_LL_Init+0x74>)
 800e924:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e928:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e92a:	4b12      	ldr	r3, [pc, #72]	; (800e974 <USBH_LL_Init+0x74>)
 800e92c:	2208      	movs	r2, #8
 800e92e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e930:	4b10      	ldr	r3, [pc, #64]	; (800e974 <USBH_LL_Init+0x74>)
 800e932:	2201      	movs	r2, #1
 800e934:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e936:	4b0f      	ldr	r3, [pc, #60]	; (800e974 <USBH_LL_Init+0x74>)
 800e938:	2200      	movs	r2, #0
 800e93a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e93c:	4b0d      	ldr	r3, [pc, #52]	; (800e974 <USBH_LL_Init+0x74>)
 800e93e:	2202      	movs	r2, #2
 800e940:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e942:	4b0c      	ldr	r3, [pc, #48]	; (800e974 <USBH_LL_Init+0x74>)
 800e944:	2200      	movs	r2, #0
 800e946:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e948:	480a      	ldr	r0, [pc, #40]	; (800e974 <USBH_LL_Init+0x74>)
 800e94a:	f7f7 f844 	bl	80059d6 <HAL_HCD_Init>
 800e94e:	4603      	mov	r3, r0
 800e950:	2b00      	cmp	r3, #0
 800e952:	d001      	beq.n	800e958 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e954:	f7f3 f8ee 	bl	8001b34 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e958:	4806      	ldr	r0, [pc, #24]	; (800e974 <USBH_LL_Init+0x74>)
 800e95a:	f7f7 fc21 	bl	80061a0 <HAL_HCD_GetCurrentFrame>
 800e95e:	4603      	mov	r3, r0
 800e960:	4619      	mov	r1, r3
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f7ff f84e 	bl	800da04 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e968:	2300      	movs	r3, #0
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3708      	adds	r7, #8
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	20000938 	.word	0x20000938

0800e978 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e980:	2300      	movs	r3, #0
 800e982:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e984:	2300      	movs	r3, #0
 800e986:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e98e:	4618      	mov	r0, r3
 800e990:	f7f7 fb90 	bl	80060b4 <HAL_HCD_Start>
 800e994:	4603      	mov	r3, r0
 800e996:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e998:	7bfb      	ldrb	r3, [r7, #15]
 800e99a:	4618      	mov	r0, r3
 800e99c:	f000 f95c 	bl	800ec58 <USBH_Get_USB_Status>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3710      	adds	r7, #16
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}

0800e9ae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e9ae:	b580      	push	{r7, lr}
 800e9b0:	b084      	sub	sp, #16
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7f7 fb98 	bl	80060fa <HAL_HCD_Stop>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e9ce:	7bfb      	ldrb	r3, [r7, #15]
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f000 f941 	bl	800ec58 <USBH_Get_USB_Status>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9da:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3710      	adds	r7, #16
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}

0800e9e4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b084      	sub	sp, #16
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7f7 fbe0 	bl	80061bc <HAL_HCD_GetCurrentSpeed>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	2b02      	cmp	r3, #2
 800ea00:	d00c      	beq.n	800ea1c <USBH_LL_GetSpeed+0x38>
 800ea02:	2b02      	cmp	r3, #2
 800ea04:	d80d      	bhi.n	800ea22 <USBH_LL_GetSpeed+0x3e>
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d002      	beq.n	800ea10 <USBH_LL_GetSpeed+0x2c>
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	d003      	beq.n	800ea16 <USBH_LL_GetSpeed+0x32>
 800ea0e:	e008      	b.n	800ea22 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ea10:	2300      	movs	r3, #0
 800ea12:	73fb      	strb	r3, [r7, #15]
    break;
 800ea14:	e008      	b.n	800ea28 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ea16:	2301      	movs	r3, #1
 800ea18:	73fb      	strb	r3, [r7, #15]
    break;
 800ea1a:	e005      	b.n	800ea28 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ea1c:	2302      	movs	r3, #2
 800ea1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ea20:	e002      	b.n	800ea28 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ea22:	2301      	movs	r3, #1
 800ea24:	73fb      	strb	r3, [r7, #15]
    break;
 800ea26:	bf00      	nop
  }
  return  speed;
 800ea28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3710      	adds	r7, #16
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ea32:	b580      	push	{r7, lr}
 800ea34:	b084      	sub	sp, #16
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7f7 fb73 	bl	8006134 <HAL_HCD_ResetPort>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ea52:	7bfb      	ldrb	r3, [r7, #15]
 800ea54:	4618      	mov	r0, r3
 800ea56:	f000 f8ff 	bl	800ec58 <USBH_Get_USB_Status>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3710      	adds	r7, #16
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	460b      	mov	r3, r1
 800ea72:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ea7a:	78fa      	ldrb	r2, [r7, #3]
 800ea7c:	4611      	mov	r1, r2
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7f7 fb7a 	bl	8006178 <HAL_HCD_HC_GetXferCount>
 800ea84:	4603      	mov	r3, r0
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3708      	adds	r7, #8
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}

0800ea8e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ea8e:	b590      	push	{r4, r7, lr}
 800ea90:	b089      	sub	sp, #36	; 0x24
 800ea92:	af04      	add	r7, sp, #16
 800ea94:	6078      	str	r0, [r7, #4]
 800ea96:	4608      	mov	r0, r1
 800ea98:	4611      	mov	r1, r2
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	70fb      	strb	r3, [r7, #3]
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	70bb      	strb	r3, [r7, #2]
 800eaa4:	4613      	mov	r3, r2
 800eaa6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eaac:	2300      	movs	r3, #0
 800eaae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800eab6:	787c      	ldrb	r4, [r7, #1]
 800eab8:	78ba      	ldrb	r2, [r7, #2]
 800eaba:	78f9      	ldrb	r1, [r7, #3]
 800eabc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eabe:	9302      	str	r3, [sp, #8]
 800eac0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eac4:	9301      	str	r3, [sp, #4]
 800eac6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	4623      	mov	r3, r4
 800eace:	f7f6 ffe4 	bl	8005a9a <HAL_HCD_HC_Init>
 800ead2:	4603      	mov	r3, r0
 800ead4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ead6:	7bfb      	ldrb	r3, [r7, #15]
 800ead8:	4618      	mov	r0, r3
 800eada:	f000 f8bd 	bl	800ec58 <USBH_Get_USB_Status>
 800eade:	4603      	mov	r3, r0
 800eae0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eae2:	7bbb      	ldrb	r3, [r7, #14]
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3714      	adds	r7, #20
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd90      	pop	{r4, r7, pc}

0800eaec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eafc:	2300      	movs	r3, #0
 800eafe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb06:	78fa      	ldrb	r2, [r7, #3]
 800eb08:	4611      	mov	r1, r2
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7f7 f854 	bl	8005bb8 <HAL_HCD_HC_Halt>
 800eb10:	4603      	mov	r3, r0
 800eb12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eb14:	7bfb      	ldrb	r3, [r7, #15]
 800eb16:	4618      	mov	r0, r3
 800eb18:	f000 f89e 	bl	800ec58 <USBH_Get_USB_Status>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb20:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3710      	adds	r7, #16
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}

0800eb2a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800eb2a:	b590      	push	{r4, r7, lr}
 800eb2c:	b089      	sub	sp, #36	; 0x24
 800eb2e:	af04      	add	r7, sp, #16
 800eb30:	6078      	str	r0, [r7, #4]
 800eb32:	4608      	mov	r0, r1
 800eb34:	4611      	mov	r1, r2
 800eb36:	461a      	mov	r2, r3
 800eb38:	4603      	mov	r3, r0
 800eb3a:	70fb      	strb	r3, [r7, #3]
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	70bb      	strb	r3, [r7, #2]
 800eb40:	4613      	mov	r3, r2
 800eb42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb44:	2300      	movs	r3, #0
 800eb46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800eb52:	787c      	ldrb	r4, [r7, #1]
 800eb54:	78ba      	ldrb	r2, [r7, #2]
 800eb56:	78f9      	ldrb	r1, [r7, #3]
 800eb58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800eb5c:	9303      	str	r3, [sp, #12]
 800eb5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb60:	9302      	str	r3, [sp, #8]
 800eb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb64:	9301      	str	r3, [sp, #4]
 800eb66:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb6a:	9300      	str	r3, [sp, #0]
 800eb6c:	4623      	mov	r3, r4
 800eb6e:	f7f7 f847 	bl	8005c00 <HAL_HCD_HC_SubmitRequest>
 800eb72:	4603      	mov	r3, r0
 800eb74:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800eb76:	7bfb      	ldrb	r3, [r7, #15]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f000 f86d 	bl	800ec58 <USBH_Get_USB_Status>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb82:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3714      	adds	r7, #20
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd90      	pop	{r4, r7, pc}

0800eb8c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	460b      	mov	r3, r1
 800eb96:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb9e:	78fa      	ldrb	r2, [r7, #3]
 800eba0:	4611      	mov	r1, r2
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7f7 fad4 	bl	8006150 <HAL_HCD_HC_GetURBState>
 800eba8:	4603      	mov	r3, r0
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3708      	adds	r7, #8
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}

0800ebb2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ebb2:	b580      	push	{r7, lr}
 800ebb4:	b082      	sub	sp, #8
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
 800ebba:	460b      	mov	r3, r1
 800ebbc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d103      	bne.n	800ebd0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ebc8:	78fb      	ldrb	r3, [r7, #3]
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f000 f870 	bl	800ecb0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ebd0:	20c8      	movs	r0, #200	; 0xc8
 800ebd2:	f7f6 fbe3 	bl	800539c <HAL_Delay>
  return USBH_OK;
 800ebd6:	2300      	movs	r3, #0
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3708      	adds	r7, #8
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b085      	sub	sp, #20
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	460b      	mov	r3, r1
 800ebea:	70fb      	strb	r3, [r7, #3]
 800ebec:	4613      	mov	r3, r2
 800ebee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ebf6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ebf8:	78fb      	ldrb	r3, [r7, #3]
 800ebfa:	68fa      	ldr	r2, [r7, #12]
 800ebfc:	212c      	movs	r1, #44	; 0x2c
 800ebfe:	fb01 f303 	mul.w	r3, r1, r3
 800ec02:	4413      	add	r3, r2
 800ec04:	333b      	adds	r3, #59	; 0x3b
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d009      	beq.n	800ec20 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ec0c:	78fb      	ldrb	r3, [r7, #3]
 800ec0e:	68fa      	ldr	r2, [r7, #12]
 800ec10:	212c      	movs	r1, #44	; 0x2c
 800ec12:	fb01 f303 	mul.w	r3, r1, r3
 800ec16:	4413      	add	r3, r2
 800ec18:	3354      	adds	r3, #84	; 0x54
 800ec1a:	78ba      	ldrb	r2, [r7, #2]
 800ec1c:	701a      	strb	r2, [r3, #0]
 800ec1e:	e008      	b.n	800ec32 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ec20:	78fb      	ldrb	r3, [r7, #3]
 800ec22:	68fa      	ldr	r2, [r7, #12]
 800ec24:	212c      	movs	r1, #44	; 0x2c
 800ec26:	fb01 f303 	mul.w	r3, r1, r3
 800ec2a:	4413      	add	r3, r2
 800ec2c:	3355      	adds	r3, #85	; 0x55
 800ec2e:	78ba      	ldrb	r2, [r7, #2]
 800ec30:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ec32:	2300      	movs	r3, #0
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3714      	adds	r7, #20
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr

0800ec40 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f7f6 fba7 	bl	800539c <HAL_Delay>
}
 800ec4e:	bf00      	nop
 800ec50:	3708      	adds	r7, #8
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
	...

0800ec58 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b085      	sub	sp, #20
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	4603      	mov	r3, r0
 800ec60:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec62:	2300      	movs	r3, #0
 800ec64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ec66:	79fb      	ldrb	r3, [r7, #7]
 800ec68:	2b03      	cmp	r3, #3
 800ec6a:	d817      	bhi.n	800ec9c <USBH_Get_USB_Status+0x44>
 800ec6c:	a201      	add	r2, pc, #4	; (adr r2, 800ec74 <USBH_Get_USB_Status+0x1c>)
 800ec6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec72:	bf00      	nop
 800ec74:	0800ec85 	.word	0x0800ec85
 800ec78:	0800ec8b 	.word	0x0800ec8b
 800ec7c:	0800ec91 	.word	0x0800ec91
 800ec80:	0800ec97 	.word	0x0800ec97
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ec84:	2300      	movs	r3, #0
 800ec86:	73fb      	strb	r3, [r7, #15]
    break;
 800ec88:	e00b      	b.n	800eca2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ec8a:	2302      	movs	r3, #2
 800ec8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ec8e:	e008      	b.n	800eca2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ec90:	2301      	movs	r3, #1
 800ec92:	73fb      	strb	r3, [r7, #15]
    break;
 800ec94:	e005      	b.n	800eca2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ec96:	2302      	movs	r3, #2
 800ec98:	73fb      	strb	r3, [r7, #15]
    break;
 800ec9a:	e002      	b.n	800eca2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ec9c:	2302      	movs	r3, #2
 800ec9e:	73fb      	strb	r3, [r7, #15]
    break;
 800eca0:	bf00      	nop
  }
  return usb_status;
 800eca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3714      	adds	r7, #20
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr

0800ecb0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b084      	sub	sp, #16
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ecba:	79fb      	ldrb	r3, [r7, #7]
 800ecbc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ecbe:	79fb      	ldrb	r3, [r7, #7]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d102      	bne.n	800ecca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	73fb      	strb	r3, [r7, #15]
 800ecc8:	e001      	b.n	800ecce <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ecca:	2300      	movs	r3, #0
 800eccc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ecce:	7bfb      	ldrb	r3, [r7, #15]
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	2101      	movs	r1, #1
 800ecd4:	4803      	ldr	r0, [pc, #12]	; (800ece4 <MX_DriverVbusFS+0x34>)
 800ecd6:	f7f6 fe4b 	bl	8005970 <HAL_GPIO_WritePin>
}
 800ecda:	bf00      	nop
 800ecdc:	3710      	adds	r7, #16
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop
 800ece4:	40020800 	.word	0x40020800

0800ece8 <__errno>:
 800ece8:	4b01      	ldr	r3, [pc, #4]	; (800ecf0 <__errno+0x8>)
 800ecea:	6818      	ldr	r0, [r3, #0]
 800ecec:	4770      	bx	lr
 800ecee:	bf00      	nop
 800ecf0:	20000174 	.word	0x20000174

0800ecf4 <__libc_init_array>:
 800ecf4:	b570      	push	{r4, r5, r6, lr}
 800ecf6:	4d0d      	ldr	r5, [pc, #52]	; (800ed2c <__libc_init_array+0x38>)
 800ecf8:	4c0d      	ldr	r4, [pc, #52]	; (800ed30 <__libc_init_array+0x3c>)
 800ecfa:	1b64      	subs	r4, r4, r5
 800ecfc:	10a4      	asrs	r4, r4, #2
 800ecfe:	2600      	movs	r6, #0
 800ed00:	42a6      	cmp	r6, r4
 800ed02:	d109      	bne.n	800ed18 <__libc_init_array+0x24>
 800ed04:	4d0b      	ldr	r5, [pc, #44]	; (800ed34 <__libc_init_array+0x40>)
 800ed06:	4c0c      	ldr	r4, [pc, #48]	; (800ed38 <__libc_init_array+0x44>)
 800ed08:	f000 f91a 	bl	800ef40 <_init>
 800ed0c:	1b64      	subs	r4, r4, r5
 800ed0e:	10a4      	asrs	r4, r4, #2
 800ed10:	2600      	movs	r6, #0
 800ed12:	42a6      	cmp	r6, r4
 800ed14:	d105      	bne.n	800ed22 <__libc_init_array+0x2e>
 800ed16:	bd70      	pop	{r4, r5, r6, pc}
 800ed18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed1c:	4798      	blx	r3
 800ed1e:	3601      	adds	r6, #1
 800ed20:	e7ee      	b.n	800ed00 <__libc_init_array+0xc>
 800ed22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed26:	4798      	blx	r3
 800ed28:	3601      	adds	r6, #1
 800ed2a:	e7f2      	b.n	800ed12 <__libc_init_array+0x1e>
 800ed2c:	0800f4c4 	.word	0x0800f4c4
 800ed30:	0800f4c4 	.word	0x0800f4c4
 800ed34:	0800f4c4 	.word	0x0800f4c4
 800ed38:	0800f4c8 	.word	0x0800f4c8

0800ed3c <malloc>:
 800ed3c:	4b02      	ldr	r3, [pc, #8]	; (800ed48 <malloc+0xc>)
 800ed3e:	4601      	mov	r1, r0
 800ed40:	6818      	ldr	r0, [r3, #0]
 800ed42:	f000 b871 	b.w	800ee28 <_malloc_r>
 800ed46:	bf00      	nop
 800ed48:	20000174 	.word	0x20000174

0800ed4c <free>:
 800ed4c:	4b02      	ldr	r3, [pc, #8]	; (800ed58 <free+0xc>)
 800ed4e:	4601      	mov	r1, r0
 800ed50:	6818      	ldr	r0, [r3, #0]
 800ed52:	f000 b819 	b.w	800ed88 <_free_r>
 800ed56:	bf00      	nop
 800ed58:	20000174 	.word	0x20000174

0800ed5c <memcpy>:
 800ed5c:	440a      	add	r2, r1
 800ed5e:	4291      	cmp	r1, r2
 800ed60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ed64:	d100      	bne.n	800ed68 <memcpy+0xc>
 800ed66:	4770      	bx	lr
 800ed68:	b510      	push	{r4, lr}
 800ed6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed72:	4291      	cmp	r1, r2
 800ed74:	d1f9      	bne.n	800ed6a <memcpy+0xe>
 800ed76:	bd10      	pop	{r4, pc}

0800ed78 <memset>:
 800ed78:	4402      	add	r2, r0
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d100      	bne.n	800ed82 <memset+0xa>
 800ed80:	4770      	bx	lr
 800ed82:	f803 1b01 	strb.w	r1, [r3], #1
 800ed86:	e7f9      	b.n	800ed7c <memset+0x4>

0800ed88 <_free_r>:
 800ed88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed8a:	2900      	cmp	r1, #0
 800ed8c:	d048      	beq.n	800ee20 <_free_r+0x98>
 800ed8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed92:	9001      	str	r0, [sp, #4]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	f1a1 0404 	sub.w	r4, r1, #4
 800ed9a:	bfb8      	it	lt
 800ed9c:	18e4      	addlt	r4, r4, r3
 800ed9e:	f000 f8c1 	bl	800ef24 <__malloc_lock>
 800eda2:	4a20      	ldr	r2, [pc, #128]	; (800ee24 <_free_r+0x9c>)
 800eda4:	9801      	ldr	r0, [sp, #4]
 800eda6:	6813      	ldr	r3, [r2, #0]
 800eda8:	4615      	mov	r5, r2
 800edaa:	b933      	cbnz	r3, 800edba <_free_r+0x32>
 800edac:	6063      	str	r3, [r4, #4]
 800edae:	6014      	str	r4, [r2, #0]
 800edb0:	b003      	add	sp, #12
 800edb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800edb6:	f000 b8bb 	b.w	800ef30 <__malloc_unlock>
 800edba:	42a3      	cmp	r3, r4
 800edbc:	d90b      	bls.n	800edd6 <_free_r+0x4e>
 800edbe:	6821      	ldr	r1, [r4, #0]
 800edc0:	1862      	adds	r2, r4, r1
 800edc2:	4293      	cmp	r3, r2
 800edc4:	bf04      	itt	eq
 800edc6:	681a      	ldreq	r2, [r3, #0]
 800edc8:	685b      	ldreq	r3, [r3, #4]
 800edca:	6063      	str	r3, [r4, #4]
 800edcc:	bf04      	itt	eq
 800edce:	1852      	addeq	r2, r2, r1
 800edd0:	6022      	streq	r2, [r4, #0]
 800edd2:	602c      	str	r4, [r5, #0]
 800edd4:	e7ec      	b.n	800edb0 <_free_r+0x28>
 800edd6:	461a      	mov	r2, r3
 800edd8:	685b      	ldr	r3, [r3, #4]
 800edda:	b10b      	cbz	r3, 800ede0 <_free_r+0x58>
 800eddc:	42a3      	cmp	r3, r4
 800edde:	d9fa      	bls.n	800edd6 <_free_r+0x4e>
 800ede0:	6811      	ldr	r1, [r2, #0]
 800ede2:	1855      	adds	r5, r2, r1
 800ede4:	42a5      	cmp	r5, r4
 800ede6:	d10b      	bne.n	800ee00 <_free_r+0x78>
 800ede8:	6824      	ldr	r4, [r4, #0]
 800edea:	4421      	add	r1, r4
 800edec:	1854      	adds	r4, r2, r1
 800edee:	42a3      	cmp	r3, r4
 800edf0:	6011      	str	r1, [r2, #0]
 800edf2:	d1dd      	bne.n	800edb0 <_free_r+0x28>
 800edf4:	681c      	ldr	r4, [r3, #0]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	6053      	str	r3, [r2, #4]
 800edfa:	4421      	add	r1, r4
 800edfc:	6011      	str	r1, [r2, #0]
 800edfe:	e7d7      	b.n	800edb0 <_free_r+0x28>
 800ee00:	d902      	bls.n	800ee08 <_free_r+0x80>
 800ee02:	230c      	movs	r3, #12
 800ee04:	6003      	str	r3, [r0, #0]
 800ee06:	e7d3      	b.n	800edb0 <_free_r+0x28>
 800ee08:	6825      	ldr	r5, [r4, #0]
 800ee0a:	1961      	adds	r1, r4, r5
 800ee0c:	428b      	cmp	r3, r1
 800ee0e:	bf04      	itt	eq
 800ee10:	6819      	ldreq	r1, [r3, #0]
 800ee12:	685b      	ldreq	r3, [r3, #4]
 800ee14:	6063      	str	r3, [r4, #4]
 800ee16:	bf04      	itt	eq
 800ee18:	1949      	addeq	r1, r1, r5
 800ee1a:	6021      	streq	r1, [r4, #0]
 800ee1c:	6054      	str	r4, [r2, #4]
 800ee1e:	e7c7      	b.n	800edb0 <_free_r+0x28>
 800ee20:	b003      	add	sp, #12
 800ee22:	bd30      	pop	{r4, r5, pc}
 800ee24:	20000204 	.word	0x20000204

0800ee28 <_malloc_r>:
 800ee28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee2a:	1ccd      	adds	r5, r1, #3
 800ee2c:	f025 0503 	bic.w	r5, r5, #3
 800ee30:	3508      	adds	r5, #8
 800ee32:	2d0c      	cmp	r5, #12
 800ee34:	bf38      	it	cc
 800ee36:	250c      	movcc	r5, #12
 800ee38:	2d00      	cmp	r5, #0
 800ee3a:	4606      	mov	r6, r0
 800ee3c:	db01      	blt.n	800ee42 <_malloc_r+0x1a>
 800ee3e:	42a9      	cmp	r1, r5
 800ee40:	d903      	bls.n	800ee4a <_malloc_r+0x22>
 800ee42:	230c      	movs	r3, #12
 800ee44:	6033      	str	r3, [r6, #0]
 800ee46:	2000      	movs	r0, #0
 800ee48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee4a:	f000 f86b 	bl	800ef24 <__malloc_lock>
 800ee4e:	4921      	ldr	r1, [pc, #132]	; (800eed4 <_malloc_r+0xac>)
 800ee50:	680a      	ldr	r2, [r1, #0]
 800ee52:	4614      	mov	r4, r2
 800ee54:	b99c      	cbnz	r4, 800ee7e <_malloc_r+0x56>
 800ee56:	4f20      	ldr	r7, [pc, #128]	; (800eed8 <_malloc_r+0xb0>)
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	b923      	cbnz	r3, 800ee66 <_malloc_r+0x3e>
 800ee5c:	4621      	mov	r1, r4
 800ee5e:	4630      	mov	r0, r6
 800ee60:	f000 f83c 	bl	800eedc <_sbrk_r>
 800ee64:	6038      	str	r0, [r7, #0]
 800ee66:	4629      	mov	r1, r5
 800ee68:	4630      	mov	r0, r6
 800ee6a:	f000 f837 	bl	800eedc <_sbrk_r>
 800ee6e:	1c43      	adds	r3, r0, #1
 800ee70:	d123      	bne.n	800eeba <_malloc_r+0x92>
 800ee72:	230c      	movs	r3, #12
 800ee74:	6033      	str	r3, [r6, #0]
 800ee76:	4630      	mov	r0, r6
 800ee78:	f000 f85a 	bl	800ef30 <__malloc_unlock>
 800ee7c:	e7e3      	b.n	800ee46 <_malloc_r+0x1e>
 800ee7e:	6823      	ldr	r3, [r4, #0]
 800ee80:	1b5b      	subs	r3, r3, r5
 800ee82:	d417      	bmi.n	800eeb4 <_malloc_r+0x8c>
 800ee84:	2b0b      	cmp	r3, #11
 800ee86:	d903      	bls.n	800ee90 <_malloc_r+0x68>
 800ee88:	6023      	str	r3, [r4, #0]
 800ee8a:	441c      	add	r4, r3
 800ee8c:	6025      	str	r5, [r4, #0]
 800ee8e:	e004      	b.n	800ee9a <_malloc_r+0x72>
 800ee90:	6863      	ldr	r3, [r4, #4]
 800ee92:	42a2      	cmp	r2, r4
 800ee94:	bf0c      	ite	eq
 800ee96:	600b      	streq	r3, [r1, #0]
 800ee98:	6053      	strne	r3, [r2, #4]
 800ee9a:	4630      	mov	r0, r6
 800ee9c:	f000 f848 	bl	800ef30 <__malloc_unlock>
 800eea0:	f104 000b 	add.w	r0, r4, #11
 800eea4:	1d23      	adds	r3, r4, #4
 800eea6:	f020 0007 	bic.w	r0, r0, #7
 800eeaa:	1ac2      	subs	r2, r0, r3
 800eeac:	d0cc      	beq.n	800ee48 <_malloc_r+0x20>
 800eeae:	1a1b      	subs	r3, r3, r0
 800eeb0:	50a3      	str	r3, [r4, r2]
 800eeb2:	e7c9      	b.n	800ee48 <_malloc_r+0x20>
 800eeb4:	4622      	mov	r2, r4
 800eeb6:	6864      	ldr	r4, [r4, #4]
 800eeb8:	e7cc      	b.n	800ee54 <_malloc_r+0x2c>
 800eeba:	1cc4      	adds	r4, r0, #3
 800eebc:	f024 0403 	bic.w	r4, r4, #3
 800eec0:	42a0      	cmp	r0, r4
 800eec2:	d0e3      	beq.n	800ee8c <_malloc_r+0x64>
 800eec4:	1a21      	subs	r1, r4, r0
 800eec6:	4630      	mov	r0, r6
 800eec8:	f000 f808 	bl	800eedc <_sbrk_r>
 800eecc:	3001      	adds	r0, #1
 800eece:	d1dd      	bne.n	800ee8c <_malloc_r+0x64>
 800eed0:	e7cf      	b.n	800ee72 <_malloc_r+0x4a>
 800eed2:	bf00      	nop
 800eed4:	20000204 	.word	0x20000204
 800eed8:	20000208 	.word	0x20000208

0800eedc <_sbrk_r>:
 800eedc:	b538      	push	{r3, r4, r5, lr}
 800eede:	4d06      	ldr	r5, [pc, #24]	; (800eef8 <_sbrk_r+0x1c>)
 800eee0:	2300      	movs	r3, #0
 800eee2:	4604      	mov	r4, r0
 800eee4:	4608      	mov	r0, r1
 800eee6:	602b      	str	r3, [r5, #0]
 800eee8:	f7f3 f938 	bl	800215c <_sbrk>
 800eeec:	1c43      	adds	r3, r0, #1
 800eeee:	d102      	bne.n	800eef6 <_sbrk_r+0x1a>
 800eef0:	682b      	ldr	r3, [r5, #0]
 800eef2:	b103      	cbz	r3, 800eef6 <_sbrk_r+0x1a>
 800eef4:	6023      	str	r3, [r4, #0]
 800eef6:	bd38      	pop	{r3, r4, r5, pc}
 800eef8:	20000c3c 	.word	0x20000c3c

0800eefc <strncat>:
 800eefc:	b530      	push	{r4, r5, lr}
 800eefe:	4604      	mov	r4, r0
 800ef00:	7825      	ldrb	r5, [r4, #0]
 800ef02:	4623      	mov	r3, r4
 800ef04:	3401      	adds	r4, #1
 800ef06:	2d00      	cmp	r5, #0
 800ef08:	d1fa      	bne.n	800ef00 <strncat+0x4>
 800ef0a:	3a01      	subs	r2, #1
 800ef0c:	d304      	bcc.n	800ef18 <strncat+0x1c>
 800ef0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef12:	f803 4b01 	strb.w	r4, [r3], #1
 800ef16:	b904      	cbnz	r4, 800ef1a <strncat+0x1e>
 800ef18:	bd30      	pop	{r4, r5, pc}
 800ef1a:	2a00      	cmp	r2, #0
 800ef1c:	d1f5      	bne.n	800ef0a <strncat+0xe>
 800ef1e:	701a      	strb	r2, [r3, #0]
 800ef20:	e7f3      	b.n	800ef0a <strncat+0xe>
	...

0800ef24 <__malloc_lock>:
 800ef24:	4801      	ldr	r0, [pc, #4]	; (800ef2c <__malloc_lock+0x8>)
 800ef26:	f000 b809 	b.w	800ef3c <__retarget_lock_acquire_recursive>
 800ef2a:	bf00      	nop
 800ef2c:	20000c44 	.word	0x20000c44

0800ef30 <__malloc_unlock>:
 800ef30:	4801      	ldr	r0, [pc, #4]	; (800ef38 <__malloc_unlock+0x8>)
 800ef32:	f000 b804 	b.w	800ef3e <__retarget_lock_release_recursive>
 800ef36:	bf00      	nop
 800ef38:	20000c44 	.word	0x20000c44

0800ef3c <__retarget_lock_acquire_recursive>:
 800ef3c:	4770      	bx	lr

0800ef3e <__retarget_lock_release_recursive>:
 800ef3e:	4770      	bx	lr

0800ef40 <_init>:
 800ef40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef42:	bf00      	nop
 800ef44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef46:	bc08      	pop	{r3}
 800ef48:	469e      	mov	lr, r3
 800ef4a:	4770      	bx	lr

0800ef4c <_fini>:
 800ef4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef4e:	bf00      	nop
 800ef50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef52:	bc08      	pop	{r3}
 800ef54:	469e      	mov	lr, r3
 800ef56:	4770      	bx	lr
