
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed64  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800eeec  0800eeec  0001eeec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f450  0800f450  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f450  0800f450  0001f450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f458  0800f458  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f458  0800f458  0001f458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f45c  0800f45c  0001f45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800f460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a68  200001d8  0800f638  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c40  0800f638  00020c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026720  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050c4  00000000  00000000  00046928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  0004b9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018b8  00000000  00000000  0004d498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025db2  00000000  00000000  0004ed50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024abf  00000000  00000000  00074b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d79a5  00000000  00000000  000995c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170f66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007440  00000000  00000000  00170fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d8 	.word	0x200001d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800eed4 	.word	0x0800eed4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001dc 	.word	0x200001dc
 80001c4:	0800eed4 	.word	0x0800eed4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b78:	f000 b96e 	b.w	8000e58 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	468c      	mov	ip, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 8083 	bne.w	8000caa <__udivmoddi4+0x116>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d947      	bls.n	8000c3a <__udivmoddi4+0xa6>
 8000baa:	fab2 f282 	clz	r2, r2
 8000bae:	b142      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	f1c2 0020 	rsb	r0, r2, #32
 8000bb4:	fa24 f000 	lsr.w	r0, r4, r0
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	4097      	lsls	r7, r2
 8000bbc:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bcc:	fa1f fe87 	uxth.w	lr, r7
 8000bd0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000be6:	f080 8119 	bcs.w	8000e1c <__udivmoddi4+0x288>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8116 	bls.w	8000e1c <__udivmoddi4+0x288>
 8000bf0:	3e02      	subs	r6, #2
 8000bf2:	443b      	add	r3, r7
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c12:	f080 8105 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000c16:	45a6      	cmp	lr, r4
 8000c18:	f240 8102 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	443c      	add	r4, r7
 8000c20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c24:	eba4 040e 	sub.w	r4, r4, lr
 8000c28:	2600      	movs	r6, #0
 8000c2a:	b11d      	cbz	r5, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c5 4300 	strd	r4, r3, [r5]
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	b902      	cbnz	r2, 8000c3e <__udivmoddi4+0xaa>
 8000c3c:	deff      	udf	#255	; 0xff
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d150      	bne.n	8000ce8 <__udivmoddi4+0x154>
 8000c46:	1bcb      	subs	r3, r1, r7
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	2601      	movs	r6, #1
 8000c52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c56:	0c21      	lsrs	r1, r4, #16
 8000c58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c60:	fb08 f30c 	mul.w	r3, r8, ip
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000c68:	1879      	adds	r1, r7, r1
 8000c6a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0xe2>
 8000c70:	428b      	cmp	r3, r1
 8000c72:	f200 80e9 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000c76:	4684      	mov	ip, r0
 8000c78:	1ac9      	subs	r1, r1, r3
 8000c7a:	b2a3      	uxth	r3, r4
 8000c7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c88:	fb08 f800 	mul.w	r8, r8, r0
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x10c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x10a>
 8000c98:	45a0      	cmp	r8, r4
 8000c9a:	f200 80d9 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	eba4 0408 	sub.w	r4, r4, r8
 8000ca4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca8:	e7bf      	b.n	8000c2a <__udivmoddi4+0x96>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0x12e>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80b1 	beq.w	8000e16 <__udivmoddi4+0x282>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x1cc>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0x140>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80b8 	bhi.w	8000e44 <__udivmoddi4+0x2b0>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	468c      	mov	ip, r1
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0a8      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000ce2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000ce8:	f1c2 0320 	rsb	r3, r2, #32
 8000cec:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf0:	4097      	lsls	r7, r2
 8000cf2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cf6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfa:	40d9      	lsrs	r1, r3
 8000cfc:	4330      	orrs	r0, r6
 8000cfe:	0c03      	lsrs	r3, r0, #16
 8000d00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d10:	fb06 f108 	mul.w	r1, r6, r8
 8000d14:	4299      	cmp	r1, r3
 8000d16:	fa04 f402 	lsl.w	r4, r4, r2
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x19c>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d22:	f080 808d 	bcs.w	8000e40 <__udivmoddi4+0x2ac>
 8000d26:	4299      	cmp	r1, r3
 8000d28:	f240 808a 	bls.w	8000e40 <__udivmoddi4+0x2ac>
 8000d2c:	3e02      	subs	r6, #2
 8000d2e:	443b      	add	r3, r7
 8000d30:	1a5b      	subs	r3, r3, r1
 8000d32:	b281      	uxth	r1, r0
 8000d34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d40:	fb00 f308 	mul.w	r3, r0, r8
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x1c4>
 8000d48:	1879      	adds	r1, r7, r1
 8000d4a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d4e:	d273      	bcs.n	8000e38 <__udivmoddi4+0x2a4>
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d971      	bls.n	8000e38 <__udivmoddi4+0x2a4>
 8000d54:	3802      	subs	r0, #2
 8000d56:	4439      	add	r1, r7
 8000d58:	1acb      	subs	r3, r1, r3
 8000d5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d5e:	e778      	b.n	8000c52 <__udivmoddi4+0xbe>
 8000d60:	f1c6 0c20 	rsb	ip, r6, #32
 8000d64:	fa03 f406 	lsl.w	r4, r3, r6
 8000d68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d6c:	431c      	orrs	r4, r3
 8000d6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	0c3b      	lsrs	r3, r7, #16
 8000d82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d86:	fa1f f884 	uxth.w	r8, r4
 8000d8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d92:	fb09 fa08 	mul.w	sl, r9, r8
 8000d96:	458a      	cmp	sl, r1
 8000d98:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x220>
 8000da2:	1861      	adds	r1, r4, r1
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000da8:	d248      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000daa:	458a      	cmp	sl, r1
 8000dac:	d946      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000dae:	f1a9 0902 	sub.w	r9, r9, #2
 8000db2:	4421      	add	r1, r4
 8000db4:	eba1 010a 	sub.w	r1, r1, sl
 8000db8:	b2bf      	uxth	r7, r7
 8000dba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dc6:	fb00 f808 	mul.w	r8, r0, r8
 8000dca:	45b8      	cmp	r8, r7
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x24a>
 8000dce:	19e7      	adds	r7, r4, r7
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d22e      	bcs.n	8000e34 <__udivmoddi4+0x2a0>
 8000dd6:	45b8      	cmp	r8, r7
 8000dd8:	d92c      	bls.n	8000e34 <__udivmoddi4+0x2a0>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	4427      	add	r7, r4
 8000dde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de2:	eba7 0708 	sub.w	r7, r7, r8
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	454f      	cmp	r7, r9
 8000dec:	46c6      	mov	lr, r8
 8000dee:	4649      	mov	r1, r9
 8000df0:	d31a      	bcc.n	8000e28 <__udivmoddi4+0x294>
 8000df2:	d017      	beq.n	8000e24 <__udivmoddi4+0x290>
 8000df4:	b15d      	cbz	r5, 8000e0e <__udivmoddi4+0x27a>
 8000df6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dfa:	eb67 0701 	sbc.w	r7, r7, r1
 8000dfe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e02:	40f2      	lsrs	r2, r6
 8000e04:	ea4c 0202 	orr.w	r2, ip, r2
 8000e08:	40f7      	lsrs	r7, r6
 8000e0a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e0e:	2600      	movs	r6, #0
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	462e      	mov	r6, r5
 8000e18:	4628      	mov	r0, r5
 8000e1a:	e70b      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	e6e9      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e20:	4618      	mov	r0, r3
 8000e22:	e6fd      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e24:	4543      	cmp	r3, r8
 8000e26:	d2e5      	bcs.n	8000df4 <__udivmoddi4+0x260>
 8000e28:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e2c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e30:	3801      	subs	r0, #1
 8000e32:	e7df      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e7d2      	b.n	8000dde <__udivmoddi4+0x24a>
 8000e38:	4660      	mov	r0, ip
 8000e3a:	e78d      	b.n	8000d58 <__udivmoddi4+0x1c4>
 8000e3c:	4681      	mov	r9, r0
 8000e3e:	e7b9      	b.n	8000db4 <__udivmoddi4+0x220>
 8000e40:	4666      	mov	r6, ip
 8000e42:	e775      	b.n	8000d30 <__udivmoddi4+0x19c>
 8000e44:	4630      	mov	r0, r6
 8000e46:	e74a      	b.n	8000cde <__udivmoddi4+0x14a>
 8000e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4c:	4439      	add	r1, r7
 8000e4e:	e713      	b.n	8000c78 <__udivmoddi4+0xe4>
 8000e50:	3802      	subs	r0, #2
 8000e52:	443c      	add	r4, r7
 8000e54:	e724      	b.n	8000ca0 <__udivmoddi4+0x10c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
	char digith = 0;;
 8000e62:	2300      	movs	r3, #0
 8000e64:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 8000e66:	f000 f853 	bl	8000f10 <read_one_digit_from_keyboard>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b23      	cmp	r3, #35	; 0x23
 8000e72:	d10a      	bne.n	8000e8a <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 8000e74:	221e      	movs	r2, #30
 8000e76:	2100      	movs	r1, #0
 8000e78:	4824      	ldr	r0, [pc, #144]	; (8000f0c <read_digits+0xb0>)
 8000e7a:	f00d ff47 	bl	800ed0c <memset>
		keyboard.read_digits_position = 0;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <read_digits+0xb0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <read_digits+0xb0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8000e8e:	d109      	bne.n	8000ea4 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <read_digits+0xb0>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 8000e98:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <read_digits+0xb0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <read_digits+0xb0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d028      	beq.n	8000efc <read_digits+0xa0>
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b23      	cmp	r3, #35	; 0x23
 8000eae:	d025      	beq.n	8000efc <read_digits+0xa0>
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8000eb4:	d022      	beq.n	8000efc <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <read_digits+0xb0>)
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <read_digits+0xb0>)
 8000ebc:	7f92      	ldrb	r2, [r2, #30]
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	dc11      	bgt.n	8000ee6 <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <read_digits+0xb0>)
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	4911      	ldr	r1, [pc, #68]	; (8000f0c <read_digits+0xb0>)
 8000ec8:	79fa      	ldrb	r2, [r7, #7]
 8000eca:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <read_digits+0xb0>)
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <read_digits+0xb0>)
 8000ed4:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <read_digits+0xb0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <read_digits+0xb0>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000ee4:	e00e      	b.n	8000f04 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <read_digits+0xb0>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <read_digits+0xb0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <read_digits+0xb0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000efa:	e003      	b.n	8000f04 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <read_digits+0xb0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	77da      	strb	r2, [r3, #31]
	}
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2000020c 	.word	0x2000020c

08000f10 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
	char digit = '\0';
 8000f16:	2300      	movs	r3, #0
 8000f18:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f20:	48cf      	ldr	r0, [pc, #828]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f22:	f004 fcef 	bl	8005904 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2c:	48cc      	ldr	r0, [pc, #816]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f2e:	f004 fce9 	bl	8005904 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f38:	48c9      	ldr	r0, [pc, #804]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f3a:	f004 fce3 	bl	8005904 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f44:	48c6      	ldr	r0, [pc, #792]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f46:	f004 fcdd 	bl	8005904 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000f4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f4e:	48c5      	ldr	r0, [pc, #788]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8000f50:	f004 fcc0 	bl	80058d4 <HAL_GPIO_ReadPin>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d169      	bne.n	800102e <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f60:	48bf      	ldr	r0, [pc, #764]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f62:	f004 fccf 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	48bc      	ldr	r0, [pc, #752]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f6e:	f004 fcc9 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f78:	48b9      	ldr	r0, [pc, #740]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f7a:	f004 fcc3 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f84:	48b6      	ldr	r0, [pc, #728]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000f86:	f004 fcbd 	bl	8005904 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000f8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8e:	48b5      	ldr	r0, [pc, #724]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8000f90:	f004 fca0 	bl	80058d4 <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 8000f9a:	2331      	movs	r3, #49	; 0x31
 8000f9c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa4:	48ae      	ldr	r0, [pc, #696]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000fa6:	f004 fcad 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb0:	48ab      	ldr	r0, [pc, #684]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000fb2:	f004 fca7 	bl	8005904 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000fb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fba:	48aa      	ldr	r0, [pc, #680]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8000fbc:	f004 fc8a 	bl	80058d4 <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 8000fc6:	2334      	movs	r3, #52	; 0x34
 8000fc8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd0:	48a3      	ldr	r0, [pc, #652]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000fd2:	f004 fc97 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fdc:	48a0      	ldr	r0, [pc, #640]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000fde:	f004 fc91 	bl	8005904 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000fe2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe6:	489f      	ldr	r0, [pc, #636]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8000fe8:	f004 fc74 	bl	80058d4 <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 8000ff2:	2337      	movs	r3, #55	; 0x37
 8000ff4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffc:	4898      	ldr	r0, [pc, #608]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8000ffe:	f004 fc81 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001008:	4895      	ldr	r0, [pc, #596]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800100a:	f004 fc7b 	bl	8005904 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800100e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001012:	4894      	ldr	r0, [pc, #592]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8001014:	f004 fc5e 	bl	80058d4 <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 800101e:	232a      	movs	r3, #42	; 0x2a
 8001020:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001028:	488d      	ldr	r0, [pc, #564]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800102a:	f004 fc6b 	bl	8005904 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001034:	488a      	ldr	r0, [pc, #552]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001036:	f004 fc65 	bl	8005904 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001040:	4887      	ldr	r0, [pc, #540]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001042:	f004 fc5f 	bl	8005904 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104c:	4884      	ldr	r0, [pc, #528]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800104e:	f004 fc59 	bl	8005904 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001058:	4881      	ldr	r0, [pc, #516]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800105a:	f004 fc53 	bl	8005904 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 800105e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001062:	4880      	ldr	r0, [pc, #512]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8001064:	f004 fc36 	bl	80058d4 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d169      	bne.n	8001142 <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001074:	487a      	ldr	r0, [pc, #488]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001076:	f004 fc45 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001080:	4877      	ldr	r0, [pc, #476]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001082:	f004 fc3f 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
 8001088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108c:	4874      	ldr	r0, [pc, #464]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800108e:	f004 fc39 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001098:	4871      	ldr	r0, [pc, #452]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800109a:	f004 fc33 	bl	8005904 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800109e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a2:	4870      	ldr	r0, [pc, #448]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 80010a4:	f004 fc16 	bl	80058d4 <HAL_GPIO_ReadPin>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 80010ae:	2332      	movs	r3, #50	; 0x32
 80010b0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b8:	4869      	ldr	r0, [pc, #420]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80010ba:	f004 fc23 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c4:	4866      	ldr	r0, [pc, #408]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80010c6:	f004 fc1d 	bl	8005904 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80010ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ce:	4865      	ldr	r0, [pc, #404]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 80010d0:	f004 fc00 	bl	80058d4 <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 80010da:	2335      	movs	r3, #53	; 0x35
 80010dc:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e4:	485e      	ldr	r0, [pc, #376]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80010e6:	f004 fc0d 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f0:	485b      	ldr	r0, [pc, #364]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80010f2:	f004 fc07 	bl	8005904 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80010f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fa:	485a      	ldr	r0, [pc, #360]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 80010fc:	f004 fbea 	bl	80058d4 <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 8001106:	2338      	movs	r3, #56	; 0x38
 8001108:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001110:	4853      	ldr	r0, [pc, #332]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001112:	f004 fbf7 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111c:	4850      	ldr	r0, [pc, #320]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800111e:	f004 fbf1 	bl	8005904 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001126:	484f      	ldr	r0, [pc, #316]	; (8001264 <read_one_digit_from_keyboard+0x354>)
 8001128:	f004 fbd4 	bl	80058d4 <HAL_GPIO_ReadPin>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 8001132:	2330      	movs	r3, #48	; 0x30
 8001134:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113c:	4848      	ldr	r0, [pc, #288]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800113e:	f004 fbe1 	bl	8005904 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001148:	4845      	ldr	r0, [pc, #276]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800114a:	f004 fbdb 	bl	8005904 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001154:	4842      	ldr	r0, [pc, #264]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001156:	f004 fbd5 	bl	8005904 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001160:	483f      	ldr	r0, [pc, #252]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001162:	f004 fbcf 	bl	8005904 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	483c      	ldr	r0, [pc, #240]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800116e:	f004 fbc9 	bl	8005904 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001172:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001176:	483c      	ldr	r0, [pc, #240]	; (8001268 <read_one_digit_from_keyboard+0x358>)
 8001178:	f004 fbac 	bl	80058d4 <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d169      	bne.n	8001256 <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001188:	4835      	ldr	r0, [pc, #212]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 800118a:	f004 fbbb 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800118e:	2201      	movs	r2, #1
 8001190:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001194:	4832      	ldr	r0, [pc, #200]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001196:	f004 fbb5 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a0:	482f      	ldr	r0, [pc, #188]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80011a2:	f004 fbaf 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ac:	482c      	ldr	r0, [pc, #176]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80011ae:	f004 fba9 	bl	8005904 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80011b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b6:	482c      	ldr	r0, [pc, #176]	; (8001268 <read_one_digit_from_keyboard+0x358>)
 80011b8:	f004 fb8c 	bl	80058d4 <HAL_GPIO_ReadPin>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 80011c2:	2333      	movs	r3, #51	; 0x33
 80011c4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011cc:	4824      	ldr	r0, [pc, #144]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80011ce:	f004 fb99 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d8:	4821      	ldr	r0, [pc, #132]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80011da:	f004 fb93 	bl	8005904 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80011de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e2:	4821      	ldr	r0, [pc, #132]	; (8001268 <read_one_digit_from_keyboard+0x358>)
 80011e4:	f004 fb76 	bl	80058d4 <HAL_GPIO_ReadPin>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 80011ee:	2336      	movs	r3, #54	; 0x36
 80011f0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f8:	4819      	ldr	r0, [pc, #100]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 80011fa:	f004 fb83 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001204:	4816      	ldr	r0, [pc, #88]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001206:	f004 fb7d 	bl	8005904 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800120a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120e:	4816      	ldr	r0, [pc, #88]	; (8001268 <read_one_digit_from_keyboard+0x358>)
 8001210:	f004 fb60 	bl	80058d4 <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 800121a:	2339      	movs	r3, #57	; 0x39
 800121c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001224:	480e      	ldr	r0, [pc, #56]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001226:	f004 fb6d 	bl	8005904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001230:	480b      	ldr	r0, [pc, #44]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001232:	f004 fb67 	bl	8005904 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001236:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800123a:	480b      	ldr	r0, [pc, #44]	; (8001268 <read_one_digit_from_keyboard+0x358>)
 800123c:	f004 fb4a 	bl	80058d4 <HAL_GPIO_ReadPin>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 8001246:	2323      	movs	r3, #35	; 0x23
 8001248:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <read_one_digit_from_keyboard+0x350>)
 8001252:	f004 fb57 	bl	8005904 <HAL_GPIO_WritePin>
	}
	return digit;
 8001256:	79fb      	ldrb	r3, [r7, #7]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40020400 	.word	0x40020400
 8001268:	40021000 	.word	0x40021000

0800126c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001272:	f003 ffeb 	bl	800524c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001276:	f000 f841 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127a:	f000 faf3 	bl	8001864 <MX_GPIO_Init>
  MX_I2S3_Init();
 800127e:	f000 f927 	bl	80014d0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001282:	f000 f969 	bl	8001558 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001286:	f00d f9f1 	bl	800e66c <MX_USB_HOST_Init>
  MX_TIM2_Init();
 800128a:	f000 fa29 	bl	80016e0 <MX_TIM2_Init>
  MX_SPI2_Init();
 800128e:	f000 f999 	bl	80015c4 <MX_SPI2_Init>
  MX_RNG_Init();
 8001292:	f000 f94d 	bl	8001530 <MX_RNG_Init>
  MX_TIM3_Init();
 8001296:	f000 fa71 	bl	800177c <MX_TIM3_Init>
  MX_TIM1_Init();
 800129a:	f000 f9c9 	bl	8001630 <MX_TIM1_Init>
  MX_I2C3_Init();
 800129e:	f000 f8e9 	bl	8001474 <MX_I2C3_Init>
  MX_I2C2_Init();
 80012a2:	f000 f8b9 	bl	8001418 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80012a6:	f000 f8ab 	bl	8001400 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 80012aa:	f001 fa0b 	bl	80026c4 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f001 fbae 	bl	8002a10 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 80012b4:	2003      	movs	r0, #3
 80012b6:	f001 f9a7 	bl	8002608 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 80012ba:	2000      	movs	r0, #0
 80012bc:	f001 fba8 	bl	8002a10 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 80012c0:	2364      	movs	r3, #100	; 0x64
 80012c2:	607b      	str	r3, [r7, #4]
  speed_test_LCD(number_of_tests);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f002 fa6f 	bl	80037a8 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f001 fba0 	bl	8002a10 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 80012d0:	4808      	ldr	r0, [pc, #32]	; (80012f4 <main+0x88>)
 80012d2:	f009 fa91 	bl	800a7f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80012d6:	2100      	movs	r1, #0
 80012d8:	4806      	ldr	r0, [pc, #24]	; (80012f4 <main+0x88>)
 80012da:	f009 fafd 	bl	800a8d8 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <main+0x8c>)
 80012e0:	220a      	movs	r2, #10
 80012e2:	779a      	strb	r2, [r3, #30]
  // Encoder /////////////////////////////////////////
//  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
//  int32_t prevCounter = 0;
  ////////////////////////////////////////////////////

  detect_all_sensors_and_init();			// Detect all devices which connected to i2c2 and i2c3
 80012e4:	f003 fd46 	bl	8004d74 <detect_all_sensors_and_init>
	  /////////////////////////////////////////////////////////////////


	  //I2C_3_scaner();

	 menu();
 80012e8:	f001 fcdc 	bl	8002ca4 <menu>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80012ec:	f00d f9e4 	bl	800e6b8 <MX_USB_HOST_Process>
	 menu();
 80012f0:	e7fa      	b.n	80012e8 <main+0x7c>
 80012f2:	bf00      	nop
 80012f4:	20000334 	.word	0x20000334
 80012f8:	2000020c 	.word	0x2000020c

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b098      	sub	sp, #96	; 0x60
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001306:	2230      	movs	r2, #48	; 0x30
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f00d fcfe 	bl	800ed0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <SystemClock_Config+0xfc>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a30      	ldr	r2, [pc, #192]	; (80013f8 <SystemClock_Config+0xfc>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <SystemClock_Config+0xfc>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <SystemClock_Config+0x100>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a2a      	ldr	r2, [pc, #168]	; (80013fc <SystemClock_Config+0x100>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b28      	ldr	r3, [pc, #160]	; (80013fc <SystemClock_Config+0x100>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001366:	2301      	movs	r3, #1
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001370:	2302      	movs	r3, #2
 8001372:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001374:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001378:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800137a:	2308      	movs	r3, #8
 800137c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800137e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001382:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001384:	2302      	movs	r3, #2
 8001386:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001388:	2307      	movs	r3, #7
 800138a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001390:	4618      	mov	r0, r3
 8001392:	f008 f923 	bl	80095dc <HAL_RCC_OscConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800139c:	f000 fbca 	bl	8001b34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a0:	230f      	movs	r3, #15
 80013a2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a4:	2302      	movs	r3, #2
 80013a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	2105      	movs	r1, #5
 80013be:	4618      	mov	r0, r3
 80013c0:	f008 fb84 	bl	8009acc <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013ca:	f000 fbb3 	bl	8001b34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013ce:	2301      	movs	r3, #1
 80013d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80013d2:	23c0      	movs	r3, #192	; 0xc0
 80013d4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	4618      	mov	r0, r3
 80013e0:	f008 fd5c 	bl	8009e9c <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80013ea:	f000 fba3 	bl	8001b34 <Error_Handler>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3760      	adds	r7, #96	; 0x60
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40007000 	.word	0x40007000

08001400 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2100      	movs	r1, #0
 8001408:	201c      	movs	r0, #28
 800140a:	f004 f890 	bl	800552e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800140e:	201c      	movs	r0, #28
 8001410:	f004 f8a9 	bl	8005566 <HAL_NVIC_EnableIRQ>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_I2C2_Init+0x50>)
 800141e:	4a13      	ldr	r2, [pc, #76]	; (800146c <MX_I2C2_Init+0x54>)
 8001420:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_I2C2_Init+0x50>)
 8001424:	4a12      	ldr	r2, [pc, #72]	; (8001470 <MX_I2C2_Init+0x58>)
 8001426:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_I2C2_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_I2C2_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_I2C2_Init+0x50>)
 8001436:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800143a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <MX_I2C2_Init+0x50>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_I2C2_Init+0x50>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <MX_I2C2_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_I2C2_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_I2C2_Init+0x50>)
 8001456:	f005 ffed 	bl	8007434 <HAL_I2C_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001460:	f000 fb68 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200002e0 	.word	0x200002e0
 800146c:	40005800 	.word	0x40005800
 8001470:	000186a0 	.word	0x000186a0

08001474 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_I2C3_Init+0x50>)
 800147a:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <MX_I2C3_Init+0x54>)
 800147c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_I2C3_Init+0x50>)
 8001480:	4a12      	ldr	r2, [pc, #72]	; (80014cc <MX_I2C3_Init+0x58>)
 8001482:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_I2C3_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_I2C3_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_I2C3_Init+0x50>)
 8001492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001496:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MX_I2C3_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_I2C3_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <MX_I2C3_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_I2C3_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_I2C3_Init+0x50>)
 80014b2:	f005 ffbf 	bl	8007434 <HAL_I2C_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014bc:	f000 fb3a 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000234 	.word	0x20000234
 80014c8:	40005c00 	.word	0x40005c00
 80014cc:	000186a0 	.word	0x000186a0

080014d0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <MX_I2S3_Init+0x54>)
 80014d6:	4a14      	ldr	r2, [pc, #80]	; (8001528 <MX_I2S3_Init+0x58>)
 80014d8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <MX_I2S3_Init+0x54>)
 80014dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <MX_I2S3_Init+0x54>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_I2S3_Init+0x54>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <MX_I2S3_Init+0x54>)
 80014f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <MX_I2S3_Init+0x54>)
 80014f8:	4a0c      	ldr	r2, [pc, #48]	; (800152c <MX_I2S3_Init+0x5c>)
 80014fa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_I2S3_Init+0x54>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_I2S3_Init+0x54>)
 8001504:	2200      	movs	r2, #0
 8001506:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_I2S3_Init+0x54>)
 800150a:	2200      	movs	r2, #0
 800150c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_I2S3_Init+0x54>)
 8001510:	f007 fbc4 	bl	8008c9c <HAL_I2S_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800151a:	f000 fb0b 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000474 	.word	0x20000474
 8001528:	40003c00 	.word	0x40003c00
 800152c:	00017700 	.word	0x00017700

08001530 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_RNG_Init+0x20>)
 8001536:	4a07      	ldr	r2, [pc, #28]	; (8001554 <MX_RNG_Init+0x24>)
 8001538:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_RNG_Init+0x20>)
 800153c:	f008 fdee 	bl	800a11c <HAL_RNG_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001546:	f000 faf5 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200003c4 	.word	0x200003c4
 8001554:	50060800 	.word	0x50060800

08001558 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <MX_SPI1_Init+0x64>)
 800155e:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <MX_SPI1_Init+0x68>)
 8001560:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <MX_SPI1_Init+0x64>)
 8001564:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001568:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MX_SPI1_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <MX_SPI1_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_SPI1_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_SPI1_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_SPI1_Init+0x64>)
 8001584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001588:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_SPI1_Init+0x64>)
 800158c:	2200      	movs	r2, #0
 800158e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <MX_SPI1_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_SPI1_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <MX_SPI1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_SPI1_Init+0x64>)
 80015a4:	220a      	movs	r2, #10
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <MX_SPI1_Init+0x64>)
 80015aa:	f008 fe45 	bl	800a238 <HAL_SPI_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015b4:	f000 fabe 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200003d4 	.word	0x200003d4
 80015c0:	40013000 	.word	0x40013000

080015c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <MX_SPI2_Init+0x64>)
 80015ca:	4a18      	ldr	r2, [pc, #96]	; (800162c <MX_SPI2_Init+0x68>)
 80015cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015ce:	4b16      	ldr	r3, [pc, #88]	; (8001628 <MX_SPI2_Init+0x64>)
 80015d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <MX_SPI2_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <MX_SPI2_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_SPI2_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_SPI2_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_SPI2_Init+0x64>)
 80015f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_SPI2_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <MX_SPI2_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_SPI2_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <MX_SPI2_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_SPI2_Init+0x64>)
 8001610:	220a      	movs	r2, #10
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <MX_SPI2_Init+0x64>)
 8001616:	f008 fe0f 	bl	800a238 <HAL_SPI_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001620:	f000 fa88 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000288 	.word	0x20000288
 800162c:	40003800 	.word	0x40003800

08001630 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	2224      	movs	r2, #36	; 0x24
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f00d fb64 	bl	800ed0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <MX_TIM1_Init+0xa8>)
 800164e:	4a23      	ldr	r2, [pc, #140]	; (80016dc <MX_TIM1_Init+0xac>)
 8001650:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <MX_TIM1_Init+0xa8>)
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <MX_TIM1_Init+0xa8>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <MX_TIM1_Init+0xa8>)
 8001660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001664:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <MX_TIM1_Init+0xa8>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <MX_TIM1_Init+0xa8>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <MX_TIM1_Init+0xa8>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001678:	2301      	movs	r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800167c:	2300      	movs	r3, #0
 800167e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001680:	2301      	movs	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001690:	2301      	movs	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001694:	2300      	movs	r3, #0
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	4619      	mov	r1, r3
 80016a2:	480d      	ldr	r0, [pc, #52]	; (80016d8 <MX_TIM1_Init+0xa8>)
 80016a4:	f009 fa7f 	bl	800aba6 <HAL_TIM_Encoder_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80016ae:	f000 fa41 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	4619      	mov	r1, r3
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <MX_TIM1_Init+0xa8>)
 80016c0:	f00a f8e4 	bl	800b88c <HAL_TIMEx_MasterConfigSynchronization>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80016ca:	f000 fa33 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	3730      	adds	r7, #48	; 0x30
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000037c 	.word	0x2000037c
 80016dc:	40010000 	.word	0x40010000

080016e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f4:	463b      	mov	r3, r7
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <MX_TIM2_Init+0x98>)
 80016fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001702:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <MX_TIM2_Init+0x98>)
 8001706:	f240 3247 	movw	r2, #839	; 0x347
 800170a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MX_TIM2_Init+0x98>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <MX_TIM2_Init+0x98>)
 8001714:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001718:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_TIM2_Init+0x98>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <MX_TIM2_Init+0x98>)
 8001722:	2280      	movs	r2, #128	; 0x80
 8001724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001726:	4814      	ldr	r0, [pc, #80]	; (8001778 <MX_TIM2_Init+0x98>)
 8001728:	f009 f816 	bl	800a758 <HAL_TIM_Base_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001732:	f000 f9ff 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	4619      	mov	r1, r3
 8001742:	480d      	ldr	r0, [pc, #52]	; (8001778 <MX_TIM2_Init+0x98>)
 8001744:	f009 fc9c 	bl	800b080 <HAL_TIM_ConfigClockSource>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800174e:	f000 f9f1 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001752:	2310      	movs	r3, #16
 8001754:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800175a:	463b      	mov	r3, r7
 800175c:	4619      	mov	r1, r3
 800175e:	4806      	ldr	r0, [pc, #24]	; (8001778 <MX_TIM2_Init+0x98>)
 8001760:	f00a f894 	bl	800b88c <HAL_TIMEx_MasterConfigSynchronization>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800176a:	f000 f9e3 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000042c 	.word	0x2000042c

0800177c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001790:	f107 0320 	add.w	r3, r7, #32
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	615a      	str	r2, [r3, #20]
 80017aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ac:	4b2b      	ldr	r3, [pc, #172]	; (800185c <MX_TIM3_Init+0xe0>)
 80017ae:	4a2c      	ldr	r2, [pc, #176]	; (8001860 <MX_TIM3_Init+0xe4>)
 80017b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <MX_TIM3_Init+0xe0>)
 80017b4:	f640 0233 	movw	r2, #2099	; 0x833
 80017b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <MX_TIM3_Init+0xe0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80017c0:	4b26      	ldr	r3, [pc, #152]	; (800185c <MX_TIM3_Init+0xe0>)
 80017c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80017c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <MX_TIM3_Init+0xe0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <MX_TIM3_Init+0xe0>)
 80017d0:	2280      	movs	r2, #128	; 0x80
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017d4:	4821      	ldr	r0, [pc, #132]	; (800185c <MX_TIM3_Init+0xe0>)
 80017d6:	f008 ffbf 	bl	800a758 <HAL_TIM_Base_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80017e0:	f000 f9a8 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ee:	4619      	mov	r1, r3
 80017f0:	481a      	ldr	r0, [pc, #104]	; (800185c <MX_TIM3_Init+0xe0>)
 80017f2:	f009 fc45 	bl	800b080 <HAL_TIM_ConfigClockSource>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80017fc:	f000 f99a 	bl	8001b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001800:	4816      	ldr	r0, [pc, #88]	; (800185c <MX_TIM3_Init+0xe0>)
 8001802:	f009 f977 	bl	800aaf4 <HAL_TIM_PWM_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800180c:	f000 f992 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001818:	f107 0320 	add.w	r3, r7, #32
 800181c:	4619      	mov	r1, r3
 800181e:	480f      	ldr	r0, [pc, #60]	; (800185c <MX_TIM3_Init+0xe0>)
 8001820:	f00a f834 	bl	800b88c <HAL_TIMEx_MasterConfigSynchronization>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800182a:	f000 f983 	bl	8001b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182e:	2360      	movs	r3, #96	; 0x60
 8001830:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	2200      	movs	r2, #0
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_TIM3_Init+0xe0>)
 8001846:	f009 fb5d 	bl	800af04 <HAL_TIM_PWM_ConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001850:	f000 f970 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	3738      	adds	r7, #56	; 0x38
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000334 	.word	0x20000334
 8001860:	40000400 	.word	0x40000400

08001864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	4ba6      	ldr	r3, [pc, #664]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4aa5      	ldr	r2, [pc, #660]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 8001884:	f043 0310 	orr.w	r3, r3, #16
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4ba3      	ldr	r3, [pc, #652]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	4b9f      	ldr	r3, [pc, #636]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a9e      	ldr	r2, [pc, #632]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b9c      	ldr	r3, [pc, #624]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b98      	ldr	r3, [pc, #608]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a97      	ldr	r2, [pc, #604]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b95      	ldr	r3, [pc, #596]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b91      	ldr	r3, [pc, #580]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a90      	ldr	r2, [pc, #576]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b8e      	ldr	r3, [pc, #568]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	4b8a      	ldr	r3, [pc, #552]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a89      	ldr	r2, [pc, #548]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b87      	ldr	r3, [pc, #540]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	4b83      	ldr	r3, [pc, #524]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a82      	ldr	r2, [pc, #520]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b80      	ldr	r3, [pc, #512]	; (8001b18 <MX_GPIO_Init+0x2b4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8001922:	2200      	movs	r2, #0
 8001924:	217c      	movs	r1, #124	; 0x7c
 8001926:	487d      	ldr	r0, [pc, #500]	; (8001b1c <MX_GPIO_Init+0x2b8>)
 8001928:	f003 ffec 	bl	8005904 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800192c:	2201      	movs	r2, #1
 800192e:	2101      	movs	r1, #1
 8001930:	487b      	ldr	r0, [pc, #492]	; (8001b20 <MX_GPIO_Init+0x2bc>)
 8001932:	f003 ffe7 	bl	8005904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001936:	2200      	movs	r2, #0
 8001938:	f64f 7110 	movw	r1, #65296	; 0xff10
 800193c:	4879      	ldr	r0, [pc, #484]	; (8001b24 <MX_GPIO_Init+0x2c0>)
 800193e:	f003 ffe1 	bl	8005904 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001948:	4875      	ldr	r0, [pc, #468]	; (8001b20 <MX_GPIO_Init+0x2bc>)
 800194a:	f003 ffdb 	bl	8005904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001954:	4874      	ldr	r0, [pc, #464]	; (8001b28 <MX_GPIO_Init+0x2c4>)
 8001956:	f003 ffd5 	bl	8005904 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 800195a:	2374      	movs	r3, #116	; 0x74
 800195c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	4619      	mov	r1, r3
 8001970:	486a      	ldr	r0, [pc, #424]	; (8001b1c <MX_GPIO_Init+0x2b8>)
 8001972:	f003 fe13 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001976:	2308      	movs	r3, #8
 8001978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	4619      	mov	r1, r3
 800198c:	4863      	ldr	r0, [pc, #396]	; (8001b1c <MX_GPIO_Init+0x2b8>)
 800198e:	f003 fe05 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	485e      	ldr	r0, [pc, #376]	; (8001b20 <MX_GPIO_Init+0x2bc>)
 80019a8:	f003 fdf8 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 80019ac:	f640 0341 	movw	r3, #2113	; 0x841
 80019b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b2:	2301      	movs	r3, #1
 80019b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	4856      	ldr	r0, [pc, #344]	; (8001b20 <MX_GPIO_Init+0x2bc>)
 80019c6:	f003 fde9 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80019ca:	2308      	movs	r3, #8
 80019cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019da:	2305      	movs	r3, #5
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	484e      	ldr	r0, [pc, #312]	; (8001b20 <MX_GPIO_Init+0x2bc>)
 80019e6:	f003 fdd9 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019ea:	2301      	movs	r3, #1
 80019ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019ee:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <MX_GPIO_Init+0x2c8>)
 80019f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	4619      	mov	r1, r3
 80019fc:	484c      	ldr	r0, [pc, #304]	; (8001b30 <MX_GPIO_Init+0x2cc>)
 80019fe:	f003 fdcd 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a02:	2304      	movs	r3, #4
 8001a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4844      	ldr	r0, [pc, #272]	; (8001b28 <MX_GPIO_Init+0x2c4>)
 8001a16:	f003 fdc1 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTION_SENSOR_9960_Pin KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = MOTION_SENSOR_9960_Pin|KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 8001a1a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	483b      	ldr	r0, [pc, #236]	; (8001b1c <MX_GPIO_Init+0x2b8>)
 8001a30:	f003 fdb4 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001a34:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	4837      	ldr	r0, [pc, #220]	; (8001b28 <MX_GPIO_Init+0x2c4>)
 8001a4a:	f003 fda7 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001a4e:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001a52:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	4619      	mov	r1, r3
 8001a66:	482f      	ldr	r0, [pc, #188]	; (8001b24 <MX_GPIO_Init+0x2c0>)
 8001a68:	f003 fd98 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4829      	ldr	r0, [pc, #164]	; (8001b24 <MX_GPIO_Init+0x2c0>)
 8001a80:	f003 fd8c 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a84:	2340      	movs	r3, #64	; 0x40
 8001a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4823      	ldr	r0, [pc, #140]	; (8001b28 <MX_GPIO_Init+0x2c4>)
 8001a9c:	f003 fd7e 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001aa0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	481b      	ldr	r0, [pc, #108]	; (8001b28 <MX_GPIO_Init+0x2c4>)
 8001aba:	f003 fd6f 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac4:	2312      	movs	r3, #18
 8001ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4813      	ldr	r0, [pc, #76]	; (8001b28 <MX_GPIO_Init+0x2c4>)
 8001adc:	f003 fd5e 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	480a      	ldr	r0, [pc, #40]	; (8001b1c <MX_GPIO_Init+0x2b8>)
 8001af4:	f003 fd52 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001af8:	2302      	movs	r3, #2
 8001afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <MX_GPIO_Init+0x2c8>)
 8001afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4804      	ldr	r0, [pc, #16]	; (8001b1c <MX_GPIO_Init+0x2b8>)
 8001b0c:	f003 fd46 	bl	800559c <HAL_GPIO_Init>

}
 8001b10:	bf00      	nop
 8001b12:	3730      	adds	r7, #48	; 0x30
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40020800 	.word	0x40020800
 8001b24:	40020c00 	.word	0x40020c00
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	10120000 	.word	0x10120000
 8001b30:	40020000 	.word	0x40020000

08001b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <Error_Handler+0x8>
	...

08001b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_MspInit+0x5c>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b7e:	2007      	movs	r0, #7
 8001b80:	f003 fcca 	bl	8005518 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	2005      	movs	r0, #5
 8001b8a:	f003 fcd0 	bl	800552e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b8e:	2005      	movs	r0, #5
 8001b90:	f003 fce9 	bl	8005566 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	; 0x30
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a42      	ldr	r2, [pc, #264]	; (8001cc8 <HAL_I2C_MspInit+0x128>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d12d      	bne.n	8001c1e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a40      	ldr	r2, [pc, #256]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be4:	2312      	movs	r3, #18
 8001be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4835      	ldr	r0, [pc, #212]	; (8001cd0 <HAL_I2C_MspInit+0x130>)
 8001bfc:	f003 fcce 	bl	800559c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	4a30      	ldr	r2, [pc, #192]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c10:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c1c:	e050      	b.n	8001cc0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a2c      	ldr	r2, [pc, #176]	; (8001cd4 <HAL_I2C_MspInit+0x134>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d14b      	bne.n	8001cc0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c32:	f043 0304 	orr.w	r3, r3, #4
 8001c36:	6313      	str	r3, [r2, #48]	; 0x30
 8001c38:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6313      	str	r3, [r2, #48]	; 0x30
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c66:	2312      	movs	r3, #18
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c72:	2304      	movs	r3, #4
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4816      	ldr	r0, [pc, #88]	; (8001cd8 <HAL_I2C_MspInit+0x138>)
 8001c7e:	f003 fc8d 	bl	800559c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c88:	2312      	movs	r3, #18
 8001c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c94:	2304      	movs	r3, #4
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	480f      	ldr	r0, [pc, #60]	; (8001cdc <HAL_I2C_MspInit+0x13c>)
 8001ca0:	f003 fc7c 	bl	800559c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	4a07      	ldr	r2, [pc, #28]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001cae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_I2C_MspInit+0x12c>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
}
 8001cc0:	bf00      	nop
 8001cc2:	3730      	adds	r7, #48	; 0x30
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40005800 	.word	0x40005800
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40005c00 	.word	0x40005c00
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020000 	.word	0x40020000

08001ce0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a28      	ldr	r2, [pc, #160]	; (8001da0 <HAL_I2S_MspInit+0xc0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d14a      	bne.n	8001d98 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	4a26      	ldr	r2, [pc, #152]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d10:	6413      	str	r3, [r2, #64]	; 0x40
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a1f      	ldr	r2, [pc, #124]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a18      	ldr	r2, [pc, #96]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <HAL_I2S_MspInit+0xc4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d56:	2310      	movs	r3, #16
 8001d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d66:	2306      	movs	r3, #6
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480d      	ldr	r0, [pc, #52]	; (8001da8 <HAL_I2S_MspInit+0xc8>)
 8001d72:	f003 fc13 	bl	800559c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001d76:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d88:	2306      	movs	r3, #6
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <HAL_I2S_MspInit+0xcc>)
 8001d94:	f003 fc02 	bl	800559c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d98:	bf00      	nop
 8001d9a:	3728      	adds	r7, #40	; 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40003c00 	.word	0x40003c00
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020000 	.word	0x40020000
 8001dac:	40020800 	.word	0x40020800

08001db0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <HAL_RNG_MspInit+0x3c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d10d      	bne.n	8001dde <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_RNG_MspInit+0x40>)
 8001dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dca:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <HAL_RNG_MspInit+0x40>)
 8001dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd0:	6353      	str	r3, [r2, #52]	; 0x34
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <HAL_RNG_MspInit+0x40>)
 8001dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	50060800 	.word	0x50060800
 8001df0:	40023800 	.word	0x40023800

08001df4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08c      	sub	sp, #48	; 0x30
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a41      	ldr	r2, [pc, #260]	; (8001f18 <HAL_SPI_MspInit+0x124>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d12c      	bne.n	8001e70 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	4b40      	ldr	r3, [pc, #256]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	4a3f      	ldr	r2, [pc, #252]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	4b39      	ldr	r3, [pc, #228]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a38      	ldr	r2, [pc, #224]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b36      	ldr	r3, [pc, #216]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001e4e:	23e0      	movs	r3, #224	; 0xe0
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e5e:	2305      	movs	r3, #5
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4619      	mov	r1, r3
 8001e68:	482d      	ldr	r0, [pc, #180]	; (8001f20 <HAL_SPI_MspInit+0x12c>)
 8001e6a:	f003 fb97 	bl	800559c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e6e:	e04f      	b.n	8001f10 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a2b      	ldr	r2, [pc, #172]	; (8001f24 <HAL_SPI_MspInit+0x130>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d14a      	bne.n	8001f10 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a26      	ldr	r2, [pc, #152]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a1f      	ldr	r2, [pc, #124]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001ea0:	f043 0304 	orr.w	r3, r3, #4
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <HAL_SPI_MspInit+0x128>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eda:	2303      	movs	r3, #3
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ede:	2305      	movs	r3, #5
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee2:	f107 031c 	add.w	r3, r7, #28
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480f      	ldr	r0, [pc, #60]	; (8001f28 <HAL_SPI_MspInit+0x134>)
 8001eea:	f003 fb57 	bl	800559c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001eee:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efc:	2303      	movs	r3, #3
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f00:	2305      	movs	r3, #5
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4808      	ldr	r0, [pc, #32]	; (8001f2c <HAL_SPI_MspInit+0x138>)
 8001f0c:	f003 fb46 	bl	800559c <HAL_GPIO_Init>
}
 8001f10:	bf00      	nop
 8001f12:	3730      	adds	r7, #48	; 0x30
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40013000 	.word	0x40013000
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40003800 	.word	0x40003800
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40020400 	.word	0x40020400

08001f30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	; 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d12c      	bne.n	8001fac <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	4a17      	ldr	r2, [pc, #92]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6453      	str	r3, [r2, #68]	; 0x44
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a10      	ldr	r2, [pc, #64]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f78:	f043 0310 	orr.w	r3, r3, #16
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001f8a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f94:	2301      	movs	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <HAL_TIM_Encoder_MspInit+0x8c>)
 8001fa8:	f003 faf8 	bl	800559c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fac:	bf00      	nop
 8001fae:	3728      	adds	r7, #40	; 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40010000 	.word	0x40010000
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_TIM_Base_MspInit+0x70>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a15      	ldr	r2, [pc, #84]	; (8002030 <HAL_TIM_Base_MspInit+0x70>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_TIM_Base_MspInit+0x70>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fee:	e01a      	b.n	8002026 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <HAL_TIM_Base_MspInit+0x74>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d115      	bne.n	8002026 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_TIM_Base_MspInit+0x70>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <HAL_TIM_Base_MspInit+0x70>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_TIM_Base_MspInit+0x70>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	201d      	movs	r0, #29
 800201c:	f003 fa87 	bl	800552e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002020:	201d      	movs	r0, #29
 8002022:	f003 faa0 	bl	8005566 <HAL_NVIC_EnableIRQ>
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800
 8002034:	40000400 	.word	0x40000400

08002038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800203c:	e7fe      	b.n	800203c <NMI_Handler+0x4>

0800203e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <HardFault_Handler+0x4>

08002044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <MemManage_Handler+0x4>

0800204a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <BusFault_Handler+0x4>

08002050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <UsageFault_Handler+0x4>

08002056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002084:	f003 f934 	bl	80052f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}

0800208c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 80020a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020a4:	481b      	ldr	r0, [pc, #108]	; (8002114 <TIM2_IRQHandler+0x78>)
 80020a6:	f003 fc46 	bl	8005936 <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <TIM2_IRQHandler+0x7c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d111      	bne.n	80020d6 <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <TIM2_IRQHandler+0x80>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2bc8      	cmp	r3, #200	; 0xc8
 80020b8:	dc0a      	bgt.n	80020d0 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <TIM2_IRQHandler+0x80>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <TIM2_IRQHandler+0x84>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <TIM2_IRQHandler+0x80>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	4a14      	ldr	r2, [pc, #80]	; (800211c <TIM2_IRQHandler+0x80>)
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e002      	b.n	80020d6 <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <TIM2_IRQHandler+0x7c>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <TIM2_IRQHandler+0x7c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d114      	bne.n	8002108 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <TIM2_IRQHandler+0x80>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b63      	cmp	r3, #99	; 0x63
 80020e4:	dd0a      	ble.n	80020fc <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <TIM2_IRQHandler+0x80>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <TIM2_IRQHandler+0x84>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <TIM2_IRQHandler+0x80>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	4a09      	ldr	r2, [pc, #36]	; (800211c <TIM2_IRQHandler+0x80>)
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e005      	b.n	8002108 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <TIM2_IRQHandler+0x7c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
		  i = 100;
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <TIM2_IRQHandler+0x80>)
 8002104:	2264      	movs	r2, #100	; 0x64
 8002106:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <TIM2_IRQHandler+0x84>)
 800210a:	f008 fdf2 	bl	800acf2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40020c00 	.word	0x40020c00
 8002118:	200001f4 	.word	0x200001f4
 800211c:	20000000 	.word	0x20000000
 8002120:	2000042c 	.word	0x2000042c

08002124 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002128:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800212c:	4804      	ldr	r0, [pc, #16]	; (8002140 <TIM3_IRQHandler+0x1c>)
 800212e:	f003 fc02 	bl	8005936 <HAL_GPIO_TogglePin>
  read_digits();
 8002132:	f7fe fe93 	bl	8000e5c <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002136:	4803      	ldr	r0, [pc, #12]	; (8002144 <TIM3_IRQHandler+0x20>)
 8002138:	f008 fddb 	bl	800acf2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40020c00 	.word	0x40020c00
 8002144:	20000334 	.word	0x20000334

08002148 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <OTG_FS_IRQHandler+0x10>)
 800214e:	f003 fe77 	bl	8005e40 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000092c 	.word	0x2000092c

0800215c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002164:	4a14      	ldr	r2, [pc, #80]	; (80021b8 <_sbrk+0x5c>)
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <_sbrk+0x60>)
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002170:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <_sbrk+0x64>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d102      	bne.n	800217e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <_sbrk+0x64>)
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <_sbrk+0x68>)
 800217c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <_sbrk+0x64>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	429a      	cmp	r2, r3
 800218a:	d207      	bcs.n	800219c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800218c:	f00c fd76 	bl	800ec7c <__errno>
 8002190:	4603      	mov	r3, r0
 8002192:	220c      	movs	r2, #12
 8002194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800219a:	e009      	b.n	80021b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <_sbrk+0x64>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <_sbrk+0x64>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <_sbrk+0x64>)
 80021ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ae:	68fb      	ldr	r3, [r7, #12]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20020000 	.word	0x20020000
 80021bc:	00000400 	.word	0x00000400
 80021c0:	200001f8 	.word	0x200001f8
 80021c4:	20000c40 	.word	0x20000c40

080021c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <SystemInit+0x20>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <SystemInit+0x20>)
 80021d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b08b      	sub	sp, #44	; 0x2c
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4604      	mov	r4, r0
 80021f4:	4608      	mov	r0, r1
 80021f6:	4611      	mov	r1, r2
 80021f8:	461a      	mov	r2, r3
 80021fa:	4623      	mov	r3, r4
 80021fc:	80fb      	strh	r3, [r7, #6]
 80021fe:	4603      	mov	r3, r0
 8002200:	80bb      	strh	r3, [r7, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	807b      	strh	r3, [r7, #2]
 8002206:	4613      	mov	r3, r2
 8002208:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 800220a:	887b      	ldrh	r3, [r7, #2]
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8002212:	887b      	ldrh	r3, [r7, #2]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	f1c3 0301 	rsb	r3, r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8002224:	e061      	b.n	80022ea <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8002226:	88fa      	ldrh	r2, [r7, #6]
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	e018      	b.n	8002262 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	b298      	uxth	r0, r3
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	b29a      	uxth	r2, r3
 8002238:	88bb      	ldrh	r3, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	b29b      	uxth	r3, r3
 800223e:	883a      	ldrh	r2, [r7, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	f000 fc0b 	bl	8002a5c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	b298      	uxth	r0, r3
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	b29b      	uxth	r3, r3
 800224e:	88ba      	ldrh	r2, [r7, #4]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	b29b      	uxth	r3, r3
 8002254:	883a      	ldrh	r2, [r7, #0]
 8002256:	4619      	mov	r1, r3
 8002258:	f000 fc00 	bl	8002a5c <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	3301      	adds	r3, #1
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	4413      	add	r3, r2
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	429a      	cmp	r2, r3
 800226c:	dde0      	ble.n	8002230 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	e018      	b.n	80022aa <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	b298      	uxth	r0, r3
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	b29a      	uxth	r2, r3
 8002280:	88bb      	ldrh	r3, [r7, #4]
 8002282:	4413      	add	r3, r2
 8002284:	b29b      	uxth	r3, r3
 8002286:	883a      	ldrh	r2, [r7, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	f000 fbe7 	bl	8002a5c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	b298      	uxth	r0, r3
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	b29b      	uxth	r3, r3
 8002296:	88ba      	ldrh	r2, [r7, #4]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	b29b      	uxth	r3, r3
 800229c:	883a      	ldrh	r2, [r7, #0]
 800229e:	4619      	mov	r1, r3
 80022a0:	f000 fbdc 	bl	8002a5c <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3301      	adds	r3, #1
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	88fa      	ldrh	r2, [r7, #6]
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	4413      	add	r3, r2
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	dde0      	ble.n	8002278 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	3301      	adds	r3, #1
 80022ba:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	4413      	add	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	3302      	adds	r3, #2
 80022c8:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	005a      	lsls	r2, r3, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	4413      	add	r3, r2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	dd09      	ble.n	80022ea <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	3b01      	subs	r3, #1
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	4413      	add	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	3302      	adds	r3, #2
 80022e8:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80022ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	da99      	bge.n	8002226 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80022f2:	bf00      	nop
 80022f4:	bf00      	nop
 80022f6:	372c      	adds	r7, #44	; 0x2c
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd90      	pop	{r4, r7, pc}

080022fc <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af02      	add	r7, sp, #8
 8002302:	4604      	mov	r4, r0
 8002304:	4608      	mov	r0, r1
 8002306:	4611      	mov	r1, r2
 8002308:	461a      	mov	r2, r3
 800230a:	4623      	mov	r3, r4
 800230c:	71fb      	strb	r3, [r7, #7]
 800230e:	4603      	mov	r3, r0
 8002310:	80bb      	strh	r3, [r7, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	71bb      	strb	r3, [r7, #6]
 8002316:	4613      	mov	r3, r2
 8002318:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	2b1f      	cmp	r3, #31
 8002322:	d902      	bls.n	800232a <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	3b20      	subs	r3, #32
 8002328:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800232a:	2300      	movs	r3, #0
 800232c:	753b      	strb	r3, [r7, #20]
 800232e:	e012      	b.n	8002356 <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 8002330:	7dfa      	ldrb	r2, [r7, #23]
 8002332:	7d38      	ldrb	r0, [r7, #20]
 8002334:	7d39      	ldrb	r1, [r7, #20]
 8002336:	4c3b      	ldr	r4, [pc, #236]	; (8002424 <ILI9341_Draw_Char+0x128>)
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4423      	add	r3, r4
 8002342:	4403      	add	r3, r0
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	f107 0318 	add.w	r3, r7, #24
 800234a:	440b      	add	r3, r1
 800234c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002350:	7d3b      	ldrb	r3, [r7, #20]
 8002352:	3301      	adds	r3, #1
 8002354:	753b      	strb	r3, [r7, #20]
 8002356:	7d3b      	ldrb	r3, [r7, #20]
 8002358:	2b05      	cmp	r3, #5
 800235a:	d9e9      	bls.n	8002330 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800235c:	79bb      	ldrb	r3, [r7, #6]
 800235e:	b299      	uxth	r1, r3
 8002360:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002362:	461a      	mov	r2, r3
 8002364:	0052      	lsls	r2, r2, #1
 8002366:	4413      	add	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	b29c      	uxth	r4, r3
 8002372:	88b8      	ldrh	r0, [r7, #4]
 8002374:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	4623      	mov	r3, r4
 800237a:	f000 fc37 	bl	8002bec <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800237e:	2300      	movs	r3, #0
 8002380:	757b      	strb	r3, [r7, #21]
 8002382:	e046      	b.n	8002412 <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002384:	2300      	movs	r3, #0
 8002386:	75bb      	strb	r3, [r7, #22]
 8002388:	e03d      	b.n	8002406 <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 800238a:	7d7b      	ldrb	r3, [r7, #21]
 800238c:	f107 0218 	add.w	r2, r7, #24
 8002390:	4413      	add	r3, r2
 8002392:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002396:	461a      	mov	r2, r3
 8002398:	7dbb      	ldrb	r3, [r7, #22]
 800239a:	fa42 f303 	asr.w	r3, r2, r3
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d02c      	beq.n	8002400 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 80023a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d10f      	bne.n	80023cc <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80023ac:	7d7b      	ldrb	r3, [r7, #21]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	88bb      	ldrh	r3, [r7, #4]
 80023b2:	4413      	add	r3, r2
 80023b4:	b298      	uxth	r0, r3
 80023b6:	79bb      	ldrb	r3, [r7, #6]
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	7dbb      	ldrb	r3, [r7, #22]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	4413      	add	r3, r2
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	4619      	mov	r1, r3
 80023c6:	f000 fb49 	bl	8002a5c <ILI9341_Draw_Pixel>
 80023ca:	e019      	b.n	8002400 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80023cc:	7d7b      	ldrb	r3, [r7, #21]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023d2:	fb12 f303 	smulbb	r3, r2, r3
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	88bb      	ldrh	r3, [r7, #4]
 80023da:	4413      	add	r3, r2
 80023dc:	b298      	uxth	r0, r3
 80023de:	79bb      	ldrb	r3, [r7, #6]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	7dbb      	ldrb	r3, [r7, #22]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80023e8:	fb11 f303 	smulbb	r3, r1, r3
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	b299      	uxth	r1, r3
 80023f2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80023f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023f6:	887b      	ldrh	r3, [r7, #2]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	4623      	mov	r3, r4
 80023fc:	f000 fbf6 	bl	8002bec <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002400:	7dbb      	ldrb	r3, [r7, #22]
 8002402:	3301      	adds	r3, #1
 8002404:	75bb      	strb	r3, [r7, #22]
 8002406:	7dbb      	ldrb	r3, [r7, #22]
 8002408:	2b07      	cmp	r3, #7
 800240a:	d9be      	bls.n	800238a <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 800240c:	7d7b      	ldrb	r3, [r7, #21]
 800240e:	3301      	adds	r3, #1
 8002410:	757b      	strb	r3, [r7, #21]
 8002412:	7d7b      	ldrb	r3, [r7, #21]
 8002414:	2b05      	cmp	r3, #5
 8002416:	d9b5      	bls.n	8002384 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd90      	pop	{r4, r7, pc}
 8002422:	bf00      	nop
 8002424:	0800f01c 	.word	0x0800f01c

08002428 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b087      	sub	sp, #28
 800242c:	af02      	add	r7, sp, #8
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	4608      	mov	r0, r1
 8002432:	4611      	mov	r1, r2
 8002434:	461a      	mov	r2, r3
 8002436:	4603      	mov	r3, r0
 8002438:	817b      	strh	r3, [r7, #10]
 800243a:	460b      	mov	r3, r1
 800243c:	727b      	strb	r3, [r7, #9]
 800243e:	4613      	mov	r3, r2
 8002440:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8002442:	e016      	b.n	8002472 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	60fa      	str	r2, [r7, #12]
 800244a:	7818      	ldrb	r0, [r3, #0]
 800244c:	88fc      	ldrh	r4, [r7, #6]
 800244e:	7a7a      	ldrb	r2, [r7, #9]
 8002450:	8979      	ldrh	r1, [r7, #10]
 8002452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	8c3b      	ldrh	r3, [r7, #32]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	4623      	mov	r3, r4
 800245c:	f7ff ff4e 	bl	80022fc <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8002460:	8c3b      	ldrh	r3, [r7, #32]
 8002462:	461a      	mov	r2, r3
 8002464:	0052      	lsls	r2, r2, #1
 8002466:	4413      	add	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	897b      	ldrh	r3, [r7, #10]
 800246e:	4413      	add	r3, r2
 8002470:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1e4      	bne.n	8002444 <ILI9341_Draw_Text+0x1c>
    }
}
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	bd90      	pop	{r4, r7, pc}

08002484 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002488:	2200      	movs	r2, #0
 800248a:	2110      	movs	r1, #16
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <ILI9341_SPI_Init+0x14>)
 800248e:	f003 fa39 	bl	8005904 <HAL_GPIO_WritePin>
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000

0800249c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80024a6:	1df9      	adds	r1, r7, #7
 80024a8:	2301      	movs	r3, #1
 80024aa:	2201      	movs	r2, #1
 80024ac:	4803      	ldr	r0, [pc, #12]	; (80024bc <ILI9341_SPI_Send+0x20>)
 80024ae:	f007 ff4c 	bl	800a34a <HAL_SPI_Transmit>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000288 	.word	0x20000288

080024c0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2110      	movs	r1, #16
 80024ce:	480a      	ldr	r0, [pc, #40]	; (80024f8 <ILI9341_Write_Command+0x38>)
 80024d0:	f003 fa18 	bl	8005904 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80024d4:	2200      	movs	r2, #0
 80024d6:	2140      	movs	r1, #64	; 0x40
 80024d8:	4807      	ldr	r0, [pc, #28]	; (80024f8 <ILI9341_Write_Command+0x38>)
 80024da:	f003 fa13 	bl	8005904 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ffdb 	bl	800249c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80024e6:	2201      	movs	r2, #1
 80024e8:	2110      	movs	r1, #16
 80024ea:	4803      	ldr	r0, [pc, #12]	; (80024f8 <ILI9341_Write_Command+0x38>)
 80024ec:	f003 fa0a 	bl	8005904 <HAL_GPIO_WritePin>
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000

080024fc <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002506:	2201      	movs	r2, #1
 8002508:	2140      	movs	r1, #64	; 0x40
 800250a:	480a      	ldr	r0, [pc, #40]	; (8002534 <ILI9341_Write_Data+0x38>)
 800250c:	f003 f9fa 	bl	8005904 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002510:	2200      	movs	r2, #0
 8002512:	2110      	movs	r1, #16
 8002514:	4807      	ldr	r0, [pc, #28]	; (8002534 <ILI9341_Write_Data+0x38>)
 8002516:	f003 f9f5 	bl	8005904 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ffbd 	bl	800249c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002522:	2201      	movs	r2, #1
 8002524:	2110      	movs	r1, #16
 8002526:	4803      	ldr	r0, [pc, #12]	; (8002534 <ILI9341_Write_Data+0x38>)
 8002528:	f003 f9ec 	bl	8005904 <HAL_GPIO_WritePin>
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000

08002538 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4604      	mov	r4, r0
 8002540:	4608      	mov	r0, r1
 8002542:	4611      	mov	r1, r2
 8002544:	461a      	mov	r2, r3
 8002546:	4623      	mov	r3, r4
 8002548:	80fb      	strh	r3, [r7, #6]
 800254a:	4603      	mov	r3, r0
 800254c:	80bb      	strh	r3, [r7, #4]
 800254e:	460b      	mov	r3, r1
 8002550:	807b      	strh	r3, [r7, #2]
 8002552:	4613      	mov	r3, r2
 8002554:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8002556:	202a      	movs	r0, #42	; 0x2a
 8002558:	f7ff ffb2 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	b29b      	uxth	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ffc9 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800256a:	88fb      	ldrh	r3, [r7, #6]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ffc4 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002574:	887b      	ldrh	r3, [r7, #2]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	b29b      	uxth	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ffbd 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff ffb8 	bl	80024fc <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 800258c:	202b      	movs	r0, #43	; 0x2b
 800258e:	f7ff ff97 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8002592:	88bb      	ldrh	r3, [r7, #4]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	b29b      	uxth	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff ffae 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80025a0:	88bb      	ldrh	r3, [r7, #4]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ffa9 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80025aa:	883b      	ldrh	r3, [r7, #0]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ffa2 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80025b8:	883b      	ldrh	r3, [r7, #0]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff9d 	bl	80024fc <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80025c2:	202c      	movs	r0, #44	; 0x2c
 80025c4:	f7ff ff7c 	bl	80024c0 <ILI9341_Write_Command>
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd90      	pop	{r4, r7, pc}

080025d0 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80025d4:	2200      	movs	r2, #0
 80025d6:	2120      	movs	r1, #32
 80025d8:	480a      	ldr	r0, [pc, #40]	; (8002604 <ILI9341_Reset+0x34>)
 80025da:	f003 f993 	bl	8005904 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80025de:	20c8      	movs	r0, #200	; 0xc8
 80025e0:	f002 fea6 	bl	8005330 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80025e4:	2200      	movs	r2, #0
 80025e6:	2110      	movs	r1, #16
 80025e8:	4806      	ldr	r0, [pc, #24]	; (8002604 <ILI9341_Reset+0x34>)
 80025ea:	f003 f98b 	bl	8005904 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80025ee:	20c8      	movs	r0, #200	; 0xc8
 80025f0:	f002 fe9e 	bl	8005330 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80025f4:	2201      	movs	r2, #1
 80025f6:	2120      	movs	r1, #32
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <ILI9341_Reset+0x34>)
 80025fa:	f003 f983 	bl	8005904 <HAL_GPIO_WritePin>
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000

08002608 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8002616:	2036      	movs	r0, #54	; 0x36
 8002618:	f7ff ff52 	bl	80024c0 <ILI9341_Write_Command>
HAL_Delay(1);
 800261c:	2001      	movs	r0, #1
 800261e:	f002 fe87 	bl	8005330 <HAL_Delay>
	
switch(screen_rotation) 
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d837      	bhi.n	8002698 <ILI9341_Set_Rotation+0x90>
 8002628:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <ILI9341_Set_Rotation+0x28>)
 800262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262e:	bf00      	nop
 8002630:	08002641 	.word	0x08002641
 8002634:	08002657 	.word	0x08002657
 8002638:	0800266d 	.word	0x0800266d
 800263c:	08002683 	.word	0x08002683
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002640:	2048      	movs	r0, #72	; 0x48
 8002642:	f7ff ff5b 	bl	80024fc <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <ILI9341_Set_Rotation+0x9c>)
 8002648:	22f0      	movs	r2, #240	; 0xf0
 800264a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800264c:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <ILI9341_Set_Rotation+0xa0>)
 800264e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002652:	801a      	strh	r2, [r3, #0]
			break;
 8002654:	e021      	b.n	800269a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8002656:	2028      	movs	r0, #40	; 0x28
 8002658:	f7ff ff50 	bl	80024fc <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <ILI9341_Set_Rotation+0x9c>)
 800265e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002662:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <ILI9341_Set_Rotation+0xa0>)
 8002666:	22f0      	movs	r2, #240	; 0xf0
 8002668:	801a      	strh	r2, [r3, #0]
			break;
 800266a:	e016      	b.n	800269a <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 800266c:	2088      	movs	r0, #136	; 0x88
 800266e:	f7ff ff45 	bl	80024fc <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <ILI9341_Set_Rotation+0x9c>)
 8002674:	22f0      	movs	r2, #240	; 0xf0
 8002676:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <ILI9341_Set_Rotation+0xa0>)
 800267a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800267e:	801a      	strh	r2, [r3, #0]
			break;
 8002680:	e00b      	b.n	800269a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002682:	20e8      	movs	r0, #232	; 0xe8
 8002684:	f7ff ff3a 	bl	80024fc <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <ILI9341_Set_Rotation+0x9c>)
 800268a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800268e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <ILI9341_Set_Rotation+0xa0>)
 8002692:	22f0      	movs	r2, #240	; 0xf0
 8002694:	801a      	strh	r2, [r3, #0]
			break;
 8002696:	e000      	b.n	800269a <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002698:	bf00      	nop
	}
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	2000000a 	.word	0x2000000a
 80026a8:	20000008 	.word	0x20000008

080026ac <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80026b0:	2201      	movs	r2, #1
 80026b2:	2120      	movs	r1, #32
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <ILI9341_Enable+0x14>)
 80026b6:	f003 f925 	bl	8005904 <HAL_GPIO_WritePin>
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000

080026c4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80026c8:	f7ff fff0 	bl	80026ac <ILI9341_Enable>
ILI9341_SPI_Init();
 80026cc:	f7ff feda 	bl	8002484 <ILI9341_SPI_Init>
ILI9341_Reset();
 80026d0:	f7ff ff7e 	bl	80025d0 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80026d4:	2001      	movs	r0, #1
 80026d6:	f7ff fef3 	bl	80024c0 <ILI9341_Write_Command>
HAL_Delay(1000);
 80026da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026de:	f002 fe27 	bl	8005330 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80026e2:	20cb      	movs	r0, #203	; 0xcb
 80026e4:	f7ff feec 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80026e8:	2039      	movs	r0, #57	; 0x39
 80026ea:	f7ff ff07 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80026ee:	202c      	movs	r0, #44	; 0x2c
 80026f0:	f7ff ff04 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7ff ff01 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80026fa:	2034      	movs	r0, #52	; 0x34
 80026fc:	f7ff fefe 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002700:	2002      	movs	r0, #2
 8002702:	f7ff fefb 	bl	80024fc <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8002706:	20cf      	movs	r0, #207	; 0xcf
 8002708:	f7ff feda 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800270c:	2000      	movs	r0, #0
 800270e:	f7ff fef5 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002712:	20c1      	movs	r0, #193	; 0xc1
 8002714:	f7ff fef2 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002718:	2030      	movs	r0, #48	; 0x30
 800271a:	f7ff feef 	bl	80024fc <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800271e:	20e8      	movs	r0, #232	; 0xe8
 8002720:	f7ff fece 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002724:	2085      	movs	r0, #133	; 0x85
 8002726:	f7ff fee9 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800272a:	2000      	movs	r0, #0
 800272c:	f7ff fee6 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002730:	2078      	movs	r0, #120	; 0x78
 8002732:	f7ff fee3 	bl	80024fc <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8002736:	20ea      	movs	r0, #234	; 0xea
 8002738:	f7ff fec2 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800273c:	2000      	movs	r0, #0
 800273e:	f7ff fedd 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002742:	2000      	movs	r0, #0
 8002744:	f7ff feda 	bl	80024fc <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002748:	20ed      	movs	r0, #237	; 0xed
 800274a:	f7ff feb9 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800274e:	2064      	movs	r0, #100	; 0x64
 8002750:	f7ff fed4 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002754:	2003      	movs	r0, #3
 8002756:	f7ff fed1 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800275a:	2012      	movs	r0, #18
 800275c:	f7ff fece 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002760:	2081      	movs	r0, #129	; 0x81
 8002762:	f7ff fecb 	bl	80024fc <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002766:	20f7      	movs	r0, #247	; 0xf7
 8002768:	f7ff feaa 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 800276c:	2020      	movs	r0, #32
 800276e:	f7ff fec5 	bl	80024fc <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002772:	20c0      	movs	r0, #192	; 0xc0
 8002774:	f7ff fea4 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002778:	2023      	movs	r0, #35	; 0x23
 800277a:	f7ff febf 	bl	80024fc <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800277e:	20c1      	movs	r0, #193	; 0xc1
 8002780:	f7ff fe9e 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002784:	2010      	movs	r0, #16
 8002786:	f7ff feb9 	bl	80024fc <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800278a:	20c5      	movs	r0, #197	; 0xc5
 800278c:	f7ff fe98 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002790:	203e      	movs	r0, #62	; 0x3e
 8002792:	f7ff feb3 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002796:	2028      	movs	r0, #40	; 0x28
 8002798:	f7ff feb0 	bl	80024fc <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 800279c:	20c7      	movs	r0, #199	; 0xc7
 800279e:	f7ff fe8f 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80027a2:	2086      	movs	r0, #134	; 0x86
 80027a4:	f7ff feaa 	bl	80024fc <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80027a8:	2036      	movs	r0, #54	; 0x36
 80027aa:	f7ff fe89 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80027ae:	2048      	movs	r0, #72	; 0x48
 80027b0:	f7ff fea4 	bl	80024fc <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80027b4:	203a      	movs	r0, #58	; 0x3a
 80027b6:	f7ff fe83 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80027ba:	2055      	movs	r0, #85	; 0x55
 80027bc:	f7ff fe9e 	bl	80024fc <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80027c0:	20b1      	movs	r0, #177	; 0xb1
 80027c2:	f7ff fe7d 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7ff fe98 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80027cc:	2018      	movs	r0, #24
 80027ce:	f7ff fe95 	bl	80024fc <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80027d2:	20b6      	movs	r0, #182	; 0xb6
 80027d4:	f7ff fe74 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80027d8:	2008      	movs	r0, #8
 80027da:	f7ff fe8f 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80027de:	2082      	movs	r0, #130	; 0x82
 80027e0:	f7ff fe8c 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80027e4:	2027      	movs	r0, #39	; 0x27
 80027e6:	f7ff fe89 	bl	80024fc <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80027ea:	20f2      	movs	r0, #242	; 0xf2
 80027ec:	f7ff fe68 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7ff fe83 	bl	80024fc <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80027f6:	2026      	movs	r0, #38	; 0x26
 80027f8:	f7ff fe62 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80027fc:	2001      	movs	r0, #1
 80027fe:	f7ff fe7d 	bl	80024fc <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8002802:	20e0      	movs	r0, #224	; 0xe0
 8002804:	f7ff fe5c 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002808:	200f      	movs	r0, #15
 800280a:	f7ff fe77 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800280e:	2031      	movs	r0, #49	; 0x31
 8002810:	f7ff fe74 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002814:	202b      	movs	r0, #43	; 0x2b
 8002816:	f7ff fe71 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800281a:	200c      	movs	r0, #12
 800281c:	f7ff fe6e 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002820:	200e      	movs	r0, #14
 8002822:	f7ff fe6b 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002826:	2008      	movs	r0, #8
 8002828:	f7ff fe68 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 800282c:	204e      	movs	r0, #78	; 0x4e
 800282e:	f7ff fe65 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002832:	20f1      	movs	r0, #241	; 0xf1
 8002834:	f7ff fe62 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8002838:	2037      	movs	r0, #55	; 0x37
 800283a:	f7ff fe5f 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800283e:	2007      	movs	r0, #7
 8002840:	f7ff fe5c 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002844:	2010      	movs	r0, #16
 8002846:	f7ff fe59 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800284a:	2003      	movs	r0, #3
 800284c:	f7ff fe56 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002850:	200e      	movs	r0, #14
 8002852:	f7ff fe53 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8002856:	2009      	movs	r0, #9
 8002858:	f7ff fe50 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800285c:	2000      	movs	r0, #0
 800285e:	f7ff fe4d 	bl	80024fc <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002862:	20e1      	movs	r0, #225	; 0xe1
 8002864:	f7ff fe2c 	bl	80024c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002868:	2000      	movs	r0, #0
 800286a:	f7ff fe47 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800286e:	200e      	movs	r0, #14
 8002870:	f7ff fe44 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002874:	2014      	movs	r0, #20
 8002876:	f7ff fe41 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800287a:	2003      	movs	r0, #3
 800287c:	f7ff fe3e 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002880:	2011      	movs	r0, #17
 8002882:	f7ff fe3b 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002886:	2007      	movs	r0, #7
 8002888:	f7ff fe38 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800288c:	2031      	movs	r0, #49	; 0x31
 800288e:	f7ff fe35 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002892:	20c1      	movs	r0, #193	; 0xc1
 8002894:	f7ff fe32 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002898:	2048      	movs	r0, #72	; 0x48
 800289a:	f7ff fe2f 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800289e:	2008      	movs	r0, #8
 80028a0:	f7ff fe2c 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80028a4:	200f      	movs	r0, #15
 80028a6:	f7ff fe29 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80028aa:	200c      	movs	r0, #12
 80028ac:	f7ff fe26 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80028b0:	2031      	movs	r0, #49	; 0x31
 80028b2:	f7ff fe23 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80028b6:	2036      	movs	r0, #54	; 0x36
 80028b8:	f7ff fe20 	bl	80024fc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80028bc:	200f      	movs	r0, #15
 80028be:	f7ff fe1d 	bl	80024fc <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80028c2:	2011      	movs	r0, #17
 80028c4:	f7ff fdfc 	bl	80024c0 <ILI9341_Write_Command>
HAL_Delay(120);
 80028c8:	2078      	movs	r0, #120	; 0x78
 80028ca:	f002 fd31 	bl	8005330 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80028ce:	2029      	movs	r0, #41	; 0x29
 80028d0:	f7ff fdf6 	bl	80024c0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80028d4:	2003      	movs	r0, #3
 80028d6:	f7ff fe97 	bl	8002608 <ILI9341_Set_Rotation>

HAL_Delay(10);
 80028da:	200a      	movs	r0, #10
 80028dc:	f002 fd28 	bl	8005330 <HAL_Delay>
//
}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80028e4:	b5b0      	push	{r4, r5, r7, lr}
 80028e6:	b08c      	sub	sp, #48	; 0x30
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	6039      	str	r1, [r7, #0]
 80028ee:	80fb      	strh	r3, [r7, #6]
 80028f0:	466b      	mov	r3, sp
 80028f2:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002900:	d202      	bcs.n	8002908 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
 8002906:	e002      	b.n	800290e <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002908:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800290e:	2201      	movs	r2, #1
 8002910:	2140      	movs	r1, #64	; 0x40
 8002912:	483d      	ldr	r0, [pc, #244]	; (8002a08 <ILI9341_Draw_Colour_Burst+0x124>)
 8002914:	f002 fff6 	bl	8005904 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002918:	2200      	movs	r2, #0
 800291a:	2110      	movs	r1, #16
 800291c:	483a      	ldr	r0, [pc, #232]	; (8002a08 <ILI9341_Draw_Colour_Burst+0x124>)
 800291e:	f002 fff1 	bl	8005904 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	b29b      	uxth	r3, r3
 8002928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 800292c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800292e:	4623      	mov	r3, r4
 8002930:	3b01      	subs	r3, #1
 8002932:	61fb      	str	r3, [r7, #28]
 8002934:	4620      	mov	r0, r4
 8002936:	f04f 0100 	mov.w	r1, #0
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	00cb      	lsls	r3, r1, #3
 8002944:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002948:	00c2      	lsls	r2, r0, #3
 800294a:	4620      	mov	r0, r4
 800294c:	f04f 0100 	mov.w	r1, #0
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	00cb      	lsls	r3, r1, #3
 800295a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800295e:	00c2      	lsls	r2, r0, #3
 8002960:	1de3      	adds	r3, r4, #7
 8002962:	08db      	lsrs	r3, r3, #3
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	ebad 0d03 	sub.w	sp, sp, r3
 800296a:	466b      	mov	r3, sp
 800296c:	3300      	adds	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002970:	2300      	movs	r3, #0
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
 8002974:	e00e      	b.n	8002994 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297a:	4413      	add	r3, r2
 800297c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002980:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	3301      	adds	r3, #1
 8002986:	88fa      	ldrh	r2, [r7, #6]
 8002988:	b2d1      	uxtb	r1, r2
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	3302      	adds	r3, #2
 8002992:	62bb      	str	r3, [r7, #40]	; 0x28
 8002994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	429a      	cmp	r2, r3
 800299a:	d3ec      	bcc.n	8002976 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029aa:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80029b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029b6:	fb01 f202 	mul.w	r2, r1, r2
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d010      	beq.n	80029e6 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80029c4:	2300      	movs	r3, #0
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c8:	e009      	b.n	80029de <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80029ca:	69b9      	ldr	r1, [r7, #24]
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	230a      	movs	r3, #10
 80029d2:	480e      	ldr	r0, [pc, #56]	; (8002a0c <ILI9341_Draw_Colour_Burst+0x128>)
 80029d4:	f007 fcb9 	bl	800a34a <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	3301      	adds	r3, #1
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d3f1      	bcc.n	80029ca <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80029e6:	69b9      	ldr	r1, [r7, #24]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	230a      	movs	r3, #10
 80029ee:	4807      	ldr	r0, [pc, #28]	; (8002a0c <ILI9341_Draw_Colour_Burst+0x128>)
 80029f0:	f007 fcab 	bl	800a34a <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80029f4:	2201      	movs	r2, #1
 80029f6:	2110      	movs	r1, #16
 80029f8:	4803      	ldr	r0, [pc, #12]	; (8002a08 <ILI9341_Draw_Colour_Burst+0x124>)
 80029fa:	f002 ff83 	bl	8005904 <HAL_GPIO_WritePin>
 80029fe:	46ad      	mov	sp, r5
}
 8002a00:	bf00      	nop
 8002a02:	3730      	adds	r7, #48	; 0x30
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bdb0      	pop	{r4, r5, r7, pc}
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	20000288 	.word	0x20000288

08002a10 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <ILI9341_Fill_Screen+0x44>)
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <ILI9341_Fill_Screen+0x48>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2100      	movs	r1, #0
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7ff fd85 	bl	8002538 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <ILI9341_Fill_Screen+0x44>)
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <ILI9341_Fill_Screen+0x48>)
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	fb03 f302 	mul.w	r3, r3, r2
 8002a40:	461a      	mov	r2, r3
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	4611      	mov	r1, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff ff4c 	bl	80028e4 <ILI9341_Draw_Colour_Burst>
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	2000000a 	.word	0x2000000a
 8002a58:	20000008 	.word	0x20000008

08002a5c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	80fb      	strh	r3, [r7, #6]
 8002a66:	460b      	mov	r3, r1
 8002a68:	80bb      	strh	r3, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002a6e:	4b5b      	ldr	r3, [pc, #364]	; (8002bdc <ILI9341_Draw_Pixel+0x180>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	88fa      	ldrh	r2, [r7, #6]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	f080 80ac 	bcs.w	8002bd4 <ILI9341_Draw_Pixel+0x178>
 8002a7c:	4b58      	ldr	r3, [pc, #352]	; (8002be0 <ILI9341_Draw_Pixel+0x184>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	88ba      	ldrh	r2, [r7, #4]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	f080 80a5 	bcs.w	8002bd4 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2140      	movs	r1, #64	; 0x40
 8002a8e:	4855      	ldr	r0, [pc, #340]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002a90:	f002 ff38 	bl	8005904 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002a94:	2200      	movs	r2, #0
 8002a96:	2110      	movs	r1, #16
 8002a98:	4852      	ldr	r0, [pc, #328]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002a9a:	f002 ff33 	bl	8005904 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002a9e:	202a      	movs	r0, #42	; 0x2a
 8002aa0:	f7ff fcfc 	bl	800249c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	2140      	movs	r1, #64	; 0x40
 8002aa8:	484e      	ldr	r0, [pc, #312]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002aaa:	f002 ff2b 	bl	8005904 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002aae:	2201      	movs	r2, #1
 8002ab0:	2110      	movs	r1, #16
 8002ab2:	484c      	ldr	r0, [pc, #304]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002ab4:	f002 ff26 	bl	8005904 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2110      	movs	r1, #16
 8002abc:	4849      	ldr	r0, [pc, #292]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002abe:	f002 ff21 	bl	8005904 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	753b      	strb	r3, [r7, #20]
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	757b      	strb	r3, [r7, #21]
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	121b      	asrs	r3, r3, #8
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	75bb      	strb	r3, [r7, #22]
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002ae6:	f107 0114 	add.w	r1, r7, #20
 8002aea:	2301      	movs	r3, #1
 8002aec:	2204      	movs	r2, #4
 8002aee:	483e      	ldr	r0, [pc, #248]	; (8002be8 <ILI9341_Draw_Pixel+0x18c>)
 8002af0:	f007 fc2b 	bl	800a34a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002af4:	2201      	movs	r2, #1
 8002af6:	2110      	movs	r1, #16
 8002af8:	483a      	ldr	r0, [pc, #232]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002afa:	f002 ff03 	bl	8005904 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002afe:	2200      	movs	r2, #0
 8002b00:	2140      	movs	r1, #64	; 0x40
 8002b02:	4838      	ldr	r0, [pc, #224]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b04:	f002 fefe 	bl	8005904 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2110      	movs	r1, #16
 8002b0c:	4835      	ldr	r0, [pc, #212]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b0e:	f002 fef9 	bl	8005904 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002b12:	202b      	movs	r0, #43	; 0x2b
 8002b14:	f7ff fcc2 	bl	800249c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002b18:	2201      	movs	r2, #1
 8002b1a:	2140      	movs	r1, #64	; 0x40
 8002b1c:	4831      	ldr	r0, [pc, #196]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b1e:	f002 fef1 	bl	8005904 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002b22:	2201      	movs	r2, #1
 8002b24:	2110      	movs	r1, #16
 8002b26:	482f      	ldr	r0, [pc, #188]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b28:	f002 feec 	bl	8005904 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2110      	movs	r1, #16
 8002b30:	482c      	ldr	r0, [pc, #176]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b32:	f002 fee7 	bl	8005904 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002b36:	88bb      	ldrh	r3, [r7, #4]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	743b      	strb	r3, [r7, #16]
 8002b40:	88bb      	ldrh	r3, [r7, #4]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	747b      	strb	r3, [r7, #17]
 8002b46:	88bb      	ldrh	r3, [r7, #4]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	121b      	asrs	r3, r3, #8
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	74bb      	strb	r3, [r7, #18]
 8002b50:	88bb      	ldrh	r3, [r7, #4]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	3301      	adds	r3, #1
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002b5a:	f107 0110 	add.w	r1, r7, #16
 8002b5e:	2301      	movs	r3, #1
 8002b60:	2204      	movs	r2, #4
 8002b62:	4821      	ldr	r0, [pc, #132]	; (8002be8 <ILI9341_Draw_Pixel+0x18c>)
 8002b64:	f007 fbf1 	bl	800a34a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002b68:	2201      	movs	r2, #1
 8002b6a:	2110      	movs	r1, #16
 8002b6c:	481d      	ldr	r0, [pc, #116]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b6e:	f002 fec9 	bl	8005904 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002b72:	2200      	movs	r2, #0
 8002b74:	2140      	movs	r1, #64	; 0x40
 8002b76:	481b      	ldr	r0, [pc, #108]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b78:	f002 fec4 	bl	8005904 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2110      	movs	r1, #16
 8002b80:	4818      	ldr	r0, [pc, #96]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b82:	f002 febf 	bl	8005904 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002b86:	202c      	movs	r0, #44	; 0x2c
 8002b88:	f7ff fc88 	bl	800249c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	2140      	movs	r1, #64	; 0x40
 8002b90:	4814      	ldr	r0, [pc, #80]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b92:	f002 feb7 	bl	8005904 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002b96:	2201      	movs	r2, #1
 8002b98:	2110      	movs	r1, #16
 8002b9a:	4812      	ldr	r0, [pc, #72]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002b9c:	f002 feb2 	bl	8005904 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2110      	movs	r1, #16
 8002ba4:	480f      	ldr	r0, [pc, #60]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002ba6:	f002 fead 	bl	8005904 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002baa:	887b      	ldrh	r3, [r7, #2]
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	733b      	strb	r3, [r7, #12]
 8002bb4:	887b      	ldrh	r3, [r7, #2]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002bba:	f107 010c 	add.w	r1, r7, #12
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	4809      	ldr	r0, [pc, #36]	; (8002be8 <ILI9341_Draw_Pixel+0x18c>)
 8002bc4:	f007 fbc1 	bl	800a34a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002bc8:	2201      	movs	r2, #1
 8002bca:	2110      	movs	r1, #16
 8002bcc:	4805      	ldr	r0, [pc, #20]	; (8002be4 <ILI9341_Draw_Pixel+0x188>)
 8002bce:	f002 fe99 	bl	8005904 <HAL_GPIO_WritePin>
 8002bd2:	e000      	b.n	8002bd6 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002bd4:	bf00      	nop
	
}
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	2000000a 	.word	0x2000000a
 8002be0:	20000008 	.word	0x20000008
 8002be4:	40021000 	.word	0x40021000
 8002be8:	20000288 	.word	0x20000288

08002bec <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	80fb      	strh	r3, [r7, #6]
 8002bfe:	4603      	mov	r3, r0
 8002c00:	80bb      	strh	r3, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	807b      	strh	r3, [r7, #2]
 8002c06:	4613      	mov	r3, r2
 8002c08:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002c0a:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <ILI9341_Draw_Rectangle+0xb0>)
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	88fa      	ldrh	r2, [r7, #6]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d23d      	bcs.n	8002c92 <ILI9341_Draw_Rectangle+0xa6>
 8002c16:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <ILI9341_Draw_Rectangle+0xb4>)
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	88ba      	ldrh	r2, [r7, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d237      	bcs.n	8002c92 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002c22:	88fa      	ldrh	r2, [r7, #6]
 8002c24:	887b      	ldrh	r3, [r7, #2]
 8002c26:	4413      	add	r3, r2
 8002c28:	4a1c      	ldr	r2, [pc, #112]	; (8002c9c <ILI9341_Draw_Rectangle+0xb0>)
 8002c2a:	8812      	ldrh	r2, [r2, #0]
 8002c2c:	b292      	uxth	r2, r2
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	dd05      	ble.n	8002c3e <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002c32:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <ILI9341_Draw_Rectangle+0xb0>)
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002c3e:	88ba      	ldrh	r2, [r7, #4]
 8002c40:	883b      	ldrh	r3, [r7, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <ILI9341_Draw_Rectangle+0xb4>)
 8002c46:	8812      	ldrh	r2, [r2, #0]
 8002c48:	b292      	uxth	r2, r2
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	dd05      	ble.n	8002c5a <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <ILI9341_Draw_Rectangle+0xb4>)
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	88bb      	ldrh	r3, [r7, #4]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002c5a:	88fa      	ldrh	r2, [r7, #6]
 8002c5c:	887b      	ldrh	r3, [r7, #2]
 8002c5e:	4413      	add	r3, r2
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29c      	uxth	r4, r3
 8002c66:	88ba      	ldrh	r2, [r7, #4]
 8002c68:	883b      	ldrh	r3, [r7, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	88b9      	ldrh	r1, [r7, #4]
 8002c74:	88f8      	ldrh	r0, [r7, #6]
 8002c76:	4622      	mov	r2, r4
 8002c78:	f7ff fc5e 	bl	8002538 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002c7c:	883b      	ldrh	r3, [r7, #0]
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	fb02 f303 	mul.w	r3, r2, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	8b3b      	ldrh	r3, [r7, #24]
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fe2a 	bl	80028e4 <ILI9341_Draw_Colour_Burst>
 8002c90:	e000      	b.n	8002c94 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002c92:	bf00      	nop
}
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd90      	pop	{r4, r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	2000000a 	.word	0x2000000a
 8002ca0:	20000008 	.word	0x20000008

08002ca4 <menu>:
uint8_t pointer_on_selected_menu =1;
//uint8_t p =0;
//void print_sign(p);

void menu()
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
	Menu_SetGenericWriteCallback(Generic_Write);  //передача показника на Generic_Write функцію  point in Menu_SetGenericWriteCallback
 8002caa:	4832      	ldr	r0, [pc, #200]	; (8002d74 <menu+0xd0>)
 8002cac:	f000 fd4a 	bl	8003744 <Menu_SetGenericWriteCallback>

	//print_all_top_menu();
	Menu_Navigate(&Menu_1);
 8002cb0:	4831      	ldr	r0, [pc, #196]	; (8002d78 <menu+0xd4>)
 8002cb2:	f000 fd19 	bl	80036e8 <Menu_Navigate>
//	print_sign(p);
//	Menu_Navigate(&Menu_2);
//	Menu_Navigate(&Menu_3);
	while (1)
	  {
	   uint8_t pressed_key = getPressKey();
 8002cb6:	f000 fc4f 	bl	8003558 <getPressKey>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]

	   if (pressed_key != BUTTON_NOTHING && !flagPressed)
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2bff      	cmp	r3, #255	; 0xff
 8002cc2:	d04a      	beq.n	8002d5a <menu+0xb6>
 8002cc4:	4b2d      	ldr	r3, [pc, #180]	; (8002d7c <menu+0xd8>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	f083 0301 	eor.w	r3, r3, #1
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d043      	beq.n	8002d5a <menu+0xb6>
	   {
			flagPressed = true;
 8002cd2:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <menu+0xd8>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
			switch(pressed_key)
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d83b      	bhi.n	8002d56 <menu+0xb2>
 8002cde:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <menu+0x40>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002cf9 	.word	0x08002cf9
 8002ce8:	08002d09 	.word	0x08002d09
 8002cec:	08002d25 	.word	0x08002d25
 8002cf0:	08002d41 	.word	0x08002d41
 8002cf4:	08002d51 	.word	0x08002d51
			{
				case BUTTON_LEFT:
					Menu_Navigate(MENU_PARENT);
 8002cf8:	f000 fcea 	bl	80036d0 <Menu_GetCurrentMenu>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fcf1 	bl	80036e8 <Menu_Navigate>
					break;
 8002d06:	e027      	b.n	8002d58 <menu+0xb4>

				case BUTTON_UP:
					pointer_on_selected_menu--;			// <<<<<<<<<<<<<<<<
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <menu+0xdc>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <menu+0xdc>)
 8002d12:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_PREVIOUS);
 8002d14:	f000 fcdc 	bl	80036d0 <Menu_GetCurrentMenu>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 fce3 	bl	80036e8 <Menu_Navigate>
					break;
 8002d22:	e019      	b.n	8002d58 <menu+0xb4>

				case BUTTON_DOWN:
					pointer_on_selected_menu++;			// <<<<<<<<<<<<<<<<
 8002d24:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <menu+0xdc>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <menu+0xdc>)
 8002d2e:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_NEXT);
 8002d30:	f000 fcce 	bl	80036d0 <Menu_GetCurrentMenu>
 8002d34:	4603      	mov	r3, r0
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fcd5 	bl	80036e8 <Menu_Navigate>
					break;
 8002d3e:	e00b      	b.n	8002d58 <menu+0xb4>

				case BUTTON_RIGHT:
					Menu_Navigate(MENU_CHILD);
 8002d40:	f000 fcc6 	bl	80036d0 <Menu_GetCurrentMenu>
 8002d44:	4603      	mov	r3, r0
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fccd 	bl	80036e8 <Menu_Navigate>
					break;
 8002d4e:	e003      	b.n	8002d58 <menu+0xb4>

				case BUTTON_SELECT:
					Menu_EnterCurrentItem();
 8002d50:	f000 fd0c 	bl	800376c <Menu_EnterCurrentItem>
					break;
 8002d54:	e000      	b.n	8002d58 <menu+0xb4>

			 default:
			  break;
 8002d56:	bf00      	nop
			switch(pressed_key)
 8002d58:	e00b      	b.n	8002d72 <menu+0xce>
			}
	   }
	   else if (getPressKey() == BUTTON_NOTHING && flagPressed)
 8002d5a:	f000 fbfd 	bl	8003558 <getPressKey>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2bff      	cmp	r3, #255	; 0xff
 8002d62:	d1a8      	bne.n	8002cb6 <menu+0x12>
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <menu+0xd8>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0a4      	beq.n	8002cb6 <menu+0x12>
	   {
		   flagPressed = false;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <menu+0xd8>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
	  {
 8002d72:	e7a0      	b.n	8002cb6 <menu+0x12>
 8002d74:	08003689 	.word	0x08003689
 8002d78:	0800f274 	.word	0x0800f274
 8002d7c:	20000200 	.word	0x20000200
 8002d80:	20000148 	.word	0x20000148

08002d84 <print_all_top_menu>:
	  }
}
// -----------------------------------------------------------------------
//// TEST PRINT FUNCTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void print_all_top_menu(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	9301      	str	r3, [sp, #4]
 8002d8e:	2302      	movs	r3, #2
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d96:	226e      	movs	r2, #110	; 0x6e
 8002d98:	211e      	movs	r1, #30
 8002d9a:	4884      	ldr	r0, [pc, #528]	; (8002fac <print_all_top_menu+0x228>)
 8002d9c:	f7ff fb44 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8002da0:	2300      	movs	r3, #0
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	2302      	movs	r3, #2
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dac:	2282      	movs	r2, #130	; 0x82
 8002dae:	211e      	movs	r1, #30
 8002db0:	487e      	ldr	r0, [pc, #504]	; (8002fac <print_all_top_menu+0x228>)
 8002db2:	f7ff fb39 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 8002db6:	2300      	movs	r3, #0
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	2302      	movs	r3, #2
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dc2:	2296      	movs	r2, #150	; 0x96
 8002dc4:	211e      	movs	r1, #30
 8002dc6:	4879      	ldr	r0, [pc, #484]	; (8002fac <print_all_top_menu+0x228>)
 8002dc8:	f7ff fb2e 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8002dcc:	2300      	movs	r3, #0
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dd8:	22aa      	movs	r2, #170	; 0xaa
 8002dda:	211e      	movs	r1, #30
 8002ddc:	4873      	ldr	r0, [pc, #460]	; (8002fac <print_all_top_menu+0x228>)
 8002dde:	f7ff fb23 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8002de2:	2300      	movs	r3, #0
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	2302      	movs	r3, #2
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dee:	22be      	movs	r2, #190	; 0xbe
 8002df0:	211e      	movs	r1, #30
 8002df2:	486e      	ldr	r0, [pc, #440]	; (8002fac <print_all_top_menu+0x228>)
 8002df4:	f7ff fb18 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8002df8:	2300      	movs	r3, #0
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e04:	22d2      	movs	r2, #210	; 0xd2
 8002e06:	211e      	movs	r1, #30
 8002e08:	4868      	ldr	r0, [pc, #416]	; (8002fac <print_all_top_menu+0x228>)
 8002e0a:	f7ff fb0d 	bl	8002428 <ILI9341_Draw_Text>

	// Print all main menus
	ILI9341_Draw_Text(main_menus[0], 30, 110, WHITE, 2, BLACK);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	2302      	movs	r3, #2
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e1a:	226e      	movs	r2, #110	; 0x6e
 8002e1c:	211e      	movs	r1, #30
 8002e1e:	4864      	ldr	r0, [pc, #400]	; (8002fb0 <print_all_top_menu+0x22c>)
 8002e20:	f7ff fb02 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[1], 30, 130, WHITE, 2, BLACK);
 8002e24:	2300      	movs	r3, #0
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	2302      	movs	r3, #2
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e30:	2282      	movs	r2, #130	; 0x82
 8002e32:	211e      	movs	r1, #30
 8002e34:	485f      	ldr	r0, [pc, #380]	; (8002fb4 <print_all_top_menu+0x230>)
 8002e36:	f7ff faf7 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[2], 30, 150, WHITE, 2, BLACK);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	2302      	movs	r3, #2
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e46:	2296      	movs	r2, #150	; 0x96
 8002e48:	211e      	movs	r1, #30
 8002e4a:	485b      	ldr	r0, [pc, #364]	; (8002fb8 <print_all_top_menu+0x234>)
 8002e4c:	f7ff faec 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[3], 30, 170, WHITE, 2, BLACK);
 8002e50:	2300      	movs	r3, #0
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	2302      	movs	r3, #2
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e5c:	22aa      	movs	r2, #170	; 0xaa
 8002e5e:	211e      	movs	r1, #30
 8002e60:	4856      	ldr	r0, [pc, #344]	; (8002fbc <print_all_top_menu+0x238>)
 8002e62:	f7ff fae1 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[4], 30, 190, WHITE, 2, BLACK);
 8002e66:	2300      	movs	r3, #0
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e72:	22be      	movs	r2, #190	; 0xbe
 8002e74:	211e      	movs	r1, #30
 8002e76:	4852      	ldr	r0, [pc, #328]	; (8002fc0 <print_all_top_menu+0x23c>)
 8002e78:	f7ff fad6 	bl	8002428 <ILI9341_Draw_Text>

	//
	if(pointer_on_selected_menu <= 0)
 8002e7c:	4b51      	ldr	r3, [pc, #324]	; (8002fc4 <print_all_top_menu+0x240>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <print_all_top_menu+0x106>
	{
		pointer_on_selected_menu = 5;
 8002e84:	4b4f      	ldr	r3, [pc, #316]	; (8002fc4 <print_all_top_menu+0x240>)
 8002e86:	2205      	movs	r2, #5
 8002e88:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 6)
 8002e8a:	4b4e      	ldr	r3, [pc, #312]	; (8002fc4 <print_all_top_menu+0x240>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b05      	cmp	r3, #5
 8002e90:	d902      	bls.n	8002e98 <print_all_top_menu+0x114>
	{
		pointer_on_selected_menu = 1;
 8002e92:	4b4c      	ldr	r3, [pc, #304]	; (8002fc4 <print_all_top_menu+0x240>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
	}
	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 8002e98:	2300      	movs	r3, #0
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ea4:	226e      	movs	r2, #110	; 0x6e
 8002ea6:	2105      	movs	r1, #5
 8002ea8:	4847      	ldr	r0, [pc, #284]	; (8002fc8 <print_all_top_menu+0x244>)
 8002eaa:	f7ff fabd 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	9301      	str	r3, [sp, #4]
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eba:	2282      	movs	r2, #130	; 0x82
 8002ebc:	2105      	movs	r1, #5
 8002ebe:	4842      	ldr	r0, [pc, #264]	; (8002fc8 <print_all_top_menu+0x244>)
 8002ec0:	f7ff fab2 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	2302      	movs	r3, #2
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ed0:	2296      	movs	r2, #150	; 0x96
 8002ed2:	2105      	movs	r1, #5
 8002ed4:	483c      	ldr	r0, [pc, #240]	; (8002fc8 <print_all_top_menu+0x244>)
 8002ed6:	f7ff faa7 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 8002eda:	2300      	movs	r3, #0
 8002edc:	9301      	str	r3, [sp, #4]
 8002ede:	2302      	movs	r3, #2
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ee6:	22aa      	movs	r2, #170	; 0xaa
 8002ee8:	2105      	movs	r1, #5
 8002eea:	4837      	ldr	r0, [pc, #220]	; (8002fc8 <print_all_top_menu+0x244>)
 8002eec:	f7ff fa9c 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002efc:	22be      	movs	r2, #190	; 0xbe
 8002efe:	2105      	movs	r1, #5
 8002f00:	4831      	ldr	r0, [pc, #196]	; (8002fc8 <print_all_top_menu+0x244>)
 8002f02:	f7ff fa91 	bl	8002428 <ILI9341_Draw_Text>

	// Point pointer on menu
	switch (pointer_on_selected_menu)
 8002f06:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <print_all_top_menu+0x240>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d849      	bhi.n	8002fa4 <print_all_top_menu+0x220>
 8002f10:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <print_all_top_menu+0x194>)
 8002f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f16:	bf00      	nop
 8002f18:	08002f2d 	.word	0x08002f2d
 8002f1c:	08002f45 	.word	0x08002f45
 8002f20:	08002f5d 	.word	0x08002f5d
 8002f24:	08002f75 	.word	0x08002f75
 8002f28:	08002f8d 	.word	0x08002f8d
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	2302      	movs	r3, #2
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f38:	226e      	movs	r2, #110	; 0x6e
 8002f3a:	2105      	movs	r1, #5
 8002f3c:	4823      	ldr	r0, [pc, #140]	; (8002fcc <print_all_top_menu+0x248>)
 8002f3e:	f7ff fa73 	bl	8002428 <ILI9341_Draw_Text>
			break;
 8002f42:	e02f      	b.n	8002fa4 <print_all_top_menu+0x220>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8002f44:	2300      	movs	r3, #0
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	2302      	movs	r3, #2
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f50:	2282      	movs	r2, #130	; 0x82
 8002f52:	2105      	movs	r1, #5
 8002f54:	481d      	ldr	r0, [pc, #116]	; (8002fcc <print_all_top_menu+0x248>)
 8002f56:	f7ff fa67 	bl	8002428 <ILI9341_Draw_Text>
			break;
 8002f5a:	e023      	b.n	8002fa4 <print_all_top_menu+0x220>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	2302      	movs	r3, #2
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f68:	2296      	movs	r2, #150	; 0x96
 8002f6a:	2105      	movs	r1, #5
 8002f6c:	4817      	ldr	r0, [pc, #92]	; (8002fcc <print_all_top_menu+0x248>)
 8002f6e:	f7ff fa5b 	bl	8002428 <ILI9341_Draw_Text>
			break;
 8002f72:	e017      	b.n	8002fa4 <print_all_top_menu+0x220>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 8002f74:	2300      	movs	r3, #0
 8002f76:	9301      	str	r3, [sp, #4]
 8002f78:	2302      	movs	r3, #2
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f80:	22aa      	movs	r2, #170	; 0xaa
 8002f82:	2105      	movs	r1, #5
 8002f84:	4811      	ldr	r0, [pc, #68]	; (8002fcc <print_all_top_menu+0x248>)
 8002f86:	f7ff fa4f 	bl	8002428 <ILI9341_Draw_Text>
			break;
 8002f8a:	e00b      	b.n	8002fa4 <print_all_top_menu+0x220>
		case 5:
			ILI9341_Draw_Text( "->", 5, 190, RED, 2, BLACK);
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	2302      	movs	r3, #2
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f98:	22be      	movs	r2, #190	; 0xbe
 8002f9a:	2105      	movs	r1, #5
 8002f9c:	480b      	ldr	r0, [pc, #44]	; (8002fcc <print_all_top_menu+0x248>)
 8002f9e:	f7ff fa43 	bl	8002428 <ILI9341_Draw_Text>
			break;
 8002fa2:	bf00      	nop
	}

}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	0800eeec 	.word	0x0800eeec
 8002fb0:	20000010 	.word	0x20000010
 8002fb4:	2000002e 	.word	0x2000002e
 8002fb8:	2000004c 	.word	0x2000004c
 8002fbc:	2000006a 	.word	0x2000006a
 8002fc0:	20000088 	.word	0x20000088
 8002fc4:	20000148 	.word	0x20000148
 8002fc8:	0800ef10 	.word	0x0800ef10
 8002fcc:	0800ef14 	.word	0x0800ef14

08002fd0 <print_all_menu_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_menus(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	9301      	str	r3, [sp, #4]
 8002fda:	2302      	movs	r3, #2
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fe2:	226e      	movs	r2, #110	; 0x6e
 8002fe4:	211e      	movs	r1, #30
 8002fe6:	4877      	ldr	r0, [pc, #476]	; (80031c4 <print_all_menu_1_menus+0x1f4>)
 8002fe8:	f7ff fa1e 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8002fec:	2300      	movs	r3, #0
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ff8:	2282      	movs	r2, #130	; 0x82
 8002ffa:	211e      	movs	r1, #30
 8002ffc:	4871      	ldr	r0, [pc, #452]	; (80031c4 <print_all_menu_1_menus+0x1f4>)
 8002ffe:	f7ff fa13 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 8003002:	2300      	movs	r3, #0
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	2302      	movs	r3, #2
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800300e:	2296      	movs	r2, #150	; 0x96
 8003010:	211e      	movs	r1, #30
 8003012:	486c      	ldr	r0, [pc, #432]	; (80031c4 <print_all_menu_1_menus+0x1f4>)
 8003014:	f7ff fa08 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8003018:	2300      	movs	r3, #0
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	2302      	movs	r3, #2
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003024:	22aa      	movs	r2, #170	; 0xaa
 8003026:	211e      	movs	r1, #30
 8003028:	4866      	ldr	r0, [pc, #408]	; (80031c4 <print_all_menu_1_menus+0x1f4>)
 800302a:	f7ff f9fd 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 800302e:	2300      	movs	r3, #0
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	2302      	movs	r3, #2
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800303a:	22be      	movs	r2, #190	; 0xbe
 800303c:	211e      	movs	r1, #30
 800303e:	4861      	ldr	r0, [pc, #388]	; (80031c4 <print_all_menu_1_menus+0x1f4>)
 8003040:	f7ff f9f2 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8003044:	2300      	movs	r3, #0
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	2302      	movs	r3, #2
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003050:	22d2      	movs	r2, #210	; 0xd2
 8003052:	211e      	movs	r1, #30
 8003054:	485b      	ldr	r0, [pc, #364]	; (80031c4 <print_all_menu_1_menus+0x1f4>)
 8003056:	f7ff f9e7 	bl	8002428 <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 800305a:	2300      	movs	r3, #0
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	2302      	movs	r3, #2
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003066:	226e      	movs	r2, #110	; 0x6e
 8003068:	2105      	movs	r1, #5
 800306a:	4857      	ldr	r0, [pc, #348]	; (80031c8 <print_all_menu_1_menus+0x1f8>)
 800306c:	f7ff f9dc 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8003070:	2300      	movs	r3, #0
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	2302      	movs	r3, #2
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800307c:	2282      	movs	r2, #130	; 0x82
 800307e:	2105      	movs	r1, #5
 8003080:	4851      	ldr	r0, [pc, #324]	; (80031c8 <print_all_menu_1_menus+0x1f8>)
 8003082:	f7ff f9d1 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 8003086:	2300      	movs	r3, #0
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	2302      	movs	r3, #2
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003092:	2296      	movs	r2, #150	; 0x96
 8003094:	2105      	movs	r1, #5
 8003096:	484c      	ldr	r0, [pc, #304]	; (80031c8 <print_all_menu_1_menus+0x1f8>)
 8003098:	f7ff f9c6 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 800309c:	2300      	movs	r3, #0
 800309e:	9301      	str	r3, [sp, #4]
 80030a0:	2302      	movs	r3, #2
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030a8:	22aa      	movs	r2, #170	; 0xaa
 80030aa:	2105      	movs	r1, #5
 80030ac:	4846      	ldr	r0, [pc, #280]	; (80031c8 <print_all_menu_1_menus+0x1f8>)
 80030ae:	f7ff f9bb 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 80030b2:	2300      	movs	r3, #0
 80030b4:	9301      	str	r3, [sp, #4]
 80030b6:	2302      	movs	r3, #2
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030be:	22be      	movs	r2, #190	; 0xbe
 80030c0:	2105      	movs	r1, #5
 80030c2:	4841      	ldr	r0, [pc, #260]	; (80031c8 <print_all_menu_1_menus+0x1f8>)
 80030c4:	f7ff f9b0 	bl	8002428 <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1[0], 30, 110, WHITE, 2, BLACK);
 80030c8:	2300      	movs	r3, #0
 80030ca:	9301      	str	r3, [sp, #4]
 80030cc:	2302      	movs	r3, #2
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030d4:	226e      	movs	r2, #110	; 0x6e
 80030d6:	211e      	movs	r1, #30
 80030d8:	483c      	ldr	r0, [pc, #240]	; (80031cc <print_all_menu_1_menus+0x1fc>)
 80030da:	f7ff f9a5 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[1], 30, 130, WHITE, 2, BLACK);
 80030de:	2300      	movs	r3, #0
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	2302      	movs	r3, #2
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ea:	2282      	movs	r2, #130	; 0x82
 80030ec:	211e      	movs	r1, #30
 80030ee:	4838      	ldr	r0, [pc, #224]	; (80031d0 <print_all_menu_1_menus+0x200>)
 80030f0:	f7ff f99a 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[2], 30, 150, WHITE, 2, BLACK);
 80030f4:	2300      	movs	r3, #0
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	2302      	movs	r3, #2
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003100:	2296      	movs	r2, #150	; 0x96
 8003102:	211e      	movs	r1, #30
 8003104:	4833      	ldr	r0, [pc, #204]	; (80031d4 <print_all_menu_1_menus+0x204>)
 8003106:	f7ff f98f 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[3], 30, 170, WHITE, 2, BLACK);
 800310a:	2300      	movs	r3, #0
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	2302      	movs	r3, #2
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003116:	22aa      	movs	r2, #170	; 0xaa
 8003118:	211e      	movs	r1, #30
 800311a:	482f      	ldr	r0, [pc, #188]	; (80031d8 <print_all_menu_1_menus+0x208>)
 800311c:	f7ff f984 	bl	8002428 <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 8003120:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <print_all_menu_1_menus+0x20c>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <print_all_menu_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 8003128:	4b2c      	ldr	r3, [pc, #176]	; (80031dc <print_all_menu_1_menus+0x20c>)
 800312a:	2204      	movs	r2, #4
 800312c:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 800312e:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <print_all_menu_1_menus+0x20c>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b04      	cmp	r3, #4
 8003134:	d902      	bls.n	800313c <print_all_menu_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 8003136:	4b29      	ldr	r3, [pc, #164]	; (80031dc <print_all_menu_1_menus+0x20c>)
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 800313c:	4b27      	ldr	r3, [pc, #156]	; (80031dc <print_all_menu_1_menus+0x20c>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	3b01      	subs	r3, #1
 8003142:	2b03      	cmp	r3, #3
 8003144:	d83a      	bhi.n	80031bc <print_all_menu_1_menus+0x1ec>
 8003146:	a201      	add	r2, pc, #4	; (adr r2, 800314c <print_all_menu_1_menus+0x17c>)
 8003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314c:	0800315d 	.word	0x0800315d
 8003150:	08003175 	.word	0x08003175
 8003154:	0800318d 	.word	0x0800318d
 8003158:	080031a5 	.word	0x080031a5
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 800315c:	2300      	movs	r3, #0
 800315e:	9301      	str	r3, [sp, #4]
 8003160:	2302      	movs	r3, #2
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003168:	226e      	movs	r2, #110	; 0x6e
 800316a:	2105      	movs	r1, #5
 800316c:	481c      	ldr	r0, [pc, #112]	; (80031e0 <print_all_menu_1_menus+0x210>)
 800316e:	f7ff f95b 	bl	8002428 <ILI9341_Draw_Text>
			break;
 8003172:	e023      	b.n	80031bc <print_all_menu_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8003174:	2300      	movs	r3, #0
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	2302      	movs	r3, #2
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003180:	2282      	movs	r2, #130	; 0x82
 8003182:	2105      	movs	r1, #5
 8003184:	4816      	ldr	r0, [pc, #88]	; (80031e0 <print_all_menu_1_menus+0x210>)
 8003186:	f7ff f94f 	bl	8002428 <ILI9341_Draw_Text>
			break;
 800318a:	e017      	b.n	80031bc <print_all_menu_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 800318c:	2300      	movs	r3, #0
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	2302      	movs	r3, #2
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003198:	2296      	movs	r2, #150	; 0x96
 800319a:	2105      	movs	r1, #5
 800319c:	4810      	ldr	r0, [pc, #64]	; (80031e0 <print_all_menu_1_menus+0x210>)
 800319e:	f7ff f943 	bl	8002428 <ILI9341_Draw_Text>
			break;
 80031a2:	e00b      	b.n	80031bc <print_all_menu_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 80031a4:	2300      	movs	r3, #0
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	2302      	movs	r3, #2
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031b0:	22aa      	movs	r2, #170	; 0xaa
 80031b2:	2105      	movs	r1, #5
 80031b4:	480a      	ldr	r0, [pc, #40]	; (80031e0 <print_all_menu_1_menus+0x210>)
 80031b6:	f7ff f937 	bl	8002428 <ILI9341_Draw_Text>
			break;
 80031ba:	bf00      	nop
	}
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	0800eeec 	.word	0x0800eeec
 80031c8:	0800ef10 	.word	0x0800ef10
 80031cc:	200000a8 	.word	0x200000a8
 80031d0:	200000bc 	.word	0x200000bc
 80031d4:	200000d0 	.word	0x200000d0
 80031d8:	200000e4 	.word	0x200000e4
 80031dc:	20000148 	.word	0x20000148
 80031e0:	0800ef14 	.word	0x0800ef14

080031e4 <print_all_menu_1_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_1_menus(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 80031ea:	2300      	movs	r3, #0
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	2302      	movs	r3, #2
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031f6:	226e      	movs	r2, #110	; 0x6e
 80031f8:	211e      	movs	r1, #30
 80031fa:	4877      	ldr	r0, [pc, #476]	; (80033d8 <print_all_menu_1_1_menus+0x1f4>)
 80031fc:	f7ff f914 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8003200:	2300      	movs	r3, #0
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	2302      	movs	r3, #2
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800320c:	2282      	movs	r2, #130	; 0x82
 800320e:	211e      	movs	r1, #30
 8003210:	4871      	ldr	r0, [pc, #452]	; (80033d8 <print_all_menu_1_1_menus+0x1f4>)
 8003212:	f7ff f909 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 8003216:	2300      	movs	r3, #0
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	2302      	movs	r3, #2
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003222:	2296      	movs	r2, #150	; 0x96
 8003224:	211e      	movs	r1, #30
 8003226:	486c      	ldr	r0, [pc, #432]	; (80033d8 <print_all_menu_1_1_menus+0x1f4>)
 8003228:	f7ff f8fe 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 800322c:	2300      	movs	r3, #0
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	2302      	movs	r3, #2
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003238:	22aa      	movs	r2, #170	; 0xaa
 800323a:	211e      	movs	r1, #30
 800323c:	4866      	ldr	r0, [pc, #408]	; (80033d8 <print_all_menu_1_1_menus+0x1f4>)
 800323e:	f7ff f8f3 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8003242:	2300      	movs	r3, #0
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	2302      	movs	r3, #2
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800324e:	22be      	movs	r2, #190	; 0xbe
 8003250:	211e      	movs	r1, #30
 8003252:	4861      	ldr	r0, [pc, #388]	; (80033d8 <print_all_menu_1_1_menus+0x1f4>)
 8003254:	f7ff f8e8 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8003258:	2300      	movs	r3, #0
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	2302      	movs	r3, #2
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003264:	22d2      	movs	r2, #210	; 0xd2
 8003266:	211e      	movs	r1, #30
 8003268:	485b      	ldr	r0, [pc, #364]	; (80033d8 <print_all_menu_1_1_menus+0x1f4>)
 800326a:	f7ff f8dd 	bl	8002428 <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 800326e:	2300      	movs	r3, #0
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	2302      	movs	r3, #2
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800327a:	226e      	movs	r2, #110	; 0x6e
 800327c:	2105      	movs	r1, #5
 800327e:	4857      	ldr	r0, [pc, #348]	; (80033dc <print_all_menu_1_1_menus+0x1f8>)
 8003280:	f7ff f8d2 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8003284:	2300      	movs	r3, #0
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	2302      	movs	r3, #2
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003290:	2282      	movs	r2, #130	; 0x82
 8003292:	2105      	movs	r1, #5
 8003294:	4851      	ldr	r0, [pc, #324]	; (80033dc <print_all_menu_1_1_menus+0x1f8>)
 8003296:	f7ff f8c7 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 800329a:	2300      	movs	r3, #0
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	2302      	movs	r3, #2
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032a6:	2296      	movs	r2, #150	; 0x96
 80032a8:	2105      	movs	r1, #5
 80032aa:	484c      	ldr	r0, [pc, #304]	; (80033dc <print_all_menu_1_1_menus+0x1f8>)
 80032ac:	f7ff f8bc 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 80032b0:	2300      	movs	r3, #0
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	2302      	movs	r3, #2
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032bc:	22aa      	movs	r2, #170	; 0xaa
 80032be:	2105      	movs	r1, #5
 80032c0:	4846      	ldr	r0, [pc, #280]	; (80033dc <print_all_menu_1_1_menus+0x1f8>)
 80032c2:	f7ff f8b1 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 80032c6:	2300      	movs	r3, #0
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	2302      	movs	r3, #2
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032d2:	22be      	movs	r2, #190	; 0xbe
 80032d4:	2105      	movs	r1, #5
 80032d6:	4841      	ldr	r0, [pc, #260]	; (80033dc <print_all_menu_1_1_menus+0x1f8>)
 80032d8:	f7ff f8a6 	bl	8002428 <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1_1[0], 30, 110, WHITE, 2, BLACK);
 80032dc:	2300      	movs	r3, #0
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	2302      	movs	r3, #2
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032e8:	226e      	movs	r2, #110	; 0x6e
 80032ea:	211e      	movs	r1, #30
 80032ec:	483c      	ldr	r0, [pc, #240]	; (80033e0 <print_all_menu_1_1_menus+0x1fc>)
 80032ee:	f7ff f89b 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[1], 30, 130, WHITE, 2, BLACK);
 80032f2:	2300      	movs	r3, #0
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	2302      	movs	r3, #2
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032fe:	2282      	movs	r2, #130	; 0x82
 8003300:	211e      	movs	r1, #30
 8003302:	4838      	ldr	r0, [pc, #224]	; (80033e4 <print_all_menu_1_1_menus+0x200>)
 8003304:	f7ff f890 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[2], 30, 150, WHITE, 2, BLACK);
 8003308:	2300      	movs	r3, #0
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	2302      	movs	r3, #2
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003314:	2296      	movs	r2, #150	; 0x96
 8003316:	211e      	movs	r1, #30
 8003318:	4833      	ldr	r0, [pc, #204]	; (80033e8 <print_all_menu_1_1_menus+0x204>)
 800331a:	f7ff f885 	bl	8002428 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[3], 30, 170, WHITE, 2, BLACK);
 800331e:	2300      	movs	r3, #0
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	2302      	movs	r3, #2
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800332a:	22aa      	movs	r2, #170	; 0xaa
 800332c:	211e      	movs	r1, #30
 800332e:	482f      	ldr	r0, [pc, #188]	; (80033ec <print_all_menu_1_1_menus+0x208>)
 8003330:	f7ff f87a 	bl	8002428 <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 8003334:	4b2e      	ldr	r3, [pc, #184]	; (80033f0 <print_all_menu_1_1_menus+0x20c>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <print_all_menu_1_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 800333c:	4b2c      	ldr	r3, [pc, #176]	; (80033f0 <print_all_menu_1_1_menus+0x20c>)
 800333e:	2204      	movs	r2, #4
 8003340:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 8003342:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <print_all_menu_1_1_menus+0x20c>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b04      	cmp	r3, #4
 8003348:	d902      	bls.n	8003350 <print_all_menu_1_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 800334a:	4b29      	ldr	r3, [pc, #164]	; (80033f0 <print_all_menu_1_1_menus+0x20c>)
 800334c:	2201      	movs	r2, #1
 800334e:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 8003350:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <print_all_menu_1_1_menus+0x20c>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	3b01      	subs	r3, #1
 8003356:	2b03      	cmp	r3, #3
 8003358:	d83a      	bhi.n	80033d0 <print_all_menu_1_1_menus+0x1ec>
 800335a:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <print_all_menu_1_1_menus+0x17c>)
 800335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003360:	08003371 	.word	0x08003371
 8003364:	08003389 	.word	0x08003389
 8003368:	080033a1 	.word	0x080033a1
 800336c:	080033b9 	.word	0x080033b9
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8003370:	2300      	movs	r3, #0
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	2302      	movs	r3, #2
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800337c:	226e      	movs	r2, #110	; 0x6e
 800337e:	2105      	movs	r1, #5
 8003380:	481c      	ldr	r0, [pc, #112]	; (80033f4 <print_all_menu_1_1_menus+0x210>)
 8003382:	f7ff f851 	bl	8002428 <ILI9341_Draw_Text>
			break;
 8003386:	e023      	b.n	80033d0 <print_all_menu_1_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8003388:	2300      	movs	r3, #0
 800338a:	9301      	str	r3, [sp, #4]
 800338c:	2302      	movs	r3, #2
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003394:	2282      	movs	r2, #130	; 0x82
 8003396:	2105      	movs	r1, #5
 8003398:	4816      	ldr	r0, [pc, #88]	; (80033f4 <print_all_menu_1_1_menus+0x210>)
 800339a:	f7ff f845 	bl	8002428 <ILI9341_Draw_Text>
			break;
 800339e:	e017      	b.n	80033d0 <print_all_menu_1_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 80033a0:	2300      	movs	r3, #0
 80033a2:	9301      	str	r3, [sp, #4]
 80033a4:	2302      	movs	r3, #2
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033ac:	2296      	movs	r2, #150	; 0x96
 80033ae:	2105      	movs	r1, #5
 80033b0:	4810      	ldr	r0, [pc, #64]	; (80033f4 <print_all_menu_1_1_menus+0x210>)
 80033b2:	f7ff f839 	bl	8002428 <ILI9341_Draw_Text>
			break;
 80033b6:	e00b      	b.n	80033d0 <print_all_menu_1_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 80033b8:	2300      	movs	r3, #0
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	2302      	movs	r3, #2
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033c4:	22aa      	movs	r2, #170	; 0xaa
 80033c6:	2105      	movs	r1, #5
 80033c8:	480a      	ldr	r0, [pc, #40]	; (80033f4 <print_all_menu_1_1_menus+0x210>)
 80033ca:	f7ff f82d 	bl	8002428 <ILI9341_Draw_Text>
			break;
 80033ce:	bf00      	nop
	}
}
 80033d0:	bf00      	nop
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	0800eeec 	.word	0x0800eeec
 80033dc:	0800ef10 	.word	0x0800ef10
 80033e0:	200000f8 	.word	0x200000f8
 80033e4:	2000010c 	.word	0x2000010c
 80033e8:	20000120 	.word	0x20000120
 80033ec:	20000134 	.word	0x20000134
 80033f0:	20000148 	.word	0x20000148
 80033f4:	0800ef14 	.word	0x0800ef14

080033f8 <tongle_green_led>:
// -----------------------------------------------------------------------
void tongle_green_led(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12);
 80033fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <tongle_green_led+0x14>)
 8003402:	f002 fa98 	bl	8005936 <HAL_GPIO_TogglePin>
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40020c00 	.word	0x40020c00

08003410 <RED_LED_ON>:
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------
void RED_LED_ON(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003414:	2201      	movs	r2, #1
 8003416:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800341a:	4802      	ldr	r0, [pc, #8]	; (8003424 <RED_LED_ON+0x14>)
 800341c:	f002 fa72 	bl	8005904 <HAL_GPIO_WritePin>
}
 8003420:	bf00      	nop
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40020c00 	.word	0x40020c00

08003428 <RED_LED_OFF>:
// -----------------------------------------------------------------------
void RED_LED_OFF(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800342c:	2200      	movs	r2, #0
 800342e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003432:	4802      	ldr	r0, [pc, #8]	; (800343c <RED_LED_OFF+0x14>)
 8003434:	f002 fa66 	bl	8005904 <HAL_GPIO_WritePin>
}
 8003438:	bf00      	nop
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40020c00 	.word	0x40020c00

08003440 <Level1Item3_Enter>:
// -----------------------------------------------------------------------
static void Level1Item3_Enter(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af02      	add	r7, sp, #8
 bool flagPressed = false;
 8003446:	2300      	movs	r3, #0
 8003448:	71fb      	strb	r3, [r7, #7]

 ILI9341_Draw_Text( "                          ", 10, 60, WHITE, 2, BLACK);   // Clearn lcd
 800344a:	2300      	movs	r3, #0
 800344c:	9301      	str	r3, [sp, #4]
 800344e:	2302      	movs	r3, #2
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003456:	223c      	movs	r2, #60	; 0x3c
 8003458:	210a      	movs	r1, #10
 800345a:	4838      	ldr	r0, [pc, #224]	; (800353c <Level1Item3_Enter+0xfc>)
 800345c:	f7fe ffe4 	bl	8002428 <ILI9341_Draw_Text>

 ILI9341_Draw_Text( "Red LED is:", 10, 60, WHITE, 2, BLACK);
 8003460:	2300      	movs	r3, #0
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	2302      	movs	r3, #2
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800346c:	223c      	movs	r2, #60	; 0x3c
 800346e:	210a      	movs	r1, #10
 8003470:	4833      	ldr	r0, [pc, #204]	; (8003540 <Level1Item3_Enter+0x100>)
 8003472:	f7fe ffd9 	bl	8002428 <ILI9341_Draw_Text>

 while(getPressKey() != BUTTON_LEFT)
 8003476:	e049      	b.n	800350c <Level1Item3_Enter+0xcc>
 {
	 // Read PIN
	 int led_status =  HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14);
 8003478:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800347c:	4831      	ldr	r0, [pc, #196]	; (8003544 <Level1Item3_Enter+0x104>)
 800347e:	f002 fa29 	bl	80058d4 <HAL_GPIO_ReadPin>
 8003482:	4603      	mov	r3, r0
 8003484:	603b      	str	r3, [r7, #0]

	 if(flagPressed == true)
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d019      	beq.n	80034c0 <Level1Item3_Enter+0x80>
	 {
		 if(led_status == GPIO_PIN_SET)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10b      	bne.n	80034aa <Level1Item3_Enter+0x6a>
		 {
			 ILI9341_Draw_Text( "ON ", 150, 60, WHITE, 2, BLACK);
 8003492:	2300      	movs	r3, #0
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	2302      	movs	r3, #2
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800349e:	223c      	movs	r2, #60	; 0x3c
 80034a0:	2196      	movs	r1, #150	; 0x96
 80034a2:	4829      	ldr	r0, [pc, #164]	; (8003548 <Level1Item3_Enter+0x108>)
 80034a4:	f7fe ffc0 	bl	8002428 <ILI9341_Draw_Text>
 80034a8:	e00a      	b.n	80034c0 <Level1Item3_Enter+0x80>
		 }
		 else
		 {
		 	 ILI9341_Draw_Text( "OFF", 150, 60, WHITE, 2, BLACK);
 80034aa:	2300      	movs	r3, #0
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	2302      	movs	r3, #2
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034b6:	223c      	movs	r2, #60	; 0x3c
 80034b8:	2196      	movs	r1, #150	; 0x96
 80034ba:	4824      	ldr	r0, [pc, #144]	; (800354c <Level1Item3_Enter+0x10c>)
 80034bc:	f7fe ffb4 	bl	8002428 <ILI9341_Draw_Text>
		 }
	 }


	 if(getPressKey() != BUTTON_NOTHING && !flagPressed)
 80034c0:	f000 f84a 	bl	8003558 <getPressKey>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2bff      	cmp	r3, #255	; 0xff
 80034c8:	d016      	beq.n	80034f8 <Level1Item3_Enter+0xb8>
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	f083 0301 	eor.w	r3, r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d010      	beq.n	80034f8 <Level1Item3_Enter+0xb8>
	 {
		 flagPressed = true;
 80034d6:	2301      	movs	r3, #1
 80034d8:	71fb      	strb	r3, [r7, #7]

		 switch(getPressKey())  // If press any key
 80034da:	f000 f83d 	bl	8003558 <getPressKey>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d002      	beq.n	80034ea <Level1Item3_Enter+0xaa>
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d003      	beq.n	80034f0 <Level1Item3_Enter+0xb0>
	  	  		  break;
	  	  	  case BUTTON_DOWN:
	  	  		  RED_LED_OFF();
	  	  		  break;
	  	  	  default:
	  	  		  break;
 80034e8:	e005      	b.n	80034f6 <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_ON();
 80034ea:	f7ff ff91 	bl	8003410 <RED_LED_ON>
	  	  		  break;
 80034ee:	e002      	b.n	80034f6 <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_OFF();
 80034f0:	f7ff ff9a 	bl	8003428 <RED_LED_OFF>
	  	  		  break;
 80034f4:	bf00      	nop
		 switch(getPressKey())  // If press any key
 80034f6:	e009      	b.n	800350c <Level1Item3_Enter+0xcc>
		 }
	 }
	 else if(getPressKey() == BUTTON_NOTHING && flagPressed)
 80034f8:	f000 f82e 	bl	8003558 <getPressKey>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2bff      	cmp	r3, #255	; 0xff
 8003500:	d104      	bne.n	800350c <Level1Item3_Enter+0xcc>
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <Level1Item3_Enter+0xcc>
	 {
		 flagPressed = false; 	// if button was release
 8003508:	2300      	movs	r3, #0
 800350a:	71fb      	strb	r3, [r7, #7]
 while(getPressKey() != BUTTON_LEFT)
 800350c:	f000 f824 	bl	8003558 <getPressKey>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1b0      	bne.n	8003478 <Level1Item3_Enter+0x38>
	 }
 }

 ILI9341_Draw_Text( "                           ", 10, 60, WHITE, 2, BLACK); // Cleaning one row LCD
 8003516:	2300      	movs	r3, #0
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	2302      	movs	r3, #2
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003522:	223c      	movs	r2, #60	; 0x3c
 8003524:	210a      	movs	r1, #10
 8003526:	480a      	ldr	r0, [pc, #40]	; (8003550 <Level1Item3_Enter+0x110>)
 8003528:	f7fe ff7e 	bl	8002428 <ILI9341_Draw_Text>
 Menu_Navigate(&Menu_3);  // Back to menu 3
 800352c:	4809      	ldr	r0, [pc, #36]	; (8003554 <Level1Item3_Enter+0x114>)
 800352e:	f000 f8db 	bl	80036e8 <Menu_Navigate>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	0800ef18 	.word	0x0800ef18
 8003540:	0800ef34 	.word	0x0800ef34
 8003544:	40020c00 	.word	0x40020c00
 8003548:	0800ef40 	.word	0x0800ef40
 800354c:	0800ef44 	.word	0x0800ef44
 8003550:	0800ef48 	.word	0x0800ef48
 8003554:	0800f2cc 	.word	0x0800f2cc

08003558 <getPressKey>:
// -----------------------------------------------------------------------
static uint8_t getPressKey()		// 3x4 keyboard
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af02      	add	r7, sp, #8
	char digit = '\0';
 800355e:	2300      	movs	r3, #0
 8003560:	75fb      	strb	r3, [r7, #23]
	char buff_lcd[20] = "KEY: ";
 8003562:	4a48      	ldr	r2, [pc, #288]	; (8003684 <getPressKey+0x12c>)
 8003564:	463b      	mov	r3, r7
 8003566:	e892 0003 	ldmia.w	r2, {r0, r1}
 800356a:	6018      	str	r0, [r3, #0]
 800356c:	3304      	adds	r3, #4
 800356e:	8019      	strh	r1, [r3, #0]
 8003570:	1dbb      	adds	r3, r7, #6
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]
 8003578:	609a      	str	r2, [r3, #8]
 800357a:	819a      	strh	r2, [r3, #12]
	digit = read_one_digit_from_keyboard();
 800357c:	f7fd fcc8 	bl	8000f10 <read_one_digit_from_keyboard>
 8003580:	4603      	mov	r3, r0
 8003582:	75fb      	strb	r3, [r7, #23]
	switch(digit)
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	3b32      	subs	r3, #50	; 0x32
 8003588:	2b06      	cmp	r3, #6
 800358a:	d875      	bhi.n	8003678 <getPressKey+0x120>
 800358c:	a201      	add	r2, pc, #4	; (adr r2, 8003594 <getPressKey+0x3c>)
 800358e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003592:	bf00      	nop
 8003594:	080035d9 	.word	0x080035d9
 8003598:	08003679 	.word	0x08003679
 800359c:	080035b1 	.word	0x080035b1
 80035a0:	08003651 	.word	0x08003651
 80035a4:	08003629 	.word	0x08003629
 80035a8:	08003679 	.word	0x08003679
 80035ac:	08003601 	.word	0x08003601
	{
		case '4':
		{
			strncat(buff_lcd, &digit, 1);
 80035b0:	f107 0117 	add.w	r1, r7, #23
 80035b4:	463b      	mov	r3, r7
 80035b6:	2201      	movs	r2, #1
 80035b8:	4618      	mov	r0, r3
 80035ba:	f00b fc69 	bl	800ee90 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80035be:	4638      	mov	r0, r7
 80035c0:	2300      	movs	r3, #0
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	2302      	movs	r3, #2
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035cc:	2200      	movs	r2, #0
 80035ce:	2100      	movs	r1, #0
 80035d0:	f7fe ff2a 	bl	8002428 <ILI9341_Draw_Text>
			return BUTTON_LEFT;
 80035d4:	2300      	movs	r3, #0
 80035d6:	e050      	b.n	800367a <getPressKey+0x122>
		}
		case '2':
		{
			strncat(buff_lcd, &digit, 1);
 80035d8:	f107 0117 	add.w	r1, r7, #23
 80035dc:	463b      	mov	r3, r7
 80035de:	2201      	movs	r2, #1
 80035e0:	4618      	mov	r0, r3
 80035e2:	f00b fc55 	bl	800ee90 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80035e6:	4638      	mov	r0, r7
 80035e8:	2300      	movs	r3, #0
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	2302      	movs	r3, #2
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035f4:	2200      	movs	r2, #0
 80035f6:	2100      	movs	r1, #0
 80035f8:	f7fe ff16 	bl	8002428 <ILI9341_Draw_Text>
			return BUTTON_UP;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e03c      	b.n	800367a <getPressKey+0x122>
		}
		case '8':
		{
			strncat(buff_lcd, &digit, 1);
 8003600:	f107 0117 	add.w	r1, r7, #23
 8003604:	463b      	mov	r3, r7
 8003606:	2201      	movs	r2, #1
 8003608:	4618      	mov	r0, r3
 800360a:	f00b fc41 	bl	800ee90 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 800360e:	4638      	mov	r0, r7
 8003610:	2300      	movs	r3, #0
 8003612:	9301      	str	r3, [sp, #4]
 8003614:	2302      	movs	r3, #2
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800361c:	2200      	movs	r2, #0
 800361e:	2100      	movs	r1, #0
 8003620:	f7fe ff02 	bl	8002428 <ILI9341_Draw_Text>
			return BUTTON_DOWN;
 8003624:	2302      	movs	r3, #2
 8003626:	e028      	b.n	800367a <getPressKey+0x122>
		}
		case '6':
		{
			strncat(buff_lcd, &digit, 1);
 8003628:	f107 0117 	add.w	r1, r7, #23
 800362c:	463b      	mov	r3, r7
 800362e:	2201      	movs	r2, #1
 8003630:	4618      	mov	r0, r3
 8003632:	f00b fc2d 	bl	800ee90 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8003636:	4638      	mov	r0, r7
 8003638:	2300      	movs	r3, #0
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	2302      	movs	r3, #2
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003644:	2200      	movs	r2, #0
 8003646:	2100      	movs	r1, #0
 8003648:	f7fe feee 	bl	8002428 <ILI9341_Draw_Text>
			return BUTTON_RIGHT;
 800364c:	2303      	movs	r3, #3
 800364e:	e014      	b.n	800367a <getPressKey+0x122>
		}
		case '5':
		{
			strncat(buff_lcd, &digit, 1);
 8003650:	f107 0117 	add.w	r1, r7, #23
 8003654:	463b      	mov	r3, r7
 8003656:	2201      	movs	r2, #1
 8003658:	4618      	mov	r0, r3
 800365a:	f00b fc19 	bl	800ee90 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 800365e:	4638      	mov	r0, r7
 8003660:	2300      	movs	r3, #0
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	2302      	movs	r3, #2
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800366c:	2200      	movs	r2, #0
 800366e:	2100      	movs	r1, #0
 8003670:	f7fe feda 	bl	8002428 <ILI9341_Draw_Text>
			return BUTTON_SELECT;
 8003674:	2304      	movs	r3, #4
 8003676:	e000      	b.n	800367a <getPressKey+0x122>
		}
		default:
			return BUTTON_NOTHING;
 8003678:	23ff      	movs	r3, #255	; 0xff
			break;


	}
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	0800ef64 	.word	0x0800ef64

08003688 <Generic_Write>:
// -----------------------------------------------------------------------
void Generic_Write(const char* Text)		// Print "Text" data on LCD
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af02      	add	r7, sp, #8
 800368e:	6078      	str	r0, [r7, #4]
	if (Text)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d015      	beq.n	80036c2 <Generic_Write+0x3a>
	{
		ILI9341_Draw_Text( "                                 ", 10, 100, WHITE, 1, BLACK);
 8003696:	2300      	movs	r3, #0
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	2301      	movs	r3, #1
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036a2:	2264      	movs	r2, #100	; 0x64
 80036a4:	210a      	movs	r1, #10
 80036a6:	4809      	ldr	r0, [pc, #36]	; (80036cc <Generic_Write+0x44>)
 80036a8:	f7fe febe 	bl	8002428 <ILI9341_Draw_Text>
		ILI9341_Draw_Text( Text, 10, 100, WHITE, 1, BLACK);
 80036ac:	2300      	movs	r3, #0
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	2301      	movs	r3, #1
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036b8:	2264      	movs	r2, #100	; 0x64
 80036ba:	210a      	movs	r1, #10
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fe feb3 	bl	8002428 <ILI9341_Draw_Text>
	}
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	0800ef78 	.word	0x0800ef78

080036d0 <Menu_GetCurrentMenu>:
// -----------------------------------------------------------------------
Menu_Item_t* Menu_GetCurrentMenu(void)		// Повертає поточни вибраний пункт меню
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
	return CurrentMenuItem;
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <Menu_GetCurrentMenu+0x14>)
 80036d6:	681b      	ldr	r3, [r3, #0]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	2000000c 	.word	0x2000000c

080036e8 <Menu_Navigate>:
// -----------------------------------------------------------------------
// Переходи по меню
// in: ПОказник на апсолютний пункт меню, для вибору
// MENU_PARENT, MENU_CHILD, MENU_NEXT або  MENU_PREVIOUS
void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))  // What it mean???
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a11      	ldr	r2, [pc, #68]	; (8003738 <Menu_Navigate+0x50>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d01a      	beq.n	800372e <Menu_Navigate+0x46>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d017      	beq.n	800372e <Menu_Navigate+0x46>
	{
		return;		// Exit
	}

	CurrentMenuItem = NewMenu;    // Передане маню стає вибране
 80036fe:	4a0f      	ldr	r2, [pc, #60]	; (800373c <Menu_Navigate+0x54>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6013      	str	r3, [r2, #0]

	if (MenuWriteFunc)    // If   MenuWriteFunc  != NULL  ???????
 8003704:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <Menu_Navigate+0x58>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d006      	beq.n	800371a <Menu_Navigate+0x32>
	{
		MenuWriteFunc(CurrentMenuItem->Text);			// Print Text string on LCD
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <Menu_Navigate+0x58>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a0a      	ldr	r2, [pc, #40]	; (800373c <Menu_Navigate+0x54>)
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	3218      	adds	r2, #24
 8003716:	4610      	mov	r0, r2
 8003718:	4798      	blx	r3
	}

	//   void (*SelectCallback)(void) - Creating pointer on function
	// Write  CurrentMenuItem->SelectCallback in  void (*SelectCallback)(void) pinter
	void (*SelectCallback)(void) = CurrentMenuItem->SelectCallback;
 800371a:	4b08      	ldr	r3, [pc, #32]	; (800373c <Menu_Navigate+0x54>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	60fb      	str	r3, [r7, #12]

	if (SelectCallback)		// If SelectCallback != NULL
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <Menu_Navigate+0x48>
	{
		SelectCallback();   // It does - CurrentMenuItem->SelectCallback;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4798      	blx	r3
 800372c:	e000      	b.n	8003730 <Menu_Navigate+0x48>
		return;		// Exit
 800372e:	bf00      	nop
	}
}
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	0800f25c 	.word	0x0800f25c
 800373c:	2000000c 	.word	0x2000000c
 8003740:	200001fc 	.word	0x200001fc

08003744 <Menu_SetGenericWriteCallback>:
 пунктів меню. В рамках цієї функції зворотного виклику користувач повинен
 реалізувати код для відображення поточного тексту меню, що зберігається
 в  ref MENU_ITEM_STORAGE пам'яті.. */
// In: вказівник на функцію зворотного виклику для виконання кожного вибраного пункту меню.
void Menu_SetGenericWriteCallback(void (*WriteFunc)(const char* Text))    //  What doing this function??????? <<<<<<<<<<<
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
	MenuWriteFunc = WriteFunc;  		// Запис показника функції WriteFunc в
 800374c:	4a05      	ldr	r2, [pc, #20]	; (8003764 <Menu_SetGenericWriteCallback+0x20>)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6013      	str	r3, [r2, #0]
	//  показник на функцію під назвою MenuWriteFunc
	Menu_Navigate(CurrentMenuItem);      // Передача цього показника в функцію Menu_Navigate
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <Menu_SetGenericWriteCallback+0x24>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff ffc6 	bl	80036e8 <Menu_Navigate>
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	200001fc 	.word	0x200001fc
 8003768:	2000000c 	.word	0x2000000c

0800376c <Menu_EnterCurrentItem>:
// -----------------------------------------------------------------------
/* Функція входить у вибраний на даний момент пункт меню, виконуючи налаштовану
   функцію зворотного дзвінка (якщо така є) */
void Menu_EnterCurrentItem(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
	if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <Menu_EnterCurrentItem+0x34>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <Menu_EnterCurrentItem+0x38>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00d      	beq.n	8003798 <Menu_EnterCurrentItem+0x2c>
 800377c:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <Menu_EnterCurrentItem+0x34>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <Menu_EnterCurrentItem+0x2c>
	{
		return;
	}

	void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <Menu_EnterCurrentItem+0x34>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	607b      	str	r3, [r7, #4]
	if (EnterCallback)		// If EnterCallback != NULL
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <Menu_EnterCurrentItem+0x2e>
	{
		EnterCallback();
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4798      	blx	r3
 8003796:	e000      	b.n	800379a <Menu_EnterCurrentItem+0x2e>
		return;
 8003798:	bf00      	nop
	}

}// -----------------------------------------------------------------------
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	2000000c 	.word	0x2000000c
 80037a4:	0800f25c 	.word	0x0800f25c

080037a8 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	int i =0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 80037b4:	e036      	b.n	8003824 <speed_test_LCD+0x7c>
	{
		i ++;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	3301      	adds	r3, #1
 80037ba:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80037d0:	4819      	ldr	r0, [pc, #100]	; (8003838 <speed_test_LCD+0x90>)
 80037d2:	f006 fd1c 	bl	800a20e <HAL_RNG_GetRandomNumber>
 80037d6:	6138      	str	r0, [r7, #16]
		xr = random_num;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80037dc:	4816      	ldr	r0, [pc, #88]	; (8003838 <speed_test_LCD+0x90>)
 80037de:	f006 fd16 	bl	800a20e <HAL_RNG_GetRandomNumber>
 80037e2:	6138      	str	r0, [r7, #16]
		yr = random_num;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80037e8:	4813      	ldr	r0, [pc, #76]	; (8003838 <speed_test_LCD+0x90>)
 80037ea:	f006 fd10 	bl	800a20e <HAL_RNG_GetRandomNumber>
 80037ee:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80037f4:	4810      	ldr	r0, [pc, #64]	; (8003838 <speed_test_LCD+0x90>)
 80037f6:	f006 fd0a 	bl	800a20e <HAL_RNG_GetRandomNumber>
 80037fa:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8003800:	89fb      	ldrh	r3, [r7, #14]
 8003802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003806:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8003808:	89bb      	ldrh	r3, [r7, #12]
 800380a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380e:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8003810:	897b      	ldrh	r3, [r7, #10]
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8003818:	893b      	ldrh	r3, [r7, #8]
 800381a:	897a      	ldrh	r2, [r7, #10]
 800381c:	89b9      	ldrh	r1, [r7, #12]
 800381e:	89f8      	ldrh	r0, [r7, #14]
 8003820:	f7fe fce4 	bl	80021ec <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	ddc4      	ble.n	80037b6 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	200003c4 	.word	0x200003c4

0800383c <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8003844:	2305      	movs	r3, #5
 8003846:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f001 f9f1 	bl	8004c34 <null_ptr_check>
 8003852:	4603      	mov	r3, r0
 8003854:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8003856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d133      	bne.n	80038c6 <bme280_init+0x8a>
		while (try_count) {
 800385e:	e028      	b.n	80038b2 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003860:	f107 010d 	add.w	r1, r7, #13
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	20d0      	movs	r0, #208	; 0xd0
 800386a:	f000 f832 	bl	80038d2 <bme280_get_regs>
 800386e:	4603      	mov	r3, r0
 8003870:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8003872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d114      	bne.n	80038a4 <bme280_init+0x68>
 800387a:	7b7b      	ldrb	r3, [r7, #13]
 800387c:	2b60      	cmp	r3, #96	; 0x60
 800387e:	d111      	bne.n	80038a4 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8003880:	7b7a      	ldrb	r2, [r7, #13]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f976 	bl	8003b78 <bme280_soft_reset>
 800388c:	4603      	mov	r3, r0
 800388e:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8003890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d110      	bne.n	80038ba <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f001 f841 	bl	8004920 <get_calib_data>
 800389e:	4603      	mov	r3, r0
 80038a0:	73fb      	strb	r3, [r7, #15]
				}
				break;
 80038a2:	e00a      	b.n	80038ba <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2001      	movs	r0, #1
 80038aa:	4798      	blx	r3
			--try_count;
 80038ac:	7bbb      	ldrb	r3, [r7, #14]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 80038b2:	7bbb      	ldrb	r3, [r7, #14]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1d3      	bne.n	8003860 <bme280_init+0x24>
 80038b8:	e000      	b.n	80038bc <bme280_init+0x80>
				break;
 80038ba:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 80038bc:	7bbb      	ldrb	r3, [r7, #14]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 80038c2:	23fe      	movs	r3, #254	; 0xfe
 80038c4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80038c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 80038d2:	b590      	push	{r4, r7, lr}
 80038d4:	b087      	sub	sp, #28
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607b      	str	r3, [r7, #4]
 80038dc:	4603      	mov	r3, r0
 80038de:	73fb      	strb	r3, [r7, #15]
 80038e0:	4613      	mov	r3, r2
 80038e2:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f001 f9a5 	bl	8004c34 <null_ptr_check>
 80038ea:	4603      	mov	r3, r0
 80038ec:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80038ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d117      	bne.n	8003926 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	789b      	ldrb	r3, [r3, #2]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d003      	beq.n	8003906 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003904:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685c      	ldr	r4, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	7858      	ldrb	r0, [r3, #1]
 800390e:	89bb      	ldrh	r3, [r7, #12]
 8003910:	7bf9      	ldrb	r1, [r7, #15]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	47a0      	blx	r4
 8003916:	4603      	mov	r3, r0
 8003918:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 800391a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8003922:	23fc      	movs	r3, #252	; 0xfc
 8003924:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003926:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800392a:	4618      	mov	r0, r3
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	bd90      	pop	{r4, r7, pc}

08003932 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8003932:	b590      	push	{r4, r7, lr}
 8003934:	b08d      	sub	sp, #52	; 0x34
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	4613      	mov	r3, r2
 8003940:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	2b0a      	cmp	r3, #10
 8003946:	d901      	bls.n	800394c <bme280_set_regs+0x1a>
		len = 10;
 8003948:	230a      	movs	r3, #10
 800394a:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800394c:	6838      	ldr	r0, [r7, #0]
 800394e:	f001 f971 	bl	8004c34 <null_ptr_check>
 8003952:	4603      	mov	r3, r0
 8003954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8003958:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800395c:	2b00      	cmp	r3, #0
 800395e:	d154      	bne.n	8003a0a <bme280_set_regs+0xd8>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d051      	beq.n	8003a0a <bme280_set_regs+0xd8>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d04e      	beq.n	8003a0a <bme280_set_regs+0xd8>
		if (len != 0) {
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d047      	beq.n	8003a02 <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	789b      	ldrb	r3, [r3, #2]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d01a      	beq.n	80039b6 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003980:	2300      	movs	r3, #0
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003986:	e011      	b.n	80039ac <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8003988:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003996:	68f9      	ldr	r1, [r7, #12]
 8003998:	440b      	add	r3, r1
 800399a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80039a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039a6:	3301      	adds	r3, #1
 80039a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ac:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d3e8      	bcc.n	8003988 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d90b      	bls.n	80039d4 <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	f107 0114 	add.w	r1, r7, #20
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fff0 	bl	80049aa <interleave_reg_addr>
				temp_len = len * 2;
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80039d2:	e001      	b.n	80039d8 <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689c      	ldr	r4, [r3, #8]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	7858      	ldrb	r0, [r3, #1]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	7819      	ldrb	r1, [r3, #0]
 80039e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80039e6:	f107 0214 	add.w	r2, r7, #20
 80039ea:	47a0      	blx	r4
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 80039f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 80039fa:	23fc      	movs	r3, #252	; 0xfc
 80039fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8003a00:	e007      	b.n	8003a12 <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8003a02:	23fd      	movs	r3, #253	; 0xfd
 8003a04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8003a08:	e003      	b.n	8003a12 <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003a0a:	23ff      	movs	r3, #255	; 0xff
 8003a0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a10:	e000      	b.n	8003a14 <bme280_set_regs+0xe2>
		if (len != 0) {
 8003a12:	bf00      	nop
	}


	return rslt;
 8003a14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3734      	adds	r7, #52	; 0x34
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd90      	pop	{r4, r7, pc}

08003a20 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	6039      	str	r1, [r7, #0]
 8003a2a:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003a2c:	6838      	ldr	r0, [r7, #0]
 8003a2e:	f001 f901 	bl	8004c34 <null_ptr_check>
 8003a32:	4603      	mov	r3, r0
 8003a34:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8003a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d13f      	bne.n	8003abe <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8003a3e:	f107 030e 	add.w	r3, r7, #14
 8003a42:	6839      	ldr	r1, [r7, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 f874 	bl	8003b32 <bme280_get_sensor_mode>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8003a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d107      	bne.n	8003a66 <bme280_set_sensor_settings+0x46>
 8003a56:	7bbb      	ldrb	r3, [r7, #14]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8003a5c:	6838      	ldr	r0, [r7, #0]
 8003a5e:	f000 fb4e 	bl	80040fe <put_device_to_sleep>
 8003a62:	4603      	mov	r3, r0
 8003a64:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8003a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d127      	bne.n	8003abe <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	4619      	mov	r1, r3
 8003a72:	2007      	movs	r0, #7
 8003a74:	f001 f8c2 	bl	8004bfc <are_settings_changed>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 f98a 	bl	8003da2 <set_osr_settings>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8003a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d111      	bne.n	8003abe <bme280_set_sensor_settings+0x9e>
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	2018      	movs	r0, #24
 8003aa0:	f001 f8ac 	bl	8004bfc <are_settings_changed>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fa11 	bl	8003edc <set_filter_standby_settings>
 8003aba:	4603      	mov	r3, r0
 8003abc:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8003abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b084      	sub	sp, #16
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	6039      	str	r1, [r7, #0]
 8003ad4:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003ad6:	6838      	ldr	r0, [r7, #0]
 8003ad8:	f001 f8ac 	bl	8004c34 <null_ptr_check>
 8003adc:	4603      	mov	r3, r0
 8003ade:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8003ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d11e      	bne.n	8003b26 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8003ae8:	f107 030e 	add.w	r3, r7, #14
 8003aec:	6839      	ldr	r1, [r7, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 f81f 	bl	8003b32 <bme280_get_sensor_mode>
 8003af4:	4603      	mov	r3, r0
 8003af6:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8003af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d107      	bne.n	8003b10 <bme280_set_sensor_mode+0x46>
 8003b00:	7bbb      	ldrb	r3, [r7, #14]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d004      	beq.n	8003b10 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8003b06:	6838      	ldr	r0, [r7, #0]
 8003b08:	f000 faf9 	bl	80040fe <put_device_to_sleep>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8003b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	6839      	ldr	r1, [r7, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fabb 	bl	8004098 <write_power_mode>
 8003b22:	4603      	mov	r3, r0
 8003b24:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003b3c:	6838      	ldr	r0, [r7, #0]
 8003b3e:	f001 f879 	bl	8004c34 <null_ptr_check>
 8003b42:	4603      	mov	r3, r0
 8003b44:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8003b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10e      	bne.n	8003b6c <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2201      	movs	r2, #1
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	20f4      	movs	r0, #244	; 0xf4
 8003b56:	f7ff febc 	bl	80038d2 <bme280_get_regs>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8003b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8003b80:	23e0      	movs	r3, #224	; 0xe0
 8003b82:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8003b84:	23b6      	movs	r3, #182	; 0xb6
 8003b86:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f001 f853 	bl	8004c34 <null_ptr_check>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8003b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10d      	bne.n	8003bb6 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003b9a:	f107 010d 	add.w	r1, r7, #13
 8003b9e:	f107 000e 	add.w	r0, r7, #14
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f7ff fec4 	bl	8003932 <bme280_set_regs>
 8003baa:	4603      	mov	r3, r0
 8003bac:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2002      	movs	r0, #2
 8003bb4:	4798      	blx	r3
	}

	return rslt;
 8003bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b08a      	sub	sp, #40	; 0x28
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	4603      	mov	r3, r0
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8003bd8:	f107 0310 	add.w	r3, r7, #16
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f001 f825 	bl	8004c34 <null_ptr_check>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8003bf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d124      	bne.n	8003c42 <bme280_get_sensor_data+0x80>
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d021      	beq.n	8003c42 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8003bfe:	f107 011c 	add.w	r1, r7, #28
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2208      	movs	r2, #8
 8003c06:	20f7      	movs	r0, #247	; 0xf7
 8003c08:	f7ff fe63 	bl	80038d2 <bme280_get_regs>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8003c12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d116      	bne.n	8003c48 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8003c1a:	f107 0210 	add.w	r2, r7, #16
 8003c1e:	f107 031c 	add.w	r3, r7, #28
 8003c22:	4611      	mov	r1, r2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f815 	bl	8003c54 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3310      	adds	r3, #16
 8003c2e:	f107 0110 	add.w	r1, r7, #16
 8003c32:	7bf8      	ldrb	r0, [r7, #15]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	f000 f853 	bl	8003ce0 <bme280_compensate_data>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8003c40:	e002      	b.n	8003c48 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003c42:	23ff      	movs	r3, #255	; 0xff
 8003c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8003c48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3728      	adds	r7, #40	; 0x28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	031b      	lsls	r3, r3, #12
 8003c64:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3302      	adds	r3, #2
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	431a      	orrs	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3303      	adds	r3, #3
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	031b      	lsls	r3, r3, #12
 8003c92:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3305      	adds	r3, #5
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	091b      	lsrs	r3, r3, #4
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3306      	adds	r3, #6
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3307      	adds	r3, #7
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	609a      	str	r2, [r3, #8]
}
 8003cd4:	bf00      	nop
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	4603      	mov	r3, r0
 8003cee:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d04b      	beq.n	8003d92 <bme280_compensate_data+0xb2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d048      	beq.n	8003d92 <bme280_compensate_data+0xb2>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d045      	beq.n	8003d92 <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8003d3a:	6839      	ldr	r1, [r7, #0]
 8003d3c:	68b8      	ldr	r0, [r7, #8]
 8003d3e:	f000 fa2b 	bl	8004198 <compensate_temperature>
 8003d42:	eeb0 7a40 	vmov.f32	s14, s0
 8003d46:	eef0 7a60 	vmov.f32	s15, s1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8003d5a:	6839      	ldr	r1, [r7, #0]
 8003d5c:	68b8      	ldr	r0, [r7, #8]
 8003d5e:	f000 faef 	bl	8004340 <compensate_pressure>
 8003d62:	eeb0 7a40 	vmov.f32	s14, s0
 8003d66:	eef0 7a60 	vmov.f32	s15, s1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00d      	beq.n	8003d96 <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8003d7a:	6839      	ldr	r1, [r7, #0]
 8003d7c:	68b8      	ldr	r0, [r7, #8]
 8003d7e:	f000 fcaf 	bl	80046e0 <compensate_humidity>
 8003d82:	eeb0 7a40 	vmov.f32	s14, s0
 8003d86:	eef0 7a60 	vmov.f32	s15, s1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 8003d90:	e001      	b.n	8003d96 <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003d92:	23ff      	movs	r3, #255	; 0xff
 8003d94:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b086      	sub	sp, #24
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	4603      	mov	r3, r0
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
 8003dae:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8003db0:	2301      	movs	r3, #1
 8003db2:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d005      	beq.n	8003dca <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	68b8      	ldr	r0, [r7, #8]
 8003dc2:	f000 f815 	bl	8003df0 <set_osr_humidity_settings>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d007      	beq.n	8003de4 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f842 	bl	8003e64 <set_osr_press_temp_settings>
 8003de0:	4603      	mov	r3, r0
 8003de2:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8003de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8003dfa:	23f2      	movs	r3, #242	; 0xf2
 8003dfc:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	789b      	ldrb	r3, [r3, #2]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8003e0a:	f107 010e 	add.w	r1, r7, #14
 8003e0e:	f107 000c 	add.w	r0, r7, #12
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f7ff fd8c 	bl	8003932 <bme280_set_regs>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8003e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d118      	bne.n	8003e58 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8003e26:	23f4      	movs	r3, #244	; 0xf4
 8003e28:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8003e2a:	7b38      	ldrb	r0, [r7, #12]
 8003e2c:	f107 010d 	add.w	r1, r7, #13
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f7ff fd4d 	bl	80038d2 <bme280_get_regs>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8003e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d109      	bne.n	8003e58 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8003e44:	f107 010d 	add.w	r1, r7, #13
 8003e48:	f107 000c 	add.w	r0, r7, #12
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f7ff fd6f 	bl	8003932 <bme280_set_regs>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8003e72:	23f4      	movs	r3, #244	; 0xf4
 8003e74:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003e76:	7db8      	ldrb	r0, [r7, #22]
 8003e78:	f107 0115 	add.w	r1, r7, #21
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f7ff fd27 	bl	80038d2 <bme280_get_regs>
 8003e84:	4603      	mov	r3, r0
 8003e86:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8003e88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d11f      	bne.n	8003ed0 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 8003e9a:	f107 0315 	add.w	r3, r7, #21
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 f88e 	bl	8003fc2 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8003eb0:	f107 0315 	add.w	r3, r7, #21
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f8a0 	bl	8003ffc <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003ebc:	f107 0115 	add.w	r1, r7, #21
 8003ec0:	f107 0016 	add.w	r0, r7, #22
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f7ff fd33 	bl	8003932 <bme280_set_regs>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8003eea:	23f5      	movs	r3, #245	; 0xf5
 8003eec:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003eee:	7db8      	ldrb	r0, [r7, #22]
 8003ef0:	f107 0115 	add.w	r1, r7, #21
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f7ff fceb 	bl	80038d2 <bme280_get_regs>
 8003efc:	4603      	mov	r3, r0
 8003efe:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8003f00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d11f      	bne.n	8003f48 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d005      	beq.n	8003f1e <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8003f12:	f107 0315 	add.w	r3, r7, #21
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 f81b 	bl	8003f54 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8003f28:	f107 0315 	add.w	r3, r7, #21
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 f82d 	bl	8003f8e <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003f34:	f107 0115 	add.w	r1, r7, #21
 8003f38:	f107 0016 	add.w	r0, r7, #22
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f7ff fcf7 	bl	8003932 <bme280_set_regs>
 8003f44:	4603      	mov	r3, r0
 8003f46:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003f48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	b25b      	sxtb	r3, r3
 8003f64:	f023 031c 	bic.w	r3, r3, #28
 8003f68:	b25a      	sxtb	r2, r3
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	78db      	ldrb	r3, [r3, #3]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	b25b      	sxtb	r3, r3
 8003f72:	f003 031c 	and.w	r3, r3, #28
 8003f76:	b25b      	sxtb	r3, r3
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	b25b      	sxtb	r3, r3
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	701a      	strb	r2, [r3, #0]
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	b25b      	sxtb	r3, r3
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	b25a      	sxtb	r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	791b      	ldrb	r3, [r3, #4]
 8003fa8:	015b      	lsls	r3, r3, #5
 8003faa:	b25b      	sxtb	r3, r3
 8003fac:	4313      	orrs	r3, r2
 8003fae:	b25b      	sxtb	r3, r3
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	701a      	strb	r2, [r3, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	b25b      	sxtb	r3, r3
 8003fd2:	f023 031c 	bic.w	r3, r3, #28
 8003fd6:	b25a      	sxtb	r2, r3
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	b25b      	sxtb	r3, r3
 8003fe0:	f003 031c 	and.w	r3, r3, #28
 8003fe4:	b25b      	sxtb	r3, r3
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	b25b      	sxtb	r3, r3
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	701a      	strb	r2, [r3, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	b25b      	sxtb	r3, r3
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	b25a      	sxtb	r2, r3
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	785b      	ldrb	r3, [r3, #1]
 8004016:	015b      	lsls	r3, r3, #5
 8004018:	b25b      	sxtb	r3, r3
 800401a:	4313      	orrs	r3, r2
 800401c:	b25b      	sxtb	r3, r3
 800401e:	b2da      	uxtb	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	701a      	strb	r2, [r3, #0]
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	b2da      	uxtb	r2, r3
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3302      	adds	r3, #2
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	109b      	asrs	r3, r3, #2
 8004050:	b2db      	uxtb	r3, r3
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	b2da      	uxtb	r2, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3302      	adds	r3, #2
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	b2da      	uxtb	r2, r3
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3303      	adds	r3, #3
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	109b      	asrs	r3, r3, #2
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	b2da      	uxtb	r2, r3
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3303      	adds	r3, #3
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	b2da      	uxtb	r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	711a      	strb	r2, [r3, #4]
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	6039      	str	r1, [r7, #0]
 80040a2:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80040a4:	23f4      	movs	r3, #244	; 0xf4
 80040a6:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80040a8:	7bb8      	ldrb	r0, [r7, #14]
 80040aa:	f107 010d 	add.w	r1, r7, #13
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f7ff fc0e 	bl	80038d2 <bme280_get_regs>
 80040b6:	4603      	mov	r3, r0
 80040b8:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80040ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d117      	bne.n	80040f2 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80040c2:	7b7b      	ldrb	r3, [r7, #13]
 80040c4:	b25b      	sxtb	r3, r3
 80040c6:	f023 0303 	bic.w	r3, r3, #3
 80040ca:	b25a      	sxtb	r2, r3
 80040cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	b25b      	sxtb	r3, r3
 80040d6:	4313      	orrs	r3, r2
 80040d8:	b25b      	sxtb	r3, r3
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80040de:	f107 010d 	add.w	r1, r7, #13
 80040e2:	f107 000e 	add.w	r0, r7, #14
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f7ff fc22 	bl	8003932 <bme280_set_regs>
 80040ee:	4603      	mov	r3, r0
 80040f0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80040f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b086      	sub	sp, #24
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8004106:	f107 0110 	add.w	r1, r7, #16
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2204      	movs	r2, #4
 800410e:	20f2      	movs	r0, #242	; 0xf2
 8004110:	f7ff fbdf 	bl	80038d2 <bme280_get_regs>
 8004114:	4603      	mov	r3, r0
 8004116:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8004118:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d118      	bne.n	8004152 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8004120:	f107 0208 	add.w	r2, r7, #8
 8004124:	f107 0310 	add.w	r3, r7, #16
 8004128:	4611      	mov	r1, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff ff80 	bl	8004030 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff fd21 	bl	8003b78 <bme280_soft_reset>
 8004136:	4603      	mov	r3, r0
 8004138:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 800413a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d107      	bne.n	8004152 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8004142:	f107 0308 	add.w	r3, r7, #8
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4618      	mov	r0, r3
 800414a:	f000 f808 	bl	800415e <reload_device_settings>
 800414e:	4603      	mov	r3, r0
 8004150:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8004152:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	201f      	movs	r0, #31
 800416e:	f7ff fe18 	bl	8003da2 <set_osr_settings>
 8004172:	4603      	mov	r3, r0
 8004174:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 8004176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	201f      	movs	r0, #31
 8004184:	f7ff feaa 	bl	8003edc <set_filter_standby_settings>
 8004188:	4603      	mov	r3, r0
 800418a:	73fb      	strb	r3, [r7, #15]

	return rslt;
 800418c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8004198:	b5b0      	push	{r4, r5, r7, lr}
 800419a:	b08c      	sub	sp, #48	; 0x30
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	4b5f      	ldr	r3, [pc, #380]	; (8004324 <compensate_temperature+0x18c>)
 80041a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	4b5d      	ldr	r3, [pc, #372]	; (8004328 <compensate_temperature+0x190>)
 80041b2:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fc f946 	bl	800044c <__aeabi_ui2d>
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	4b59      	ldr	r3, [pc, #356]	; (800432c <compensate_temperature+0x194>)
 80041c6:	f7fc fae5 	bl	8000794 <__aeabi_ddiv>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4614      	mov	r4, r2
 80041d0:	461d      	mov	r5, r3
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fc f938 	bl	800044c <__aeabi_ui2d>
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	4b53      	ldr	r3, [pc, #332]	; (8004330 <compensate_temperature+0x198>)
 80041e2:	f7fc fad7 	bl	8000794 <__aeabi_ddiv>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4620      	mov	r0, r4
 80041ec:	4629      	mov	r1, r5
 80041ee:	f7fb ffef 	bl	80001d0 <__aeabi_dsub>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004200:	4618      	mov	r0, r3
 8004202:	f7fc f933 	bl	800046c <__aeabi_i2d>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800420e:	f7fc f997 	bl	8000540 <__aeabi_dmul>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fc f914 	bl	800044c <__aeabi_ui2d>
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800422c:	f7fc fab2 	bl	8000794 <__aeabi_ddiv>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4614      	mov	r4, r2
 8004236:	461d      	mov	r5, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f7fc f905 	bl	800044c <__aeabi_ui2d>
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	4b3b      	ldr	r3, [pc, #236]	; (8004334 <compensate_temperature+0x19c>)
 8004248:	f7fc faa4 	bl	8000794 <__aeabi_ddiv>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4620      	mov	r0, r4
 8004252:	4629      	mov	r1, r5
 8004254:	f7fb ffbc 	bl	80001d0 <__aeabi_dsub>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8004260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004264:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004268:	f7fc f96a 	bl	8000540 <__aeabi_dmul>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4614      	mov	r4, r2
 8004272:	461d      	mov	r5, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800427a:	4618      	mov	r0, r3
 800427c:	f7fc f8f6 	bl	800046c <__aeabi_i2d>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4620      	mov	r0, r4
 8004286:	4629      	mov	r1, r5
 8004288:	f7fc f95a 	bl	8000540 <__aeabi_dmul>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 8004294:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004298:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800429c:	f7fb ff9a 	bl	80001d4 <__adddf3>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4610      	mov	r0, r2
 80042a6:	4619      	mov	r1, r3
 80042a8:	f7fc fbe4 	bl	8000a74 <__aeabi_d2iz>
 80042ac:	4602      	mov	r2, r0
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 80042b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042ba:	f7fb ff8b 	bl	80001d4 <__adddf3>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4610      	mov	r0, r2
 80042c4:	4619      	mov	r1, r3
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	4b1b      	ldr	r3, [pc, #108]	; (8004338 <compensate_temperature+0x1a0>)
 80042cc:	f7fc fa62 	bl	8000794 <__aeabi_ddiv>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 80042d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042e0:	f7fc fba0 	bl	8000a24 <__aeabi_dcmplt>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d004      	beq.n	80042f4 <compensate_temperature+0x15c>
		temperature = temperature_min;
 80042ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80042f2:	e00c      	b.n	800430e <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 80042f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042fc:	f7fc fbb0 	bl	8000a60 <__aeabi_dcmpgt>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <compensate_temperature+0x176>
		temperature = temperature_max;
 8004306:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800430a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 800430e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004312:	ec43 2b17 	vmov	d7, r2, r3
}
 8004316:	eeb0 0a47 	vmov.f32	s0, s14
 800431a:	eef0 0a67 	vmov.f32	s1, s15
 800431e:	3730      	adds	r7, #48	; 0x30
 8004320:	46bd      	mov	sp, r7
 8004322:	bdb0      	pop	{r4, r5, r7, pc}
 8004324:	c0440000 	.word	0xc0440000
 8004328:	40554000 	.word	0x40554000
 800432c:	40d00000 	.word	0x40d00000
 8004330:	40900000 	.word	0x40900000
 8004334:	40c00000 	.word	0x40c00000
 8004338:	40b40000 	.word	0x40b40000
 800433c:	00000000 	.word	0x00000000

08004340 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8004340:	b5b0      	push	{r4, r5, r7, lr}
 8004342:	b08e      	sub	sp, #56	; 0x38
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 800434a:	a3d9      	add	r3, pc, #868	; (adr r3, 80046b0 <compensate_pressure+0x370>)
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 8004354:	a3d8      	add	r3, pc, #864	; (adr r3, 80046b8 <compensate_pressure+0x378>)
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	4618      	mov	r0, r3
 8004364:	f7fc f882 	bl	800046c <__aeabi_i2d>
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004370:	f7fc fa10 	bl	8000794 <__aeabi_ddiv>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4610      	mov	r0, r2
 800437a:	4619      	mov	r1, r3
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	4bc1      	ldr	r3, [pc, #772]	; (8004688 <compensate_pressure+0x348>)
 8004382:	f7fb ff25 	bl	80001d0 <__aeabi_dsub>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 800438e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004392:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004396:	f7fc f8d3 	bl	8000540 <__aeabi_dmul>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4614      	mov	r4, r2
 80043a0:	461d      	mov	r5, r3
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fc f85f 	bl	800046c <__aeabi_i2d>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4620      	mov	r0, r4
 80043b4:	4629      	mov	r1, r5
 80043b6:	f7fc f8c3 	bl	8000540 <__aeabi_dmul>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	4bb1      	ldr	r3, [pc, #708]	; (800468c <compensate_pressure+0x34c>)
 80043c8:	f7fc f9e4 	bl	8000794 <__aeabi_ddiv>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fc f846 	bl	800046c <__aeabi_i2d>
 80043e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043e4:	f7fc f8ac 	bl	8000540 <__aeabi_dmul>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	f7fb feee 	bl	80001d4 <__adddf3>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004400:	f7fb fee8 	bl	80001d4 <__adddf3>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	4b9f      	ldr	r3, [pc, #636]	; (8004690 <compensate_pressure+0x350>)
 8004412:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004416:	f7fc f9bd 	bl	8000794 <__aeabi_ddiv>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4614      	mov	r4, r2
 8004420:	461d      	mov	r5, r3
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc f81f 	bl	800046c <__aeabi_i2d>
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	4b98      	ldr	r3, [pc, #608]	; (8004694 <compensate_pressure+0x354>)
 8004434:	f7fc f884 	bl	8000540 <__aeabi_dmul>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4620      	mov	r0, r4
 800443e:	4629      	mov	r1, r5
 8004440:	f7fb fec8 	bl	80001d4 <__adddf3>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004452:	4618      	mov	r0, r3
 8004454:	f7fc f80a 	bl	800046c <__aeabi_i2d>
 8004458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800445c:	f7fc f870 	bl	8000540 <__aeabi_dmul>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4610      	mov	r0, r2
 8004466:	4619      	mov	r1, r3
 8004468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800446c:	f7fc f868 	bl	8000540 <__aeabi_dmul>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4610      	mov	r0, r2
 8004476:	4619      	mov	r1, r3
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	4b86      	ldr	r3, [pc, #536]	; (8004698 <compensate_pressure+0x358>)
 800447e:	f7fc f989 	bl	8000794 <__aeabi_ddiv>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004490:	4618      	mov	r0, r3
 8004492:	f7fb ffeb 	bl	800046c <__aeabi_i2d>
 8004496:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800449a:	f7fc f851 	bl	8000540 <__aeabi_dmul>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4610      	mov	r0, r2
 80044a4:	4619      	mov	r1, r3
 80044a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044aa:	f7fb fe93 	bl	80001d4 <__adddf3>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	4b77      	ldr	r3, [pc, #476]	; (8004698 <compensate_pressure+0x358>)
 80044bc:	f7fc f96a 	bl	8000794 <__aeabi_ddiv>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	4b6f      	ldr	r3, [pc, #444]	; (800468c <compensate_pressure+0x34c>)
 80044ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80044d2:	f7fc f95f 	bl	8000794 <__aeabi_ddiv>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4610      	mov	r0, r2
 80044dc:	4619      	mov	r1, r3
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	4b6e      	ldr	r3, [pc, #440]	; (800469c <compensate_pressure+0x35c>)
 80044e4:	f7fb fe76 	bl	80001d4 <__adddf3>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4614      	mov	r4, r2
 80044ee:	461d      	mov	r5, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	88db      	ldrh	r3, [r3, #6]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fb ffa9 	bl	800044c <__aeabi_ui2d>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4620      	mov	r0, r4
 8004500:	4629      	mov	r1, r5
 8004502:	f7fc f81d 	bl	8000540 <__aeabi_dmul>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800451a:	f7fc fa79 	bl	8000a10 <__aeabi_dcmpeq>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	f040 80cd 	bne.w	80046c0 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fb ff8e 	bl	800044c <__aeabi_ui2d>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	f04f 0000 	mov.w	r0, #0
 8004538:	4959      	ldr	r1, [pc, #356]	; (80046a0 <compensate_pressure+0x360>)
 800453a:	f7fb fe49 	bl	80001d0 <__aeabi_dsub>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	4b56      	ldr	r3, [pc, #344]	; (80046a4 <compensate_pressure+0x364>)
 800454c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004550:	f7fc f920 	bl	8000794 <__aeabi_ddiv>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800455c:	f7fb fe38 	bl	80001d0 <__aeabi_dsub>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4610      	mov	r0, r2
 8004566:	4619      	mov	r1, r3
 8004568:	a345      	add	r3, pc, #276	; (adr r3, 8004680 <compensate_pressure+0x340>)
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f7fb ffe7 	bl	8000540 <__aeabi_dmul>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4610      	mov	r0, r2
 8004578:	4619      	mov	r1, r3
 800457a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800457e:	f7fc f909 	bl	8000794 <__aeabi_ddiv>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004590:	4618      	mov	r0, r3
 8004592:	f7fb ff6b 	bl	800046c <__aeabi_i2d>
 8004596:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800459a:	f7fb ffd1 	bl	8000540 <__aeabi_dmul>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4610      	mov	r0, r2
 80045a4:	4619      	mov	r1, r3
 80045a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045aa:	f7fb ffc9 	bl	8000540 <__aeabi_dmul>
 80045ae:	4602      	mov	r2, r0
 80045b0:	460b      	mov	r3, r1
 80045b2:	4610      	mov	r0, r2
 80045b4:	4619      	mov	r1, r3
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	4b3b      	ldr	r3, [pc, #236]	; (80046a8 <compensate_pressure+0x368>)
 80045bc:	f7fc f8ea 	bl	8000794 <__aeabi_ddiv>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fb ff4c 	bl	800046c <__aeabi_i2d>
 80045d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045d8:	f7fb ffb2 	bl	8000540 <__aeabi_dmul>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4610      	mov	r0, r2
 80045e2:	4619      	mov	r1, r3
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	4b28      	ldr	r3, [pc, #160]	; (800468c <compensate_pressure+0x34c>)
 80045ea:	f7fc f8d3 	bl	8000794 <__aeabi_ddiv>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 80045f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80045fe:	f7fb fde9 	bl	80001d4 <__adddf3>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4614      	mov	r4, r2
 8004608:	461d      	mov	r5, r3
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004610:	4618      	mov	r0, r3
 8004612:	f7fb ff2b 	bl	800046c <__aeabi_i2d>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4620      	mov	r0, r4
 800461c:	4629      	mov	r1, r5
 800461e:	f7fb fdd9 	bl	80001d4 <__adddf3>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	4b1f      	ldr	r3, [pc, #124]	; (80046ac <compensate_pressure+0x36c>)
 8004630:	f7fc f8b0 	bl	8000794 <__aeabi_ddiv>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800463c:	f7fb fdca 	bl	80001d4 <__adddf3>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8004648:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800464c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004650:	f7fc f9e8 	bl	8000a24 <__aeabi_dcmplt>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d004      	beq.n	8004664 <compensate_pressure+0x324>
			pressure = pressure_min;
 800465a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800465e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004662:	e031      	b.n	80046c8 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 8004664:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004668:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800466c:	f7fc f9f8 	bl	8000a60 <__aeabi_dcmpgt>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d028      	beq.n	80046c8 <compensate_pressure+0x388>
			pressure = pressure_max;
 8004676:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800467a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800467e:	e023      	b.n	80046c8 <compensate_pressure+0x388>
 8004680:	00000000 	.word	0x00000000
 8004684:	40b86a00 	.word	0x40b86a00
 8004688:	40ef4000 	.word	0x40ef4000
 800468c:	40e00000 	.word	0x40e00000
 8004690:	40100000 	.word	0x40100000
 8004694:	40f00000 	.word	0x40f00000
 8004698:	41200000 	.word	0x41200000
 800469c:	3ff00000 	.word	0x3ff00000
 80046a0:	41300000 	.word	0x41300000
 80046a4:	40b00000 	.word	0x40b00000
 80046a8:	41e00000 	.word	0x41e00000
 80046ac:	40300000 	.word	0x40300000
 80046b0:	00000000 	.word	0x00000000
 80046b4:	40dd4c00 	.word	0x40dd4c00
 80046b8:	00000000 	.word	0x00000000
 80046bc:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 80046c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 80046c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80046cc:	ec43 2b17 	vmov	d7, r2, r3
}
 80046d0:	eeb0 0a47 	vmov.f32	s0, s14
 80046d4:	eef0 0a67 	vmov.f32	s1, s15
 80046d8:	3738      	adds	r7, #56	; 0x38
 80046da:	46bd      	mov	sp, r7
 80046dc:	bdb0      	pop	{r4, r5, r7, pc}
 80046de:	bf00      	nop

080046e0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80046e0:	b5b0      	push	{r4, r5, r7, lr}
 80046e2:	b094      	sub	sp, #80	; 0x50
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	4b81      	ldr	r3, [pc, #516]	; (8004900 <compensate_humidity+0x220>)
 80046fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	4618      	mov	r0, r3
 8004706:	f7fb feb1 	bl	800046c <__aeabi_i2d>
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	4b7d      	ldr	r3, [pc, #500]	; (8004904 <compensate_humidity+0x224>)
 8004710:	f7fb fd5e 	bl	80001d0 <__aeabi_dsub>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004722:	4618      	mov	r0, r3
 8004724:	f7fb fea2 	bl	800046c <__aeabi_i2d>
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	4b76      	ldr	r3, [pc, #472]	; (8004908 <compensate_humidity+0x228>)
 800472e:	f7fb ff07 	bl	8000540 <__aeabi_dmul>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4614      	mov	r4, r2
 8004738:	461d      	mov	r5, r3
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004740:	4618      	mov	r0, r3
 8004742:	f7fb fe93 	bl	800046c <__aeabi_i2d>
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	4b70      	ldr	r3, [pc, #448]	; (800490c <compensate_humidity+0x22c>)
 800474c:	f7fc f822 	bl	8000794 <__aeabi_ddiv>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4610      	mov	r0, r2
 8004756:	4619      	mov	r1, r3
 8004758:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800475c:	f7fb fef0 	bl	8000540 <__aeabi_dmul>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4620      	mov	r0, r4
 8004766:	4629      	mov	r1, r5
 8004768:	f7fb fd34 	bl	80001d4 <__adddf3>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4618      	mov	r0, r3
 800477a:	f7fb fe67 	bl	800044c <__aeabi_ui2d>
 800477e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004782:	f7fb fd25 	bl	80001d0 <__aeabi_dsub>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004794:	4618      	mov	r0, r3
 8004796:	f7fb fe69 	bl	800046c <__aeabi_i2d>
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	4b5c      	ldr	r3, [pc, #368]	; (8004910 <compensate_humidity+0x230>)
 80047a0:	f7fb fff8 	bl	8000794 <__aeabi_ddiv>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	7f1b      	ldrb	r3, [r3, #28]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fb fe4b 	bl	800044c <__aeabi_ui2d>
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	4b56      	ldr	r3, [pc, #344]	; (8004914 <compensate_humidity+0x234>)
 80047bc:	f7fb ffea 	bl	8000794 <__aeabi_ddiv>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4610      	mov	r0, r2
 80047c6:	4619      	mov	r1, r3
 80047c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047cc:	f7fb feb8 	bl	8000540 <__aeabi_dmul>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	4b4e      	ldr	r3, [pc, #312]	; (8004918 <compensate_humidity+0x238>)
 80047de:	f7fb fcf9 	bl	80001d4 <__adddf3>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fb fe3b 	bl	800046c <__aeabi_i2d>
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	4b46      	ldr	r3, [pc, #280]	; (8004914 <compensate_humidity+0x234>)
 80047fc:	f7fb ffca 	bl	8000794 <__aeabi_ddiv>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4610      	mov	r0, r2
 8004806:	4619      	mov	r1, r3
 8004808:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800480c:	f7fb fe98 	bl	8000540 <__aeabi_dmul>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4610      	mov	r0, r2
 8004816:	4619      	mov	r1, r3
 8004818:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800481c:	f7fb fe90 	bl	8000540 <__aeabi_dmul>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4610      	mov	r0, r2
 8004826:	4619      	mov	r1, r3
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	4b3a      	ldr	r3, [pc, #232]	; (8004918 <compensate_humidity+0x238>)
 800482e:	f7fb fcd1 	bl	80001d4 <__adddf3>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 800483a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800483e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004842:	f7fb fe7d 	bl	8000540 <__aeabi_dmul>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4614      	mov	r4, r2
 800484c:	461d      	mov	r5, r3
 800484e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004852:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004856:	f7fb fe73 	bl	8000540 <__aeabi_dmul>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4620      	mov	r0, r4
 8004860:	4629      	mov	r1, r5
 8004862:	f7fb fe6d 	bl	8000540 <__aeabi_dmul>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	7e1b      	ldrb	r3, [r3, #24]
 8004872:	4618      	mov	r0, r3
 8004874:	f7fb fdea 	bl	800044c <__aeabi_ui2d>
 8004878:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800487c:	f7fb fe60 	bl	8000540 <__aeabi_dmul>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4610      	mov	r0, r2
 8004886:	4619      	mov	r1, r3
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	4b23      	ldr	r3, [pc, #140]	; (800491c <compensate_humidity+0x23c>)
 800488e:	f7fb ff81 	bl	8000794 <__aeabi_ddiv>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	f04f 0000 	mov.w	r0, #0
 800489a:	491f      	ldr	r1, [pc, #124]	; (8004918 <compensate_humidity+0x238>)
 800489c:	f7fb fc98 	bl	80001d0 <__aeabi_dsub>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048a8:	f7fb fe4a 	bl	8000540 <__aeabi_dmul>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 80048b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048b8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80048bc:	f7fc f8d0 	bl	8000a60 <__aeabi_dcmpgt>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d004      	beq.n	80048d0 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 80048c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048ca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80048ce:	e00c      	b.n	80048ea <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 80048d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048d4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80048d8:	f7fc f8a4 	bl	8000a24 <__aeabi_dcmplt>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <compensate_humidity+0x20a>
		humidity = humidity_min;
 80048e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 80048ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048ee:	ec43 2b17 	vmov	d7, r2, r3
}
 80048f2:	eeb0 0a47 	vmov.f32	s0, s14
 80048f6:	eef0 0a67 	vmov.f32	s1, s15
 80048fa:	3750      	adds	r7, #80	; 0x50
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004900:	40590000 	.word	0x40590000
 8004904:	40f2c000 	.word	0x40f2c000
 8004908:	40500000 	.word	0x40500000
 800490c:	40d00000 	.word	0x40d00000
 8004910:	40f00000 	.word	0x40f00000
 8004914:	41900000 	.word	0x41900000
 8004918:	3ff00000 	.word	0x3ff00000
 800491c:	41200000 	.word	0x41200000

08004920 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08a      	sub	sp, #40	; 0x28
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8004928:	2388      	movs	r3, #136	; 0x88
 800492a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	f107 0310 	add.w	r3, r7, #16
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	605a      	str	r2, [r3, #4]
 800493c:	609a      	str	r2, [r3, #8]
 800493e:	60da      	str	r2, [r3, #12]
 8004940:	611a      	str	r2, [r3, #16]
 8004942:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8004944:	f107 010c 	add.w	r1, r7, #12
 8004948:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	221a      	movs	r2, #26
 8004950:	f7fe ffbf 	bl	80038d2 <bme280_get_regs>
 8004954:	4603      	mov	r3, r0
 8004956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 800495a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800495e:	2b00      	cmp	r3, #0
 8004960:	d11d      	bne.n	800499e <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8004962:	f107 030c 	add.w	r3, r7, #12
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4618      	mov	r0, r3
 800496a:	f000 f84a 	bl	8004a02 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800496e:	23e1      	movs	r3, #225	; 0xe1
 8004970:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8004974:	f107 010c 	add.w	r1, r7, #12
 8004978:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2207      	movs	r2, #7
 8004980:	f7fe ffa7 	bl	80038d2 <bme280_get_regs>
 8004984:	4603      	mov	r3, r0
 8004986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 800498a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800498e:	2b00      	cmp	r3, #0
 8004990:	d105      	bne.n	800499e <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8004992:	f107 030c 	add.w	r3, r7, #12
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	f000 f8e1 	bl	8004b60 <parse_humidity_calib_data>
		}
	}

	return rslt;
 800499e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3728      	adds	r7, #40	; 0x28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b087      	sub	sp, #28
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80049b8:	2301      	movs	r3, #1
 80049ba:	75fb      	strb	r3, [r7, #23]
 80049bc:	e016      	b.n	80049ec <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80049be:	7dfb      	ldrb	r3, [r7, #23]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	441a      	add	r2, r3
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	3b01      	subs	r3, #1
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	440b      	add	r3, r1
 80049ce:	7812      	ldrb	r2, [r2, #0]
 80049d0:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	441a      	add	r2, r3
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	4619      	mov	r1, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	440b      	add	r3, r1
 80049e2:	7812      	ldrb	r2, [r2, #0]
 80049e4:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
 80049e8:	3301      	adds	r3, #1
 80049ea:	75fb      	strb	r3, [r7, #23]
 80049ec:	7dfa      	ldrb	r2, [r7, #23]
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d3e4      	bcc.n	80049be <interleave_reg_addr+0x14>
	}
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	3310      	adds	r3, #16
 8004a10:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3301      	adds	r3, #1
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	b21a      	sxth	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	b21b      	sxth	r3, r3
 8004a22:	4313      	orrs	r3, r2
 8004a24:	b21b      	sxth	r3, r3
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3303      	adds	r3, #3
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	b21a      	sxth	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3302      	adds	r3, #2
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	b21b      	sxth	r3, r3
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	b21a      	sxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3305      	adds	r3, #5
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	b21a      	sxth	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3304      	adds	r3, #4
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	b21b      	sxth	r3, r3
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	b21a      	sxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3307      	adds	r3, #7
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	b21a      	sxth	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3306      	adds	r3, #6
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	b21b      	sxth	r3, r3
 8004a72:	4313      	orrs	r3, r2
 8004a74:	b21b      	sxth	r3, r3
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3309      	adds	r3, #9
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	b21a      	sxth	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3308      	adds	r3, #8
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	b21b      	sxth	r3, r3
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	b21a      	sxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	330b      	adds	r3, #11
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	b21a      	sxth	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	330a      	adds	r3, #10
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	b21b      	sxth	r3, r3
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	b21a      	sxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	330d      	adds	r3, #13
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	b21a      	sxth	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	330c      	adds	r3, #12
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	b21b      	sxth	r3, r3
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	b21a      	sxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	330f      	adds	r3, #15
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	b21a      	sxth	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	330e      	adds	r3, #14
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	b21b      	sxth	r3, r3
 8004adc:	4313      	orrs	r3, r2
 8004ade:	b21a      	sxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3311      	adds	r3, #17
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	b21a      	sxth	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3310      	adds	r3, #16
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	b21b      	sxth	r3, r3
 8004af6:	4313      	orrs	r3, r2
 8004af8:	b21a      	sxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3313      	adds	r3, #19
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	b21a      	sxth	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3312      	adds	r3, #18
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	b21b      	sxth	r3, r3
 8004b10:	4313      	orrs	r3, r2
 8004b12:	b21a      	sxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3315      	adds	r3, #21
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	b21a      	sxth	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3314      	adds	r3, #20
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	b21b      	sxth	r3, r3
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	b21a      	sxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3317      	adds	r3, #23
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	b21a      	sxth	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3316      	adds	r3, #22
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	b21b      	sxth	r3, r3
 8004b44:	4313      	orrs	r3, r2
 8004b46:	b21a      	sxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	7e5a      	ldrb	r2, [r3, #25]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	761a      	strb	r2, [r3, #24]

}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	3310      	adds	r3, #16
 8004b6e:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3301      	adds	r3, #1
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	b21a      	sxth	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	b21b      	sxth	r3, r3
 8004b80:	4313      	orrs	r3, r2
 8004b82:	b21a      	sxth	r2, r3
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	789a      	ldrb	r2, [r3, #2]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3303      	adds	r3, #3
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	b25b      	sxtb	r3, r3
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b21b      	sxth	r3, r3
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8004bae:	8a7a      	ldrh	r2, [r7, #18]
 8004bb0:	8a3b      	ldrh	r3, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	b21a      	sxth	r2, r3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3305      	adds	r3, #5
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	b25b      	sxtb	r3, r3
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8004bd6:	89fa      	ldrh	r2, [r7, #14]
 8004bd8:	89bb      	ldrh	r3, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	b21a      	sxth	r2, r3
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3306      	adds	r3, #6
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	b25a      	sxtb	r2, r3
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	460a      	mov	r2, r1
 8004c06:	71fb      	strb	r3, [r7, #7]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8004c10:	79fa      	ldrb	r2, [r7, #7]
 8004c12:	79bb      	ldrb	r3, [r7, #6]
 8004c14:	4013      	ands	r3, r2
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	e001      	b.n	8004c26 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8004c22:	2300      	movs	r3, #0
 8004c24:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00b      	beq.n	8004c5a <null_ptr_check+0x26>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <null_ptr_check+0x26>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <null_ptr_check+0x26>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d102      	bne.n	8004c60 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8004c5a:	23ff      	movs	r3, #255	; 0xff
 8004c5c:	73fb      	strb	r3, [r7, #15]
 8004c5e:	e001      	b.n	8004c64 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8004c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <user_i2c_read>:

int8_t init_bme280(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	603a      	str	r2, [r7, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	71fb      	strb	r3, [r7, #7]
 8004c82:	460b      	mov	r3, r1
 8004c84:	71bb      	strb	r3, [r7, #6]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	b299      	uxth	r1, r3
 8004c92:	1dba      	adds	r2, r7, #6
 8004c94:	230a      	movs	r3, #10
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4811      	ldr	r0, [pc, #68]	; (8004ce0 <user_i2c_read+0x6c>)
 8004c9c:	f002 fd0e 	bl	80076bc <HAL_I2C_Master_Transmit>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <user_i2c_read+0x38>
 8004ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004caa:	e014      	b.n	8004cd6 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	b21b      	sxth	r3, r3
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	b21b      	sxth	r3, r3
 8004cb8:	b299      	uxth	r1, r3
 8004cba:	88bb      	ldrh	r3, [r7, #4]
 8004cbc:	220a      	movs	r2, #10
 8004cbe:	9200      	str	r2, [sp, #0]
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	4807      	ldr	r0, [pc, #28]	; (8004ce0 <user_i2c_read+0x6c>)
 8004cc4:	f002 fdf8 	bl	80078b8 <HAL_I2C_Master_Receive>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <user_i2c_read+0x60>
 8004cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cd2:	e000      	b.n	8004cd6 <user_i2c_read+0x62>

  return 0;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000234 	.word	0x20000234

08004ce4 <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fb1f 	bl	8005330 <HAL_Delay>
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	603a      	str	r2, [r7, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	4603      	mov	r3, r0
 8004d08:	71fb      	strb	r3, [r7, #7]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	71bb      	strb	r3, [r7, #6]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8004d12:	88bb      	ldrh	r3, [r7, #4]
 8004d14:	3301      	adds	r3, #1
 8004d16:	4618      	mov	r0, r3
 8004d18:	f009 ffda 	bl	800ecd0 <malloc>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8004d20:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	88ba      	ldrh	r2, [r7, #4]
 8004d2e:	6839      	ldr	r1, [r7, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f009 ffdd 	bl	800ecf0 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	b299      	uxth	r1, r3
 8004d3e:	88bb      	ldrh	r3, [r7, #4]
 8004d40:	3301      	adds	r3, #1
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d48:	9200      	str	r2, [sp, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4808      	ldr	r0, [pc, #32]	; (8004d70 <user_i2c_write+0x74>)
 8004d4e:	f002 fcb5 	bl	80076bc <HAL_I2C_Master_Transmit>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <user_i2c_write+0x62>
 8004d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d5c:	e003      	b.n	8004d66 <user_i2c_write+0x6a>

  free(buf);
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f009 ffbe 	bl	800ece0 <free>
  return 0;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000234 	.word	0x20000234

08004d74 <detect_all_sensors_and_init>:
}i2c_device;


//----------------------------------------------------------------------------------------
void detect_all_sensors_and_init(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
	detect_bme280();
 8004d78:	f000 f8a0 	bl	8004ebc <detect_bme280>
	if(i2c_device.BME280_ready_status == true)
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <detect_all_sensors_and_init+0x34>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <detect_all_sensors_and_init+0x14>
	{
		init_bme280();
 8004d84:	f000 f818 	bl	8004db8 <init_bme280>
	}
	detect_mpu6050();
 8004d88:	f000 f8ce 	bl	8004f28 <detect_mpu6050>
	detect_apds9960();
 8004d8c:	f000 f9aa 	bl	80050e4 <detect_apds9960>
	denect_hmc5883l();
 8004d90:	f000 f94c 	bl	800502c <denect_hmc5883l>
	detect_ms5611();
 8004d94:	f000 f978 	bl	8005088 <detect_ms5611>
	detect_oled_screen();
 8004d98:	f000 f9da 	bl	8005150 <detect_oled_screen>
	detect_ds3231();
 8004d9c:	f000 f9fe 	bl	800519c <detect_ds3231>

	measure();
 8004da0:	f000 f804 	bl	8004dac <measure>
}
 8004da4:	bf00      	nop
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	20000520 	.word	0x20000520

08004dac <measure>:
//----------------------------------------------------------------------------------------
void measure(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
	bme280_measure();
 8004db0:	f000 f84c 	bl	8004e4c <bme280_measure>

//	mpu6050();
//	hmc5883l();
//	ms5611();
//	apds9960();
}
 8004db4:	bf00      	nop
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <init_bme280>:
//----------------------------------------------------------------------------------------
int8_t init_bme280(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8004dbc:	4b1e      	ldr	r3, [pc, #120]	; (8004e38 <init_bme280+0x80>)
 8004dbe:	2276      	movs	r2, #118	; 0x76
 8004dc0:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <init_bme280+0x80>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8004dc8:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <init_bme280+0x80>)
 8004dca:	4a1c      	ldr	r2, [pc, #112]	; (8004e3c <init_bme280+0x84>)
 8004dcc:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8004dce:	4b1a      	ldr	r3, [pc, #104]	; (8004e38 <init_bme280+0x80>)
 8004dd0:	4a1b      	ldr	r2, [pc, #108]	; (8004e40 <init_bme280+0x88>)
 8004dd2:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 8004dd4:	4b18      	ldr	r3, [pc, #96]	; (8004e38 <init_bme280+0x80>)
 8004dd6:	4a1b      	ldr	r2, [pc, #108]	; (8004e44 <init_bme280+0x8c>)
 8004dd8:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 8004dda:	4817      	ldr	r0, [pc, #92]	; (8004e38 <init_bme280+0x80>)
 8004ddc:	f7fe fd2e 	bl	800383c <bme280_init>
 8004de0:	4603      	mov	r3, r0
 8004de2:	461a      	mov	r2, r3
 8004de4:	4b18      	ldr	r3, [pc, #96]	; (8004e48 <init_bme280+0x90>)
 8004de6:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8004de8:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <init_bme280+0x80>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8004df0:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <init_bme280+0x80>)
 8004df2:	2205      	movs	r2, #5
 8004df4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8004df8:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <init_bme280+0x80>)
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8004e00:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <init_bme280+0x80>)
 8004e02:	2204      	movs	r2, #4
 8004e04:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8004e08:	490b      	ldr	r1, [pc, #44]	; (8004e38 <init_bme280+0x80>)
 8004e0a:	200f      	movs	r0, #15
 8004e0c:	f7fe fe08 	bl	8003a20 <bme280_set_sensor_settings>
 8004e10:	4603      	mov	r3, r0
 8004e12:	461a      	mov	r2, r3
 8004e14:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <init_bme280+0x90>)
 8004e16:	701a      	strb	r2, [r3, #0]

	//	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8004e18:	4907      	ldr	r1, [pc, #28]	; (8004e38 <init_bme280+0x80>)
 8004e1a:	2003      	movs	r0, #3
 8004e1c:	f7fe fe55 	bl	8003aca <bme280_set_sensor_mode>
 8004e20:	4603      	mov	r3, r0
 8004e22:	461a      	mov	r2, r3
 8004e24:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <init_bme280+0x90>)
 8004e26:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 8004e28:	4b03      	ldr	r3, [pc, #12]	; (8004e38 <init_bme280+0x80>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	2028      	movs	r0, #40	; 0x28
 8004e2e:	4798      	blx	r3
}
 8004e30:	bf00      	nop
 8004e32:	4618      	mov	r0, r3
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	200004c0 	.word	0x200004c0
 8004e3c:	08004c75 	.word	0x08004c75
 8004e40:	08004cfd 	.word	0x08004cfd
 8004e44:	08004ce5 	.word	0x08004ce5
 8004e48:	20000500 	.word	0x20000500

08004e4c <bme280_measure>:
void bme280_measure(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8004e50:	4a16      	ldr	r2, [pc, #88]	; (8004eac <bme280_measure+0x60>)
 8004e52:	4917      	ldr	r1, [pc, #92]	; (8004eb0 <bme280_measure+0x64>)
 8004e54:	2007      	movs	r0, #7
 8004e56:	f7fe feb4 	bl	8003bc2 <bme280_get_sensor_data>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <bme280_measure+0x68>)
 8004e60:	701a      	strb	r2, [r3, #0]

	if(rslt == BME280_OK)
 8004e62:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <bme280_measure+0x68>)
 8004e64:	f993 3000 	ldrsb.w	r3, [r3]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d11d      	bne.n	8004ea8 <bme280_measure+0x5c>
	{
		// Save data in main structure
		i2c_device.BME280_temperature = comp_data.temperature;
 8004e6c:	4b10      	ldr	r3, [pc, #64]	; (8004eb0 <bme280_measure+0x64>)
 8004e6e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004e72:	4610      	mov	r0, r2
 8004e74:	4619      	mov	r1, r3
 8004e76:	f7fb fe25 	bl	8000ac4 <__aeabi_d2f>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	4a0e      	ldr	r2, [pc, #56]	; (8004eb8 <bme280_measure+0x6c>)
 8004e7e:	6093      	str	r3, [r2, #8]
		i2c_device.BME280_humidity = comp_data.humidity;
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <bme280_measure+0x64>)
 8004e82:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004e86:	4610      	mov	r0, r2
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f7fb fe1b 	bl	8000ac4 <__aeabi_d2f>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4a09      	ldr	r2, [pc, #36]	; (8004eb8 <bme280_measure+0x6c>)
 8004e92:	60d3      	str	r3, [r2, #12]
		i2c_device.BME280_preasure = comp_data.pressure;
 8004e94:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <bme280_measure+0x64>)
 8004e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	f7fb fe11 	bl	8000ac4 <__aeabi_d2f>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	4a04      	ldr	r2, [pc, #16]	; (8004eb8 <bme280_measure+0x6c>)
 8004ea6:	6113      	str	r3, [r2, #16]
		//temperature = comp_data.temperature / 100.0;      /* °C  */
		//humidity = comp_data.humidity / 1024.0;           /* %   */
		//pressure = comp_data.pressure / 10000.0;          /* hPa */
	}
}
 8004ea8:	bf00      	nop
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	200004c0 	.word	0x200004c0
 8004eb0:	20000508 	.word	0x20000508
 8004eb4:	20000500 	.word	0x20000500
 8004eb8:	20000520 	.word	0x20000520

08004ebc <detect_bme280>:


// Function for detect i2c devices ////////////////////////////////////////////////////////
//----------------------------------------------------------------------------------------
void detect_bme280(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af04      	add	r7, sp, #16
	uint16_t STATUS=0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x76;  		 	// BME280
 8004ec6:	2376      	movs	r3, #118	; 0x76
 8004ec8:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0xD0;
 8004eca:	23d0      	movs	r3, #208	; 0xd0
 8004ecc:	807b      	strh	r3, [r7, #2]
	uint8_t id = 96;							// in hex form
 8004ece:	2360      	movs	r3, #96	; 0x60
 8004ed0:	707b      	strb	r3, [r7, #1]
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8004ed6:	88bb      	ldrh	r3, [r7, #4]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	b299      	uxth	r1, r3
 8004edc:	887a      	ldrh	r2, [r7, #2]
 8004ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ee2:	9302      	str	r3, [sp, #8]
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	9301      	str	r3, [sp, #4]
 8004ee8:	463b      	mov	r3, r7
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	2301      	movs	r3, #1
 8004eee:	480c      	ldr	r0, [pc, #48]	; (8004f20 <detect_bme280+0x64>)
 8004ef0:	f003 f802 	bl	8007ef8 <HAL_I2C_Mem_Read>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	80fb      	strh	r3, [r7, #6]
	//HAL_OK == 0
	if((buff == id) && (STATUS == 0))
 8004ef8:	783b      	ldrb	r3, [r7, #0]
 8004efa:	787a      	ldrb	r2, [r7, #1]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d106      	bne.n	8004f0e <detect_bme280+0x52>
 8004f00:	88fb      	ldrh	r3, [r7, #6]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d103      	bne.n	8004f0e <detect_bme280+0x52>
	{
		i2c_device.BME280_ready_status = true;
 8004f06:	4b07      	ldr	r3, [pc, #28]	; (8004f24 <detect_bme280+0x68>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	e003      	b.n	8004f16 <detect_bme280+0x5a>
	}
	else
	{
		i2c_device.BME280_ready_status = false;
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <detect_bme280+0x68>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
	}
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000234 	.word	0x20000234
 8004f24:	20000520 	.word	0x20000520

08004f28 <detect_mpu6050>:
//----------------------------------------------------------------------------------------
void detect_mpu6050(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	81fb      	strh	r3, [r7, #14]
	uint16_t addres_device = 0xD0;
 8004f32:	23d0      	movs	r3, #208	; 0xd0
 8004f34:	81bb      	strh	r3, [r7, #12]
	uint16_t id_addr = 0x75;
 8004f36:	2375      	movs	r3, #117	; 0x75
 8004f38:	817b      	strh	r3, [r7, #10]
	uint8_t id = 104;							// in hex form
 8004f3a:	2368      	movs	r3, #104	; 0x68
 8004f3c:	727b      	strb	r3, [r7, #9]
	uint8_t buff = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	723b      	strb	r3, [r7, #8]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, id_addr, 1, &buff, 1, 1000);
 8004f42:	897a      	ldrh	r2, [r7, #10]
 8004f44:	89b9      	ldrh	r1, [r7, #12]
 8004f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f4a:	9302      	str	r3, [sp, #8]
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	9301      	str	r3, [sp, #4]
 8004f50:	f107 0308 	add.w	r3, r7, #8
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	2301      	movs	r3, #1
 8004f58:	4832      	ldr	r0, [pc, #200]	; (8005024 <detect_mpu6050+0xfc>)
 8004f5a:	f002 ffcd 	bl	8007ef8 <HAL_I2C_Mem_Read>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	81fb      	strh	r3, [r7, #14]

	if((buff == id) && (STATUS == 0))
 8004f62:	7a3b      	ldrb	r3, [r7, #8]
 8004f64:	7a7a      	ldrb	r2, [r7, #9]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d106      	bne.n	8004f78 <detect_mpu6050+0x50>
 8004f6a:	89fb      	ldrh	r3, [r7, #14]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d103      	bne.n	8004f78 <detect_mpu6050+0x50>
	{
		i2c_device.MPU6050_ready_status = true;
 8004f70:	4b2d      	ldr	r3, [pc, #180]	; (8005028 <detect_mpu6050+0x100>)
 8004f72:	2201      	movs	r2, #1
 8004f74:	705a      	strb	r2, [r3, #1]
 8004f76:	e002      	b.n	8004f7e <detect_mpu6050+0x56>
	}
	else
	{
		i2c_device.MPU6050_ready_status = false;
 8004f78:	4b2b      	ldr	r3, [pc, #172]	; (8005028 <detect_mpu6050+0x100>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	705a      	strb	r2, [r3, #1]
	}

	// turn on direct i2c communication with hmc5883l
	if(i2c_device.MPU6050_ready_status == true)
 8004f7e:	4b2a      	ldr	r3, [pc, #168]	; (8005028 <detect_mpu6050+0x100>)
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d04a      	beq.n	800501c <detect_mpu6050+0xf4>
	{
		uint8_t data = 0x00;
 8004f86:	2300      	movs	r3, #0
 8004f88:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x6A, 1, &data, 1, 1000);		// Disable i2c master mode
 8004f8a:	89b9      	ldrh	r1, [r7, #12]
 8004f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f90:	9302      	str	r3, [sp, #8]
 8004f92:	2301      	movs	r3, #1
 8004f94:	9301      	str	r3, [sp, #4]
 8004f96:	1dfb      	adds	r3, r7, #7
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	226a      	movs	r2, #106	; 0x6a
 8004f9e:	4821      	ldr	r0, [pc, #132]	; (8005024 <detect_mpu6050+0xfc>)
 8004fa0:	f002 feb0 	bl	8007d04 <HAL_I2C_Mem_Write>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	81fb      	strh	r3, [r7, #14]
		data = 0x02;
 8004fa8:	2302      	movs	r3, #2
 8004faa:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);		// Enable i2c master bypass mode
 8004fac:	89b9      	ldrh	r1, [r7, #12]
 8004fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fb2:	9302      	str	r3, [sp, #8]
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	9301      	str	r3, [sp, #4]
 8004fb8:	1dfb      	adds	r3, r7, #7
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	2237      	movs	r2, #55	; 0x37
 8004fc0:	4818      	ldr	r0, [pc, #96]	; (8005024 <detect_mpu6050+0xfc>)
 8004fc2:	f002 fe9f 	bl	8007d04 <HAL_I2C_Mem_Write>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	81fb      	strh	r3, [r7, #14]

		// Check waited registers
		buff = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x6A, 1, &buff, 1, 1000);
 8004fce:	89b9      	ldrh	r1, [r7, #12]
 8004fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fd4:	9302      	str	r3, [sp, #8]
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	f107 0308 	add.w	r3, r7, #8
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	226a      	movs	r2, #106	; 0x6a
 8004fe4:	480f      	ldr	r0, [pc, #60]	; (8005024 <detect_mpu6050+0xfc>)
 8004fe6:	f002 ff87 	bl	8007ef8 <HAL_I2C_Mem_Read>
 8004fea:	4603      	mov	r3, r0
 8004fec:	81fb      	strh	r3, [r7, #14]
		buff = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x37, 1, &buff, 1, 1000);
 8004ff2:	89b9      	ldrh	r1, [r7, #12]
 8004ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ff8:	9302      	str	r3, [sp, #8]
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	f107 0308 	add.w	r3, r7, #8
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	2301      	movs	r3, #1
 8005006:	2237      	movs	r2, #55	; 0x37
 8005008:	4806      	ldr	r0, [pc, #24]	; (8005024 <detect_mpu6050+0xfc>)
 800500a:	f002 ff75 	bl	8007ef8 <HAL_I2C_Mem_Read>
 800500e:	4603      	mov	r3, r0
 8005010:	81fb      	strh	r3, [r7, #14]

		if(STATUS == 0)
 8005012:	89fb      	ldrh	r3, [r7, #14]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <detect_mpu6050+0xf4>
		{
			denect_hmc5883l();     // Don't work  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8005018:	f000 f808 	bl	800502c <denect_hmc5883l>
		}
	}
}
 800501c:	bf00      	nop
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	200002e0 	.word	0x200002e0
 8005028:	20000520 	.word	0x20000520

0800502c <denect_hmc5883l>:
//----------------------------------------------------------------------------------------
void denect_hmc5883l(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8005032:	2300      	movs	r3, #0
 8005034:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x1E;       //0x1E                		 ///// 0x3C
 8005036:	231e      	movs	r3, #30
 8005038:	80bb      	strh	r3, [r7, #4]
	uint16_t addr = 0x0A;				// HMC5883L_REG_IDENT_A      ///// 0xA0
 800503a:	230a      	movs	r3, #10
 800503c:	807b      	strh	r3, [r7, #2]
	//uint8_t id = 0xa8;							// in hex form
	uint8_t buff = 0;
 800503e:	2300      	movs	r3, #0
 8005040:	707b      	strb	r3, [r7, #1]

	//STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1 , addr, 1, &buff, 1, 1000);
 8005042:	88bb      	ldrh	r3, [r7, #4]
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	b299      	uxth	r1, r3
 8005048:	887a      	ldrh	r2, [r7, #2]
 800504a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800504e:	9302      	str	r3, [sp, #8]
 8005050:	2301      	movs	r3, #1
 8005052:	9301      	str	r3, [sp, #4]
 8005054:	1c7b      	adds	r3, r7, #1
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	2301      	movs	r3, #1
 800505a:	4809      	ldr	r0, [pc, #36]	; (8005080 <denect_hmc5883l+0x54>)
 800505c:	f002 ff4c 	bl	8007ef8 <HAL_I2C_Mem_Read>
 8005060:	4603      	mov	r3, r0
 8005062:	80fb      	strh	r3, [r7, #6]
	if(STATUS == 0)
 8005064:	88fb      	ldrh	r3, [r7, #6]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d103      	bne.n	8005072 <denect_hmc5883l+0x46>
	{
		i2c_device.HMC5883L_ready_status = true;
 800506a:	4b06      	ldr	r3, [pc, #24]	; (8005084 <denect_hmc5883l+0x58>)
 800506c:	2201      	movs	r2, #1
 800506e:	709a      	strb	r2, [r3, #2]
//	HMC5883L_setDataRate(HMC5883L_DATARATE_15HZ);
//	HMC5883L_setSamples(HMC5883L_SAMPLES_1); HMC5883L_setOffset(0, 0);
//
//	Vector mag = HMC5883L_readRaw();

}
 8005070:	e002      	b.n	8005078 <denect_hmc5883l+0x4c>
		i2c_device.HMC5883L_ready_status = false;
 8005072:	4b04      	ldr	r3, [pc, #16]	; (8005084 <denect_hmc5883l+0x58>)
 8005074:	2200      	movs	r2, #0
 8005076:	709a      	strb	r2, [r3, #2]
}
 8005078:	bf00      	nop
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	200002e0 	.word	0x200002e0
 8005084:	20000520 	.word	0x20000520

08005088 <detect_ms5611>:
//----------------------------------------------------------------------------------------
void detect_ms5611(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 800508e:	2300      	movs	r3, #0
 8005090:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x77;
 8005092:	2377      	movs	r3, #119	; 0x77
 8005094:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00 ;
 8005096:	2300      	movs	r3, #0
 8005098:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 800509a:	2300      	movs	r3, #0
 800509c:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800509e:	88bb      	ldrh	r3, [r7, #4]
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	b299      	uxth	r1, r3
 80050a4:	887a      	ldrh	r2, [r7, #2]
 80050a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050aa:	9302      	str	r3, [sp, #8]
 80050ac:	2301      	movs	r3, #1
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	1c7b      	adds	r3, r7, #1
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	2301      	movs	r3, #1
 80050b6:	4809      	ldr	r0, [pc, #36]	; (80050dc <detect_ms5611+0x54>)
 80050b8:	f002 ff1e 	bl	8007ef8 <HAL_I2C_Mem_Read>
 80050bc:	4603      	mov	r3, r0
 80050be:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d103      	bne.n	80050ce <detect_ms5611+0x46>
	{
		i2c_device.MS5611_ready_status = true;
 80050c6:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <detect_ms5611+0x58>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	70da      	strb	r2, [r3, #3]
	}
	else
	{
		i2c_device.MS5611_ready_status = false;
	}
}
 80050cc:	e002      	b.n	80050d4 <detect_ms5611+0x4c>
		i2c_device.MS5611_ready_status = false;
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <detect_ms5611+0x58>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	70da      	strb	r2, [r3, #3]
}
 80050d4:	bf00      	nop
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	200002e0 	.word	0x200002e0
 80050e0:	20000520 	.word	0x20000520

080050e4 <detect_apds9960>:
//----------------------------------------------------------------------------------------
void detect_apds9960(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x39;
 80050ee:	2339      	movs	r3, #57	; 0x39
 80050f0:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x92;
 80050f2:	2392      	movs	r3, #146	; 0x92
 80050f4:	807b      	strh	r3, [r7, #2]
	uint8_t id = 0xa8;							// in hex form
 80050f6:	23a8      	movs	r3, #168	; 0xa8
 80050f8:	707b      	strb	r3, [r7, #1]
	uint8_t buff = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 80050fe:	88bb      	ldrh	r3, [r7, #4]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	b299      	uxth	r1, r3
 8005104:	887a      	ldrh	r2, [r7, #2]
 8005106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800510a:	9302      	str	r3, [sp, #8]
 800510c:	2301      	movs	r3, #1
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	463b      	mov	r3, r7
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	2301      	movs	r3, #1
 8005116:	480c      	ldr	r0, [pc, #48]	; (8005148 <detect_apds9960+0x64>)
 8005118:	f002 feee 	bl	8007ef8 <HAL_I2C_Mem_Read>
 800511c:	4603      	mov	r3, r0
 800511e:	80fb      	strh	r3, [r7, #6]

	if((buff == id) && (STATUS == 0))
 8005120:	783b      	ldrb	r3, [r7, #0]
 8005122:	787a      	ldrb	r2, [r7, #1]
 8005124:	429a      	cmp	r2, r3
 8005126:	d106      	bne.n	8005136 <detect_apds9960+0x52>
 8005128:	88fb      	ldrh	r3, [r7, #6]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d103      	bne.n	8005136 <detect_apds9960+0x52>
	{
		i2c_device.APDS9960_ready_status = true;
 800512e:	4b07      	ldr	r3, [pc, #28]	; (800514c <detect_apds9960+0x68>)
 8005130:	2201      	movs	r2, #1
 8005132:	711a      	strb	r2, [r3, #4]
 8005134:	e003      	b.n	800513e <detect_apds9960+0x5a>
	}
	else
	{
		i2c_device.APDS9960_ready_status = false;
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <detect_apds9960+0x68>)
 8005138:	2200      	movs	r2, #0
 800513a:	711a      	strb	r2, [r3, #4]
	}
}
 800513c:	bf00      	nop
 800513e:	bf00      	nop
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	200002e0 	.word	0x200002e0
 800514c:	20000520 	.word	0x20000520

08005150 <detect_oled_screen>:
//----------------------------------------------------------------------------------------
void detect_oled_screen(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af02      	add	r7, sp, #8
	uint16_t STATUS = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = 0x00;
 800515a:	2300      	movs	r3, #0
 800515c:	713b      	strb	r3, [r7, #4]
	buffer[1] = 0xAE;
 800515e:	23ae      	movs	r3, #174	; 0xae
 8005160:	717b      	strb	r3, [r7, #5]

	STATUS = HAL_I2C_Master_Transmit(&hi2c3, 0x78,buffer, 2, 1000);
 8005162:	1d3a      	adds	r2, r7, #4
 8005164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	2302      	movs	r3, #2
 800516c:	2178      	movs	r1, #120	; 0x78
 800516e:	4809      	ldr	r0, [pc, #36]	; (8005194 <detect_oled_screen+0x44>)
 8005170:	f002 faa4 	bl	80076bc <HAL_I2C_Master_Transmit>
 8005174:	4603      	mov	r3, r0
 8005176:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8005178:	88fb      	ldrh	r3, [r7, #6]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d103      	bne.n	8005186 <detect_oled_screen+0x36>
	{
		i2c_device.OLED_ready_status = true;
 800517e:	4b06      	ldr	r3, [pc, #24]	; (8005198 <detect_oled_screen+0x48>)
 8005180:	2201      	movs	r2, #1
 8005182:	715a      	strb	r2, [r3, #5]
	}
	else
	{
		i2c_device.OLED_ready_status = false;
	}
}
 8005184:	e002      	b.n	800518c <detect_oled_screen+0x3c>
		i2c_device.OLED_ready_status = false;
 8005186:	4b04      	ldr	r3, [pc, #16]	; (8005198 <detect_oled_screen+0x48>)
 8005188:	2200      	movs	r2, #0
 800518a:	715a      	strb	r2, [r3, #5]
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	20000234 	.word	0x20000234
 8005198:	20000520 	.word	0x20000520

0800519c <detect_ds3231>:
//----------------------------------------------------------------------------------------
void detect_ds3231(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x68;
 80051a6:	2368      	movs	r3, #104	; 0x68
 80051a8:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00;						// Read seconds
 80051aa:	2300      	movs	r3, #0
 80051ac:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 80051b2:	88bb      	ldrh	r3, [r7, #4]
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	b299      	uxth	r1, r3
 80051b8:	887a      	ldrh	r2, [r7, #2]
 80051ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051be:	9302      	str	r3, [sp, #8]
 80051c0:	2301      	movs	r3, #1
 80051c2:	9301      	str	r3, [sp, #4]
 80051c4:	1c7b      	adds	r3, r7, #1
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	2301      	movs	r3, #1
 80051ca:	4809      	ldr	r0, [pc, #36]	; (80051f0 <detect_ds3231+0x54>)
 80051cc:	f002 fe94 	bl	8007ef8 <HAL_I2C_Mem_Read>
 80051d0:	4603      	mov	r3, r0
 80051d2:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d103      	bne.n	80051e2 <detect_ds3231+0x46>
	{
		i2c_device.DS3231_ready_status = true;
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <detect_ds3231+0x58>)
 80051dc:	2201      	movs	r2, #1
 80051de:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		i2c_device.DS3231_ready_status = false;
	}
}
 80051e0:	e002      	b.n	80051e8 <detect_ds3231+0x4c>
		i2c_device.DS3231_ready_status = false;
 80051e2:	4b04      	ldr	r3, [pc, #16]	; (80051f4 <detect_ds3231+0x58>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	719a      	strb	r2, [r3, #6]
}
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20000234 	.word	0x20000234
 80051f4:	20000520 	.word	0x20000520

080051f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80051f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005230 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80051fc:	480d      	ldr	r0, [pc, #52]	; (8005234 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80051fe:	490e      	ldr	r1, [pc, #56]	; (8005238 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005200:	4a0e      	ldr	r2, [pc, #56]	; (800523c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005204:	e002      	b.n	800520c <LoopCopyDataInit>

08005206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800520a:	3304      	adds	r3, #4

0800520c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800520c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800520e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005210:	d3f9      	bcc.n	8005206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005212:	4a0b      	ldr	r2, [pc, #44]	; (8005240 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005214:	4c0b      	ldr	r4, [pc, #44]	; (8005244 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005218:	e001      	b.n	800521e <LoopFillZerobss>

0800521a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800521a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800521c:	3204      	adds	r2, #4

0800521e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800521e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005220:	d3fb      	bcc.n	800521a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005222:	f7fc ffd1 	bl	80021c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005226:	f009 fd2f 	bl	800ec88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800522a:	f7fc f81f 	bl	800126c <main>
  bx  lr    
 800522e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005230:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005238:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800523c:	0800f460 	.word	0x0800f460
  ldr r2, =_sbss
 8005240:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8005244:	20000c40 	.word	0x20000c40

08005248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005248:	e7fe      	b.n	8005248 <ADC_IRQHandler>
	...

0800524c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005250:	4b0e      	ldr	r3, [pc, #56]	; (800528c <HAL_Init+0x40>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a0d      	ldr	r2, [pc, #52]	; (800528c <HAL_Init+0x40>)
 8005256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800525a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <HAL_Init+0x40>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a0a      	ldr	r2, [pc, #40]	; (800528c <HAL_Init+0x40>)
 8005262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005268:	4b08      	ldr	r3, [pc, #32]	; (800528c <HAL_Init+0x40>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a07      	ldr	r2, [pc, #28]	; (800528c <HAL_Init+0x40>)
 800526e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005274:	2003      	movs	r0, #3
 8005276:	f000 f94f 	bl	8005518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800527a:	2000      	movs	r0, #0
 800527c:	f000 f808 	bl	8005290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005280:	f7fc fc5e 	bl	8001b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40023c00 	.word	0x40023c00

08005290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005298:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <HAL_InitTick+0x54>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <HAL_InitTick+0x58>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	4619      	mov	r1, r3
 80052a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80052aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 f967 	bl	8005582 <HAL_SYSTICK_Config>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e00e      	b.n	80052dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b0f      	cmp	r3, #15
 80052c2:	d80a      	bhi.n	80052da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052c4:	2200      	movs	r2, #0
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052cc:	f000 f92f 	bl	800552e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80052d0:	4a06      	ldr	r2, [pc, #24]	; (80052ec <HAL_InitTick+0x5c>)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	e000      	b.n	80052dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20000004 	.word	0x20000004
 80052e8:	20000150 	.word	0x20000150
 80052ec:	2000014c 	.word	0x2000014c

080052f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052f4:	4b06      	ldr	r3, [pc, #24]	; (8005310 <HAL_IncTick+0x20>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	4b06      	ldr	r3, [pc, #24]	; (8005314 <HAL_IncTick+0x24>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4413      	add	r3, r2
 8005300:	4a04      	ldr	r2, [pc, #16]	; (8005314 <HAL_IncTick+0x24>)
 8005302:	6013      	str	r3, [r2, #0]
}
 8005304:	bf00      	nop
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000150 	.word	0x20000150
 8005314:	20000550 	.word	0x20000550

08005318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  return uwTick;
 800531c:	4b03      	ldr	r3, [pc, #12]	; (800532c <HAL_GetTick+0x14>)
 800531e:	681b      	ldr	r3, [r3, #0]
}
 8005320:	4618      	mov	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20000550 	.word	0x20000550

08005330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005338:	f7ff ffee 	bl	8005318 <HAL_GetTick>
 800533c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005348:	d005      	beq.n	8005356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800534a:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <HAL_Delay+0x44>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005356:	bf00      	nop
 8005358:	f7ff ffde 	bl	8005318 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	429a      	cmp	r2, r3
 8005366:	d8f7      	bhi.n	8005358 <HAL_Delay+0x28>
  {
  }
}
 8005368:	bf00      	nop
 800536a:	bf00      	nop
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000150 	.word	0x20000150

08005378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005388:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <__NVIC_SetPriorityGrouping+0x44>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005394:	4013      	ands	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053aa:	4a04      	ldr	r2, [pc, #16]	; (80053bc <__NVIC_SetPriorityGrouping+0x44>)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	60d3      	str	r3, [r2, #12]
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	e000ed00 	.word	0xe000ed00

080053c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <__NVIC_GetPriorityGrouping+0x18>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	0a1b      	lsrs	r3, r3, #8
 80053ca:	f003 0307 	and.w	r3, r3, #7
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	e000ed00 	.word	0xe000ed00

080053dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	db0b      	blt.n	8005406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	f003 021f 	and.w	r2, r3, #31
 80053f4:	4907      	ldr	r1, [pc, #28]	; (8005414 <__NVIC_EnableIRQ+0x38>)
 80053f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	2001      	movs	r0, #1
 80053fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	e000e100 	.word	0xe000e100

08005418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	6039      	str	r1, [r7, #0]
 8005422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005428:	2b00      	cmp	r3, #0
 800542a:	db0a      	blt.n	8005442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	b2da      	uxtb	r2, r3
 8005430:	490c      	ldr	r1, [pc, #48]	; (8005464 <__NVIC_SetPriority+0x4c>)
 8005432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005436:	0112      	lsls	r2, r2, #4
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	440b      	add	r3, r1
 800543c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005440:	e00a      	b.n	8005458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	b2da      	uxtb	r2, r3
 8005446:	4908      	ldr	r1, [pc, #32]	; (8005468 <__NVIC_SetPriority+0x50>)
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	3b04      	subs	r3, #4
 8005450:	0112      	lsls	r2, r2, #4
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	440b      	add	r3, r1
 8005456:	761a      	strb	r2, [r3, #24]
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	e000e100 	.word	0xe000e100
 8005468:	e000ed00 	.word	0xe000ed00

0800546c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800546c:	b480      	push	{r7}
 800546e:	b089      	sub	sp, #36	; 0x24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f1c3 0307 	rsb	r3, r3, #7
 8005486:	2b04      	cmp	r3, #4
 8005488:	bf28      	it	cs
 800548a:	2304      	movcs	r3, #4
 800548c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	3304      	adds	r3, #4
 8005492:	2b06      	cmp	r3, #6
 8005494:	d902      	bls.n	800549c <NVIC_EncodePriority+0x30>
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	3b03      	subs	r3, #3
 800549a:	e000      	b.n	800549e <NVIC_EncodePriority+0x32>
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	43da      	mvns	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	401a      	ands	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	fa01 f303 	lsl.w	r3, r1, r3
 80054be:	43d9      	mvns	r1, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c4:	4313      	orrs	r3, r2
         );
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3724      	adds	r7, #36	; 0x24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
	...

080054d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3b01      	subs	r3, #1
 80054e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054e4:	d301      	bcc.n	80054ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054e6:	2301      	movs	r3, #1
 80054e8:	e00f      	b.n	800550a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054ea:	4a0a      	ldr	r2, [pc, #40]	; (8005514 <SysTick_Config+0x40>)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054f2:	210f      	movs	r1, #15
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054f8:	f7ff ff8e 	bl	8005418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054fc:	4b05      	ldr	r3, [pc, #20]	; (8005514 <SysTick_Config+0x40>)
 80054fe:	2200      	movs	r2, #0
 8005500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005502:	4b04      	ldr	r3, [pc, #16]	; (8005514 <SysTick_Config+0x40>)
 8005504:	2207      	movs	r2, #7
 8005506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	e000e010 	.word	0xe000e010

08005518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff ff29 	bl	8005378 <__NVIC_SetPriorityGrouping>
}
 8005526:	bf00      	nop
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800552e:	b580      	push	{r7, lr}
 8005530:	b086      	sub	sp, #24
 8005532:	af00      	add	r7, sp, #0
 8005534:	4603      	mov	r3, r0
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	607a      	str	r2, [r7, #4]
 800553a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005540:	f7ff ff3e 	bl	80053c0 <__NVIC_GetPriorityGrouping>
 8005544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	6978      	ldr	r0, [r7, #20]
 800554c:	f7ff ff8e 	bl	800546c <NVIC_EncodePriority>
 8005550:	4602      	mov	r2, r0
 8005552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005556:	4611      	mov	r1, r2
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff ff5d 	bl	8005418 <__NVIC_SetPriority>
}
 800555e:	bf00      	nop
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	4603      	mov	r3, r0
 800556e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff ff31 	bl	80053dc <__NVIC_EnableIRQ>
}
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff ffa2 	bl	80054d4 <SysTick_Config>
 8005590:	4603      	mov	r3, r0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800559c:	b480      	push	{r7}
 800559e:	b089      	sub	sp, #36	; 0x24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055b2:	2300      	movs	r3, #0
 80055b4:	61fb      	str	r3, [r7, #28]
 80055b6:	e16b      	b.n	8005890 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055b8:	2201      	movs	r2, #1
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4013      	ands	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	f040 815a 	bne.w	800588a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d005      	beq.n	80055ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d130      	bne.n	8005650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	2203      	movs	r2, #3
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	43db      	mvns	r3, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4013      	ands	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	4313      	orrs	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005624:	2201      	movs	r2, #1
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	43db      	mvns	r3, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4013      	ands	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	091b      	lsrs	r3, r3, #4
 800563a:	f003 0201 	and.w	r2, r3, #1
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4313      	orrs	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	2b03      	cmp	r3, #3
 800565a:	d017      	beq.n	800568c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	2203      	movs	r2, #3
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	43db      	mvns	r3, r3
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4013      	ands	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	4313      	orrs	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d123      	bne.n	80056e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	08da      	lsrs	r2, r3, #3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3208      	adds	r2, #8
 80056a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	220f      	movs	r2, #15
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	43db      	mvns	r3, r3
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4013      	ands	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	08da      	lsrs	r2, r3, #3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3208      	adds	r2, #8
 80056da:	69b9      	ldr	r1, [r7, #24]
 80056dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	2203      	movs	r2, #3
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	4013      	ands	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f003 0203 	and.w	r2, r3, #3
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4313      	orrs	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 80b4 	beq.w	800588a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	4b60      	ldr	r3, [pc, #384]	; (80058a8 <HAL_GPIO_Init+0x30c>)
 8005728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572a:	4a5f      	ldr	r2, [pc, #380]	; (80058a8 <HAL_GPIO_Init+0x30c>)
 800572c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005730:	6453      	str	r3, [r2, #68]	; 0x44
 8005732:	4b5d      	ldr	r3, [pc, #372]	; (80058a8 <HAL_GPIO_Init+0x30c>)
 8005734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800573e:	4a5b      	ldr	r2, [pc, #364]	; (80058ac <HAL_GPIO_Init+0x310>)
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	089b      	lsrs	r3, r3, #2
 8005744:	3302      	adds	r3, #2
 8005746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800574a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	220f      	movs	r2, #15
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43db      	mvns	r3, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4013      	ands	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a52      	ldr	r2, [pc, #328]	; (80058b0 <HAL_GPIO_Init+0x314>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d02b      	beq.n	80057c2 <HAL_GPIO_Init+0x226>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a51      	ldr	r2, [pc, #324]	; (80058b4 <HAL_GPIO_Init+0x318>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d025      	beq.n	80057be <HAL_GPIO_Init+0x222>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a50      	ldr	r2, [pc, #320]	; (80058b8 <HAL_GPIO_Init+0x31c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d01f      	beq.n	80057ba <HAL_GPIO_Init+0x21e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a4f      	ldr	r2, [pc, #316]	; (80058bc <HAL_GPIO_Init+0x320>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d019      	beq.n	80057b6 <HAL_GPIO_Init+0x21a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a4e      	ldr	r2, [pc, #312]	; (80058c0 <HAL_GPIO_Init+0x324>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d013      	beq.n	80057b2 <HAL_GPIO_Init+0x216>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a4d      	ldr	r2, [pc, #308]	; (80058c4 <HAL_GPIO_Init+0x328>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d00d      	beq.n	80057ae <HAL_GPIO_Init+0x212>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a4c      	ldr	r2, [pc, #304]	; (80058c8 <HAL_GPIO_Init+0x32c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d007      	beq.n	80057aa <HAL_GPIO_Init+0x20e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a4b      	ldr	r2, [pc, #300]	; (80058cc <HAL_GPIO_Init+0x330>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d101      	bne.n	80057a6 <HAL_GPIO_Init+0x20a>
 80057a2:	2307      	movs	r3, #7
 80057a4:	e00e      	b.n	80057c4 <HAL_GPIO_Init+0x228>
 80057a6:	2308      	movs	r3, #8
 80057a8:	e00c      	b.n	80057c4 <HAL_GPIO_Init+0x228>
 80057aa:	2306      	movs	r3, #6
 80057ac:	e00a      	b.n	80057c4 <HAL_GPIO_Init+0x228>
 80057ae:	2305      	movs	r3, #5
 80057b0:	e008      	b.n	80057c4 <HAL_GPIO_Init+0x228>
 80057b2:	2304      	movs	r3, #4
 80057b4:	e006      	b.n	80057c4 <HAL_GPIO_Init+0x228>
 80057b6:	2303      	movs	r3, #3
 80057b8:	e004      	b.n	80057c4 <HAL_GPIO_Init+0x228>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e002      	b.n	80057c4 <HAL_GPIO_Init+0x228>
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <HAL_GPIO_Init+0x228>
 80057c2:	2300      	movs	r3, #0
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	f002 0203 	and.w	r2, r2, #3
 80057ca:	0092      	lsls	r2, r2, #2
 80057cc:	4093      	lsls	r3, r2
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057d4:	4935      	ldr	r1, [pc, #212]	; (80058ac <HAL_GPIO_Init+0x310>)
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	089b      	lsrs	r3, r3, #2
 80057da:	3302      	adds	r3, #2
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057e2:	4b3b      	ldr	r3, [pc, #236]	; (80058d0 <HAL_GPIO_Init+0x334>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	43db      	mvns	r3, r3
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	4013      	ands	r3, r2
 80057f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005806:	4a32      	ldr	r2, [pc, #200]	; (80058d0 <HAL_GPIO_Init+0x334>)
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800580c:	4b30      	ldr	r3, [pc, #192]	; (80058d0 <HAL_GPIO_Init+0x334>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	43db      	mvns	r3, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4013      	ands	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005830:	4a27      	ldr	r2, [pc, #156]	; (80058d0 <HAL_GPIO_Init+0x334>)
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005836:	4b26      	ldr	r3, [pc, #152]	; (80058d0 <HAL_GPIO_Init+0x334>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	43db      	mvns	r3, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	4013      	ands	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800585a:	4a1d      	ldr	r2, [pc, #116]	; (80058d0 <HAL_GPIO_Init+0x334>)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005860:	4b1b      	ldr	r3, [pc, #108]	; (80058d0 <HAL_GPIO_Init+0x334>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	43db      	mvns	r3, r3
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	4013      	ands	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005884:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <HAL_GPIO_Init+0x334>)
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	3301      	adds	r3, #1
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	2b0f      	cmp	r3, #15
 8005894:	f67f ae90 	bls.w	80055b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005898:	bf00      	nop
 800589a:	bf00      	nop
 800589c:	3724      	adds	r7, #36	; 0x24
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40023800 	.word	0x40023800
 80058ac:	40013800 	.word	0x40013800
 80058b0:	40020000 	.word	0x40020000
 80058b4:	40020400 	.word	0x40020400
 80058b8:	40020800 	.word	0x40020800
 80058bc:	40020c00 	.word	0x40020c00
 80058c0:	40021000 	.word	0x40021000
 80058c4:	40021400 	.word	0x40021400
 80058c8:	40021800 	.word	0x40021800
 80058cc:	40021c00 	.word	0x40021c00
 80058d0:	40013c00 	.word	0x40013c00

080058d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	887b      	ldrh	r3, [r7, #2]
 80058e6:	4013      	ands	r3, r2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058ec:	2301      	movs	r3, #1
 80058ee:	73fb      	strb	r3, [r7, #15]
 80058f0:	e001      	b.n	80058f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058f2:	2300      	movs	r3, #0
 80058f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	807b      	strh	r3, [r7, #2]
 8005910:	4613      	mov	r3, r2
 8005912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005914:	787b      	ldrb	r3, [r7, #1]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800591a:	887a      	ldrh	r2, [r7, #2]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005920:	e003      	b.n	800592a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005922:	887b      	ldrh	r3, [r7, #2]
 8005924:	041a      	lsls	r2, r3, #16
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	619a      	str	r2, [r3, #24]
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005936:	b480      	push	{r7}
 8005938:	b085      	sub	sp, #20
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	460b      	mov	r3, r1
 8005940:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005948:	887a      	ldrh	r2, [r7, #2]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4013      	ands	r3, r2
 800594e:	041a      	lsls	r2, r3, #16
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	43d9      	mvns	r1, r3
 8005954:	887b      	ldrh	r3, [r7, #2]
 8005956:	400b      	ands	r3, r1
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	619a      	str	r2, [r3, #24]
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800596a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800596c:	b08f      	sub	sp, #60	; 0x3c
 800596e:	af0a      	add	r7, sp, #40	; 0x28
 8005970:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e054      	b.n	8005a26 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f008 fec6 	bl	800e728 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2203      	movs	r2, #3
 80059a0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d102      	bne.n	80059b6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f006 f868 	bl	800ba90 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	603b      	str	r3, [r7, #0]
 80059c6:	687e      	ldr	r6, [r7, #4]
 80059c8:	466d      	mov	r5, sp
 80059ca:	f106 0410 	add.w	r4, r6, #16
 80059ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059da:	e885 0003 	stmia.w	r5, {r0, r1}
 80059de:	1d33      	adds	r3, r6, #4
 80059e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059e2:	6838      	ldr	r0, [r7, #0]
 80059e4:	f005 ffe2 	bl	800b9ac <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2101      	movs	r1, #1
 80059ee:	4618      	mov	r0, r3
 80059f0:	f006 f85f 	bl	800bab2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	603b      	str	r3, [r7, #0]
 80059fa:	687e      	ldr	r6, [r7, #4]
 80059fc:	466d      	mov	r5, sp
 80059fe:	f106 0410 	add.w	r4, r6, #16
 8005a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a12:	1d33      	adds	r3, r6, #4
 8005a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a16:	6838      	ldr	r0, [r7, #0]
 8005a18:	f006 f972 	bl	800bd00 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a2e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005a2e:	b590      	push	{r4, r7, lr}
 8005a30:	b089      	sub	sp, #36	; 0x24
 8005a32:	af04      	add	r7, sp, #16
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	4608      	mov	r0, r1
 8005a38:	4611      	mov	r1, r2
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	70fb      	strb	r3, [r7, #3]
 8005a40:	460b      	mov	r3, r1
 8005a42:	70bb      	strb	r3, [r7, #2]
 8005a44:	4613      	mov	r3, r2
 8005a46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d101      	bne.n	8005a56 <HAL_HCD_HC_Init+0x28>
 8005a52:	2302      	movs	r3, #2
 8005a54:	e076      	b.n	8005b44 <HAL_HCD_HC_Init+0x116>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	212c      	movs	r1, #44	; 0x2c
 8005a64:	fb01 f303 	mul.w	r3, r1, r3
 8005a68:	4413      	add	r3, r2
 8005a6a:	333d      	adds	r3, #61	; 0x3d
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	212c      	movs	r1, #44	; 0x2c
 8005a76:	fb01 f303 	mul.w	r3, r1, r3
 8005a7a:	4413      	add	r3, r2
 8005a7c:	3338      	adds	r3, #56	; 0x38
 8005a7e:	787a      	ldrb	r2, [r7, #1]
 8005a80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005a82:	78fb      	ldrb	r3, [r7, #3]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	212c      	movs	r1, #44	; 0x2c
 8005a88:	fb01 f303 	mul.w	r3, r1, r3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	3340      	adds	r3, #64	; 0x40
 8005a90:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005a92:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	212c      	movs	r1, #44	; 0x2c
 8005a9a:	fb01 f303 	mul.w	r3, r1, r3
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3339      	adds	r3, #57	; 0x39
 8005aa2:	78fa      	ldrb	r2, [r7, #3]
 8005aa4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005aa6:	78fb      	ldrb	r3, [r7, #3]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	212c      	movs	r1, #44	; 0x2c
 8005aac:	fb01 f303 	mul.w	r3, r1, r3
 8005ab0:	4413      	add	r3, r2
 8005ab2:	333f      	adds	r3, #63	; 0x3f
 8005ab4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005ab8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005aba:	78fb      	ldrb	r3, [r7, #3]
 8005abc:	78ba      	ldrb	r2, [r7, #2]
 8005abe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ac2:	b2d0      	uxtb	r0, r2
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	212c      	movs	r1, #44	; 0x2c
 8005ac8:	fb01 f303 	mul.w	r3, r1, r3
 8005acc:	4413      	add	r3, r2
 8005ace:	333a      	adds	r3, #58	; 0x3a
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005ad4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	da09      	bge.n	8005af0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	212c      	movs	r1, #44	; 0x2c
 8005ae2:	fb01 f303 	mul.w	r3, r1, r3
 8005ae6:	4413      	add	r3, r2
 8005ae8:	333b      	adds	r3, #59	; 0x3b
 8005aea:	2201      	movs	r2, #1
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	e008      	b.n	8005b02 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	212c      	movs	r1, #44	; 0x2c
 8005af6:	fb01 f303 	mul.w	r3, r1, r3
 8005afa:	4413      	add	r3, r2
 8005afc:	333b      	adds	r3, #59	; 0x3b
 8005afe:	2200      	movs	r2, #0
 8005b00:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005b02:	78fb      	ldrb	r3, [r7, #3]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	212c      	movs	r1, #44	; 0x2c
 8005b08:	fb01 f303 	mul.w	r3, r1, r3
 8005b0c:	4413      	add	r3, r2
 8005b0e:	333c      	adds	r3, #60	; 0x3c
 8005b10:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005b14:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	787c      	ldrb	r4, [r7, #1]
 8005b1c:	78ba      	ldrb	r2, [r7, #2]
 8005b1e:	78f9      	ldrb	r1, [r7, #3]
 8005b20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b22:	9302      	str	r3, [sp, #8]
 8005b24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	4623      	mov	r3, r4
 8005b32:	f006 fa67 	bl	800c004 <USB_HC_Init>
 8005b36:	4603      	mov	r3, r0
 8005b38:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd90      	pop	{r4, r7, pc}

08005b4c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_HCD_HC_Halt+0x1e>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e00f      	b.n	8005b8a <HAL_HCD_HC_Halt+0x3e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	78fa      	ldrb	r2, [r7, #3]
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f006 fca3 	bl	800c4c6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	70fb      	strb	r3, [r7, #3]
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	70bb      	strb	r3, [r7, #2]
 8005baa:	4613      	mov	r3, r2
 8005bac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	212c      	movs	r1, #44	; 0x2c
 8005bb4:	fb01 f303 	mul.w	r3, r1, r3
 8005bb8:	4413      	add	r3, r2
 8005bba:	333b      	adds	r3, #59	; 0x3b
 8005bbc:	78ba      	ldrb	r2, [r7, #2]
 8005bbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	212c      	movs	r1, #44	; 0x2c
 8005bc6:	fb01 f303 	mul.w	r3, r1, r3
 8005bca:	4413      	add	r3, r2
 8005bcc:	333f      	adds	r3, #63	; 0x3f
 8005bce:	787a      	ldrb	r2, [r7, #1]
 8005bd0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005bd2:	7c3b      	ldrb	r3, [r7, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d112      	bne.n	8005bfe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	212c      	movs	r1, #44	; 0x2c
 8005bde:	fb01 f303 	mul.w	r3, r1, r3
 8005be2:	4413      	add	r3, r2
 8005be4:	3342      	adds	r3, #66	; 0x42
 8005be6:	2203      	movs	r2, #3
 8005be8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005bea:	78fb      	ldrb	r3, [r7, #3]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	212c      	movs	r1, #44	; 0x2c
 8005bf0:	fb01 f303 	mul.w	r3, r1, r3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	333d      	adds	r3, #61	; 0x3d
 8005bf8:	7f3a      	ldrb	r2, [r7, #28]
 8005bfa:	701a      	strb	r2, [r3, #0]
 8005bfc:	e008      	b.n	8005c10 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	212c      	movs	r1, #44	; 0x2c
 8005c04:	fb01 f303 	mul.w	r3, r1, r3
 8005c08:	4413      	add	r3, r2
 8005c0a:	3342      	adds	r3, #66	; 0x42
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005c10:	787b      	ldrb	r3, [r7, #1]
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	f200 80c6 	bhi.w	8005da4 <HAL_HCD_HC_SubmitRequest+0x210>
 8005c18:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c31 	.word	0x08005c31
 8005c24:	08005d91 	.word	0x08005d91
 8005c28:	08005c95 	.word	0x08005c95
 8005c2c:	08005d13 	.word	0x08005d13
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005c30:	7c3b      	ldrb	r3, [r7, #16]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	f040 80b8 	bne.w	8005da8 <HAL_HCD_HC_SubmitRequest+0x214>
 8005c38:	78bb      	ldrb	r3, [r7, #2]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f040 80b4 	bne.w	8005da8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005c40:	8b3b      	ldrh	r3, [r7, #24]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d108      	bne.n	8005c58 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005c46:	78fb      	ldrb	r3, [r7, #3]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	212c      	movs	r1, #44	; 0x2c
 8005c4c:	fb01 f303 	mul.w	r3, r1, r3
 8005c50:	4413      	add	r3, r2
 8005c52:	3355      	adds	r3, #85	; 0x55
 8005c54:	2201      	movs	r2, #1
 8005c56:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	212c      	movs	r1, #44	; 0x2c
 8005c5e:	fb01 f303 	mul.w	r3, r1, r3
 8005c62:	4413      	add	r3, r2
 8005c64:	3355      	adds	r3, #85	; 0x55
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d109      	bne.n	8005c80 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	212c      	movs	r1, #44	; 0x2c
 8005c72:	fb01 f303 	mul.w	r3, r1, r3
 8005c76:	4413      	add	r3, r2
 8005c78:	3342      	adds	r3, #66	; 0x42
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005c7e:	e093      	b.n	8005da8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	212c      	movs	r1, #44	; 0x2c
 8005c86:	fb01 f303 	mul.w	r3, r1, r3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	3342      	adds	r3, #66	; 0x42
 8005c8e:	2202      	movs	r2, #2
 8005c90:	701a      	strb	r2, [r3, #0]
      break;
 8005c92:	e089      	b.n	8005da8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005c94:	78bb      	ldrb	r3, [r7, #2]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d11d      	bne.n	8005cd6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	212c      	movs	r1, #44	; 0x2c
 8005ca0:	fb01 f303 	mul.w	r3, r1, r3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	3355      	adds	r3, #85	; 0x55
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d109      	bne.n	8005cc2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	212c      	movs	r1, #44	; 0x2c
 8005cb4:	fb01 f303 	mul.w	r3, r1, r3
 8005cb8:	4413      	add	r3, r2
 8005cba:	3342      	adds	r3, #66	; 0x42
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005cc0:	e073      	b.n	8005daa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	212c      	movs	r1, #44	; 0x2c
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	4413      	add	r3, r2
 8005cce:	3342      	adds	r3, #66	; 0x42
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	701a      	strb	r2, [r3, #0]
      break;
 8005cd4:	e069      	b.n	8005daa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	212c      	movs	r1, #44	; 0x2c
 8005cdc:	fb01 f303 	mul.w	r3, r1, r3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	3354      	adds	r3, #84	; 0x54
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d109      	bne.n	8005cfe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	212c      	movs	r1, #44	; 0x2c
 8005cf0:	fb01 f303 	mul.w	r3, r1, r3
 8005cf4:	4413      	add	r3, r2
 8005cf6:	3342      	adds	r3, #66	; 0x42
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	701a      	strb	r2, [r3, #0]
      break;
 8005cfc:	e055      	b.n	8005daa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	212c      	movs	r1, #44	; 0x2c
 8005d04:	fb01 f303 	mul.w	r3, r1, r3
 8005d08:	4413      	add	r3, r2
 8005d0a:	3342      	adds	r3, #66	; 0x42
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	701a      	strb	r2, [r3, #0]
      break;
 8005d10:	e04b      	b.n	8005daa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005d12:	78bb      	ldrb	r3, [r7, #2]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d11d      	bne.n	8005d54 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	212c      	movs	r1, #44	; 0x2c
 8005d1e:	fb01 f303 	mul.w	r3, r1, r3
 8005d22:	4413      	add	r3, r2
 8005d24:	3355      	adds	r3, #85	; 0x55
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d109      	bne.n	8005d40 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d2c:	78fb      	ldrb	r3, [r7, #3]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	212c      	movs	r1, #44	; 0x2c
 8005d32:	fb01 f303 	mul.w	r3, r1, r3
 8005d36:	4413      	add	r3, r2
 8005d38:	3342      	adds	r3, #66	; 0x42
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005d3e:	e034      	b.n	8005daa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	212c      	movs	r1, #44	; 0x2c
 8005d46:	fb01 f303 	mul.w	r3, r1, r3
 8005d4a:	4413      	add	r3, r2
 8005d4c:	3342      	adds	r3, #66	; 0x42
 8005d4e:	2202      	movs	r2, #2
 8005d50:	701a      	strb	r2, [r3, #0]
      break;
 8005d52:	e02a      	b.n	8005daa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	212c      	movs	r1, #44	; 0x2c
 8005d5a:	fb01 f303 	mul.w	r3, r1, r3
 8005d5e:	4413      	add	r3, r2
 8005d60:	3354      	adds	r3, #84	; 0x54
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d109      	bne.n	8005d7c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	212c      	movs	r1, #44	; 0x2c
 8005d6e:	fb01 f303 	mul.w	r3, r1, r3
 8005d72:	4413      	add	r3, r2
 8005d74:	3342      	adds	r3, #66	; 0x42
 8005d76:	2200      	movs	r2, #0
 8005d78:	701a      	strb	r2, [r3, #0]
      break;
 8005d7a:	e016      	b.n	8005daa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	212c      	movs	r1, #44	; 0x2c
 8005d82:	fb01 f303 	mul.w	r3, r1, r3
 8005d86:	4413      	add	r3, r2
 8005d88:	3342      	adds	r3, #66	; 0x42
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	701a      	strb	r2, [r3, #0]
      break;
 8005d8e:	e00c      	b.n	8005daa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	212c      	movs	r1, #44	; 0x2c
 8005d96:	fb01 f303 	mul.w	r3, r1, r3
 8005d9a:	4413      	add	r3, r2
 8005d9c:	3342      	adds	r3, #66	; 0x42
 8005d9e:	2200      	movs	r2, #0
 8005da0:	701a      	strb	r2, [r3, #0]
      break;
 8005da2:	e002      	b.n	8005daa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005da4:	bf00      	nop
 8005da6:	e000      	b.n	8005daa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005da8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	212c      	movs	r1, #44	; 0x2c
 8005db0:	fb01 f303 	mul.w	r3, r1, r3
 8005db4:	4413      	add	r3, r2
 8005db6:	3344      	adds	r3, #68	; 0x44
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	8b3a      	ldrh	r2, [r7, #24]
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	202c      	movs	r0, #44	; 0x2c
 8005dc4:	fb00 f303 	mul.w	r3, r0, r3
 8005dc8:	440b      	add	r3, r1
 8005dca:	334c      	adds	r3, #76	; 0x4c
 8005dcc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005dce:	78fb      	ldrb	r3, [r7, #3]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	212c      	movs	r1, #44	; 0x2c
 8005dd4:	fb01 f303 	mul.w	r3, r1, r3
 8005dd8:	4413      	add	r3, r2
 8005dda:	3360      	adds	r3, #96	; 0x60
 8005ddc:	2200      	movs	r2, #0
 8005dde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005de0:	78fb      	ldrb	r3, [r7, #3]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	212c      	movs	r1, #44	; 0x2c
 8005de6:	fb01 f303 	mul.w	r3, r1, r3
 8005dea:	4413      	add	r3, r2
 8005dec:	3350      	adds	r3, #80	; 0x50
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	212c      	movs	r1, #44	; 0x2c
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	3339      	adds	r3, #57	; 0x39
 8005e00:	78fa      	ldrb	r2, [r7, #3]
 8005e02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	212c      	movs	r1, #44	; 0x2c
 8005e0a:	fb01 f303 	mul.w	r3, r1, r3
 8005e0e:	4413      	add	r3, r2
 8005e10:	3361      	adds	r3, #97	; 0x61
 8005e12:	2200      	movs	r2, #0
 8005e14:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	78fb      	ldrb	r3, [r7, #3]
 8005e1c:	222c      	movs	r2, #44	; 0x2c
 8005e1e:	fb02 f303 	mul.w	r3, r2, r3
 8005e22:	3338      	adds	r3, #56	; 0x38
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	18d1      	adds	r1, r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f006 f9f6 	bl	800c220 <USB_HC_StartXfer>
 8005e34:	4603      	mov	r3, r0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop

08005e40 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f005 ff0f 	bl	800bc7a <USB_GetMode>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	f040 80ef 	bne.w	8006042 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f005 fef3 	bl	800bc54 <USB_ReadInterrupts>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 80e5 	beq.w	8006040 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f005 feea 	bl	800bc54 <USB_ReadInterrupts>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e8a:	d104      	bne.n	8005e96 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005e94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f005 feda 	bl	800bc54 <USB_ReadInterrupts>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eaa:	d104      	bne.n	8005eb6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005eb4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f005 feca 	bl	800bc54 <USB_ReadInterrupts>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ec6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005eca:	d104      	bne.n	8005ed6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005ed4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f005 feba 	bl	800bc54 <USB_ReadInterrupts>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d103      	bne.n	8005ef2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f005 feac 	bl	800bc54 <USB_ReadInterrupts>
 8005efc:	4603      	mov	r3, r0
 8005efe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f06:	d115      	bne.n	8005f34 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005f10:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d108      	bne.n	8005f34 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f008 fc7e 	bl	800e824 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f005 ffa2 	bl	800be78 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f005 fe8b 	bl	800bc54 <USB_ReadInterrupts>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f48:	d102      	bne.n	8005f50 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 f9ff 	bl	800734e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f005 fe7d 	bl	800bc54 <USB_ReadInterrupts>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d106      	bne.n	8005f72 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f008 fc41 	bl	800e7ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2208      	movs	r2, #8
 8005f70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f005 fe6c 	bl	800bc54 <USB_ReadInterrupts>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	f003 0310 	and.w	r3, r3, #16
 8005f82:	2b10      	cmp	r3, #16
 8005f84:	d101      	bne.n	8005f8a <HAL_HCD_IRQHandler+0x14a>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <HAL_HCD_IRQHandler+0x14c>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d012      	beq.n	8005fb6 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0210 	bic.w	r2, r2, #16
 8005f9e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f001 f902 	bl	80071aa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	699a      	ldr	r2, [r3, #24]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0210 	orr.w	r2, r2, #16
 8005fb4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f005 fe4a 	bl	800bc54 <USB_ReadInterrupts>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fca:	d13a      	bne.n	8006042 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f006 fa67 	bl	800c4a4 <USB_HC_ReadInterrupt>
 8005fd6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	e025      	b.n	800602a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d018      	beq.n	8006024 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006008:	d106      	bne.n	8006018 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	4619      	mov	r1, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f8ab 	bl	800616c <HCD_HC_IN_IRQHandler>
 8006016:	e005      	b.n	8006024 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	4619      	mov	r1, r3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fcc6 	bl	80069b0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	3301      	adds	r3, #1
 8006028:	617b      	str	r3, [r7, #20]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	429a      	cmp	r2, r3
 8006032:	d3d4      	bcc.n	8005fde <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800603c:	615a      	str	r2, [r3, #20]
 800603e:	e000      	b.n	8006042 <HAL_HCD_IRQHandler+0x202>
      return;
 8006040:	bf00      	nop
    }
  }
}
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_HCD_Start+0x16>
 800605a:	2302      	movs	r3, #2
 800605c:	e013      	b.n	8006086 <HAL_HCD_Start+0x3e>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f005 fcff 	bl	800ba6e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2101      	movs	r1, #1
 8006076:	4618      	mov	r0, r3
 8006078:	f005 ff62 	bl	800bf40 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b082      	sub	sp, #8
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_HCD_Stop+0x16>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e00d      	b.n	80060c0 <HAL_HCD_Stop+0x32>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f006 fb61 	bl	800c778 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f005 ff09 	bl	800beec <USB_ResetPort>
 80060da:	4603      	mov	r3, r0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	212c      	movs	r1, #44	; 0x2c
 80060f6:	fb01 f303 	mul.w	r3, r1, r3
 80060fa:	4413      	add	r3, r2
 80060fc:	3360      	adds	r3, #96	; 0x60
 80060fe:	781b      	ldrb	r3, [r3, #0]
}
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	212c      	movs	r1, #44	; 0x2c
 800611e:	fb01 f303 	mul.w	r3, r1, r3
 8006122:	4413      	add	r3, r2
 8006124:	3350      	adds	r3, #80	; 0x50
 8006126:	681b      	ldr	r3, [r3, #0]
}
 8006128:	4618      	mov	r0, r3
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4618      	mov	r0, r3
 8006142:	f005 ff4d 	bl	800bfe0 <USB_GetCurrentFrame>
 8006146:	4603      	mov	r3, r0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4618      	mov	r0, r3
 800615e:	f005 ff28 	bl	800bfb2 <USB_GetHostSpeed>
 8006162:	4603      	mov	r3, r0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	4413      	add	r3, r2
 800618e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b04      	cmp	r3, #4
 800619a:	d119      	bne.n	80061d0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a8:	461a      	mov	r2, r3
 80061aa:	2304      	movs	r3, #4
 80061ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c8:	f043 0302 	orr.w	r3, r3, #2
 80061cc:	60d3      	str	r3, [r2, #12]
 80061ce:	e101      	b.n	80063d4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061e6:	d12b      	bne.n	8006240 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f4:	461a      	mov	r2, r3
 80061f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	212c      	movs	r1, #44	; 0x2c
 8006202:	fb01 f303 	mul.w	r3, r1, r3
 8006206:	4413      	add	r3, r2
 8006208:	3361      	adds	r3, #97	; 0x61
 800620a:	2207      	movs	r2, #7
 800620c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	4413      	add	r3, r2
 8006216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	0151      	lsls	r1, r2, #5
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	440a      	add	r2, r1
 8006224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006228:	f043 0302 	orr.w	r3, r3, #2
 800622c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	4611      	mov	r1, r2
 8006238:	4618      	mov	r0, r3
 800623a:	f006 f944 	bl	800c4c6 <USB_HC_Halt>
 800623e:	e0c9      	b.n	80063d4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	4413      	add	r3, r2
 8006248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b20      	cmp	r3, #32
 8006254:	d109      	bne.n	800626a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	4413      	add	r3, r2
 800625e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006262:	461a      	mov	r2, r3
 8006264:	2320      	movs	r3, #32
 8006266:	6093      	str	r3, [r2, #8]
 8006268:	e0b4      	b.n	80063d4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	4413      	add	r3, r2
 8006272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 0308 	and.w	r3, r3, #8
 800627c:	2b08      	cmp	r3, #8
 800627e:	d133      	bne.n	80062e8 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	4413      	add	r3, r2
 8006288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	440a      	add	r2, r1
 8006296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800629a:	f043 0302 	orr.w	r3, r3, #2
 800629e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	212c      	movs	r1, #44	; 0x2c
 80062a6:	fb01 f303 	mul.w	r3, r1, r3
 80062aa:	4413      	add	r3, r2
 80062ac:	3361      	adds	r3, #97	; 0x61
 80062ae:	2205      	movs	r2, #5
 80062b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062be:	461a      	mov	r2, r3
 80062c0:	2310      	movs	r3, #16
 80062c2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d0:	461a      	mov	r2, r3
 80062d2:	2308      	movs	r3, #8
 80062d4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	4611      	mov	r1, r2
 80062e0:	4618      	mov	r0, r3
 80062e2:	f006 f8f0 	bl	800c4c6 <USB_HC_Halt>
 80062e6:	e075      	b.n	80063d4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062fe:	d134      	bne.n	800636a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	4413      	add	r3, r2
 8006308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	0151      	lsls	r1, r2, #5
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	440a      	add	r2, r1
 8006316:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800631a:	f043 0302 	orr.w	r3, r3, #2
 800631e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	212c      	movs	r1, #44	; 0x2c
 8006326:	fb01 f303 	mul.w	r3, r1, r3
 800632a:	4413      	add	r3, r2
 800632c:	3361      	adds	r3, #97	; 0x61
 800632e:	2208      	movs	r2, #8
 8006330:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4413      	add	r3, r2
 800633a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633e:	461a      	mov	r2, r3
 8006340:	2310      	movs	r3, #16
 8006342:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	4413      	add	r3, r2
 800634c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006350:	461a      	mov	r2, r3
 8006352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006356:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	4611      	mov	r1, r2
 8006362:	4618      	mov	r0, r3
 8006364:	f006 f8af 	bl	800c4c6 <USB_HC_Halt>
 8006368:	e034      	b.n	80063d4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	4413      	add	r3, r2
 8006372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637c:	2b80      	cmp	r3, #128	; 0x80
 800637e:	d129      	bne.n	80063d4 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	4413      	add	r3, r2
 8006388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	440a      	add	r2, r1
 8006396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800639a:	f043 0302 	orr.w	r3, r3, #2
 800639e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	212c      	movs	r1, #44	; 0x2c
 80063a6:	fb01 f303 	mul.w	r3, r1, r3
 80063aa:	4413      	add	r3, r2
 80063ac:	3361      	adds	r3, #97	; 0x61
 80063ae:	2206      	movs	r2, #6
 80063b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	4611      	mov	r1, r2
 80063bc:	4618      	mov	r0, r3
 80063be:	f006 f882 	bl	800c4c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ce:	461a      	mov	r2, r3
 80063d0:	2380      	movs	r3, #128	; 0x80
 80063d2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ea:	d122      	bne.n	8006432 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	440a      	add	r2, r1
 8006402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006406:	f043 0302 	orr.w	r3, r3, #2
 800640a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	4611      	mov	r1, r2
 8006416:	4618      	mov	r0, r3
 8006418:	f006 f855 	bl	800c4c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	4413      	add	r3, r2
 8006424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006428:	461a      	mov	r2, r3
 800642a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800642e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006430:	e2ba      	b.n	80069a8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	4413      	add	r3, r2
 800643a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b01      	cmp	r3, #1
 8006446:	f040 811b 	bne.w	8006680 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d019      	beq.n	8006486 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	212c      	movs	r1, #44	; 0x2c
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	4413      	add	r3, r2
 800645e:	3348      	adds	r3, #72	; 0x48
 8006460:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	0159      	lsls	r1, r3, #5
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	440b      	add	r3, r1
 800646a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006474:	1ad2      	subs	r2, r2, r3
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	202c      	movs	r0, #44	; 0x2c
 800647c:	fb00 f303 	mul.w	r3, r0, r3
 8006480:	440b      	add	r3, r1
 8006482:	3350      	adds	r3, #80	; 0x50
 8006484:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	212c      	movs	r1, #44	; 0x2c
 800648c:	fb01 f303 	mul.w	r3, r1, r3
 8006490:	4413      	add	r3, r2
 8006492:	3361      	adds	r3, #97	; 0x61
 8006494:	2201      	movs	r2, #1
 8006496:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	212c      	movs	r1, #44	; 0x2c
 800649e:	fb01 f303 	mul.w	r3, r1, r3
 80064a2:	4413      	add	r3, r2
 80064a4:	335c      	adds	r3, #92	; 0x5c
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b6:	461a      	mov	r2, r3
 80064b8:	2301      	movs	r3, #1
 80064ba:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	212c      	movs	r1, #44	; 0x2c
 80064c2:	fb01 f303 	mul.w	r3, r1, r3
 80064c6:	4413      	add	r3, r2
 80064c8:	333f      	adds	r3, #63	; 0x3f
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d009      	beq.n	80064e4 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	212c      	movs	r1, #44	; 0x2c
 80064d6:	fb01 f303 	mul.w	r3, r1, r3
 80064da:	4413      	add	r3, r2
 80064dc:	333f      	adds	r3, #63	; 0x3f
 80064de:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d121      	bne.n	8006528 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	0151      	lsls	r1, r2, #5
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	440a      	add	r2, r1
 80064fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064fe:	f043 0302 	orr.w	r3, r3, #2
 8006502:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	4611      	mov	r1, r2
 800650e:	4618      	mov	r0, r3
 8006510:	f005 ffd9 	bl	800c4c6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	4413      	add	r3, r2
 800651c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006520:	461a      	mov	r2, r3
 8006522:	2310      	movs	r3, #16
 8006524:	6093      	str	r3, [r2, #8]
 8006526:	e066      	b.n	80065f6 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	212c      	movs	r1, #44	; 0x2c
 800652e:	fb01 f303 	mul.w	r3, r1, r3
 8006532:	4413      	add	r3, r2
 8006534:	333f      	adds	r3, #63	; 0x3f
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b03      	cmp	r3, #3
 800653a:	d127      	bne.n	800658c <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	4413      	add	r3, r2
 8006544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	440a      	add	r2, r1
 8006552:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006556:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800655a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	212c      	movs	r1, #44	; 0x2c
 8006562:	fb01 f303 	mul.w	r3, r1, r3
 8006566:	4413      	add	r3, r2
 8006568:	3360      	adds	r3, #96	; 0x60
 800656a:	2201      	movs	r2, #1
 800656c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	b2d9      	uxtb	r1, r3
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	202c      	movs	r0, #44	; 0x2c
 8006578:	fb00 f303 	mul.w	r3, r0, r3
 800657c:	4413      	add	r3, r2
 800657e:	3360      	adds	r3, #96	; 0x60
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f008 f95b 	bl	800e840 <HAL_HCD_HC_NotifyURBChange_Callback>
 800658a:	e034      	b.n	80065f6 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	212c      	movs	r1, #44	; 0x2c
 8006592:	fb01 f303 	mul.w	r3, r1, r3
 8006596:	4413      	add	r3, r2
 8006598:	333f      	adds	r3, #63	; 0x3f
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d12a      	bne.n	80065f6 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	212c      	movs	r1, #44	; 0x2c
 80065a6:	fb01 f303 	mul.w	r3, r1, r3
 80065aa:	4413      	add	r3, r2
 80065ac:	3360      	adds	r3, #96	; 0x60
 80065ae:	2201      	movs	r2, #1
 80065b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	212c      	movs	r1, #44	; 0x2c
 80065b8:	fb01 f303 	mul.w	r3, r1, r3
 80065bc:	4413      	add	r3, r2
 80065be:	3354      	adds	r3, #84	; 0x54
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	f083 0301 	eor.w	r3, r3, #1
 80065c6:	b2d8      	uxtb	r0, r3
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	212c      	movs	r1, #44	; 0x2c
 80065ce:	fb01 f303 	mul.w	r3, r1, r3
 80065d2:	4413      	add	r3, r2
 80065d4:	3354      	adds	r3, #84	; 0x54
 80065d6:	4602      	mov	r2, r0
 80065d8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	b2d9      	uxtb	r1, r3
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	202c      	movs	r0, #44	; 0x2c
 80065e4:	fb00 f303 	mul.w	r3, r0, r3
 80065e8:	4413      	add	r3, r2
 80065ea:	3360      	adds	r3, #96	; 0x60
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f008 f925 	bl	800e840 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d12b      	bne.n	8006656 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	212c      	movs	r1, #44	; 0x2c
 8006604:	fb01 f303 	mul.w	r3, r1, r3
 8006608:	4413      	add	r3, r2
 800660a:	3348      	adds	r3, #72	; 0x48
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	202c      	movs	r0, #44	; 0x2c
 8006614:	fb00 f202 	mul.w	r2, r0, r2
 8006618:	440a      	add	r2, r1
 800661a:	3240      	adds	r2, #64	; 0x40
 800661c:	8812      	ldrh	r2, [r2, #0]
 800661e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 81be 	beq.w	80069a8 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	212c      	movs	r1, #44	; 0x2c
 8006632:	fb01 f303 	mul.w	r3, r1, r3
 8006636:	4413      	add	r3, r2
 8006638:	3354      	adds	r3, #84	; 0x54
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	f083 0301 	eor.w	r3, r3, #1
 8006640:	b2d8      	uxtb	r0, r3
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	212c      	movs	r1, #44	; 0x2c
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	4413      	add	r3, r2
 800664e:	3354      	adds	r3, #84	; 0x54
 8006650:	4602      	mov	r2, r0
 8006652:	701a      	strb	r2, [r3, #0]
}
 8006654:	e1a8      	b.n	80069a8 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	212c      	movs	r1, #44	; 0x2c
 800665c:	fb01 f303 	mul.w	r3, r1, r3
 8006660:	4413      	add	r3, r2
 8006662:	3354      	adds	r3, #84	; 0x54
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	f083 0301 	eor.w	r3, r3, #1
 800666a:	b2d8      	uxtb	r0, r3
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	212c      	movs	r1, #44	; 0x2c
 8006672:	fb01 f303 	mul.w	r3, r1, r3
 8006676:	4413      	add	r3, r2
 8006678:	3354      	adds	r3, #84	; 0x54
 800667a:	4602      	mov	r2, r0
 800667c:	701a      	strb	r2, [r3, #0]
}
 800667e:	e193      	b.n	80069a8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	4413      	add	r3, r2
 8006688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b02      	cmp	r3, #2
 8006694:	f040 8106 	bne.w	80068a4 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	0151      	lsls	r1, r2, #5
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	440a      	add	r2, r1
 80066ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066b2:	f023 0302 	bic.w	r3, r3, #2
 80066b6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	212c      	movs	r1, #44	; 0x2c
 80066be:	fb01 f303 	mul.w	r3, r1, r3
 80066c2:	4413      	add	r3, r2
 80066c4:	3361      	adds	r3, #97	; 0x61
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d109      	bne.n	80066e0 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	212c      	movs	r1, #44	; 0x2c
 80066d2:	fb01 f303 	mul.w	r3, r1, r3
 80066d6:	4413      	add	r3, r2
 80066d8:	3360      	adds	r3, #96	; 0x60
 80066da:	2201      	movs	r2, #1
 80066dc:	701a      	strb	r2, [r3, #0]
 80066de:	e0c9      	b.n	8006874 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	212c      	movs	r1, #44	; 0x2c
 80066e6:	fb01 f303 	mul.w	r3, r1, r3
 80066ea:	4413      	add	r3, r2
 80066ec:	3361      	adds	r3, #97	; 0x61
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b05      	cmp	r3, #5
 80066f2:	d109      	bne.n	8006708 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	212c      	movs	r1, #44	; 0x2c
 80066fa:	fb01 f303 	mul.w	r3, r1, r3
 80066fe:	4413      	add	r3, r2
 8006700:	3360      	adds	r3, #96	; 0x60
 8006702:	2205      	movs	r2, #5
 8006704:	701a      	strb	r2, [r3, #0]
 8006706:	e0b5      	b.n	8006874 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	212c      	movs	r1, #44	; 0x2c
 800670e:	fb01 f303 	mul.w	r3, r1, r3
 8006712:	4413      	add	r3, r2
 8006714:	3361      	adds	r3, #97	; 0x61
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	2b06      	cmp	r3, #6
 800671a:	d009      	beq.n	8006730 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	212c      	movs	r1, #44	; 0x2c
 8006722:	fb01 f303 	mul.w	r3, r1, r3
 8006726:	4413      	add	r3, r2
 8006728:	3361      	adds	r3, #97	; 0x61
 800672a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800672c:	2b08      	cmp	r3, #8
 800672e:	d150      	bne.n	80067d2 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	212c      	movs	r1, #44	; 0x2c
 8006736:	fb01 f303 	mul.w	r3, r1, r3
 800673a:	4413      	add	r3, r2
 800673c:	335c      	adds	r3, #92	; 0x5c
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	202c      	movs	r0, #44	; 0x2c
 8006748:	fb00 f303 	mul.w	r3, r0, r3
 800674c:	440b      	add	r3, r1
 800674e:	335c      	adds	r3, #92	; 0x5c
 8006750:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	212c      	movs	r1, #44	; 0x2c
 8006758:	fb01 f303 	mul.w	r3, r1, r3
 800675c:	4413      	add	r3, r2
 800675e:	335c      	adds	r3, #92	; 0x5c
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b02      	cmp	r3, #2
 8006764:	d912      	bls.n	800678c <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	212c      	movs	r1, #44	; 0x2c
 800676c:	fb01 f303 	mul.w	r3, r1, r3
 8006770:	4413      	add	r3, r2
 8006772:	335c      	adds	r3, #92	; 0x5c
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	212c      	movs	r1, #44	; 0x2c
 800677e:	fb01 f303 	mul.w	r3, r1, r3
 8006782:	4413      	add	r3, r2
 8006784:	3360      	adds	r3, #96	; 0x60
 8006786:	2204      	movs	r2, #4
 8006788:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800678a:	e073      	b.n	8006874 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	212c      	movs	r1, #44	; 0x2c
 8006792:	fb01 f303 	mul.w	r3, r1, r3
 8006796:	4413      	add	r3, r2
 8006798:	3360      	adds	r3, #96	; 0x60
 800679a:	2202      	movs	r2, #2
 800679c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067b4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067bc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ca:	461a      	mov	r2, r3
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80067d0:	e050      	b.n	8006874 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	212c      	movs	r1, #44	; 0x2c
 80067d8:	fb01 f303 	mul.w	r3, r1, r3
 80067dc:	4413      	add	r3, r2
 80067de:	3361      	adds	r3, #97	; 0x61
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d122      	bne.n	800682c <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	212c      	movs	r1, #44	; 0x2c
 80067ec:	fb01 f303 	mul.w	r3, r1, r3
 80067f0:	4413      	add	r3, r2
 80067f2:	3360      	adds	r3, #96	; 0x60
 80067f4:	2202      	movs	r2, #2
 80067f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800680e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006816:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4413      	add	r3, r2
 8006820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006824:	461a      	mov	r2, r3
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	e023      	b.n	8006874 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	212c      	movs	r1, #44	; 0x2c
 8006832:	fb01 f303 	mul.w	r3, r1, r3
 8006836:	4413      	add	r3, r2
 8006838:	3361      	adds	r3, #97	; 0x61
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b07      	cmp	r3, #7
 800683e:	d119      	bne.n	8006874 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	212c      	movs	r1, #44	; 0x2c
 8006846:	fb01 f303 	mul.w	r3, r1, r3
 800684a:	4413      	add	r3, r2
 800684c:	335c      	adds	r3, #92	; 0x5c
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	202c      	movs	r0, #44	; 0x2c
 8006858:	fb00 f303 	mul.w	r3, r0, r3
 800685c:	440b      	add	r3, r1
 800685e:	335c      	adds	r3, #92	; 0x5c
 8006860:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	212c      	movs	r1, #44	; 0x2c
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	4413      	add	r3, r2
 800686e:	3360      	adds	r3, #96	; 0x60
 8006870:	2204      	movs	r2, #4
 8006872:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	4413      	add	r3, r2
 800687c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006880:	461a      	mov	r2, r3
 8006882:	2302      	movs	r3, #2
 8006884:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	b2d9      	uxtb	r1, r3
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	202c      	movs	r0, #44	; 0x2c
 8006890:	fb00 f303 	mul.w	r3, r0, r3
 8006894:	4413      	add	r3, r2
 8006896:	3360      	adds	r3, #96	; 0x60
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f007 ffcf 	bl	800e840 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80068a2:	e081      	b.n	80069a8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 0310 	and.w	r3, r3, #16
 80068b6:	2b10      	cmp	r3, #16
 80068b8:	d176      	bne.n	80069a8 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	212c      	movs	r1, #44	; 0x2c
 80068c0:	fb01 f303 	mul.w	r3, r1, r3
 80068c4:	4413      	add	r3, r2
 80068c6:	333f      	adds	r3, #63	; 0x3f
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d121      	bne.n	8006912 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	212c      	movs	r1, #44	; 0x2c
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	4413      	add	r3, r2
 80068da:	335c      	adds	r3, #92	; 0x5c
 80068dc:	2200      	movs	r2, #0
 80068de:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	0151      	lsls	r1, r2, #5
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	440a      	add	r2, r1
 80068f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068fa:	f043 0302 	orr.w	r3, r3, #2
 80068fe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	4611      	mov	r1, r2
 800690a:	4618      	mov	r0, r3
 800690c:	f005 fddb 	bl	800c4c6 <USB_HC_Halt>
 8006910:	e041      	b.n	8006996 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	212c      	movs	r1, #44	; 0x2c
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	4413      	add	r3, r2
 800691e:	333f      	adds	r3, #63	; 0x3f
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d009      	beq.n	800693a <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	212c      	movs	r1, #44	; 0x2c
 800692c:	fb01 f303 	mul.w	r3, r1, r3
 8006930:	4413      	add	r3, r2
 8006932:	333f      	adds	r3, #63	; 0x3f
 8006934:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006936:	2b02      	cmp	r3, #2
 8006938:	d12d      	bne.n	8006996 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	212c      	movs	r1, #44	; 0x2c
 8006940:	fb01 f303 	mul.w	r3, r1, r3
 8006944:	4413      	add	r3, r2
 8006946:	335c      	adds	r3, #92	; 0x5c
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d120      	bne.n	8006996 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	212c      	movs	r1, #44	; 0x2c
 800695a:	fb01 f303 	mul.w	r3, r1, r3
 800695e:	4413      	add	r3, r2
 8006960:	3361      	adds	r3, #97	; 0x61
 8006962:	2203      	movs	r2, #3
 8006964:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	4413      	add	r3, r2
 800696e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	0151      	lsls	r1, r2, #5
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	440a      	add	r2, r1
 800697c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006980:	f043 0302 	orr.w	r3, r3, #2
 8006984:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	4611      	mov	r1, r2
 8006990:	4618      	mov	r0, r3
 8006992:	f005 fd98 	bl	800c4c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	4413      	add	r3, r2
 800699e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a2:	461a      	mov	r2, r3
 80069a4:	2310      	movs	r3, #16
 80069a6:	6093      	str	r3, [r2, #8]
}
 80069a8:	bf00      	nop
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80069c6:	78fb      	ldrb	r3, [r7, #3]
 80069c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f003 0304 	and.w	r3, r3, #4
 80069dc:	2b04      	cmp	r3, #4
 80069de:	d119      	bne.n	8006a14 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ec:	461a      	mov	r2, r3
 80069ee:	2304      	movs	r3, #4
 80069f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	0151      	lsls	r1, r2, #5
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	440a      	add	r2, r1
 8006a08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a0c:	f043 0302 	orr.w	r3, r3, #2
 8006a10:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006a12:	e3c6      	b.n	80071a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d13e      	bne.n	8006aa8 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a36:	461a      	mov	r2, r3
 8006a38:	2320      	movs	r3, #32
 8006a3a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	212c      	movs	r1, #44	; 0x2c
 8006a42:	fb01 f303 	mul.w	r3, r1, r3
 8006a46:	4413      	add	r3, r2
 8006a48:	333d      	adds	r3, #61	; 0x3d
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	f040 83a8 	bne.w	80071a2 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	212c      	movs	r1, #44	; 0x2c
 8006a58:	fb01 f303 	mul.w	r3, r1, r3
 8006a5c:	4413      	add	r3, r2
 8006a5e:	333d      	adds	r3, #61	; 0x3d
 8006a60:	2200      	movs	r2, #0
 8006a62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	212c      	movs	r1, #44	; 0x2c
 8006a6a:	fb01 f303 	mul.w	r3, r1, r3
 8006a6e:	4413      	add	r3, r2
 8006a70:	3360      	adds	r3, #96	; 0x60
 8006a72:	2202      	movs	r2, #2
 8006a74:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a90:	f043 0302 	orr.w	r3, r3, #2
 8006a94:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f005 fd10 	bl	800c4c6 <USB_HC_Halt>
}
 8006aa6:	e37c      	b.n	80071a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006abe:	d122      	bne.n	8006b06 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	0151      	lsls	r1, r2, #5
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	440a      	add	r2, r1
 8006ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ada:	f043 0302 	orr.w	r3, r3, #2
 8006ade:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	b2d2      	uxtb	r2, r2
 8006ae8:	4611      	mov	r1, r2
 8006aea:	4618      	mov	r0, r3
 8006aec:	f005 fceb 	bl	800c4c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afc:	461a      	mov	r2, r3
 8006afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b02:	6093      	str	r3, [r2, #8]
}
 8006b04:	e34d      	b.n	80071a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d150      	bne.n	8006bbe <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	212c      	movs	r1, #44	; 0x2c
 8006b22:	fb01 f303 	mul.w	r3, r1, r3
 8006b26:	4413      	add	r3, r2
 8006b28:	335c      	adds	r3, #92	; 0x5c
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b40:	2b40      	cmp	r3, #64	; 0x40
 8006b42:	d111      	bne.n	8006b68 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	212c      	movs	r1, #44	; 0x2c
 8006b4a:	fb01 f303 	mul.w	r3, r1, r3
 8006b4e:	4413      	add	r3, r2
 8006b50:	333d      	adds	r3, #61	; 0x3d
 8006b52:	2201      	movs	r2, #1
 8006b54:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b62:	461a      	mov	r2, r3
 8006b64:	2340      	movs	r3, #64	; 0x40
 8006b66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	0151      	lsls	r1, r2, #5
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	440a      	add	r2, r1
 8006b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b82:	f043 0302 	orr.w	r3, r3, #2
 8006b86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	4611      	mov	r1, r2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f005 fc97 	bl	800c4c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	212c      	movs	r1, #44	; 0x2c
 8006bb0:	fb01 f303 	mul.w	r3, r1, r3
 8006bb4:	4413      	add	r3, r2
 8006bb6:	3361      	adds	r3, #97	; 0x61
 8006bb8:	2201      	movs	r2, #1
 8006bba:	701a      	strb	r2, [r3, #0]
}
 8006bbc:	e2f1      	b.n	80071a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd0:	2b40      	cmp	r3, #64	; 0x40
 8006bd2:	d13c      	bne.n	8006c4e <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	212c      	movs	r1, #44	; 0x2c
 8006bda:	fb01 f303 	mul.w	r3, r1, r3
 8006bde:	4413      	add	r3, r2
 8006be0:	3361      	adds	r3, #97	; 0x61
 8006be2:	2204      	movs	r2, #4
 8006be4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	212c      	movs	r1, #44	; 0x2c
 8006bec:	fb01 f303 	mul.w	r3, r1, r3
 8006bf0:	4413      	add	r3, r2
 8006bf2:	333d      	adds	r3, #61	; 0x3d
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	212c      	movs	r1, #44	; 0x2c
 8006bfe:	fb01 f303 	mul.w	r3, r1, r3
 8006c02:	4413      	add	r3, r2
 8006c04:	335c      	adds	r3, #92	; 0x5c
 8006c06:	2200      	movs	r2, #0
 8006c08:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	0151      	lsls	r1, r2, #5
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	440a      	add	r2, r1
 8006c20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c24:	f043 0302 	orr.w	r3, r3, #2
 8006c28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	b2d2      	uxtb	r2, r2
 8006c32:	4611      	mov	r1, r2
 8006c34:	4618      	mov	r0, r3
 8006c36:	f005 fc46 	bl	800c4c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c46:	461a      	mov	r2, r3
 8006c48:	2340      	movs	r3, #64	; 0x40
 8006c4a:	6093      	str	r3, [r2, #8]
}
 8006c4c:	e2a9      	b.n	80071a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d12a      	bne.n	8006cba <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c70:	461a      	mov	r2, r3
 8006c72:	2308      	movs	r3, #8
 8006c74:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	0151      	lsls	r1, r2, #5
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	440a      	add	r2, r1
 8006c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c90:	f043 0302 	orr.w	r3, r3, #2
 8006c94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	b2d2      	uxtb	r2, r2
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f005 fc10 	bl	800c4c6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	212c      	movs	r1, #44	; 0x2c
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	3361      	adds	r3, #97	; 0x61
 8006cb4:	2205      	movs	r2, #5
 8006cb6:	701a      	strb	r2, [r3, #0]
}
 8006cb8:	e273      	b.n	80071a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f003 0310 	and.w	r3, r3, #16
 8006ccc:	2b10      	cmp	r3, #16
 8006cce:	d150      	bne.n	8006d72 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	212c      	movs	r1, #44	; 0x2c
 8006cd6:	fb01 f303 	mul.w	r3, r1, r3
 8006cda:	4413      	add	r3, r2
 8006cdc:	335c      	adds	r3, #92	; 0x5c
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	212c      	movs	r1, #44	; 0x2c
 8006ce8:	fb01 f303 	mul.w	r3, r1, r3
 8006cec:	4413      	add	r3, r2
 8006cee:	3361      	adds	r3, #97	; 0x61
 8006cf0:	2203      	movs	r2, #3
 8006cf2:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	212c      	movs	r1, #44	; 0x2c
 8006cfa:	fb01 f303 	mul.w	r3, r1, r3
 8006cfe:	4413      	add	r3, r2
 8006d00:	333d      	adds	r3, #61	; 0x3d
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d112      	bne.n	8006d2e <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	212c      	movs	r1, #44	; 0x2c
 8006d0e:	fb01 f303 	mul.w	r3, r1, r3
 8006d12:	4413      	add	r3, r2
 8006d14:	333c      	adds	r3, #60	; 0x3c
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d108      	bne.n	8006d2e <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	212c      	movs	r1, #44	; 0x2c
 8006d22:	fb01 f303 	mul.w	r3, r1, r3
 8006d26:	4413      	add	r3, r2
 8006d28:	333d      	adds	r3, #61	; 0x3d
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	0151      	lsls	r1, r2, #5
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	440a      	add	r2, r1
 8006d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d48:	f043 0302 	orr.w	r3, r3, #2
 8006d4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	4611      	mov	r1, r2
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f005 fbb4 	bl	800c4c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	2310      	movs	r3, #16
 8006d6e:	6093      	str	r3, [r2, #8]
}
 8006d70:	e217      	b.n	80071a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d84:	2b80      	cmp	r3, #128	; 0x80
 8006d86:	d174      	bne.n	8006e72 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d121      	bne.n	8006dd4 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	212c      	movs	r1, #44	; 0x2c
 8006d96:	fb01 f303 	mul.w	r3, r1, r3
 8006d9a:	4413      	add	r3, r2
 8006d9c:	3361      	adds	r3, #97	; 0x61
 8006d9e:	2206      	movs	r2, #6
 8006da0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	0151      	lsls	r1, r2, #5
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	440a      	add	r2, r1
 8006db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dbc:	f043 0302 	orr.w	r3, r3, #2
 8006dc0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	b2d2      	uxtb	r2, r2
 8006dca:	4611      	mov	r1, r2
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f005 fb7a 	bl	800c4c6 <USB_HC_Halt>
 8006dd2:	e044      	b.n	8006e5e <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	212c      	movs	r1, #44	; 0x2c
 8006dda:	fb01 f303 	mul.w	r3, r1, r3
 8006dde:	4413      	add	r3, r2
 8006de0:	335c      	adds	r3, #92	; 0x5c
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	202c      	movs	r0, #44	; 0x2c
 8006dec:	fb00 f303 	mul.w	r3, r0, r3
 8006df0:	440b      	add	r3, r1
 8006df2:	335c      	adds	r3, #92	; 0x5c
 8006df4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	212c      	movs	r1, #44	; 0x2c
 8006dfc:	fb01 f303 	mul.w	r3, r1, r3
 8006e00:	4413      	add	r3, r2
 8006e02:	335c      	adds	r3, #92	; 0x5c
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d920      	bls.n	8006e4c <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	212c      	movs	r1, #44	; 0x2c
 8006e10:	fb01 f303 	mul.w	r3, r1, r3
 8006e14:	4413      	add	r3, r2
 8006e16:	335c      	adds	r3, #92	; 0x5c
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	212c      	movs	r1, #44	; 0x2c
 8006e22:	fb01 f303 	mul.w	r3, r1, r3
 8006e26:	4413      	add	r3, r2
 8006e28:	3360      	adds	r3, #96	; 0x60
 8006e2a:	2204      	movs	r2, #4
 8006e2c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	b2d9      	uxtb	r1, r3
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	202c      	movs	r0, #44	; 0x2c
 8006e38:	fb00 f303 	mul.w	r3, r0, r3
 8006e3c:	4413      	add	r3, r2
 8006e3e:	3360      	adds	r3, #96	; 0x60
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f007 fcfb 	bl	800e840 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006e4a:	e008      	b.n	8006e5e <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	212c      	movs	r1, #44	; 0x2c
 8006e52:	fb01 f303 	mul.w	r3, r1, r3
 8006e56:	4413      	add	r3, r2
 8006e58:	3360      	adds	r3, #96	; 0x60
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	2380      	movs	r3, #128	; 0x80
 8006e6e:	6093      	str	r3, [r2, #8]
}
 8006e70:	e197      	b.n	80071a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e88:	d134      	bne.n	8006ef4 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	0151      	lsls	r1, r2, #5
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	440a      	add	r2, r1
 8006ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ea4:	f043 0302 	orr.w	r3, r3, #2
 8006ea8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	b2d2      	uxtb	r2, r2
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f005 fb06 	bl	800c4c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	2310      	movs	r3, #16
 8006eca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ede:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	212c      	movs	r1, #44	; 0x2c
 8006ee6:	fb01 f303 	mul.w	r3, r1, r3
 8006eea:	4413      	add	r3, r2
 8006eec:	3361      	adds	r3, #97	; 0x61
 8006eee:	2208      	movs	r2, #8
 8006ef0:	701a      	strb	r2, [r3, #0]
}
 8006ef2:	e156      	b.n	80071a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	f040 814b 	bne.w	80071a2 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	0151      	lsls	r1, r2, #5
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	440a      	add	r2, r1
 8006f22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f26:	f023 0302 	bic.w	r3, r3, #2
 8006f2a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	212c      	movs	r1, #44	; 0x2c
 8006f32:	fb01 f303 	mul.w	r3, r1, r3
 8006f36:	4413      	add	r3, r2
 8006f38:	3361      	adds	r3, #97	; 0x61
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d179      	bne.n	8007034 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	212c      	movs	r1, #44	; 0x2c
 8006f46:	fb01 f303 	mul.w	r3, r1, r3
 8006f4a:	4413      	add	r3, r2
 8006f4c:	3360      	adds	r3, #96	; 0x60
 8006f4e:	2201      	movs	r2, #1
 8006f50:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	212c      	movs	r1, #44	; 0x2c
 8006f58:	fb01 f303 	mul.w	r3, r1, r3
 8006f5c:	4413      	add	r3, r2
 8006f5e:	333f      	adds	r3, #63	; 0x3f
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d00a      	beq.n	8006f7c <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	212c      	movs	r1, #44	; 0x2c
 8006f6c:	fb01 f303 	mul.w	r3, r1, r3
 8006f70:	4413      	add	r3, r2
 8006f72:	333f      	adds	r3, #63	; 0x3f
 8006f74:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	f040 80fc 	bne.w	8007174 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d142      	bne.n	800700a <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	212c      	movs	r1, #44	; 0x2c
 8006f8a:	fb01 f303 	mul.w	r3, r1, r3
 8006f8e:	4413      	add	r3, r2
 8006f90:	334c      	adds	r3, #76	; 0x4c
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 80ed 	beq.w	8007174 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	212c      	movs	r1, #44	; 0x2c
 8006fa0:	fb01 f303 	mul.w	r3, r1, r3
 8006fa4:	4413      	add	r3, r2
 8006fa6:	334c      	adds	r3, #76	; 0x4c
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6879      	ldr	r1, [r7, #4]
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	202c      	movs	r0, #44	; 0x2c
 8006fb0:	fb00 f202 	mul.w	r2, r0, r2
 8006fb4:	440a      	add	r2, r1
 8006fb6:	3240      	adds	r2, #64	; 0x40
 8006fb8:	8812      	ldrh	r2, [r2, #0]
 8006fba:	4413      	add	r3, r2
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	6879      	ldr	r1, [r7, #4]
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	202c      	movs	r0, #44	; 0x2c
 8006fc4:	fb00 f202 	mul.w	r2, r0, r2
 8006fc8:	440a      	add	r2, r1
 8006fca:	3240      	adds	r2, #64	; 0x40
 8006fcc:	8812      	ldrh	r2, [r2, #0]
 8006fce:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 80ca 	beq.w	8007174 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	212c      	movs	r1, #44	; 0x2c
 8006fe6:	fb01 f303 	mul.w	r3, r1, r3
 8006fea:	4413      	add	r3, r2
 8006fec:	3355      	adds	r3, #85	; 0x55
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	f083 0301 	eor.w	r3, r3, #1
 8006ff4:	b2d8      	uxtb	r0, r3
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	212c      	movs	r1, #44	; 0x2c
 8006ffc:	fb01 f303 	mul.w	r3, r1, r3
 8007000:	4413      	add	r3, r2
 8007002:	3355      	adds	r3, #85	; 0x55
 8007004:	4602      	mov	r2, r0
 8007006:	701a      	strb	r2, [r3, #0]
 8007008:	e0b4      	b.n	8007174 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	212c      	movs	r1, #44	; 0x2c
 8007010:	fb01 f303 	mul.w	r3, r1, r3
 8007014:	4413      	add	r3, r2
 8007016:	3355      	adds	r3, #85	; 0x55
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	f083 0301 	eor.w	r3, r3, #1
 800701e:	b2d8      	uxtb	r0, r3
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	212c      	movs	r1, #44	; 0x2c
 8007026:	fb01 f303 	mul.w	r3, r1, r3
 800702a:	4413      	add	r3, r2
 800702c:	3355      	adds	r3, #85	; 0x55
 800702e:	4602      	mov	r2, r0
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	e09f      	b.n	8007174 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	212c      	movs	r1, #44	; 0x2c
 800703a:	fb01 f303 	mul.w	r3, r1, r3
 800703e:	4413      	add	r3, r2
 8007040:	3361      	adds	r3, #97	; 0x61
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b03      	cmp	r3, #3
 8007046:	d109      	bne.n	800705c <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	212c      	movs	r1, #44	; 0x2c
 800704e:	fb01 f303 	mul.w	r3, r1, r3
 8007052:	4413      	add	r3, r2
 8007054:	3360      	adds	r3, #96	; 0x60
 8007056:	2202      	movs	r2, #2
 8007058:	701a      	strb	r2, [r3, #0]
 800705a:	e08b      	b.n	8007174 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	212c      	movs	r1, #44	; 0x2c
 8007062:	fb01 f303 	mul.w	r3, r1, r3
 8007066:	4413      	add	r3, r2
 8007068:	3361      	adds	r3, #97	; 0x61
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b04      	cmp	r3, #4
 800706e:	d109      	bne.n	8007084 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	212c      	movs	r1, #44	; 0x2c
 8007076:	fb01 f303 	mul.w	r3, r1, r3
 800707a:	4413      	add	r3, r2
 800707c:	3360      	adds	r3, #96	; 0x60
 800707e:	2202      	movs	r2, #2
 8007080:	701a      	strb	r2, [r3, #0]
 8007082:	e077      	b.n	8007174 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	212c      	movs	r1, #44	; 0x2c
 800708a:	fb01 f303 	mul.w	r3, r1, r3
 800708e:	4413      	add	r3, r2
 8007090:	3361      	adds	r3, #97	; 0x61
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b05      	cmp	r3, #5
 8007096:	d109      	bne.n	80070ac <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	212c      	movs	r1, #44	; 0x2c
 800709e:	fb01 f303 	mul.w	r3, r1, r3
 80070a2:	4413      	add	r3, r2
 80070a4:	3360      	adds	r3, #96	; 0x60
 80070a6:	2205      	movs	r2, #5
 80070a8:	701a      	strb	r2, [r3, #0]
 80070aa:	e063      	b.n	8007174 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	212c      	movs	r1, #44	; 0x2c
 80070b2:	fb01 f303 	mul.w	r3, r1, r3
 80070b6:	4413      	add	r3, r2
 80070b8:	3361      	adds	r3, #97	; 0x61
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b06      	cmp	r3, #6
 80070be:	d009      	beq.n	80070d4 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	212c      	movs	r1, #44	; 0x2c
 80070c6:	fb01 f303 	mul.w	r3, r1, r3
 80070ca:	4413      	add	r3, r2
 80070cc:	3361      	adds	r3, #97	; 0x61
 80070ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80070d0:	2b08      	cmp	r3, #8
 80070d2:	d14f      	bne.n	8007174 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	212c      	movs	r1, #44	; 0x2c
 80070da:	fb01 f303 	mul.w	r3, r1, r3
 80070de:	4413      	add	r3, r2
 80070e0:	335c      	adds	r3, #92	; 0x5c
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	202c      	movs	r0, #44	; 0x2c
 80070ec:	fb00 f303 	mul.w	r3, r0, r3
 80070f0:	440b      	add	r3, r1
 80070f2:	335c      	adds	r3, #92	; 0x5c
 80070f4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	212c      	movs	r1, #44	; 0x2c
 80070fc:	fb01 f303 	mul.w	r3, r1, r3
 8007100:	4413      	add	r3, r2
 8007102:	335c      	adds	r3, #92	; 0x5c
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b02      	cmp	r3, #2
 8007108:	d912      	bls.n	8007130 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	212c      	movs	r1, #44	; 0x2c
 8007110:	fb01 f303 	mul.w	r3, r1, r3
 8007114:	4413      	add	r3, r2
 8007116:	335c      	adds	r3, #92	; 0x5c
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	212c      	movs	r1, #44	; 0x2c
 8007122:	fb01 f303 	mul.w	r3, r1, r3
 8007126:	4413      	add	r3, r2
 8007128:	3360      	adds	r3, #96	; 0x60
 800712a:	2204      	movs	r2, #4
 800712c:	701a      	strb	r2, [r3, #0]
 800712e:	e021      	b.n	8007174 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	212c      	movs	r1, #44	; 0x2c
 8007136:	fb01 f303 	mul.w	r3, r1, r3
 800713a:	4413      	add	r3, r2
 800713c:	3360      	adds	r3, #96	; 0x60
 800713e:	2202      	movs	r2, #2
 8007140:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	4413      	add	r3, r2
 800714a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007158:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007160:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	4413      	add	r3, r2
 800716a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716e:	461a      	mov	r2, r3
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	4413      	add	r3, r2
 800717c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007180:	461a      	mov	r2, r3
 8007182:	2302      	movs	r3, #2
 8007184:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	b2d9      	uxtb	r1, r3
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	202c      	movs	r0, #44	; 0x2c
 8007190:	fb00 f303 	mul.w	r3, r0, r3
 8007194:	4413      	add	r3, r2
 8007196:	3360      	adds	r3, #96	; 0x60
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f007 fb4f 	bl	800e840 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80071a2:	bf00      	nop
 80071a4:	3720      	adds	r7, #32
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b08a      	sub	sp, #40	; 0x28
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	0c5b      	lsrs	r3, r3, #17
 80071d0:	f003 030f 	and.w	r3, r3, #15
 80071d4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	091b      	lsrs	r3, r3, #4
 80071da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071de:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d004      	beq.n	80071f0 <HCD_RXQLVL_IRQHandler+0x46>
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b05      	cmp	r3, #5
 80071ea:	f000 80a9 	beq.w	8007340 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80071ee:	e0aa      	b.n	8007346 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 80a6 	beq.w	8007344 <HCD_RXQLVL_IRQHandler+0x19a>
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	212c      	movs	r1, #44	; 0x2c
 80071fe:	fb01 f303 	mul.w	r3, r1, r3
 8007202:	4413      	add	r3, r2
 8007204:	3344      	adds	r3, #68	; 0x44
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 809b 	beq.w	8007344 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	212c      	movs	r1, #44	; 0x2c
 8007214:	fb01 f303 	mul.w	r3, r1, r3
 8007218:	4413      	add	r3, r2
 800721a:	3350      	adds	r3, #80	; 0x50
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	441a      	add	r2, r3
 8007222:	6879      	ldr	r1, [r7, #4]
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	202c      	movs	r0, #44	; 0x2c
 8007228:	fb00 f303 	mul.w	r3, r0, r3
 800722c:	440b      	add	r3, r1
 800722e:	334c      	adds	r3, #76	; 0x4c
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	429a      	cmp	r2, r3
 8007234:	d87a      	bhi.n	800732c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6818      	ldr	r0, [r3, #0]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	212c      	movs	r1, #44	; 0x2c
 8007240:	fb01 f303 	mul.w	r3, r1, r3
 8007244:	4413      	add	r3, r2
 8007246:	3344      	adds	r3, #68	; 0x44
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	b292      	uxth	r2, r2
 800724e:	4619      	mov	r1, r3
 8007250:	f004 fcd7 	bl	800bc02 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	212c      	movs	r1, #44	; 0x2c
 800725a:	fb01 f303 	mul.w	r3, r1, r3
 800725e:	4413      	add	r3, r2
 8007260:	3344      	adds	r3, #68	; 0x44
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	441a      	add	r2, r3
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	202c      	movs	r0, #44	; 0x2c
 800726e:	fb00 f303 	mul.w	r3, r0, r3
 8007272:	440b      	add	r3, r1
 8007274:	3344      	adds	r3, #68	; 0x44
 8007276:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	212c      	movs	r1, #44	; 0x2c
 800727e:	fb01 f303 	mul.w	r3, r1, r3
 8007282:	4413      	add	r3, r2
 8007284:	3350      	adds	r3, #80	; 0x50
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	441a      	add	r2, r3
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	202c      	movs	r0, #44	; 0x2c
 8007292:	fb00 f303 	mul.w	r3, r0, r3
 8007296:	440b      	add	r3, r1
 8007298:	3350      	adds	r3, #80	; 0x50
 800729a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	0cdb      	lsrs	r3, r3, #19
 80072ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072b0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	212c      	movs	r1, #44	; 0x2c
 80072b8:	fb01 f303 	mul.w	r3, r1, r3
 80072bc:	4413      	add	r3, r2
 80072be:	3340      	adds	r3, #64	; 0x40
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d13c      	bne.n	8007344 <HCD_RXQLVL_IRQHandler+0x19a>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d039      	beq.n	8007344 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072e6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072ee:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fc:	461a      	mov	r2, r3
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	212c      	movs	r1, #44	; 0x2c
 8007308:	fb01 f303 	mul.w	r3, r1, r3
 800730c:	4413      	add	r3, r2
 800730e:	3354      	adds	r3, #84	; 0x54
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	f083 0301 	eor.w	r3, r3, #1
 8007316:	b2d8      	uxtb	r0, r3
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	212c      	movs	r1, #44	; 0x2c
 800731e:	fb01 f303 	mul.w	r3, r1, r3
 8007322:	4413      	add	r3, r2
 8007324:	3354      	adds	r3, #84	; 0x54
 8007326:	4602      	mov	r2, r0
 8007328:	701a      	strb	r2, [r3, #0]
      break;
 800732a:	e00b      	b.n	8007344 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	212c      	movs	r1, #44	; 0x2c
 8007332:	fb01 f303 	mul.w	r3, r1, r3
 8007336:	4413      	add	r3, r2
 8007338:	3360      	adds	r3, #96	; 0x60
 800733a:	2204      	movs	r2, #4
 800733c:	701a      	strb	r2, [r3, #0]
      break;
 800733e:	e001      	b.n	8007344 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007340:	bf00      	nop
 8007342:	e000      	b.n	8007346 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007344:	bf00      	nop
  }
}
 8007346:	bf00      	nop
 8007348:	3728      	adds	r7, #40	; 0x28
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b086      	sub	sp, #24
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800737a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b02      	cmp	r3, #2
 8007384:	d10b      	bne.n	800739e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b01      	cmp	r3, #1
 800738e:	d102      	bne.n	8007396 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f007 fa39 	bl	800e808 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f043 0302 	orr.w	r3, r3, #2
 800739c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d132      	bne.n	800740e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f043 0308 	orr.w	r3, r3, #8
 80073ae:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f003 0304 	and.w	r3, r3, #4
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d126      	bne.n	8007408 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d113      	bne.n	80073ea <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80073c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073cc:	d106      	bne.n	80073dc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2102      	movs	r1, #2
 80073d4:	4618      	mov	r0, r3
 80073d6:	f004 fd4f 	bl	800be78 <USB_InitFSLSPClkSel>
 80073da:	e011      	b.n	8007400 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2101      	movs	r1, #1
 80073e2:	4618      	mov	r0, r3
 80073e4:	f004 fd48 	bl	800be78 <USB_InitFSLSPClkSel>
 80073e8:	e00a      	b.n	8007400 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d106      	bne.n	8007400 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073f8:	461a      	mov	r2, r3
 80073fa:	f64e 2360 	movw	r3, #60000	; 0xea60
 80073fe:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f007 fa2b 	bl	800e85c <HAL_HCD_PortEnabled_Callback>
 8007406:	e002      	b.n	800740e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f007 fa35 	bl	800e878 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b20      	cmp	r3, #32
 8007416:	d103      	bne.n	8007420 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f043 0320 	orr.w	r3, r3, #32
 800741e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007426:	461a      	mov	r2, r3
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	6013      	str	r3, [r2, #0]
}
 800742c:	bf00      	nop
 800742e:	3718      	adds	r7, #24
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e12b      	b.n	800769e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d106      	bne.n	8007460 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7fa fba0 	bl	8001ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2224      	movs	r2, #36	; 0x24
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f022 0201 	bic.w	r2, r2, #1
 8007476:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007486:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007496:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007498:	f002 fcec 	bl	8009e74 <HAL_RCC_GetPCLK1Freq>
 800749c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	4a81      	ldr	r2, [pc, #516]	; (80076a8 <HAL_I2C_Init+0x274>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d807      	bhi.n	80074b8 <HAL_I2C_Init+0x84>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4a80      	ldr	r2, [pc, #512]	; (80076ac <HAL_I2C_Init+0x278>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	bf94      	ite	ls
 80074b0:	2301      	movls	r3, #1
 80074b2:	2300      	movhi	r3, #0
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	e006      	b.n	80074c6 <HAL_I2C_Init+0x92>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4a7d      	ldr	r2, [pc, #500]	; (80076b0 <HAL_I2C_Init+0x27c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	bf94      	ite	ls
 80074c0:	2301      	movls	r3, #1
 80074c2:	2300      	movhi	r3, #0
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e0e7      	b.n	800769e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4a78      	ldr	r2, [pc, #480]	; (80076b4 <HAL_I2C_Init+0x280>)
 80074d2:	fba2 2303 	umull	r2, r3, r2, r3
 80074d6:	0c9b      	lsrs	r3, r3, #18
 80074d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	4a6a      	ldr	r2, [pc, #424]	; (80076a8 <HAL_I2C_Init+0x274>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d802      	bhi.n	8007508 <HAL_I2C_Init+0xd4>
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	3301      	adds	r3, #1
 8007506:	e009      	b.n	800751c <HAL_I2C_Init+0xe8>
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800750e:	fb02 f303 	mul.w	r3, r2, r3
 8007512:	4a69      	ldr	r2, [pc, #420]	; (80076b8 <HAL_I2C_Init+0x284>)
 8007514:	fba2 2303 	umull	r2, r3, r2, r3
 8007518:	099b      	lsrs	r3, r3, #6
 800751a:	3301      	adds	r3, #1
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	6812      	ldr	r2, [r2, #0]
 8007520:	430b      	orrs	r3, r1
 8007522:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800752e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	495c      	ldr	r1, [pc, #368]	; (80076a8 <HAL_I2C_Init+0x274>)
 8007538:	428b      	cmp	r3, r1
 800753a:	d819      	bhi.n	8007570 <HAL_I2C_Init+0x13c>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	1e59      	subs	r1, r3, #1
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	fbb1 f3f3 	udiv	r3, r1, r3
 800754a:	1c59      	adds	r1, r3, #1
 800754c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007550:	400b      	ands	r3, r1
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00a      	beq.n	800756c <HAL_I2C_Init+0x138>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	1e59      	subs	r1, r3, #1
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	fbb1 f3f3 	udiv	r3, r1, r3
 8007564:	3301      	adds	r3, #1
 8007566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800756a:	e051      	b.n	8007610 <HAL_I2C_Init+0x1dc>
 800756c:	2304      	movs	r3, #4
 800756e:	e04f      	b.n	8007610 <HAL_I2C_Init+0x1dc>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d111      	bne.n	800759c <HAL_I2C_Init+0x168>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	1e58      	subs	r0, r3, #1
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6859      	ldr	r1, [r3, #4]
 8007580:	460b      	mov	r3, r1
 8007582:	005b      	lsls	r3, r3, #1
 8007584:	440b      	add	r3, r1
 8007586:	fbb0 f3f3 	udiv	r3, r0, r3
 800758a:	3301      	adds	r3, #1
 800758c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007590:	2b00      	cmp	r3, #0
 8007592:	bf0c      	ite	eq
 8007594:	2301      	moveq	r3, #1
 8007596:	2300      	movne	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	e012      	b.n	80075c2 <HAL_I2C_Init+0x18e>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	1e58      	subs	r0, r3, #1
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6859      	ldr	r1, [r3, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	440b      	add	r3, r1
 80075aa:	0099      	lsls	r1, r3, #2
 80075ac:	440b      	add	r3, r1
 80075ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80075b2:	3301      	adds	r3, #1
 80075b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	bf0c      	ite	eq
 80075bc:	2301      	moveq	r3, #1
 80075be:	2300      	movne	r3, #0
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <HAL_I2C_Init+0x196>
 80075c6:	2301      	movs	r3, #1
 80075c8:	e022      	b.n	8007610 <HAL_I2C_Init+0x1dc>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10e      	bne.n	80075f0 <HAL_I2C_Init+0x1bc>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	1e58      	subs	r0, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6859      	ldr	r1, [r3, #4]
 80075da:	460b      	mov	r3, r1
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	440b      	add	r3, r1
 80075e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80075e4:	3301      	adds	r3, #1
 80075e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ee:	e00f      	b.n	8007610 <HAL_I2C_Init+0x1dc>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	1e58      	subs	r0, r3, #1
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6859      	ldr	r1, [r3, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	440b      	add	r3, r1
 80075fe:	0099      	lsls	r1, r3, #2
 8007600:	440b      	add	r3, r1
 8007602:	fbb0 f3f3 	udiv	r3, r0, r3
 8007606:	3301      	adds	r3, #1
 8007608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800760c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	6809      	ldr	r1, [r1, #0]
 8007614:	4313      	orrs	r3, r2
 8007616:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	69da      	ldr	r2, [r3, #28]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	431a      	orrs	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800763e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	6911      	ldr	r1, [r2, #16]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	68d2      	ldr	r2, [r2, #12]
 800764a:	4311      	orrs	r1, r2
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6812      	ldr	r2, [r2, #0]
 8007650:	430b      	orrs	r3, r1
 8007652:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	695a      	ldr	r2, [r3, #20]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	431a      	orrs	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	000186a0 	.word	0x000186a0
 80076ac:	001e847f 	.word	0x001e847f
 80076b0:	003d08ff 	.word	0x003d08ff
 80076b4:	431bde83 	.word	0x431bde83
 80076b8:	10624dd3 	.word	0x10624dd3

080076bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af02      	add	r7, sp, #8
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	607a      	str	r2, [r7, #4]
 80076c6:	461a      	mov	r2, r3
 80076c8:	460b      	mov	r3, r1
 80076ca:	817b      	strh	r3, [r7, #10]
 80076cc:	4613      	mov	r3, r2
 80076ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076d0:	f7fd fe22 	bl	8005318 <HAL_GetTick>
 80076d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b20      	cmp	r3, #32
 80076e0:	f040 80e0 	bne.w	80078a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	2319      	movs	r3, #25
 80076ea:	2201      	movs	r2, #1
 80076ec:	4970      	ldr	r1, [pc, #448]	; (80078b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f001 f8f6 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80076fa:	2302      	movs	r3, #2
 80076fc:	e0d3      	b.n	80078a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007704:	2b01      	cmp	r3, #1
 8007706:	d101      	bne.n	800770c <HAL_I2C_Master_Transmit+0x50>
 8007708:	2302      	movs	r3, #2
 800770a:	e0cc      	b.n	80078a6 <HAL_I2C_Master_Transmit+0x1ea>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b01      	cmp	r3, #1
 8007720:	d007      	beq.n	8007732 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f042 0201 	orr.w	r2, r2, #1
 8007730:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007740:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2221      	movs	r2, #33	; 0x21
 8007746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2210      	movs	r2, #16
 800774e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	893a      	ldrh	r2, [r7, #8]
 8007762:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	4a50      	ldr	r2, [pc, #320]	; (80078b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8007772:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007774:	8979      	ldrh	r1, [r7, #10]
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	6a3a      	ldr	r2, [r7, #32]
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 fde2 	bl	8008344 <I2C_MasterRequestWrite>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e08d      	b.n	80078a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800778a:	2300      	movs	r3, #0
 800778c:	613b      	str	r3, [r7, #16]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	613b      	str	r3, [r7, #16]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	613b      	str	r3, [r7, #16]
 800779e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80077a0:	e066      	b.n	8007870 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	6a39      	ldr	r1, [r7, #32]
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f001 f970 	bl	8008a8c <I2C_WaitOnTXEFlagUntilTimeout>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00d      	beq.n	80077ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	d107      	bne.n	80077ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e06b      	b.n	80078a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	781a      	ldrb	r2, [r3, #0]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077de:	1c5a      	adds	r2, r3, #1
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	3b01      	subs	r3, #1
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f6:	3b01      	subs	r3, #1
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	2b04      	cmp	r3, #4
 800780a:	d11b      	bne.n	8007844 <HAL_I2C_Master_Transmit+0x188>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007810:	2b00      	cmp	r3, #0
 8007812:	d017      	beq.n	8007844 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007818:	781a      	ldrb	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782e:	b29b      	uxth	r3, r3
 8007830:	3b01      	subs	r3, #1
 8007832:	b29a      	uxth	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800783c:	3b01      	subs	r3, #1
 800783e:	b29a      	uxth	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	6a39      	ldr	r1, [r7, #32]
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f001 f960 	bl	8008b0e <I2C_WaitOnBTFFlagUntilTimeout>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00d      	beq.n	8007870 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007858:	2b04      	cmp	r3, #4
 800785a:	d107      	bne.n	800786c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800786a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e01a      	b.n	80078a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007874:	2b00      	cmp	r3, #0
 8007876:	d194      	bne.n	80077a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2220      	movs	r2, #32
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	e000      	b.n	80078a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80078a4:	2302      	movs	r3, #2
  }
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	00100002 	.word	0x00100002
 80078b4:	ffff0000 	.word	0xffff0000

080078b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08c      	sub	sp, #48	; 0x30
 80078bc:	af02      	add	r7, sp, #8
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	607a      	str	r2, [r7, #4]
 80078c2:	461a      	mov	r2, r3
 80078c4:	460b      	mov	r3, r1
 80078c6:	817b      	strh	r3, [r7, #10]
 80078c8:	4613      	mov	r3, r2
 80078ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078cc:	f7fd fd24 	bl	8005318 <HAL_GetTick>
 80078d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b20      	cmp	r3, #32
 80078dc:	f040 820b 	bne.w	8007cf6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	2319      	movs	r3, #25
 80078e6:	2201      	movs	r2, #1
 80078e8:	497c      	ldr	r1, [pc, #496]	; (8007adc <HAL_I2C_Master_Receive+0x224>)
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 fff8 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80078f6:	2302      	movs	r3, #2
 80078f8:	e1fe      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007900:	2b01      	cmp	r3, #1
 8007902:	d101      	bne.n	8007908 <HAL_I2C_Master_Receive+0x50>
 8007904:	2302      	movs	r3, #2
 8007906:	e1f7      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x440>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b01      	cmp	r3, #1
 800791c:	d007      	beq.n	800792e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f042 0201 	orr.w	r2, r2, #1
 800792c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800793c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2222      	movs	r2, #34	; 0x22
 8007942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2210      	movs	r2, #16
 800794a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	893a      	ldrh	r2, [r7, #8]
 800795e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007964:	b29a      	uxth	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	4a5c      	ldr	r2, [pc, #368]	; (8007ae0 <HAL_I2C_Master_Receive+0x228>)
 800796e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007970:	8979      	ldrh	r1, [r7, #10]
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 fd66 	bl	8008448 <I2C_MasterRequestRead>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e1b8      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800798a:	2b00      	cmp	r3, #0
 800798c:	d113      	bne.n	80079b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800798e:	2300      	movs	r3, #0
 8007990:	623b      	str	r3, [r7, #32]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	623b      	str	r3, [r7, #32]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	623b      	str	r3, [r7, #32]
 80079a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	e18c      	b.n	8007cd0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d11b      	bne.n	80079f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079ce:	2300      	movs	r3, #0
 80079d0:	61fb      	str	r3, [r7, #28]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	61fb      	str	r3, [r7, #28]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	61fb      	str	r3, [r7, #28]
 80079e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	e16c      	b.n	8007cd0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d11b      	bne.n	8007a36 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a1e:	2300      	movs	r3, #0
 8007a20:	61bb      	str	r3, [r7, #24]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	61bb      	str	r3, [r7, #24]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	e14c      	b.n	8007cd0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a46:	2300      	movs	r3, #0
 8007a48:	617b      	str	r3, [r7, #20]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	695b      	ldr	r3, [r3, #20]
 8007a50:	617b      	str	r3, [r7, #20]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007a5c:	e138      	b.n	8007cd0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	f200 80f1 	bhi.w	8007c4a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d123      	bne.n	8007ab8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f001 f88b 	bl	8008b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e139      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	691a      	ldr	r2, [r3, #16]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ab6:	e10b      	b.n	8007cd0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d14e      	bne.n	8007b5e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	4906      	ldr	r1, [pc, #24]	; (8007ae4 <HAL_I2C_Master_Receive+0x22c>)
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 ff08 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d008      	beq.n	8007ae8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e10e      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x440>
 8007ada:	bf00      	nop
 8007adc:	00100002 	.word	0x00100002
 8007ae0:	ffff0000 	.word	0xffff0000
 8007ae4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007af6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	691a      	ldr	r2, [r3, #16]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	b2d2      	uxtb	r2, r2
 8007b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b14:	3b01      	subs	r3, #1
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	3b01      	subs	r3, #1
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	691a      	ldr	r2, [r3, #16]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	b2d2      	uxtb	r2, r2
 8007b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	1c5a      	adds	r2, r3, #1
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b46:	3b01      	subs	r3, #1
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	3b01      	subs	r3, #1
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b5c:	e0b8      	b.n	8007cd0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b64:	2200      	movs	r2, #0
 8007b66:	4966      	ldr	r1, [pc, #408]	; (8007d00 <HAL_I2C_Master_Receive+0x448>)
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f000 feb9 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e0bf      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	691a      	ldr	r2, [r3, #16]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b92:	b2d2      	uxtb	r2, r2
 8007b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	494f      	ldr	r1, [pc, #316]	; (8007d00 <HAL_I2C_Master_Receive+0x448>)
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 fe8b 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e091      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	691a      	ldr	r2, [r3, #16]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	b2d2      	uxtb	r2, r2
 8007bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c00:	3b01      	subs	r3, #1
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	691a      	ldr	r2, [r3, #16]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	b2d2      	uxtb	r2, r2
 8007c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c32:	3b01      	subs	r3, #1
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	3b01      	subs	r3, #1
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c48:	e042      	b.n	8007cd0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 ff9e 	bl	8008b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e04c      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	691a      	ldr	r2, [r3, #16]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c68:	b2d2      	uxtb	r2, r2
 8007c6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c70:	1c5a      	adds	r2, r3, #1
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	f003 0304 	and.w	r3, r3, #4
 8007c9a:	2b04      	cmp	r3, #4
 8007c9c:	d118      	bne.n	8007cd0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	691a      	ldr	r2, [r3, #16]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	b2d2      	uxtb	r2, r2
 8007caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f47f aec2 	bne.w	8007a5e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	e000      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007cf6:	2302      	movs	r3, #2
  }
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3728      	adds	r7, #40	; 0x28
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	00010004 	.word	0x00010004

08007d04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af02      	add	r7, sp, #8
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	4611      	mov	r1, r2
 8007d10:	461a      	mov	r2, r3
 8007d12:	4603      	mov	r3, r0
 8007d14:	817b      	strh	r3, [r7, #10]
 8007d16:	460b      	mov	r3, r1
 8007d18:	813b      	strh	r3, [r7, #8]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d1e:	f7fd fafb 	bl	8005318 <HAL_GetTick>
 8007d22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b20      	cmp	r3, #32
 8007d2e:	f040 80d9 	bne.w	8007ee4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	2319      	movs	r3, #25
 8007d38:	2201      	movs	r2, #1
 8007d3a:	496d      	ldr	r1, [pc, #436]	; (8007ef0 <HAL_I2C_Mem_Write+0x1ec>)
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 fdcf 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007d48:	2302      	movs	r3, #2
 8007d4a:	e0cc      	b.n	8007ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d101      	bne.n	8007d5a <HAL_I2C_Mem_Write+0x56>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e0c5      	b.n	8007ee6 <HAL_I2C_Mem_Write+0x1e2>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d007      	beq.n	8007d80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f042 0201 	orr.w	r2, r2, #1
 8007d7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2221      	movs	r2, #33	; 0x21
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2240      	movs	r2, #64	; 0x40
 8007d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6a3a      	ldr	r2, [r7, #32]
 8007daa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4a4d      	ldr	r2, [pc, #308]	; (8007ef4 <HAL_I2C_Mem_Write+0x1f0>)
 8007dc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007dc2:	88f8      	ldrh	r0, [r7, #6]
 8007dc4:	893a      	ldrh	r2, [r7, #8]
 8007dc6:	8979      	ldrh	r1, [r7, #10]
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	9301      	str	r3, [sp, #4]
 8007dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 fc06 	bl	80085e4 <I2C_RequestMemoryWrite>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d052      	beq.n	8007e84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e081      	b.n	8007ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 fe50 	bl	8008a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00d      	beq.n	8007e0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	2b04      	cmp	r3, #4
 8007df8:	d107      	bne.n	8007e0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e06b      	b.n	8007ee6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e12:	781a      	ldrb	r2, [r3, #0]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	1c5a      	adds	r2, r3, #1
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	f003 0304 	and.w	r3, r3, #4
 8007e48:	2b04      	cmp	r3, #4
 8007e4a:	d11b      	bne.n	8007e84 <HAL_I2C_Mem_Write+0x180>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d017      	beq.n	8007e84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	781a      	ldrb	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1aa      	bne.n	8007de2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 fe3c 	bl	8008b0e <I2C_WaitOnBTFFlagUntilTimeout>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00d      	beq.n	8007eb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	d107      	bne.n	8007eb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e016      	b.n	8007ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2220      	movs	r2, #32
 8007ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	e000      	b.n	8007ee6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007ee4:	2302      	movs	r3, #2
  }
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	00100002 	.word	0x00100002
 8007ef4:	ffff0000 	.word	0xffff0000

08007ef8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08c      	sub	sp, #48	; 0x30
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	4608      	mov	r0, r1
 8007f02:	4611      	mov	r1, r2
 8007f04:	461a      	mov	r2, r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	817b      	strh	r3, [r7, #10]
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	813b      	strh	r3, [r7, #8]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f12:	f7fd fa01 	bl	8005318 <HAL_GetTick>
 8007f16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b20      	cmp	r3, #32
 8007f22:	f040 8208 	bne.w	8008336 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	2319      	movs	r3, #25
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	497b      	ldr	r1, [pc, #492]	; (800811c <HAL_I2C_Mem_Read+0x224>)
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 fcd5 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	e1fb      	b.n	8008338 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d101      	bne.n	8007f4e <HAL_I2C_Mem_Read+0x56>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e1f4      	b.n	8008338 <HAL_I2C_Mem_Read+0x440>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d007      	beq.n	8007f74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f042 0201 	orr.w	r2, r2, #1
 8007f72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2222      	movs	r2, #34	; 0x22
 8007f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2240      	movs	r2, #64	; 0x40
 8007f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4a5b      	ldr	r2, [pc, #364]	; (8008120 <HAL_I2C_Mem_Read+0x228>)
 8007fb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fb6:	88f8      	ldrh	r0, [r7, #6]
 8007fb8:	893a      	ldrh	r2, [r7, #8]
 8007fba:	8979      	ldrh	r1, [r7, #10]
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	9301      	str	r3, [sp, #4]
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 fba2 	bl	8008710 <I2C_RequestMemoryRead>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e1b0      	b.n	8008338 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d113      	bne.n	8008006 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fde:	2300      	movs	r3, #0
 8007fe0:	623b      	str	r3, [r7, #32]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	695b      	ldr	r3, [r3, #20]
 8007fe8:	623b      	str	r3, [r7, #32]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	623b      	str	r3, [r7, #32]
 8007ff2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	e184      	b.n	8008310 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800800a:	2b01      	cmp	r3, #1
 800800c:	d11b      	bne.n	8008046 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800801c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800801e:	2300      	movs	r3, #0
 8008020:	61fb      	str	r3, [r7, #28]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	61fb      	str	r3, [r7, #28]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	61fb      	str	r3, [r7, #28]
 8008032:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	e164      	b.n	8008310 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800804a:	2b02      	cmp	r3, #2
 800804c:	d11b      	bne.n	8008086 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800805c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800806c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800806e:	2300      	movs	r3, #0
 8008070:	61bb      	str	r3, [r7, #24]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	61bb      	str	r3, [r7, #24]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	61bb      	str	r3, [r7, #24]
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	e144      	b.n	8008310 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008086:	2300      	movs	r3, #0
 8008088:	617b      	str	r3, [r7, #20]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	617b      	str	r3, [r7, #20]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	617b      	str	r3, [r7, #20]
 800809a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800809c:	e138      	b.n	8008310 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	f200 80f1 	bhi.w	800828a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d123      	bne.n	80080f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f000 fd6b 	bl	8008b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e139      	b.n	8008338 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691a      	ldr	r2, [r3, #16]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ce:	b2d2      	uxtb	r2, r2
 80080d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e0:	3b01      	subs	r3, #1
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	3b01      	subs	r3, #1
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080f6:	e10b      	b.n	8008310 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d14e      	bne.n	800819e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008106:	2200      	movs	r2, #0
 8008108:	4906      	ldr	r1, [pc, #24]	; (8008124 <HAL_I2C_Mem_Read+0x22c>)
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 fbe8 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d008      	beq.n	8008128 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e10e      	b.n	8008338 <HAL_I2C_Mem_Read+0x440>
 800811a:	bf00      	nop
 800811c:	00100002 	.word	0x00100002
 8008120:	ffff0000 	.word	0xffff0000
 8008124:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008136:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	691a      	ldr	r2, [r3, #16]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008142:	b2d2      	uxtb	r2, r2
 8008144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	1c5a      	adds	r2, r3, #1
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008154:	3b01      	subs	r3, #1
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008160:	b29b      	uxth	r3, r3
 8008162:	3b01      	subs	r3, #1
 8008164:	b29a      	uxth	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	691a      	ldr	r2, [r3, #16]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	b2d2      	uxtb	r2, r2
 8008176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008186:	3b01      	subs	r3, #1
 8008188:	b29a      	uxth	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008192:	b29b      	uxth	r3, r3
 8008194:	3b01      	subs	r3, #1
 8008196:	b29a      	uxth	r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800819c:	e0b8      	b.n	8008310 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a4:	2200      	movs	r2, #0
 80081a6:	4966      	ldr	r1, [pc, #408]	; (8008340 <HAL_I2C_Mem_Read+0x448>)
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 fb99 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e0bf      	b.n	8008338 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	691a      	ldr	r2, [r3, #16]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	b2d2      	uxtb	r2, r2
 80081d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	3b01      	subs	r3, #1
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008200:	2200      	movs	r2, #0
 8008202:	494f      	ldr	r1, [pc, #316]	; (8008340 <HAL_I2C_Mem_Read+0x448>)
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 fb6b 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e091      	b.n	8008338 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	691a      	ldr	r2, [r3, #16]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822e:	b2d2      	uxtb	r2, r2
 8008230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	1c5a      	adds	r2, r3, #1
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008240:	3b01      	subs	r3, #1
 8008242:	b29a      	uxth	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800824c:	b29b      	uxth	r3, r3
 800824e:	3b01      	subs	r3, #1
 8008250:	b29a      	uxth	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	691a      	ldr	r2, [r3, #16]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	b2d2      	uxtb	r2, r2
 8008262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	1c5a      	adds	r2, r3, #1
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008272:	3b01      	subs	r3, #1
 8008274:	b29a      	uxth	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800827e:	b29b      	uxth	r3, r3
 8008280:	3b01      	subs	r3, #1
 8008282:	b29a      	uxth	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008288:	e042      	b.n	8008310 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800828a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800828c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 fc7e 	bl	8008b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e04c      	b.n	8008338 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	691a      	ldr	r2, [r3, #16]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ba:	3b01      	subs	r3, #1
 80082bc:	b29a      	uxth	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	3b01      	subs	r3, #1
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	f003 0304 	and.w	r3, r3, #4
 80082da:	2b04      	cmp	r3, #4
 80082dc:	d118      	bne.n	8008310 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	691a      	ldr	r2, [r3, #16]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	b2d2      	uxtb	r2, r2
 80082ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	1c5a      	adds	r2, r3, #1
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082fa:	3b01      	subs	r3, #1
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008306:	b29b      	uxth	r3, r3
 8008308:	3b01      	subs	r3, #1
 800830a:	b29a      	uxth	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008314:	2b00      	cmp	r3, #0
 8008316:	f47f aec2 	bne.w	800809e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2220      	movs	r2, #32
 800831e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	e000      	b.n	8008338 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008336:	2302      	movs	r3, #2
  }
}
 8008338:	4618      	mov	r0, r3
 800833a:	3728      	adds	r7, #40	; 0x28
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	00010004 	.word	0x00010004

08008344 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b088      	sub	sp, #32
 8008348:	af02      	add	r7, sp, #8
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	607a      	str	r2, [r7, #4]
 800834e:	603b      	str	r3, [r7, #0]
 8008350:	460b      	mov	r3, r1
 8008352:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008358:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	2b08      	cmp	r3, #8
 800835e:	d006      	beq.n	800836e <I2C_MasterRequestWrite+0x2a>
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d003      	beq.n	800836e <I2C_MasterRequestWrite+0x2a>
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800836c:	d108      	bne.n	8008380 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	e00b      	b.n	8008398 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008384:	2b12      	cmp	r3, #18
 8008386:	d107      	bne.n	8008398 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008396:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 fa9b 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00d      	beq.n	80083cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083be:	d103      	bne.n	80083c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e035      	b.n	8008438 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083d4:	d108      	bne.n	80083e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80083d6:	897b      	ldrh	r3, [r7, #10]
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	461a      	mov	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80083e4:	611a      	str	r2, [r3, #16]
 80083e6:	e01b      	b.n	8008420 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80083e8:	897b      	ldrh	r3, [r7, #10]
 80083ea:	11db      	asrs	r3, r3, #7
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	f003 0306 	and.w	r3, r3, #6
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f063 030f 	orn	r3, r3, #15
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	490e      	ldr	r1, [pc, #56]	; (8008440 <I2C_MasterRequestWrite+0xfc>)
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f000 fac1 	bl	800898e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	e010      	b.n	8008438 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008416:	897b      	ldrh	r3, [r7, #10]
 8008418:	b2da      	uxtb	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	4907      	ldr	r1, [pc, #28]	; (8008444 <I2C_MasterRequestWrite+0x100>)
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 fab1 	bl	800898e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e000      	b.n	8008438 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	00010008 	.word	0x00010008
 8008444:	00010002 	.word	0x00010002

08008448 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b088      	sub	sp, #32
 800844c:	af02      	add	r7, sp, #8
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	607a      	str	r2, [r7, #4]
 8008452:	603b      	str	r3, [r7, #0]
 8008454:	460b      	mov	r3, r1
 8008456:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800846c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b08      	cmp	r3, #8
 8008472:	d006      	beq.n	8008482 <I2C_MasterRequestRead+0x3a>
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d003      	beq.n	8008482 <I2C_MasterRequestRead+0x3a>
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008480:	d108      	bne.n	8008494 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	e00b      	b.n	80084ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008498:	2b11      	cmp	r3, #17
 800849a:	d107      	bne.n	80084ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 fa11 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00d      	beq.n	80084e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084d2:	d103      	bne.n	80084dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	e079      	b.n	80085d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084e8:	d108      	bne.n	80084fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80084ea:	897b      	ldrh	r3, [r7, #10]
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	f043 0301 	orr.w	r3, r3, #1
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	611a      	str	r2, [r3, #16]
 80084fa:	e05f      	b.n	80085bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80084fc:	897b      	ldrh	r3, [r7, #10]
 80084fe:	11db      	asrs	r3, r3, #7
 8008500:	b2db      	uxtb	r3, r3
 8008502:	f003 0306 	and.w	r3, r3, #6
 8008506:	b2db      	uxtb	r3, r3
 8008508:	f063 030f 	orn	r3, r3, #15
 800850c:	b2da      	uxtb	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	4930      	ldr	r1, [pc, #192]	; (80085dc <I2C_MasterRequestRead+0x194>)
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 fa37 	bl	800898e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e054      	b.n	80085d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800852a:	897b      	ldrh	r3, [r7, #10]
 800852c:	b2da      	uxtb	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	4929      	ldr	r1, [pc, #164]	; (80085e0 <I2C_MasterRequestRead+0x198>)
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f000 fa27 	bl	800898e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e044      	b.n	80085d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800854a:	2300      	movs	r3, #0
 800854c:	613b      	str	r3, [r7, #16]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	695b      	ldr	r3, [r3, #20]
 8008554:	613b      	str	r3, [r7, #16]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	613b      	str	r3, [r7, #16]
 800855e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800856e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 f9af 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00d      	beq.n	80085a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008596:	d103      	bne.n	80085a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800859e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e017      	b.n	80085d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80085a4:	897b      	ldrh	r3, [r7, #10]
 80085a6:	11db      	asrs	r3, r3, #7
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	f003 0306 	and.w	r3, r3, #6
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	f063 030e 	orn	r3, r3, #14
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	4907      	ldr	r1, [pc, #28]	; (80085e0 <I2C_MasterRequestRead+0x198>)
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 f9e3 	bl	800898e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e000      	b.n	80085d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3718      	adds	r7, #24
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	00010008 	.word	0x00010008
 80085e0:	00010002 	.word	0x00010002

080085e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b088      	sub	sp, #32
 80085e8:	af02      	add	r7, sp, #8
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	4608      	mov	r0, r1
 80085ee:	4611      	mov	r1, r2
 80085f0:	461a      	mov	r2, r3
 80085f2:	4603      	mov	r3, r0
 80085f4:	817b      	strh	r3, [r7, #10]
 80085f6:	460b      	mov	r3, r1
 80085f8:	813b      	strh	r3, [r7, #8]
 80085fa:	4613      	mov	r3, r2
 80085fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800860c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	2200      	movs	r2, #0
 8008616:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 f960 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00d      	beq.n	8008642 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008634:	d103      	bne.n	800863e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800863c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e05f      	b.n	8008702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008642:	897b      	ldrh	r3, [r7, #10]
 8008644:	b2db      	uxtb	r3, r3
 8008646:	461a      	mov	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008650:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	6a3a      	ldr	r2, [r7, #32]
 8008656:	492d      	ldr	r1, [pc, #180]	; (800870c <I2C_RequestMemoryWrite+0x128>)
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 f998 	bl	800898e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e04c      	b.n	8008702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008668:	2300      	movs	r3, #0
 800866a:	617b      	str	r3, [r7, #20]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	617b      	str	r3, [r7, #20]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	617b      	str	r3, [r7, #20]
 800867c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800867e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008680:	6a39      	ldr	r1, [r7, #32]
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f000 fa02 	bl	8008a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00d      	beq.n	80086aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008692:	2b04      	cmp	r3, #4
 8008694:	d107      	bne.n	80086a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e02b      	b.n	8008702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086aa:	88fb      	ldrh	r3, [r7, #6]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d105      	bne.n	80086bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086b0:	893b      	ldrh	r3, [r7, #8]
 80086b2:	b2da      	uxtb	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	611a      	str	r2, [r3, #16]
 80086ba:	e021      	b.n	8008700 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80086bc:	893b      	ldrh	r3, [r7, #8]
 80086be:	0a1b      	lsrs	r3, r3, #8
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086cc:	6a39      	ldr	r1, [r7, #32]
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 f9dc 	bl	8008a8c <I2C_WaitOnTXEFlagUntilTimeout>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00d      	beq.n	80086f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086de:	2b04      	cmp	r3, #4
 80086e0:	d107      	bne.n	80086f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e005      	b.n	8008702 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086f6:	893b      	ldrh	r3, [r7, #8]
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	00010002 	.word	0x00010002

08008710 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af02      	add	r7, sp, #8
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	4608      	mov	r0, r1
 800871a:	4611      	mov	r1, r2
 800871c:	461a      	mov	r2, r3
 800871e:	4603      	mov	r3, r0
 8008720:	817b      	strh	r3, [r7, #10]
 8008722:	460b      	mov	r3, r1
 8008724:	813b      	strh	r3, [r7, #8]
 8008726:	4613      	mov	r3, r2
 8008728:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008738:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008748:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	2200      	movs	r2, #0
 8008752:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 f8c2 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00d      	beq.n	800877e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800876c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008770:	d103      	bne.n	800877a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008778:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e0aa      	b.n	80088d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800877e:	897b      	ldrh	r3, [r7, #10]
 8008780:	b2db      	uxtb	r3, r3
 8008782:	461a      	mov	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800878c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	6a3a      	ldr	r2, [r7, #32]
 8008792:	4952      	ldr	r1, [pc, #328]	; (80088dc <I2C_RequestMemoryRead+0x1cc>)
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 f8fa 	bl	800898e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e097      	b.n	80088d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087a4:	2300      	movs	r3, #0
 80087a6:	617b      	str	r3, [r7, #20]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	617b      	str	r3, [r7, #20]
 80087b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087bc:	6a39      	ldr	r1, [r7, #32]
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f000 f964 	bl	8008a8c <I2C_WaitOnTXEFlagUntilTimeout>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00d      	beq.n	80087e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d107      	bne.n	80087e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e076      	b.n	80088d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087e6:	88fb      	ldrh	r3, [r7, #6]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d105      	bne.n	80087f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80087ec:	893b      	ldrh	r3, [r7, #8]
 80087ee:	b2da      	uxtb	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	611a      	str	r2, [r3, #16]
 80087f6:	e021      	b.n	800883c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80087f8:	893b      	ldrh	r3, [r7, #8]
 80087fa:	0a1b      	lsrs	r3, r3, #8
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	b2da      	uxtb	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008808:	6a39      	ldr	r1, [r7, #32]
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 f93e 	bl	8008a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00d      	beq.n	8008832 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881a:	2b04      	cmp	r3, #4
 800881c:	d107      	bne.n	800882e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800882c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e050      	b.n	80088d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008832:	893b      	ldrh	r3, [r7, #8]
 8008834:	b2da      	uxtb	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800883c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800883e:	6a39      	ldr	r1, [r7, #32]
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 f923 	bl	8008a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00d      	beq.n	8008868 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008850:	2b04      	cmp	r3, #4
 8008852:	d107      	bne.n	8008864 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008862:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e035      	b.n	80088d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008876:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	6a3b      	ldr	r3, [r7, #32]
 800887e:	2200      	movs	r2, #0
 8008880:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 f82b 	bl	80088e0 <I2C_WaitOnFlagUntilTimeout>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00d      	beq.n	80088ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800889a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800889e:	d103      	bne.n	80088a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e013      	b.n	80088d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80088ac:	897b      	ldrh	r3, [r7, #10]
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	f043 0301 	orr.w	r3, r3, #1
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	6a3a      	ldr	r2, [r7, #32]
 80088c0:	4906      	ldr	r1, [pc, #24]	; (80088dc <I2C_RequestMemoryRead+0x1cc>)
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f000 f863 	bl	800898e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d001      	beq.n	80088d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e000      	b.n	80088d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	00010002 	.word	0x00010002

080088e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	603b      	str	r3, [r7, #0]
 80088ec:	4613      	mov	r3, r2
 80088ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088f0:	e025      	b.n	800893e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088f8:	d021      	beq.n	800893e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088fa:	f7fc fd0d 	bl	8005318 <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	429a      	cmp	r2, r3
 8008908:	d302      	bcc.n	8008910 <I2C_WaitOnFlagUntilTimeout+0x30>
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d116      	bne.n	800893e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2220      	movs	r2, #32
 800891a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	f043 0220 	orr.w	r2, r3, #32
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e023      	b.n	8008986 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	0c1b      	lsrs	r3, r3, #16
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b01      	cmp	r3, #1
 8008946:	d10d      	bne.n	8008964 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	43da      	mvns	r2, r3
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4013      	ands	r3, r2
 8008954:	b29b      	uxth	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	bf0c      	ite	eq
 800895a:	2301      	moveq	r3, #1
 800895c:	2300      	movne	r3, #0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	461a      	mov	r2, r3
 8008962:	e00c      	b.n	800897e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	43da      	mvns	r2, r3
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	4013      	ands	r3, r2
 8008970:	b29b      	uxth	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	bf0c      	ite	eq
 8008976:	2301      	moveq	r3, #1
 8008978:	2300      	movne	r3, #0
 800897a:	b2db      	uxtb	r3, r3
 800897c:	461a      	mov	r2, r3
 800897e:	79fb      	ldrb	r3, [r7, #7]
 8008980:	429a      	cmp	r2, r3
 8008982:	d0b6      	beq.n	80088f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	607a      	str	r2, [r7, #4]
 800899a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800899c:	e051      	b.n	8008a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089ac:	d123      	bne.n	80089f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80089c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2220      	movs	r2, #32
 80089d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e2:	f043 0204 	orr.w	r2, r3, #4
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e046      	b.n	8008a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089fc:	d021      	beq.n	8008a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089fe:	f7fc fc8b 	bl	8005318 <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d302      	bcc.n	8008a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d116      	bne.n	8008a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2220      	movs	r2, #32
 8008a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	f043 0220 	orr.w	r2, r3, #32
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e020      	b.n	8008a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	0c1b      	lsrs	r3, r3, #16
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d10c      	bne.n	8008a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	43da      	mvns	r2, r3
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	4013      	ands	r3, r2
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	bf14      	ite	ne
 8008a5e:	2301      	movne	r3, #1
 8008a60:	2300      	moveq	r3, #0
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	e00b      	b.n	8008a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	43da      	mvns	r2, r3
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	4013      	ands	r3, r2
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	bf14      	ite	ne
 8008a78:	2301      	movne	r3, #1
 8008a7a:	2300      	moveq	r3, #0
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d18d      	bne.n	800899e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a98:	e02d      	b.n	8008af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f000 f8ce 	bl	8008c3c <I2C_IsAcknowledgeFailed>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e02d      	b.n	8008b06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ab0:	d021      	beq.n	8008af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ab2:	f7fc fc31 	bl	8005318 <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d302      	bcc.n	8008ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d116      	bne.n	8008af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae2:	f043 0220 	orr.w	r2, r3, #32
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e007      	b.n	8008b06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b00:	2b80      	cmp	r3, #128	; 0x80
 8008b02:	d1ca      	bne.n	8008a9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b1a:	e02d      	b.n	8008b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 f88d 	bl	8008c3c <I2C_IsAcknowledgeFailed>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e02d      	b.n	8008b88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b32:	d021      	beq.n	8008b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b34:	f7fc fbf0 	bl	8005318 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d302      	bcc.n	8008b4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d116      	bne.n	8008b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2220      	movs	r2, #32
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b64:	f043 0220 	orr.w	r2, r3, #32
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e007      	b.n	8008b88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	695b      	ldr	r3, [r3, #20]
 8008b7e:	f003 0304 	and.w	r3, r3, #4
 8008b82:	2b04      	cmp	r3, #4
 8008b84:	d1ca      	bne.n	8008b1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b9c:	e042      	b.n	8008c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	f003 0310 	and.w	r3, r3, #16
 8008ba8:	2b10      	cmp	r3, #16
 8008baa:	d119      	bne.n	8008be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f06f 0210 	mvn.w	r2, #16
 8008bb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e029      	b.n	8008c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008be0:	f7fc fb9a 	bl	8005318 <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d302      	bcc.n	8008bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d116      	bne.n	8008c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2220      	movs	r2, #32
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c10:	f043 0220 	orr.w	r2, r3, #32
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e007      	b.n	8008c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c2e:	2b40      	cmp	r3, #64	; 0x40
 8008c30:	d1b5      	bne.n	8008b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c52:	d11b      	bne.n	8008c8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2220      	movs	r2, #32
 8008c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c78:	f043 0204 	orr.w	r2, r3, #4
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e000      	b.n	8008c8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
	...

08008c9c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e128      	b.n	8008f00 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d109      	bne.n	8008cce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a90      	ldr	r2, [pc, #576]	; (8008f08 <HAL_I2S_Init+0x26c>)
 8008cc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7f9 f809 	bl	8001ce0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	69db      	ldr	r3, [r3, #28]
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	6812      	ldr	r2, [r2, #0]
 8008ce0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008ce4:	f023 030f 	bic.w	r3, r3, #15
 8008ce8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d060      	beq.n	8008dbc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d102      	bne.n	8008d08 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008d02:	2310      	movs	r3, #16
 8008d04:	617b      	str	r3, [r7, #20]
 8008d06:	e001      	b.n	8008d0c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008d08:	2320      	movs	r3, #32
 8008d0a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	2b20      	cmp	r3, #32
 8008d12:	d802      	bhi.n	8008d1a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	005b      	lsls	r3, r3, #1
 8008d18:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8008d1a:	2001      	movs	r0, #1
 8008d1c:	f001 f9a0 	bl	800a060 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d20:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d2a:	d125      	bne.n	8008d78 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d010      	beq.n	8008d56 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d3e:	4613      	mov	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	461a      	mov	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	695b      	ldr	r3, [r3, #20]
 8008d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d50:	3305      	adds	r3, #5
 8008d52:	613b      	str	r3, [r7, #16]
 8008d54:	e01f      	b.n	8008d96 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	00db      	lsls	r3, r3, #3
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d60:	4613      	mov	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	005b      	lsls	r3, r3, #1
 8008d68:	461a      	mov	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d72:	3305      	adds	r3, #5
 8008d74:	613b      	str	r3, [r7, #16]
 8008d76:	e00e      	b.n	8008d96 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d80:	4613      	mov	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	005b      	lsls	r3, r3, #1
 8008d88:	461a      	mov	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d92:	3305      	adds	r3, #5
 8008d94:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	4a5c      	ldr	r2, [pc, #368]	; (8008f0c <HAL_I2S_Init+0x270>)
 8008d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d9e:	08db      	lsrs	r3, r3, #3
 8008da0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	f003 0301 	and.w	r3, r3, #1
 8008da8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	085b      	lsrs	r3, r3, #1
 8008db2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	021b      	lsls	r3, r3, #8
 8008db8:	61bb      	str	r3, [r7, #24]
 8008dba:	e003      	b.n	8008dc4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d902      	bls.n	8008dd0 <HAL_I2S_Init+0x134>
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	2bff      	cmp	r3, #255	; 0xff
 8008dce:	d907      	bls.n	8008de0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd4:	f043 0210 	orr.w	r2, r3, #16
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e08f      	b.n	8008f00 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	691a      	ldr	r2, [r3, #16]
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	ea42 0103 	orr.w	r1, r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	69fa      	ldr	r2, [r7, #28]
 8008df0:	430a      	orrs	r2, r1
 8008df2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008dfe:	f023 030f 	bic.w	r3, r3, #15
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	6851      	ldr	r1, [r2, #4]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	6892      	ldr	r2, [r2, #8]
 8008e0a:	4311      	orrs	r1, r2
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	68d2      	ldr	r2, [r2, #12]
 8008e10:	4311      	orrs	r1, r2
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	6992      	ldr	r2, [r2, #24]
 8008e16:	430a      	orrs	r2, r1
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e22:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a1b      	ldr	r3, [r3, #32]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d161      	bne.n	8008ef0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a38      	ldr	r2, [pc, #224]	; (8008f10 <HAL_I2S_Init+0x274>)
 8008e30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a37      	ldr	r2, [pc, #220]	; (8008f14 <HAL_I2S_Init+0x278>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d101      	bne.n	8008e40 <HAL_I2S_Init+0x1a4>
 8008e3c:	4b36      	ldr	r3, [pc, #216]	; (8008f18 <HAL_I2S_Init+0x27c>)
 8008e3e:	e001      	b.n	8008e44 <HAL_I2S_Init+0x1a8>
 8008e40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	6812      	ldr	r2, [r2, #0]
 8008e4a:	4932      	ldr	r1, [pc, #200]	; (8008f14 <HAL_I2S_Init+0x278>)
 8008e4c:	428a      	cmp	r2, r1
 8008e4e:	d101      	bne.n	8008e54 <HAL_I2S_Init+0x1b8>
 8008e50:	4a31      	ldr	r2, [pc, #196]	; (8008f18 <HAL_I2S_Init+0x27c>)
 8008e52:	e001      	b.n	8008e58 <HAL_I2S_Init+0x1bc>
 8008e54:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8008e58:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008e5c:	f023 030f 	bic.w	r3, r3, #15
 8008e60:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a2b      	ldr	r2, [pc, #172]	; (8008f14 <HAL_I2S_Init+0x278>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d101      	bne.n	8008e70 <HAL_I2S_Init+0x1d4>
 8008e6c:	4b2a      	ldr	r3, [pc, #168]	; (8008f18 <HAL_I2S_Init+0x27c>)
 8008e6e:	e001      	b.n	8008e74 <HAL_I2S_Init+0x1d8>
 8008e70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008e74:	2202      	movs	r2, #2
 8008e76:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a25      	ldr	r2, [pc, #148]	; (8008f14 <HAL_I2S_Init+0x278>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d101      	bne.n	8008e86 <HAL_I2S_Init+0x1ea>
 8008e82:	4b25      	ldr	r3, [pc, #148]	; (8008f18 <HAL_I2S_Init+0x27c>)
 8008e84:	e001      	b.n	8008e8a <HAL_I2S_Init+0x1ee>
 8008e86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008e8a:	69db      	ldr	r3, [r3, #28]
 8008e8c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e96:	d003      	beq.n	8008ea0 <HAL_I2S_Init+0x204>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d103      	bne.n	8008ea8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8008ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ea4:	613b      	str	r3, [r7, #16]
 8008ea6:	e001      	b.n	8008eac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	897b      	ldrh	r3, [r7, #10]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008ed8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a0d      	ldr	r2, [pc, #52]	; (8008f14 <HAL_I2S_Init+0x278>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d101      	bne.n	8008ee8 <HAL_I2S_Init+0x24c>
 8008ee4:	4b0c      	ldr	r3, [pc, #48]	; (8008f18 <HAL_I2S_Init+0x27c>)
 8008ee6:	e001      	b.n	8008eec <HAL_I2S_Init+0x250>
 8008ee8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008eec:	897a      	ldrh	r2, [r7, #10]
 8008eee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3720      	adds	r7, #32
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	08009013 	.word	0x08009013
 8008f0c:	cccccccd 	.word	0xcccccccd
 8008f10:	08009129 	.word	0x08009129
 8008f14:	40003800 	.word	0x40003800
 8008f18:	40003400 	.word	0x40003400

08008f1c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f64:	881a      	ldrh	r2, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f70:	1c9a      	adds	r2, r3, #2
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10e      	bne.n	8008fac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008f9c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7ff ffb8 	bl	8008f1c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008fac:	bf00      	nop
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc6:	b292      	uxth	r2, r2
 8008fc8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fce:	1c9a      	adds	r2, r3, #2
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10e      	bne.n	800900a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685a      	ldr	r2, [r3, #4]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008ffa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7ff ff93 	bl	8008f30 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800900a:	bf00      	nop
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b086      	sub	sp, #24
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b04      	cmp	r3, #4
 800902c:	d13a      	bne.n	80090a4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	2b01      	cmp	r3, #1
 8009036:	d109      	bne.n	800904c <I2S_IRQHandler+0x3a>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009042:	2b40      	cmp	r3, #64	; 0x40
 8009044:	d102      	bne.n	800904c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7ff ffb4 	bl	8008fb4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009052:	2b40      	cmp	r3, #64	; 0x40
 8009054:	d126      	bne.n	80090a4 <I2S_IRQHandler+0x92>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f003 0320 	and.w	r3, r3, #32
 8009060:	2b20      	cmp	r3, #32
 8009062:	d11f      	bne.n	80090a4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009072:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009074:	2300      	movs	r3, #0
 8009076:	613b      	str	r3, [r7, #16]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	613b      	str	r3, [r7, #16]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	613b      	str	r3, [r7, #16]
 8009088:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009096:	f043 0202 	orr.w	r2, r3, #2
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff ff50 	bl	8008f44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d136      	bne.n	800911e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	f003 0302 	and.w	r3, r3, #2
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d109      	bne.n	80090ce <I2S_IRQHandler+0xbc>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090c4:	2b80      	cmp	r3, #128	; 0x80
 80090c6:	d102      	bne.n	80090ce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7ff ff45 	bl	8008f58 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f003 0308 	and.w	r3, r3, #8
 80090d4:	2b08      	cmp	r3, #8
 80090d6:	d122      	bne.n	800911e <I2S_IRQHandler+0x10c>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f003 0320 	and.w	r3, r3, #32
 80090e2:	2b20      	cmp	r3, #32
 80090e4:	d11b      	bne.n	800911e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80090f4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80090f6:	2300      	movs	r3, #0
 80090f8:	60fb      	str	r3, [r7, #12]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	60fb      	str	r3, [r7, #12]
 8009102:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009110:	f043 0204 	orr.w	r2, r3, #4
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7ff ff13 	bl	8008f44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800911e:	bf00      	nop
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
	...

08009128 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b088      	sub	sp, #32
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4aa2      	ldr	r2, [pc, #648]	; (80093c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d101      	bne.n	8009146 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8009142:	4ba2      	ldr	r3, [pc, #648]	; (80093cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009144:	e001      	b.n	800914a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8009146:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a9b      	ldr	r2, [pc, #620]	; (80093c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d101      	bne.n	8009164 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8009160:	4b9a      	ldr	r3, [pc, #616]	; (80093cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009162:	e001      	b.n	8009168 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8009164:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009174:	d004      	beq.n	8009180 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	f040 8099 	bne.w	80092b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	2b02      	cmp	r3, #2
 8009188:	d107      	bne.n	800919a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009190:	2b00      	cmp	r3, #0
 8009192:	d002      	beq.n	800919a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f925 	bl	80093e4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d107      	bne.n	80091b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f9c8 	bl	8009544 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ba:	2b40      	cmp	r3, #64	; 0x40
 80091bc:	d13a      	bne.n	8009234 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f003 0320 	and.w	r3, r3, #32
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d035      	beq.n	8009234 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a7e      	ldr	r2, [pc, #504]	; (80093c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d101      	bne.n	80091d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80091d2:	4b7e      	ldr	r3, [pc, #504]	; (80093cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80091d4:	e001      	b.n	80091da <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80091d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4979      	ldr	r1, [pc, #484]	; (80093c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80091e2:	428b      	cmp	r3, r1
 80091e4:	d101      	bne.n	80091ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80091e6:	4b79      	ldr	r3, [pc, #484]	; (80093cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80091e8:	e001      	b.n	80091ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80091ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80091ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80091f2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009202:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009204:	2300      	movs	r3, #0
 8009206:	60fb      	str	r3, [r7, #12]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	60fb      	str	r3, [r7, #12]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009226:	f043 0202 	orr.w	r2, r3, #2
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7ff fe88 	bl	8008f44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	f003 0308 	and.w	r3, r3, #8
 800923a:	2b08      	cmp	r3, #8
 800923c:	f040 80be 	bne.w	80093bc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	f003 0320 	and.w	r3, r3, #32
 8009246:	2b00      	cmp	r3, #0
 8009248:	f000 80b8 	beq.w	80093bc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800925a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a59      	ldr	r2, [pc, #356]	; (80093c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d101      	bne.n	800926a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8009266:	4b59      	ldr	r3, [pc, #356]	; (80093cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009268:	e001      	b.n	800926e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800926a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800926e:	685a      	ldr	r2, [r3, #4]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4954      	ldr	r1, [pc, #336]	; (80093c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009276:	428b      	cmp	r3, r1
 8009278:	d101      	bne.n	800927e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800927a:	4b54      	ldr	r3, [pc, #336]	; (80093cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800927c:	e001      	b.n	8009282 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800927e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009282:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009286:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009288:	2300      	movs	r3, #0
 800928a:	60bb      	str	r3, [r7, #8]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	60bb      	str	r3, [r7, #8]
 8009294:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2201      	movs	r2, #1
 800929a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a2:	f043 0204 	orr.w	r2, r3, #4
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7ff fe4a 	bl	8008f44 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80092b0:	e084      	b.n	80093bc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	f003 0302 	and.w	r3, r3, #2
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d107      	bne.n	80092cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d002      	beq.n	80092cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f8be 	bl	8009448 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d107      	bne.n	80092e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f8fd 	bl	80094e0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ec:	2b40      	cmp	r3, #64	; 0x40
 80092ee:	d12f      	bne.n	8009350 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	f003 0320 	and.w	r3, r3, #32
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d02a      	beq.n	8009350 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009308:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a2e      	ldr	r2, [pc, #184]	; (80093c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d101      	bne.n	8009318 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8009314:	4b2d      	ldr	r3, [pc, #180]	; (80093cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009316:	e001      	b.n	800931c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8009318:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4929      	ldr	r1, [pc, #164]	; (80093c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009324:	428b      	cmp	r3, r1
 8009326:	d101      	bne.n	800932c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8009328:	4b28      	ldr	r3, [pc, #160]	; (80093cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800932a:	e001      	b.n	8009330 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800932c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009330:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009334:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009342:	f043 0202 	orr.w	r2, r3, #2
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7ff fdfa 	bl	8008f44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	f003 0308 	and.w	r3, r3, #8
 8009356:	2b08      	cmp	r3, #8
 8009358:	d131      	bne.n	80093be <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	f003 0320 	and.w	r3, r3, #32
 8009360:	2b00      	cmp	r3, #0
 8009362:	d02c      	beq.n	80093be <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a17      	ldr	r2, [pc, #92]	; (80093c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d101      	bne.n	8009372 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800936e:	4b17      	ldr	r3, [pc, #92]	; (80093cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009370:	e001      	b.n	8009376 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8009372:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4912      	ldr	r1, [pc, #72]	; (80093c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800937e:	428b      	cmp	r3, r1
 8009380:	d101      	bne.n	8009386 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8009382:	4b12      	ldr	r3, [pc, #72]	; (80093cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009384:	e001      	b.n	800938a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8009386:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800938a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800938e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800939e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ac:	f043 0204 	orr.w	r2, r3, #4
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7ff fdc5 	bl	8008f44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80093ba:	e000      	b.n	80093be <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80093bc:	bf00      	nop
}
 80093be:	bf00      	nop
 80093c0:	3720      	adds	r7, #32
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	40003800 	.word	0x40003800
 80093cc:	40003400 	.word	0x40003400

080093d0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f0:	1c99      	adds	r1, r3, #2
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	6251      	str	r1, [r2, #36]	; 0x24
 80093f6:	881a      	ldrh	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009402:	b29b      	uxth	r3, r3
 8009404:	3b01      	subs	r3, #1
 8009406:	b29a      	uxth	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009410:	b29b      	uxth	r3, r3
 8009412:	2b00      	cmp	r3, #0
 8009414:	d113      	bne.n	800943e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009424:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800942a:	b29b      	uxth	r3, r3
 800942c:	2b00      	cmp	r3, #0
 800942e:	d106      	bne.n	800943e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7ff ffc9 	bl	80093d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800943e:	bf00      	nop
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
	...

08009448 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009454:	1c99      	adds	r1, r3, #2
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	6251      	str	r1, [r2, #36]	; 0x24
 800945a:	8819      	ldrh	r1, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a1d      	ldr	r2, [pc, #116]	; (80094d8 <I2SEx_TxISR_I2SExt+0x90>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d101      	bne.n	800946a <I2SEx_TxISR_I2SExt+0x22>
 8009466:	4b1d      	ldr	r3, [pc, #116]	; (80094dc <I2SEx_TxISR_I2SExt+0x94>)
 8009468:	e001      	b.n	800946e <I2SEx_TxISR_I2SExt+0x26>
 800946a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800946e:	460a      	mov	r2, r1
 8009470:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009476:	b29b      	uxth	r3, r3
 8009478:	3b01      	subs	r3, #1
 800947a:	b29a      	uxth	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009484:	b29b      	uxth	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d121      	bne.n	80094ce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a12      	ldr	r2, [pc, #72]	; (80094d8 <I2SEx_TxISR_I2SExt+0x90>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d101      	bne.n	8009498 <I2SEx_TxISR_I2SExt+0x50>
 8009494:	4b11      	ldr	r3, [pc, #68]	; (80094dc <I2SEx_TxISR_I2SExt+0x94>)
 8009496:	e001      	b.n	800949c <I2SEx_TxISR_I2SExt+0x54>
 8009498:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800949c:	685a      	ldr	r2, [r3, #4]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	490d      	ldr	r1, [pc, #52]	; (80094d8 <I2SEx_TxISR_I2SExt+0x90>)
 80094a4:	428b      	cmp	r3, r1
 80094a6:	d101      	bne.n	80094ac <I2SEx_TxISR_I2SExt+0x64>
 80094a8:	4b0c      	ldr	r3, [pc, #48]	; (80094dc <I2SEx_TxISR_I2SExt+0x94>)
 80094aa:	e001      	b.n	80094b0 <I2SEx_TxISR_I2SExt+0x68>
 80094ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80094b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80094b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d106      	bne.n	80094ce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f7ff ff81 	bl	80093d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	40003800 	.word	0x40003800
 80094dc:	40003400 	.word	0x40003400

080094e0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68d8      	ldr	r0, [r3, #12]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f2:	1c99      	adds	r1, r3, #2
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80094f8:	b282      	uxth	r2, r0
 80094fa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009500:	b29b      	uxth	r3, r3
 8009502:	3b01      	subs	r3, #1
 8009504:	b29a      	uxth	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800950e:	b29b      	uxth	r3, r3
 8009510:	2b00      	cmp	r3, #0
 8009512:	d113      	bne.n	800953c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009522:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009528:	b29b      	uxth	r3, r3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d106      	bne.n	800953c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7ff ff4a 	bl	80093d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800953c:	bf00      	nop
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a20      	ldr	r2, [pc, #128]	; (80095d4 <I2SEx_RxISR_I2SExt+0x90>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d101      	bne.n	800955a <I2SEx_RxISR_I2SExt+0x16>
 8009556:	4b20      	ldr	r3, [pc, #128]	; (80095d8 <I2SEx_RxISR_I2SExt+0x94>)
 8009558:	e001      	b.n	800955e <I2SEx_RxISR_I2SExt+0x1a>
 800955a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800955e:	68d8      	ldr	r0, [r3, #12]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009564:	1c99      	adds	r1, r3, #2
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	62d1      	str	r1, [r2, #44]	; 0x2c
 800956a:	b282      	uxth	r2, r0
 800956c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009572:	b29b      	uxth	r3, r3
 8009574:	3b01      	subs	r3, #1
 8009576:	b29a      	uxth	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009580:	b29b      	uxth	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	d121      	bne.n	80095ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a12      	ldr	r2, [pc, #72]	; (80095d4 <I2SEx_RxISR_I2SExt+0x90>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d101      	bne.n	8009594 <I2SEx_RxISR_I2SExt+0x50>
 8009590:	4b11      	ldr	r3, [pc, #68]	; (80095d8 <I2SEx_RxISR_I2SExt+0x94>)
 8009592:	e001      	b.n	8009598 <I2SEx_RxISR_I2SExt+0x54>
 8009594:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	490d      	ldr	r1, [pc, #52]	; (80095d4 <I2SEx_RxISR_I2SExt+0x90>)
 80095a0:	428b      	cmp	r3, r1
 80095a2:	d101      	bne.n	80095a8 <I2SEx_RxISR_I2SExt+0x64>
 80095a4:	4b0c      	ldr	r3, [pc, #48]	; (80095d8 <I2SEx_RxISR_I2SExt+0x94>)
 80095a6:	e001      	b.n	80095ac <I2SEx_RxISR_I2SExt+0x68>
 80095a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80095ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80095b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d106      	bne.n	80095ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7ff ff03 	bl	80093d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80095ca:	bf00      	nop
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	40003800 	.word	0x40003800
 80095d8:	40003400 	.word	0x40003400

080095dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d101      	bne.n	80095ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e264      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d075      	beq.n	80096e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80095fa:	4ba3      	ldr	r3, [pc, #652]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f003 030c 	and.w	r3, r3, #12
 8009602:	2b04      	cmp	r3, #4
 8009604:	d00c      	beq.n	8009620 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009606:	4ba0      	ldr	r3, [pc, #640]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800960e:	2b08      	cmp	r3, #8
 8009610:	d112      	bne.n	8009638 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009612:	4b9d      	ldr	r3, [pc, #628]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800961a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800961e:	d10b      	bne.n	8009638 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009620:	4b99      	ldr	r3, [pc, #612]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d05b      	beq.n	80096e4 <HAL_RCC_OscConfig+0x108>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d157      	bne.n	80096e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e23f      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009640:	d106      	bne.n	8009650 <HAL_RCC_OscConfig+0x74>
 8009642:	4b91      	ldr	r3, [pc, #580]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a90      	ldr	r2, [pc, #576]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 8009648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	e01d      	b.n	800968c <HAL_RCC_OscConfig+0xb0>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009658:	d10c      	bne.n	8009674 <HAL_RCC_OscConfig+0x98>
 800965a:	4b8b      	ldr	r3, [pc, #556]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a8a      	ldr	r2, [pc, #552]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 8009660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009664:	6013      	str	r3, [r2, #0]
 8009666:	4b88      	ldr	r3, [pc, #544]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a87      	ldr	r2, [pc, #540]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 800966c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009670:	6013      	str	r3, [r2, #0]
 8009672:	e00b      	b.n	800968c <HAL_RCC_OscConfig+0xb0>
 8009674:	4b84      	ldr	r3, [pc, #528]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a83      	ldr	r2, [pc, #524]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 800967a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	4b81      	ldr	r3, [pc, #516]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a80      	ldr	r2, [pc, #512]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 8009686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800968a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d013      	beq.n	80096bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009694:	f7fb fe40 	bl	8005318 <HAL_GetTick>
 8009698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800969a:	e008      	b.n	80096ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800969c:	f7fb fe3c 	bl	8005318 <HAL_GetTick>
 80096a0:	4602      	mov	r2, r0
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	2b64      	cmp	r3, #100	; 0x64
 80096a8:	d901      	bls.n	80096ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80096aa:	2303      	movs	r3, #3
 80096ac:	e204      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096ae:	4b76      	ldr	r3, [pc, #472]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d0f0      	beq.n	800969c <HAL_RCC_OscConfig+0xc0>
 80096ba:	e014      	b.n	80096e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096bc:	f7fb fe2c 	bl	8005318 <HAL_GetTick>
 80096c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096c2:	e008      	b.n	80096d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80096c4:	f7fb fe28 	bl	8005318 <HAL_GetTick>
 80096c8:	4602      	mov	r2, r0
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	2b64      	cmp	r3, #100	; 0x64
 80096d0:	d901      	bls.n	80096d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80096d2:	2303      	movs	r3, #3
 80096d4:	e1f0      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096d6:	4b6c      	ldr	r3, [pc, #432]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1f0      	bne.n	80096c4 <HAL_RCC_OscConfig+0xe8>
 80096e2:	e000      	b.n	80096e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 0302 	and.w	r3, r3, #2
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d063      	beq.n	80097ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80096f2:	4b65      	ldr	r3, [pc, #404]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	f003 030c 	and.w	r3, r3, #12
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00b      	beq.n	8009716 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80096fe:	4b62      	ldr	r3, [pc, #392]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009706:	2b08      	cmp	r3, #8
 8009708:	d11c      	bne.n	8009744 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800970a:	4b5f      	ldr	r3, [pc, #380]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009712:	2b00      	cmp	r3, #0
 8009714:	d116      	bne.n	8009744 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009716:	4b5c      	ldr	r3, [pc, #368]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0302 	and.w	r3, r3, #2
 800971e:	2b00      	cmp	r3, #0
 8009720:	d005      	beq.n	800972e <HAL_RCC_OscConfig+0x152>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d001      	beq.n	800972e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e1c4      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800972e:	4b56      	ldr	r3, [pc, #344]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	00db      	lsls	r3, r3, #3
 800973c:	4952      	ldr	r1, [pc, #328]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 800973e:	4313      	orrs	r3, r2
 8009740:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009742:	e03a      	b.n	80097ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d020      	beq.n	800978e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800974c:	4b4f      	ldr	r3, [pc, #316]	; (800988c <HAL_RCC_OscConfig+0x2b0>)
 800974e:	2201      	movs	r2, #1
 8009750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009752:	f7fb fde1 	bl	8005318 <HAL_GetTick>
 8009756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009758:	e008      	b.n	800976c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800975a:	f7fb fddd 	bl	8005318 <HAL_GetTick>
 800975e:	4602      	mov	r2, r0
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	2b02      	cmp	r3, #2
 8009766:	d901      	bls.n	800976c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009768:	2303      	movs	r3, #3
 800976a:	e1a5      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800976c:	4b46      	ldr	r3, [pc, #280]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 0302 	and.w	r3, r3, #2
 8009774:	2b00      	cmp	r3, #0
 8009776:	d0f0      	beq.n	800975a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009778:	4b43      	ldr	r3, [pc, #268]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	00db      	lsls	r3, r3, #3
 8009786:	4940      	ldr	r1, [pc, #256]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 8009788:	4313      	orrs	r3, r2
 800978a:	600b      	str	r3, [r1, #0]
 800978c:	e015      	b.n	80097ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800978e:	4b3f      	ldr	r3, [pc, #252]	; (800988c <HAL_RCC_OscConfig+0x2b0>)
 8009790:	2200      	movs	r2, #0
 8009792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009794:	f7fb fdc0 	bl	8005318 <HAL_GetTick>
 8009798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800979a:	e008      	b.n	80097ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800979c:	f7fb fdbc 	bl	8005318 <HAL_GetTick>
 80097a0:	4602      	mov	r2, r0
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d901      	bls.n	80097ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80097aa:	2303      	movs	r3, #3
 80097ac:	e184      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80097ae:	4b36      	ldr	r3, [pc, #216]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0302 	and.w	r3, r3, #2
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1f0      	bne.n	800979c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 0308 	and.w	r3, r3, #8
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d030      	beq.n	8009828 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d016      	beq.n	80097fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097ce:	4b30      	ldr	r3, [pc, #192]	; (8009890 <HAL_RCC_OscConfig+0x2b4>)
 80097d0:	2201      	movs	r2, #1
 80097d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097d4:	f7fb fda0 	bl	8005318 <HAL_GetTick>
 80097d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097da:	e008      	b.n	80097ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097dc:	f7fb fd9c 	bl	8005318 <HAL_GetTick>
 80097e0:	4602      	mov	r2, r0
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d901      	bls.n	80097ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80097ea:	2303      	movs	r3, #3
 80097ec:	e164      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097ee:	4b26      	ldr	r3, [pc, #152]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 80097f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097f2:	f003 0302 	and.w	r3, r3, #2
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d0f0      	beq.n	80097dc <HAL_RCC_OscConfig+0x200>
 80097fa:	e015      	b.n	8009828 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80097fc:	4b24      	ldr	r3, [pc, #144]	; (8009890 <HAL_RCC_OscConfig+0x2b4>)
 80097fe:	2200      	movs	r2, #0
 8009800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009802:	f7fb fd89 	bl	8005318 <HAL_GetTick>
 8009806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009808:	e008      	b.n	800981c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800980a:	f7fb fd85 	bl	8005318 <HAL_GetTick>
 800980e:	4602      	mov	r2, r0
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	2b02      	cmp	r3, #2
 8009816:	d901      	bls.n	800981c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e14d      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800981c:	4b1a      	ldr	r3, [pc, #104]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 800981e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009820:	f003 0302 	and.w	r3, r3, #2
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1f0      	bne.n	800980a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 0304 	and.w	r3, r3, #4
 8009830:	2b00      	cmp	r3, #0
 8009832:	f000 80a0 	beq.w	8009976 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009836:	2300      	movs	r3, #0
 8009838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800983a:	4b13      	ldr	r3, [pc, #76]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 800983c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10f      	bne.n	8009866 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009846:	2300      	movs	r3, #0
 8009848:	60bb      	str	r3, [r7, #8]
 800984a:	4b0f      	ldr	r3, [pc, #60]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 800984c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984e:	4a0e      	ldr	r2, [pc, #56]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 8009850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009854:	6413      	str	r3, [r2, #64]	; 0x40
 8009856:	4b0c      	ldr	r3, [pc, #48]	; (8009888 <HAL_RCC_OscConfig+0x2ac>)
 8009858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800985e:	60bb      	str	r3, [r7, #8]
 8009860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009862:	2301      	movs	r3, #1
 8009864:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009866:	4b0b      	ldr	r3, [pc, #44]	; (8009894 <HAL_RCC_OscConfig+0x2b8>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800986e:	2b00      	cmp	r3, #0
 8009870:	d121      	bne.n	80098b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009872:	4b08      	ldr	r3, [pc, #32]	; (8009894 <HAL_RCC_OscConfig+0x2b8>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a07      	ldr	r2, [pc, #28]	; (8009894 <HAL_RCC_OscConfig+0x2b8>)
 8009878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800987c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800987e:	f7fb fd4b 	bl	8005318 <HAL_GetTick>
 8009882:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009884:	e011      	b.n	80098aa <HAL_RCC_OscConfig+0x2ce>
 8009886:	bf00      	nop
 8009888:	40023800 	.word	0x40023800
 800988c:	42470000 	.word	0x42470000
 8009890:	42470e80 	.word	0x42470e80
 8009894:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009898:	f7fb fd3e 	bl	8005318 <HAL_GetTick>
 800989c:	4602      	mov	r2, r0
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d901      	bls.n	80098aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80098a6:	2303      	movs	r3, #3
 80098a8:	e106      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098aa:	4b85      	ldr	r3, [pc, #532]	; (8009ac0 <HAL_RCC_OscConfig+0x4e4>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0f0      	beq.n	8009898 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d106      	bne.n	80098cc <HAL_RCC_OscConfig+0x2f0>
 80098be:	4b81      	ldr	r3, [pc, #516]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 80098c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c2:	4a80      	ldr	r2, [pc, #512]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 80098c4:	f043 0301 	orr.w	r3, r3, #1
 80098c8:	6713      	str	r3, [r2, #112]	; 0x70
 80098ca:	e01c      	b.n	8009906 <HAL_RCC_OscConfig+0x32a>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	2b05      	cmp	r3, #5
 80098d2:	d10c      	bne.n	80098ee <HAL_RCC_OscConfig+0x312>
 80098d4:	4b7b      	ldr	r3, [pc, #492]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 80098d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d8:	4a7a      	ldr	r2, [pc, #488]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 80098da:	f043 0304 	orr.w	r3, r3, #4
 80098de:	6713      	str	r3, [r2, #112]	; 0x70
 80098e0:	4b78      	ldr	r3, [pc, #480]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 80098e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098e4:	4a77      	ldr	r2, [pc, #476]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 80098e6:	f043 0301 	orr.w	r3, r3, #1
 80098ea:	6713      	str	r3, [r2, #112]	; 0x70
 80098ec:	e00b      	b.n	8009906 <HAL_RCC_OscConfig+0x32a>
 80098ee:	4b75      	ldr	r3, [pc, #468]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 80098f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f2:	4a74      	ldr	r2, [pc, #464]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 80098f4:	f023 0301 	bic.w	r3, r3, #1
 80098f8:	6713      	str	r3, [r2, #112]	; 0x70
 80098fa:	4b72      	ldr	r3, [pc, #456]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 80098fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098fe:	4a71      	ldr	r2, [pc, #452]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 8009900:	f023 0304 	bic.w	r3, r3, #4
 8009904:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d015      	beq.n	800993a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800990e:	f7fb fd03 	bl	8005318 <HAL_GetTick>
 8009912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009914:	e00a      	b.n	800992c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009916:	f7fb fcff 	bl	8005318 <HAL_GetTick>
 800991a:	4602      	mov	r2, r0
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	f241 3288 	movw	r2, #5000	; 0x1388
 8009924:	4293      	cmp	r3, r2
 8009926:	d901      	bls.n	800992c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009928:	2303      	movs	r3, #3
 800992a:	e0c5      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800992c:	4b65      	ldr	r3, [pc, #404]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 800992e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009930:	f003 0302 	and.w	r3, r3, #2
 8009934:	2b00      	cmp	r3, #0
 8009936:	d0ee      	beq.n	8009916 <HAL_RCC_OscConfig+0x33a>
 8009938:	e014      	b.n	8009964 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800993a:	f7fb fced 	bl	8005318 <HAL_GetTick>
 800993e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009940:	e00a      	b.n	8009958 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009942:	f7fb fce9 	bl	8005318 <HAL_GetTick>
 8009946:	4602      	mov	r2, r0
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009950:	4293      	cmp	r3, r2
 8009952:	d901      	bls.n	8009958 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009954:	2303      	movs	r3, #3
 8009956:	e0af      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009958:	4b5a      	ldr	r3, [pc, #360]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 800995a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800995c:	f003 0302 	and.w	r3, r3, #2
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1ee      	bne.n	8009942 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009964:	7dfb      	ldrb	r3, [r7, #23]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d105      	bne.n	8009976 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800996a:	4b56      	ldr	r3, [pc, #344]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 800996c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800996e:	4a55      	ldr	r2, [pc, #340]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 8009970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009974:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 809b 	beq.w	8009ab6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009980:	4b50      	ldr	r3, [pc, #320]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f003 030c 	and.w	r3, r3, #12
 8009988:	2b08      	cmp	r3, #8
 800998a:	d05c      	beq.n	8009a46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	2b02      	cmp	r3, #2
 8009992:	d141      	bne.n	8009a18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009994:	4b4c      	ldr	r3, [pc, #304]	; (8009ac8 <HAL_RCC_OscConfig+0x4ec>)
 8009996:	2200      	movs	r2, #0
 8009998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800999a:	f7fb fcbd 	bl	8005318 <HAL_GetTick>
 800999e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099a0:	e008      	b.n	80099b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099a2:	f7fb fcb9 	bl	8005318 <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d901      	bls.n	80099b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e081      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099b4:	4b43      	ldr	r3, [pc, #268]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1f0      	bne.n	80099a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	69da      	ldr	r2, [r3, #28]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a1b      	ldr	r3, [r3, #32]
 80099c8:	431a      	orrs	r2, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ce:	019b      	lsls	r3, r3, #6
 80099d0:	431a      	orrs	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d6:	085b      	lsrs	r3, r3, #1
 80099d8:	3b01      	subs	r3, #1
 80099da:	041b      	lsls	r3, r3, #16
 80099dc:	431a      	orrs	r2, r3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e2:	061b      	lsls	r3, r3, #24
 80099e4:	4937      	ldr	r1, [pc, #220]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 80099e6:	4313      	orrs	r3, r2
 80099e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80099ea:	4b37      	ldr	r3, [pc, #220]	; (8009ac8 <HAL_RCC_OscConfig+0x4ec>)
 80099ec:	2201      	movs	r2, #1
 80099ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099f0:	f7fb fc92 	bl	8005318 <HAL_GetTick>
 80099f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099f6:	e008      	b.n	8009a0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099f8:	f7fb fc8e 	bl	8005318 <HAL_GetTick>
 80099fc:	4602      	mov	r2, r0
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d901      	bls.n	8009a0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	e056      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a0a:	4b2e      	ldr	r3, [pc, #184]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0f0      	beq.n	80099f8 <HAL_RCC_OscConfig+0x41c>
 8009a16:	e04e      	b.n	8009ab6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a18:	4b2b      	ldr	r3, [pc, #172]	; (8009ac8 <HAL_RCC_OscConfig+0x4ec>)
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a1e:	f7fb fc7b 	bl	8005318 <HAL_GetTick>
 8009a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a24:	e008      	b.n	8009a38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a26:	f7fb fc77 	bl	8005318 <HAL_GetTick>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d901      	bls.n	8009a38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009a34:	2303      	movs	r3, #3
 8009a36:	e03f      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a38:	4b22      	ldr	r3, [pc, #136]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1f0      	bne.n	8009a26 <HAL_RCC_OscConfig+0x44a>
 8009a44:	e037      	b.n	8009ab6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d101      	bne.n	8009a52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e032      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009a52:	4b1c      	ldr	r3, [pc, #112]	; (8009ac4 <HAL_RCC_OscConfig+0x4e8>)
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d028      	beq.n	8009ab2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d121      	bne.n	8009ab2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d11a      	bne.n	8009ab2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009a82:	4013      	ands	r3, r2
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009a88:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d111      	bne.n	8009ab2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a98:	085b      	lsrs	r3, r3, #1
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d107      	bne.n	8009ab2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d001      	beq.n	8009ab6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e000      	b.n	8009ab8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3718      	adds	r7, #24
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	40007000 	.word	0x40007000
 8009ac4:	40023800 	.word	0x40023800
 8009ac8:	42470060 	.word	0x42470060

08009acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d101      	bne.n	8009ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e0cc      	b.n	8009c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009ae0:	4b68      	ldr	r3, [pc, #416]	; (8009c84 <HAL_RCC_ClockConfig+0x1b8>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 0307 	and.w	r3, r3, #7
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d90c      	bls.n	8009b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009aee:	4b65      	ldr	r3, [pc, #404]	; (8009c84 <HAL_RCC_ClockConfig+0x1b8>)
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	b2d2      	uxtb	r2, r2
 8009af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009af6:	4b63      	ldr	r3, [pc, #396]	; (8009c84 <HAL_RCC_ClockConfig+0x1b8>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 0307 	and.w	r3, r3, #7
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d001      	beq.n	8009b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e0b8      	b.n	8009c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0302 	and.w	r3, r3, #2
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d020      	beq.n	8009b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0304 	and.w	r3, r3, #4
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d005      	beq.n	8009b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b20:	4b59      	ldr	r3, [pc, #356]	; (8009c88 <HAL_RCC_ClockConfig+0x1bc>)
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	4a58      	ldr	r2, [pc, #352]	; (8009c88 <HAL_RCC_ClockConfig+0x1bc>)
 8009b26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009b2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0308 	and.w	r3, r3, #8
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d005      	beq.n	8009b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b38:	4b53      	ldr	r3, [pc, #332]	; (8009c88 <HAL_RCC_ClockConfig+0x1bc>)
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	4a52      	ldr	r2, [pc, #328]	; (8009c88 <HAL_RCC_ClockConfig+0x1bc>)
 8009b3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b44:	4b50      	ldr	r3, [pc, #320]	; (8009c88 <HAL_RCC_ClockConfig+0x1bc>)
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	494d      	ldr	r1, [pc, #308]	; (8009c88 <HAL_RCC_ClockConfig+0x1bc>)
 8009b52:	4313      	orrs	r3, r2
 8009b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d044      	beq.n	8009bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d107      	bne.n	8009b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b6a:	4b47      	ldr	r3, [pc, #284]	; (8009c88 <HAL_RCC_ClockConfig+0x1bc>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d119      	bne.n	8009baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	e07f      	b.n	8009c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d003      	beq.n	8009b8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d107      	bne.n	8009b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b8a:	4b3f      	ldr	r3, [pc, #252]	; (8009c88 <HAL_RCC_ClockConfig+0x1bc>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d109      	bne.n	8009baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e06f      	b.n	8009c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b9a:	4b3b      	ldr	r3, [pc, #236]	; (8009c88 <HAL_RCC_ClockConfig+0x1bc>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f003 0302 	and.w	r3, r3, #2
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d101      	bne.n	8009baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e067      	b.n	8009c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009baa:	4b37      	ldr	r3, [pc, #220]	; (8009c88 <HAL_RCC_ClockConfig+0x1bc>)
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	f023 0203 	bic.w	r2, r3, #3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	4934      	ldr	r1, [pc, #208]	; (8009c88 <HAL_RCC_ClockConfig+0x1bc>)
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009bbc:	f7fb fbac 	bl	8005318 <HAL_GetTick>
 8009bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bc2:	e00a      	b.n	8009bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009bc4:	f7fb fba8 	bl	8005318 <HAL_GetTick>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d901      	bls.n	8009bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e04f      	b.n	8009c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bda:	4b2b      	ldr	r3, [pc, #172]	; (8009c88 <HAL_RCC_ClockConfig+0x1bc>)
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f003 020c 	and.w	r2, r3, #12
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d1eb      	bne.n	8009bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009bec:	4b25      	ldr	r3, [pc, #148]	; (8009c84 <HAL_RCC_ClockConfig+0x1b8>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 0307 	and.w	r3, r3, #7
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d20c      	bcs.n	8009c14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bfa:	4b22      	ldr	r3, [pc, #136]	; (8009c84 <HAL_RCC_ClockConfig+0x1b8>)
 8009bfc:	683a      	ldr	r2, [r7, #0]
 8009bfe:	b2d2      	uxtb	r2, r2
 8009c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c02:	4b20      	ldr	r3, [pc, #128]	; (8009c84 <HAL_RCC_ClockConfig+0x1b8>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0307 	and.w	r3, r3, #7
 8009c0a:	683a      	ldr	r2, [r7, #0]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d001      	beq.n	8009c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	e032      	b.n	8009c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 0304 	and.w	r3, r3, #4
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d008      	beq.n	8009c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c20:	4b19      	ldr	r3, [pc, #100]	; (8009c88 <HAL_RCC_ClockConfig+0x1bc>)
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	4916      	ldr	r1, [pc, #88]	; (8009c88 <HAL_RCC_ClockConfig+0x1bc>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 0308 	and.w	r3, r3, #8
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d009      	beq.n	8009c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c3e:	4b12      	ldr	r3, [pc, #72]	; (8009c88 <HAL_RCC_ClockConfig+0x1bc>)
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	00db      	lsls	r3, r3, #3
 8009c4c:	490e      	ldr	r1, [pc, #56]	; (8009c88 <HAL_RCC_ClockConfig+0x1bc>)
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009c52:	f000 f821 	bl	8009c98 <HAL_RCC_GetSysClockFreq>
 8009c56:	4602      	mov	r2, r0
 8009c58:	4b0b      	ldr	r3, [pc, #44]	; (8009c88 <HAL_RCC_ClockConfig+0x1bc>)
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	091b      	lsrs	r3, r3, #4
 8009c5e:	f003 030f 	and.w	r3, r3, #15
 8009c62:	490a      	ldr	r1, [pc, #40]	; (8009c8c <HAL_RCC_ClockConfig+0x1c0>)
 8009c64:	5ccb      	ldrb	r3, [r1, r3]
 8009c66:	fa22 f303 	lsr.w	r3, r2, r3
 8009c6a:	4a09      	ldr	r2, [pc, #36]	; (8009c90 <HAL_RCC_ClockConfig+0x1c4>)
 8009c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009c6e:	4b09      	ldr	r3, [pc, #36]	; (8009c94 <HAL_RCC_ClockConfig+0x1c8>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fb fb0c 	bl	8005290 <HAL_InitTick>

  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	40023c00 	.word	0x40023c00
 8009c88:	40023800 	.word	0x40023800
 8009c8c:	0800f004 	.word	0x0800f004
 8009c90:	20000004 	.word	0x20000004
 8009c94:	2000014c 	.word	0x2000014c

08009c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009c9c:	b084      	sub	sp, #16
 8009c9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	607b      	str	r3, [r7, #4]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	60fb      	str	r3, [r7, #12]
 8009ca8:	2300      	movs	r3, #0
 8009caa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009cac:	2300      	movs	r3, #0
 8009cae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009cb0:	4b67      	ldr	r3, [pc, #412]	; (8009e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	f003 030c 	and.w	r3, r3, #12
 8009cb8:	2b08      	cmp	r3, #8
 8009cba:	d00d      	beq.n	8009cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8009cbc:	2b08      	cmp	r3, #8
 8009cbe:	f200 80bd 	bhi.w	8009e3c <HAL_RCC_GetSysClockFreq+0x1a4>
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d002      	beq.n	8009ccc <HAL_RCC_GetSysClockFreq+0x34>
 8009cc6:	2b04      	cmp	r3, #4
 8009cc8:	d003      	beq.n	8009cd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8009cca:	e0b7      	b.n	8009e3c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009ccc:	4b61      	ldr	r3, [pc, #388]	; (8009e54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009cce:	60bb      	str	r3, [r7, #8]
       break;
 8009cd0:	e0b7      	b.n	8009e42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009cd2:	4b61      	ldr	r3, [pc, #388]	; (8009e58 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009cd4:	60bb      	str	r3, [r7, #8]
      break;
 8009cd6:	e0b4      	b.n	8009e42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009cd8:	4b5d      	ldr	r3, [pc, #372]	; (8009e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ce0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009ce2:	4b5b      	ldr	r3, [pc, #364]	; (8009e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d04d      	beq.n	8009d8a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009cee:	4b58      	ldr	r3, [pc, #352]	; (8009e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	099b      	lsrs	r3, r3, #6
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	f04f 0300 	mov.w	r3, #0
 8009cfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009cfe:	f04f 0100 	mov.w	r1, #0
 8009d02:	ea02 0800 	and.w	r8, r2, r0
 8009d06:	ea03 0901 	and.w	r9, r3, r1
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	4649      	mov	r1, r9
 8009d0e:	f04f 0200 	mov.w	r2, #0
 8009d12:	f04f 0300 	mov.w	r3, #0
 8009d16:	014b      	lsls	r3, r1, #5
 8009d18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009d1c:	0142      	lsls	r2, r0, #5
 8009d1e:	4610      	mov	r0, r2
 8009d20:	4619      	mov	r1, r3
 8009d22:	ebb0 0008 	subs.w	r0, r0, r8
 8009d26:	eb61 0109 	sbc.w	r1, r1, r9
 8009d2a:	f04f 0200 	mov.w	r2, #0
 8009d2e:	f04f 0300 	mov.w	r3, #0
 8009d32:	018b      	lsls	r3, r1, #6
 8009d34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009d38:	0182      	lsls	r2, r0, #6
 8009d3a:	1a12      	subs	r2, r2, r0
 8009d3c:	eb63 0301 	sbc.w	r3, r3, r1
 8009d40:	f04f 0000 	mov.w	r0, #0
 8009d44:	f04f 0100 	mov.w	r1, #0
 8009d48:	00d9      	lsls	r1, r3, #3
 8009d4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d4e:	00d0      	lsls	r0, r2, #3
 8009d50:	4602      	mov	r2, r0
 8009d52:	460b      	mov	r3, r1
 8009d54:	eb12 0208 	adds.w	r2, r2, r8
 8009d58:	eb43 0309 	adc.w	r3, r3, r9
 8009d5c:	f04f 0000 	mov.w	r0, #0
 8009d60:	f04f 0100 	mov.w	r1, #0
 8009d64:	0259      	lsls	r1, r3, #9
 8009d66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009d6a:	0250      	lsls	r0, r2, #9
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	460b      	mov	r3, r1
 8009d70:	4610      	mov	r0, r2
 8009d72:	4619      	mov	r1, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	461a      	mov	r2, r3
 8009d78:	f04f 0300 	mov.w	r3, #0
 8009d7c:	f7f6 fef2 	bl	8000b64 <__aeabi_uldivmod>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	4613      	mov	r3, r2
 8009d86:	60fb      	str	r3, [r7, #12]
 8009d88:	e04a      	b.n	8009e20 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d8a:	4b31      	ldr	r3, [pc, #196]	; (8009e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	099b      	lsrs	r3, r3, #6
 8009d90:	461a      	mov	r2, r3
 8009d92:	f04f 0300 	mov.w	r3, #0
 8009d96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009d9a:	f04f 0100 	mov.w	r1, #0
 8009d9e:	ea02 0400 	and.w	r4, r2, r0
 8009da2:	ea03 0501 	and.w	r5, r3, r1
 8009da6:	4620      	mov	r0, r4
 8009da8:	4629      	mov	r1, r5
 8009daa:	f04f 0200 	mov.w	r2, #0
 8009dae:	f04f 0300 	mov.w	r3, #0
 8009db2:	014b      	lsls	r3, r1, #5
 8009db4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009db8:	0142      	lsls	r2, r0, #5
 8009dba:	4610      	mov	r0, r2
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	1b00      	subs	r0, r0, r4
 8009dc0:	eb61 0105 	sbc.w	r1, r1, r5
 8009dc4:	f04f 0200 	mov.w	r2, #0
 8009dc8:	f04f 0300 	mov.w	r3, #0
 8009dcc:	018b      	lsls	r3, r1, #6
 8009dce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009dd2:	0182      	lsls	r2, r0, #6
 8009dd4:	1a12      	subs	r2, r2, r0
 8009dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8009dda:	f04f 0000 	mov.w	r0, #0
 8009dde:	f04f 0100 	mov.w	r1, #0
 8009de2:	00d9      	lsls	r1, r3, #3
 8009de4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009de8:	00d0      	lsls	r0, r2, #3
 8009dea:	4602      	mov	r2, r0
 8009dec:	460b      	mov	r3, r1
 8009dee:	1912      	adds	r2, r2, r4
 8009df0:	eb45 0303 	adc.w	r3, r5, r3
 8009df4:	f04f 0000 	mov.w	r0, #0
 8009df8:	f04f 0100 	mov.w	r1, #0
 8009dfc:	0299      	lsls	r1, r3, #10
 8009dfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009e02:	0290      	lsls	r0, r2, #10
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	4610      	mov	r0, r2
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	f04f 0300 	mov.w	r3, #0
 8009e14:	f7f6 fea6 	bl	8000b64 <__aeabi_uldivmod>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009e20:	4b0b      	ldr	r3, [pc, #44]	; (8009e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	0c1b      	lsrs	r3, r3, #16
 8009e26:	f003 0303 	and.w	r3, r3, #3
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	005b      	lsls	r3, r3, #1
 8009e2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e38:	60bb      	str	r3, [r7, #8]
      break;
 8009e3a:	e002      	b.n	8009e42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009e3c:	4b05      	ldr	r3, [pc, #20]	; (8009e54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009e3e:	60bb      	str	r3, [r7, #8]
      break;
 8009e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009e42:	68bb      	ldr	r3, [r7, #8]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009e4e:	bf00      	nop
 8009e50:	40023800 	.word	0x40023800
 8009e54:	00f42400 	.word	0x00f42400
 8009e58:	007a1200 	.word	0x007a1200

08009e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009e60:	4b03      	ldr	r3, [pc, #12]	; (8009e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8009e62:	681b      	ldr	r3, [r3, #0]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	20000004 	.word	0x20000004

08009e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009e78:	f7ff fff0 	bl	8009e5c <HAL_RCC_GetHCLKFreq>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	4b05      	ldr	r3, [pc, #20]	; (8009e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	0a9b      	lsrs	r3, r3, #10
 8009e84:	f003 0307 	and.w	r3, r3, #7
 8009e88:	4903      	ldr	r1, [pc, #12]	; (8009e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e8a:	5ccb      	ldrb	r3, [r1, r3]
 8009e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	40023800 	.word	0x40023800
 8009e98:	0800f014 	.word	0x0800f014

08009e9c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d105      	bne.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d035      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009ec4:	4b62      	ldr	r3, [pc, #392]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009eca:	f7fb fa25 	bl	8005318 <HAL_GetTick>
 8009ece:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ed0:	e008      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009ed2:	f7fb fa21 	bl	8005318 <HAL_GetTick>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d901      	bls.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e0b0      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ee4:	4b5b      	ldr	r3, [pc, #364]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1f0      	bne.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	019a      	lsls	r2, r3, #6
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	071b      	lsls	r3, r3, #28
 8009efc:	4955      	ldr	r1, [pc, #340]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009efe:	4313      	orrs	r3, r2
 8009f00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009f04:	4b52      	ldr	r3, [pc, #328]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009f06:	2201      	movs	r2, #1
 8009f08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009f0a:	f7fb fa05 	bl	8005318 <HAL_GetTick>
 8009f0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f10:	e008      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009f12:	f7fb fa01 	bl	8005318 <HAL_GetTick>
 8009f16:	4602      	mov	r2, r0
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d901      	bls.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f20:	2303      	movs	r3, #3
 8009f22:	e090      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009f24:	4b4b      	ldr	r3, [pc, #300]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d0f0      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 0302 	and.w	r3, r3, #2
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f000 8083 	beq.w	800a044 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009f3e:	2300      	movs	r3, #0
 8009f40:	60fb      	str	r3, [r7, #12]
 8009f42:	4b44      	ldr	r3, [pc, #272]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f46:	4a43      	ldr	r2, [pc, #268]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8009f4e:	4b41      	ldr	r3, [pc, #260]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009f5a:	4b3f      	ldr	r3, [pc, #252]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a3e      	ldr	r2, [pc, #248]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f66:	f7fb f9d7 	bl	8005318 <HAL_GetTick>
 8009f6a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009f6c:	e008      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009f6e:	f7fb f9d3 	bl	8005318 <HAL_GetTick>
 8009f72:	4602      	mov	r2, r0
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d901      	bls.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	e062      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009f80:	4b35      	ldr	r3, [pc, #212]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d0f0      	beq.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009f8c:	4b31      	ldr	r3, [pc, #196]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f94:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d02f      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d028      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009faa:	4b2a      	ldr	r3, [pc, #168]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fb2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009fb4:	4b29      	ldr	r3, [pc, #164]	; (800a05c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009fba:	4b28      	ldr	r3, [pc, #160]	; (800a05c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009fc0:	4a24      	ldr	r2, [pc, #144]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009fc6:	4b23      	ldr	r3, [pc, #140]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d114      	bne.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009fd2:	f7fb f9a1 	bl	8005318 <HAL_GetTick>
 8009fd6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fd8:	e00a      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fda:	f7fb f99d 	bl	8005318 <HAL_GetTick>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d901      	bls.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e02a      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ff0:	4b18      	ldr	r3, [pc, #96]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff4:	f003 0302 	and.w	r3, r3, #2
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d0ee      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a004:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a008:	d10d      	bne.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a00a:	4b12      	ldr	r3, [pc, #72]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a01a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a01e:	490d      	ldr	r1, [pc, #52]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a020:	4313      	orrs	r3, r2
 800a022:	608b      	str	r3, [r1, #8]
 800a024:	e005      	b.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a026:	4b0b      	ldr	r3, [pc, #44]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	4a0a      	ldr	r2, [pc, #40]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a02c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a030:	6093      	str	r3, [r2, #8]
 800a032:	4b08      	ldr	r3, [pc, #32]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a034:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a03e:	4905      	ldr	r1, [pc, #20]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a040:	4313      	orrs	r3, r2
 800a042:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	42470068 	.word	0x42470068
 800a054:	40023800 	.word	0x40023800
 800a058:	40007000 	.word	0x40007000
 800a05c:	42470e40 	.word	0x42470e40

0800a060 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a060:	b480      	push	{r7}
 800a062:	b087      	sub	sp, #28
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800a068:	2300      	movs	r3, #0
 800a06a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800a06c:	2300      	movs	r3, #0
 800a06e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800a070:	2300      	movs	r3, #0
 800a072:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800a074:	2300      	movs	r3, #0
 800a076:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d13e      	bne.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800a07e:	4b23      	ldr	r3, [pc, #140]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a086:	60fb      	str	r3, [r7, #12]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d005      	beq.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2b01      	cmp	r3, #1
 800a092:	d12f      	bne.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800a094:	4b1e      	ldr	r3, [pc, #120]	; (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a096:	617b      	str	r3, [r7, #20]
          break;
 800a098:	e02f      	b.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a09a:	4b1c      	ldr	r3, [pc, #112]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0a6:	d108      	bne.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a0a8:	4b18      	ldr	r3, [pc, #96]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0b0:	4a18      	ldr	r2, [pc, #96]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a0b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0b6:	613b      	str	r3, [r7, #16]
 800a0b8:	e007      	b.n	800a0ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a0ba:	4b14      	ldr	r3, [pc, #80]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0c2:	4a15      	ldr	r2, [pc, #84]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800a0c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0c8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800a0ca:	4b10      	ldr	r3, [pc, #64]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a0cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0d0:	099b      	lsrs	r3, r3, #6
 800a0d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	fb02 f303 	mul.w	r3, r2, r3
 800a0dc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800a0de:	4b0b      	ldr	r3, [pc, #44]	; (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a0e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0e4:	0f1b      	lsrs	r3, r3, #28
 800a0e6:	f003 0307 	and.w	r3, r3, #7
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f0:	617b      	str	r3, [r7, #20]
          break;
 800a0f2:	e002      	b.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	617b      	str	r3, [r7, #20]
          break;
 800a0f8:	bf00      	nop
        }
      }
      break;
 800a0fa:	bf00      	nop
    }
  }
  return frequency;
 800a0fc:	697b      	ldr	r3, [r7, #20]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	371c      	adds	r7, #28
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	40023800 	.word	0x40023800
 800a110:	00bb8000 	.word	0x00bb8000
 800a114:	007a1200 	.word	0x007a1200
 800a118:	00f42400 	.word	0x00f42400

0800a11c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e01c      	b.n	800a168 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	795b      	ldrb	r3, [r3, #5]
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b00      	cmp	r3, #0
 800a136:	d105      	bne.n	800a144 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7f7 fe36 	bl	8001db0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2202      	movs	r2, #2
 800a148:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f042 0204 	orr.w	r2, r2, #4
 800a158:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	791b      	ldrb	r3, [r3, #4]
 800a182:	2b01      	cmp	r3, #1
 800a184:	d101      	bne.n	800a18a <HAL_RNG_GenerateRandomNumber+0x1a>
 800a186:	2302      	movs	r3, #2
 800a188:	e03d      	b.n	800a206 <HAL_RNG_GenerateRandomNumber+0x96>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2201      	movs	r2, #1
 800a18e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	795b      	ldrb	r3, [r3, #5]
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b01      	cmp	r3, #1
 800a198:	d12c      	bne.n	800a1f4 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2202      	movs	r2, #2
 800a19e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a1a0:	f7fb f8ba 	bl	8005318 <HAL_GetTick>
 800a1a4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a1a6:	e011      	b.n	800a1cc <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a1a8:	f7fb f8b6 	bl	8005318 <HAL_GetTick>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d90a      	bls.n	800a1cc <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2202      	movs	r2, #2
 800a1c0:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e01c      	b.n	800a206 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d1e6      	bne.n	800a1a8 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	689a      	ldr	r2, [r3, #8]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	68da      	ldr	r2, [r3, #12]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	715a      	strb	r2, [r3, #5]
 800a1f2:	e004      	b.n	800a1fe <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2204      	movs	r2, #4
 800a1f8:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	711a      	strb	r2, [r3, #4]

  return status;
 800a204:	7bfb      	ldrb	r3, [r7, #15]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b082      	sub	sp, #8
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	330c      	adds	r3, #12
 800a21a:	4619      	mov	r1, r3
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f7ff ffa7 	bl	800a170 <HAL_RNG_GenerateRandomNumber>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d102      	bne.n	800a22e <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	e000      	b.n	800a230 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 800a22e:	2300      	movs	r3, #0
  }
}
 800a230:	4618      	mov	r0, r3
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d101      	bne.n	800a24a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e07b      	b.n	800a342 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d108      	bne.n	800a264 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a25a:	d009      	beq.n	800a270 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	61da      	str	r2, [r3, #28]
 800a262:	e005      	b.n	800a270 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d106      	bne.n	800a290 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f7f7 fdb2 	bl	8001df4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2202      	movs	r2, #2
 800a294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a2b8:	431a      	orrs	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2c2:	431a      	orrs	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	f003 0302 	and.w	r3, r3, #2
 800a2cc:	431a      	orrs	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	f003 0301 	and.w	r3, r3, #1
 800a2d6:	431a      	orrs	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2e0:	431a      	orrs	r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	69db      	ldr	r3, [r3, #28]
 800a2e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2ea:	431a      	orrs	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a1b      	ldr	r3, [r3, #32]
 800a2f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f4:	ea42 0103 	orr.w	r1, r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	430a      	orrs	r2, r1
 800a306:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	0c1b      	lsrs	r3, r3, #16
 800a30e:	f003 0104 	and.w	r1, r3, #4
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a316:	f003 0210 	and.w	r2, r3, #16
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	430a      	orrs	r2, r1
 800a320:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	69da      	ldr	r2, [r3, #28]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a330:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b088      	sub	sp, #32
 800a34e:	af00      	add	r7, sp, #0
 800a350:	60f8      	str	r0, [r7, #12]
 800a352:	60b9      	str	r1, [r7, #8]
 800a354:	603b      	str	r3, [r7, #0]
 800a356:	4613      	mov	r3, r2
 800a358:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a364:	2b01      	cmp	r3, #1
 800a366:	d101      	bne.n	800a36c <HAL_SPI_Transmit+0x22>
 800a368:	2302      	movs	r3, #2
 800a36a:	e126      	b.n	800a5ba <HAL_SPI_Transmit+0x270>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a374:	f7fa ffd0 	bl	8005318 <HAL_GetTick>
 800a378:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a37a:	88fb      	ldrh	r3, [r7, #6]
 800a37c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b01      	cmp	r3, #1
 800a388:	d002      	beq.n	800a390 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a38a:	2302      	movs	r3, #2
 800a38c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a38e:	e10b      	b.n	800a5a8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d002      	beq.n	800a39c <HAL_SPI_Transmit+0x52>
 800a396:	88fb      	ldrh	r3, [r7, #6]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d102      	bne.n	800a3a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a3a0:	e102      	b.n	800a5a8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2203      	movs	r2, #3
 800a3a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	88fa      	ldrh	r2, [r7, #6]
 800a3ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	88fa      	ldrh	r2, [r7, #6]
 800a3c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3e8:	d10f      	bne.n	800a40a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a408:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a414:	2b40      	cmp	r3, #64	; 0x40
 800a416:	d007      	beq.n	800a428 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a426:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a430:	d14b      	bne.n	800a4ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d002      	beq.n	800a440 <HAL_SPI_Transmit+0xf6>
 800a43a:	8afb      	ldrh	r3, [r7, #22]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d13e      	bne.n	800a4be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a444:	881a      	ldrh	r2, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a450:	1c9a      	adds	r2, r3, #2
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	3b01      	subs	r3, #1
 800a45e:	b29a      	uxth	r2, r3
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a464:	e02b      	b.n	800a4be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	f003 0302 	and.w	r3, r3, #2
 800a470:	2b02      	cmp	r3, #2
 800a472:	d112      	bne.n	800a49a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a478:	881a      	ldrh	r2, [r3, #0]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a484:	1c9a      	adds	r2, r3, #2
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a48e:	b29b      	uxth	r3, r3
 800a490:	3b01      	subs	r3, #1
 800a492:	b29a      	uxth	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	86da      	strh	r2, [r3, #54]	; 0x36
 800a498:	e011      	b.n	800a4be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a49a:	f7fa ff3d 	bl	8005318 <HAL_GetTick>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	1ad3      	subs	r3, r2, r3
 800a4a4:	683a      	ldr	r2, [r7, #0]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d803      	bhi.n	800a4b2 <HAL_SPI_Transmit+0x168>
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4b0:	d102      	bne.n	800a4b8 <HAL_SPI_Transmit+0x16e>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d102      	bne.n	800a4be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a4bc:	e074      	b.n	800a5a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d1ce      	bne.n	800a466 <HAL_SPI_Transmit+0x11c>
 800a4c8:	e04c      	b.n	800a564 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d002      	beq.n	800a4d8 <HAL_SPI_Transmit+0x18e>
 800a4d2:	8afb      	ldrh	r3, [r7, #22]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d140      	bne.n	800a55a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	330c      	adds	r3, #12
 800a4e2:	7812      	ldrb	r2, [r2, #0]
 800a4e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ea:	1c5a      	adds	r2, r3, #1
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a4fe:	e02c      	b.n	800a55a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	f003 0302 	and.w	r3, r3, #2
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d113      	bne.n	800a536 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	330c      	adds	r3, #12
 800a518:	7812      	ldrb	r2, [r2, #0]
 800a51a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a520:	1c5a      	adds	r2, r3, #1
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	3b01      	subs	r3, #1
 800a52e:	b29a      	uxth	r2, r3
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	86da      	strh	r2, [r3, #54]	; 0x36
 800a534:	e011      	b.n	800a55a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a536:	f7fa feef 	bl	8005318 <HAL_GetTick>
 800a53a:	4602      	mov	r2, r0
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	683a      	ldr	r2, [r7, #0]
 800a542:	429a      	cmp	r2, r3
 800a544:	d803      	bhi.n	800a54e <HAL_SPI_Transmit+0x204>
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a54c:	d102      	bne.n	800a554 <HAL_SPI_Transmit+0x20a>
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d102      	bne.n	800a55a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a554:	2303      	movs	r3, #3
 800a556:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a558:	e026      	b.n	800a5a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a55e:	b29b      	uxth	r3, r3
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1cd      	bne.n	800a500 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a564:	69ba      	ldr	r2, [r7, #24]
 800a566:	6839      	ldr	r1, [r7, #0]
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f000 f8b3 	bl	800a6d4 <SPI_EndRxTxTransaction>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d002      	beq.n	800a57a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2220      	movs	r2, #32
 800a578:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10a      	bne.n	800a598 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a582:	2300      	movs	r3, #0
 800a584:	613b      	str	r3, [r7, #16]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	613b      	str	r3, [r7, #16]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	613b      	str	r3, [r7, #16]
 800a596:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d002      	beq.n	800a5a6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	77fb      	strb	r3, [r7, #31]
 800a5a4:	e000      	b.n	800a5a8 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a5a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a5b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3720      	adds	r7, #32
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
	...

0800a5c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b088      	sub	sp, #32
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	603b      	str	r3, [r7, #0]
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a5d4:	f7fa fea0 	bl	8005318 <HAL_GetTick>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5dc:	1a9b      	subs	r3, r3, r2
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a5e4:	f7fa fe98 	bl	8005318 <HAL_GetTick>
 800a5e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a5ea:	4b39      	ldr	r3, [pc, #228]	; (800a6d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	015b      	lsls	r3, r3, #5
 800a5f0:	0d1b      	lsrs	r3, r3, #20
 800a5f2:	69fa      	ldr	r2, [r7, #28]
 800a5f4:	fb02 f303 	mul.w	r3, r2, r3
 800a5f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5fa:	e054      	b.n	800a6a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a602:	d050      	beq.n	800a6a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a604:	f7fa fe88 	bl	8005318 <HAL_GetTick>
 800a608:	4602      	mov	r2, r0
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	1ad3      	subs	r3, r2, r3
 800a60e:	69fa      	ldr	r2, [r7, #28]
 800a610:	429a      	cmp	r2, r3
 800a612:	d902      	bls.n	800a61a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d13d      	bne.n	800a696 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	685a      	ldr	r2, [r3, #4]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a628:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a632:	d111      	bne.n	800a658 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a63c:	d004      	beq.n	800a648 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a646:	d107      	bne.n	800a658 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a656:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a660:	d10f      	bne.n	800a682 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a670:	601a      	str	r2, [r3, #0]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a680:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a692:	2303      	movs	r3, #3
 800a694:	e017      	b.n	800a6c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d101      	bne.n	800a6a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a69c:	2300      	movs	r3, #0
 800a69e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	689a      	ldr	r2, [r3, #8]
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	68ba      	ldr	r2, [r7, #8]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	bf0c      	ite	eq
 800a6b6:	2301      	moveq	r3, #1
 800a6b8:	2300      	movne	r3, #0
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	461a      	mov	r2, r3
 800a6be:	79fb      	ldrb	r3, [r7, #7]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d19b      	bne.n	800a5fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3720      	adds	r7, #32
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	20000004 	.word	0x20000004

0800a6d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b088      	sub	sp, #32
 800a6d8:	af02      	add	r7, sp, #8
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a6e0:	4b1b      	ldr	r3, [pc, #108]	; (800a750 <SPI_EndRxTxTransaction+0x7c>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a1b      	ldr	r2, [pc, #108]	; (800a754 <SPI_EndRxTxTransaction+0x80>)
 800a6e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ea:	0d5b      	lsrs	r3, r3, #21
 800a6ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a6f0:	fb02 f303 	mul.w	r3, r2, r3
 800a6f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6fe:	d112      	bne.n	800a726 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	2200      	movs	r2, #0
 800a708:	2180      	movs	r1, #128	; 0x80
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f7ff ff5a 	bl	800a5c4 <SPI_WaitFlagStateUntilTimeout>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d016      	beq.n	800a744 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a71a:	f043 0220 	orr.w	r2, r3, #32
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a722:	2303      	movs	r3, #3
 800a724:	e00f      	b.n	800a746 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d00a      	beq.n	800a742 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	3b01      	subs	r3, #1
 800a730:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a73c:	2b80      	cmp	r3, #128	; 0x80
 800a73e:	d0f2      	beq.n	800a726 <SPI_EndRxTxTransaction+0x52>
 800a740:	e000      	b.n	800a744 <SPI_EndRxTxTransaction+0x70>
        break;
 800a742:	bf00      	nop
  }

  return HAL_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3718      	adds	r7, #24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	20000004 	.word	0x20000004
 800a754:	165e9f81 	.word	0x165e9f81

0800a758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d101      	bne.n	800a76a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	e041      	b.n	800a7ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b00      	cmp	r3, #0
 800a774:	d106      	bne.n	800a784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f7f7 fc1e 	bl	8001fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2202      	movs	r2, #2
 800a788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	3304      	adds	r3, #4
 800a794:	4619      	mov	r1, r3
 800a796:	4610      	mov	r0, r2
 800a798:	f000 fd68 	bl	800b26c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3708      	adds	r7, #8
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
	...

0800a7f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a806:	b2db      	uxtb	r3, r3
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d001      	beq.n	800a810 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	e04e      	b.n	800a8ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2202      	movs	r2, #2
 800a814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68da      	ldr	r2, [r3, #12]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f042 0201 	orr.w	r2, r2, #1
 800a826:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a23      	ldr	r2, [pc, #140]	; (800a8bc <HAL_TIM_Base_Start_IT+0xc4>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d022      	beq.n	800a878 <HAL_TIM_Base_Start_IT+0x80>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a83a:	d01d      	beq.n	800a878 <HAL_TIM_Base_Start_IT+0x80>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a1f      	ldr	r2, [pc, #124]	; (800a8c0 <HAL_TIM_Base_Start_IT+0xc8>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d018      	beq.n	800a878 <HAL_TIM_Base_Start_IT+0x80>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a1e      	ldr	r2, [pc, #120]	; (800a8c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d013      	beq.n	800a878 <HAL_TIM_Base_Start_IT+0x80>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a1c      	ldr	r2, [pc, #112]	; (800a8c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d00e      	beq.n	800a878 <HAL_TIM_Base_Start_IT+0x80>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a1b      	ldr	r2, [pc, #108]	; (800a8cc <HAL_TIM_Base_Start_IT+0xd4>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d009      	beq.n	800a878 <HAL_TIM_Base_Start_IT+0x80>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a19      	ldr	r2, [pc, #100]	; (800a8d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d004      	beq.n	800a878 <HAL_TIM_Base_Start_IT+0x80>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a18      	ldr	r2, [pc, #96]	; (800a8d4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d111      	bne.n	800a89c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	f003 0307 	and.w	r3, r3, #7
 800a882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2b06      	cmp	r3, #6
 800a888:	d010      	beq.n	800a8ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f042 0201 	orr.w	r2, r2, #1
 800a898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a89a:	e007      	b.n	800a8ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f042 0201 	orr.w	r2, r2, #1
 800a8aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3714      	adds	r7, #20
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	40010000 	.word	0x40010000
 800a8c0:	40000400 	.word	0x40000400
 800a8c4:	40000800 	.word	0x40000800
 800a8c8:	40000c00 	.word	0x40000c00
 800a8cc:	40010400 	.word	0x40010400
 800a8d0:	40014000 	.word	0x40014000
 800a8d4:	40001800 	.word	0x40001800

0800a8d8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d109      	bne.n	800a8fc <HAL_TIM_OC_Start_IT+0x24>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	bf14      	ite	ne
 800a8f4:	2301      	movne	r3, #1
 800a8f6:	2300      	moveq	r3, #0
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	e022      	b.n	800a942 <HAL_TIM_OC_Start_IT+0x6a>
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	2b04      	cmp	r3, #4
 800a900:	d109      	bne.n	800a916 <HAL_TIM_OC_Start_IT+0x3e>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	bf14      	ite	ne
 800a90e:	2301      	movne	r3, #1
 800a910:	2300      	moveq	r3, #0
 800a912:	b2db      	uxtb	r3, r3
 800a914:	e015      	b.n	800a942 <HAL_TIM_OC_Start_IT+0x6a>
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	2b08      	cmp	r3, #8
 800a91a:	d109      	bne.n	800a930 <HAL_TIM_OC_Start_IT+0x58>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b01      	cmp	r3, #1
 800a926:	bf14      	ite	ne
 800a928:	2301      	movne	r3, #1
 800a92a:	2300      	moveq	r3, #0
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	e008      	b.n	800a942 <HAL_TIM_OC_Start_IT+0x6a>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b01      	cmp	r3, #1
 800a93a:	bf14      	ite	ne
 800a93c:	2301      	movne	r3, #1
 800a93e:	2300      	moveq	r3, #0
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b00      	cmp	r3, #0
 800a944:	d001      	beq.n	800a94a <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e0c2      	b.n	800aad0 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d104      	bne.n	800a95a <HAL_TIM_OC_Start_IT+0x82>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2202      	movs	r2, #2
 800a954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a958:	e013      	b.n	800a982 <HAL_TIM_OC_Start_IT+0xaa>
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	2b04      	cmp	r3, #4
 800a95e:	d104      	bne.n	800a96a <HAL_TIM_OC_Start_IT+0x92>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2202      	movs	r2, #2
 800a964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a968:	e00b      	b.n	800a982 <HAL_TIM_OC_Start_IT+0xaa>
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	2b08      	cmp	r3, #8
 800a96e:	d104      	bne.n	800a97a <HAL_TIM_OC_Start_IT+0xa2>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2202      	movs	r2, #2
 800a974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a978:	e003      	b.n	800a982 <HAL_TIM_OC_Start_IT+0xaa>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2202      	movs	r2, #2
 800a97e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	2b0c      	cmp	r3, #12
 800a986:	d841      	bhi.n	800aa0c <HAL_TIM_OC_Start_IT+0x134>
 800a988:	a201      	add	r2, pc, #4	; (adr r2, 800a990 <HAL_TIM_OC_Start_IT+0xb8>)
 800a98a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98e:	bf00      	nop
 800a990:	0800a9c5 	.word	0x0800a9c5
 800a994:	0800aa0d 	.word	0x0800aa0d
 800a998:	0800aa0d 	.word	0x0800aa0d
 800a99c:	0800aa0d 	.word	0x0800aa0d
 800a9a0:	0800a9d7 	.word	0x0800a9d7
 800a9a4:	0800aa0d 	.word	0x0800aa0d
 800a9a8:	0800aa0d 	.word	0x0800aa0d
 800a9ac:	0800aa0d 	.word	0x0800aa0d
 800a9b0:	0800a9e9 	.word	0x0800a9e9
 800a9b4:	0800aa0d 	.word	0x0800aa0d
 800a9b8:	0800aa0d 	.word	0x0800aa0d
 800a9bc:	0800aa0d 	.word	0x0800aa0d
 800a9c0:	0800a9fb 	.word	0x0800a9fb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68da      	ldr	r2, [r3, #12]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f042 0202 	orr.w	r2, r2, #2
 800a9d2:	60da      	str	r2, [r3, #12]
      break;
 800a9d4:	e01b      	b.n	800aa0e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68da      	ldr	r2, [r3, #12]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f042 0204 	orr.w	r2, r2, #4
 800a9e4:	60da      	str	r2, [r3, #12]
      break;
 800a9e6:	e012      	b.n	800aa0e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	68da      	ldr	r2, [r3, #12]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f042 0208 	orr.w	r2, r2, #8
 800a9f6:	60da      	str	r2, [r3, #12]
      break;
 800a9f8:	e009      	b.n	800aa0e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68da      	ldr	r2, [r3, #12]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f042 0210 	orr.w	r2, r2, #16
 800aa08:	60da      	str	r2, [r3, #12]
      break;
 800aa0a:	e000      	b.n	800aa0e <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 800aa0c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2201      	movs	r2, #1
 800aa14:	6839      	ldr	r1, [r7, #0]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 ff12 	bl	800b840 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a2d      	ldr	r2, [pc, #180]	; (800aad8 <HAL_TIM_OC_Start_IT+0x200>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d004      	beq.n	800aa30 <HAL_TIM_OC_Start_IT+0x158>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a2c      	ldr	r2, [pc, #176]	; (800aadc <HAL_TIM_OC_Start_IT+0x204>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d101      	bne.n	800aa34 <HAL_TIM_OC_Start_IT+0x15c>
 800aa30:	2301      	movs	r3, #1
 800aa32:	e000      	b.n	800aa36 <HAL_TIM_OC_Start_IT+0x15e>
 800aa34:	2300      	movs	r3, #0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d007      	beq.n	800aa4a <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a22      	ldr	r2, [pc, #136]	; (800aad8 <HAL_TIM_OC_Start_IT+0x200>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d022      	beq.n	800aa9a <HAL_TIM_OC_Start_IT+0x1c2>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa5c:	d01d      	beq.n	800aa9a <HAL_TIM_OC_Start_IT+0x1c2>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a1f      	ldr	r2, [pc, #124]	; (800aae0 <HAL_TIM_OC_Start_IT+0x208>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d018      	beq.n	800aa9a <HAL_TIM_OC_Start_IT+0x1c2>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a1d      	ldr	r2, [pc, #116]	; (800aae4 <HAL_TIM_OC_Start_IT+0x20c>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d013      	beq.n	800aa9a <HAL_TIM_OC_Start_IT+0x1c2>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a1c      	ldr	r2, [pc, #112]	; (800aae8 <HAL_TIM_OC_Start_IT+0x210>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d00e      	beq.n	800aa9a <HAL_TIM_OC_Start_IT+0x1c2>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a16      	ldr	r2, [pc, #88]	; (800aadc <HAL_TIM_OC_Start_IT+0x204>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d009      	beq.n	800aa9a <HAL_TIM_OC_Start_IT+0x1c2>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a18      	ldr	r2, [pc, #96]	; (800aaec <HAL_TIM_OC_Start_IT+0x214>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d004      	beq.n	800aa9a <HAL_TIM_OC_Start_IT+0x1c2>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a16      	ldr	r2, [pc, #88]	; (800aaf0 <HAL_TIM_OC_Start_IT+0x218>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d111      	bne.n	800aabe <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	f003 0307 	and.w	r3, r3, #7
 800aaa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2b06      	cmp	r3, #6
 800aaaa:	d010      	beq.n	800aace <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f042 0201 	orr.w	r2, r2, #1
 800aaba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aabc:	e007      	b.n	800aace <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f042 0201 	orr.w	r2, r2, #1
 800aacc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	40010000 	.word	0x40010000
 800aadc:	40010400 	.word	0x40010400
 800aae0:	40000400 	.word	0x40000400
 800aae4:	40000800 	.word	0x40000800
 800aae8:	40000c00 	.word	0x40000c00
 800aaec:	40014000 	.word	0x40014000
 800aaf0:	40001800 	.word	0x40001800

0800aaf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d101      	bne.n	800ab06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	e041      	b.n	800ab8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d106      	bne.n	800ab20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 f839 	bl	800ab92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2202      	movs	r2, #2
 800ab24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	3304      	adds	r3, #4
 800ab30:	4619      	mov	r1, r3
 800ab32:	4610      	mov	r0, r2
 800ab34:	f000 fb9a 	bl	800b26c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2201      	movs	r2, #1
 800ab54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3708      	adds	r7, #8
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ab92:	b480      	push	{r7}
 800ab94:	b083      	sub	sp, #12
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ab9a:	bf00      	nop
 800ab9c:	370c      	adds	r7, #12
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr

0800aba6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b086      	sub	sp, #24
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
 800abae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e097      	b.n	800acea <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d106      	bne.n	800abd4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f7f7 f9ae 	bl	8001f30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2202      	movs	r2, #2
 800abd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	6812      	ldr	r2, [r2, #0]
 800abe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abea:	f023 0307 	bic.w	r3, r3, #7
 800abee:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	3304      	adds	r3, #4
 800abf8:	4619      	mov	r1, r3
 800abfa:	4610      	mov	r0, r2
 800abfc:	f000 fb36 	bl	800b26c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac28:	f023 0303 	bic.w	r3, r3, #3
 800ac2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	689a      	ldr	r2, [r3, #8]
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	699b      	ldr	r3, [r3, #24]
 800ac36:	021b      	lsls	r3, r3, #8
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	693a      	ldr	r2, [r7, #16]
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ac46:	f023 030c 	bic.w	r3, r3, #12
 800ac4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	68da      	ldr	r2, [r3, #12]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	69db      	ldr	r3, [r3, #28]
 800ac60:	021b      	lsls	r3, r3, #8
 800ac62:	4313      	orrs	r3, r2
 800ac64:	693a      	ldr	r2, [r7, #16]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	011a      	lsls	r2, r3, #4
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	6a1b      	ldr	r3, [r3, #32]
 800ac74:	031b      	lsls	r3, r3, #12
 800ac76:	4313      	orrs	r3, r2
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ac84:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ac8c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	685a      	ldr	r2, [r3, #4]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	695b      	ldr	r3, [r3, #20]
 800ac96:	011b      	lsls	r3, r3, #4
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	693a      	ldr	r2, [r7, #16]
 800acae:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b082      	sub	sp, #8
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	f003 0302 	and.w	r3, r3, #2
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	d122      	bne.n	800ad4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	f003 0302 	and.w	r3, r3, #2
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d11b      	bne.n	800ad4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f06f 0202 	mvn.w	r2, #2
 800ad1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	699b      	ldr	r3, [r3, #24]
 800ad2c:	f003 0303 	and.w	r3, r3, #3
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d003      	beq.n	800ad3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fa7b 	bl	800b230 <HAL_TIM_IC_CaptureCallback>
 800ad3a:	e005      	b.n	800ad48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 fa6d 	bl	800b21c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fa7e 	bl	800b244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	f003 0304 	and.w	r3, r3, #4
 800ad58:	2b04      	cmp	r3, #4
 800ad5a:	d122      	bne.n	800ada2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	f003 0304 	and.w	r3, r3, #4
 800ad66:	2b04      	cmp	r3, #4
 800ad68:	d11b      	bne.n	800ada2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f06f 0204 	mvn.w	r2, #4
 800ad72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2202      	movs	r2, #2
 800ad78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d003      	beq.n	800ad90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fa51 	bl	800b230 <HAL_TIM_IC_CaptureCallback>
 800ad8e:	e005      	b.n	800ad9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 fa43 	bl	800b21c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 fa54 	bl	800b244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	691b      	ldr	r3, [r3, #16]
 800ada8:	f003 0308 	and.w	r3, r3, #8
 800adac:	2b08      	cmp	r3, #8
 800adae:	d122      	bne.n	800adf6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	f003 0308 	and.w	r3, r3, #8
 800adba:	2b08      	cmp	r3, #8
 800adbc:	d11b      	bne.n	800adf6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f06f 0208 	mvn.w	r2, #8
 800adc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2204      	movs	r2, #4
 800adcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	69db      	ldr	r3, [r3, #28]
 800add4:	f003 0303 	and.w	r3, r3, #3
 800add8:	2b00      	cmp	r3, #0
 800adda:	d003      	beq.n	800ade4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fa27 	bl	800b230 <HAL_TIM_IC_CaptureCallback>
 800ade2:	e005      	b.n	800adf0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fa19 	bl	800b21c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 fa2a 	bl	800b244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	f003 0310 	and.w	r3, r3, #16
 800ae00:	2b10      	cmp	r3, #16
 800ae02:	d122      	bne.n	800ae4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	f003 0310 	and.w	r3, r3, #16
 800ae0e:	2b10      	cmp	r3, #16
 800ae10:	d11b      	bne.n	800ae4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f06f 0210 	mvn.w	r2, #16
 800ae1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2208      	movs	r2, #8
 800ae20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	69db      	ldr	r3, [r3, #28]
 800ae28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d003      	beq.n	800ae38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 f9fd 	bl	800b230 <HAL_TIM_IC_CaptureCallback>
 800ae36:	e005      	b.n	800ae44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 f9ef 	bl	800b21c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 fa00 	bl	800b244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	691b      	ldr	r3, [r3, #16]
 800ae50:	f003 0301 	and.w	r3, r3, #1
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d10e      	bne.n	800ae76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68db      	ldr	r3, [r3, #12]
 800ae5e:	f003 0301 	and.w	r3, r3, #1
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d107      	bne.n	800ae76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f06f 0201 	mvn.w	r2, #1
 800ae6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 f9c9 	bl	800b208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	691b      	ldr	r3, [r3, #16]
 800ae7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae80:	2b80      	cmp	r3, #128	; 0x80
 800ae82:	d10e      	bne.n	800aea2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae8e:	2b80      	cmp	r3, #128	; 0x80
 800ae90:	d107      	bne.n	800aea2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ae9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 fd7b 	bl	800b998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeac:	2b40      	cmp	r3, #64	; 0x40
 800aeae:	d10e      	bne.n	800aece <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeba:	2b40      	cmp	r3, #64	; 0x40
 800aebc:	d107      	bne.n	800aece <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f9c5 	bl	800b258 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	f003 0320 	and.w	r3, r3, #32
 800aed8:	2b20      	cmp	r3, #32
 800aeda:	d10e      	bne.n	800aefa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	f003 0320 	and.w	r3, r3, #32
 800aee6:	2b20      	cmp	r3, #32
 800aee8:	d107      	bne.n	800aefa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f06f 0220 	mvn.w	r2, #32
 800aef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fd45 	bl	800b984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aefa:	bf00      	nop
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
	...

0800af04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af16:	2b01      	cmp	r3, #1
 800af18:	d101      	bne.n	800af1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800af1a:	2302      	movs	r3, #2
 800af1c:	e0ac      	b.n	800b078 <HAL_TIM_PWM_ConfigChannel+0x174>
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2201      	movs	r2, #1
 800af22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b0c      	cmp	r3, #12
 800af2a:	f200 809f 	bhi.w	800b06c <HAL_TIM_PWM_ConfigChannel+0x168>
 800af2e:	a201      	add	r2, pc, #4	; (adr r2, 800af34 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800af30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af34:	0800af69 	.word	0x0800af69
 800af38:	0800b06d 	.word	0x0800b06d
 800af3c:	0800b06d 	.word	0x0800b06d
 800af40:	0800b06d 	.word	0x0800b06d
 800af44:	0800afa9 	.word	0x0800afa9
 800af48:	0800b06d 	.word	0x0800b06d
 800af4c:	0800b06d 	.word	0x0800b06d
 800af50:	0800b06d 	.word	0x0800b06d
 800af54:	0800afeb 	.word	0x0800afeb
 800af58:	0800b06d 	.word	0x0800b06d
 800af5c:	0800b06d 	.word	0x0800b06d
 800af60:	0800b06d 	.word	0x0800b06d
 800af64:	0800b02b 	.word	0x0800b02b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68b9      	ldr	r1, [r7, #8]
 800af6e:	4618      	mov	r0, r3
 800af70:	f000 fa1c 	bl	800b3ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	699a      	ldr	r2, [r3, #24]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f042 0208 	orr.w	r2, r2, #8
 800af82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	699a      	ldr	r2, [r3, #24]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f022 0204 	bic.w	r2, r2, #4
 800af92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	6999      	ldr	r1, [r3, #24]
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	691a      	ldr	r2, [r3, #16]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	430a      	orrs	r2, r1
 800afa4:	619a      	str	r2, [r3, #24]
      break;
 800afa6:	e062      	b.n	800b06e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68b9      	ldr	r1, [r7, #8]
 800afae:	4618      	mov	r0, r3
 800afb0:	f000 fa6c 	bl	800b48c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	699a      	ldr	r2, [r3, #24]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	699a      	ldr	r2, [r3, #24]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	6999      	ldr	r1, [r3, #24]
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	021a      	lsls	r2, r3, #8
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	430a      	orrs	r2, r1
 800afe6:	619a      	str	r2, [r3, #24]
      break;
 800afe8:	e041      	b.n	800b06e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	68b9      	ldr	r1, [r7, #8]
 800aff0:	4618      	mov	r0, r3
 800aff2:	f000 fac1 	bl	800b578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	69da      	ldr	r2, [r3, #28]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f042 0208 	orr.w	r2, r2, #8
 800b004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	69da      	ldr	r2, [r3, #28]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f022 0204 	bic.w	r2, r2, #4
 800b014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	69d9      	ldr	r1, [r3, #28]
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	691a      	ldr	r2, [r3, #16]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	430a      	orrs	r2, r1
 800b026:	61da      	str	r2, [r3, #28]
      break;
 800b028:	e021      	b.n	800b06e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	68b9      	ldr	r1, [r7, #8]
 800b030:	4618      	mov	r0, r3
 800b032:	f000 fb15 	bl	800b660 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	69da      	ldr	r2, [r3, #28]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	69da      	ldr	r2, [r3, #28]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	69d9      	ldr	r1, [r3, #28]
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	691b      	ldr	r3, [r3, #16]
 800b060:	021a      	lsls	r2, r3, #8
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	430a      	orrs	r2, r1
 800b068:	61da      	str	r2, [r3, #28]
      break;
 800b06a:	e000      	b.n	800b06e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800b06c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2200      	movs	r2, #0
 800b072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b090:	2b01      	cmp	r3, #1
 800b092:	d101      	bne.n	800b098 <HAL_TIM_ConfigClockSource+0x18>
 800b094:	2302      	movs	r3, #2
 800b096:	e0b3      	b.n	800b200 <HAL_TIM_ConfigClockSource+0x180>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b0b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0d0:	d03e      	beq.n	800b150 <HAL_TIM_ConfigClockSource+0xd0>
 800b0d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0d6:	f200 8087 	bhi.w	800b1e8 <HAL_TIM_ConfigClockSource+0x168>
 800b0da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0de:	f000 8085 	beq.w	800b1ec <HAL_TIM_ConfigClockSource+0x16c>
 800b0e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0e6:	d87f      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x168>
 800b0e8:	2b70      	cmp	r3, #112	; 0x70
 800b0ea:	d01a      	beq.n	800b122 <HAL_TIM_ConfigClockSource+0xa2>
 800b0ec:	2b70      	cmp	r3, #112	; 0x70
 800b0ee:	d87b      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x168>
 800b0f0:	2b60      	cmp	r3, #96	; 0x60
 800b0f2:	d050      	beq.n	800b196 <HAL_TIM_ConfigClockSource+0x116>
 800b0f4:	2b60      	cmp	r3, #96	; 0x60
 800b0f6:	d877      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x168>
 800b0f8:	2b50      	cmp	r3, #80	; 0x50
 800b0fa:	d03c      	beq.n	800b176 <HAL_TIM_ConfigClockSource+0xf6>
 800b0fc:	2b50      	cmp	r3, #80	; 0x50
 800b0fe:	d873      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x168>
 800b100:	2b40      	cmp	r3, #64	; 0x40
 800b102:	d058      	beq.n	800b1b6 <HAL_TIM_ConfigClockSource+0x136>
 800b104:	2b40      	cmp	r3, #64	; 0x40
 800b106:	d86f      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x168>
 800b108:	2b30      	cmp	r3, #48	; 0x30
 800b10a:	d064      	beq.n	800b1d6 <HAL_TIM_ConfigClockSource+0x156>
 800b10c:	2b30      	cmp	r3, #48	; 0x30
 800b10e:	d86b      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x168>
 800b110:	2b20      	cmp	r3, #32
 800b112:	d060      	beq.n	800b1d6 <HAL_TIM_ConfigClockSource+0x156>
 800b114:	2b20      	cmp	r3, #32
 800b116:	d867      	bhi.n	800b1e8 <HAL_TIM_ConfigClockSource+0x168>
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d05c      	beq.n	800b1d6 <HAL_TIM_ConfigClockSource+0x156>
 800b11c:	2b10      	cmp	r3, #16
 800b11e:	d05a      	beq.n	800b1d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b120:	e062      	b.n	800b1e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6818      	ldr	r0, [r3, #0]
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	6899      	ldr	r1, [r3, #8]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	685a      	ldr	r2, [r3, #4]
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	f000 fb65 	bl	800b800 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b144:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	609a      	str	r2, [r3, #8]
      break;
 800b14e:	e04e      	b.n	800b1ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6818      	ldr	r0, [r3, #0]
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	6899      	ldr	r1, [r3, #8]
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	685a      	ldr	r2, [r3, #4]
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	f000 fb4e 	bl	800b800 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	689a      	ldr	r2, [r3, #8]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b172:	609a      	str	r2, [r3, #8]
      break;
 800b174:	e03b      	b.n	800b1ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6818      	ldr	r0, [r3, #0]
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	6859      	ldr	r1, [r3, #4]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	461a      	mov	r2, r3
 800b184:	f000 fac2 	bl	800b70c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2150      	movs	r1, #80	; 0x50
 800b18e:	4618      	mov	r0, r3
 800b190:	f000 fb1b 	bl	800b7ca <TIM_ITRx_SetConfig>
      break;
 800b194:	e02b      	b.n	800b1ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6818      	ldr	r0, [r3, #0]
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	6859      	ldr	r1, [r3, #4]
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	f000 fae1 	bl	800b76a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2160      	movs	r1, #96	; 0x60
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f000 fb0b 	bl	800b7ca <TIM_ITRx_SetConfig>
      break;
 800b1b4:	e01b      	b.n	800b1ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6818      	ldr	r0, [r3, #0]
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	6859      	ldr	r1, [r3, #4]
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	68db      	ldr	r3, [r3, #12]
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	f000 faa2 	bl	800b70c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2140      	movs	r1, #64	; 0x40
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 fafb 	bl	800b7ca <TIM_ITRx_SetConfig>
      break;
 800b1d4:	e00b      	b.n	800b1ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4619      	mov	r1, r3
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	f000 faf2 	bl	800b7ca <TIM_ITRx_SetConfig>
        break;
 800b1e6:	e002      	b.n	800b1ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b1e8:	bf00      	nop
 800b1ea:	e000      	b.n	800b1ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b1ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b24c:	bf00      	nop
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a40      	ldr	r2, [pc, #256]	; (800b380 <TIM_Base_SetConfig+0x114>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d013      	beq.n	800b2ac <TIM_Base_SetConfig+0x40>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b28a:	d00f      	beq.n	800b2ac <TIM_Base_SetConfig+0x40>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a3d      	ldr	r2, [pc, #244]	; (800b384 <TIM_Base_SetConfig+0x118>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d00b      	beq.n	800b2ac <TIM_Base_SetConfig+0x40>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a3c      	ldr	r2, [pc, #240]	; (800b388 <TIM_Base_SetConfig+0x11c>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d007      	beq.n	800b2ac <TIM_Base_SetConfig+0x40>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	4a3b      	ldr	r2, [pc, #236]	; (800b38c <TIM_Base_SetConfig+0x120>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d003      	beq.n	800b2ac <TIM_Base_SetConfig+0x40>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	4a3a      	ldr	r2, [pc, #232]	; (800b390 <TIM_Base_SetConfig+0x124>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d108      	bne.n	800b2be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a2f      	ldr	r2, [pc, #188]	; (800b380 <TIM_Base_SetConfig+0x114>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d02b      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2cc:	d027      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a2c      	ldr	r2, [pc, #176]	; (800b384 <TIM_Base_SetConfig+0x118>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d023      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a2b      	ldr	r2, [pc, #172]	; (800b388 <TIM_Base_SetConfig+0x11c>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d01f      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a2a      	ldr	r2, [pc, #168]	; (800b38c <TIM_Base_SetConfig+0x120>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d01b      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a29      	ldr	r2, [pc, #164]	; (800b390 <TIM_Base_SetConfig+0x124>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d017      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4a28      	ldr	r2, [pc, #160]	; (800b394 <TIM_Base_SetConfig+0x128>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d013      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a27      	ldr	r2, [pc, #156]	; (800b398 <TIM_Base_SetConfig+0x12c>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d00f      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a26      	ldr	r2, [pc, #152]	; (800b39c <TIM_Base_SetConfig+0x130>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d00b      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a25      	ldr	r2, [pc, #148]	; (800b3a0 <TIM_Base_SetConfig+0x134>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d007      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a24      	ldr	r2, [pc, #144]	; (800b3a4 <TIM_Base_SetConfig+0x138>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d003      	beq.n	800b31e <TIM_Base_SetConfig+0xb2>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a23      	ldr	r2, [pc, #140]	; (800b3a8 <TIM_Base_SetConfig+0x13c>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d108      	bne.n	800b330 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	4313      	orrs	r3, r2
 800b32e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	695b      	ldr	r3, [r3, #20]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	68fa      	ldr	r2, [r7, #12]
 800b342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	689a      	ldr	r2, [r3, #8]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a0a      	ldr	r2, [pc, #40]	; (800b380 <TIM_Base_SetConfig+0x114>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d003      	beq.n	800b364 <TIM_Base_SetConfig+0xf8>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a0c      	ldr	r2, [pc, #48]	; (800b390 <TIM_Base_SetConfig+0x124>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d103      	bne.n	800b36c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	691a      	ldr	r2, [r3, #16]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	615a      	str	r2, [r3, #20]
}
 800b372:	bf00      	nop
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	40010000 	.word	0x40010000
 800b384:	40000400 	.word	0x40000400
 800b388:	40000800 	.word	0x40000800
 800b38c:	40000c00 	.word	0x40000c00
 800b390:	40010400 	.word	0x40010400
 800b394:	40014000 	.word	0x40014000
 800b398:	40014400 	.word	0x40014400
 800b39c:	40014800 	.word	0x40014800
 800b3a0:	40001800 	.word	0x40001800
 800b3a4:	40001c00 	.word	0x40001c00
 800b3a8:	40002000 	.word	0x40002000

0800b3ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b087      	sub	sp, #28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	f023 0201 	bic.w	r2, r3, #1
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6a1b      	ldr	r3, [r3, #32]
 800b3c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	699b      	ldr	r3, [r3, #24]
 800b3d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f023 0303 	bic.w	r3, r3, #3
 800b3e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f023 0302 	bic.w	r3, r3, #2
 800b3f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	689b      	ldr	r3, [r3, #8]
 800b3fa:	697a      	ldr	r2, [r7, #20]
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a20      	ldr	r2, [pc, #128]	; (800b484 <TIM_OC1_SetConfig+0xd8>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d003      	beq.n	800b410 <TIM_OC1_SetConfig+0x64>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4a1f      	ldr	r2, [pc, #124]	; (800b488 <TIM_OC1_SetConfig+0xdc>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d10c      	bne.n	800b42a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	f023 0308 	bic.w	r3, r3, #8
 800b416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	4313      	orrs	r3, r2
 800b420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	f023 0304 	bic.w	r3, r3, #4
 800b428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a15      	ldr	r2, [pc, #84]	; (800b484 <TIM_OC1_SetConfig+0xd8>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d003      	beq.n	800b43a <TIM_OC1_SetConfig+0x8e>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4a14      	ldr	r2, [pc, #80]	; (800b488 <TIM_OC1_SetConfig+0xdc>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d111      	bne.n	800b45e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	695b      	ldr	r3, [r3, #20]
 800b44e:	693a      	ldr	r2, [r7, #16]
 800b450:	4313      	orrs	r3, r2
 800b452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	699b      	ldr	r3, [r3, #24]
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	693a      	ldr	r2, [r7, #16]
 800b462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	685a      	ldr	r2, [r3, #4]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	697a      	ldr	r2, [r7, #20]
 800b476:	621a      	str	r2, [r3, #32]
}
 800b478:	bf00      	nop
 800b47a:	371c      	adds	r7, #28
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr
 800b484:	40010000 	.word	0x40010000
 800b488:	40010400 	.word	0x40010400

0800b48c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b087      	sub	sp, #28
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6a1b      	ldr	r3, [r3, #32]
 800b49a:	f023 0210 	bic.w	r2, r3, #16
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a1b      	ldr	r3, [r3, #32]
 800b4a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	699b      	ldr	r3, [r3, #24]
 800b4b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	021b      	lsls	r3, r3, #8
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	f023 0320 	bic.w	r3, r3, #32
 800b4d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	011b      	lsls	r3, r3, #4
 800b4de:	697a      	ldr	r2, [r7, #20]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4a22      	ldr	r2, [pc, #136]	; (800b570 <TIM_OC2_SetConfig+0xe4>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d003      	beq.n	800b4f4 <TIM_OC2_SetConfig+0x68>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4a21      	ldr	r2, [pc, #132]	; (800b574 <TIM_OC2_SetConfig+0xe8>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d10d      	bne.n	800b510 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	011b      	lsls	r3, r3, #4
 800b502:	697a      	ldr	r2, [r7, #20]
 800b504:	4313      	orrs	r3, r2
 800b506:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b50e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	4a17      	ldr	r2, [pc, #92]	; (800b570 <TIM_OC2_SetConfig+0xe4>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d003      	beq.n	800b520 <TIM_OC2_SetConfig+0x94>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	4a16      	ldr	r2, [pc, #88]	; (800b574 <TIM_OC2_SetConfig+0xe8>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d113      	bne.n	800b548 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b526:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b52e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	695b      	ldr	r3, [r3, #20]
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	693a      	ldr	r2, [r7, #16]
 800b538:	4313      	orrs	r3, r2
 800b53a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	699b      	ldr	r3, [r3, #24]
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	693a      	ldr	r2, [r7, #16]
 800b544:	4313      	orrs	r3, r2
 800b546:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	693a      	ldr	r2, [r7, #16]
 800b54c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	685a      	ldr	r2, [r3, #4]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	621a      	str	r2, [r3, #32]
}
 800b562:	bf00      	nop
 800b564:	371c      	adds	r7, #28
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	40010000 	.word	0x40010000
 800b574:	40010400 	.word	0x40010400

0800b578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b578:	b480      	push	{r7}
 800b57a:	b087      	sub	sp, #28
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6a1b      	ldr	r3, [r3, #32]
 800b586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a1b      	ldr	r3, [r3, #32]
 800b592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	69db      	ldr	r3, [r3, #28]
 800b59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f023 0303 	bic.w	r3, r3, #3
 800b5ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b5c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	021b      	lsls	r3, r3, #8
 800b5c8:	697a      	ldr	r2, [r7, #20]
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a21      	ldr	r2, [pc, #132]	; (800b658 <TIM_OC3_SetConfig+0xe0>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d003      	beq.n	800b5de <TIM_OC3_SetConfig+0x66>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a20      	ldr	r2, [pc, #128]	; (800b65c <TIM_OC3_SetConfig+0xe4>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d10d      	bne.n	800b5fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	021b      	lsls	r3, r3, #8
 800b5ec:	697a      	ldr	r2, [r7, #20]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a16      	ldr	r2, [pc, #88]	; (800b658 <TIM_OC3_SetConfig+0xe0>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d003      	beq.n	800b60a <TIM_OC3_SetConfig+0x92>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4a15      	ldr	r2, [pc, #84]	; (800b65c <TIM_OC3_SetConfig+0xe4>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d113      	bne.n	800b632 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	695b      	ldr	r3, [r3, #20]
 800b61e:	011b      	lsls	r3, r3, #4
 800b620:	693a      	ldr	r2, [r7, #16]
 800b622:	4313      	orrs	r3, r2
 800b624:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	011b      	lsls	r3, r3, #4
 800b62c:	693a      	ldr	r2, [r7, #16]
 800b62e:	4313      	orrs	r3, r2
 800b630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	693a      	ldr	r2, [r7, #16]
 800b636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	685a      	ldr	r2, [r3, #4]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	697a      	ldr	r2, [r7, #20]
 800b64a:	621a      	str	r2, [r3, #32]
}
 800b64c:	bf00      	nop
 800b64e:	371c      	adds	r7, #28
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr
 800b658:	40010000 	.word	0x40010000
 800b65c:	40010400 	.word	0x40010400

0800b660 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b660:	b480      	push	{r7}
 800b662:	b087      	sub	sp, #28
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6a1b      	ldr	r3, [r3, #32]
 800b66e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	69db      	ldr	r3, [r3, #28]
 800b686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b68e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	021b      	lsls	r3, r3, #8
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	031b      	lsls	r3, r3, #12
 800b6b2:	693a      	ldr	r2, [r7, #16]
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a12      	ldr	r2, [pc, #72]	; (800b704 <TIM_OC4_SetConfig+0xa4>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d003      	beq.n	800b6c8 <TIM_OC4_SetConfig+0x68>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a11      	ldr	r2, [pc, #68]	; (800b708 <TIM_OC4_SetConfig+0xa8>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d109      	bne.n	800b6dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	695b      	ldr	r3, [r3, #20]
 800b6d4:	019b      	lsls	r3, r3, #6
 800b6d6:	697a      	ldr	r2, [r7, #20]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	697a      	ldr	r2, [r7, #20]
 800b6e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	685a      	ldr	r2, [r3, #4]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	621a      	str	r2, [r3, #32]
}
 800b6f6:	bf00      	nop
 800b6f8:	371c      	adds	r7, #28
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	40010000 	.word	0x40010000
 800b708:	40010400 	.word	0x40010400

0800b70c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b087      	sub	sp, #28
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6a1b      	ldr	r3, [r3, #32]
 800b71c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6a1b      	ldr	r3, [r3, #32]
 800b722:	f023 0201 	bic.w	r2, r3, #1
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	011b      	lsls	r3, r3, #4
 800b73c:	693a      	ldr	r2, [r7, #16]
 800b73e:	4313      	orrs	r3, r2
 800b740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	f023 030a 	bic.w	r3, r3, #10
 800b748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b74a:	697a      	ldr	r2, [r7, #20]
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	4313      	orrs	r3, r2
 800b750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	693a      	ldr	r2, [r7, #16]
 800b756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	697a      	ldr	r2, [r7, #20]
 800b75c:	621a      	str	r2, [r3, #32]
}
 800b75e:	bf00      	nop
 800b760:	371c      	adds	r7, #28
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr

0800b76a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b76a:	b480      	push	{r7}
 800b76c:	b087      	sub	sp, #28
 800b76e:	af00      	add	r7, sp, #0
 800b770:	60f8      	str	r0, [r7, #12]
 800b772:	60b9      	str	r1, [r7, #8]
 800b774:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6a1b      	ldr	r3, [r3, #32]
 800b77a:	f023 0210 	bic.w	r2, r3, #16
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	699b      	ldr	r3, [r3, #24]
 800b786:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6a1b      	ldr	r3, [r3, #32]
 800b78c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b794:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	031b      	lsls	r3, r3, #12
 800b79a:	697a      	ldr	r2, [r7, #20]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b7a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	011b      	lsls	r3, r3, #4
 800b7ac:	693a      	ldr	r2, [r7, #16]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	697a      	ldr	r2, [r7, #20]
 800b7b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	693a      	ldr	r2, [r7, #16]
 800b7bc:	621a      	str	r2, [r3, #32]
}
 800b7be:	bf00      	nop
 800b7c0:	371c      	adds	r7, #28
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr

0800b7ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7ca:	b480      	push	{r7}
 800b7cc:	b085      	sub	sp, #20
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
 800b7d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b7e2:	683a      	ldr	r2, [r7, #0]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	f043 0307 	orr.w	r3, r3, #7
 800b7ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	609a      	str	r2, [r3, #8]
}
 800b7f4:	bf00      	nop
 800b7f6:	3714      	adds	r7, #20
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b800:	b480      	push	{r7}
 800b802:	b087      	sub	sp, #28
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	607a      	str	r2, [r7, #4]
 800b80c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b81a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	021a      	lsls	r2, r3, #8
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	431a      	orrs	r2, r3
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	4313      	orrs	r3, r2
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	697a      	ldr	r2, [r7, #20]
 800b832:	609a      	str	r2, [r3, #8]
}
 800b834:	bf00      	nop
 800b836:	371c      	adds	r7, #28
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b840:	b480      	push	{r7}
 800b842:	b087      	sub	sp, #28
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	f003 031f 	and.w	r3, r3, #31
 800b852:	2201      	movs	r2, #1
 800b854:	fa02 f303 	lsl.w	r3, r2, r3
 800b858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6a1a      	ldr	r2, [r3, #32]
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	43db      	mvns	r3, r3
 800b862:	401a      	ands	r2, r3
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6a1a      	ldr	r2, [r3, #32]
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	f003 031f 	and.w	r3, r3, #31
 800b872:	6879      	ldr	r1, [r7, #4]
 800b874:	fa01 f303 	lsl.w	r3, r1, r3
 800b878:	431a      	orrs	r2, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	621a      	str	r2, [r3, #32]
}
 800b87e:	bf00      	nop
 800b880:	371c      	adds	r7, #28
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr
	...

0800b88c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d101      	bne.n	800b8a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b8a0:	2302      	movs	r3, #2
 800b8a2:	e05a      	b.n	800b95a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2202      	movs	r2, #2
 800b8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68fa      	ldr	r2, [r7, #12]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a21      	ldr	r2, [pc, #132]	; (800b968 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d022      	beq.n	800b92e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8f0:	d01d      	beq.n	800b92e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a1d      	ldr	r2, [pc, #116]	; (800b96c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d018      	beq.n	800b92e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a1b      	ldr	r2, [pc, #108]	; (800b970 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d013      	beq.n	800b92e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a1a      	ldr	r2, [pc, #104]	; (800b974 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d00e      	beq.n	800b92e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4a18      	ldr	r2, [pc, #96]	; (800b978 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d009      	beq.n	800b92e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4a17      	ldr	r2, [pc, #92]	; (800b97c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d004      	beq.n	800b92e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a15      	ldr	r2, [pc, #84]	; (800b980 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d10c      	bne.n	800b948 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b934:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	4313      	orrs	r3, r2
 800b93e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	68ba      	ldr	r2, [r7, #8]
 800b946:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2200      	movs	r2, #0
 800b954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3714      	adds	r7, #20
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	40010000 	.word	0x40010000
 800b96c:	40000400 	.word	0x40000400
 800b970:	40000800 	.word	0x40000800
 800b974:	40000c00 	.word	0x40000c00
 800b978:	40010400 	.word	0x40010400
 800b97c:	40014000 	.word	0x40014000
 800b980:	40001800 	.word	0x40001800

0800b984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b98c:	bf00      	nop
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b9ac:	b084      	sub	sp, #16
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b084      	sub	sp, #16
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	f107 001c 	add.w	r0, r7, #28
 800b9ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d122      	bne.n	800ba0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b9d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b9ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d105      	bne.n	800b9fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 f94a 	bl	800bc98 <USB_CoreReset>
 800ba04:	4603      	mov	r3, r0
 800ba06:	73fb      	strb	r3, [r7, #15]
 800ba08:	e01a      	b.n	800ba40 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 f93e 	bl	800bc98 <USB_CoreReset>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ba20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d106      	bne.n	800ba34 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	639a      	str	r2, [r3, #56]	; 0x38
 800ba32:	e005      	b.n	800ba40 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d10b      	bne.n	800ba5e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	f043 0206 	orr.w	r2, r3, #6
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	f043 0220 	orr.w	r2, r3, #32
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ba5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba6a:	b004      	add	sp, #16
 800ba6c:	4770      	bx	lr

0800ba6e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b083      	sub	sp, #12
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	f043 0201 	orr.w	r2, r3, #1
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	f023 0201 	bic.w	r2, r3, #1
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	370c      	adds	r7, #12
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr

0800bab2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b082      	sub	sp, #8
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
 800baba:	460b      	mov	r3, r1
 800babc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800baca:	78fb      	ldrb	r3, [r7, #3]
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d106      	bne.n	800bade <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	60da      	str	r2, [r3, #12]
 800badc:	e00b      	b.n	800baf6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800bade:	78fb      	ldrb	r3, [r7, #3]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d106      	bne.n	800baf2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	60da      	str	r2, [r3, #12]
 800baf0:	e001      	b.n	800baf6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e003      	b.n	800bafe <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800baf6:	2032      	movs	r0, #50	; 0x32
 800baf8:	f7f9 fc1a 	bl	8005330 <HAL_Delay>

  return HAL_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
	...

0800bb08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bb12:	2300      	movs	r3, #0
 800bb14:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	019b      	lsls	r3, r3, #6
 800bb1a:	f043 0220 	orr.w	r2, r3, #32
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	3301      	adds	r3, #1
 800bb26:	60fb      	str	r3, [r7, #12]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	4a09      	ldr	r2, [pc, #36]	; (800bb50 <USB_FlushTxFifo+0x48>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d901      	bls.n	800bb34 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bb30:	2303      	movs	r3, #3
 800bb32:	e006      	b.n	800bb42 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	f003 0320 	and.w	r3, r3, #32
 800bb3c:	2b20      	cmp	r3, #32
 800bb3e:	d0f0      	beq.n	800bb22 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3714      	adds	r7, #20
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	00030d40 	.word	0x00030d40

0800bb54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2210      	movs	r2, #16
 800bb64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	60fb      	str	r3, [r7, #12]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	4a09      	ldr	r2, [pc, #36]	; (800bb94 <USB_FlushRxFifo+0x40>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d901      	bls.n	800bb78 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bb74:	2303      	movs	r3, #3
 800bb76:	e006      	b.n	800bb86 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	691b      	ldr	r3, [r3, #16]
 800bb7c:	f003 0310 	and.w	r3, r3, #16
 800bb80:	2b10      	cmp	r3, #16
 800bb82:	d0f0      	beq.n	800bb66 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bb84:	2300      	movs	r3, #0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3714      	adds	r7, #20
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop
 800bb94:	00030d40 	.word	0x00030d40

0800bb98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b089      	sub	sp, #36	; 0x24
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	4611      	mov	r1, r2
 800bba4:	461a      	mov	r2, r3
 800bba6:	460b      	mov	r3, r1
 800bba8:	71fb      	strb	r3, [r7, #7]
 800bbaa:	4613      	mov	r3, r2
 800bbac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800bbb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d11a      	bne.n	800bbf4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bbbe:	88bb      	ldrh	r3, [r7, #4]
 800bbc0:	3303      	adds	r3, #3
 800bbc2:	089b      	lsrs	r3, r3, #2
 800bbc4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	61bb      	str	r3, [r7, #24]
 800bbca:	e00f      	b.n	800bbec <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bbcc:	79fb      	ldrb	r3, [r7, #7]
 800bbce:	031a      	lsls	r2, r3, #12
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbd8:	461a      	mov	r2, r3
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	3304      	adds	r3, #4
 800bbe4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	61bb      	str	r3, [r7, #24]
 800bbec:	69ba      	ldr	r2, [r7, #24]
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d3eb      	bcc.n	800bbcc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3724      	adds	r7, #36	; 0x24
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr

0800bc02 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bc02:	b480      	push	{r7}
 800bc04:	b089      	sub	sp, #36	; 0x24
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	60f8      	str	r0, [r7, #12]
 800bc0a:	60b9      	str	r1, [r7, #8]
 800bc0c:	4613      	mov	r3, r2
 800bc0e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800bc18:	88fb      	ldrh	r3, [r7, #6]
 800bc1a:	3303      	adds	r3, #3
 800bc1c:	089b      	lsrs	r3, r3, #2
 800bc1e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800bc20:	2300      	movs	r3, #0
 800bc22:	61bb      	str	r3, [r7, #24]
 800bc24:	e00b      	b.n	800bc3e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	69fb      	ldr	r3, [r7, #28]
 800bc30:	601a      	str	r2, [r3, #0]
    pDest++;
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	3304      	adds	r3, #4
 800bc36:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bc38:	69bb      	ldr	r3, [r7, #24]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	61bb      	str	r3, [r7, #24]
 800bc3e:	69ba      	ldr	r2, [r7, #24]
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d3ef      	bcc.n	800bc26 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800bc46:	69fb      	ldr	r3, [r7, #28]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3724      	adds	r7, #36	; 0x24
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b085      	sub	sp, #20
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	695b      	ldr	r3, [r3, #20]
 800bc60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	699b      	ldr	r3, [r3, #24]
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	4013      	ands	r3, r2
 800bc6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	b083      	sub	sp, #12
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	695b      	ldr	r3, [r3, #20]
 800bc86:	f003 0301 	and.w	r3, r3, #1
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	370c      	adds	r7, #12
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
	...

0800bc98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bca0:	2300      	movs	r3, #0
 800bca2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	3301      	adds	r3, #1
 800bca8:	60fb      	str	r3, [r7, #12]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	4a13      	ldr	r2, [pc, #76]	; (800bcfc <USB_CoreReset+0x64>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d901      	bls.n	800bcb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	e01b      	b.n	800bcee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	691b      	ldr	r3, [r3, #16]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	daf2      	bge.n	800bca4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	691b      	ldr	r3, [r3, #16]
 800bcc6:	f043 0201 	orr.w	r2, r3, #1
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	60fb      	str	r3, [r7, #12]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	4a09      	ldr	r2, [pc, #36]	; (800bcfc <USB_CoreReset+0x64>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d901      	bls.n	800bce0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bcdc:	2303      	movs	r3, #3
 800bcde:	e006      	b.n	800bcee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	691b      	ldr	r3, [r3, #16]
 800bce4:	f003 0301 	and.w	r3, r3, #1
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d0f0      	beq.n	800bcce <USB_CoreReset+0x36>

  return HAL_OK;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3714      	adds	r7, #20
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	00030d40 	.word	0x00030d40

0800bd00 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd00:	b084      	sub	sp, #16
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b084      	sub	sp, #16
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
 800bd0a:	f107 001c 	add.w	r0, r7, #28
 800bd0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	2300      	movs	r3, #0
 800bd20:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd32:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d018      	beq.n	800bd84 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800bd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d10a      	bne.n	800bd6e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd66:	f043 0304 	orr.w	r3, r3, #4
 800bd6a:	6013      	str	r3, [r2, #0]
 800bd6c:	e014      	b.n	800bd98 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd7c:	f023 0304 	bic.w	r3, r3, #4
 800bd80:	6013      	str	r3, [r2, #0]
 800bd82:	e009      	b.n	800bd98 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	68ba      	ldr	r2, [r7, #8]
 800bd8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd92:	f023 0304 	bic.w	r3, r3, #4
 800bd96:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800bd98:	2110      	movs	r1, #16
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f7ff feb4 	bl	800bb08 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f7ff fed7 	bl	800bb54 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800bda6:	2300      	movs	r3, #0
 800bda8:	60fb      	str	r3, [r7, #12]
 800bdaa:	e015      	b.n	800bdd8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	015a      	lsls	r2, r3, #5
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	4413      	add	r3, r2
 800bdb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdb8:	461a      	mov	r2, r3
 800bdba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdbe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	015a      	lsls	r2, r3, #5
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdcc:	461a      	mov	r2, r3
 800bdce:	2300      	movs	r3, #0
 800bdd0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	60fb      	str	r3, [r7, #12]
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	68fa      	ldr	r2, [r7, #12]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d3e5      	bcc.n	800bdac <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800bde0:	2101      	movs	r1, #1
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 f8ac 	bl	800bf40 <USB_DriveVbus>

  HAL_Delay(200U);
 800bde8:	20c8      	movs	r0, #200	; 0xc8
 800bdea:	f7f9 faa1 	bl	8005330 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bdfa:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00b      	beq.n	800be20 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be0e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	4a14      	ldr	r2, [pc, #80]	; (800be64 <USB_HostInit+0x164>)
 800be14:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	4a13      	ldr	r2, [pc, #76]	; (800be68 <USB_HostInit+0x168>)
 800be1a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800be1e:	e009      	b.n	800be34 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2280      	movs	r2, #128	; 0x80
 800be24:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4a10      	ldr	r2, [pc, #64]	; (800be6c <USB_HostInit+0x16c>)
 800be2a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	4a10      	ldr	r2, [pc, #64]	; (800be70 <USB_HostInit+0x170>)
 800be30:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800be34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be36:	2b00      	cmp	r3, #0
 800be38:	d105      	bne.n	800be46 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	699b      	ldr	r3, [r3, #24]
 800be3e:	f043 0210 	orr.w	r2, r3, #16
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	699a      	ldr	r2, [r3, #24]
 800be4a:	4b0a      	ldr	r3, [pc, #40]	; (800be74 <USB_HostInit+0x174>)
 800be4c:	4313      	orrs	r3, r2
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800be52:	2300      	movs	r3, #0
}
 800be54:	4618      	mov	r0, r3
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be5e:	b004      	add	sp, #16
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	01000200 	.word	0x01000200
 800be68:	00e00300 	.word	0x00e00300
 800be6c:	00600080 	.word	0x00600080
 800be70:	004000e0 	.word	0x004000e0
 800be74:	a3200008 	.word	0xa3200008

0800be78 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	460b      	mov	r3, r1
 800be82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800be96:	f023 0303 	bic.w	r3, r3, #3
 800be9a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	78fb      	ldrb	r3, [r7, #3]
 800bea6:	f003 0303 	and.w	r3, r3, #3
 800beaa:	68f9      	ldr	r1, [r7, #12]
 800beac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800beb0:	4313      	orrs	r3, r2
 800beb2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800beb4:	78fb      	ldrb	r3, [r7, #3]
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d107      	bne.n	800beca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bec0:	461a      	mov	r2, r3
 800bec2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bec6:	6053      	str	r3, [r2, #4]
 800bec8:	e009      	b.n	800bede <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800beca:	78fb      	ldrb	r3, [r7, #3]
 800becc:	2b02      	cmp	r3, #2
 800bece:	d106      	bne.n	800bede <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bed6:	461a      	mov	r2, r3
 800bed8:	f241 7370 	movw	r3, #6000	; 0x1770
 800bedc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3714      	adds	r7, #20
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800bef8:	2300      	movs	r3, #0
 800befa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bf0c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	68fa      	ldr	r2, [r7, #12]
 800bf12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf1a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800bf1c:	2064      	movs	r0, #100	; 0x64
 800bf1e:	f7f9 fa07 	bl	8005330 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf2e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800bf30:	200a      	movs	r0, #10
 800bf32:	f7f9 f9fd 	bl	8005330 <HAL_Delay>

  return HAL_OK;
 800bf36:	2300      	movs	r3, #0
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b085      	sub	sp, #20
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bf50:	2300      	movs	r3, #0
 800bf52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bf64:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d109      	bne.n	800bf84 <USB_DriveVbus+0x44>
 800bf70:	78fb      	ldrb	r3, [r7, #3]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d106      	bne.n	800bf84 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bf82:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf8e:	d109      	bne.n	800bfa4 <USB_DriveVbus+0x64>
 800bf90:	78fb      	ldrb	r3, [r7, #3]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d106      	bne.n	800bfa4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfa2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800bfa4:	2300      	movs	r3, #0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3714      	adds	r7, #20
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr

0800bfb2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bfb2:	b480      	push	{r7}
 800bfb4:	b085      	sub	sp, #20
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	0c5b      	lsrs	r3, r3, #17
 800bfd0:	f003 0303 	and.w	r3, r3, #3
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3714      	adds	r7, #20
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	b29b      	uxth	r3, r3
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3714      	adds	r7, #20
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
	...

0800c004 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b088      	sub	sp, #32
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	4608      	mov	r0, r1
 800c00e:	4611      	mov	r1, r2
 800c010:	461a      	mov	r2, r3
 800c012:	4603      	mov	r3, r0
 800c014:	70fb      	strb	r3, [r7, #3]
 800c016:	460b      	mov	r3, r1
 800c018:	70bb      	strb	r3, [r7, #2]
 800c01a:	4613      	mov	r3, r2
 800c01c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c01e:	2300      	movs	r3, #0
 800c020:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c026:	78fb      	ldrb	r3, [r7, #3]
 800c028:	015a      	lsls	r2, r3, #5
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	4413      	add	r3, r2
 800c02e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c032:	461a      	mov	r2, r3
 800c034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c038:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c03a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c03e:	2b03      	cmp	r3, #3
 800c040:	d87e      	bhi.n	800c140 <USB_HC_Init+0x13c>
 800c042:	a201      	add	r2, pc, #4	; (adr r2, 800c048 <USB_HC_Init+0x44>)
 800c044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c048:	0800c059 	.word	0x0800c059
 800c04c:	0800c103 	.word	0x0800c103
 800c050:	0800c059 	.word	0x0800c059
 800c054:	0800c0c5 	.word	0x0800c0c5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c058:	78fb      	ldrb	r3, [r7, #3]
 800c05a:	015a      	lsls	r2, r3, #5
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	4413      	add	r3, r2
 800c060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c064:	461a      	mov	r2, r3
 800c066:	f240 439d 	movw	r3, #1181	; 0x49d
 800c06a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c06c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c070:	2b00      	cmp	r3, #0
 800c072:	da10      	bge.n	800c096 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c074:	78fb      	ldrb	r3, [r7, #3]
 800c076:	015a      	lsls	r2, r3, #5
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	4413      	add	r3, r2
 800c07c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	78fa      	ldrb	r2, [r7, #3]
 800c084:	0151      	lsls	r1, r2, #5
 800c086:	693a      	ldr	r2, [r7, #16]
 800c088:	440a      	add	r2, r1
 800c08a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c08e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c092:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c094:	e057      	b.n	800c146 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d051      	beq.n	800c146 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c0a2:	78fb      	ldrb	r3, [r7, #3]
 800c0a4:	015a      	lsls	r2, r3, #5
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	4413      	add	r3, r2
 800c0aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	78fa      	ldrb	r2, [r7, #3]
 800c0b2:	0151      	lsls	r1, r2, #5
 800c0b4:	693a      	ldr	r2, [r7, #16]
 800c0b6:	440a      	add	r2, r1
 800c0b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c0c0:	60d3      	str	r3, [r2, #12]
      break;
 800c0c2:	e040      	b.n	800c146 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c0c4:	78fb      	ldrb	r3, [r7, #3]
 800c0c6:	015a      	lsls	r2, r3, #5
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	f240 639d 	movw	r3, #1693	; 0x69d
 800c0d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c0d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	da34      	bge.n	800c14a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c0e0:	78fb      	ldrb	r3, [r7, #3]
 800c0e2:	015a      	lsls	r2, r3, #5
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	78fa      	ldrb	r2, [r7, #3]
 800c0f0:	0151      	lsls	r1, r2, #5
 800c0f2:	693a      	ldr	r2, [r7, #16]
 800c0f4:	440a      	add	r2, r1
 800c0f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0fe:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c100:	e023      	b.n	800c14a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c102:	78fb      	ldrb	r3, [r7, #3]
 800c104:	015a      	lsls	r2, r3, #5
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	4413      	add	r3, r2
 800c10a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c10e:	461a      	mov	r2, r3
 800c110:	f240 2325 	movw	r3, #549	; 0x225
 800c114:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c116:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	da17      	bge.n	800c14e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c11e:	78fb      	ldrb	r3, [r7, #3]
 800c120:	015a      	lsls	r2, r3, #5
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	4413      	add	r3, r2
 800c126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	78fa      	ldrb	r2, [r7, #3]
 800c12e:	0151      	lsls	r1, r2, #5
 800c130:	693a      	ldr	r2, [r7, #16]
 800c132:	440a      	add	r2, r1
 800c134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c138:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c13c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c13e:	e006      	b.n	800c14e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c140:	2301      	movs	r3, #1
 800c142:	77fb      	strb	r3, [r7, #31]
      break;
 800c144:	e004      	b.n	800c150 <USB_HC_Init+0x14c>
      break;
 800c146:	bf00      	nop
 800c148:	e002      	b.n	800c150 <USB_HC_Init+0x14c>
      break;
 800c14a:	bf00      	nop
 800c14c:	e000      	b.n	800c150 <USB_HC_Init+0x14c>
      break;
 800c14e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c156:	699a      	ldr	r2, [r3, #24]
 800c158:	78fb      	ldrb	r3, [r7, #3]
 800c15a:	f003 030f 	and.w	r3, r3, #15
 800c15e:	2101      	movs	r1, #1
 800c160:	fa01 f303 	lsl.w	r3, r1, r3
 800c164:	6939      	ldr	r1, [r7, #16]
 800c166:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c16a:	4313      	orrs	r3, r2
 800c16c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	699b      	ldr	r3, [r3, #24]
 800c172:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c17a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	da03      	bge.n	800c18a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c186:	61bb      	str	r3, [r7, #24]
 800c188:	e001      	b.n	800c18e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800c18a:	2300      	movs	r3, #0
 800c18c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f7ff ff0f 	bl	800bfb2 <USB_GetHostSpeed>
 800c194:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c196:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c19a:	2b02      	cmp	r3, #2
 800c19c:	d106      	bne.n	800c1ac <USB_HC_Init+0x1a8>
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2b02      	cmp	r3, #2
 800c1a2:	d003      	beq.n	800c1ac <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c1a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c1a8:	617b      	str	r3, [r7, #20]
 800c1aa:	e001      	b.n	800c1b0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c1b0:	787b      	ldrb	r3, [r7, #1]
 800c1b2:	059b      	lsls	r3, r3, #22
 800c1b4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c1b8:	78bb      	ldrb	r3, [r7, #2]
 800c1ba:	02db      	lsls	r3, r3, #11
 800c1bc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c1c0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c1c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c1c6:	049b      	lsls	r3, r3, #18
 800c1c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c1cc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c1ce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c1d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c1d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c1da:	78fb      	ldrb	r3, [r7, #3]
 800c1dc:	0159      	lsls	r1, r3, #5
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	440b      	add	r3, r1
 800c1e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1e6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c1ec:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800c1ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c1f2:	2b03      	cmp	r3, #3
 800c1f4:	d10f      	bne.n	800c216 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800c1f6:	78fb      	ldrb	r3, [r7, #3]
 800c1f8:	015a      	lsls	r2, r3, #5
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	78fa      	ldrb	r2, [r7, #3]
 800c206:	0151      	lsls	r1, r2, #5
 800c208:	693a      	ldr	r2, [r7, #16]
 800c20a:	440a      	add	r2, r1
 800c20c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c210:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c214:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c216:	7ffb      	ldrb	r3, [r7, #31]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3720      	adds	r7, #32
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b08c      	sub	sp, #48	; 0x30
 800c224:	af02      	add	r7, sp, #8
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	4613      	mov	r3, r2
 800c22c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	785b      	ldrb	r3, [r3, #1]
 800c236:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c23c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c246:	2b00      	cmp	r3, #0
 800c248:	d02d      	beq.n	800c2a6 <USB_HC_StartXfer+0x86>
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	791b      	ldrb	r3, [r3, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d129      	bne.n	800c2a6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c252:	79fb      	ldrb	r3, [r7, #7]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d117      	bne.n	800c288 <USB_HC_StartXfer+0x68>
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	79db      	ldrb	r3, [r3, #7]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d003      	beq.n	800c268 <USB_HC_StartXfer+0x48>
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	79db      	ldrb	r3, [r3, #7]
 800c264:	2b02      	cmp	r3, #2
 800c266:	d10f      	bne.n	800c288 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	015a      	lsls	r2, r3, #5
 800c26c:	6a3b      	ldr	r3, [r7, #32]
 800c26e:	4413      	add	r3, r2
 800c270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	69fa      	ldr	r2, [r7, #28]
 800c278:	0151      	lsls	r1, r2, #5
 800c27a:	6a3a      	ldr	r2, [r7, #32]
 800c27c:	440a      	add	r2, r1
 800c27e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c286:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800c288:	79fb      	ldrb	r3, [r7, #7]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10b      	bne.n	800c2a6 <USB_HC_StartXfer+0x86>
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	795b      	ldrb	r3, [r3, #5]
 800c292:	2b01      	cmp	r3, #1
 800c294:	d107      	bne.n	800c2a6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	785b      	ldrb	r3, [r3, #1]
 800c29a:	4619      	mov	r1, r3
 800c29c:	68f8      	ldr	r0, [r7, #12]
 800c29e:	f000 fa2f 	bl	800c700 <USB_DoPing>
      return HAL_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	e0f8      	b.n	800c498 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	695b      	ldr	r3, [r3, #20]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d018      	beq.n	800c2e0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	695b      	ldr	r3, [r3, #20]
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	8912      	ldrh	r2, [r2, #8]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	8912      	ldrh	r2, [r2, #8]
 800c2be:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2c2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c2c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c2c6:	8b7b      	ldrh	r3, [r7, #26]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d90b      	bls.n	800c2e4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800c2cc:	8b7b      	ldrh	r3, [r7, #26]
 800c2ce:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c2d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c2d2:	68ba      	ldr	r2, [r7, #8]
 800c2d4:	8912      	ldrh	r2, [r2, #8]
 800c2d6:	fb02 f203 	mul.w	r2, r2, r3
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	611a      	str	r2, [r3, #16]
 800c2de:	e001      	b.n	800c2e4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	78db      	ldrb	r3, [r3, #3]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d007      	beq.n	800c2fc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c2ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	8912      	ldrh	r2, [r2, #8]
 800c2f2:	fb02 f203 	mul.w	r2, r2, r3
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	611a      	str	r2, [r3, #16]
 800c2fa:	e003      	b.n	800c304 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	695a      	ldr	r2, [r3, #20]
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	691b      	ldr	r3, [r3, #16]
 800c308:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c30c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c30e:	04d9      	lsls	r1, r3, #19
 800c310:	4b63      	ldr	r3, [pc, #396]	; (800c4a0 <USB_HC_StartXfer+0x280>)
 800c312:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c314:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	7a9b      	ldrb	r3, [r3, #10]
 800c31a:	075b      	lsls	r3, r3, #29
 800c31c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c320:	69f9      	ldr	r1, [r7, #28]
 800c322:	0148      	lsls	r0, r1, #5
 800c324:	6a39      	ldr	r1, [r7, #32]
 800c326:	4401      	add	r1, r0
 800c328:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c32c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c32e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c330:	79fb      	ldrb	r3, [r7, #7]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d009      	beq.n	800c34a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	68d9      	ldr	r1, [r3, #12]
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	015a      	lsls	r2, r3, #5
 800c33e:	6a3b      	ldr	r3, [r7, #32]
 800c340:	4413      	add	r3, r2
 800c342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c346:	460a      	mov	r2, r1
 800c348:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c34a:	6a3b      	ldr	r3, [r7, #32]
 800c34c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	f003 0301 	and.w	r3, r3, #1
 800c356:	2b00      	cmp	r3, #0
 800c358:	bf0c      	ite	eq
 800c35a:	2301      	moveq	r3, #1
 800c35c:	2300      	movne	r3, #0
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	015a      	lsls	r2, r3, #5
 800c366:	6a3b      	ldr	r3, [r7, #32]
 800c368:	4413      	add	r3, r2
 800c36a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	69fa      	ldr	r2, [r7, #28]
 800c372:	0151      	lsls	r1, r2, #5
 800c374:	6a3a      	ldr	r2, [r7, #32]
 800c376:	440a      	add	r2, r1
 800c378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c37c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c380:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	015a      	lsls	r2, r3, #5
 800c386:	6a3b      	ldr	r3, [r7, #32]
 800c388:	4413      	add	r3, r2
 800c38a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	7e7b      	ldrb	r3, [r7, #25]
 800c392:	075b      	lsls	r3, r3, #29
 800c394:	69f9      	ldr	r1, [r7, #28]
 800c396:	0148      	lsls	r0, r1, #5
 800c398:	6a39      	ldr	r1, [r7, #32]
 800c39a:	4401      	add	r1, r0
 800c39c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	015a      	lsls	r2, r3, #5
 800c3a8:	6a3b      	ldr	r3, [r7, #32]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c3ba:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	78db      	ldrb	r3, [r3, #3]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d004      	beq.n	800c3ce <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3ca:	613b      	str	r3, [r7, #16]
 800c3cc:	e003      	b.n	800c3d6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c3d4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c3dc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	015a      	lsls	r2, r3, #5
 800c3e2:	6a3b      	ldr	r3, [r7, #32]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c3f0:	79fb      	ldrb	r3, [r7, #7]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d001      	beq.n	800c3fa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	e04e      	b.n	800c498 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	78db      	ldrb	r3, [r3, #3]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d149      	bne.n	800c496 <USB_HC_StartXfer+0x276>
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	695b      	ldr	r3, [r3, #20]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d045      	beq.n	800c496 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	79db      	ldrb	r3, [r3, #7]
 800c40e:	2b03      	cmp	r3, #3
 800c410:	d830      	bhi.n	800c474 <USB_HC_StartXfer+0x254>
 800c412:	a201      	add	r2, pc, #4	; (adr r2, 800c418 <USB_HC_StartXfer+0x1f8>)
 800c414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c418:	0800c429 	.word	0x0800c429
 800c41c:	0800c44d 	.word	0x0800c44d
 800c420:	0800c429 	.word	0x0800c429
 800c424:	0800c44d 	.word	0x0800c44d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	695b      	ldr	r3, [r3, #20]
 800c42c:	3303      	adds	r3, #3
 800c42e:	089b      	lsrs	r3, r3, #2
 800c430:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c432:	8afa      	ldrh	r2, [r7, #22]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c438:	b29b      	uxth	r3, r3
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d91c      	bls.n	800c478 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	699b      	ldr	r3, [r3, #24]
 800c442:	f043 0220 	orr.w	r2, r3, #32
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	619a      	str	r2, [r3, #24]
        }
        break;
 800c44a:	e015      	b.n	800c478 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	695b      	ldr	r3, [r3, #20]
 800c450:	3303      	adds	r3, #3
 800c452:	089b      	lsrs	r3, r3, #2
 800c454:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c456:	8afa      	ldrh	r2, [r7, #22]
 800c458:	6a3b      	ldr	r3, [r7, #32]
 800c45a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	b29b      	uxth	r3, r3
 800c462:	429a      	cmp	r2, r3
 800c464:	d90a      	bls.n	800c47c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	699b      	ldr	r3, [r3, #24]
 800c46a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	619a      	str	r2, [r3, #24]
        }
        break;
 800c472:	e003      	b.n	800c47c <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c474:	bf00      	nop
 800c476:	e002      	b.n	800c47e <USB_HC_StartXfer+0x25e>
        break;
 800c478:	bf00      	nop
 800c47a:	e000      	b.n	800c47e <USB_HC_StartXfer+0x25e>
        break;
 800c47c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	68d9      	ldr	r1, [r3, #12]
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	785a      	ldrb	r2, [r3, #1]
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	695b      	ldr	r3, [r3, #20]
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	2000      	movs	r0, #0
 800c48e:	9000      	str	r0, [sp, #0]
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	f7ff fb81 	bl	800bb98 <USB_WritePacket>
  }

  return HAL_OK;
 800c496:	2300      	movs	r3, #0
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3728      	adds	r7, #40	; 0x28
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	1ff80000 	.word	0x1ff80000

0800c4a4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4b6:	695b      	ldr	r3, [r3, #20]
 800c4b8:	b29b      	uxth	r3, r3
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3714      	adds	r7, #20
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr

0800c4c6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c4c6:	b480      	push	{r7}
 800c4c8:	b089      	sub	sp, #36	; 0x24
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	6078      	str	r0, [r7, #4]
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800c4d6:	78fb      	ldrb	r3, [r7, #3]
 800c4d8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	015a      	lsls	r2, r3, #5
 800c4e2:	69bb      	ldr	r3, [r7, #24]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	0c9b      	lsrs	r3, r3, #18
 800c4ee:	f003 0303 	and.w	r3, r3, #3
 800c4f2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	015a      	lsls	r2, r3, #5
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	4413      	add	r3, r2
 800c4fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	0fdb      	lsrs	r3, r3, #31
 800c504:	f003 0301 	and.w	r3, r3, #1
 800c508:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	f003 0320 	and.w	r3, r3, #32
 800c512:	2b20      	cmp	r3, #32
 800c514:	d104      	bne.n	800c520 <USB_HC_Halt+0x5a>
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d101      	bne.n	800c520 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c51c:	2300      	movs	r3, #0
 800c51e:	e0e8      	b.n	800c6f2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d002      	beq.n	800c52c <USB_HC_Halt+0x66>
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	2b02      	cmp	r3, #2
 800c52a:	d173      	bne.n	800c614 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	015a      	lsls	r2, r3, #5
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	4413      	add	r3, r2
 800c534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	697a      	ldr	r2, [r7, #20]
 800c53c:	0151      	lsls	r1, r2, #5
 800c53e:	69ba      	ldr	r2, [r7, #24]
 800c540:	440a      	add	r2, r1
 800c542:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c546:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c54a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	f003 0320 	and.w	r3, r3, #32
 800c554:	2b00      	cmp	r3, #0
 800c556:	f040 80cb 	bne.w	800c6f0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c55e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c562:	2b00      	cmp	r3, #0
 800c564:	d143      	bne.n	800c5ee <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	015a      	lsls	r2, r3, #5
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	4413      	add	r3, r2
 800c56e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	697a      	ldr	r2, [r7, #20]
 800c576:	0151      	lsls	r1, r2, #5
 800c578:	69ba      	ldr	r2, [r7, #24]
 800c57a:	440a      	add	r2, r1
 800c57c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c580:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c584:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	015a      	lsls	r2, r3, #5
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	4413      	add	r3, r2
 800c58e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	697a      	ldr	r2, [r7, #20]
 800c596:	0151      	lsls	r1, r2, #5
 800c598:	69ba      	ldr	r2, [r7, #24]
 800c59a:	440a      	add	r2, r1
 800c59c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c5a4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	015a      	lsls	r2, r3, #5
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	4413      	add	r3, r2
 800c5ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	697a      	ldr	r2, [r7, #20]
 800c5b6:	0151      	lsls	r1, r2, #5
 800c5b8:	69ba      	ldr	r2, [r7, #24]
 800c5ba:	440a      	add	r2, r1
 800c5bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c5c4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	61fb      	str	r3, [r7, #28]
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c5d2:	d81d      	bhi.n	800c610 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	015a      	lsls	r2, r3, #5
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	4413      	add	r3, r2
 800c5dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5ea:	d0ec      	beq.n	800c5c6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c5ec:	e080      	b.n	800c6f0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	015a      	lsls	r2, r3, #5
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	4413      	add	r3, r2
 800c5f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	697a      	ldr	r2, [r7, #20]
 800c5fe:	0151      	lsls	r1, r2, #5
 800c600:	69ba      	ldr	r2, [r7, #24]
 800c602:	440a      	add	r2, r1
 800c604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c608:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c60c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c60e:	e06f      	b.n	800c6f0 <USB_HC_Halt+0x22a>
            break;
 800c610:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c612:	e06d      	b.n	800c6f0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	015a      	lsls	r2, r3, #5
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	4413      	add	r3, r2
 800c61c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	697a      	ldr	r2, [r7, #20]
 800c624:	0151      	lsls	r1, r2, #5
 800c626:	69ba      	ldr	r2, [r7, #24]
 800c628:	440a      	add	r2, r1
 800c62a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c62e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c632:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c634:	69bb      	ldr	r3, [r7, #24]
 800c636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c63a:	691b      	ldr	r3, [r3, #16]
 800c63c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c640:	2b00      	cmp	r3, #0
 800c642:	d143      	bne.n	800c6cc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	015a      	lsls	r2, r3, #5
 800c648:	69bb      	ldr	r3, [r7, #24]
 800c64a:	4413      	add	r3, r2
 800c64c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	697a      	ldr	r2, [r7, #20]
 800c654:	0151      	lsls	r1, r2, #5
 800c656:	69ba      	ldr	r2, [r7, #24]
 800c658:	440a      	add	r2, r1
 800c65a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c65e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c662:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	015a      	lsls	r2, r3, #5
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	4413      	add	r3, r2
 800c66c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	697a      	ldr	r2, [r7, #20]
 800c674:	0151      	lsls	r1, r2, #5
 800c676:	69ba      	ldr	r2, [r7, #24]
 800c678:	440a      	add	r2, r1
 800c67a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c67e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c682:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	015a      	lsls	r2, r3, #5
 800c688:	69bb      	ldr	r3, [r7, #24]
 800c68a:	4413      	add	r3, r2
 800c68c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	697a      	ldr	r2, [r7, #20]
 800c694:	0151      	lsls	r1, r2, #5
 800c696:	69ba      	ldr	r2, [r7, #24]
 800c698:	440a      	add	r2, r1
 800c69a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c69e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c6a2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	61fb      	str	r3, [r7, #28]
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c6b0:	d81d      	bhi.n	800c6ee <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	015a      	lsls	r2, r3, #5
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	4413      	add	r3, r2
 800c6ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6c8:	d0ec      	beq.n	800c6a4 <USB_HC_Halt+0x1de>
 800c6ca:	e011      	b.n	800c6f0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	015a      	lsls	r2, r3, #5
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	697a      	ldr	r2, [r7, #20]
 800c6dc:	0151      	lsls	r1, r2, #5
 800c6de:	69ba      	ldr	r2, [r7, #24]
 800c6e0:	440a      	add	r2, r1
 800c6e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c6ea:	6013      	str	r3, [r2, #0]
 800c6ec:	e000      	b.n	800c6f0 <USB_HC_Halt+0x22a>
          break;
 800c6ee:	bf00      	nop
    }
  }

  return HAL_OK;
 800c6f0:	2300      	movs	r3, #0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3724      	adds	r7, #36	; 0x24
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
	...

0800c700 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c700:	b480      	push	{r7}
 800c702:	b087      	sub	sp, #28
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	460b      	mov	r3, r1
 800c70a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c710:	78fb      	ldrb	r3, [r7, #3]
 800c712:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c714:	2301      	movs	r3, #1
 800c716:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	04da      	lsls	r2, r3, #19
 800c71c:	4b15      	ldr	r3, [pc, #84]	; (800c774 <USB_DoPing+0x74>)
 800c71e:	4013      	ands	r3, r2
 800c720:	693a      	ldr	r2, [r7, #16]
 800c722:	0151      	lsls	r1, r2, #5
 800c724:	697a      	ldr	r2, [r7, #20]
 800c726:	440a      	add	r2, r1
 800c728:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c72c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c730:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	015a      	lsls	r2, r3, #5
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	4413      	add	r3, r2
 800c73a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c748:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c750:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	015a      	lsls	r2, r3, #5
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	4413      	add	r3, r2
 800c75a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c75e:	461a      	mov	r2, r3
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c764:	2300      	movs	r3, #0
}
 800c766:	4618      	mov	r0, r3
 800c768:	371c      	adds	r7, #28
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	1ff80000 	.word	0x1ff80000

0800c778 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b086      	sub	sp, #24
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c784:	2300      	movs	r3, #0
 800c786:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f7ff f981 	bl	800ba90 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c78e:	2110      	movs	r1, #16
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f7ff f9b9 	bl	800bb08 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f7ff f9dc 	bl	800bb54 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c79c:	2300      	movs	r3, #0
 800c79e:	613b      	str	r3, [r7, #16]
 800c7a0:	e01f      	b.n	800c7e2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	015a      	lsls	r2, r3, #5
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7b8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7c0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c7c8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	015a      	lsls	r2, r3, #5
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	3301      	adds	r3, #1
 800c7e0:	613b      	str	r3, [r7, #16]
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	2b0f      	cmp	r3, #15
 800c7e6:	d9dc      	bls.n	800c7a2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	613b      	str	r3, [r7, #16]
 800c7ec:	e034      	b.n	800c858 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	015a      	lsls	r2, r3, #5
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c804:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c80c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c814:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	015a      	lsls	r2, r3, #5
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	4413      	add	r3, r2
 800c81e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c822:	461a      	mov	r2, r3
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	3301      	adds	r3, #1
 800c82c:	617b      	str	r3, [r7, #20]
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c834:	d80c      	bhi.n	800c850 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	015a      	lsls	r2, r3, #5
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	4413      	add	r3, r2
 800c83e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c84c:	d0ec      	beq.n	800c828 <USB_StopHost+0xb0>
 800c84e:	e000      	b.n	800c852 <USB_StopHost+0xda>
        break;
 800c850:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	3301      	adds	r3, #1
 800c856:	613b      	str	r3, [r7, #16]
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	2b0f      	cmp	r3, #15
 800c85c:	d9c7      	bls.n	800c7ee <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c864:	461a      	mov	r2, r3
 800c866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c86a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c872:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7ff f8fa 	bl	800ba6e <USB_EnableGlobalInt>

  return HAL_OK;
 800c87a:	2300      	movs	r3, #0
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3718      	adds	r7, #24
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c884:	b590      	push	{r4, r7, lr}
 800c886:	b089      	sub	sp, #36	; 0x24
 800c888:	af04      	add	r7, sp, #16
 800c88a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c88c:	2301      	movs	r3, #1
 800c88e:	2202      	movs	r2, #2
 800c890:	2102      	movs	r1, #2
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 fc66 	bl	800d164 <USBH_FindInterface>
 800c898:	4603      	mov	r3, r0
 800c89a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c89c:	7bfb      	ldrb	r3, [r7, #15]
 800c89e:	2bff      	cmp	r3, #255	; 0xff
 800c8a0:	d002      	beq.n	800c8a8 <USBH_CDC_InterfaceInit+0x24>
 800c8a2:	7bfb      	ldrb	r3, [r7, #15]
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d901      	bls.n	800c8ac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c8a8:	2302      	movs	r3, #2
 800c8aa:	e13d      	b.n	800cb28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c8ac:	7bfb      	ldrb	r3, [r7, #15]
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f000 fc3b 	bl	800d12c <USBH_SelectInterface>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c8ba:	7bbb      	ldrb	r3, [r7, #14]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d001      	beq.n	800c8c4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c8c0:	2302      	movs	r3, #2
 800c8c2:	e131      	b.n	800cb28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800c8ca:	2050      	movs	r0, #80	; 0x50
 800c8cc:	f002 fa00 	bl	800ecd0 <malloc>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c8da:	69db      	ldr	r3, [r3, #28]
 800c8dc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d101      	bne.n	800c8e8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c8e4:	2302      	movs	r3, #2
 800c8e6:	e11f      	b.n	800cb28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c8e8:	2250      	movs	r2, #80	; 0x50
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	68b8      	ldr	r0, [r7, #8]
 800c8ee:	f002 fa0d 	bl	800ed0c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c8f2:	7bfb      	ldrb	r3, [r7, #15]
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	211a      	movs	r1, #26
 800c8f8:	fb01 f303 	mul.w	r3, r1, r3
 800c8fc:	4413      	add	r3, r2
 800c8fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	b25b      	sxtb	r3, r3
 800c906:	2b00      	cmp	r3, #0
 800c908:	da15      	bge.n	800c936 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c90a:	7bfb      	ldrb	r3, [r7, #15]
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	211a      	movs	r1, #26
 800c910:	fb01 f303 	mul.w	r3, r1, r3
 800c914:	4413      	add	r3, r2
 800c916:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c91a:	781a      	ldrb	r2, [r3, #0]
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c920:	7bfb      	ldrb	r3, [r7, #15]
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	211a      	movs	r1, #26
 800c926:	fb01 f303 	mul.w	r3, r1, r3
 800c92a:	4413      	add	r3, r2
 800c92c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c930:	881a      	ldrh	r2, [r3, #0]
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	785b      	ldrb	r3, [r3, #1]
 800c93a:	4619      	mov	r1, r3
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f001 fe32 	bl	800e5a6 <USBH_AllocPipe>
 800c942:	4603      	mov	r3, r0
 800c944:	461a      	mov	r2, r3
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	7819      	ldrb	r1, [r3, #0]
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	7858      	ldrb	r0, [r3, #1]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	8952      	ldrh	r2, [r2, #10]
 800c962:	9202      	str	r2, [sp, #8]
 800c964:	2203      	movs	r2, #3
 800c966:	9201      	str	r2, [sp, #4]
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	4623      	mov	r3, r4
 800c96c:	4602      	mov	r2, r0
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f001 fdea 	bl	800e548 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	2200      	movs	r2, #0
 800c97a:	4619      	mov	r1, r3
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f002 f8f9 	bl	800eb74 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c982:	2300      	movs	r3, #0
 800c984:	2200      	movs	r2, #0
 800c986:	210a      	movs	r1, #10
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 fbeb 	bl	800d164 <USBH_FindInterface>
 800c98e:	4603      	mov	r3, r0
 800c990:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c992:	7bfb      	ldrb	r3, [r7, #15]
 800c994:	2bff      	cmp	r3, #255	; 0xff
 800c996:	d002      	beq.n	800c99e <USBH_CDC_InterfaceInit+0x11a>
 800c998:	7bfb      	ldrb	r3, [r7, #15]
 800c99a:	2b01      	cmp	r3, #1
 800c99c:	d901      	bls.n	800c9a2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c99e:	2302      	movs	r3, #2
 800c9a0:	e0c2      	b.n	800cb28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c9a2:	7bfb      	ldrb	r3, [r7, #15]
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	211a      	movs	r1, #26
 800c9a8:	fb01 f303 	mul.w	r3, r1, r3
 800c9ac:	4413      	add	r3, r2
 800c9ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	b25b      	sxtb	r3, r3
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	da16      	bge.n	800c9e8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c9ba:	7bfb      	ldrb	r3, [r7, #15]
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	211a      	movs	r1, #26
 800c9c0:	fb01 f303 	mul.w	r3, r1, r3
 800c9c4:	4413      	add	r3, r2
 800c9c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c9ca:	781a      	ldrb	r2, [r3, #0]
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c9d0:	7bfb      	ldrb	r3, [r7, #15]
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	211a      	movs	r1, #26
 800c9d6:	fb01 f303 	mul.w	r3, r1, r3
 800c9da:	4413      	add	r3, r2
 800c9dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c9e0:	881a      	ldrh	r2, [r3, #0]
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	835a      	strh	r2, [r3, #26]
 800c9e6:	e015      	b.n	800ca14 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c9e8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	211a      	movs	r1, #26
 800c9ee:	fb01 f303 	mul.w	r3, r1, r3
 800c9f2:	4413      	add	r3, r2
 800c9f4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c9f8:	781a      	ldrb	r2, [r3, #0]
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	211a      	movs	r1, #26
 800ca04:	fb01 f303 	mul.w	r3, r1, r3
 800ca08:	4413      	add	r3, r2
 800ca0a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ca0e:	881a      	ldrh	r2, [r3, #0]
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800ca14:	7bfb      	ldrb	r3, [r7, #15]
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	211a      	movs	r1, #26
 800ca1a:	fb01 f303 	mul.w	r3, r1, r3
 800ca1e:	4413      	add	r3, r2
 800ca20:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	b25b      	sxtb	r3, r3
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	da16      	bge.n	800ca5a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ca2c:	7bfb      	ldrb	r3, [r7, #15]
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	211a      	movs	r1, #26
 800ca32:	fb01 f303 	mul.w	r3, r1, r3
 800ca36:	4413      	add	r3, r2
 800ca38:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ca3c:	781a      	ldrb	r2, [r3, #0]
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ca42:	7bfb      	ldrb	r3, [r7, #15]
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	211a      	movs	r1, #26
 800ca48:	fb01 f303 	mul.w	r3, r1, r3
 800ca4c:	4413      	add	r3, r2
 800ca4e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ca52:	881a      	ldrh	r2, [r3, #0]
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	835a      	strh	r2, [r3, #26]
 800ca58:	e015      	b.n	800ca86 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ca5a:	7bfb      	ldrb	r3, [r7, #15]
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	211a      	movs	r1, #26
 800ca60:	fb01 f303 	mul.w	r3, r1, r3
 800ca64:	4413      	add	r3, r2
 800ca66:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ca6a:	781a      	ldrb	r2, [r3, #0]
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ca70:	7bfb      	ldrb	r3, [r7, #15]
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	211a      	movs	r1, #26
 800ca76:	fb01 f303 	mul.w	r3, r1, r3
 800ca7a:	4413      	add	r3, r2
 800ca7c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ca80:	881a      	ldrh	r2, [r3, #0]
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	7b9b      	ldrb	r3, [r3, #14]
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f001 fd8a 	bl	800e5a6 <USBH_AllocPipe>
 800ca92:	4603      	mov	r3, r0
 800ca94:	461a      	mov	r2, r3
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	7bdb      	ldrb	r3, [r3, #15]
 800ca9e:	4619      	mov	r1, r3
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f001 fd80 	bl	800e5a6 <USBH_AllocPipe>
 800caa6:	4603      	mov	r3, r0
 800caa8:	461a      	mov	r2, r3
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	7b59      	ldrb	r1, [r3, #13]
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	7b98      	ldrb	r0, [r3, #14]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cac2:	68ba      	ldr	r2, [r7, #8]
 800cac4:	8b12      	ldrh	r2, [r2, #24]
 800cac6:	9202      	str	r2, [sp, #8]
 800cac8:	2202      	movs	r2, #2
 800caca:	9201      	str	r2, [sp, #4]
 800cacc:	9300      	str	r3, [sp, #0]
 800cace:	4623      	mov	r3, r4
 800cad0:	4602      	mov	r2, r0
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f001 fd38 	bl	800e548 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	7b19      	ldrb	r1, [r3, #12]
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	7bd8      	ldrb	r0, [r3, #15]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	8b52      	ldrh	r2, [r2, #26]
 800caf0:	9202      	str	r2, [sp, #8]
 800caf2:	2202      	movs	r2, #2
 800caf4:	9201      	str	r2, [sp, #4]
 800caf6:	9300      	str	r3, [sp, #0]
 800caf8:	4623      	mov	r3, r4
 800cafa:	4602      	mov	r2, r0
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f001 fd23 	bl	800e548 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	2200      	movs	r2, #0
 800cb06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	7b5b      	ldrb	r3, [r3, #13]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	4619      	mov	r1, r3
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f002 f82e 	bl	800eb74 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	7b1b      	ldrb	r3, [r3, #12]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	4619      	mov	r1, r3
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f002 f827 	bl	800eb74 <USBH_LL_SetToggle>

  return USBH_OK;
 800cb26:	2300      	movs	r3, #0
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3714      	adds	r7, #20
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd90      	pop	{r4, r7, pc}

0800cb30 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb3e:	69db      	ldr	r3, [r3, #28]
 800cb40:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00e      	beq.n	800cb68 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	4619      	mov	r1, r3
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f001 fd18 	bl	800e586 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f001 fd43 	bl	800e5e8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2200      	movs	r2, #0
 800cb66:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	7b1b      	ldrb	r3, [r3, #12]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00e      	beq.n	800cb8e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	7b1b      	ldrb	r3, [r3, #12]
 800cb74:	4619      	mov	r1, r3
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f001 fd05 	bl	800e586 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	7b1b      	ldrb	r3, [r3, #12]
 800cb80:	4619      	mov	r1, r3
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f001 fd30 	bl	800e5e8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	7b5b      	ldrb	r3, [r3, #13]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d00e      	beq.n	800cbb4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	7b5b      	ldrb	r3, [r3, #13]
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f001 fcf2 	bl	800e586 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	7b5b      	ldrb	r3, [r3, #13]
 800cba6:	4619      	mov	r1, r3
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f001 fd1d 	bl	800e5e8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbba:	69db      	ldr	r3, [r3, #28]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00b      	beq.n	800cbd8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbc6:	69db      	ldr	r3, [r3, #28]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f002 f889 	bl	800ece0 <free>
    phost->pActiveClass->pData = 0U;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800cbd8:	2300      	movs	r3, #0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b084      	sub	sp, #16
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbf0:	69db      	ldr	r3, [r3, #28]
 800cbf2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	3340      	adds	r3, #64	; 0x40
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 f8b1 	bl	800cd62 <GetLineCoding>
 800cc00:	4603      	mov	r3, r0
 800cc02:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800cc04:	7afb      	ldrb	r3, [r7, #11]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d105      	bne.n	800cc16 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc10:	2102      	movs	r1, #2
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800cc16:	7afb      	ldrb	r3, [r7, #11]
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3710      	adds	r7, #16
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc36:	69db      	ldr	r3, [r3, #28]
 800cc38:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800cc40:	2b04      	cmp	r3, #4
 800cc42:	d877      	bhi.n	800cd34 <USBH_CDC_Process+0x114>
 800cc44:	a201      	add	r2, pc, #4	; (adr r2, 800cc4c <USBH_CDC_Process+0x2c>)
 800cc46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc4a:	bf00      	nop
 800cc4c:	0800cc61 	.word	0x0800cc61
 800cc50:	0800cc67 	.word	0x0800cc67
 800cc54:	0800cc97 	.word	0x0800cc97
 800cc58:	0800cd0b 	.word	0x0800cd0b
 800cc5c:	0800cd19 	.word	0x0800cd19
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800cc60:	2300      	movs	r3, #0
 800cc62:	73fb      	strb	r3, [r7, #15]
      break;
 800cc64:	e06d      	b.n	800cd42 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 f897 	bl	800cda0 <SetLineCoding>
 800cc72:	4603      	mov	r3, r0
 800cc74:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cc76:	7bbb      	ldrb	r3, [r7, #14]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d104      	bne.n	800cc86 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	2202      	movs	r2, #2
 800cc80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800cc84:	e058      	b.n	800cd38 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800cc86:	7bbb      	ldrb	r3, [r7, #14]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d055      	beq.n	800cd38 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	2204      	movs	r2, #4
 800cc90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800cc94:	e050      	b.n	800cd38 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	3340      	adds	r3, #64	; 0x40
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 f860 	bl	800cd62 <GetLineCoding>
 800cca2:	4603      	mov	r3, r0
 800cca4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cca6:	7bbb      	ldrb	r3, [r7, #14]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d126      	bne.n	800ccfa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccbe:	791b      	ldrb	r3, [r3, #4]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d13b      	bne.n	800cd3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccce:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d133      	bne.n	800cd3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccde:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d12b      	bne.n	800cd3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccec:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d124      	bne.n	800cd3c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 f958 	bl	800cfa8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ccf8:	e020      	b.n	800cd3c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ccfa:	7bbb      	ldrb	r3, [r7, #14]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d01d      	beq.n	800cd3c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	2204      	movs	r2, #4
 800cd04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800cd08:	e018      	b.n	800cd3c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 f867 	bl	800cdde <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f000 f8da 	bl	800ceca <CDC_ProcessReception>
      break;
 800cd16:	e014      	b.n	800cd42 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800cd18:	2100      	movs	r1, #0
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 ffe3 	bl	800dce6 <USBH_ClrFeature>
 800cd20:	4603      	mov	r3, r0
 800cd22:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cd24:	7bbb      	ldrb	r3, [r7, #14]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d10a      	bne.n	800cd40 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800cd32:	e005      	b.n	800cd40 <USBH_CDC_Process+0x120>

    default:
      break;
 800cd34:	bf00      	nop
 800cd36:	e004      	b.n	800cd42 <USBH_CDC_Process+0x122>
      break;
 800cd38:	bf00      	nop
 800cd3a:	e002      	b.n	800cd42 <USBH_CDC_Process+0x122>
      break;
 800cd3c:	bf00      	nop
 800cd3e:	e000      	b.n	800cd42 <USBH_CDC_Process+0x122>
      break;
 800cd40:	bf00      	nop

  }

  return status;
 800cd42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3710      	adds	r7, #16
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b083      	sub	sp, #12
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800cd54:	2300      	movs	r3, #0
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	370c      	adds	r7, #12
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr

0800cd62 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b082      	sub	sp, #8
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
 800cd6a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	22a1      	movs	r2, #161	; 0xa1
 800cd70:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2221      	movs	r2, #33	; 0x21
 800cd76:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2200      	movs	r2, #0
 800cd82:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2207      	movs	r2, #7
 800cd88:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	2207      	movs	r2, #7
 800cd8e:	4619      	mov	r1, r3
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f001 f988 	bl	800e0a6 <USBH_CtlReq>
 800cd96:	4603      	mov	r3, r0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3708      	adds	r7, #8
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2221      	movs	r2, #33	; 0x21
 800cdae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2220      	movs	r2, #32
 800cdb4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2207      	movs	r2, #7
 800cdc6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	2207      	movs	r2, #7
 800cdcc:	4619      	mov	r1, r3
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f001 f969 	bl	800e0a6 <USBH_CtlReq>
 800cdd4:	4603      	mov	r3, r0
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3708      	adds	r7, #8
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800cdde:	b580      	push	{r7, lr}
 800cde0:	b086      	sub	sp, #24
 800cde2:	af02      	add	r7, sp, #8
 800cde4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdec:	69db      	ldr	r3, [r3, #28]
 800cdee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d002      	beq.n	800ce04 <CDC_ProcessTransmission+0x26>
 800cdfe:	2b02      	cmp	r3, #2
 800ce00:	d023      	beq.n	800ce4a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ce02:	e05e      	b.n	800cec2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce08:	68fa      	ldr	r2, [r7, #12]
 800ce0a:	8b12      	ldrh	r2, [r2, #24]
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d90b      	bls.n	800ce28 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	69d9      	ldr	r1, [r3, #28]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	8b1a      	ldrh	r2, [r3, #24]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	7b5b      	ldrb	r3, [r3, #13]
 800ce1c:	2001      	movs	r0, #1
 800ce1e:	9000      	str	r0, [sp, #0]
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f001 fb4e 	bl	800e4c2 <USBH_BulkSendData>
 800ce26:	e00b      	b.n	800ce40 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800ce30:	b29a      	uxth	r2, r3
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	7b5b      	ldrb	r3, [r3, #13]
 800ce36:	2001      	movs	r0, #1
 800ce38:	9000      	str	r0, [sp, #0]
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f001 fb41 	bl	800e4c2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2202      	movs	r2, #2
 800ce44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ce48:	e03b      	b.n	800cec2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	7b5b      	ldrb	r3, [r3, #13]
 800ce4e:	4619      	mov	r1, r3
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f001 fe65 	bl	800eb20 <USBH_LL_GetURBState>
 800ce56:	4603      	mov	r3, r0
 800ce58:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ce5a:	7afb      	ldrb	r3, [r7, #11]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d128      	bne.n	800ceb2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce64:	68fa      	ldr	r2, [r7, #12]
 800ce66:	8b12      	ldrh	r2, [r2, #24]
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d90e      	bls.n	800ce8a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce70:	68fa      	ldr	r2, [r7, #12]
 800ce72:	8b12      	ldrh	r2, [r2, #24]
 800ce74:	1a9a      	subs	r2, r3, r2
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	69db      	ldr	r3, [r3, #28]
 800ce7e:	68fa      	ldr	r2, [r7, #12]
 800ce80:	8b12      	ldrh	r2, [r2, #24]
 800ce82:	441a      	add	r2, r3
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	61da      	str	r2, [r3, #28]
 800ce88:	e002      	b.n	800ce90 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d004      	beq.n	800cea2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800cea0:	e00e      	b.n	800cec0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2200      	movs	r2, #0
 800cea6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 f868 	bl	800cf80 <USBH_CDC_TransmitCallback>
      break;
 800ceb0:	e006      	b.n	800cec0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800ceb2:	7afb      	ldrb	r3, [r7, #11]
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	d103      	bne.n	800cec0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2201      	movs	r2, #1
 800cebc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800cec0:	bf00      	nop
  }
}
 800cec2:	bf00      	nop
 800cec4:	3710      	adds	r7, #16
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}

0800ceca <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ceca:	b580      	push	{r7, lr}
 800cecc:	b086      	sub	sp, #24
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ced8:	69db      	ldr	r3, [r3, #28]
 800ceda:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cedc:	2300      	movs	r3, #0
 800cede:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800cee6:	2b03      	cmp	r3, #3
 800cee8:	d002      	beq.n	800cef0 <CDC_ProcessReception+0x26>
 800ceea:	2b04      	cmp	r3, #4
 800ceec:	d00e      	beq.n	800cf0c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ceee:	e043      	b.n	800cf78 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	6a19      	ldr	r1, [r3, #32]
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	8b5a      	ldrh	r2, [r3, #26]
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	7b1b      	ldrb	r3, [r3, #12]
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f001 fb05 	bl	800e50c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	2204      	movs	r2, #4
 800cf06:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800cf0a:	e035      	b.n	800cf78 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	7b1b      	ldrb	r3, [r3, #12]
 800cf10:	4619      	mov	r1, r3
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f001 fe04 	bl	800eb20 <USBH_LL_GetURBState>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800cf1c:	7cfb      	ldrb	r3, [r7, #19]
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d129      	bne.n	800cf76 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	7b1b      	ldrb	r3, [r3, #12]
 800cf26:	4619      	mov	r1, r3
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f001 fd67 	bl	800e9fc <USBH_LL_GetLastXferSize>
 800cf2e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d016      	beq.n	800cf68 <CDC_ProcessReception+0x9e>
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	8b5b      	ldrh	r3, [r3, #26]
 800cf3e:	461a      	mov	r2, r3
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d910      	bls.n	800cf68 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	1ad2      	subs	r2, r2, r3
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	6a1a      	ldr	r2, [r3, #32]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	441a      	add	r2, r3
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	2203      	movs	r2, #3
 800cf62:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800cf66:	e006      	b.n	800cf76 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 f80f 	bl	800cf94 <USBH_CDC_ReceiveCallback>
      break;
 800cf76:	bf00      	nop
  }
}
 800cf78:	bf00      	nop
 800cf7a:	3718      	adds	r7, #24
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cf88:	bf00      	nop
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cf9c:	bf00      	nop
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cfb0:	bf00      	nop
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d101      	bne.n	800cfd4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800cfd0:	2302      	movs	r3, #2
 800cfd2:	e029      	b.n	800d028 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	79fa      	ldrb	r2, [r7, #7]
 800cfd8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f000 f81f 	bl	800d030 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2200      	movs	r2, #0
 800cff6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2200      	movs	r2, #0
 800cffe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2200      	movs	r2, #0
 800d006:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2200      	movs	r2, #0
 800d00e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d003      	beq.n	800d020 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	68ba      	ldr	r2, [r7, #8]
 800d01c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800d020:	68f8      	ldr	r0, [r7, #12]
 800d022:	f001 fc37 	bl	800e894 <USBH_LL_Init>

  return USBH_OK;
 800d026:	2300      	movs	r3, #0
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3710      	adds	r7, #16
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d038:	2300      	movs	r3, #0
 800d03a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d03c:	2300      	movs	r3, #0
 800d03e:	60fb      	str	r3, [r7, #12]
 800d040:	e009      	b.n	800d056 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	33e0      	adds	r3, #224	; 0xe0
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	4413      	add	r3, r2
 800d04c:	2200      	movs	r2, #0
 800d04e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	3301      	adds	r3, #1
 800d054:	60fb      	str	r3, [r7, #12]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2b0e      	cmp	r3, #14
 800d05a:	d9f2      	bls.n	800d042 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d05c:	2300      	movs	r3, #0
 800d05e:	60fb      	str	r3, [r7, #12]
 800d060:	e009      	b.n	800d076 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	4413      	add	r3, r2
 800d068:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d06c:	2200      	movs	r2, #0
 800d06e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	3301      	adds	r3, #1
 800d074:	60fb      	str	r3, [r7, #12]
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d07c:	d3f1      	bcc.n	800d062 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2200      	movs	r2, #0
 800d082:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2201      	movs	r2, #1
 800d08e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2240      	movs	r2, #64	; 0x40
 800d0a2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3714      	adds	r7, #20
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d016      	beq.n	800d11a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d10e      	bne.n	800d114 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d0fc:	1c59      	adds	r1, r3, #1
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	33de      	adds	r3, #222	; 0xde
 800d108:	6839      	ldr	r1, [r7, #0]
 800d10a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d10e:	2300      	movs	r3, #0
 800d110:	73fb      	strb	r3, [r7, #15]
 800d112:	e004      	b.n	800d11e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d114:	2302      	movs	r3, #2
 800d116:	73fb      	strb	r3, [r7, #15]
 800d118:	e001      	b.n	800d11e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d11a:	2302      	movs	r3, #2
 800d11c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d11e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d120:	4618      	mov	r0, r3
 800d122:	3714      	adds	r7, #20
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr

0800d12c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	460b      	mov	r3, r1
 800d136:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d138:	2300      	movs	r3, #0
 800d13a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d142:	78fa      	ldrb	r2, [r7, #3]
 800d144:	429a      	cmp	r2, r3
 800d146:	d204      	bcs.n	800d152 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	78fa      	ldrb	r2, [r7, #3]
 800d14c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d150:	e001      	b.n	800d156 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d152:	2302      	movs	r3, #2
 800d154:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d156:	7bfb      	ldrb	r3, [r7, #15]
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3714      	adds	r7, #20
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d164:	b480      	push	{r7}
 800d166:	b087      	sub	sp, #28
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	4608      	mov	r0, r1
 800d16e:	4611      	mov	r1, r2
 800d170:	461a      	mov	r2, r3
 800d172:	4603      	mov	r3, r0
 800d174:	70fb      	strb	r3, [r7, #3]
 800d176:	460b      	mov	r3, r1
 800d178:	70bb      	strb	r3, [r7, #2]
 800d17a:	4613      	mov	r3, r2
 800d17c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d17e:	2300      	movs	r3, #0
 800d180:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800d182:	2300      	movs	r3, #0
 800d184:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d18c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d18e:	e025      	b.n	800d1dc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d190:	7dfb      	ldrb	r3, [r7, #23]
 800d192:	221a      	movs	r2, #26
 800d194:	fb02 f303 	mul.w	r3, r2, r3
 800d198:	3308      	adds	r3, #8
 800d19a:	68fa      	ldr	r2, [r7, #12]
 800d19c:	4413      	add	r3, r2
 800d19e:	3302      	adds	r3, #2
 800d1a0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	795b      	ldrb	r3, [r3, #5]
 800d1a6:	78fa      	ldrb	r2, [r7, #3]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d002      	beq.n	800d1b2 <USBH_FindInterface+0x4e>
 800d1ac:	78fb      	ldrb	r3, [r7, #3]
 800d1ae:	2bff      	cmp	r3, #255	; 0xff
 800d1b0:	d111      	bne.n	800d1d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d1b6:	78ba      	ldrb	r2, [r7, #2]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d002      	beq.n	800d1c2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1bc:	78bb      	ldrb	r3, [r7, #2]
 800d1be:	2bff      	cmp	r3, #255	; 0xff
 800d1c0:	d109      	bne.n	800d1d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1c6:	787a      	ldrb	r2, [r7, #1]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d002      	beq.n	800d1d2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d1cc:	787b      	ldrb	r3, [r7, #1]
 800d1ce:	2bff      	cmp	r3, #255	; 0xff
 800d1d0:	d101      	bne.n	800d1d6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d1d2:	7dfb      	ldrb	r3, [r7, #23]
 800d1d4:	e006      	b.n	800d1e4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d1d6:	7dfb      	ldrb	r3, [r7, #23]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d1dc:	7dfb      	ldrb	r3, [r7, #23]
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	d9d6      	bls.n	800d190 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d1e2:	23ff      	movs	r3, #255	; 0xff
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	371c      	adds	r7, #28
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f001 fb87 	bl	800e90c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800d1fe:	2101      	movs	r1, #1
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f001 fca0 	bl	800eb46 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d206:	2300      	movs	r3, #0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3708      	adds	r7, #8
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b088      	sub	sp, #32
 800d214:	af04      	add	r7, sp, #16
 800d216:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d218:	2302      	movs	r3, #2
 800d21a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d21c:	2300      	movs	r3, #0
 800d21e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d226:	b2db      	uxtb	r3, r3
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d102      	bne.n	800d232 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2203      	movs	r2, #3
 800d230:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	b2db      	uxtb	r3, r3
 800d238:	2b0b      	cmp	r3, #11
 800d23a:	f200 81b3 	bhi.w	800d5a4 <USBH_Process+0x394>
 800d23e:	a201      	add	r2, pc, #4	; (adr r2, 800d244 <USBH_Process+0x34>)
 800d240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d244:	0800d275 	.word	0x0800d275
 800d248:	0800d2a7 	.word	0x0800d2a7
 800d24c:	0800d30f 	.word	0x0800d30f
 800d250:	0800d53f 	.word	0x0800d53f
 800d254:	0800d5a5 	.word	0x0800d5a5
 800d258:	0800d3b3 	.word	0x0800d3b3
 800d25c:	0800d4e5 	.word	0x0800d4e5
 800d260:	0800d3e9 	.word	0x0800d3e9
 800d264:	0800d409 	.word	0x0800d409
 800d268:	0800d429 	.word	0x0800d429
 800d26c:	0800d457 	.word	0x0800d457
 800d270:	0800d527 	.word	0x0800d527
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f000 8193 	beq.w	800d5a8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2201      	movs	r2, #1
 800d286:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d288:	20c8      	movs	r0, #200	; 0xc8
 800d28a:	f001 fca3 	bl	800ebd4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f001 fb99 	bl	800e9c6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d2a4:	e180      	b.n	800d5a8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d107      	bne.n	800d2c0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2202      	movs	r2, #2
 800d2bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d2be:	e182      	b.n	800d5c6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d2c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2ca:	d914      	bls.n	800d2f6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	b2da      	uxtb	r2, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d2e2:	2b03      	cmp	r3, #3
 800d2e4:	d903      	bls.n	800d2ee <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	220d      	movs	r2, #13
 800d2ea:	701a      	strb	r2, [r3, #0]
      break;
 800d2ec:	e16b      	b.n	800d5c6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	701a      	strb	r2, [r3, #0]
      break;
 800d2f4:	e167      	b.n	800d5c6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d2fc:	f103 020a 	add.w	r2, r3, #10
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d306:	200a      	movs	r0, #10
 800d308:	f001 fc64 	bl	800ebd4 <USBH_Delay>
      break;
 800d30c:	e15b      	b.n	800d5c6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d314:	2b00      	cmp	r3, #0
 800d316:	d005      	beq.n	800d324 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d31e:	2104      	movs	r1, #4
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d324:	2064      	movs	r0, #100	; 0x64
 800d326:	f001 fc55 	bl	800ebd4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f001 fb24 	bl	800e978 <USBH_LL_GetSpeed>
 800d330:	4603      	mov	r3, r0
 800d332:	461a      	mov	r2, r3
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2205      	movs	r2, #5
 800d33e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d340:	2100      	movs	r1, #0
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f001 f92f 	bl	800e5a6 <USBH_AllocPipe>
 800d348:	4603      	mov	r3, r0
 800d34a:	461a      	mov	r2, r3
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d350:	2180      	movs	r1, #128	; 0x80
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f001 f927 	bl	800e5a6 <USBH_AllocPipe>
 800d358:	4603      	mov	r3, r0
 800d35a:	461a      	mov	r2, r3
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	7919      	ldrb	r1, [r3, #4]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d374:	b292      	uxth	r2, r2
 800d376:	9202      	str	r2, [sp, #8]
 800d378:	2200      	movs	r2, #0
 800d37a:	9201      	str	r2, [sp, #4]
 800d37c:	9300      	str	r3, [sp, #0]
 800d37e:	4603      	mov	r3, r0
 800d380:	2280      	movs	r2, #128	; 0x80
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f001 f8e0 	bl	800e548 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	7959      	ldrb	r1, [r3, #5]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d39c:	b292      	uxth	r2, r2
 800d39e:	9202      	str	r2, [sp, #8]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	9201      	str	r2, [sp, #4]
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f001 f8cc 	bl	800e548 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d3b0:	e109      	b.n	800d5c6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f90c 	bl	800d5d0 <USBH_HandleEnum>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d3bc:	7bbb      	ldrb	r3, [r7, #14]
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	f040 80f3 	bne.w	800d5ac <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	d103      	bne.n	800d3e0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2208      	movs	r2, #8
 800d3dc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d3de:	e0e5      	b.n	800d5ac <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2207      	movs	r2, #7
 800d3e4:	701a      	strb	r2, [r3, #0]
      break;
 800d3e6:	e0e1      	b.n	800d5ac <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f000 80de 	beq.w	800d5b0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d3fa:	2101      	movs	r1, #1
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2208      	movs	r2, #8
 800d404:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800d406:	e0d3      	b.n	800d5b0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d40e:	b29b      	uxth	r3, r3
 800d410:	4619      	mov	r1, r3
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 fc20 	bl	800dc58 <USBH_SetCfg>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f040 80ca 	bne.w	800d5b4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2209      	movs	r2, #9
 800d424:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d426:	e0c5      	b.n	800d5b4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d42e:	f003 0320 	and.w	r3, r3, #32
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00b      	beq.n	800d44e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800d436:	2101      	movs	r1, #1
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f000 fc30 	bl	800dc9e <USBH_SetFeature>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	f040 80b9 	bne.w	800d5b8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	220a      	movs	r2, #10
 800d44a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d44c:	e0b4      	b.n	800d5b8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	220a      	movs	r2, #10
 800d452:	701a      	strb	r2, [r3, #0]
      break;
 800d454:	e0b0      	b.n	800d5b8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f000 80ad 	beq.w	800d5bc <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d46a:	2300      	movs	r3, #0
 800d46c:	73fb      	strb	r3, [r7, #15]
 800d46e:	e016      	b.n	800d49e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d470:	7bfa      	ldrb	r2, [r7, #15]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	32de      	adds	r2, #222	; 0xde
 800d476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d47a:	791a      	ldrb	r2, [r3, #4]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d482:	429a      	cmp	r2, r3
 800d484:	d108      	bne.n	800d498 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d486:	7bfa      	ldrb	r2, [r7, #15]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	32de      	adds	r2, #222	; 0xde
 800d48c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d496:	e005      	b.n	800d4a4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d498:	7bfb      	ldrb	r3, [r7, #15]
 800d49a:	3301      	adds	r3, #1
 800d49c:	73fb      	strb	r3, [r7, #15]
 800d49e:	7bfb      	ldrb	r3, [r7, #15]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d0e5      	beq.n	800d470 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d016      	beq.n	800d4dc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	4798      	blx	r3
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d109      	bne.n	800d4d4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2206      	movs	r2, #6
 800d4c4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d4cc:	2103      	movs	r1, #3
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d4d2:	e073      	b.n	800d5bc <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	220d      	movs	r2, #13
 800d4d8:	701a      	strb	r2, [r3, #0]
      break;
 800d4da:	e06f      	b.n	800d5bc <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	220d      	movs	r2, #13
 800d4e0:	701a      	strb	r2, [r3, #0]
      break;
 800d4e2:	e06b      	b.n	800d5bc <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d017      	beq.n	800d51e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4f4:	691b      	ldr	r3, [r3, #16]
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	4798      	blx	r3
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d4fe:	7bbb      	ldrb	r3, [r7, #14]
 800d500:	b2db      	uxtb	r3, r3
 800d502:	2b00      	cmp	r3, #0
 800d504:	d103      	bne.n	800d50e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	220b      	movs	r2, #11
 800d50a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d50c:	e058      	b.n	800d5c0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800d50e:	7bbb      	ldrb	r3, [r7, #14]
 800d510:	b2db      	uxtb	r3, r3
 800d512:	2b02      	cmp	r3, #2
 800d514:	d154      	bne.n	800d5c0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	220d      	movs	r2, #13
 800d51a:	701a      	strb	r2, [r3, #0]
      break;
 800d51c:	e050      	b.n	800d5c0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	220d      	movs	r2, #13
 800d522:	701a      	strb	r2, [r3, #0]
      break;
 800d524:	e04c      	b.n	800d5c0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d049      	beq.n	800d5c4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d536:	695b      	ldr	r3, [r3, #20]
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	4798      	blx	r3
      }
      break;
 800d53c:	e042      	b.n	800d5c4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2200      	movs	r2, #0
 800d542:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f7ff fd72 	bl	800d030 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d552:	2b00      	cmp	r3, #0
 800d554:	d009      	beq.n	800d56a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d55c:	68db      	ldr	r3, [r3, #12]
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2200      	movs	r2, #0
 800d566:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d570:	2b00      	cmp	r3, #0
 800d572:	d005      	beq.n	800d580 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d57a:	2105      	movs	r1, #5
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d586:	b2db      	uxtb	r3, r3
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d107      	bne.n	800d59c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2200      	movs	r2, #0
 800d590:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f7ff fe2b 	bl	800d1f0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d59a:	e014      	b.n	800d5c6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f001 f9b5 	bl	800e90c <USBH_LL_Start>
      break;
 800d5a2:	e010      	b.n	800d5c6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800d5a4:	bf00      	nop
 800d5a6:	e00e      	b.n	800d5c6 <USBH_Process+0x3b6>
      break;
 800d5a8:	bf00      	nop
 800d5aa:	e00c      	b.n	800d5c6 <USBH_Process+0x3b6>
      break;
 800d5ac:	bf00      	nop
 800d5ae:	e00a      	b.n	800d5c6 <USBH_Process+0x3b6>
    break;
 800d5b0:	bf00      	nop
 800d5b2:	e008      	b.n	800d5c6 <USBH_Process+0x3b6>
      break;
 800d5b4:	bf00      	nop
 800d5b6:	e006      	b.n	800d5c6 <USBH_Process+0x3b6>
      break;
 800d5b8:	bf00      	nop
 800d5ba:	e004      	b.n	800d5c6 <USBH_Process+0x3b6>
      break;
 800d5bc:	bf00      	nop
 800d5be:	e002      	b.n	800d5c6 <USBH_Process+0x3b6>
      break;
 800d5c0:	bf00      	nop
 800d5c2:	e000      	b.n	800d5c6 <USBH_Process+0x3b6>
      break;
 800d5c4:	bf00      	nop
  }
  return USBH_OK;
 800d5c6:	2300      	movs	r3, #0
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3710      	adds	r7, #16
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b088      	sub	sp, #32
 800d5d4:	af04      	add	r7, sp, #16
 800d5d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	785b      	ldrb	r3, [r3, #1]
 800d5e4:	2b07      	cmp	r3, #7
 800d5e6:	f200 81c1 	bhi.w	800d96c <USBH_HandleEnum+0x39c>
 800d5ea:	a201      	add	r2, pc, #4	; (adr r2, 800d5f0 <USBH_HandleEnum+0x20>)
 800d5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f0:	0800d611 	.word	0x0800d611
 800d5f4:	0800d6cf 	.word	0x0800d6cf
 800d5f8:	0800d739 	.word	0x0800d739
 800d5fc:	0800d7c7 	.word	0x0800d7c7
 800d600:	0800d831 	.word	0x0800d831
 800d604:	0800d8a1 	.word	0x0800d8a1
 800d608:	0800d8e7 	.word	0x0800d8e7
 800d60c:	0800d92d 	.word	0x0800d92d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d610:	2108      	movs	r1, #8
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 fa50 	bl	800dab8 <USBH_Get_DevDesc>
 800d618:	4603      	mov	r3, r0
 800d61a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d61c:	7bbb      	ldrb	r3, [r7, #14]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d130      	bne.n	800d684 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2201      	movs	r2, #1
 800d630:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	7919      	ldrb	r1, [r3, #4]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d646:	b292      	uxth	r2, r2
 800d648:	9202      	str	r2, [sp, #8]
 800d64a:	2200      	movs	r2, #0
 800d64c:	9201      	str	r2, [sp, #4]
 800d64e:	9300      	str	r3, [sp, #0]
 800d650:	4603      	mov	r3, r0
 800d652:	2280      	movs	r2, #128	; 0x80
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f000 ff77 	bl	800e548 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	7959      	ldrb	r1, [r3, #5]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d66e:	b292      	uxth	r2, r2
 800d670:	9202      	str	r2, [sp, #8]
 800d672:	2200      	movs	r2, #0
 800d674:	9201      	str	r2, [sp, #4]
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	4603      	mov	r3, r0
 800d67a:	2200      	movs	r2, #0
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 ff63 	bl	800e548 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d682:	e175      	b.n	800d970 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d684:	7bbb      	ldrb	r3, [r7, #14]
 800d686:	2b03      	cmp	r3, #3
 800d688:	f040 8172 	bne.w	800d970 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d692:	3301      	adds	r3, #1
 800d694:	b2da      	uxtb	r2, r3
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d6a2:	2b03      	cmp	r3, #3
 800d6a4:	d903      	bls.n	800d6ae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	220d      	movs	r2, #13
 800d6aa:	701a      	strb	r2, [r3, #0]
      break;
 800d6ac:	e160      	b.n	800d970 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	795b      	ldrb	r3, [r3, #5]
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 ff97 	bl	800e5e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	791b      	ldrb	r3, [r3, #4]
 800d6be:	4619      	mov	r1, r3
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 ff91 	bl	800e5e8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	701a      	strb	r2, [r3, #0]
      break;
 800d6cc:	e150      	b.n	800d970 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d6ce:	2112      	movs	r1, #18
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 f9f1 	bl	800dab8 <USBH_Get_DevDesc>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d6da:	7bbb      	ldrb	r3, [r7, #14]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d103      	bne.n	800d6e8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2202      	movs	r2, #2
 800d6e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d6e6:	e145      	b.n	800d974 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d6e8:	7bbb      	ldrb	r3, [r7, #14]
 800d6ea:	2b03      	cmp	r3, #3
 800d6ec:	f040 8142 	bne.w	800d974 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	b2da      	uxtb	r2, r3
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d706:	2b03      	cmp	r3, #3
 800d708:	d903      	bls.n	800d712 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	220d      	movs	r2, #13
 800d70e:	701a      	strb	r2, [r3, #0]
      break;
 800d710:	e130      	b.n	800d974 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	795b      	ldrb	r3, [r3, #5]
 800d716:	4619      	mov	r1, r3
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 ff65 	bl	800e5e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	791b      	ldrb	r3, [r3, #4]
 800d722:	4619      	mov	r1, r3
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f000 ff5f 	bl	800e5e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2200      	movs	r2, #0
 800d72e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	701a      	strb	r2, [r3, #0]
      break;
 800d736:	e11d      	b.n	800d974 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d738:	2101      	movs	r1, #1
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 fa68 	bl	800dc10 <USBH_SetAddress>
 800d740:	4603      	mov	r3, r0
 800d742:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d744:	7bbb      	ldrb	r3, [r7, #14]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d132      	bne.n	800d7b0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d74a:	2002      	movs	r0, #2
 800d74c:	f001 fa42 	bl	800ebd4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2201      	movs	r2, #1
 800d754:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2203      	movs	r2, #3
 800d75c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	7919      	ldrb	r1, [r3, #4]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d772:	b292      	uxth	r2, r2
 800d774:	9202      	str	r2, [sp, #8]
 800d776:	2200      	movs	r2, #0
 800d778:	9201      	str	r2, [sp, #4]
 800d77a:	9300      	str	r3, [sp, #0]
 800d77c:	4603      	mov	r3, r0
 800d77e:	2280      	movs	r2, #128	; 0x80
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 fee1 	bl	800e548 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	7959      	ldrb	r1, [r3, #5]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d79a:	b292      	uxth	r2, r2
 800d79c:	9202      	str	r2, [sp, #8]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	9201      	str	r2, [sp, #4]
 800d7a2:	9300      	str	r3, [sp, #0]
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 fecd 	bl	800e548 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d7ae:	e0e3      	b.n	800d978 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d7b0:	7bbb      	ldrb	r3, [r7, #14]
 800d7b2:	2b03      	cmp	r3, #3
 800d7b4:	f040 80e0 	bne.w	800d978 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	220d      	movs	r2, #13
 800d7bc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	705a      	strb	r2, [r3, #1]
      break;
 800d7c4:	e0d8      	b.n	800d978 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d7c6:	2109      	movs	r1, #9
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f000 f99d 	bl	800db08 <USBH_Get_CfgDesc>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d7d2:	7bbb      	ldrb	r3, [r7, #14]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d103      	bne.n	800d7e0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2204      	movs	r2, #4
 800d7dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d7de:	e0cd      	b.n	800d97c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d7e0:	7bbb      	ldrb	r3, [r7, #14]
 800d7e2:	2b03      	cmp	r3, #3
 800d7e4:	f040 80ca 	bne.w	800d97c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	b2da      	uxtb	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d7fe:	2b03      	cmp	r3, #3
 800d800:	d903      	bls.n	800d80a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	220d      	movs	r2, #13
 800d806:	701a      	strb	r2, [r3, #0]
      break;
 800d808:	e0b8      	b.n	800d97c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	795b      	ldrb	r3, [r3, #5]
 800d80e:	4619      	mov	r1, r3
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 fee9 	bl	800e5e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	791b      	ldrb	r3, [r3, #4]
 800d81a:	4619      	mov	r1, r3
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 fee3 	bl	800e5e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2200      	movs	r2, #0
 800d826:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	701a      	strb	r2, [r3, #0]
      break;
 800d82e:	e0a5      	b.n	800d97c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d836:	4619      	mov	r1, r3
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 f965 	bl	800db08 <USBH_Get_CfgDesc>
 800d83e:	4603      	mov	r3, r0
 800d840:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d842:	7bbb      	ldrb	r3, [r7, #14]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d103      	bne.n	800d850 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2205      	movs	r2, #5
 800d84c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d84e:	e097      	b.n	800d980 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d850:	7bbb      	ldrb	r3, [r7, #14]
 800d852:	2b03      	cmp	r3, #3
 800d854:	f040 8094 	bne.w	800d980 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d85e:	3301      	adds	r3, #1
 800d860:	b2da      	uxtb	r2, r3
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d86e:	2b03      	cmp	r3, #3
 800d870:	d903      	bls.n	800d87a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	220d      	movs	r2, #13
 800d876:	701a      	strb	r2, [r3, #0]
      break;
 800d878:	e082      	b.n	800d980 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	795b      	ldrb	r3, [r3, #5]
 800d87e:	4619      	mov	r1, r3
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f000 feb1 	bl	800e5e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	791b      	ldrb	r3, [r3, #4]
 800d88a:	4619      	mov	r1, r3
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 feab 	bl	800e5e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2200      	movs	r2, #0
 800d896:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	701a      	strb	r2, [r3, #0]
      break;
 800d89e:	e06f      	b.n	800d980 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d019      	beq.n	800d8de <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d8b6:	23ff      	movs	r3, #255	; 0xff
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 f949 	bl	800db50 <USBH_Get_StringDesc>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d8c2:	7bbb      	ldrb	r3, [r7, #14]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d103      	bne.n	800d8d0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2206      	movs	r2, #6
 800d8cc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d8ce:	e059      	b.n	800d984 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d8d0:	7bbb      	ldrb	r3, [r7, #14]
 800d8d2:	2b03      	cmp	r3, #3
 800d8d4:	d156      	bne.n	800d984 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2206      	movs	r2, #6
 800d8da:	705a      	strb	r2, [r3, #1]
      break;
 800d8dc:	e052      	b.n	800d984 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2206      	movs	r2, #6
 800d8e2:	705a      	strb	r2, [r3, #1]
      break;
 800d8e4:	e04e      	b.n	800d984 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d019      	beq.n	800d924 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d8fc:	23ff      	movs	r3, #255	; 0xff
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 f926 	bl	800db50 <USBH_Get_StringDesc>
 800d904:	4603      	mov	r3, r0
 800d906:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d908:	7bbb      	ldrb	r3, [r7, #14]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d103      	bne.n	800d916 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2207      	movs	r2, #7
 800d912:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d914:	e038      	b.n	800d988 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d916:	7bbb      	ldrb	r3, [r7, #14]
 800d918:	2b03      	cmp	r3, #3
 800d91a:	d135      	bne.n	800d988 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2207      	movs	r2, #7
 800d920:	705a      	strb	r2, [r3, #1]
      break;
 800d922:	e031      	b.n	800d988 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2207      	movs	r2, #7
 800d928:	705a      	strb	r2, [r3, #1]
      break;
 800d92a:	e02d      	b.n	800d988 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d932:	2b00      	cmp	r3, #0
 800d934:	d017      	beq.n	800d966 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d942:	23ff      	movs	r3, #255	; 0xff
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f000 f903 	bl	800db50 <USBH_Get_StringDesc>
 800d94a:	4603      	mov	r3, r0
 800d94c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d94e:	7bbb      	ldrb	r3, [r7, #14]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d102      	bne.n	800d95a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d954:	2300      	movs	r3, #0
 800d956:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d958:	e018      	b.n	800d98c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d95a:	7bbb      	ldrb	r3, [r7, #14]
 800d95c:	2b03      	cmp	r3, #3
 800d95e:	d115      	bne.n	800d98c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800d960:	2300      	movs	r3, #0
 800d962:	73fb      	strb	r3, [r7, #15]
      break;
 800d964:	e012      	b.n	800d98c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800d966:	2300      	movs	r3, #0
 800d968:	73fb      	strb	r3, [r7, #15]
      break;
 800d96a:	e00f      	b.n	800d98c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800d96c:	bf00      	nop
 800d96e:	e00e      	b.n	800d98e <USBH_HandleEnum+0x3be>
      break;
 800d970:	bf00      	nop
 800d972:	e00c      	b.n	800d98e <USBH_HandleEnum+0x3be>
      break;
 800d974:	bf00      	nop
 800d976:	e00a      	b.n	800d98e <USBH_HandleEnum+0x3be>
      break;
 800d978:	bf00      	nop
 800d97a:	e008      	b.n	800d98e <USBH_HandleEnum+0x3be>
      break;
 800d97c:	bf00      	nop
 800d97e:	e006      	b.n	800d98e <USBH_HandleEnum+0x3be>
      break;
 800d980:	bf00      	nop
 800d982:	e004      	b.n	800d98e <USBH_HandleEnum+0x3be>
      break;
 800d984:	bf00      	nop
 800d986:	e002      	b.n	800d98e <USBH_HandleEnum+0x3be>
      break;
 800d988:	bf00      	nop
 800d98a:	e000      	b.n	800d98e <USBH_HandleEnum+0x3be>
      break;
 800d98c:	bf00      	nop
  }
  return Status;
 800d98e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d990:	4618      	mov	r0, r3
 800d992:	3710      	adds	r7, #16
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d998:	b480      	push	{r7}
 800d99a:	b083      	sub	sp, #12
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	683a      	ldr	r2, [r7, #0]
 800d9a6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d9aa:	bf00      	nop
 800d9ac:	370c      	adds	r7, #12
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr

0800d9b6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b082      	sub	sp, #8
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d9c4:	1c5a      	adds	r2, r3, #1
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 f804 	bl	800d9da <USBH_HandleSof>
}
 800d9d2:	bf00      	nop
 800d9d4:	3708      	adds	r7, #8
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b082      	sub	sp, #8
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	2b0b      	cmp	r3, #11
 800d9ea:	d10a      	bne.n	800da02 <USBH_HandleSof+0x28>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d005      	beq.n	800da02 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d9fc:	699b      	ldr	r3, [r3, #24]
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	4798      	blx	r3
  }
}
 800da02:	bf00      	nop
 800da04:	3708      	adds	r7, #8
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}

0800da0a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800da0a:	b480      	push	{r7}
 800da0c:	b083      	sub	sp, #12
 800da0e:	af00      	add	r7, sp, #0
 800da10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2201      	movs	r2, #1
 800da16:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800da1a:	bf00      	nop
}
 800da1c:	370c      	adds	r7, #12
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr

0800da26 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800da26:	b480      	push	{r7}
 800da28:	b083      	sub	sp, #12
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800da36:	bf00      	nop
}
 800da38:	370c      	adds	r7, #12
 800da3a:	46bd      	mov	sp, r7
 800da3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da40:	4770      	bx	lr

0800da42 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800da42:	b480      	push	{r7}
 800da44:	b083      	sub	sp, #12
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2201      	movs	r2, #1
 800da4e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2200      	movs	r2, #0
 800da56:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2200      	movs	r2, #0
 800da5e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800da62:	2300      	movs	r3, #0
}
 800da64:	4618      	mov	r0, r3
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2201      	movs	r2, #1
 800da7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2200      	movs	r2, #0
 800da84:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 ff56 	bl	800e942 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	791b      	ldrb	r3, [r3, #4]
 800da9a:	4619      	mov	r1, r3
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f000 fda3 	bl	800e5e8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	795b      	ldrb	r3, [r3, #5]
 800daa6:	4619      	mov	r1, r3
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f000 fd9d 	bl	800e5e8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800daae:	2300      	movs	r3, #0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3708      	adds	r7, #8
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b086      	sub	sp, #24
 800dabc:	af02      	add	r7, sp, #8
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	460b      	mov	r3, r1
 800dac2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800daca:	78fb      	ldrb	r3, [r7, #3]
 800dacc:	b29b      	uxth	r3, r3
 800dace:	9300      	str	r3, [sp, #0]
 800dad0:	4613      	mov	r3, r2
 800dad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dad6:	2100      	movs	r1, #0
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 f864 	bl	800dba6 <USBH_GetDescriptor>
 800dade:	4603      	mov	r3, r0
 800dae0:	73fb      	strb	r3, [r7, #15]
 800dae2:	7bfb      	ldrb	r3, [r7, #15]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d10a      	bne.n	800dafe <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f203 3026 	addw	r0, r3, #806	; 0x326
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800daf4:	78fa      	ldrb	r2, [r7, #3]
 800daf6:	b292      	uxth	r2, r2
 800daf8:	4619      	mov	r1, r3
 800dafa:	f000 f918 	bl	800dd2e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800dafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800db00:	4618      	mov	r0, r3
 800db02:	3710      	adds	r7, #16
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b086      	sub	sp, #24
 800db0c:	af02      	add	r7, sp, #8
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	460b      	mov	r3, r1
 800db12:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	331c      	adds	r3, #28
 800db18:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800db1a:	887b      	ldrh	r3, [r7, #2]
 800db1c:	9300      	str	r3, [sp, #0]
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db24:	2100      	movs	r1, #0
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 f83d 	bl	800dba6 <USBH_GetDescriptor>
 800db2c:	4603      	mov	r3, r0
 800db2e:	72fb      	strb	r3, [r7, #11]
 800db30:	7afb      	ldrb	r3, [r7, #11]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d107      	bne.n	800db46 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800db3c:	887a      	ldrh	r2, [r7, #2]
 800db3e:	68f9      	ldr	r1, [r7, #12]
 800db40:	4618      	mov	r0, r3
 800db42:	f000 f964 	bl	800de0e <USBH_ParseCfgDesc>
  }

  return status;
 800db46:	7afb      	ldrb	r3, [r7, #11]
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b088      	sub	sp, #32
 800db54:	af02      	add	r7, sp, #8
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	607a      	str	r2, [r7, #4]
 800db5a:	461a      	mov	r2, r3
 800db5c:	460b      	mov	r3, r1
 800db5e:	72fb      	strb	r3, [r7, #11]
 800db60:	4613      	mov	r3, r2
 800db62:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800db64:	7afb      	ldrb	r3, [r7, #11]
 800db66:	b29b      	uxth	r3, r3
 800db68:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800db6c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800db74:	893b      	ldrh	r3, [r7, #8]
 800db76:	9300      	str	r3, [sp, #0]
 800db78:	460b      	mov	r3, r1
 800db7a:	2100      	movs	r1, #0
 800db7c:	68f8      	ldr	r0, [r7, #12]
 800db7e:	f000 f812 	bl	800dba6 <USBH_GetDescriptor>
 800db82:	4603      	mov	r3, r0
 800db84:	75fb      	strb	r3, [r7, #23]
 800db86:	7dfb      	ldrb	r3, [r7, #23]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d107      	bne.n	800db9c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800db92:	893a      	ldrh	r2, [r7, #8]
 800db94:	6879      	ldr	r1, [r7, #4]
 800db96:	4618      	mov	r0, r3
 800db98:	f000 fa37 	bl	800e00a <USBH_ParseStringDesc>
  }

  return status;
 800db9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3718      	adds	r7, #24
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}

0800dba6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800dba6:	b580      	push	{r7, lr}
 800dba8:	b084      	sub	sp, #16
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	60f8      	str	r0, [r7, #12]
 800dbae:	607b      	str	r3, [r7, #4]
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	72fb      	strb	r3, [r7, #11]
 800dbb4:	4613      	mov	r3, r2
 800dbb6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	789b      	ldrb	r3, [r3, #2]
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d11c      	bne.n	800dbfa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800dbc0:	7afb      	ldrb	r3, [r7, #11]
 800dbc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dbc6:	b2da      	uxtb	r2, r3
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2206      	movs	r2, #6
 800dbd0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	893a      	ldrh	r2, [r7, #8]
 800dbd6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800dbd8:	893b      	ldrh	r3, [r7, #8]
 800dbda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dbde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dbe2:	d104      	bne.n	800dbee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f240 4209 	movw	r2, #1033	; 0x409
 800dbea:	829a      	strh	r2, [r3, #20]
 800dbec:	e002      	b.n	800dbf4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	8b3a      	ldrh	r2, [r7, #24]
 800dbf8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800dbfa:	8b3b      	ldrh	r3, [r7, #24]
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	6879      	ldr	r1, [r7, #4]
 800dc00:	68f8      	ldr	r0, [r7, #12]
 800dc02:	f000 fa50 	bl	800e0a6 <USBH_CtlReq>
 800dc06:	4603      	mov	r3, r0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3710      	adds	r7, #16
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	460b      	mov	r3, r1
 800dc1a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	789b      	ldrb	r3, [r3, #2]
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d10f      	bne.n	800dc44 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2200      	movs	r2, #0
 800dc28:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2205      	movs	r2, #5
 800dc2e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800dc30:	78fb      	ldrb	r3, [r7, #3]
 800dc32:	b29a      	uxth	r2, r3
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dc44:	2200      	movs	r2, #0
 800dc46:	2100      	movs	r1, #0
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f000 fa2c 	bl	800e0a6 <USBH_CtlReq>
 800dc4e:	4603      	mov	r3, r0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3708      	adds	r7, #8
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	460b      	mov	r3, r1
 800dc62:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	789b      	ldrb	r3, [r3, #2]
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d10e      	bne.n	800dc8a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2209      	movs	r2, #9
 800dc76:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	887a      	ldrh	r2, [r7, #2]
 800dc7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2200      	movs	r2, #0
 800dc82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2200      	movs	r2, #0
 800dc88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	2100      	movs	r1, #0
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 fa09 	bl	800e0a6 <USBH_CtlReq>
 800dc94:	4603      	mov	r3, r0
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800dc9e:	b580      	push	{r7, lr}
 800dca0:	b082      	sub	sp, #8
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
 800dca6:	460b      	mov	r3, r1
 800dca8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	789b      	ldrb	r3, [r3, #2]
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d10f      	bne.n	800dcd2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2203      	movs	r2, #3
 800dcbc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800dcbe:	78fb      	ldrb	r3, [r7, #3]
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 f9e5 	bl	800e0a6 <USBH_CtlReq>
 800dcdc:	4603      	mov	r3, r0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3708      	adds	r7, #8
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b082      	sub	sp, #8
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
 800dcee:	460b      	mov	r3, r1
 800dcf0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	789b      	ldrb	r3, [r3, #2]
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d10f      	bne.n	800dd1a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2202      	movs	r2, #2
 800dcfe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2201      	movs	r2, #1
 800dd04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800dd0c:	78fb      	ldrb	r3, [r7, #3]
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2200      	movs	r2, #0
 800dd18:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 f9c1 	bl	800e0a6 <USBH_CtlReq>
 800dd24:	4603      	mov	r3, r0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3708      	adds	r7, #8
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800dd2e:	b480      	push	{r7}
 800dd30:	b085      	sub	sp, #20
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	60f8      	str	r0, [r7, #12]
 800dd36:	60b9      	str	r1, [r7, #8]
 800dd38:	4613      	mov	r3, r2
 800dd3a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	781a      	ldrb	r2, [r3, #0]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	785a      	ldrb	r2, [r3, #1]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	3302      	adds	r3, #2
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	3303      	adds	r3, #3
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	021b      	lsls	r3, r3, #8
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	4313      	orrs	r3, r2
 800dd62:	b29a      	uxth	r2, r3
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	791a      	ldrb	r2, [r3, #4]
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	795a      	ldrb	r2, [r3, #5]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	799a      	ldrb	r2, [r3, #6]
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	79da      	ldrb	r2, [r3, #7]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800dd88:	88fb      	ldrh	r3, [r7, #6]
 800dd8a:	2b08      	cmp	r3, #8
 800dd8c:	d939      	bls.n	800de02 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	3308      	adds	r3, #8
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	b29a      	uxth	r2, r3
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	3309      	adds	r3, #9
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	021b      	lsls	r3, r3, #8
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	4313      	orrs	r3, r2
 800dda4:	b29a      	uxth	r2, r3
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	330a      	adds	r3, #10
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	b29a      	uxth	r2, r3
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	330b      	adds	r3, #11
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	b29b      	uxth	r3, r3
 800ddba:	021b      	lsls	r3, r3, #8
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	4313      	orrs	r3, r2
 800ddc0:	b29a      	uxth	r2, r3
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	330c      	adds	r3, #12
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	b29a      	uxth	r2, r3
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	330d      	adds	r3, #13
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	021b      	lsls	r3, r3, #8
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	4313      	orrs	r3, r2
 800dddc:	b29a      	uxth	r2, r3
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	7b9a      	ldrb	r2, [r3, #14]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	7bda      	ldrb	r2, [r3, #15]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	7c1a      	ldrb	r2, [r3, #16]
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	7c5a      	ldrb	r2, [r3, #17]
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	745a      	strb	r2, [r3, #17]
  }
}
 800de02:	bf00      	nop
 800de04:	3714      	adds	r7, #20
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr

0800de0e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800de0e:	b580      	push	{r7, lr}
 800de10:	b08a      	sub	sp, #40	; 0x28
 800de12:	af00      	add	r7, sp, #0
 800de14:	60f8      	str	r0, [r7, #12]
 800de16:	60b9      	str	r1, [r7, #8]
 800de18:	4613      	mov	r3, r2
 800de1a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800de20:	2300      	movs	r3, #0
 800de22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800de26:	2300      	movs	r3, #0
 800de28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	781a      	ldrb	r2, [r3, #0]
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	785a      	ldrb	r2, [r3, #1]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	3302      	adds	r3, #2
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	b29a      	uxth	r2, r3
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	3303      	adds	r3, #3
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	b29b      	uxth	r3, r3
 800de50:	021b      	lsls	r3, r3, #8
 800de52:	b29b      	uxth	r3, r3
 800de54:	4313      	orrs	r3, r2
 800de56:	b29a      	uxth	r2, r3
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	791a      	ldrb	r2, [r3, #4]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	795a      	ldrb	r2, [r3, #5]
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	799a      	ldrb	r2, [r3, #6]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	79da      	ldrb	r2, [r3, #7]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	7a1a      	ldrb	r2, [r3, #8]
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800de84:	88fb      	ldrh	r3, [r7, #6]
 800de86:	2b09      	cmp	r3, #9
 800de88:	d95f      	bls.n	800df4a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800de8a:	2309      	movs	r3, #9
 800de8c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800de8e:	2300      	movs	r3, #0
 800de90:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800de92:	e051      	b.n	800df38 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800de94:	f107 0316 	add.w	r3, r7, #22
 800de98:	4619      	mov	r1, r3
 800de9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de9c:	f000 f8e8 	bl	800e070 <USBH_GetNextDesc>
 800dea0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800dea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea4:	785b      	ldrb	r3, [r3, #1]
 800dea6:	2b04      	cmp	r3, #4
 800dea8:	d146      	bne.n	800df38 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800deaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800deae:	221a      	movs	r2, #26
 800deb0:	fb02 f303 	mul.w	r3, r2, r3
 800deb4:	3308      	adds	r3, #8
 800deb6:	68fa      	ldr	r2, [r7, #12]
 800deb8:	4413      	add	r3, r2
 800deba:	3302      	adds	r3, #2
 800debc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800debe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dec0:	69f8      	ldr	r0, [r7, #28]
 800dec2:	f000 f846 	bl	800df52 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800dec6:	2300      	movs	r3, #0
 800dec8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800decc:	2300      	movs	r3, #0
 800dece:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ded0:	e022      	b.n	800df18 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ded2:	f107 0316 	add.w	r3, r7, #22
 800ded6:	4619      	mov	r1, r3
 800ded8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800deda:	f000 f8c9 	bl	800e070 <USBH_GetNextDesc>
 800dede:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800dee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee2:	785b      	ldrb	r3, [r3, #1]
 800dee4:	2b05      	cmp	r3, #5
 800dee6:	d117      	bne.n	800df18 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800dee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800deec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800def0:	3201      	adds	r2, #1
 800def2:	00d2      	lsls	r2, r2, #3
 800def4:	211a      	movs	r1, #26
 800def6:	fb01 f303 	mul.w	r3, r1, r3
 800defa:	4413      	add	r3, r2
 800defc:	3308      	adds	r3, #8
 800defe:	68fa      	ldr	r2, [r7, #12]
 800df00:	4413      	add	r3, r2
 800df02:	3304      	adds	r3, #4
 800df04:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800df06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df08:	69b8      	ldr	r0, [r7, #24]
 800df0a:	f000 f851 	bl	800dfb0 <USBH_ParseEPDesc>
            ep_ix++;
 800df0e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800df12:	3301      	adds	r3, #1
 800df14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	791b      	ldrb	r3, [r3, #4]
 800df1c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800df20:	429a      	cmp	r2, r3
 800df22:	d204      	bcs.n	800df2e <USBH_ParseCfgDesc+0x120>
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	885a      	ldrh	r2, [r3, #2]
 800df28:	8afb      	ldrh	r3, [r7, #22]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d8d1      	bhi.n	800ded2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800df2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df32:	3301      	adds	r3, #1
 800df34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800df38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d804      	bhi.n	800df4a <USBH_ParseCfgDesc+0x13c>
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	885a      	ldrh	r2, [r3, #2]
 800df44:	8afb      	ldrh	r3, [r7, #22]
 800df46:	429a      	cmp	r2, r3
 800df48:	d8a4      	bhi.n	800de94 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800df4a:	bf00      	nop
 800df4c:	3728      	adds	r7, #40	; 0x28
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}

0800df52 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800df52:	b480      	push	{r7}
 800df54:	b083      	sub	sp, #12
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
 800df5a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	781a      	ldrb	r2, [r3, #0]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	785a      	ldrb	r2, [r3, #1]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	789a      	ldrb	r2, [r3, #2]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	78da      	ldrb	r2, [r3, #3]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	791a      	ldrb	r2, [r3, #4]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	795a      	ldrb	r2, [r3, #5]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	799a      	ldrb	r2, [r3, #6]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	79da      	ldrb	r2, [r3, #7]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	7a1a      	ldrb	r2, [r3, #8]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	721a      	strb	r2, [r3, #8]
}
 800dfa4:	bf00      	nop
 800dfa6:	370c      	adds	r7, #12
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr

0800dfb0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b083      	sub	sp, #12
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	781a      	ldrb	r2, [r3, #0]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	785a      	ldrb	r2, [r3, #1]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	789a      	ldrb	r2, [r3, #2]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	78da      	ldrb	r2, [r3, #3]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	3304      	adds	r3, #4
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	b29a      	uxth	r2, r3
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	3305      	adds	r3, #5
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	021b      	lsls	r3, r3, #8
 800dfec:	b29b      	uxth	r3, r3
 800dfee:	4313      	orrs	r3, r2
 800dff0:	b29a      	uxth	r2, r3
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	799a      	ldrb	r2, [r3, #6]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	719a      	strb	r2, [r3, #6]
}
 800dffe:	bf00      	nop
 800e000:	370c      	adds	r7, #12
 800e002:	46bd      	mov	sp, r7
 800e004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e008:	4770      	bx	lr

0800e00a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e00a:	b480      	push	{r7}
 800e00c:	b087      	sub	sp, #28
 800e00e:	af00      	add	r7, sp, #0
 800e010:	60f8      	str	r0, [r7, #12]
 800e012:	60b9      	str	r1, [r7, #8]
 800e014:	4613      	mov	r3, r2
 800e016:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	3301      	adds	r3, #1
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	2b03      	cmp	r3, #3
 800e020:	d120      	bne.n	800e064 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	1e9a      	subs	r2, r3, #2
 800e028:	88fb      	ldrh	r3, [r7, #6]
 800e02a:	4293      	cmp	r3, r2
 800e02c:	bf28      	it	cs
 800e02e:	4613      	movcs	r3, r2
 800e030:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	3302      	adds	r3, #2
 800e036:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e038:	2300      	movs	r3, #0
 800e03a:	82fb      	strh	r3, [r7, #22]
 800e03c:	e00b      	b.n	800e056 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e03e:	8afb      	ldrh	r3, [r7, #22]
 800e040:	68fa      	ldr	r2, [r7, #12]
 800e042:	4413      	add	r3, r2
 800e044:	781a      	ldrb	r2, [r3, #0]
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	3301      	adds	r3, #1
 800e04e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e050:	8afb      	ldrh	r3, [r7, #22]
 800e052:	3302      	adds	r3, #2
 800e054:	82fb      	strh	r3, [r7, #22]
 800e056:	8afa      	ldrh	r2, [r7, #22]
 800e058:	8abb      	ldrh	r3, [r7, #20]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d3ef      	bcc.n	800e03e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	2200      	movs	r2, #0
 800e062:	701a      	strb	r2, [r3, #0]
  }
}
 800e064:	bf00      	nop
 800e066:	371c      	adds	r7, #28
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	4770      	bx	lr

0800e070 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e070:	b480      	push	{r7}
 800e072:	b085      	sub	sp, #20
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	881a      	ldrh	r2, [r3, #0]
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	b29b      	uxth	r3, r3
 800e084:	4413      	add	r3, r2
 800e086:	b29a      	uxth	r2, r3
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	4413      	add	r3, r2
 800e096:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e098:	68fb      	ldr	r3, [r7, #12]
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3714      	adds	r7, #20
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a4:	4770      	bx	lr

0800e0a6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e0a6:	b580      	push	{r7, lr}
 800e0a8:	b086      	sub	sp, #24
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	60f8      	str	r0, [r7, #12]
 800e0ae:	60b9      	str	r1, [r7, #8]
 800e0b0:	4613      	mov	r3, r2
 800e0b2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	789b      	ldrb	r3, [r3, #2]
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d002      	beq.n	800e0c6 <USBH_CtlReq+0x20>
 800e0c0:	2b02      	cmp	r3, #2
 800e0c2:	d00f      	beq.n	800e0e4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e0c4:	e027      	b.n	800e116 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	68ba      	ldr	r2, [r7, #8]
 800e0ca:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	88fa      	ldrh	r2, [r7, #6]
 800e0d0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2202      	movs	r2, #2
 800e0dc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e0de:	2301      	movs	r3, #1
 800e0e0:	75fb      	strb	r3, [r7, #23]
      break;
 800e0e2:	e018      	b.n	800e116 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f000 f81b 	bl	800e120 <USBH_HandleControl>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e0ee:	7dfb      	ldrb	r3, [r7, #23]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d002      	beq.n	800e0fa <USBH_CtlReq+0x54>
 800e0f4:	7dfb      	ldrb	r3, [r7, #23]
 800e0f6:	2b03      	cmp	r3, #3
 800e0f8:	d106      	bne.n	800e108 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2200      	movs	r2, #0
 800e104:	761a      	strb	r2, [r3, #24]
      break;
 800e106:	e005      	b.n	800e114 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e108:	7dfb      	ldrb	r3, [r7, #23]
 800e10a:	2b02      	cmp	r3, #2
 800e10c:	d102      	bne.n	800e114 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2201      	movs	r2, #1
 800e112:	709a      	strb	r2, [r3, #2]
      break;
 800e114:	bf00      	nop
  }
  return status;
 800e116:	7dfb      	ldrb	r3, [r7, #23]
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3718      	adds	r7, #24
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b086      	sub	sp, #24
 800e124:	af02      	add	r7, sp, #8
 800e126:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e128:	2301      	movs	r3, #1
 800e12a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e12c:	2300      	movs	r3, #0
 800e12e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	7e1b      	ldrb	r3, [r3, #24]
 800e134:	3b01      	subs	r3, #1
 800e136:	2b0a      	cmp	r3, #10
 800e138:	f200 8156 	bhi.w	800e3e8 <USBH_HandleControl+0x2c8>
 800e13c:	a201      	add	r2, pc, #4	; (adr r2, 800e144 <USBH_HandleControl+0x24>)
 800e13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e142:	bf00      	nop
 800e144:	0800e171 	.word	0x0800e171
 800e148:	0800e18b 	.word	0x0800e18b
 800e14c:	0800e1f5 	.word	0x0800e1f5
 800e150:	0800e21b 	.word	0x0800e21b
 800e154:	0800e253 	.word	0x0800e253
 800e158:	0800e27d 	.word	0x0800e27d
 800e15c:	0800e2cf 	.word	0x0800e2cf
 800e160:	0800e2f1 	.word	0x0800e2f1
 800e164:	0800e32d 	.word	0x0800e32d
 800e168:	0800e353 	.word	0x0800e353
 800e16c:	0800e391 	.word	0x0800e391
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f103 0110 	add.w	r1, r3, #16
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	795b      	ldrb	r3, [r3, #5]
 800e17a:	461a      	mov	r2, r3
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f000 f943 	bl	800e408 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2202      	movs	r2, #2
 800e186:	761a      	strb	r2, [r3, #24]
      break;
 800e188:	e139      	b.n	800e3fe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	795b      	ldrb	r3, [r3, #5]
 800e18e:	4619      	mov	r1, r3
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 fcc5 	bl	800eb20 <USBH_LL_GetURBState>
 800e196:	4603      	mov	r3, r0
 800e198:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e19a:	7bbb      	ldrb	r3, [r7, #14]
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d11e      	bne.n	800e1de <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	7c1b      	ldrb	r3, [r3, #16]
 800e1a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e1a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	8adb      	ldrh	r3, [r3, #22]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d00a      	beq.n	800e1c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e1b2:	7b7b      	ldrb	r3, [r7, #13]
 800e1b4:	2b80      	cmp	r3, #128	; 0x80
 800e1b6:	d103      	bne.n	800e1c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2203      	movs	r2, #3
 800e1bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e1be:	e115      	b.n	800e3ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2205      	movs	r2, #5
 800e1c4:	761a      	strb	r2, [r3, #24]
      break;
 800e1c6:	e111      	b.n	800e3ec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800e1c8:	7b7b      	ldrb	r3, [r7, #13]
 800e1ca:	2b80      	cmp	r3, #128	; 0x80
 800e1cc:	d103      	bne.n	800e1d6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2209      	movs	r2, #9
 800e1d2:	761a      	strb	r2, [r3, #24]
      break;
 800e1d4:	e10a      	b.n	800e3ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2207      	movs	r2, #7
 800e1da:	761a      	strb	r2, [r3, #24]
      break;
 800e1dc:	e106      	b.n	800e3ec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e1de:	7bbb      	ldrb	r3, [r7, #14]
 800e1e0:	2b04      	cmp	r3, #4
 800e1e2:	d003      	beq.n	800e1ec <USBH_HandleControl+0xcc>
 800e1e4:	7bbb      	ldrb	r3, [r7, #14]
 800e1e6:	2b02      	cmp	r3, #2
 800e1e8:	f040 8100 	bne.w	800e3ec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	220b      	movs	r2, #11
 800e1f0:	761a      	strb	r2, [r3, #24]
      break;
 800e1f2:	e0fb      	b.n	800e3ec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e1fa:	b29a      	uxth	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6899      	ldr	r1, [r3, #8]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	899a      	ldrh	r2, [r3, #12]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	791b      	ldrb	r3, [r3, #4]
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f000 f93a 	bl	800e486 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2204      	movs	r2, #4
 800e216:	761a      	strb	r2, [r3, #24]
      break;
 800e218:	e0f1      	b.n	800e3fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	791b      	ldrb	r3, [r3, #4]
 800e21e:	4619      	mov	r1, r3
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f000 fc7d 	bl	800eb20 <USBH_LL_GetURBState>
 800e226:	4603      	mov	r3, r0
 800e228:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e22a:	7bbb      	ldrb	r3, [r7, #14]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d102      	bne.n	800e236 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2209      	movs	r2, #9
 800e234:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e236:	7bbb      	ldrb	r3, [r7, #14]
 800e238:	2b05      	cmp	r3, #5
 800e23a:	d102      	bne.n	800e242 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e23c:	2303      	movs	r3, #3
 800e23e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e240:	e0d6      	b.n	800e3f0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800e242:	7bbb      	ldrb	r3, [r7, #14]
 800e244:	2b04      	cmp	r3, #4
 800e246:	f040 80d3 	bne.w	800e3f0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	220b      	movs	r2, #11
 800e24e:	761a      	strb	r2, [r3, #24]
      break;
 800e250:	e0ce      	b.n	800e3f0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6899      	ldr	r1, [r3, #8]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	899a      	ldrh	r2, [r3, #12]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	795b      	ldrb	r3, [r3, #5]
 800e25e:	2001      	movs	r0, #1
 800e260:	9000      	str	r0, [sp, #0]
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f000 f8ea 	bl	800e43c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e26e:	b29a      	uxth	r2, r3
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2206      	movs	r2, #6
 800e278:	761a      	strb	r2, [r3, #24]
      break;
 800e27a:	e0c0      	b.n	800e3fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	795b      	ldrb	r3, [r3, #5]
 800e280:	4619      	mov	r1, r3
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f000 fc4c 	bl	800eb20 <USBH_LL_GetURBState>
 800e288:	4603      	mov	r3, r0
 800e28a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e28c:	7bbb      	ldrb	r3, [r7, #14]
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d103      	bne.n	800e29a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2207      	movs	r2, #7
 800e296:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e298:	e0ac      	b.n	800e3f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e29a:	7bbb      	ldrb	r3, [r7, #14]
 800e29c:	2b05      	cmp	r3, #5
 800e29e:	d105      	bne.n	800e2ac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	220c      	movs	r2, #12
 800e2a4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e2a6:	2303      	movs	r3, #3
 800e2a8:	73fb      	strb	r3, [r7, #15]
      break;
 800e2aa:	e0a3      	b.n	800e3f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e2ac:	7bbb      	ldrb	r3, [r7, #14]
 800e2ae:	2b02      	cmp	r3, #2
 800e2b0:	d103      	bne.n	800e2ba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2205      	movs	r2, #5
 800e2b6:	761a      	strb	r2, [r3, #24]
      break;
 800e2b8:	e09c      	b.n	800e3f4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e2ba:	7bbb      	ldrb	r3, [r7, #14]
 800e2bc:	2b04      	cmp	r3, #4
 800e2be:	f040 8099 	bne.w	800e3f4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	220b      	movs	r2, #11
 800e2c6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e2c8:	2302      	movs	r3, #2
 800e2ca:	73fb      	strb	r3, [r7, #15]
      break;
 800e2cc:	e092      	b.n	800e3f4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	791b      	ldrb	r3, [r3, #4]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	2100      	movs	r1, #0
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 f8d5 	bl	800e486 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e2e2:	b29a      	uxth	r2, r3
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2208      	movs	r2, #8
 800e2ec:	761a      	strb	r2, [r3, #24]

      break;
 800e2ee:	e086      	b.n	800e3fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	791b      	ldrb	r3, [r3, #4]
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f000 fc12 	bl	800eb20 <USBH_LL_GetURBState>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e300:	7bbb      	ldrb	r3, [r7, #14]
 800e302:	2b01      	cmp	r3, #1
 800e304:	d105      	bne.n	800e312 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	220d      	movs	r2, #13
 800e30a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e30c:	2300      	movs	r3, #0
 800e30e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e310:	e072      	b.n	800e3f8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e312:	7bbb      	ldrb	r3, [r7, #14]
 800e314:	2b04      	cmp	r3, #4
 800e316:	d103      	bne.n	800e320 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	220b      	movs	r2, #11
 800e31c:	761a      	strb	r2, [r3, #24]
      break;
 800e31e:	e06b      	b.n	800e3f8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e320:	7bbb      	ldrb	r3, [r7, #14]
 800e322:	2b05      	cmp	r3, #5
 800e324:	d168      	bne.n	800e3f8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e326:	2303      	movs	r3, #3
 800e328:	73fb      	strb	r3, [r7, #15]
      break;
 800e32a:	e065      	b.n	800e3f8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	795b      	ldrb	r3, [r3, #5]
 800e330:	2201      	movs	r2, #1
 800e332:	9200      	str	r2, [sp, #0]
 800e334:	2200      	movs	r2, #0
 800e336:	2100      	movs	r1, #0
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f000 f87f 	bl	800e43c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e344:	b29a      	uxth	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	220a      	movs	r2, #10
 800e34e:	761a      	strb	r2, [r3, #24]
      break;
 800e350:	e055      	b.n	800e3fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	795b      	ldrb	r3, [r3, #5]
 800e356:	4619      	mov	r1, r3
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f000 fbe1 	bl	800eb20 <USBH_LL_GetURBState>
 800e35e:	4603      	mov	r3, r0
 800e360:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e362:	7bbb      	ldrb	r3, [r7, #14]
 800e364:	2b01      	cmp	r3, #1
 800e366:	d105      	bne.n	800e374 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e368:	2300      	movs	r3, #0
 800e36a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	220d      	movs	r2, #13
 800e370:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e372:	e043      	b.n	800e3fc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e374:	7bbb      	ldrb	r3, [r7, #14]
 800e376:	2b02      	cmp	r3, #2
 800e378:	d103      	bne.n	800e382 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2209      	movs	r2, #9
 800e37e:	761a      	strb	r2, [r3, #24]
      break;
 800e380:	e03c      	b.n	800e3fc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e382:	7bbb      	ldrb	r3, [r7, #14]
 800e384:	2b04      	cmp	r3, #4
 800e386:	d139      	bne.n	800e3fc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	220b      	movs	r2, #11
 800e38c:	761a      	strb	r2, [r3, #24]
      break;
 800e38e:	e035      	b.n	800e3fc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	7e5b      	ldrb	r3, [r3, #25]
 800e394:	3301      	adds	r3, #1
 800e396:	b2da      	uxtb	r2, r3
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	765a      	strb	r2, [r3, #25]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	7e5b      	ldrb	r3, [r3, #25]
 800e3a0:	2b02      	cmp	r3, #2
 800e3a2:	d806      	bhi.n	800e3b2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e3b0:	e025      	b.n	800e3fe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e3b8:	2106      	movs	r1, #6
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	795b      	ldrb	r3, [r3, #5]
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 f90c 	bl	800e5e8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	791b      	ldrb	r3, [r3, #4]
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 f906 	bl	800e5e8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e3e2:	2302      	movs	r3, #2
 800e3e4:	73fb      	strb	r3, [r7, #15]
      break;
 800e3e6:	e00a      	b.n	800e3fe <USBH_HandleControl+0x2de>

    default:
      break;
 800e3e8:	bf00      	nop
 800e3ea:	e008      	b.n	800e3fe <USBH_HandleControl+0x2de>
      break;
 800e3ec:	bf00      	nop
 800e3ee:	e006      	b.n	800e3fe <USBH_HandleControl+0x2de>
      break;
 800e3f0:	bf00      	nop
 800e3f2:	e004      	b.n	800e3fe <USBH_HandleControl+0x2de>
      break;
 800e3f4:	bf00      	nop
 800e3f6:	e002      	b.n	800e3fe <USBH_HandleControl+0x2de>
      break;
 800e3f8:	bf00      	nop
 800e3fa:	e000      	b.n	800e3fe <USBH_HandleControl+0x2de>
      break;
 800e3fc:	bf00      	nop
  }

  return status;
 800e3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e400:	4618      	mov	r0, r3
 800e402:	3710      	adds	r7, #16
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b088      	sub	sp, #32
 800e40c:	af04      	add	r7, sp, #16
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	60b9      	str	r1, [r7, #8]
 800e412:	4613      	mov	r3, r2
 800e414:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e416:	79f9      	ldrb	r1, [r7, #7]
 800e418:	2300      	movs	r3, #0
 800e41a:	9303      	str	r3, [sp, #12]
 800e41c:	2308      	movs	r3, #8
 800e41e:	9302      	str	r3, [sp, #8]
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	9301      	str	r3, [sp, #4]
 800e424:	2300      	movs	r3, #0
 800e426:	9300      	str	r3, [sp, #0]
 800e428:	2300      	movs	r3, #0
 800e42a:	2200      	movs	r2, #0
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f000 fb46 	bl	800eabe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800e432:	2300      	movs	r3, #0
}
 800e434:	4618      	mov	r0, r3
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b088      	sub	sp, #32
 800e440:	af04      	add	r7, sp, #16
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	4611      	mov	r1, r2
 800e448:	461a      	mov	r2, r3
 800e44a:	460b      	mov	r3, r1
 800e44c:	80fb      	strh	r3, [r7, #6]
 800e44e:	4613      	mov	r3, r2
 800e450:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d001      	beq.n	800e460 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e45c:	2300      	movs	r3, #0
 800e45e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e460:	7979      	ldrb	r1, [r7, #5]
 800e462:	7e3b      	ldrb	r3, [r7, #24]
 800e464:	9303      	str	r3, [sp, #12]
 800e466:	88fb      	ldrh	r3, [r7, #6]
 800e468:	9302      	str	r3, [sp, #8]
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	9301      	str	r3, [sp, #4]
 800e46e:	2301      	movs	r3, #1
 800e470:	9300      	str	r3, [sp, #0]
 800e472:	2300      	movs	r3, #0
 800e474:	2200      	movs	r2, #0
 800e476:	68f8      	ldr	r0, [r7, #12]
 800e478:	f000 fb21 	bl	800eabe <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e47c:	2300      	movs	r3, #0
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3710      	adds	r7, #16
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}

0800e486 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e486:	b580      	push	{r7, lr}
 800e488:	b088      	sub	sp, #32
 800e48a:	af04      	add	r7, sp, #16
 800e48c:	60f8      	str	r0, [r7, #12]
 800e48e:	60b9      	str	r1, [r7, #8]
 800e490:	4611      	mov	r1, r2
 800e492:	461a      	mov	r2, r3
 800e494:	460b      	mov	r3, r1
 800e496:	80fb      	strh	r3, [r7, #6]
 800e498:	4613      	mov	r3, r2
 800e49a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e49c:	7979      	ldrb	r1, [r7, #5]
 800e49e:	2300      	movs	r3, #0
 800e4a0:	9303      	str	r3, [sp, #12]
 800e4a2:	88fb      	ldrh	r3, [r7, #6]
 800e4a4:	9302      	str	r3, [sp, #8]
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	9301      	str	r3, [sp, #4]
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	9300      	str	r3, [sp, #0]
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	2201      	movs	r2, #1
 800e4b2:	68f8      	ldr	r0, [r7, #12]
 800e4b4:	f000 fb03 	bl	800eabe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e4b8:	2300      	movs	r3, #0

}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3710      	adds	r7, #16
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e4c2:	b580      	push	{r7, lr}
 800e4c4:	b088      	sub	sp, #32
 800e4c6:	af04      	add	r7, sp, #16
 800e4c8:	60f8      	str	r0, [r7, #12]
 800e4ca:	60b9      	str	r1, [r7, #8]
 800e4cc:	4611      	mov	r1, r2
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	80fb      	strh	r3, [r7, #6]
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d001      	beq.n	800e4e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e4e6:	7979      	ldrb	r1, [r7, #5]
 800e4e8:	7e3b      	ldrb	r3, [r7, #24]
 800e4ea:	9303      	str	r3, [sp, #12]
 800e4ec:	88fb      	ldrh	r3, [r7, #6]
 800e4ee:	9302      	str	r3, [sp, #8]
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	9301      	str	r3, [sp, #4]
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	9300      	str	r3, [sp, #0]
 800e4f8:	2302      	movs	r3, #2
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	68f8      	ldr	r0, [r7, #12]
 800e4fe:	f000 fade 	bl	800eabe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e502:	2300      	movs	r3, #0
}
 800e504:	4618      	mov	r0, r3
 800e506:	3710      	adds	r7, #16
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b088      	sub	sp, #32
 800e510:	af04      	add	r7, sp, #16
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	4611      	mov	r1, r2
 800e518:	461a      	mov	r2, r3
 800e51a:	460b      	mov	r3, r1
 800e51c:	80fb      	strh	r3, [r7, #6]
 800e51e:	4613      	mov	r3, r2
 800e520:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e522:	7979      	ldrb	r1, [r7, #5]
 800e524:	2300      	movs	r3, #0
 800e526:	9303      	str	r3, [sp, #12]
 800e528:	88fb      	ldrh	r3, [r7, #6]
 800e52a:	9302      	str	r3, [sp, #8]
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	9301      	str	r3, [sp, #4]
 800e530:	2301      	movs	r3, #1
 800e532:	9300      	str	r3, [sp, #0]
 800e534:	2302      	movs	r3, #2
 800e536:	2201      	movs	r2, #1
 800e538:	68f8      	ldr	r0, [r7, #12]
 800e53a:	f000 fac0 	bl	800eabe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e53e:	2300      	movs	r3, #0
}
 800e540:	4618      	mov	r0, r3
 800e542:	3710      	adds	r7, #16
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b086      	sub	sp, #24
 800e54c:	af04      	add	r7, sp, #16
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	4608      	mov	r0, r1
 800e552:	4611      	mov	r1, r2
 800e554:	461a      	mov	r2, r3
 800e556:	4603      	mov	r3, r0
 800e558:	70fb      	strb	r3, [r7, #3]
 800e55a:	460b      	mov	r3, r1
 800e55c:	70bb      	strb	r3, [r7, #2]
 800e55e:	4613      	mov	r3, r2
 800e560:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e562:	7878      	ldrb	r0, [r7, #1]
 800e564:	78ba      	ldrb	r2, [r7, #2]
 800e566:	78f9      	ldrb	r1, [r7, #3]
 800e568:	8b3b      	ldrh	r3, [r7, #24]
 800e56a:	9302      	str	r3, [sp, #8]
 800e56c:	7d3b      	ldrb	r3, [r7, #20]
 800e56e:	9301      	str	r3, [sp, #4]
 800e570:	7c3b      	ldrb	r3, [r7, #16]
 800e572:	9300      	str	r3, [sp, #0]
 800e574:	4603      	mov	r3, r0
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f000 fa53 	bl	800ea22 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e57c:	2300      	movs	r3, #0
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3708      	adds	r7, #8
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}

0800e586 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e586:	b580      	push	{r7, lr}
 800e588:	b082      	sub	sp, #8
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	6078      	str	r0, [r7, #4]
 800e58e:	460b      	mov	r3, r1
 800e590:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800e592:	78fb      	ldrb	r3, [r7, #3]
 800e594:	4619      	mov	r1, r3
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f000 fa72 	bl	800ea80 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e59c:	2300      	movs	r3, #0
}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	3708      	adds	r7, #8
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}

0800e5a6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e5a6:	b580      	push	{r7, lr}
 800e5a8:	b084      	sub	sp, #16
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	6078      	str	r0, [r7, #4]
 800e5ae:	460b      	mov	r3, r1
 800e5b0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 f836 	bl	800e624 <USBH_GetFreePipe>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e5bc:	89fb      	ldrh	r3, [r7, #14]
 800e5be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d00a      	beq.n	800e5dc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800e5c6:	78fa      	ldrb	r2, [r7, #3]
 800e5c8:	89fb      	ldrh	r3, [r7, #14]
 800e5ca:	f003 030f 	and.w	r3, r3, #15
 800e5ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e5d2:	6879      	ldr	r1, [r7, #4]
 800e5d4:	33e0      	adds	r3, #224	; 0xe0
 800e5d6:	009b      	lsls	r3, r3, #2
 800e5d8:	440b      	add	r3, r1
 800e5da:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e5dc:	89fb      	ldrh	r3, [r7, #14]
 800e5de:	b2db      	uxtb	r3, r3
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3710      	adds	r7, #16
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e5f4:	78fb      	ldrb	r3, [r7, #3]
 800e5f6:	2b0a      	cmp	r3, #10
 800e5f8:	d80d      	bhi.n	800e616 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e5fa:	78fb      	ldrb	r3, [r7, #3]
 800e5fc:	687a      	ldr	r2, [r7, #4]
 800e5fe:	33e0      	adds	r3, #224	; 0xe0
 800e600:	009b      	lsls	r3, r3, #2
 800e602:	4413      	add	r3, r2
 800e604:	685a      	ldr	r2, [r3, #4]
 800e606:	78fb      	ldrb	r3, [r7, #3]
 800e608:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e60c:	6879      	ldr	r1, [r7, #4]
 800e60e:	33e0      	adds	r3, #224	; 0xe0
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	440b      	add	r3, r1
 800e614:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e616:	2300      	movs	r3, #0
}
 800e618:	4618      	mov	r0, r3
 800e61a:	370c      	adds	r7, #12
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr

0800e624 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e624:	b480      	push	{r7}
 800e626:	b085      	sub	sp, #20
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e62c:	2300      	movs	r3, #0
 800e62e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e630:	2300      	movs	r3, #0
 800e632:	73fb      	strb	r3, [r7, #15]
 800e634:	e00f      	b.n	800e656 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e636:	7bfb      	ldrb	r3, [r7, #15]
 800e638:	687a      	ldr	r2, [r7, #4]
 800e63a:	33e0      	adds	r3, #224	; 0xe0
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	4413      	add	r3, r2
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e646:	2b00      	cmp	r3, #0
 800e648:	d102      	bne.n	800e650 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e64a:	7bfb      	ldrb	r3, [r7, #15]
 800e64c:	b29b      	uxth	r3, r3
 800e64e:	e007      	b.n	800e660 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800e650:	7bfb      	ldrb	r3, [r7, #15]
 800e652:	3301      	adds	r3, #1
 800e654:	73fb      	strb	r3, [r7, #15]
 800e656:	7bfb      	ldrb	r3, [r7, #15]
 800e658:	2b0a      	cmp	r3, #10
 800e65a:	d9ec      	bls.n	800e636 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e65c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e660:	4618      	mov	r0, r3
 800e662:	3714      	adds	r7, #20
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e670:	2201      	movs	r2, #1
 800e672:	490e      	ldr	r1, [pc, #56]	; (800e6ac <MX_USB_HOST_Init+0x40>)
 800e674:	480e      	ldr	r0, [pc, #56]	; (800e6b0 <MX_USB_HOST_Init+0x44>)
 800e676:	f7fe fca1 	bl	800cfbc <USBH_Init>
 800e67a:	4603      	mov	r3, r0
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d001      	beq.n	800e684 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e680:	f7f3 fa58 	bl	8001b34 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800e684:	490b      	ldr	r1, [pc, #44]	; (800e6b4 <MX_USB_HOST_Init+0x48>)
 800e686:	480a      	ldr	r0, [pc, #40]	; (800e6b0 <MX_USB_HOST_Init+0x44>)
 800e688:	f7fe fd26 	bl	800d0d8 <USBH_RegisterClass>
 800e68c:	4603      	mov	r3, r0
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d001      	beq.n	800e696 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e692:	f7f3 fa4f 	bl	8001b34 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e696:	4806      	ldr	r0, [pc, #24]	; (800e6b0 <MX_USB_HOST_Init+0x44>)
 800e698:	f7fe fdaa 	bl	800d1f0 <USBH_Start>
 800e69c:	4603      	mov	r3, r0
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d001      	beq.n	800e6a6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e6a2:	f7f3 fa47 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e6a6:	bf00      	nop
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	0800e6cd 	.word	0x0800e6cd
 800e6b0:	20000554 	.word	0x20000554
 800e6b4:	20000154 	.word	0x20000154

0800e6b8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e6bc:	4802      	ldr	r0, [pc, #8]	; (800e6c8 <MX_USB_HOST_Process+0x10>)
 800e6be:	f7fe fda7 	bl	800d210 <USBH_Process>
}
 800e6c2:	bf00      	nop
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	20000554 	.word	0x20000554

0800e6cc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b083      	sub	sp, #12
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e6d8:	78fb      	ldrb	r3, [r7, #3]
 800e6da:	3b01      	subs	r3, #1
 800e6dc:	2b04      	cmp	r3, #4
 800e6de:	d819      	bhi.n	800e714 <USBH_UserProcess+0x48>
 800e6e0:	a201      	add	r2, pc, #4	; (adr r2, 800e6e8 <USBH_UserProcess+0x1c>)
 800e6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e6:	bf00      	nop
 800e6e8:	0800e715 	.word	0x0800e715
 800e6ec:	0800e705 	.word	0x0800e705
 800e6f0:	0800e715 	.word	0x0800e715
 800e6f4:	0800e70d 	.word	0x0800e70d
 800e6f8:	0800e6fd 	.word	0x0800e6fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e6fc:	4b09      	ldr	r3, [pc, #36]	; (800e724 <USBH_UserProcess+0x58>)
 800e6fe:	2203      	movs	r2, #3
 800e700:	701a      	strb	r2, [r3, #0]
  break;
 800e702:	e008      	b.n	800e716 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e704:	4b07      	ldr	r3, [pc, #28]	; (800e724 <USBH_UserProcess+0x58>)
 800e706:	2202      	movs	r2, #2
 800e708:	701a      	strb	r2, [r3, #0]
  break;
 800e70a:	e004      	b.n	800e716 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e70c:	4b05      	ldr	r3, [pc, #20]	; (800e724 <USBH_UserProcess+0x58>)
 800e70e:	2201      	movs	r2, #1
 800e710:	701a      	strb	r2, [r3, #0]
  break;
 800e712:	e000      	b.n	800e716 <USBH_UserProcess+0x4a>

  default:
  break;
 800e714:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e716:	bf00      	nop
 800e718:	370c      	adds	r7, #12
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr
 800e722:	bf00      	nop
 800e724:	20000201 	.word	0x20000201

0800e728 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b08a      	sub	sp, #40	; 0x28
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e730:	f107 0314 	add.w	r3, r7, #20
 800e734:	2200      	movs	r2, #0
 800e736:	601a      	str	r2, [r3, #0]
 800e738:	605a      	str	r2, [r3, #4]
 800e73a:	609a      	str	r2, [r3, #8]
 800e73c:	60da      	str	r2, [r3, #12]
 800e73e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e748:	d147      	bne.n	800e7da <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e74a:	2300      	movs	r3, #0
 800e74c:	613b      	str	r3, [r7, #16]
 800e74e:	4b25      	ldr	r3, [pc, #148]	; (800e7e4 <HAL_HCD_MspInit+0xbc>)
 800e750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e752:	4a24      	ldr	r2, [pc, #144]	; (800e7e4 <HAL_HCD_MspInit+0xbc>)
 800e754:	f043 0301 	orr.w	r3, r3, #1
 800e758:	6313      	str	r3, [r2, #48]	; 0x30
 800e75a:	4b22      	ldr	r3, [pc, #136]	; (800e7e4 <HAL_HCD_MspInit+0xbc>)
 800e75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e75e:	f003 0301 	and.w	r3, r3, #1
 800e762:	613b      	str	r3, [r7, #16]
 800e764:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800e766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e76a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e76c:	2300      	movs	r3, #0
 800e76e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e770:	2300      	movs	r3, #0
 800e772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800e774:	f107 0314 	add.w	r3, r7, #20
 800e778:	4619      	mov	r1, r3
 800e77a:	481b      	ldr	r0, [pc, #108]	; (800e7e8 <HAL_HCD_MspInit+0xc0>)
 800e77c:	f7f6 ff0e 	bl	800559c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800e780:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e786:	2302      	movs	r3, #2
 800e788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e78a:	2300      	movs	r3, #0
 800e78c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e78e:	2300      	movs	r3, #0
 800e790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e792:	230a      	movs	r3, #10
 800e794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e796:	f107 0314 	add.w	r3, r7, #20
 800e79a:	4619      	mov	r1, r3
 800e79c:	4812      	ldr	r0, [pc, #72]	; (800e7e8 <HAL_HCD_MspInit+0xc0>)
 800e79e:	f7f6 fefd 	bl	800559c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e7a2:	4b10      	ldr	r3, [pc, #64]	; (800e7e4 <HAL_HCD_MspInit+0xbc>)
 800e7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7a6:	4a0f      	ldr	r2, [pc, #60]	; (800e7e4 <HAL_HCD_MspInit+0xbc>)
 800e7a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7ac:	6353      	str	r3, [r2, #52]	; 0x34
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	60fb      	str	r3, [r7, #12]
 800e7b2:	4b0c      	ldr	r3, [pc, #48]	; (800e7e4 <HAL_HCD_MspInit+0xbc>)
 800e7b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7b6:	4a0b      	ldr	r2, [pc, #44]	; (800e7e4 <HAL_HCD_MspInit+0xbc>)
 800e7b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e7bc:	6453      	str	r3, [r2, #68]	; 0x44
 800e7be:	4b09      	ldr	r3, [pc, #36]	; (800e7e4 <HAL_HCD_MspInit+0xbc>)
 800e7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e7c6:	60fb      	str	r3, [r7, #12]
 800e7c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	2100      	movs	r1, #0
 800e7ce:	2043      	movs	r0, #67	; 0x43
 800e7d0:	f7f6 fead 	bl	800552e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e7d4:	2043      	movs	r0, #67	; 0x43
 800e7d6:	f7f6 fec6 	bl	8005566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e7da:	bf00      	nop
 800e7dc:	3728      	adds	r7, #40	; 0x28
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	40023800 	.word	0x40023800
 800e7e8:	40020000 	.word	0x40020000

0800e7ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b082      	sub	sp, #8
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7ff f8db 	bl	800d9b6 <USBH_LL_IncTimer>
}
 800e800:	bf00      	nop
 800e802:	3708      	adds	r7, #8
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e816:	4618      	mov	r0, r3
 800e818:	f7ff f913 	bl	800da42 <USBH_LL_Connect>
}
 800e81c:	bf00      	nop
 800e81e:	3708      	adds	r7, #8
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e832:	4618      	mov	r0, r3
 800e834:	f7ff f91c 	bl	800da70 <USBH_LL_Disconnect>
}
 800e838:	bf00      	nop
 800e83a:	3708      	adds	r7, #8
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e840:	b480      	push	{r7}
 800e842:	b083      	sub	sp, #12
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	460b      	mov	r3, r1
 800e84a:	70fb      	strb	r3, [r7, #3]
 800e84c:	4613      	mov	r3, r2
 800e84e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e850:	bf00      	nop
 800e852:	370c      	adds	r7, #12
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr

0800e85c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7ff f8cd 	bl	800da0a <USBH_LL_PortEnabled>
}
 800e870:	bf00      	nop
 800e872:	3708      	adds	r7, #8
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e886:	4618      	mov	r0, r3
 800e888:	f7ff f8cd 	bl	800da26 <USBH_LL_PortDisabled>
}
 800e88c:	bf00      	nop
 800e88e:	3708      	adds	r7, #8
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b082      	sub	sp, #8
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d12a      	bne.n	800e8fc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e8a6:	4a18      	ldr	r2, [pc, #96]	; (800e908 <USBH_LL_Init+0x74>)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	4a15      	ldr	r2, [pc, #84]	; (800e908 <USBH_LL_Init+0x74>)
 800e8b2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e8b6:	4b14      	ldr	r3, [pc, #80]	; (800e908 <USBH_LL_Init+0x74>)
 800e8b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e8bc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e8be:	4b12      	ldr	r3, [pc, #72]	; (800e908 <USBH_LL_Init+0x74>)
 800e8c0:	2208      	movs	r2, #8
 800e8c2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e8c4:	4b10      	ldr	r3, [pc, #64]	; (800e908 <USBH_LL_Init+0x74>)
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e8ca:	4b0f      	ldr	r3, [pc, #60]	; (800e908 <USBH_LL_Init+0x74>)
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e8d0:	4b0d      	ldr	r3, [pc, #52]	; (800e908 <USBH_LL_Init+0x74>)
 800e8d2:	2202      	movs	r2, #2
 800e8d4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e8d6:	4b0c      	ldr	r3, [pc, #48]	; (800e908 <USBH_LL_Init+0x74>)
 800e8d8:	2200      	movs	r2, #0
 800e8da:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e8dc:	480a      	ldr	r0, [pc, #40]	; (800e908 <USBH_LL_Init+0x74>)
 800e8de:	f7f7 f844 	bl	800596a <HAL_HCD_Init>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d001      	beq.n	800e8ec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e8e8:	f7f3 f924 	bl	8001b34 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e8ec:	4806      	ldr	r0, [pc, #24]	; (800e908 <USBH_LL_Init+0x74>)
 800e8ee:	f7f7 fc21 	bl	8006134 <HAL_HCD_GetCurrentFrame>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f7ff f84e 	bl	800d998 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e8fc:	2300      	movs	r3, #0
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3708      	adds	r7, #8
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	2000092c 	.word	0x2000092c

0800e90c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e914:	2300      	movs	r3, #0
 800e916:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e918:	2300      	movs	r3, #0
 800e91a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e922:	4618      	mov	r0, r3
 800e924:	f7f7 fb90 	bl	8006048 <HAL_HCD_Start>
 800e928:	4603      	mov	r3, r0
 800e92a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e92c:	7bfb      	ldrb	r3, [r7, #15]
 800e92e:	4618      	mov	r0, r3
 800e930:	f000 f95c 	bl	800ebec <USBH_Get_USB_Status>
 800e934:	4603      	mov	r3, r0
 800e936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e938:	7bbb      	ldrb	r3, [r7, #14]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3710      	adds	r7, #16
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e942:	b580      	push	{r7, lr}
 800e944:	b084      	sub	sp, #16
 800e946:	af00      	add	r7, sp, #0
 800e948:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e94a:	2300      	movs	r3, #0
 800e94c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e94e:	2300      	movs	r3, #0
 800e950:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e958:	4618      	mov	r0, r3
 800e95a:	f7f7 fb98 	bl	800608e <HAL_HCD_Stop>
 800e95e:	4603      	mov	r3, r0
 800e960:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e962:	7bfb      	ldrb	r3, [r7, #15]
 800e964:	4618      	mov	r0, r3
 800e966:	f000 f941 	bl	800ebec <USBH_Get_USB_Status>
 800e96a:	4603      	mov	r3, r0
 800e96c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e96e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e970:	4618      	mov	r0, r3
 800e972:	3710      	adds	r7, #16
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e980:	2301      	movs	r3, #1
 800e982:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7f7 fbe0 	bl	8006150 <HAL_HCD_GetCurrentSpeed>
 800e990:	4603      	mov	r3, r0
 800e992:	2b02      	cmp	r3, #2
 800e994:	d00c      	beq.n	800e9b0 <USBH_LL_GetSpeed+0x38>
 800e996:	2b02      	cmp	r3, #2
 800e998:	d80d      	bhi.n	800e9b6 <USBH_LL_GetSpeed+0x3e>
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d002      	beq.n	800e9a4 <USBH_LL_GetSpeed+0x2c>
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	d003      	beq.n	800e9aa <USBH_LL_GetSpeed+0x32>
 800e9a2:	e008      	b.n	800e9b6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	73fb      	strb	r3, [r7, #15]
    break;
 800e9a8:	e008      	b.n	800e9bc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	73fb      	strb	r3, [r7, #15]
    break;
 800e9ae:	e005      	b.n	800e9bc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e9b0:	2302      	movs	r3, #2
 800e9b2:	73fb      	strb	r3, [r7, #15]
    break;
 800e9b4:	e002      	b.n	800e9bc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	73fb      	strb	r3, [r7, #15]
    break;
 800e9ba:	bf00      	nop
  }
  return  speed;
 800e9bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3710      	adds	r7, #16
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}

0800e9c6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e9c6:	b580      	push	{r7, lr}
 800e9c8:	b084      	sub	sp, #16
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7f7 fb73 	bl	80060c8 <HAL_HCD_ResetPort>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e9e6:	7bfb      	ldrb	r3, [r7, #15]
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f000 f8ff 	bl	800ebec <USBH_Get_USB_Status>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3710      	adds	r7, #16
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	460b      	mov	r3, r1
 800ea06:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ea0e:	78fa      	ldrb	r2, [r7, #3]
 800ea10:	4611      	mov	r1, r2
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7f7 fb7a 	bl	800610c <HAL_HCD_HC_GetXferCount>
 800ea18:	4603      	mov	r3, r0
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3708      	adds	r7, #8
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}

0800ea22 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ea22:	b590      	push	{r4, r7, lr}
 800ea24:	b089      	sub	sp, #36	; 0x24
 800ea26:	af04      	add	r7, sp, #16
 800ea28:	6078      	str	r0, [r7, #4]
 800ea2a:	4608      	mov	r0, r1
 800ea2c:	4611      	mov	r1, r2
 800ea2e:	461a      	mov	r2, r3
 800ea30:	4603      	mov	r3, r0
 800ea32:	70fb      	strb	r3, [r7, #3]
 800ea34:	460b      	mov	r3, r1
 800ea36:	70bb      	strb	r3, [r7, #2]
 800ea38:	4613      	mov	r3, r2
 800ea3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea40:	2300      	movs	r3, #0
 800ea42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ea4a:	787c      	ldrb	r4, [r7, #1]
 800ea4c:	78ba      	ldrb	r2, [r7, #2]
 800ea4e:	78f9      	ldrb	r1, [r7, #3]
 800ea50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ea52:	9302      	str	r3, [sp, #8]
 800ea54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ea58:	9301      	str	r3, [sp, #4]
 800ea5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ea5e:	9300      	str	r3, [sp, #0]
 800ea60:	4623      	mov	r3, r4
 800ea62:	f7f6 ffe4 	bl	8005a2e <HAL_HCD_HC_Init>
 800ea66:	4603      	mov	r3, r0
 800ea68:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ea6a:	7bfb      	ldrb	r3, [r7, #15]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f000 f8bd 	bl	800ebec <USBH_Get_USB_Status>
 800ea72:	4603      	mov	r3, r0
 800ea74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea76:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3714      	adds	r7, #20
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd90      	pop	{r4, r7, pc}

0800ea80 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	460b      	mov	r3, r1
 800ea8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea90:	2300      	movs	r3, #0
 800ea92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ea9a:	78fa      	ldrb	r2, [r7, #3]
 800ea9c:	4611      	mov	r1, r2
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7f7 f854 	bl	8005b4c <HAL_HCD_HC_Halt>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eaa8:	7bfb      	ldrb	r3, [r7, #15]
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f000 f89e 	bl	800ebec <USBH_Get_USB_Status>
 800eab0:	4603      	mov	r3, r0
 800eab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eab4:	7bbb      	ldrb	r3, [r7, #14]
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3710      	adds	r7, #16
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800eabe:	b590      	push	{r4, r7, lr}
 800eac0:	b089      	sub	sp, #36	; 0x24
 800eac2:	af04      	add	r7, sp, #16
 800eac4:	6078      	str	r0, [r7, #4]
 800eac6:	4608      	mov	r0, r1
 800eac8:	4611      	mov	r1, r2
 800eaca:	461a      	mov	r2, r3
 800eacc:	4603      	mov	r3, r0
 800eace:	70fb      	strb	r3, [r7, #3]
 800ead0:	460b      	mov	r3, r1
 800ead2:	70bb      	strb	r3, [r7, #2]
 800ead4:	4613      	mov	r3, r2
 800ead6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ead8:	2300      	movs	r3, #0
 800eada:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eadc:	2300      	movs	r3, #0
 800eade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800eae6:	787c      	ldrb	r4, [r7, #1]
 800eae8:	78ba      	ldrb	r2, [r7, #2]
 800eaea:	78f9      	ldrb	r1, [r7, #3]
 800eaec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800eaf0:	9303      	str	r3, [sp, #12]
 800eaf2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eaf4:	9302      	str	r3, [sp, #8]
 800eaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf8:	9301      	str	r3, [sp, #4]
 800eafa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eafe:	9300      	str	r3, [sp, #0]
 800eb00:	4623      	mov	r3, r4
 800eb02:	f7f7 f847 	bl	8005b94 <HAL_HCD_HC_SubmitRequest>
 800eb06:	4603      	mov	r3, r0
 800eb08:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800eb0a:	7bfb      	ldrb	r3, [r7, #15]
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f000 f86d 	bl	800ebec <USBH_Get_USB_Status>
 800eb12:	4603      	mov	r3, r0
 800eb14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb16:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3714      	adds	r7, #20
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd90      	pop	{r4, r7, pc}

0800eb20 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	460b      	mov	r3, r1
 800eb2a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb32:	78fa      	ldrb	r2, [r7, #3]
 800eb34:	4611      	mov	r1, r2
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7f7 fad4 	bl	80060e4 <HAL_HCD_HC_GetURBState>
 800eb3c:	4603      	mov	r3, r0
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3708      	adds	r7, #8
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}

0800eb46 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800eb46:	b580      	push	{r7, lr}
 800eb48:	b082      	sub	sp, #8
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
 800eb4e:	460b      	mov	r3, r1
 800eb50:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d103      	bne.n	800eb64 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800eb5c:	78fb      	ldrb	r3, [r7, #3]
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f000 f870 	bl	800ec44 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800eb64:	20c8      	movs	r0, #200	; 0xc8
 800eb66:	f7f6 fbe3 	bl	8005330 <HAL_Delay>
  return USBH_OK;
 800eb6a:	2300      	movs	r3, #0
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3708      	adds	r7, #8
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800eb74:	b480      	push	{r7}
 800eb76:	b085      	sub	sp, #20
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	70fb      	strb	r3, [r7, #3]
 800eb80:	4613      	mov	r3, r2
 800eb82:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb8a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800eb8c:	78fb      	ldrb	r3, [r7, #3]
 800eb8e:	68fa      	ldr	r2, [r7, #12]
 800eb90:	212c      	movs	r1, #44	; 0x2c
 800eb92:	fb01 f303 	mul.w	r3, r1, r3
 800eb96:	4413      	add	r3, r2
 800eb98:	333b      	adds	r3, #59	; 0x3b
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d009      	beq.n	800ebb4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800eba0:	78fb      	ldrb	r3, [r7, #3]
 800eba2:	68fa      	ldr	r2, [r7, #12]
 800eba4:	212c      	movs	r1, #44	; 0x2c
 800eba6:	fb01 f303 	mul.w	r3, r1, r3
 800ebaa:	4413      	add	r3, r2
 800ebac:	3354      	adds	r3, #84	; 0x54
 800ebae:	78ba      	ldrb	r2, [r7, #2]
 800ebb0:	701a      	strb	r2, [r3, #0]
 800ebb2:	e008      	b.n	800ebc6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ebb4:	78fb      	ldrb	r3, [r7, #3]
 800ebb6:	68fa      	ldr	r2, [r7, #12]
 800ebb8:	212c      	movs	r1, #44	; 0x2c
 800ebba:	fb01 f303 	mul.w	r3, r1, r3
 800ebbe:	4413      	add	r3, r2
 800ebc0:	3355      	adds	r3, #85	; 0x55
 800ebc2:	78ba      	ldrb	r2, [r7, #2]
 800ebc4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ebc6:	2300      	movs	r3, #0
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3714      	adds	r7, #20
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f7f6 fba7 	bl	8005330 <HAL_Delay>
}
 800ebe2:	bf00      	nop
 800ebe4:	3708      	adds	r7, #8
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
	...

0800ebec <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b085      	sub	sp, #20
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ebfa:	79fb      	ldrb	r3, [r7, #7]
 800ebfc:	2b03      	cmp	r3, #3
 800ebfe:	d817      	bhi.n	800ec30 <USBH_Get_USB_Status+0x44>
 800ec00:	a201      	add	r2, pc, #4	; (adr r2, 800ec08 <USBH_Get_USB_Status+0x1c>)
 800ec02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec06:	bf00      	nop
 800ec08:	0800ec19 	.word	0x0800ec19
 800ec0c:	0800ec1f 	.word	0x0800ec1f
 800ec10:	0800ec25 	.word	0x0800ec25
 800ec14:	0800ec2b 	.word	0x0800ec2b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ec1c:	e00b      	b.n	800ec36 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ec1e:	2302      	movs	r3, #2
 800ec20:	73fb      	strb	r3, [r7, #15]
    break;
 800ec22:	e008      	b.n	800ec36 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ec24:	2301      	movs	r3, #1
 800ec26:	73fb      	strb	r3, [r7, #15]
    break;
 800ec28:	e005      	b.n	800ec36 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ec2a:	2302      	movs	r3, #2
 800ec2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ec2e:	e002      	b.n	800ec36 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ec30:	2302      	movs	r3, #2
 800ec32:	73fb      	strb	r3, [r7, #15]
    break;
 800ec34:	bf00      	nop
  }
  return usb_status;
 800ec36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3714      	adds	r7, #20
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr

0800ec44 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ec4e:	79fb      	ldrb	r3, [r7, #7]
 800ec50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ec52:	79fb      	ldrb	r3, [r7, #7]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d102      	bne.n	800ec5e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ec58:	2301      	movs	r3, #1
 800ec5a:	73fb      	strb	r3, [r7, #15]
 800ec5c:	e001      	b.n	800ec62 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ec62:	7bfb      	ldrb	r3, [r7, #15]
 800ec64:	461a      	mov	r2, r3
 800ec66:	2101      	movs	r1, #1
 800ec68:	4803      	ldr	r0, [pc, #12]	; (800ec78 <MX_DriverVbusFS+0x34>)
 800ec6a:	f7f6 fe4b 	bl	8005904 <HAL_GPIO_WritePin>
}
 800ec6e:	bf00      	nop
 800ec70:	3710      	adds	r7, #16
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	40020800 	.word	0x40020800

0800ec7c <__errno>:
 800ec7c:	4b01      	ldr	r3, [pc, #4]	; (800ec84 <__errno+0x8>)
 800ec7e:	6818      	ldr	r0, [r3, #0]
 800ec80:	4770      	bx	lr
 800ec82:	bf00      	nop
 800ec84:	20000174 	.word	0x20000174

0800ec88 <__libc_init_array>:
 800ec88:	b570      	push	{r4, r5, r6, lr}
 800ec8a:	4d0d      	ldr	r5, [pc, #52]	; (800ecc0 <__libc_init_array+0x38>)
 800ec8c:	4c0d      	ldr	r4, [pc, #52]	; (800ecc4 <__libc_init_array+0x3c>)
 800ec8e:	1b64      	subs	r4, r4, r5
 800ec90:	10a4      	asrs	r4, r4, #2
 800ec92:	2600      	movs	r6, #0
 800ec94:	42a6      	cmp	r6, r4
 800ec96:	d109      	bne.n	800ecac <__libc_init_array+0x24>
 800ec98:	4d0b      	ldr	r5, [pc, #44]	; (800ecc8 <__libc_init_array+0x40>)
 800ec9a:	4c0c      	ldr	r4, [pc, #48]	; (800eccc <__libc_init_array+0x44>)
 800ec9c:	f000 f91a 	bl	800eed4 <_init>
 800eca0:	1b64      	subs	r4, r4, r5
 800eca2:	10a4      	asrs	r4, r4, #2
 800eca4:	2600      	movs	r6, #0
 800eca6:	42a6      	cmp	r6, r4
 800eca8:	d105      	bne.n	800ecb6 <__libc_init_array+0x2e>
 800ecaa:	bd70      	pop	{r4, r5, r6, pc}
 800ecac:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecb0:	4798      	blx	r3
 800ecb2:	3601      	adds	r6, #1
 800ecb4:	e7ee      	b.n	800ec94 <__libc_init_array+0xc>
 800ecb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecba:	4798      	blx	r3
 800ecbc:	3601      	adds	r6, #1
 800ecbe:	e7f2      	b.n	800eca6 <__libc_init_array+0x1e>
 800ecc0:	0800f458 	.word	0x0800f458
 800ecc4:	0800f458 	.word	0x0800f458
 800ecc8:	0800f458 	.word	0x0800f458
 800eccc:	0800f45c 	.word	0x0800f45c

0800ecd0 <malloc>:
 800ecd0:	4b02      	ldr	r3, [pc, #8]	; (800ecdc <malloc+0xc>)
 800ecd2:	4601      	mov	r1, r0
 800ecd4:	6818      	ldr	r0, [r3, #0]
 800ecd6:	f000 b871 	b.w	800edbc <_malloc_r>
 800ecda:	bf00      	nop
 800ecdc:	20000174 	.word	0x20000174

0800ece0 <free>:
 800ece0:	4b02      	ldr	r3, [pc, #8]	; (800ecec <free+0xc>)
 800ece2:	4601      	mov	r1, r0
 800ece4:	6818      	ldr	r0, [r3, #0]
 800ece6:	f000 b819 	b.w	800ed1c <_free_r>
 800ecea:	bf00      	nop
 800ecec:	20000174 	.word	0x20000174

0800ecf0 <memcpy>:
 800ecf0:	440a      	add	r2, r1
 800ecf2:	4291      	cmp	r1, r2
 800ecf4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ecf8:	d100      	bne.n	800ecfc <memcpy+0xc>
 800ecfa:	4770      	bx	lr
 800ecfc:	b510      	push	{r4, lr}
 800ecfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed06:	4291      	cmp	r1, r2
 800ed08:	d1f9      	bne.n	800ecfe <memcpy+0xe>
 800ed0a:	bd10      	pop	{r4, pc}

0800ed0c <memset>:
 800ed0c:	4402      	add	r2, r0
 800ed0e:	4603      	mov	r3, r0
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d100      	bne.n	800ed16 <memset+0xa>
 800ed14:	4770      	bx	lr
 800ed16:	f803 1b01 	strb.w	r1, [r3], #1
 800ed1a:	e7f9      	b.n	800ed10 <memset+0x4>

0800ed1c <_free_r>:
 800ed1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed1e:	2900      	cmp	r1, #0
 800ed20:	d048      	beq.n	800edb4 <_free_r+0x98>
 800ed22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed26:	9001      	str	r0, [sp, #4]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f1a1 0404 	sub.w	r4, r1, #4
 800ed2e:	bfb8      	it	lt
 800ed30:	18e4      	addlt	r4, r4, r3
 800ed32:	f000 f8c1 	bl	800eeb8 <__malloc_lock>
 800ed36:	4a20      	ldr	r2, [pc, #128]	; (800edb8 <_free_r+0x9c>)
 800ed38:	9801      	ldr	r0, [sp, #4]
 800ed3a:	6813      	ldr	r3, [r2, #0]
 800ed3c:	4615      	mov	r5, r2
 800ed3e:	b933      	cbnz	r3, 800ed4e <_free_r+0x32>
 800ed40:	6063      	str	r3, [r4, #4]
 800ed42:	6014      	str	r4, [r2, #0]
 800ed44:	b003      	add	sp, #12
 800ed46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed4a:	f000 b8bb 	b.w	800eec4 <__malloc_unlock>
 800ed4e:	42a3      	cmp	r3, r4
 800ed50:	d90b      	bls.n	800ed6a <_free_r+0x4e>
 800ed52:	6821      	ldr	r1, [r4, #0]
 800ed54:	1862      	adds	r2, r4, r1
 800ed56:	4293      	cmp	r3, r2
 800ed58:	bf04      	itt	eq
 800ed5a:	681a      	ldreq	r2, [r3, #0]
 800ed5c:	685b      	ldreq	r3, [r3, #4]
 800ed5e:	6063      	str	r3, [r4, #4]
 800ed60:	bf04      	itt	eq
 800ed62:	1852      	addeq	r2, r2, r1
 800ed64:	6022      	streq	r2, [r4, #0]
 800ed66:	602c      	str	r4, [r5, #0]
 800ed68:	e7ec      	b.n	800ed44 <_free_r+0x28>
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	b10b      	cbz	r3, 800ed74 <_free_r+0x58>
 800ed70:	42a3      	cmp	r3, r4
 800ed72:	d9fa      	bls.n	800ed6a <_free_r+0x4e>
 800ed74:	6811      	ldr	r1, [r2, #0]
 800ed76:	1855      	adds	r5, r2, r1
 800ed78:	42a5      	cmp	r5, r4
 800ed7a:	d10b      	bne.n	800ed94 <_free_r+0x78>
 800ed7c:	6824      	ldr	r4, [r4, #0]
 800ed7e:	4421      	add	r1, r4
 800ed80:	1854      	adds	r4, r2, r1
 800ed82:	42a3      	cmp	r3, r4
 800ed84:	6011      	str	r1, [r2, #0]
 800ed86:	d1dd      	bne.n	800ed44 <_free_r+0x28>
 800ed88:	681c      	ldr	r4, [r3, #0]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	6053      	str	r3, [r2, #4]
 800ed8e:	4421      	add	r1, r4
 800ed90:	6011      	str	r1, [r2, #0]
 800ed92:	e7d7      	b.n	800ed44 <_free_r+0x28>
 800ed94:	d902      	bls.n	800ed9c <_free_r+0x80>
 800ed96:	230c      	movs	r3, #12
 800ed98:	6003      	str	r3, [r0, #0]
 800ed9a:	e7d3      	b.n	800ed44 <_free_r+0x28>
 800ed9c:	6825      	ldr	r5, [r4, #0]
 800ed9e:	1961      	adds	r1, r4, r5
 800eda0:	428b      	cmp	r3, r1
 800eda2:	bf04      	itt	eq
 800eda4:	6819      	ldreq	r1, [r3, #0]
 800eda6:	685b      	ldreq	r3, [r3, #4]
 800eda8:	6063      	str	r3, [r4, #4]
 800edaa:	bf04      	itt	eq
 800edac:	1949      	addeq	r1, r1, r5
 800edae:	6021      	streq	r1, [r4, #0]
 800edb0:	6054      	str	r4, [r2, #4]
 800edb2:	e7c7      	b.n	800ed44 <_free_r+0x28>
 800edb4:	b003      	add	sp, #12
 800edb6:	bd30      	pop	{r4, r5, pc}
 800edb8:	20000204 	.word	0x20000204

0800edbc <_malloc_r>:
 800edbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edbe:	1ccd      	adds	r5, r1, #3
 800edc0:	f025 0503 	bic.w	r5, r5, #3
 800edc4:	3508      	adds	r5, #8
 800edc6:	2d0c      	cmp	r5, #12
 800edc8:	bf38      	it	cc
 800edca:	250c      	movcc	r5, #12
 800edcc:	2d00      	cmp	r5, #0
 800edce:	4606      	mov	r6, r0
 800edd0:	db01      	blt.n	800edd6 <_malloc_r+0x1a>
 800edd2:	42a9      	cmp	r1, r5
 800edd4:	d903      	bls.n	800edde <_malloc_r+0x22>
 800edd6:	230c      	movs	r3, #12
 800edd8:	6033      	str	r3, [r6, #0]
 800edda:	2000      	movs	r0, #0
 800eddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edde:	f000 f86b 	bl	800eeb8 <__malloc_lock>
 800ede2:	4921      	ldr	r1, [pc, #132]	; (800ee68 <_malloc_r+0xac>)
 800ede4:	680a      	ldr	r2, [r1, #0]
 800ede6:	4614      	mov	r4, r2
 800ede8:	b99c      	cbnz	r4, 800ee12 <_malloc_r+0x56>
 800edea:	4f20      	ldr	r7, [pc, #128]	; (800ee6c <_malloc_r+0xb0>)
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	b923      	cbnz	r3, 800edfa <_malloc_r+0x3e>
 800edf0:	4621      	mov	r1, r4
 800edf2:	4630      	mov	r0, r6
 800edf4:	f000 f83c 	bl	800ee70 <_sbrk_r>
 800edf8:	6038      	str	r0, [r7, #0]
 800edfa:	4629      	mov	r1, r5
 800edfc:	4630      	mov	r0, r6
 800edfe:	f000 f837 	bl	800ee70 <_sbrk_r>
 800ee02:	1c43      	adds	r3, r0, #1
 800ee04:	d123      	bne.n	800ee4e <_malloc_r+0x92>
 800ee06:	230c      	movs	r3, #12
 800ee08:	6033      	str	r3, [r6, #0]
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	f000 f85a 	bl	800eec4 <__malloc_unlock>
 800ee10:	e7e3      	b.n	800edda <_malloc_r+0x1e>
 800ee12:	6823      	ldr	r3, [r4, #0]
 800ee14:	1b5b      	subs	r3, r3, r5
 800ee16:	d417      	bmi.n	800ee48 <_malloc_r+0x8c>
 800ee18:	2b0b      	cmp	r3, #11
 800ee1a:	d903      	bls.n	800ee24 <_malloc_r+0x68>
 800ee1c:	6023      	str	r3, [r4, #0]
 800ee1e:	441c      	add	r4, r3
 800ee20:	6025      	str	r5, [r4, #0]
 800ee22:	e004      	b.n	800ee2e <_malloc_r+0x72>
 800ee24:	6863      	ldr	r3, [r4, #4]
 800ee26:	42a2      	cmp	r2, r4
 800ee28:	bf0c      	ite	eq
 800ee2a:	600b      	streq	r3, [r1, #0]
 800ee2c:	6053      	strne	r3, [r2, #4]
 800ee2e:	4630      	mov	r0, r6
 800ee30:	f000 f848 	bl	800eec4 <__malloc_unlock>
 800ee34:	f104 000b 	add.w	r0, r4, #11
 800ee38:	1d23      	adds	r3, r4, #4
 800ee3a:	f020 0007 	bic.w	r0, r0, #7
 800ee3e:	1ac2      	subs	r2, r0, r3
 800ee40:	d0cc      	beq.n	800eddc <_malloc_r+0x20>
 800ee42:	1a1b      	subs	r3, r3, r0
 800ee44:	50a3      	str	r3, [r4, r2]
 800ee46:	e7c9      	b.n	800eddc <_malloc_r+0x20>
 800ee48:	4622      	mov	r2, r4
 800ee4a:	6864      	ldr	r4, [r4, #4]
 800ee4c:	e7cc      	b.n	800ede8 <_malloc_r+0x2c>
 800ee4e:	1cc4      	adds	r4, r0, #3
 800ee50:	f024 0403 	bic.w	r4, r4, #3
 800ee54:	42a0      	cmp	r0, r4
 800ee56:	d0e3      	beq.n	800ee20 <_malloc_r+0x64>
 800ee58:	1a21      	subs	r1, r4, r0
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	f000 f808 	bl	800ee70 <_sbrk_r>
 800ee60:	3001      	adds	r0, #1
 800ee62:	d1dd      	bne.n	800ee20 <_malloc_r+0x64>
 800ee64:	e7cf      	b.n	800ee06 <_malloc_r+0x4a>
 800ee66:	bf00      	nop
 800ee68:	20000204 	.word	0x20000204
 800ee6c:	20000208 	.word	0x20000208

0800ee70 <_sbrk_r>:
 800ee70:	b538      	push	{r3, r4, r5, lr}
 800ee72:	4d06      	ldr	r5, [pc, #24]	; (800ee8c <_sbrk_r+0x1c>)
 800ee74:	2300      	movs	r3, #0
 800ee76:	4604      	mov	r4, r0
 800ee78:	4608      	mov	r0, r1
 800ee7a:	602b      	str	r3, [r5, #0]
 800ee7c:	f7f3 f96e 	bl	800215c <_sbrk>
 800ee80:	1c43      	adds	r3, r0, #1
 800ee82:	d102      	bne.n	800ee8a <_sbrk_r+0x1a>
 800ee84:	682b      	ldr	r3, [r5, #0]
 800ee86:	b103      	cbz	r3, 800ee8a <_sbrk_r+0x1a>
 800ee88:	6023      	str	r3, [r4, #0]
 800ee8a:	bd38      	pop	{r3, r4, r5, pc}
 800ee8c:	20000c30 	.word	0x20000c30

0800ee90 <strncat>:
 800ee90:	b530      	push	{r4, r5, lr}
 800ee92:	4604      	mov	r4, r0
 800ee94:	7825      	ldrb	r5, [r4, #0]
 800ee96:	4623      	mov	r3, r4
 800ee98:	3401      	adds	r4, #1
 800ee9a:	2d00      	cmp	r5, #0
 800ee9c:	d1fa      	bne.n	800ee94 <strncat+0x4>
 800ee9e:	3a01      	subs	r2, #1
 800eea0:	d304      	bcc.n	800eeac <strncat+0x1c>
 800eea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eea6:	f803 4b01 	strb.w	r4, [r3], #1
 800eeaa:	b904      	cbnz	r4, 800eeae <strncat+0x1e>
 800eeac:	bd30      	pop	{r4, r5, pc}
 800eeae:	2a00      	cmp	r2, #0
 800eeb0:	d1f5      	bne.n	800ee9e <strncat+0xe>
 800eeb2:	701a      	strb	r2, [r3, #0]
 800eeb4:	e7f3      	b.n	800ee9e <strncat+0xe>
	...

0800eeb8 <__malloc_lock>:
 800eeb8:	4801      	ldr	r0, [pc, #4]	; (800eec0 <__malloc_lock+0x8>)
 800eeba:	f000 b809 	b.w	800eed0 <__retarget_lock_acquire_recursive>
 800eebe:	bf00      	nop
 800eec0:	20000c38 	.word	0x20000c38

0800eec4 <__malloc_unlock>:
 800eec4:	4801      	ldr	r0, [pc, #4]	; (800eecc <__malloc_unlock+0x8>)
 800eec6:	f000 b804 	b.w	800eed2 <__retarget_lock_release_recursive>
 800eeca:	bf00      	nop
 800eecc:	20000c38 	.word	0x20000c38

0800eed0 <__retarget_lock_acquire_recursive>:
 800eed0:	4770      	bx	lr

0800eed2 <__retarget_lock_release_recursive>:
 800eed2:	4770      	bx	lr

0800eed4 <_init>:
 800eed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eed6:	bf00      	nop
 800eed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeda:	bc08      	pop	{r3}
 800eedc:	469e      	mov	lr, r3
 800eede:	4770      	bx	lr

0800eee0 <_fini>:
 800eee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eee2:	bf00      	nop
 800eee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eee6:	bc08      	pop	{r3}
 800eee8:	469e      	mov	lr, r3
 800eeea:	4770      	bx	lr
